;; Validations and Tests for the IDE - to be run after the build
;; Seedling IDE ðŸŒ±

; Copyright (c) 2022-2023, Kina, LLC
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:

; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.

; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.


;; When (load)ed, this file will auto start the validations in another
;; panel



(if (contains? "seedling-tests" (namespaces))
    (progn
       (use_ns user)
       (delete_namespace "seedling-tests")))

(create_namespace "seedling-tests")
(use_ns seedling-tests)
(declare (namespace seedling-tests))

(use_symbols "user" 
   [ place_control panel eval_in_iframe register_event_handler notify remove_event_handler quick_alert alert_box alert_on_error set_focus_to *last_focus*
     table tr td div span h4 th tbody thead dtable `
     defcontrol generate_id commands_button set_style 
     control_frame focus_to compute_name_for_control get_control_by_name rblock normalize_file_path
     add_class remove_class make_named_layout split_view_vertical get_remote_sys_evaluator])

(defparameter seedling_booted false)

(defglobal tframe (div {} "Placeholder"))

;; check for boot
(remove_event_handler "initializer" "complete" "child_initializer_complete")

(html/create_css_entry ".juno-test-pass"
                       [["background" "#00FF3010"]
                        ["font-weight" "bold"]
                        ["text-align" "center"]])

(html/create_css_entry ".juno-test-fail"
                       [["background" "#FF003010"]
                        ["font-weight" "bold"]
                        ["text-align" "center"]])


;; setup 

(defmacro ev (quoted_lisp)
   `(eval_in_iframe tframe ,#quoted_lisp))

(defun define_keysend ()
   (progn
      (ev (quote (defun send_keydown (sequence target)
                 (when (is_string? sequence)
                    (let
                       ((comps (split_by "-" sequence))
                        (ctrl? (contains? "Ctrl" comps))
                        (meta? (contains? "Command" comps))
                        (alt? (contains? "Alt" comps))
                        (shift? (contains? "Shift" comps))
                        (key (last comps))
                        (key_code key)
                        (target_elem (cond
                                        (and (is_control? target)
                                             target.editor.textInput)
                                        (-> target.editor.textInput `getElement)
                                        (is_control? target)
                                        target.view
                                        (is_element? target)
                                        target
                                        (is_array? target) ;; path from body
                                        (aif (resolve_dom_path target (first (get_by_tag "body")))
                                             it
                                             nil)
                                        (and *last_focus*
                                           *last_focus*.editor.textInput)
                                        (-> *last_focus*.editor.textInput `getElement)
                                        (is_control? *last_focus*)
                                        (prop *last_focus* `view)
                                        else
                                        nil)))
                       
                       (cond 
                          (contains? key [ "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" ])
                          (= key_code (+ "Digit" key))
                          else
                          (= key_code key))
                       (try
                          (progn
                             (defvar event (new KeyboardEvent `keydown
                                                (to_object
                                                   [[`bubbles true]
                                                    [`srcElement: target_elem]
                                                    [`shiftKey shift?]
                                                    [`key key]
                                                    [`code key_code]
                                                    [`srcElement target_elem]
                                                    [`keyCode (cond 
                                                                 (== key "Enter")
                                                                 10
                                                                 (== key "Backslash")
                                                                 92
                                                                 else
                                                                 (-> key `charCodeAt))]
                                                    [`metaKey meta?]
                                                    [`ctrlKey ctrl?]
                                                    [`altKey alt?]])))
                             (handle_app_key_down_event event))
                          (catch Error (e)
                             e.message)))))))))

(defun open_test_frame (url element_to_replace)
   (let
      ((frame (div { } "Opening.."))
       (timer nil))
      (log "Starting test_frame for: " url)
      (new Promise
         (fn (resolve)
            (alert_on_error "Cannot start the iframe"
               (= seedling_booted false)
               (= timer (setTimeout (fn ()
                                       (resolve false))
                                    45000))
               (log "setting event managers")
               (remove_event_handler "initializer" "complete" "child_initializer_complete")
               (register_event_handler "initializer" "complete" "child_initializer_complete"
                  (fn (event)
                     (progc
                        (log "event for test frame: " event)
                        (when (event.child_frame)
                           (clearTimeout timer)
                           (= timer nil)
                           (set_focus_to user/*last_focus*)
                           (= seedling_booted true)
                           (quick_alert "Booted Seedling")
                           (when tframe
                              (define_keysend)
                              (remove_event_handler "initializer" "complete" "child_initializer_complete")
                              (register_event_handler "initializer" "complete" "child_initializer_complete"
                                 (fn (event)
                                    (when (event.child_frame)
                                       (define_keysend)))))
                           (resolve true)))))
               (log "Opening: " url)
               (= tframe (html/iframe { src: url `style: "width: 100%; height: 100%;"} ))
               (-> element_to_replace `replaceWith tframe))))))



(defun make_test_frame (url)
   (progn
      (defvar v (div { } "Opening"))
      (place_control `right (panel "Test Frame" v))
      (open_test_frame (or url (+ "/env/seedling.html?theme=" (encodeURIComponent *env_config*.application.global_theme))) v)))
         
;(make_test_frame "/env/seedling_build.html")

(defun validate_result (result)
   (progn
      (aif (apply and* (values result))
           true
           result)))

(defmacro log (`& args)
   `(user/log ,@args))


;; placeholder - will be filled in by the control
(defparameter kcom {})

(defun populate_kcom ()
   (= kcom
      (to_object
         (ev `(for (key (keys (prop *key_bindings* `global)))
                   [key (first (split_by "|" (resolve_path [ `global key (user/get_operating_platform) ] *key_bindings*)))])))))

(defun kcode (op)
   (aif (prop kcom op)
        (ev `(send_keydown ,#it))
        (throw Error (+ "Invalid key code for: " op))))

(defun notifications ()
   (ev `(for_items (item (-> (get_by_id "lower_right_corner") `querySelectorAll ".juno-notification"))
            item.innerText)))

(defun with_notification (idx action)
   (when action
      (ev `(let
              ((elem (prop (-> (get_by_id "lower_right_corner") `querySelectorAll ".juno-notification") ,#idx)))
              (when elem
                 (,#action elem))))))
      

(defun click_notification (idx)
   (with_notification idx `(fn (elem) (-> elem `click))))


;; primitives...

(defun layout ()
   (ev `(control_name (get_current_layout_control))))

(defun layouts ()
   (ev `(each (available_layouts) control_name)))

(defun focused_control ()
   (ev `(resolve_path [ `options `last_focus_id ] (get_current_layout_control))))

(defun last_focus ()
   (ev `(control_id *last_focus*)))

(defun switch_to (cname)
   (ev `(show_control (get_control_by_name ,#cname))))

(defun name_of (id)
   (ev `(aif (get_control_by_id ,#id)
             (control_name it))))

(defun id_of (name)
   (ev `(aif (get_control_by_name ,#name)
             (control_id it))))

(defun options_for_id (id)
   (ev `(aif (get_control_by_id ,#id)
             (prop it `options))))

(defun options_for_name (name)
   (ev `(aif (get_control_by_name ,#name)
             (prop it `options))))


(defun hide_others ()
   (ev `(hide_others_in_layout *last_focus*)))

(defun new_layout_named (name ctlname)
   (when name
      (if ctlname
         (ev `(progn
                 (move_control_to_new_layout (get_control_by_name ,#ctlname) ,#name)))
         (ev `(make_named_layout ,#name (empty_selection_control))))
      true))

(defun remove_layout (name)
   (when name
      (log "remove_layout: showing control f0: " (ev `(show_control (frame_0))))
      (log "layout is now: " (layout))
      (defvar result
         (ev `(try 
                 (progn
                    (remove_named_layout ,#name))
                 (catch Error (e)
                    e.message))))
      (log "removing_layout: " name result)
      {
          `layout_removed: (and (not (contains? name (ev `(named_layouts))))
                                (or (== result true)
                                    result.message))
                                
      }))




(defun split_vertically ()
   (ev `(split_control `vertical)))

(defun split_horizontally ()
   (ev `(split_control `horizontal)))

(defun holding_tank_control_names ()
   (ev `(each (holding_tank_controls) control_name)))

(defun holding_tank_control_ids ()
   (ev `(each (holding_tank_controls) control_id)))
   
(defun control_value (cid)
   (when cid
      (ev `(aif (get_control_by_id ,#cid)
                (-> it `get)
                nil))))

(defun controls_visible ()
   (ev `(each (user/controls_in_layout (user/get_current_layout_control) true) control_name)))

(defun current_controls ()
   (ev `(each (current_controls) control_name)))



;; composites...
;; resets to the "home_state"


(defun home_state ()
   (progn
      (unless (== (layout) "Frame 0")
         (switch_to "Frame 0")
         (reduce (layout_name (layouts))
            (unless (== layout_name "Frame 0")
               (remove_layout layout_name))))
         
      (switch_to "*scratch*")
      (hide_others)
      { scratch_buffer_only: (and (== (name_of (focused_control)) "*scratch*")
                                  (== (last_focus) (focused_control)))
        controls_visible: (progn
                             (defvar ctls (controls_visible))
                             (and (== ctls.0 "*scratch*")
                                  (== "Frame 0" (layout)))) 
          
      }))

(defun reset_state ()
   (let
      ((scratch_editors 0))
      (ev
         `(progn
             (unless (get_control_by_name "*scratch*")
                (= *scratch* ";; reset scratch buffer")
                (new_buffer {  `path: [ "*scratch*" ] } ))
             (defvar id (control_id (get_control_by_name "*scratch*")))
             (if id
                (close_editors_for_path [ "*scratch*" ] id))))
      (= scratch_editors
         (ev `(if (get_control_by_name "*scratch*")
                  (each (get_editors_for_path [ "*scratch*"]) `options)
                  [])))
      (log "reset_state: scratch_editors: " scratch_editors)
      {
          single_scratch: (and (ev `(get_control_by_name "*scratch*"))
                                    (== 1 (length scratch_editors)))
          is_primary: (not (prop (first scratch_editors) `clone_with_editor_id))
      }))

(defun reset_and_home_state ()
   (progn
      (ev `(close_editors_for_path [ "*scratch*"]))
      (reset_state)
      (home_state)))


(defun split_editor_vertically () 
   (progn
      (reset_and_home_state)
      (ev `(-> (get_control_by_name `*scratch*) `set ""))
      (split_vertically)
      (ev `(-> (get_control_by_name `*scratch*) `set ";;This is a comment.\n\n(defun tester (a b)\n  ( + a b))\n\n(tester a b)\n"))
      (kcode `save_file)
      (defvar s1opts (options_for_name "*scratch*"))
      (defvar s2opts (options_for_name "*scratch* - 2"))
      { `focused: (== (name_of (focused_control)) "*scratch* - 2")
        `clone_tag: (== s2opts.clone_with_editor_id s1opts.id)
        `evaluator_match: (== s2opts.evaluator_id s1opts.evaluator_id)
        `evaluator_exists: (ev `(is_function? (prop (get_control_by_id ,#s2opts.evaluator_id) `evaluate)))
        `path_match: (== (as_lisp s1opts.path) (as_lisp s2opts.path))
        `value_match: (== (control_value s2opts.id) (control_value s1opts.id))
        `group_match: (== s1opts.group_name s2opts.group_name) }))

(defun split_editor_horizontally () 
   (progn
      (reset_and_home_state)
      (ev `(-> (get_control_by_name `*scratch*) `set ""))
      (split_horizontally)
      (ev `(-> (get_control_by_name `*scratch*) `set ";;This is a comment.\n\n(defun tester (a b)\n  ( + a b))\n\n(tester a b)\n"))
      (kcode `save_file)
      (defvar s1opts (options_for_name "*scratch*"))
      (defvar s2opts (options_for_name "*scratch* - 2"))
      { `focused: (== (name_of (focused_control)) "*scratch* - 2")
        `clone_tag: (== s2opts.clone_with_editor_id s1opts.id)
        `repl_match: (== s2opts.evaluator_id s1opts.evaluator_id)
        `repl_exists: (ev `(is_function? (prop (get_control_by_id ,#s2opts.evaluator_id) `evaluate)))
        `path_match: (== (as_lisp s1opts.path) (as_lisp s2opts.path))
        `value_match: (== (control_value s2opts.id) (control_value s1opts.id))
        `correct_controls: (== "[\"*scratch*\" \"*scratch* - 2\"]" (as_lisp (controls_visible)))
        `group_match: (== s1opts.group_name s2opts.group_name) }))

           
(defun swap_control ()
   (progn
      (home_state)
      (ev `(swap_control (get_control_by_name "*scratch*") *system_repl*))
      {
          `focused_correctly: (== (last_focus) (ev `(control_id *system_repl*)))
      }))
      
(defun open_documentation_frame_0 ()
   (progn
      (home_state)
      (ev `(show_help_panel))
      {
          `focused: (== (last_focus) (ev `(control_id (juno_documentation))))
          `correct_controls: (== "[\"*scratch*\" \"Juno Documentation - Frame 0\"]"
                                 (as_lisp (controls_visible)))
      }))

(defun cycle_panel_focus ()
   (progn
      (reset_and_home_state)
      (split_horizontally)
      (defvar acc
         {
           `focus_ok_on_initial_split: (== (name_of (focused_control)) "*scratch* - 2")
           `num_windows_after_initial_split_is_2: (== 2 (length (controls_visible)))
           `primary_is_visible: (contains? "*scratch*" (controls_visible))
           })
      (kcode `next_displayed_control)
      (set_prop acc
         `focus_ok_after_focus_change (== (name_of (focused_control)) "*scratch*")
         `num_windows_after_focus_change_is_2: (== 2 (length (controls_visible))))
      acc))

(defun hidden_control_cycle ()
   (progn
      (reset_and_home_state)
      (split_vertically)
      (defvar acc
         {
           `focus_ok_on_initial_split: (== (name_of (focused_control)) "*scratch* - 2")
           `num_windows_after_initial_split_is_2: (== 2 (length (controls_visible)))
           `primary_is_visible: (contains? "*scratch*" (controls_visible))
           })
      (kcode `next_hidden_control)
      (set_prop acc
         `focus_ok_after_focus_change_1 (or (== (name_of (focused_control)) "Juno REPL")
                                          (== (name_of (focused_control)) "Juno Documentation - Frame 0"))
         `num_windows_after_focus_change_1_is_2: (== 2 (length (controls_visible))))
      (kcode `next_hidden_control)
      (set_prop acc
         `focus_ok_after_focus_change_2 (or (== (name_of (focused_control)) "Juno REPL")
                                          (== (name_of (focused_control)) "Juno Documentation - Frame 0"))
         `num_windows_after_focus_change_2_is_2: (== 2 (length (controls_visible)))
         `last_focus_matches_layout_focus (== (focused_control) (last_focus)))
      acc))


(defun jump_to_definition (sname)
   (progn
      (home_state)
      (ev `(open_symbol_definition ,#sname))
      (assert (== (last_focus) (focused_control)))
      (defvar cname (ev `(control_name (get_control_by_id ,#(focused_control)))))
      (defvar editr (ev `(object_methods (prop (get_control_by_id ,#(focused_control)) `editor))))
      (log "Cursor pos: " (ev `(-> (prop (get_control_by_id ,#(focused_control)) `editor) `getCursorPosition)))
      ;(log "Got editor")
      (ev `(-> (prop (get_control_by_id ,#(focused_control)) `editor) `navigateRight))
      ;(log "Navigated right?")
      (defvar lisp (read_lisp (ev `(progn
                                      (select_to_root_form (prop (get_control_by_id ,#(focused_control)) `editor))
                                      (-> (get_control_by_id ,#(focused_control)) `get_selected_text)))))
      
      ;; now close the buffer
      (when lisp
         (kcode "close_control"))
      
      {
          `symbol: (== (desym_ref (second lisp)) sname)
          `closed_correctly: (ev `(not (contains? "browser_initializer.juno" (current_controls))))
      }))

(defun key_split_horizontal ()
   (progn
      (home_state)
      (kcode "split_horizontally")))


(defun key_split_vertical ()
   (progn
      (home_state)
      (kcode "split_vertically")))
    
(defun key_split_sequence ()
   (progn
      (defvar acc {})
      (reset_and_home_state)
      (ev `(log "starting split sequence from home state"))
      (kcode "split_vertically")
      (kcode "split_horizontally")
      (set_prop acc
         `max_visible  (== (as_lisp ["*scratch*"
                                     "*scratch* - 2"
                                     "*scratch* - 3"])
                           (as_lisp (controls_visible))))
      ;; collapse back to 1 control
      
      (log "key_split_sequence: focus:" (name_of (last_focus)) (name_of (focused_control)) "visible controls: " (controls_visible))
      (sleep 2)
      
      (kcode "hide_others")
      (log "key_split_sequence: only 1 control should be visible: " (controls_visible))
      ;; name should be scratch
      (set_prop acc
         `final_layout_correct
         (and (== 1 (length (controls_visible)))
              (starts_with? "*scratch*" (join "" (controls_visible)))))
      acc))

(defun named_layout_creation ()
   (progn
      (defvar result {})
      (home_state)
      (new_layout_named "test" "*scratch*")
      (log "named_layout_creation: " (last_focus) (focused_control))
      (= result 
         {
          `layout_correct: (== (layout) "test")
          `control_correct: (== (first (controls_visible)) "*scratch*")
          `focus_correct: (== (last_focus) (focused_control))
          })
      (switch_to "Frame 0")
      (set_prop result
           `focus_correct_on_switch (== (last_focus) (focused_control))
           `layout_correct_on_switch (== (layout) "Frame 0")
           )
      (switch_to "test")
      (set_prop result
           `focus_correct_on_switch_back (== (last_focus) (focused_control))
           `control_correct_on_switch_back  (== (first (controls_visible)) "*scratch*")
           `layout_correct_on_switch_back (== (layout) "test")
           )
      (set_prop result
         `new_layout_removed (or (prop (remove_layout "test") `layout_removed) false ))
      result))
      
(defun locked_layout_changes ()
   (progn
      (defvar result {})
      (home_state)
      (new_layout_named "lock-test" "*scratch*")
      (= result 
         {
          `layout_correct: (== (layout) "lock-test")
          `control_correct: (== (first (controls_visible)) "*scratch*")
          `focus_correct: (== (last_focus) (focused_control))
          })
      (if (validate_result result)
          (progn
             (kcode "split_horizontally")
             (set_prop result
                `layout_change_prevented (and (== 1 (length (controls_visible)))
                                              (== (first (controls_visible)) "*scratch*")
                                              (== (last_focus) (focused_control))
                                              (== (name_of (focused_control)) "*scratch*"))))
          (set_prop result
             `layout_change_prevented
             "not performed due to invalid layout state"))
          
      
      (set_prop result
         `new_layout_removed: (or (== (prop (remove_layout "lock-test") `layout_removed) true) false ))
      result))
      



(defun save_of_symbol ()
   (progn
      (home_state)
      (ev `(-> (get_control_by_name `*scratch*) `set "(+ 2 2)"))
      (defvar acc
         { `needs_save_correct: (ev `(-> (get_control_by_name "*scratch*") `needs_save?))
           `content_correct: (ev `(== "(+ 2 2)" (-> (get_control_by_name "*scratch*") `get))) })
      (kcode `save_file)
      (set_prop acc
         `saved_ok (ev `(and (not (-> (get_control_by_name "*scratch*") `needs_save?))
                              (== *scratch* "(+ 2 2)"))))
      acc))
                         
(defun save_of_symbol_for_multiple_buffers_1 ()
   (progn
      (reset_and_home_state)
      (ev `(-> (get_control_by_name `*scratch*) `set "(* 4 4)"))
      (kcode "split_horizontally")
      (kcode "split_vertically")
      (log "save state: " 
         (ev `(-> (get_control_by_name "*scratch*") `needs_save?))
         (ev `(-> (get_control_by_name "*scratch* - 2") `needs_save?))
         (ev `(-> (get_control_by_name "*scratch* - 3") `needs_save?)))
      (defvar acc
         { `needs_save_correct: (and (ev `(-> (get_control_by_name "*scratch*") `needs_save?))
                                     (ev `(-> (get_control_by_name "*scratch* - 2") `needs_save?))
                                     (ev `(-> (get_control_by_name "*scratch* - 3") `needs_save?)))
           `content_correct: (and (ev `(== "(* 4 4)" (-> (get_control_by_name "*scratch*") `get)))
                                  (ev `(== "(* 4 4)" (-> (get_control_by_name "*scratch* - 2") `get)))
                                  (ev `(== "(* 4 4)" (-> (get_control_by_name "*scratch* - 3") `get)))) })
      
      (kcode "save_file")
      (set_prop acc
         `saved_ok (ev `(and (not (-> (get_control_by_name "*scratch*") `needs_save?))
                              (not (-> (get_control_by_name "*scratch* - 2") `needs_save?))
                              (not (-> (get_control_by_name "*scratch* - 3") `needs_save?))
                              (== *scratch* "(* 4 4)"))))
      acc))                  
           
(defun save_of_symbol_for_multiple_buffers_2 ()
   (progn
      (reset_and_home_state)
      (kcode `split_horizontally)
      (ev `(-> (get_control_by_name `*scratch*) `set "(* 4 4)"))
      (kcode `split_vertically)
      (log "save state: " 
         (ev `(-> (get_control_by_name "*scratch*") `needs_save?))
         (ev `(-> (get_control_by_name "*scratch* - 2") `needs_save?))
         (ev `(-> (get_control_by_name "*scratch* - 3") `needs_save?)))
      (defvar acc
         { `needs_save_correct: (and (ev `(-> (get_control_by_name "*scratch*") `needs_save?))
                                     (ev `(-> (get_control_by_name "*scratch* - 2") `needs_save?))
                                     (ev `(-> (get_control_by_name "*scratch* - 3") `needs_save?)))
           `content_correct: (and (ev `(== "(* 4 4)" (-> (get_control_by_name "*scratch*") `get)))
                                  (ev `(== "(* 4 4)" (-> (get_control_by_name "*scratch* - 2") `get)))
                                  (ev `(== "(* 4 4)" (-> (get_control_by_name "*scratch* - 3") `get)))) })
      (kcode "save_file")
      (set_prop acc
         `saved_ok: (ev `(and (not (-> (get_control_by_name "*scratch*") `needs_save?))
                              (not (-> (get_control_by_name "*scratch* - 2") `needs_save?))
                              (not (-> (get_control_by_name "*scratch* - 3") `needs_save?))
                              (== *scratch* "(* 4 4)"))))
      acc))    

(defun remote_file_access_reading ()
   (progn
      (reset_and_home_state)
      (ev `(edit_file { `filename: (normalize_file_path "./src/core.lisp") }))
      (defvar acc
         {
           name_correct: (== (name_of (last_focus)) "core.lisp")
           focus_correct: (and (== (name_of (last_focus)) "core.lisp")
                               (== (name_of (focused_control)) "core.lisp"))
           content_correct: (progn
                               (ev `(open_symbol_definition "scan_str"))
                               (== (name_of (last_focus)) "core.lisp"))
           mode_correct: (ev `(== "juno" (-> (get_control_by_name "core.lisp") `get_mode)))
           
           })
      (defvar lisp (read_lisp (ev `(progn
                                      (select_to_root_form (prop (get_control_by_id ,#(focused_control)) `editor))
                                      (-> (get_control_by_id ,#(focused_control)) `get_selected_text)))))
      (set_prop acc
         `correct_symbol_highlighted (== "scan_str" (desym_ref (second lisp))))
      
      (ev `(-> (get_control_by_name "core.lisp") `set_read_only true))
      (set_prop acc
         `read_only_correct (ev `(and (-> (get_control_by_name "core.lisp") `read_only?)
                                      (== (resolve_path [ `options `read_only ] (get_control_by_name "core.lisp")) true)
                                      )))
      (kcode `close_control)
      (set_prop acc
         `control_closed_ok (not (contains? "core.lisp" (controls_visible))))
      acc))

(defun remote_file_access_writing ()
   (progn
      (reset_and_home_state)
      (rblock
         (if (sys/is_file? "./working/test-validation-file.juno")
             (sys/delete_file "./working/test-validation-file.juno")))
      (ev `(new_file (normalize_file_path "working/test-validation-file.juno")))
      (defvar acc {
          `new_buffer_visible: (and (== "test-validation-file.juno" (first (controls_visible)))
                                    (== (name_of (focused_control)) "test-validation-file.juno"))
          })
      (ev `(-> (get_control_by_name "test-validation-file.juno") `set "(* 10 5)"))
      (kcode "save_file")
      (defvar contents
         (rblock (read_text_file  "./working/test-validation-file.juno")))
      (set_prop acc
         `file_saved (rblock
                       (sys/is_file? "./working/test-validation-file.juno"))
         `contents_correct (== "(* 10 5)" 
                              contents)
         `save_indicated (ev `(== false (-> (get_control_by_name "test-validation-file.juno") `needs_save?))))
      (kcode `close_control)
      (set_prop acc
         `control_closed_ok (not (contains? "test-validation-file.juno" (controls_visible))))
      (rblock
         (if (sys/is_file? "./working/test-validation-file.juno")
             (sys/delete_file "./working/test-validation-file.juno")))
      
      ;(set_prop acc
       ;  `intentional_failure "This is the failure")
      acc))

(defun css_mode ()
   (progn
      (reset_and_home_state)
      (rblock
         (if (sys/is_file? "./working/test-validation-file.css")
             (sys/delete_file "./working/test-validation-file.css")))
      
      (ev `(edit_file { `filename: (normalize_file_path "./working/test-validation-file.css") `create_mode: true }))
      (defvar acc {
                    `mode_correct: (ev `(== "css" (-> (get_control_by_name "test-validation-file.css") `get_mode)))
                    `name_correct: (and (== (name_of (last_focus)) "test-validation-file.css")
                                        (== (last_focus) (focused_control)))
               })
      (ev `(-> (get_control_by_name "test-validation-file.css") `set "/* Test Content */\n\n.juno-validation-test-class {\n  background: #000000;\n  color: white;\n}\n\n")) 
      (set_prop acc
         `evaluation_worked
         (ev `(progn
                 (remove_css_entry ".juno-validation-test-class")
                 (defvar ctl (get_control_by_name "test-validation-file.css"))
                 (-> ctl `move_to_position 3 1)
                 (evaluate_css_rule ctl.editor)
                 (if (get_by_id "juno-css-.juno-validation-test-class")
                     true
                     "css entry not found")))
         `created_rule_removed
         (ev `(progn
                  (remove_css_entry ".juno-validation-test-class")
                  (if (get_by_id "juno-css-.juno-validation-test-class")
                     false
                     true)))
         `selection_valid
         (progn
            (defvar text (ev `(-> (get_control_by_id ,#(focused_control)) `get_selected_text)))
            (log "selected text: " text)
            (and (starts_with? ".juno-validation-test-class {" text)
                 (ends_with? "}" text))))
      (setTimeout (fn () 
                     (ev `(-> (resolve_dom_path [ 4 1 ] (first (get_by_tag "DIALOG"))) `click)))
                  1000)
      (kcode `close_control)
      (set_prop acc
         `control_closed_properly
         (not (contains? "test-validation-file.css" (current_controls))))
      acc))
      

(defun test_error ()
   (progn
      (ev `(throw Error "Intentionally Thrown"))))
      

(defun run_test_set (test_function_array on_result)
   (let
      ((test nil)
       (number_of_validations 0)
       (passes [])
       (results [])
       (fails [])
       (idx 0)
       (validate (fn (test_name result)
                    (progn
                       (inc number_of_validations (+ (length (values result))))
                       (push results
                          [test_name result])
                       (try 
                          (when (is_function? on_result)
                             (on_result test_name result))
                          (catch Error (e)
                             (log "run_test_set: on_result function error: " e)))
                       (if (apply and* (values result))
                           (progn
                              (push passes test_name))
                           (progn
                              (push fails [ test_name result ]) 
                              false))))))
      (ev `(log "Starting test set ------"))
      (for ((test_name arg) test_function_array)
              (try
                 (progn
                    (= test (get_global test_name))
                    (if arg
                       (validate test_name (test arg))
                       (validate test_name (test))))
                 (catch Error (e)
                    (validate test_name { `sequence_ok: (+ "Sequence Threw Error: " e.message ) }))))
      (ev `(log "Ending test set ------"))
      (log "number_of_validations: " number_of_validations)
      
      {
          passes: passes
          fails: fails
          total_validations: number_of_validations
          total_test_sequences: (+ passes.length fails.length)
          report: results
      }))



(defglobal `layout_and_panel_tests
   [[`home_state ]
    [`reset_state ]
    [`split_editor_vertically] 
    [`split_editor_horizontally]
    [`swap_control]
    [`open_documentation_frame_0]
    [`cycle_panel_focus]
    [`hidden_control_cycle]
    [`jump_to_definition `eval_in_iframe]
    [`home_state]
    [`key_split_vertical]
    [`key_split_horizontal]
    [`key_split_sequence]
    [`named_layout_creation]
    [`locked_layout_changes ]
    [`reset_and_home_state]
    [`save_of_symbol]
    [`save_of_symbol_for_multiple_buffers_1]
    [`save_of_symbol_for_multiple_buffers_2]
    [`remote_file_access_reading]
    [`remote_file_access_writing]
    [`css_mode]])
               

         
(defcontrol system_validations ()
   ((table_body
       (tbody { `style: "overflow: scroll; height: inherit;" } ))
    (table_root (table { `class: "juno-dtable" `style: "width: 100%;" }
                   (thead
                      (tr { `class: "juno-dtable" }
                         (th "#")
                         (th "Sequence")
                         (th "Validation")
                         (th "Pass/Fail")
                         (th "Problem")))
                   table_body))
    (rnum 0)
    (seq_num 0)
    (fail_state false)
    (close_button (html/button { } (dtext "Close")))
    (header_elem (div { `style: "display: inline-block; padding: 5px; font-weight: bold;" } "Initializing"))
    (test_frame_elem (div { } "Uninitialized"))
    (sview (split_view_vertical 
                  (div { `style: "height: 100%; width: 100%; overflow: hidden" } 
                       (div { } 
                            close_button
                            header_elem)
                       (div { `style: "height: calc(100% - 50px); overflow: scroll;" } 
                            table_root))
                  test_frame_elem))
    (render (fn ()
               sview.view))
    (on_result (fn (test_name result)
                  (progn
                     (if (is_object? result)
                         (progn
                            (inc seq_num)
                            (for ((vname vresult) (pairs result))
                                  (inc rnum)
                                  (-> table_body `append
                                     (tr { `class: "juno-dtable" }
                                         [(td { class: "juno-dtable" } rnum)
                                          (td { `class: "juno-dtable" style: (+ "border-left: 5px solid " (color_for_number (* 5 seq_num) 1 0.8) ";") } 
                                              (+ (from_key test_name)))
                                          (td { `class: "juno-dtable" } (from_key vname))
                                          (if (== true vresult)
                                              (td { `class: "juno-dtable juno-test-pass" } "PASS")
                                              (progn
                                                 (= fail_state true)
                                                 (td { `class: "juno-dtable juno-test-fail" } "FAIL")))
                                          (if (== true vresult)
                                              (td { class: "juno-dtable" } "")
                                              (td { class: "juno-dtable" } (user/value_to_dom vresult)))]))))))))
    (deploy_seedling (fn ()
                        (try
                           (rblock
                              (sys/rename "./environments/seedling_build.html" "./environments/seedling.html"))
                           (catch Error (e)
                              (progn
                                 (log "ERROR on rename: " e)
                                 (set_prop header_elem
                                    `innerHTML (+ "Unable to rename build_file seedling_build.html to seedling.html: " e.message)))))))
    (load_timer nil)
    (on_initialize (fn ()
                      (progc
                         (html/attach_event_listener close_button
                                                     `click
                                                     (fn ()
                                                        (progn
                                                           (set_namespace "user")  ;; set the current namespace to user
                                                           (user/switch_to_new_layout "Frame 0")
                                                           (user/remove_named_layout "Validations")
                                                           (user/destroy_control (user/get_control_by_name "System Validations")))))
                         (set_prop header_elem
                            `innerHTML "Starting Frame..")
                         (sleep 0.1)
                         (= load_timer (setTimeout (fn ()
                                                      (progn
                                                         (set_prop header_elem
                                                            `innerHTML "Timeout Error: frame didn't signal load complete")
                                                         (add_class "juno-test-fail" header_elem)))
                                                   60000))
                         (if (not (open_test_frame (or options.url "/env/seedling_build.html") test_frame_elem))
                             (progn 
                                (clearTimeout load_timer)
                                (set_prop header_elem
                                   `innerHTML "Timeout Error: frame didn't signal load complete")
                                (add_class "juno-test-fail" header_elem))
                             (progn
                                (clearTimeout load_timer)
                                (set_prop header_elem
                                   `innerHTML "Testing")
                                (= kcom
                                   (to_object
                                      (ev `(for (key (keys (prop *key_bindings* `global)))
                                                [key (first (split_by "|" (resolve_path [ `global key (user/get_operating_platform) ] *key_bindings*)))]))))
                                
                                (run_test_set layout_and_panel_tests on_result)
                                (set_prop header_elem
                                   `innerHTML (if fail_state
                                                 "Complete - Failed"
                                                 "Complete - Passed"))
                                (if fail_state
                                   (add_class "juno-test-fail" header_elem)
                                   (progn
                                      (add_class "juno-test-pass" header_elem)
                                      (when options.deploy
                                         (deploy_seedling))))))))))
   {
       `expose: [[`on_result on_result]]
       `control_bar: true
   })


                


;; layout and paneling 
;(reset_and_home_state)
;(home_state)
;(split_editor_vertically)               
;(split_editor_horizontally) 
;(swap_control)
;(open_documentation_frame_0)
;(jump_to_definition `eval_in_iframe)
;(key_split_vertical)
;(key_split_horizontal)
;(key_split_sequence)
;(named_layout_creation)
;(save_of_symbol)
;(save_of_symbol_for_multiple_buffers)

; (make_named_layout "Validations"
;   (seedling-tests/system_validations {  `url: (+ "/env/seedling_build.html?theme=" (encodeURIComponent *env_config*.application.global_theme)) } )
;   {
    ;  `unmounted_source: true
    ;  })

