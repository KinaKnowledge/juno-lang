;; 

(declare (namespace "core"))



(if_compile_time_defined `Deno
   (progn
      (defglobal *env_skeleton*  (reader (read_text_file "./src/environment.lisp")))
         
      (defun save_environment (options)
         (let
            ((my_namespace (current_namespace))
             (emit_path (if (and options options.save_as)
                            (split_by "/" options.save_as)
                            nil))
             (comp_rval nil)
             (rval {}))
            (declare (function compile_executable)
                     (global compile_executable))
            (when options.initializer
               (assert (is_function? options.initializer) "initializer option must be a function"))
            (set_namespace "core")
            (when (not (contains? "io" *env_config*.features))
               (import "src/base-io.lisp"))
            (when (not (contains? "build-tools" *env_config*.features))
               (import "src/build-tools.lisp"))
            
            (if options.default_namespace
               (set_path [ `export `default_namespace ] *env_config* options.default_namespace)
               (set_path [ `export `default_namespace ] *env_config* "user"))
            
            ;(if options.initializer
             ;  (defglobal core/*initializer* options.initializer))
            
            (if options.on_environment_ready
               (defglobal core/*on_environment_ready* options.on_environment_ready)
               (defun core/*on_environment_ready* () (progn (repl nil nil { `use_console: true }))))
            
            (set_prop rval
                      `js (core/save_env {
                                           save_as: options.save_as
                                           do_not_include: options.do_not_include
                                           include_source: options.include_source
                                           }))
            (console.log "save_environment: options: " options "sys available: " (contains? "sys" (namespaces)) (namespaces))
            (when (and (contains? "sys" (namespaces))
                       options.compile)
                  (= comp_rval
                     (compile_executable (+ {
                                              emit_as: options.emit_as
                                              source: options.save_as
                                              additional_args: options.additional_args
                                              target: options.target }
                                           (if options.permissions
                                              { permissions: options.permissions }
                                              {} ))))
                  (set_prop rval
                     `exec: comp_rval.emitted
                     `comp_success: comp_rval.success)
                  (if (not comp_rval.success)
                      `comp_error: comp_rval.stderr))
                 
            
            (set_namespace my_namespace)
            rval)
         {
           `description: (+ "The `save_environment` function is a server-side convenience function "
                            "that wraps the lower level `save_env` function.  The function checks that the "
                            "`build-tools` and the `base-io` feature have been installed in the image, sets "
                            "up the initializer call for the core environment and then calls the `save_env` "
                            "function to save the namespace.  The `save_env` call return value is returned "
                            "from this function.<br>#### Options <br><br>save_as:string - If provided, the "
                            "emitted image state file will be written with this name, as opposed to the "
                            "value located at the path "
                            "`*env_config*.export.save_path`.<br>do_not_include:array - Any symbols that "
                            "shoudn\'t be included in the image can be listed here.  <br><br>  ")
           `usage: ["options:object"]
           `tags: ["state" "save" "image" "export" "environment" "dehydrate" "serialize" ]
         })
      (log "The function save_environment has been installed in the core namespace.")
      (if (is_symbol? `core/compile_executable)
          (log "The compile_executable is available")
          (log "Note that the compile_executable function is not available due to the sys package not being loaded."))
      (log "To save the current environment call (save_environment) with the default options.")
      (log "See description for details.")))
            
;(save_environment { `initializer: (fn () (http/start))         
         

   

(if_compile_time_defined `Deno
   (if false
      (let
         ((my_namespace (current_namespace))
          (rval nil))
         (declare (namespace "core"))
         
         (set_namespace "core")
         (when (contains? "tests" (namespaces))
            (delete_namespace "tests"))
         (when (not (contains? "io" *env_config*.features))
            (import "src/base-io.lisp"))
         (when (not (contains? "build-tools" *env_config*.features))
            (import "src/build-tools.lisp"))
         
         (set_path [ `export `default_namespace ] *env_config* "user")
         

         
         (defun core/*on_environment_ready* () (progn (repl nil nil { `use_console: true })))
         ;(defun core/*initializer* () (progn (repl nil nil { `use_console: true })))
         (= rval (core/save_env))
         (set_namespace my_namespace)
         rval)
      (progn
         (log "Auto save on import is disabled.")
         true)))
     