;; Services and utilities for handling server requests

;; the create_http_server sets up the initial listener on the specified port
;; requires Deno





(when (not (contains? "http" (namespaces)))
  (create_namespace `http))


(declare (namespace http))

(import "pkg/base-io.lisp")
(import "pkg/lz-string.juno")
(import "pkg/sys.juno")
;; A list of routes to be checked
;; they are of the form [regex_match route_handler_function]


(defvalue *http_routes*
   [])


;; for debugging purposes..will be removed
(defglobal $request nil)
(defglobal $response nil)


(defun_sync vlog ( `& args)
   (when (> __VERBOSITY__ 0)
      (apply console.log args)))

;; various accessors to the reques_eventt object

(defun get_content_type (request)
   (-> request.headers `get "content-type"))

(defun get_user_agent (request_event)
   (-> request_event.request.headers `get "user-agent"))

(defun get_method (request_event)
   request_event.request.method)

(defun json_response (obj)
   (new Blob [(JSON.stringify obj)]
        { `type: "application/json" }))

(defglobal temp_cert
   (join "\n" 
      [ "-----BEGIN CERTIFICATE-----"
       "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"
       "-----END CERTIFICATE-----"
       ]
      ))


(defglobal temp_key
  (join "\n" 
     ["-----BEGIN RSA PRIVATE KEY-----"
      "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"
      "-----END RSA PRIVATE KEY-----"
      ]
))



(defun add_http_route (method path_specifier route_handler)
   (if (and (is_string? method)
            (is_string? path_specifier)
            (is_function? route_handler))
       (let
          ((path_regex (new RegExp (+ "^" (uppercase method) " " path_specifier)))
           (exists? (reduce (existing_path_set *http_routes*) 
                       (destructuring_bind (existing_path existing_route_handler)
                          existing_path_set
                          (when (== (-> path_regex `toString) (-> existing_path `toString))
                             existing_path)))))
          ;; if it exists, return an explanation why it wasn't added
          (if (> (length exists?) 0)
              {
                  added: false
                  matched: exists?
              }
              (progn
                 (push *http_routes* [path_regex route_handler])
                 {
                     added: true
                     path_regex: path_regex
                     handler: route_handler
                 }))))
   {
     usage:["method:string" "path_specifier:string" "route_handler:function"]
     description: (+ "Adds a new route handler function to *http_routes* for " 
                     "the given method and route.  If successful returns an "
                     "object containing the created path_regex, the passed "
                     "handler function and an added key set to true.  If "
                     "the function fails, returns an objec with a matched "
                     "key and containing what route matched the given route and "
                     "an added key set to false.")
     tags: [`http `io `server `network `routes]
   })
 
(defun remove_http_route (method path_specifier)
   (if (and (is_string? method)
            (is_string? path_specifier))
       (let
          ((path_regex (new RegExp (+ "^" (uppercase method) " " path_specifier)))
           (matched_idx nil)
           (removed_route nil))
            
          (map (fn (existing_path_set idx)
                  (destructuring_bind (existing_path route_handler)
                     existing_path_set
                     (when (== (-> path_regex `toString) (-> existing_path `toString))
                        (= matched_idx idx))))
               *http_routes*)
          (if matched_idx
              (progn
                 (= removed_route (prop *http_routes* matched_idx))
                 (-> *http_routes* `splice matched_idx 1)
                 { removed: true
                   path_regex: removed_route.0
                   handler: removed_route.1 })
              {
                  removed: false
                  reason: "Not Found"
                  path_regex: path_regex
              })))
   {
     description: (+ "Removes the handler function for the given method and path.  "
                     "If successful, the function eturns an object with a removed " 
                     "flag set to true, the path regex of the removed route and the "
                     "the handler for the function.  If not successful, the removed "
                     "flag is set to false, a reason flag (currently only 'Not Found' "
                     "and the path regex that was used to find the target route in "
                     "the handler table.")
     usage: ["method:string" "path_specifier:string"]
     tags: ["routes" "http" "io" "server" "network"]
     })
          

(defun create_http_server (port_number options)
   (let
      ((listener nil))
      (if options.use_TLS
         (= listener (-> Deno `listenTls (+ {}
                                        { port: port_number }
                                        (or options {}))))
         (= listener (-> Deno `listen (+ {}
                                     { port: port_number }
                                     (or options {})))))
      (console.log "Listening on " (+ (if options.use_TLS
                                          "https://"
                                          "http://")
                                      listener.addr.hostname ":" listener.addr.port))
      listener)
   {
       description: (+ "Creates an http server on the specified port number.  " 
                       "If use_TLS is set to true in options, then transport "
                       "layer security will be used. In this case a private "
                       "key is specified via the `key` option and the "
                       "certificate is provided via the `cert` option. "
                       "See Deno.listen and Deno.listenTls for other options. ")
       usage: ["port_number:number" "options:object"]
       tags: ["server" "http" "network" "io" "handler"]
    })



                
(defun serve_using_handler (server handler options)
   (let
      ((state (+ { `run_server: true `request_count: 0 }
                 (if (is_object? options)
                     options
                     {})))
       (control_function (fn (command)
                            (cond
                               (== command "stop")
                               (progn
                                  (set_prop state `run_server false)
                                  (-> server `close)
                                  state)
                               (== command "status")
                               (clone state)
                               else
                               (clone state))))
       (handle_connection (fn (connection)
                             (new Promise (fn (resolve)
                                             (progn
                                                (when (> __VERBOSITY__ 0)
                                                   (log "handle_connection: new connection"))
                                                (resolve true)
                                                (try
                                                   (handler connection state)
                                                   (catch Error (e)
                                                      (progn
                                                         (if options.on_error
                                                            (options.on_error server connection state)
                                                            nil))))))))))
      
      (new Promise
         (fn (resolve)
            (progn
               (resolve control_function)
               (let
                  ((connection nil))
                  (while state.run_server
                     (try
                        (progn
                           (= connection (-> server `accept))
                           (handle_connection connection))
                        (catch Error (e)
                           (if (== state.run_server false)
                               true ;; expected
                               (progn
                                  (if options.on_connection_error
                                     (-> options `on_connection_error e)
                                     (console.error (formatted_date (new Date)) " serve_using_handler: error: " e))))))))))))
   
   {
     description: (+ "Given a Listener object, a handler function (see default_handler) "
                     "and an optional options object, sets up service controller for "
                     "the provided handler.  A control_function is returned, which can "
                     "be used to command the state of the service handler.  The control "
                     "function takes a single command string:<br>"
                     "stop:string - stops the listener and turns off the server. "
                     "status - returns a status object representing the state of the "
                     "operation of the service.  If the status function is "
                     "called without an argument, the current state is returned. <br><br>"
                     "The serve_using_handler function returns a control function immediately "
                     "but the service will be running using the handler in a yield loop "
                     "for new requests.  Options: <br>"
                     "on_response:function - A function called with the request_event and "
                     "response_object for logging purposes: (on_response request_event response_event). <br>"
                     "on_error:function: A function called when an error is encountered that ")
     usage: ["server:Listener" "handler:function" "options:object"]
     tags: ["server" "http" "network" "io"]
     })

                   
(defun find_matching_route (method pathname)
   (if (and (is_string? method)
            (is_string? pathname))
       (let
          ((match_target (+ (uppercase method) " " pathname))
           (matched_regex nil)
           (matched nil))
          (for_each (path_set *http_routes*)
             (destructuring_bind (candidate_regex route_handler)
                path_set
                (= matched_regex (scan_str candidate_regex match_target))
                (when (> (length matched_regex) 0)
                   (= matched { `pathname: pathname 
                                `method: method
                                `handler: route_handler
                                `matched_handler_path: matched_regex
                                `matched_regex: candidate_regex })
                   (break))))
          matched)
       nil)
   { 
     description: (+ "Searches the existing HTTP routes for the given method and "
                     "pathname and returns a matched object with the following fields:<br>"
                     "pathname:string - The pathname provided and matched<br>"
                     "method:string - The HTTP method verb provided such as GET or POST<br>"
                     "handler:function - The handler function to be used for the method "
                     "and path combo.<br>"
                     "matched_handler_path:object - The RegExp match object returned via " 
                     "the RegExp matched function.<br>"
                     "matched_regex:RegExp - The matching regexp function.")
     usage: ["method:string" "pathname:string"]
     tags: ["server" "http" "routes" "network"]
     })
 

(defun arguments_for_url (url)
   (if (instanceof url URL)
       (let
          ((vals {}))
          (-> (prop url `searchParams) `forEach (fn (v i) (set_prop vals i v)))
          vals)
       (throw TypeError "arguments_for_url requires a URL type object"))
   {
     `description: "For a given URL object, returns an object with the arguments as key value pairs."
     `usage: ["url:URL"]
     `tags: ["http" "uri" "url" "parameters" "params"]
     })

(defun process_multipart_form (form_data)
  (let
      ((iter (-> form_data `keys))
       (entry_key nil)      
       (data {}))
    (= entry_key (-> iter `next))
    
    (while (not entry_key.done)
      (progn      
       (set_prop data
                 entry_key.value
                 (-> form_data `get entry_key.value))                   
       (= entry_key (-> iter `next))))    
    data))
    
    

(defun post_body(request_event)
   (let
      ((read_buffer (new Uint8Array 8192))       
       (result nil)
       (comps nil)
       (content_type nil)
       (multipart nil)      
       (read_op nil)
       (rdr nil))
     (= comps (split_by ";" (or (get_content_type request_event.request) "")))
     (= content_type (first comps))
     (when (and (> comps.length 1)
                (starts_with? "boundary=" (trim comps.1)))
       (= multipart {
                     `boundary: (second (split_by "=" comps.1))
                     `content: []
                     }))
     (cond
       (== content_type "application/json")             
       (= result (-> request_event.request `json))

       (== content_type "multipart/form-data")
       (progn                         
        (= result (process_multipart_form (-> request_event.request `formData)  multipart)))
       
       (starts_with? "text/" content_type)
       (= result (-> request_event.request `text))
       
       else 
       (progn        
        (= result (new Uint8Array (-> request_event.request `arrayBuffer)))))
       ;(= result (-> request_event.request `formData)))
      result))
          

(defun get_parameters_for_match (match_obj request_event url)
   (let
      ((matched_handler_path (prop (first match_obj.matched_handler_path) `0))
       (path_comps (split_by " " matched_handler_path))
       (method (first path_comps))
       (service_path (second path_comps))
       (remaining_path (or (-> match_obj.pathname `substr (length service_path)) ""))
       (argset (arguments_for_url url)))
      {
          path: remaining_path
          service_path: service_path
          arguments: argset
          parameters: (if (== method "POST")
                           (post_body request_event)
                           {})
          method: method
      })
   {
       `description: (+ "For a given matched object from the function find_matching_route, "
                        "returns an object containing the service_path, which is the first "
                        "matched path in the http_routes table, the remaining path as the "
                        "path key, which can be used by the route_handler_function, the "
                        "arguments if any from the URL, and the method.  This function "
                        "normalizes the request where possible for route handler logic.")
       `usage: ["match_obj:object" "request_event:RequestEvent" "url:URL"]
       `tags: ["http" "url" "parameters" "params"]
   })
      


(defun gen_appropriate_response (request_event error_data)
   (cond
      (== (get_content_type request_event.request) "application/json")
      (json_response { `rval: "FAIL" `message: error_data })
      else
      error_data))
     

(defun http_request_router (request_event state)
   (let
      ((url (new URL request_event.request.url))
       (method request_event.request.method)
       (filepath (decodeURIComponent url.pathname))
       (matched_handler nil)
       (parameters nil)
       (service_path nil)
       (response nil))
     (= matched_handler (find_matching_route method filepath))
     (= $request request_event)
      (if matched_handler
         (progn
            (try
              (progn               
                  (= parameters (get_parameters_for_match matched_handler request_event url))
                  ;(console.log "http_request_router: parameters: " parameters)
                  (= response (-> matched_handler `handler request_event parameters )) 
                  (if (not (instanceof response Response))
                      (throw TypeError "Invalid Response object from handler")))
               (catch Error (e)
                  (progn
                     (console.error "http_request_router: error on handler call: " e)
                     
                     (= response (new Response (gen_appropriate_response request_event e.message) { `status: 500 } ))
                     )))
            (set_prop response
               `service_parameters
               parameters)
            response)
         (new Response "404 Not Found" { status: 404 })))
   {
     `description: (+ "For a given HTTP request_event, references *http_routes* to find a matching "
                      "service handler for a given request method and path, and then if a match "
                      "is found, the route_handler function specified for the route in *http_routes* "
                      "is called with the parameters object returned by get_parameters_for_match and "
                      "the request_event.  The route_handler_function is expected to return a type "
                      "Response object, which will be sent back to the client. ")
     `usage: ["request_event:RequestEvent"]
     `tags: ["http" "url" "parameters" "params"]
     })
                      
 
     
    

(defun default_handler (connection state)
   (if (and connection (is_object? state))
       (let
          ((http_connection (-> Deno `serveHttp connection))
           (url nil)
           (file nil)
           (filepath nil)
           (method nil)
           (dirname nil)
           (not_found_response nil)
           (handler nil)
           (response nil))
          (try
             (for_with (request_event http_connection)
                (if state.run_server
                   (try
                      (progn
                         (set_prop state
                            `request_count (+ 1 state.request_count))
                         (try
                            (= response (http_request_router request_event state))
                            (catch Error (e)
                               (progn
                                  (console.error "default_handler: error in handler: " e)
                                  (-> request_event `respondWith (new Response (gen_appropriate_response request_event e.message) { status: 500 })))))
                         (when state.on_response
                            (-> state `on_response request_event response))
                         (-> request_event `respondWith response))
                      (catch Error (e)
                         (progn
                            (console.error "default handler: error on response completion: " e))))
                   
                   (-> http_connection `close)))
             (catch Error (e)
                (progn
                   (console.error "default_handler: error on waiting for new connection: " e.message)
                   nil)))))
   {
     `description: (+ "The default handler object is called with a connection and a state " 
                      "object and manages the response to the request_event provided by " 
                      "the http_connection.  While the state object run_server key is "
                      "set to true, it will continue to serve requests for a given connection. "
                      "Once state.run_server is set to a non true value, the http connection "
                      "will be closed and further requests will not complete. <br><br>"
                      "Example: <br>"
                      "<code>"
                      ";; set up the server..\n"
                      "(defglobal server (create_http_server 56342))\n" 
                      "(defglobal ctl (serve_using_handler server default_handler))\n"
                      ";; ctl is a function where the status can be managed.\n"
                      "</code>"
                      "See also serve_using_handler for more details on the returned "
                      "control function.")
     `usage: ["connection:Listener"]
     })
                 

(defmacro file_spooler (base_directory)
   `(fn (request_event request_parameters) 
       (let
          ((filepath request_parameters.path)
           (file nil)
           (absolute_path (+ ,#base_directory "/" filepath))
           (descriptor nil)
           (entries [])
           (readable_stream nil))         
          (try
            (progn
               (= descriptor (Deno.stat absolute_path))
               (cond 
                  descriptor.isFile
                  (progn
                     (= file (-> Deno `open absolute_path { read: true }))
                     (= readable_stream file.readable)
                     (new Response readable_stream))
                  descriptor.isDirectory
                  (progn
                     (for_with (entry (Deno.readDir absolute_path))
                        (push entries entry))
                     (new Response (json_response { `rval: "OK" `entries: entries })))))
             (catch Error (e)
                (progn
                   (new Response "404 Not Found" { status: 404 }))))))
   {
       `description: (+ "Creates an HTTP file streamer bound to the provided base_directory. The "
                        "macro returns a function that can be used as a route handler.  To do so, "
                        "add the returned function with a request method and service path to "
                        "*http_routes*.  Use the add_http_route function to do so.")
       `usage: ["base_directory:string"]
       `tags: ["http" "route_handler" "file" "spool"]
   })



;; Add a simple file service

(defparameter *http_file_server*
   {
       `log: []
       `log_length: 50
       `base_directory: nil
   })

(defmacro content_spooler_with_type (content_function content_type)
   `(fn (request_event request_parameters) 
       (let
          ((content_function ,#content_function)
           (content_type ,#content_type))
          (try
            (progn
               (new Response (new Blob [(content_function request_event request_parameters)] 
                                           { `type: content_type })))
                   
             (catch Error (e)
                (progn
                   (new Response "500 Internal Server Error" { status: 500 }))))))
   {
     `description: (+ "Creates an HTTP content streamer for a lambda. The macro returns a "
                      "function that can be used as a route handler.  To do so, add the returned "
                      "function with a request method and service path to *http_routes*.  Use the "
                      "add_http_route function to do so.  <br>The lambda is called with the arguments "
                      "(request_parameters request_event). ")

       `usage: ["content_function:function" "content_type:string"]
       `tags: ["http" "route_handler" "file" "spool" "content" ]
   })

(defmacro content_spooler (content_function)
   `(fn (request_event request_parameters) 
       (let
          ((content_function ,#content_function))
          (try
            (progn
               (defvar rsp (content_function request_event request_parameters))  
               (console.log "content_spooler: received: " (sub_type rsp))
               (cond
                  (and (is_object? rsp)
                       (== (sub_type rsp) "Blob"))
                  (new Response rsp)
                  (and (is_object? rsp)
                       rsp.content_type)
                  (new Response (new Blob [rsp.data]
                                     { `type: rsp.type }))
                  else
                  (new Response (new Blob []
                                     { `type: "application/json" }))))
                   
             (catch Error (e)
                (progn
                   (console.error "content_spooler: error: " e)
                   (new Response "500 Internal Server Error" { status: 500 }))))))
   {
     `description: (+ "Creates an HTTP content streamer for a lambda. The macro returns a "
                      "function that can be used as a route handler.  To do so, add the returned "
                      "function with a request method and service path to *http_routes*.  Use the "
                      "add_http_route function to do so.  <br>The lambda is called with the arguments "
                      "(request_parameters request_event) and should return an object with two "
                      "keys:<br>data:* - The content being returned.<br>type:string - The type "
                      "of content type being returned.<br> ")
       `usage: ["content_function:function" "content_type:string"]
       `tags: ["http" "route_handler" "file" "spool" "content" ]
   })

(defun http_file_server (port base_directory options)
   (if (and (is_number? port)
            (is_string? base_directory))
       (let
          ((service_route (add_http_route "GET" (or options.service_path "/files") (file_spooler base_directory)))
           (server nil)
           (ctl nil)
           (on_response (fn (request_event response)
                           (progn
                              (console.log "request_event: " request_event)
                              (console.log "response: " response.headers)
                              (push *http_file_server*.log
                                    {
                                      `request_time: (time_in_millis)
                                      `request_url: request_event.request.url
                                      `response_code: response.status
                                      `file_sent: response.service_parameters.path
                                      })
                              (when (> (length *http_file_server*.log)
                                       *http_file_server*.log_length)
                                 (take *http_file_server*.log))
                              true))))
          (if (eq options nil)
              (= options {}))
          (if (not options.on_response)
              (set_prop options
                 `on_response
                 on_response))
              
          (if service_route.added
              (progn
                 (= server (create_http_server port options))
                 (set_prop *http_file_server* 
                    `control
                    (serve_using_handler server default_handler options)
                    `service_path (or options.service_path "/files")
                    `base_directory base_directory)
                 (console.log "*http_file_server*.controller established as the control function.")
                 *http_file_server*)
              (progn
                 (console.error "Cannot add the service route: " service_route ", server not started."))))
       (throw TypeError "http_file_server requires port and base_directory"))
   {
       `usage: ["port:number" "base_directory:string" "options:?object"]
       `description: (+ "Simple file server that adds a route under /files to *http_routes* "
                        "for GET requests.  Provide a base directory to act as the root "
                        "directory for the service.  Options is an object that contains<br>"
                        "service_path:string - The path that the service will run under, by "
                        "default that is /files, but this can be overwritten.<br><br>"
                        "All other options are passed on to the serve_using_handler function "
                        "to be consumed there.")
       `tags: ["http" "file" "server" "web" "io"]
   })

(defparameter *env_bank*
   {
       `log: []
       `log_length: 50
       `base_directory: nil
   })

(defun echo_params (request_event parameters)   
   (progn
      (console.log "echo_params: parameters: " parameters)
      (console.log "echo_params: request_event: " request_event)
      (new Response (new Blob [(JSON.stringify { "rval":"OK" "parameters": parameters })]
                         { `type: "application/json" })
           {
             `status: 200
            })))

(defun base_directory_handler (request_event parameters)   
   (progn
      (new Response (new Blob [(JSON.stringify { rval:"OK" data: { base: (get_default [ `http_services `base_directory ]) cwd: (sys/cwd) } })]
                         { `type: "application/json" })
           {
             `status: 200
            })))

(defun save_file_handler (base_directory)
  (fn (request_event parameters)   
    (let
        ((buffer nil)
         (bytes_written 0)
         (path parameters.path)
         (outfile nil)
         (results []))
      
      (when (is_object? parameters.parameters)        
        (for_each (pset (pairs parameters.parameters))
                  (destructuring_bind (name value)
                                      pset                                      
                                      (if (starts_with? "file" name)
                                        (progn
                                         (= buffer (new Uint8Array (-> value `arrayBuffer)))
                                         (= outfile (-> Deno `open (+ base_directory (or path "") "/" value.name) { truncate: true create: true write: true }))
                                         (while (< bytes_written buffer.length)
                                           (inc bytes_written
                                              (-> outfile `write (-> buffer `subarray bytes_written))))
                                         (push results
                                               { filename: (+ path "/" value.name)
                                                 length: bytes_written }))))))
      
        
      (new Response (new Blob [(JSON.stringify { "rval":"OK" "results": results })]
                         { `type: "application/json" })
           {
            `status: 200
            }))))

(defun create_websocket (uri options)
   (let
      ((`options (or options {}))
       (`ws (new WebSocket(uri)))
       (`on_close (if options.on_close
                      options.on_close
                      nil))
       (`on_open (or options.on_open nil))
       (`on_message (or options.on_message (fn (e)
                                              (console.log e.data))))
       (`on_error (or options.on_error (fn (e)
                                          (console.error "ERROR: " e.data)))))
      
      (when on_open
         (set_prop ws
            `onopen
            on_open))
      (when on_close
         (set_prop ws
            `onclose
            on_close))
      
      (when on_message
         (set_prop ws
            `onmessage
            on_message))
      
      (when on_error
         (set_prop ws
            `onerror
            on_error))
      ws)
   {
     `usage: "[uri:string] [options:object]"
     `description: (+ "Creates a websocket client with the given uri format: ws://hostname:port/path and returns a WebSocket object."
                      "Options are as follows with each function receiving the event object as a single argument:<br>"
                      "on_open:function - Called when the socket is opened<br>"
                      "on_close:function - Called when the socket is closed<br>"
                      "on_message:function - Called when the socket receives a message event<br>"
                      "on_error:function - Called when an error event occurs on the socket.<br>")
     `tags: ["socket" "websocket" "connection" "uri" "url" "events" "messages" "message" "open" "create"]
     })

(defun send_to_ws (ws data)
   (-> ws `send (if (is_object? data)
                    (JSON.stringify data)
                    data))
   {
     `description: (+ "Given an active websocket and a data value such as a string or object, sends that data value over "
                      "the websocket. If the websocket is an object, it will call JSON.stringify on the object prior to "
                      "sending.")
     `usage: ["ws:WebSocket" "data:*"]
     `tags: ["socket" "websocket" "connection" "uri" "url" "events" "messages" "message"]
     })

(defun send_object (ws val)
   (http/send_to_ws ws
                 { req_id: nil
                   namespace: (current_namespace)
                   rval: "OK"
                   result_type: "object"
                   result: (JSON.stringify val)
                   needs_eval: true } ))

(defun close_ws (ws)
   (-> ws `close)
   {
     `description: (+ "Closes the provided websocket and returns the result of the operation.")
     `usage: ["ws:WebSocket"]
     `tags: ["socket" "websocket" "connection" "uri" "url" "events" "messages" "message" "close"]
     })




(defmacro websocket_handler (options)
   `(let
       ((options ,#options))
       (fn (request_event parameters) 
         (let
            ((returned_response nil)
             (upgrade_result nil))
            (try
               (progn
                  (vlog "websocket_handler: initializing websocket")
                  (= upgrade_result (-> Deno `upgradeWebSocket request_event.request { }))
                  (= returned_response upgrade_result.response)
                  (vlog "websocket_handler: upgraded to websocket: " upgrade_result)
                  (set_prop upgrade_result.socket
                     `onopen
                     (fn (event)
                        (-> options `on_open upgrade_result.socket event parameters))
                     `onmessage
                     (fn (event)
                        (try 
                           (progn
                              (-> options `on_message upgrade_result.socket event))
                              (catch Error (e)
                                 (console.error "ERROR: caught error from onmessage"))))
                     `onclose
                     (fn (event)
                        (-> options `on_close upgrade_result.socket event))
                     `onerror
                     (fn (event)
                        (-> options `on_error upgrade_result.socket event))))
               (catch Error (e)
                  (progn
                     (console.error "websocket_handler: error on constructing socket: " e.message)
                     (= returned_response (new Response (gen_appropriate_response request_event e.message ) { status: 500 })))))
            returned_response)))
      {
        `description: (+ "Returns a handler function to establish a server-side websocket handler. "
                         "The handler must be provided with an options object that handles the "
                         "event lifecycle of the websocket it is serving.  All provided handler functions "
                         "are provided the socket and the event object.  The on_open object is provided any parameters "
                         "that were provided with the establishing request.<br> Options are as follows:<br>"
                         "on_open:function - Provided the arguments (socket event_object parameters) when a new socket is requested to be established.<br>"
                         "on_message:function - Called as (socket event_object) for the received event message.<br>"
                         "on_close:function - When a socket is requested to close, this function is called with (socket event_object)<br>"
                         "on_error:function - When an error occurs, this function is called as (socket event_object).<br>"
                         "<br>")
        `tags: ["websocket" "handler" "server" "upgrade" "open" ]
        `usage: ["options:object"]
      })

(defglobal *on_compiler_eval_error*
   (fn (thrown_error assembled_js)
      (progn
         (console.log "-- Compiler EVAL Error -----")
         (console.log "ERRROR: "thrown_error)
         (console.log "Assembled JS: " assembled_js)
         (console.log "------"))))
      
(defglobal *http_routes_state* nil)




(defun encode_remote_result (request_id result namespace options)
   (let
      ((obj {
              `req_id: request_id
              `namespace: namespace
              `ws_id: options.ws_id
              `category: (or (and (is_object? options) options.category) "req-res")
              `rval: "OK"
              `result_type: (sub_type result)
              }))
      ;(console.log "encode_remote_result: result type: " (is_error? result) (sub_type result))
      (cond
         (is_error? result)
         (set_prop obj
            `rval "FAIL"
            `message result.message
            `result (cond
                       result.details
                       result.details
                       (is_string? result.stack)
                       (split_by "\n" result.stack)
                       else
                       nil)
            `stack result.stack
            `error_type (sub_type result))
         (and (is_array? result)
              (is_object? result.0)
              result.0.error
              (ends_with? "Error" result.0.error))
         (progn
            (set_prop obj
               `rval "FAIL"
               `result result))
         (is_regex? result)
         (progn
            (set_prop obj
               `result (as_lisp result)
               `needs_read true))
         (is_function? result)
         (progn
            (set_prop obj
               `result (+ {
                            body: (-> result `toString)
                            }
                         (fn_signature result))))
         
         (is_function? result.toJSON)
         (progn
            ;(log request_id "Encoding result in JSON: " )
            (set_prop obj
               `result (try
                          (JSON.stringify result)
                          (catch Error (e)
                             (progn
                                (console.log "encode_remote_result: cannot stringify the result" e.message)
                                result)))
               
               `needs_eval true))
         else
         (progn
            (set_prop obj
               `result (as_lisp result)
               `needs_eval (if options.needs_eval
                              true
                              false)
               `needs_read (if options.needs_read
                              true
                              false))))
      ;(console.log "encode_remote_result: returning obj:" obj)
      obj))

(defglobal *ws_counter* 0)

(defparameter *active_websockets*
   {})


(defun get_wrapper_for_ws (ws)
   (let
      ((the_wrapper nil))
      (for (wrapper (values *active_websockets*))
           (when (== wrapper.ws ws)
              (= the_wrapper wrapper)
              (break)))
      the_wrapper))


(defun create_ws_repl_handler (options)
   (let
      ((namespace nil)
       (get_evaluator_for_ns (fn (ns)
                                (let
                                   ((env (-> Environment `get_namespace_handle ns)))
                                   (= namespace ns)
                                   env)))
       (evaluator nil)
       (options options)
       (send_to_ws http/send_to_ws))
      ;(console.log "create_ws_repl_handler: options: " options)
      (websocket_handler {
                           `on_open: (fn (ws event parameters)
                                        (try
                                           (let
                                              ((ws_wrapper {}))
                                              
                                              (set_prop ws_wrapper
                                                 `ws ws
                                                 `ws_id (inc *ws_counter*)
                                                 `namespace (or options.namespace "user")
                                                 `log (fn (args)
                                                         (send_to_ws 
                                                            ws
                                                            {
                                                               `req_id: nil
                                                               `result: (if (is_array? args)
                                                                            (as_lisp args)
                                                                            (as_lisp [ args ]))
                                                               `needs_read: true
                                                               `is_log: true
                                                             })))
                                              (set_prop *active_websockets*
                                                    ws_wrapper.ws_id
                                                    ws_wrapper)
                                              (console.log "on_open: event: " event)
                                              (vlog "ws_repl_handler: new open request: default namespace: " (or options.namespace "user"))
                                              
                                              (vlog "ws_repl_handler: sending namespace information packet")
                                              (send_to_ws ws
                                                 { ws_id: ws_wrapper.ws_id
                                                   namespace: ws_wrapper.namespace }))
                                                                    
                                           (catch Error (e)
                                              (progn
                                                 (console.error "ws_repl_handler: cannot open: " e.message)))))
                           `on_message: (fn (ws event)
                                           (progc
                                              (let
                                                 ((data (JSON.parse event.data))
                                                  (command (prop data `command))
                                                  (args (prop data `args))
                                                  (last_result_symbol (prop data `last_result))
                                                  (ws_wrapper (get_wrapper_for_ws ws))
                                                  (cmd_opts (or args.1 {}))
                                                  (request_id (prop data `req_id))
                                                  (compiled_metadata nil)
                                                  (compiled_source nil)
                                                  (compl_complete (fn (compilation_results)
                                                                     (progn
                                                                        (= compiled_metadata compilation_results.0)
                                                                        (= compiled_source compilation_results.1))))
                                                  
                                                  (result_type nil)
                                                  (evaluator (if ws_wrapper 
                                                                 (get_evaluator_for_ns ws_wrapper.namespace)))
                                                  (result nil))
                                                 (= compiled_source nil)
                                                 (= compiled_metadata nil)
                                                 (vlog "ws_repl_handler: -> " data cmd_opts)
                                                 (cond
                                                    (eq nil ws_wrapper)
                                                    (console.error "ERROR: cannot find wrapper for websocket")
                                                    (and (== command "eval")
                                                         (is_array? args)
                                                         (starts_with? "(use_ns " (trim args.0)))
                                                    (try
                                                       (let
                                                          ((cmd (read_lisp args.0))
                                                           (new_ns nil)
                                                           (is_reference? cmd.1))
                                                          (if (is_reference? cmd.1)
                                                              (progn
                                                                 (= evaluator (get_evaluator_for_ns (desym_ref cmd.1)))
                                                                 (if (is_object? evaluator)
                                                                     (console.log "found evaluator: " evaluator.namespace)
                                                                     (console.log "no evaluator yet"))
                                                                 (when evaluator
                                                                    (set_prop ws_wrapper
                                                                       `namespace
                                                                       (desym_ref cmd.1)))
                                                                 (send_to_ws ws
                                                                    (encode_remote_result request_id ws_wrapper.namespace evaluator.namespace { ws_id: ws_wrapper.ws_id } )))
                                                              (send_to_ws ws
                                                                 (encode_remote_result request_id "Malformed namespace change request. See use_ns syntax" evaluator.namespace { ws_id: ws_wrapper.ws_id }))))
                                                       (catch Error (e)
                                                          (send_to_ws ws
                                                             (encode_remote_result request_id e evaluator.namespace { ws_id: ws_wrapper.ws_id }))))
                                                    
                                                    
                                                    (and (== command "eval")
                                                         (is_array? args))
                                                    (try
                                                       (progn
                                                          (if evaluator
                                                             (progn
                                                                (= result (-> evaluator `evaluate_local args.0 { scope: { ws_id: ws_wrapper.ws_id}}  (+ {} cmd_opts { on_compilation_complete: compl_complete })))
                                                                (vlog "ws_repl_handler: " namespace " <- " result)
                                                                (when last_result_symbol
                                                                   (-> evaluator `set_global last_result_symbol result))
                                                                (send_to_ws ws
                                                                   (encode_remote_result request_id result evaluator.namespace { ws_id: ws_wrapper.ws_id })))
                                                             (progn
                                                                (console.log "ws: on_message: no evaluator": args)
                                                                (send_to_ws ws
                                                                   (encode_remote_result request_id { "ERROR:" "No Evaluator" } evaluator.namespace { ws_id: ws_wrapper.ws_id })))))
                                                          
                                                       (catch Error (e)
                                                          (progn
                                                             
                                                             (console.log "ws_repl_handler: compilation details: " compiled_metadata)
                                                             (if (eq nil e.details)
                                                                 (set_prop e
                                                                    `details {
                                                                               `compiled: compiled_source
                                                                               `compiled_metadata: compiled_metadata
                                                                               })
                                                                 (set_prop e.details
                                                                    `compiled compiled_source
                                                                    `compiled_metadata compiled_metadata))
                                                             (try
                                                                (progn
                                                                   (console.error "ws_repl_handler: error on eval: " e.message e.details)
                                                                   (send_to_ws ws
                                                                      (encode_remote_result request_id e evaluator.namespace { ws_id: ws_wrapper.ws_id })))
                                                                (catch Error (send_error)
                                                                   (console.error "Unable to send to web socket: " send_error))))))
                                                    (== command "close")
                                                    (progn
                                                       (vlog "ws_repl_handler: received close request: closing repl connection")
                                                       (try
                                                          (http/close_ws ws)
                                                          (catch Error (e)
                                                             (progn
                                                                (log "Error on closing: " e.message)))))))))
                           `on_error: (fn (ws error)
                                         (progn
                                            (console.error "ws_repl_handler: on_error: " error ws)
                                            (log "error on websocket: " error)))
                           `on_close: (fn (ws event)
                                         (let
                                            ((ws_wrapper (get_wrapper_for_ws ws)))
                                            (vlog "ws_repl_handler: close event: closing remote connection")
                                            (when ws_wrapper.ws_id
                                               (remove_prop *active_websockets*
                                                  ws_wrapper.ws_id))))
                           })))



(defglobal ws_repl_handler
   (create_ws_repl_handler { `namespace: "user" })
   {
       `initializer: `(create_ws_repl_handler { `namespace: "user" })
   })
   
(when (eq nil (resolve_path [ `http_services `port ] *env_config*))
   (unless (prop *env_config* `http_services)
      (set_prop *env_config* `http_services {
                                              `listen_on_start: false
                                              }))
   (set_path [ `http_services `port ] *env_config* 56432)
   (set_path [ `http_services `base_directory ] *env_config* "./"))
   

(defun set_file_system_root (path_to_base_dir)
   (if (sys/is_dir? path_to_base_dir)
       (progn
          (set_default ( `http_services `base_directory ) path_to_base_dir)
          (http/remove_http_route "GET" "/files")
          (http/add_http_route "GET" "/files" (file_spooler path_to_base_dir))
          (http/remove_http_route "POST" "/save_file")
          (http/add_http_route "POST" "/save_file" (save_file_handler path_to_base_dir))
          path_to_base_dir)
       (throw EvalError "set_file_system_root: invalid base directory"))
   {
       description: "Sets the base directory for the /files service and /save_file service."
       usage: []
       tags: ["files" "file_system" "service" "base_directory" "root" "base"]
   })
          
         
         
   
(defun env_bank (port base_directory options)
   (let
      ((server nil)
       (on_response (fn (request_event response)
                           (progn
                              ;(console.log "response:" response.status response.headers response)
                              (= $request request_event)
                              (= $response response)
                              (push *env_bank*.log
                                    {
                                      `request_time: (time_in_millis)
                                      `request_url: request_event.request.url
                                      `request_method: response.service_parameters.method
                                      `response_code: response.status
                                      `file_sent: response.service_parameters.path
                                      })
                              (when (> (length *env_bank*.log)
                                       *env_bank*.log_length)
                                 (take *env_bank*.log))
                              true))))
      
     (add_http_route "GET" "/env" (file_spooler (+ base_directory "/environments")))
     (add_http_route "GET" "/files" (file_spooler base_directory))
     (add_http_route "GET" "/base_directory" base_directory_handler)
     (add_http_route "POST" "/echo_params"
                     echo_params)
     (add_http_route "POST" "/save_file"
                     (save_file_handler base_directory))
     (add_http_route "GET" "/connect_repl"
                     ws_repl_handler)
     (add_http_route "GET" "/pkg" (file_spooler (+ base_directory "/pkg")))
      (if (eq nil options)
          (= options {}))
      (set_prop options
         `on_response
         on_response)
      (= server (create_http_server port options))
      (set_prop *env_bank*
         `control (serve_using_handler server default_handler options)
         `service_path "/env"
         `base_directory base_directory)))

 
(if_compile_time_defined `Deno
   (defun browser_environments (details?)
      (let
         ((current_home (sys/cwd))
          (stat_data nil)
          (files (if (sys/is_dir? (+ current_home "/environments"))
                     (sort (sys/list_files (+ current_home "/environments"))
                           { `key: [`name ]})
                     (throw Error (+ "Unable to find directory " current_home "/environments" )))))
         (reduce (file files)
            (when (and (ends_with? ".html" file.name)
                       file.isFile)
               (= stat_data (sys/stat (+ current_home "/environments/" file.name)))
               (if details?
                  [file.name stat_data.size stat_data.birthtime stat_data.mtime]
                  file.name))))
      {
        description: (+ "This function returns an array containing the available browser "
                        "environments that can be opened with the `http/open_browser` function.  If "
                        "the `details?` argument is provided as a `true` value, then the name, size, "
                        "create time and access times are provided. ")
        usage: ["details?:?boolean"]
        tags: ["environments" "ui" "open_browser" "browser" "images"]
        }))

                      

(if_compile_time_defined `Deno
   (defun open_browser (options)
      (let
         ((os (operating_system))
          (process_handle nil)
          (env_to_start (cond
                           options.env
                           (if (ends_with? ".html" options.env)
                               options.env
                               (+ options.env ".html"))
                           options.instance
                           options.instance
                           else
                           "seedling.html"))
          (browser (and (not options.list)
                        (or options.path_to_browser
                           (cond
                              (== os "darwin")
                              "/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
                              (== os "linux")
                              "/usr/bin/google-chrome"
                              (== os "windows")
                              (throw EvalError "Please provide the path_to_browser option."))))))
         (cond
            options.list
            (browser_environments)
            else
            (progn
               ;; API change into Deno v2 from Deno.run, which is to be deprecated, to Deno.Command
               (= process_handle
                  (new Deno.Command browser {  args:["--new-window"
                                                     (+ "--app=http://localhost:" (or options.port 56432) "/env/" env_to_start "?app_mode=true"
                                                        (cond
                                                           (is_object? options.args)
                                                           (join "&"
                                                              (conj [""]
                                                                    (for ((key value) (pairs options.args))
                                                                         (+ (encodeURIComponent key) "=" (encodeURIComponent value)))))
                                                           else
                                                           ""))] }))
               (-> process_handle `spawn))))
      {
        description: (+ "The `open_browser` function opens attempts to open a standalone browser "
                        "window connected to the juno image that called the `open_browser` command.  "
                        "This command is useful if the juno image is running on the local computer, but "
                        "will not work if the juno image and the browser image are on separate computers "
                        "since it spawns a local process.<br>The default browser environment that will "
                        "be started is the `seedling` environment.  Otherwise, use the options object to "
                        "specify a specific browser environment to bring up. <br><br>#### Options "
                        "<br><br>env:string - The name of the browser environment to start from "
                        "the `environments` directory.   The file extension doesn\'t have to be "
                        "specified.<br>list:boolean - If provided as true, the command will list the "
                        "available browser environments which can then be referenced with "
                        "the `env` option to start.")
        usage: ["options:?object"]
        tags: ["browser" "environment" "ui" "image" "images" "seedling"]
        }))
   

                       

(defun enable_ui ()
   (progn
      (declare (string *user_interface*)
               (global *user_interface*)
               (object LZString)
               (global LZString))
      (unless (is_symbol? `*user_interface*)
         (defglobal `*user_interface*
            (-> LZString `compressToBase64 (read_text_file "./environments/seedling.html"))))
   (add_http_route "GET" "/ui" (content_spooler_with_type (fn ()
                                                             (-> LZString `decompressFromBase64 *user_interface*))
                                                          "text/html"))))

(defun start (options)
  (let
     ((options (or options {
         hostname: `localhost
     })))
     (if (and (or options.certFile options.cert)  
              (or options.key options.keyFile))
        (if (and (not (blank? temp_cert))
                 (not (blank? temp_key)))
            (progn
               (set_prop options
                  `use_TLS true
                  `cert temp_cert
                  `key temp_key)
               (log "")
               (log " -- NOTICE ------------ ")
               (log "Starting the server with a temporary certificate for initial usage. ")
               (log "This certificate will not be immediately trusted by your browser.")
               (log "You should replace the temporary certificates with permanent")
               (log "certificates and use the `certFile` and `keyFile` options with ")
               (log "(http/start) for long term https use.")
               (log ""))))
               
       
   (env_bank (or options.port (get_default [ `http_services `port ]))
             (or options.base_directory (get_default [ `http_services `base_directory ] *env_config*) "./")
             options)))



(defun serve_site (service_path port file_root options)
   (let
      ((server (create_http_server port {})))
      (add_http_route "GET" service_path (file_spooler file_root))
      (serve_using_handler server default_handler options)))

(defun *on_serialization* ()
   (progn
      (console.log "http: running preserialization")
      (defglobal *http_routes_storage* (reader (as_lisp *http_routes*)))))


;; ----- Logging setup for connected REPLS ----

;; Keep a list of interested parties to log messages 
(defglobal core/*log_subscribers* 
   {})


(defun sub_log (websocket_id) 
   (if (prop http/*active_websockets* websocket_id)
       (set_prop  *log_subscribers*
          websocket_id
          (eval
             `(fn (`& args)
                 (let
                    ((ws (prop (prop http/*active_websockets* ,#websocket_id) `ws)))
                    (if ws
                       (http/send_to_ws ws
                                        (http/encode_remote_result 0 args (current_namespace)
                                                                   {
                                                                     `category: "log"
                                                                     }))
                       (progn
                          (console.log "ws is invalid - throwing and should be removed.")
                          (throw Error "Invalid websocket")))
                    true))))))
         

(defglobal core/saved_log_fn core/log)

(defun core/logger (`& args)
   (progn
      (apply console.log (+ "" (formatted_date (new Date)) " ") args)
      (defvar removes [])
      (map (fn (subscriber_detail idx total_idx)
              (destructuring_bind (ws_id subscriber)
                 subscriber_detail
                 (try
                    (apply subscriber args)  ;; if no problems, keep in the subscription list
                    (catch Error (e)
                       (progn
                          (push removes ws_id) ;; otherwise remove
                          nil)))))
           (pairs *log_subscribers*))
      ;; now pull the invalid ones
      (for_each (removal_id removes)
         (progn
            (console.log "logger: removing subscriber at " removal_id " due to caught error")
            (delete_prop core/*log_subscribers* removal_id)))
      nil))



(defun *initializer* ()
   (progn
      (= *http_routes* *http_routes_storage*)
      (undefine `*http_routes_storage*)
      (= core/log core/logger)
      (if (resolve_path [ `http_services `listen_on_start ] *env_config*)
          (http/start))))

(register_feature "http_server")
(import "pkg/http_client.juno")


true

                 

    
