;; Services and utilities for handling server requests

;; the create_http_server sets up the initial listener on the specified port
;; requires Deno





(when (not (contains? "http" (namespaces)))
  (create_namespace `http))


(declare (namespace http))

(import "pkg/base-io.lisp")
(import "pkg/lz-string.juno")

;; A list of routes to be checked
;; they are of the form [regex_match route_handler_function]


(defvalue *http_routes*
   [])


;; for debugging purposes..will be removed
(defglobal $request nil)
(defglobal $response nil)


;; various accessors to the reques_eventt object

(defun get_content_type (request)
   (-> request.headers `get "content-type"))

(defun get_user_agent (request_event)
   (-> request_event.request.headers `get "user-agent"))

(defun get_method (request_event)
   request_event.request.method)

(defun json_response (obj)
   (new Blob [(JSON.stringify obj)]
        { `type: "application/json" }))



(defun add_http_route (method path_specifier route_handler)
   (if (and (is_string? method)
            (is_string? path_specifier)
            (is_function? route_handler))
       (let
          ((path_regex (new RegExp (+ "^" (uppercase method) " " path_specifier)))
           (exists? (reduce (existing_path_set *http_routes*) 
                       (destructuring_bind (existing_path existing_route_handler)
                          existing_path_set
                          (when (== (-> path_regex `toString) (-> existing_path `toString))
                             existing_path)))))
          ;; if it exists, return an explanation why it wasn't added
          (if (> (length exists?) 0)
              {
                  added: false
                  matched: exists?
              }
              (progn
                 (push *http_routes* [path_regex route_handler])
                 {
                     added: true
                     path_regex: path_regex
                     handler: route_handler
                 }))))
   {
     usage:["method:string" "path_specifier:string" "route_handler:function"]
     description: (+ "Adds a new route handler function to *http_routes* for " 
                     "the given method and route.  If successful returns an "
                     "object containing the created path_regex, the passed "
                     "handler function and an added key set to true.  If "
                     "the function fails, returns an objec with a matched "
                     "key and containing what route matched the given route and "
                     "an added key set to false.")
     tags: [`http `io `server `network `routes]
   })
 
(defun remove_http_route (method path_specifier)
   (if (and (is_string? method)
            (is_string? path_specifier))
       (let
          ((path_regex (new RegExp (+ "^" (uppercase method) " " path_specifier)))
           (matched_idx nil)
           (removed_route nil))
            
          (map (fn (existing_path_set idx)
                  (destructuring_bind (existing_path route_handler)
                     existing_path_set
                     (when (== (-> path_regex `toString) (-> existing_path `toString))
                        (= matched_idx idx))))
               *http_routes*)
          (if matched_idx
              (progn
                 (= removed_route (prop *http_routes* matched_idx))
                 (-> *http_routes* `splice matched_idx 1)
                 { removed: true
                   path_regex: removed_route.0
                   handler: removed_route.1 })
              {
                  removed: false
                  reason: "Not Found"
                  path_regex: path_regex
              })))
   {
     description: (+ "Removes the handler function for the given method and path.  "
                     "If successful, the function eturns an object with a removed " 
                     "flag set to true, the path regex of the removed route and the "
                     "the handler for the function.  If not successful, the removed "
                     "flag is set to false, a reason flag (currently only 'Not Found' "
                     "and the path regex that was used to find the target route in "
                     "the handler table.")
     usage: ["method:string" "path_specifier:string"]
     tags: ["routes" "http" "io" "server" "network"]
     })
          

(defun create_http_server (port_number options)
   (-> Deno `listen (+ {}
                     { port: port_number }
                     (or options {})))
   {
       description: (+ "Creates an http server on the specificied port number.  See Deno.listen for other options.")
       usage: ["port_number:number" "options:object"]
       tags: ["server" "http" "network" "io" "handler"]
    })



                
(defun serve_using_handler (server handler options)
   (let
      ((state (+ { `run_server: true `request_count: 0 }
                 (if (is_object? options)
                     options
                     {})))
       (control_function (fn (command)
                            (cond
                               (== command "stop")
                               (progn
                                  (set_prop state `run_server false)
                                  (-> server `close)
                                  state)
                               (== command "status")
                               (clone state)
                               else
                               (clone state))))
       (handle_connection (fn (connection)
                             (new Promise (fn (resolve)
                                             (progn
                                                (log "handle_connection: new connection")
                                                (resolve true)
                                                (try
                                                   (handler connection state)
                                                   (catch Error (e)
                                                      (progn
                                                         (if options.on_error
                                                            (options.on_error server connection state)
                                                            nil))))))))))
      
      (new Promise
         (fn (resolve)
            (progn
               (resolve control_function)
               (let
                  ((connection nil))
                  (while state.run_server
                     (try
                        (progn
                           (= connection (-> server `accept))
                           (handle_connection connection))
                        (catch Error (e)
                           (if (== state.run_server false)
                               true ;; expected
                               (progn
                                  (if options.on_connection_error
                                     (-> options `on_connection_error e)
                                     (console.error (formatted_date (new Date)) " serve_using_handler: error: " e))))))))))))
   
   {
     description: (+ "Given a Listener object, a handler function (see default_handler) "
                     "and an optional options object, sets up service controller for "
                     "the provided handler.  A control_function is returned, which can "
                     "be used to command the state of the service handler.  The control "
                     "function takes a single command string:<br>"
                     "stop:string - stops the listener and turns off the server. "
                     "status - returns a status object representing the state of the "
                     "operation of the service.  If the status function is "
                     "called without an argument, the current state is returned. <br><br>"
                     "The serve_using_handler function returns a control function immediately "
                     "but the service will be running using the handler in a yield loop "
                     "for new requests.  Options: <br>"
                     "on_response:function - A function called with the request_event and "
                     "response_object for logging purposes: (on_response request_event response_event). <br>"
                     "on_error:function: A function called when an error is encountered that ")
     usage: ["server:Listener" "handler:function" "options:object"]
     tags: ["server" "http" "network" "io"]
     })

                   
(defun find_matching_route (method pathname)
   (if (and (is_string? method)
            (is_string? pathname))
       (let
          ((match_target (+ (uppercase method) " " pathname))
           (matched_regex nil)
           (matched nil))
          (for_each (path_set *http_routes*)
             (destructuring_bind (candidate_regex route_handler)
                path_set
                (= matched_regex (scan_str candidate_regex match_target))
                (when (> (length matched_regex) 0)
                   (= matched { `pathname: pathname 
                                `method: method
                                `handler: route_handler
                                `matched_handler_path: matched_regex
                                `matched_regex: candidate_regex })
                   (break))))
          matched)
       nil)
   { 
     description: (+ "Searches the existing HTTP routes for the given method and "
                     "pathname and returns a matched object with the following fields:<br>"
                     "pathname:string - The pathname provided and matched<br>"
                     "method:string - The HTTP method verb provided such as GET or POST<br>"
                     "handler:function - The handler function to be used for the method "
                     "and path combo.<br>"
                     "matched_handler_path:object - The RegExp match object returned via " 
                     "the RegExp matched function.<br>"
                     "matched_regex:RegExp - The matching regexp function.")
     usage: ["method:string" "pathname:string"]
     tags: ["server" "http" "routes" "network"]
     })
 

(defun arguments_for_url (url)
   (if (instanceof url URL)
       (let
          ((vals {}))
          (-> (prop url `searchParams) `forEach (fn (v i) (set_prop vals i v)))
          vals)
       (throw TypeError "arguments_for_url requires a URL type object"))
   {
     `description: "For a given URL object, returns an object with the arguments as key value pairs."
     `usage: ["url:URL"]
     `tags: ["http" "uri" "url" "parameters" "params"]
     })

(defun process_multipart_form (form_data)
  (let
      ((iter (-> form_data `keys))
       (entry_key nil)      
       (data {}))
    (= entry_key (-> iter `next))
    
    (while (not entry_key.done)
      (progn      
       (set_prop data
                 entry_key.value
                 (-> form_data `get entry_key.value))                   
       (= entry_key (-> iter `next))))    
    data))
    
    

(defun post_body(request_event)
   (let
      ((read_buffer (new Uint8Array 8192))       
       (result nil)
       (comps nil)
       (content_type nil)
       (multipart nil)      
       (read_op nil)
       (rdr nil))
     (= comps (split_by ";" (or (get_content_type request_event.request) "")))
     (= content_type (first comps))
     (when (and (> comps.length 1)
                (starts_with? "boundary=" (trim comps.1)))
       (= multipart {
                     `boundary: (second (split_by "=" comps.1))
                     `content: []
                     }))
     (cond
       (== content_type "application/json")             
       (= result (-> request_event.request `json))

       (== content_type "multipart/form-data")
       (progn                         
        (= result (process_multipart_form (-> request_event.request `formData)  multipart)))
       
       (starts_with? "text/" content_type)
       (= result (-> request_event.request `text))
       
       else 
       (progn        
        (= result (new Uint8Array (-> request_event.request `arrayBuffer)))))
       ;(= result (-> request_event.request `formData)))
      result))
          

(defun get_parameters_for_match (match_obj request_event url)
   (let
      ((matched_handler_path (prop (first match_obj.matched_handler_path) `0))
       (path_comps (split_by " " matched_handler_path))
       (method (first path_comps))
       (service_path (second path_comps))
       (remaining_path (or (-> match_obj.pathname `substr (length service_path)) ""))
       (argset (arguments_for_url url)))
      {
          path: remaining_path
          service_path: service_path
          arguments: argset
          parameters: (if (== method "POST")
                           (post_body request_event)
                           {})
          method: method
      })
   {
       `description: (+ "For a given matched object from the function find_matching_route, "
                        "returns an object containing the service_path, which is the first "
                        "matched path in the http_routes table, the remaining path as the "
                        "path key, which can be used by the route_handler_function, the "
                        "arguments if any from the URL, and the method.  This function "
                        "normalizes the request where possible for route handler logic.")
       `usage: ["match_obj:object" "request_event:RequestEvent" "url:URL"]
       `tags: ["http" "url" "parameters" "params"]
   })
      


(defun gen_appropriate_response (request_event error_data)
   (cond
      (== (get_content_type request_event.request) "application/json")
      (json_response { `rval: "FAIL" `message: error_data })
      else
      error_data))
     

(defun http_request_router (request_event state)
   (let
      ((url (new URL request_event.request.url))
       (method request_event.request.method)
       (filepath (decodeURIComponent url.pathname))
       (matched_handler nil)
       (parameters nil)
       (service_path nil)
       (response nil))
     (= matched_handler (find_matching_route method filepath))
     (= $request request_event)
      (if matched_handler
         (progn
            (try
              (progn               
                  (= parameters (get_parameters_for_match matched_handler request_event url))
                  ;(console.log "http_request_router: parameters: " parameters)
                  (= response (-> matched_handler `handler parameters request_event))
                  (if (not (instanceof response Response))
                      (throw TypeError "Invalid Response object from handler")))
               (catch Error (e)
                  (progn
                     (console.error "http_request_router: error on handler call: " e)
                     
                     (= response (new Response (gen_appropriate_response request_event e.message) { `status: 500 } ))
                     )))
            (set_prop response
               `service_parameters
               parameters)
            response)
         (new Response "404 Not Found" { status: 404 })))
   {
     `description: (+ "For a given HTTP request_event, references *http_routes* to find a matching "
                      "service handler for a given request method and path, and then if a match "
                      "is found, the route_handler function specified for the route in *http_routes* "
                      "is called with the parameters object returned by get_parameters_for_match and "
                      "the request_event.  The route_handler_function is expected to return a type "
                      "Response object, which will be sent back to the client. ")
     `usage: ["request_event:RequestEvent"]
     `tags: ["http" "url" "parameters" "params"]
     })
                      
 
     
    

(defun default_handler (connection state)
   (if (and connection (is_object? state))
       (let
          ((http_connection (-> Deno `serveHttp connection))
           (url nil)
           (file nil)
           (filepath nil)
           (method nil)
           (dirname nil)
           (not_found_response nil)
           (handler nil)
           (response nil))
          (try
             (for_with (request_event http_connection)
                (if state.run_server
                   (try
                      (progn
                         (set_prop state
                            `request_count (+ 1 state.request_count))
                         (try
                            (= response (http_request_router request_event state))
                            (catch Error (e)
                               (progn
                                  (console.error "default_handler: error in handler: " e)
                                  (-> request_event `respondWith (new Response (gen_appropriate_response request_event e.message) { status: 500 })))))
                         (when state.on_response
                            (-> state `on_response request_event response))
                         (-> request_event `respondWith response))
                      (catch Error (e)
                         (progn
                            (console.error "default handler: error on response completion: " e))))
                   
                   (-> http_connection `close)))
             (catch Error (e)
                (progn
                   (console.error "default_handler: error on waiting for new connection: " e.message)
                   nil)))))
   {
     `description: (+ "The default handler object is called with a connection and a state " 
                      "object and manages the response to the request_event provided by " 
                      "the http_connection.  While the state object run_server key is "
                      "set to true, it will continue to serve requests for a given connection. "
                      "Once state.run_server is set to a non true value, the http connection "
                      "will be closed and further requests will not complete. <br><br>"
                      "Example: <br>"
                      "<code>"
                      ";; set up the server..\n"
                      "(defglobal server (create_http_server 56342))\n" 
                      "(defglobal ctl (serve_using_handler server default_handler))\n"
                      ";; ctl is a function where the status can be managed.\n"
                      "</code>"
                      "See also serve_using_handler for more details on the returned "
                      "control function.")
     `usage: ["connection:Listener"]
     })
                 

(defmacro file_spooler (base_directory)
   `(fn (request_parameters request_event)
       (let
          ((filepath request_parameters.path)
           (file nil)
           (absolute_path (+ ,#base_directory "/" filepath))
           (descriptor nil)
           (entries [])
           (readable_stream nil))         
          (try
            (progn
               (= descriptor (Deno.stat absolute_path))
               (cond 
                  descriptor.isFile
                  (progn
                     (= file (-> Deno `open absolute_path { read: true }))
                     (= readable_stream file.readable)
                     (new Response readable_stream))
                  descriptor.isDirectory
                  (progn
                     (for_with (entry (Deno.readDir absolute_path))
                        (push entries entry))
                     (new Response (json_response { `rval: "OK" `entries: entries })))))
             (catch Error (e)
                (progn
                   (new Response "404 Not Found" { status: 404 }))))))
   {
       `description: (+ "Creates an HTTP file streamer bound to the provided base_directory. The "
                        "macro returns a function that can be used as a route handler.  To do so, "
                        "add the returned function with a request method and service path to "
                        "*http_routes*.  Use the add_http_route function to do so.")
       `usage: ["base_directory:string"]
       `tags: ["http" "route_handler" "file" "spool"]
   })



;; Add a simple file service

(defparameter *http_file_server*
   {
       `log: []
       `log_length: 50
       `base_directory: nil
   })

(defmacro content_spooler (content_function content_type)
   `(fn (request_parameters request_event)
       (let
          ((content_function ,#content_function)
           (content_type ,#content_type))
          (try
            (progn
               (new Response (new Blob [(content_function request_parameters request_event)]
                                           { `type: content_type })))
                   
             (catch Error (e)
                (progn
                   (new Response "500 Internal Server Error" { status: 500 }))))))
   {
     `description: (+ "Creates an HTTP content streamer for a lambda. The macro returns a "
                      "function that can be used as a route handler.  To do so, add the returned "
                      "function with a request method and service path to *http_routes*.  Use the "
                      "add_http_route function to do so.  <br>The lambda is called with the arguments "
                      "(request_parameters request_event). ")

       `usage: ["content_function:function" "content_type:string"]
       `tags: ["http" "route_handler" "file" "spool" "content" ]
   })

(defun http_file_server (port base_directory options)
   (if (and (is_number? port)
            (is_string? base_directory))
       (let
          ((service_route (add_http_route "GET" (or options.service_path "/files") (file_spooler base_directory)))
           (server nil)
           (ctl nil)
           (on_response (fn (request_event response)
                           (progn
                              (console.log "request_event: " request_event)
                              (console.log "response: " response.headers)
                              (push *http_file_server*.log
                                    {
                                      `request_time: (time_in_millis)
                                      `request_url: request_event.request.url
                                      `response_code: response.status
                                      `file_sent: response.service_parameters.path
                                      })
                              (when (> (length *http_file_server*.log)
                                       *http_file_server*.log_length)
                                 (take *http_file_server*.log))
                              true))))
          (if (eq options nil)
              (= options {}))
          (if (not options.on_response)
              (set_prop options
                 `on_response
                 on_response))
              
          (if service_route.added
              (progn
                 (= server (create_http_server port options))
                 (set_prop *http_file_server* 
                    `control
                    (serve_using_handler server default_handler options)
                    `service_path (or options.service_path "/files")
                    `base_directory base_directory)
                 (console.log "*http_file_server*.controller established as the control function.")
                 *http_file_server*)
              (progn
                 (console.error "Cannot add the service route: " service_route ", server not started."))))
       (throw TypeError "http_file_server requires port and base_directory"))
   {
       `usage: ["port:number" "base_directory:string" "options:?object"]
       `description: (+ "Simple file server that adds a route under /files to *http_routes* "
                        "for GET requests.  Provide a base directory to act as the root "
                        "directory for the service.  Options is an object that contains<br>"
                        "service_path:string - The path that the service will run under, by "
                        "default that is /files, but this can be overwritten.<br><br>"
                        "All other options are passed on to the serve_using_handler function "
                        "to be consumed there.")
       `tags: ["http" "file" "server" "web" "io"]
   })

(defparameter *env_bank*
   {
       `log: []
       `log_length: 50
       `base_directory: nil
   })

(defun echo_params (parameters request_event)
   (progn
      (console.log "set_global_value: parameters: " parameters)
      (console.log "set_global_value: request_event: " request_event)
      (new Response (new Blob [(JSON.stringify { "rval":"OK" "parameters": parameters })]
                         { `type: "application/json" })
           {
             `status: 200
            })))

(defun save_file_handler (base_directory)
  (fn (parameters request_event)
    (let
        ((buffer nil)
         (bytes_written 0)
         (path parameters.path)
         (outfile nil)
         (results []))
      
      (when (is_object? parameters.parameters)        
        (for_each (pset (pairs parameters.parameters))
                  (destructuring_bind (name value)
                                      pset                                      
                                      (if (starts_with? "file" name)
                                        (progn
                                         (= buffer (new Uint8Array (-> value `arrayBuffer)))
                                         (= outfile (-> Deno `open (+ base_directory (or path "") "/" value.name) { truncate: true create: true write: true }))
                                         (while (< bytes_written buffer.length)
                                           (inc bytes_written
                                                (-> outfile `write (-> buffer `subarray bytes_written))))                                         
                                         (push results
                                               { filename: (+ path "/" value.name)
                                                 length: bytes_written }))))))
      
        
      (new Response (new Blob [(JSON.stringify { "rval":"OK" "results": results })]
                         { `type: "application/json" })
           {
            `status: 200
            }))))

(defun create_websocket (uri options)
   (let
      ((`options (or options {}))
       (`ws (new WebSocket(uri)))
       (`on_close (if options.on_close
                      options.on_close
                      nil))
       (`on_open (or options.on_open nil))
       (`on_message (or options.on_message (fn (e)
                                              (console.log e.data))))
       (`on_error (or options.on_error (fn (e)
                                          (console.error "ERROR: " e.data)))))
      
      (when on_open
         (set_prop ws
            `onopen
            on_open))
      (when on_close
         (set_prop ws
            `onclose
            on_close))
      
      (when on_message
         (set_prop ws
            `onmessage
            on_message))
      
      (when on_error
         (set_prop ws
            `onerror
            on_error))
      ws)
   {
     `usage: "[uri:string] [options:object]"
     `description: (+ "Creates a websocket client with the given uri format: ws://hostname:port/path and returns a WebSocket object."
                      "Options are as follows with each function receiving the event object as a single argument:<br>"
                      "on_open:function - Called when the socket is opened<br>"
                      "on_close:function - Called when the socket is closed<br>"
                      "on_message:function - Called when the socket receives a message event<br>"
                      "on_error:function - Called when an error event occurs on the socket.<br>")
     `tags: ["socket" "websocket" "connection" "uri" "url" "events" "messages" "message" "open" "create"]
     })

(defun send_to_ws (ws data)
   (-> ws `send (if (is_object? data)
                    (JSON.stringify data)
                    data))
   {
     `description: (+ "Given an active websocket and a data value such as a string or object, sends that data value over "
                      "the websocket. If the websocket is an object, it will call JSON.stringify on the object prior to "
                      "sending.")
     `usage: ["ws:WebSocket" "data:*"]
     `tags: ["socket" "websocket" "connection" "uri" "url" "events" "messages" "message"]
     })

(defun send_object (ws val)
   (http/send_to_ws ws
                 { req_id: nil
                   namespace: (current_namespace)
                   rval: "OK"
                   result_type: "object"
                   result: (JSON.stringify val)
                   needs_eval: true } ))

(defun close_ws (ws)
   (-> ws `close)
   {
     `description: (+ "Closes the provided websocket and returns the result of the operation.")
     `usage: ["ws:WebSocket"]
     `tags: ["socket" "websocket" "connection" "uri" "url" "events" "messages" "message" "close"]
     })



(defun websocket_handler (options)
   (let
      ((options options))
      (assert (and (is_object? options)
                   options.on_open
                   options.on_close
                   options.on_message
                   options.on_error)
              "Invalid options provided to the websocket_handler: options must be an object with on_open, on_close, on_message and on_error functions.")
      ;(console.log "websocket_handler: options: " options)
      (fn (parameters request_event)
         (let
            ((returned_response nil)
             (options options))
            (declare (local socket response)
                     (object socket response))
            (try
               (progn
                 ;
                  ;; embed js since the compiler doesn't have a construct for multiple return values.
                  (javascript | let { socket, response } = Deno.upgradeWebSocket(request_event.request) | )
                 
                  (= returned_response response)
                  (set_prop socket
                     `onopen
                     (fn (event)
                        (-> options `on_open socket event parameters))
                     `onmessage
                     (fn (event)
                        (-> options `on_message socket event))
                     `onclose
                     (fn (event)
                        (-> options `on_close socket event))
                     `onerror
                     (fn (event)
                        (-> options `on_error socket event))))
               (catch Error (e)
                  (progn
                     (console.error "websocket_handler: error on constructing socket: " e.message)
                     (= returned_response (new Response (gen_appropriate_response request_event e.message ) { status: 500 })))))
            returned_response)))
      {
        `description: (+ "Returns a handler function to establish a server-side websocket handler. "
                         "The handler must be provided with an options object that handles the "
                         "event lifecycle of the websocket it is serving.  All provided handler functions "
                         "are provided the socket and the event object.  The on_open object is provided any parameters "
                         "that were provided with the establishing request.<br> Options are as follows:<br>"
                         "on_open:function - Provided the arguments (socket event_object parameters) when a new socket is requested to be established.<br>"
                         "on_message:function - Called as (socket event_object) for the received event message.<br>"
                         "on_close:function - When a socket is requested to close, this function is called with (socket event_object)<br>"
                         "on_error:function - When an error occurs, this function is called as (socket event_object).<br>"
                         "<br>")
        `tags: ["websocket" "handler" "server" "upgrade" "open" ]
        `usage: ["options:object"]
      })

(defglobal *on_compiler_eval_error*
   (fn (thrown_error assembled_js)
      (progn
         (console.log "-- Compiler EVAL Error -----")
         (console.log "ERRROR: "thrown_error)
         (console.log "Assembled JS: " assembled_js)
         (console.log "------"))))
      
(defglobal *http_routes_state* nil)




(defun encode_remote_result (request_id result namespace options)
   (let
      ((obj {
              `req_id: request_id
              `namespace: namespace
              `ws_id: options.ws_id
              `rval: "OK"
              `result_type: (sub_type result)
              }))
      (cond
         (is_error? result)
         (set_prop obj
            `rval "FAIL"
            `message result.message
            `result (cond
                       result.details
                       result.details
                       (is_string? result.stack)
                       (split_by "\n" result.stack)
                       else
                       nil)
            `error_type (sub_type result))
         (is_regex? result)
         (progn
            (set_prop obj
               `result (as_lisp result)
               `needs_read true))
         (is_function? result)
         (progn
            (set_prop obj
               `result (+ {
                            body: (-> result `toString)
                            }
                         (fn_signature result))))
         
         (is_function? result.toJSON)
         (progn
            ;(log request_id "Encoding result in JSON: " )
            (set_prop obj
               `result (try
                          (JSON.stringify result)
                          (catch Error (e)
                             (progn
                                (console.log "encode_remote_result: cannot stringify the result" e.message)
                                result)))
               
               `needs_eval true))
         else
         (progn
            (set_prop obj
               `result (JSON.stringify result)
               `needs_eval (if options.needs_eval
                              true
                              false)
               `needs_read (if options.needs_read
                              true
                              false))))
      obj))

(defglobal *ws_counter* 0)

(defparameter *active_websockets*
   {})

(defun create_ws_repl_handler (options)
   (let
      ((namespace nil)
       (get_evaluator_for_ns (fn (ns)
                                (let
                                   ((env (-> Environment `get_namespace_handle ns)))
                                   (= namespace ns)
                                   env)))
       (evaluator nil)
       (options options)
       (send_to_ws http/send_to_ws))
      ;(console.log "create_ws_repl_handler: options: " options)
      (websocket_handler {
                           `on_open: (fn (ws event parameters)
                                        (try
                                           (progn
                                              
                                              (set_prop ws
                                                 `ws_id (inc *ws_counter*)
                                                 `namespace (or options.namespace "user")
                                                 `log (fn (args)
                                                         (send_to_ws 
                                                            ws
                                                            {
                                                               `req_id: nil
                                                               `result: (if (is_array? args)
                                                                            (as_lisp args)
                                                                            (as_lisp [ args ]))
                                                               `needs_read: true
                                                               `is_log: true
                                                             })))
                                              (set_prop *active_websockets*
                                                 ws.ws_id
                                                 ws)
                                              (console.log "ws_repl_handler: new open request: default namespace: " (or options.namespace "user"))
                                              ;(= evaluator (get_evaluator_for_ns ws.namespace))
                                              
                                              (send_to_ws ws
                                                       { ws_id: ws.ws_id
                                                         namespace: ws.namespace
                                                         }))
                                           (catch Error (e)
                                              (console.log "ws_repl_handler: cannot send to client: " e.message))))
                           `on_message: (fn (ws event)
                                           (let
                                              ((data (JSON.parse event.data))
                                               (command (prop data `command))
                                               (args (prop data `args))
                                               (request_id (prop data `req_id))
                                               (result_type nil)
                                               (evaluator (get_evaluator_for_ns ws.namespace))
                                               (result nil))
                                              (when (> __VERBOSITY__ 0)
                                                 (console.log "ws_repl_handler: -> " result))
                                              (cond
                                                 (and (== command "eval")
                                                      (is_array? args)
                                                      (starts_with? "(use_ns " args.0))
                                                 (try
                                                    (let
                                                       ((cmd (read_lisp args.0))
                                                        (new_ns nil)
                                                        (is_reference? cmd.1))
                                                       (if (is_reference? cmd.1)
                                                           (progn
                                                              (= evaluator (get_evaluator_for_ns (desym_ref cmd.1)))
                                                              (when evaluator
                                                                 (set_prop ws
                                                                    `namespace
                                                                    (desym_ref cmd.1)))
                                                              (send_to_ws ws
                                                                 (encode_remote_result request_id ws.namespace evaluator.namespace { ws_id: ws.ws_id } )))
                                                           (send_to_ws ws 
                                                                 (encode_remote_result request_id "Malformed namespace change request. See use_ns syntax" evaluator.namespace { ws_id: ws.ws_id }))))
                                                    (catch Error (e)
                                                       (send_to_ws ws
                                                          (encode_remote_result request_id e evaluator.namespace { ws_id: ws.ws_id }))))
                                                                  
                                                       
                                                 (and (== command "eval")
                                                      (is_array? args))
                                                 (try
                                                    (progn
                                                       (= result (-> evaluator `evaluate args.0))
                                                       (when (> __VERBOSITY__ 0)
                                                          (console.log "ws_repl_handler: " namespace " <- " result))
                                                       (send_to_ws ws
                                                                   (encode_remote_result request_id result evaluator.namespace { ws_id: ws.ws_id })))
                                                    (catch Error (e)
                                                       (progn
                                                          (console.error "ws_repl_handler: error on eval: " e.message)
                                                          (send_to_ws ws
                                                                      (encode_remote_result request_id e evaluator.namespace { ws_id: ws.ws_id })))))
                                                 (== command "close")
                                                 (progn
                                                    (console.log "closing repl connection")
                                                    (try
                                                       (http/close_ws ws)
                                                       (catch Error (e)
                                                          (progn
                                                             (log "Error on closing: " e.message))))))))
                           `on_error: (fn (ws error)
                                         (log "error on websocket: " error))
                           `on_close: (fn (ws event)
                                         (progn
                                            (when ws.ws_id
                                               (remove_prop *active_websockets*
                                                  ws.ws_id))
                                            (log "websocket closed")))
                           })))



(defglobal ws_repl_handler
   (create_ws_repl_handler { `namespace: "user" })
   {
       `initializer: `(create_ws_repl_handler { `namespace: "user" })
   })
   

(defun env_bank (port base_directory options)
   (let
      ((server nil)
       (on_response (fn (request_event response)
                           (progn
                              ;(console.log "response:" response.status response.headers response)
                              (= $request request_event)
                              (= $response response)
                              (push *env_bank*.log
                                    {
                                      `request_time: (time_in_millis)
                                      `request_url: request_event.request.url
                                      `request_method: response.service_parameters.method
                                      `response_code: response.status
                                      `file_sent: response.service_parameters.path
                                      })
                              (when (> (length *env_bank*.log)
                                       *env_bank*.log_length)
                                 (take *env_bank*.log))
                              true))))
     (add_http_route "GET" "/env" (file_spooler (+ base_directory "/environments")))
     (add_http_route "GET" "/files" (file_spooler base_directory))     
     (add_http_route "POST" "/echo_params"
                     echo_params)
     (add_http_route "POST" "/save_file"
                     (save_file_handler base_directory))
     (add_http_route "GET" "/connect_repl"
                     ws_repl_handler)
     (add_http_route "GET" "/pkg" (file_spooler (+ base_directory "/pkg")))
     
      (if (eq nil options)
          (= options {}))
      (set_prop options
         `on_response
         on_response)
      (= server (create_http_server port options))
      (set_prop *env_bank*
         `control (serve_using_handler server default_handler options)
         `service_path "/env"
         `base_directory base_directory)))

(if_compile_time_defined `Deno
   (defun open_browser (options)
      (let
         ((os (operating_system))
          (browser (or options.path_to_browser
                       (cond
                          (== os "darwin")
                          "/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"
                          (== os "linux")
                          "/usr/bin/google-chrome"
                          else
                          (throw EvalError "Please provide the path_to_browser option.")))))
         (Deno.run { `cmd: [browser "--new-window" (+ "--app=http://localhost:" (or options.port 56432) "/env/" (or options.instance "a1.html")) ] }))))
                       
      

(when (eq nil (resolve_path [ `http_services `port ] *env_config*))
   (unless (prop *env_config* `http_services)
      (set_prop *env_config* `http_services {
                                              `listen_on_start: false
                                              }))
   (set_path [ `http_services `port ] *env_config* 56432))
   
      
    
(defun enable_ui ()
   (progn
      (declare (string *user_interface*)
               (global *user_interface*)
               (object LZString)
               (global LZString))
      (unless (is_symbol? `*user_interface*)
         (defglobal `*user_interface*
            (-> LZString `compressToBase64 (read_text_file "./environments/a1.html"))))
   (add_http_route "GET" "/ui" (content_spooler (fn ()
                                                   (-> LZString `decompressFromBase64 *user_interface*))
                                                "text/html"))))

(defun start (options)
  (progn   
   (env_bank (or options.port (resolve_path [ `http_services `port ] *env_config*))
             (or options.base_directory "./")
             options)))

(defun serve_site (service_path port file_root options)
   (let
      ((server (create_http_server port {})))
      (add_http_route "GET" service_path (file_spooler file_root))
      (serve_using_handler server default_handler options)))

(defun *on_serialization* ()
   (progn
      (console.log "http: running preserialization")
      (= *http_routes* (reader (as_lisp *http_routes*)))))


;
(defun *initializer* ()
   (progn
      (if (resolve_path [ `http_services `listen_on_start ] *env_config*)
          (http/start))))

(register_feature "http_server")
(import "pkg/http_client.juno")

true

                 

    
