;; Levenshtein package
;; Based on open source/public domain code from

;; https://github.com/gustf/js-levenshtein (MIT License)
;; https://rosettacode.org/wiki/Levenshtein_distance (Public Domain)


(when (not (contains? "levenshtein" (namespaces)))
  (create_namespace `levenshtein))


(declare (namespace levenshtein))

(defglobal *LICENSE*
   {
     js-levenshtein: 
"MIT License
     
Copyright (c) 2017 Gustaf Andersson

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \"Software\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE." })




(defun_sync _min (d0 d1 d2 bx ay)
   (javascript "return d0 < d1 || d2 < d1\n  ? d0 > d2\n? d2 + 1\n: d0 + 1\n  : bx === ay\n? d1\n: d1 + 1;\n\n"  ))

;; js-levenshtein
(defun_sync dist (a b)
   (let
      ((_min (get_global "_min")))
   (javascript "if (a === b) {return 0;    }    
   if (a.length > b.length) {var tmp = a;a = b;b = tmp;    }    
  var la = a.length;    var lb = b.length;    
  while (la > 0 && (a.charCodeAt(la - 1) === b.charCodeAt(lb - 1))) {la--;lb--;    }    
  var offset = 0;    
  while (offset < la && (a.charCodeAt(offset) === b.charCodeAt(offset)))
    {offset++;    }    
  la -= offset;    
  lb -= offset;    
  if (la === 0 || lb < 3) 
  {return lb;    }    
  var x = 0;    var y;    var d0;    var d1;    var d2;    var d3;    var dd;    var dy;    var ay;    var bx0;    var bx1;    var bx2;    var bx3;    
  var vector = [];    for (y = 0; y < la; y++) 
  {vector.push(y + 1);vector.push(a.charCodeAt(offset + y));    }    
var len = vector.length - 1;    
for (; x < lb - 3;) 
 {bx0 = b.charCodeAt(offset + (d0 = x));
     bx1 = b.charCodeAt(offset + (d1 = x + 1));
     bx2 = b.charCodeAt(offset + (d2 = x + 2));
     bx3 = b.charCodeAt(offset + (d3 = x + 3));
     dd = (x += 4);for (y = 0; y < len; y += 2) 
     { 
  dy = vector[y];  
  ay = vector[y + 1];  
  d0 = _min(dy, d0, d1, bx0, ay);  
  d1 = _min(d0, d1, d2, bx1, ay);  
  d2 = _min(d1, d2, d3, bx2, ay);  
  dd = _min(d2, d3, dd, bx3, ay);  
  vector[y] = dd;  
  d3 = d2;  
  d2 = d1;  
  d1 = d0;  
  d0 = dy; }    
 }    
 for (; x < lb;) 
  {
     bx0 = b.charCodeAt(offset + (d0 = x));
dd = ++x;
for (y = 0; y < len; y += 2) {
   dy = vector[y];  
 vector[y] = dd = _min(dy, d0, dd, bx0, vector[y + 1]);  
 d0 = dy;
    
}    

  }    
  return dd;")))
;; rosetta code
(defun_sync dist2 (a b)
  (javascript "var t = [], u, i, j, m = a.length, n = b.length;if (!m) { return n; }
  if (!n) { return m; }
  for (j = 0; j <= n; j++) { t[j] = j; }
  for (i = 1; i <= m; i++) {
    for (u = [i], j = 1; j <= n; j++) {
      u[j] = a[i - 1] === b[j - 1] ? t[j - 1] : Math.min(t[j - 1], t[j], u[j - 1]) + 1;
    } t = u;
  } return u[n];"))
  
  

(register_feature "levenshtein")

true
 




