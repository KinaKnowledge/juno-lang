;; Browser Based Workspace
;; Sets up the basic environment
;; Initialize a simple REPL from which to start working



(declare (namespace core))

(defun line_reader (options)
  (let
      ((entry_area (html/textarea { `style: "height: calc(100% - 20px); width: calc(100% - 10px);" } ))
       (result nil)
       (output_container options.output_container)
       (handle_text_input_events (fn (e)
                                   (let
                                       ((lisp_source nil))
                                   
                                     (= lisp_source (prop entry_area `value))
                                     (when (and (== e.key "Enter")
                                                e.shiftKey)
                                         (html/handle_event e)
                                       (console.log "lisp_source: -> " lisp_source)
                                       (options.evaluator lisp_source)
                                       (setTimeout (fn () (set_prop entry_area `value "")) 200)
                                       )))))
    (html/attach_event_listener entry_area
                           `keydown
                           handle_text_input_events)
    entry_area))



(defun browser_repl ()
  (let
      ((body_element (-> document `querySelector "body"))
       (output_container (html/div { `id: "output-container"  `style: "height: 70%; overflow: scroll; display: flex; flex-direction: column-reverse; width: 100%; vertical-align:bottom; " } ))
       (resize_observer nil)                                                      
                                        ;(result nil)
       (current_env Environment)
       (error_state nil)
       (evaluator (fn (lisp_text no_eval)
                    (let
                        ((result nil))
                      (setq error_state nil)
                      (setq current_env (-> Environment `get_namespace_handle (current_namespace)))                      
                      (try
                        (= result (if no_eval
                                    lisp_text
                                    (-> current_env `evaluate lisp_text)))
                        (catch Error (ex)
                          (do
                            (= error_state true)
                            (= result ex))))
                      (console.log "<-" result)
                      (when (not no_eval)
                        (-> output_container
                            `prepend
                            (html/div { style:"border-top: 1px solid #C0C0C0; padding: 5px; margin-top: 1px; background: #FAFAFA; width: calc(100% - 10px); display: inline-block; " }
                                      (html/code { `style: "font-style: italic; color: darkblue;" }
                                                 lisp_text))))
                      (-> output_container
                          `prepend
                          (html/div { `style: "padding: 5px; margin-top: 0px; background: #FAFAFA; width: calc(100% - 10px); display: inline-block; " }
                                    (cond
                                      (is_element? result)
                                      result
                                      (is_number? result)
                                      (html/code { `style: "font-size: 1.1em; color: green;" }
                                                 result)
                                      (or (== true result)
                                          (== false result))
                                      (html/code { `style: "font-size: 1.1em; color: orange;" }
                                                 result)
                                      (is_function? result)
                                      (html/code { `style: "font-size: 1.1em; color: darkblue;" } "Function: "
                                                 (if result.name result.name "anonymous"))
                                      
                                      (and (is_array? result)
                                           (instanceof result.0 Error))
                                      (html/pre { `style: "font-size: 1.1em; color: darkred;" } "ERROR: "
                                                (subtype result.0)
                                                "\n"
                                                result.0.message)
                                      (or error_state
                                          (instanceof result Error))
                                      (html/pre { `style: "font-size: 1.1em; color: darkred;" } "ERROR: "
                                                (subtype result)
                                                "\n"
                                                result.message)                                                                 
                                      else
                                      (html/pre { `style: "font-size: 1.1em;" } (JSON.stringify result nil 3 )))))
                      (set_prop output_container
                                `scrollTop
                                output_container.offsetHeight)
                      result)))
       (reader (line_reader { `output_container: output_container `evaluator: evaluator}))
       (input_container (html/div { `id: "input-container" `style: "height: calc(30% - 15px); overflow: hidden; " }
                                  reader))
       (juno_container (html/div { `id: "juno_container" `style: "height: inherit; max-height: 100%; overflow: hidden;" }
                                 output_container
                                 input_container))
       (perform_resize (fn ()
                         (progn
                          (console.log "resize: " (prop juno_container.parentElement `offsetWidth))
                          (html/set_style [["width" (+ "" (- (prop juno_container.parentElement `offsetWidth) 2) "px")]] juno_container)))))
    
    
    (= resize_observer (new ResizeObserver perform_resize))
    (-> resize_observer `observe body_element)
    {
     `view: juno_container
     `log: (fn (val)
             (evaluator val true))
     `evaluate: (fn (lisp_text)
                  (evaluator lisp_text))
     }))
     
(html/set_style [[ "font-family" "-apple-system,BlinkMacSystemFont,'Segoe UI','Helvetica Neue',Helvetica,sans-serif;"]]
                (-> document `querySelector "body"))



;; ez page header access

(defun core/page_header ()
  (first (html/query_all "head")))

(defglobal core/*env_skeleton* (reader (atob (clone *env_template*))))

(defun core/read_text_file (file)
  (console.log "reading text file stub called"))

(defun core/save_image (options)
   (let
       ((js_resource (save_env { `want_buffer: true
                                 `do_not_include: (conj  [ `browser_repl `line_reader  ])}))
        ;;(boot_up core/browser_boot_code)
        (dcomps (date_components (new Date)))
        (file_version_tag (if (not (blank? options.version_tag))
                              options.version_tag
                              (join "." [ dcomps.year dcomps.month dcomps.day dcomps.hour dcomps.minute ])))
        (scaffold_1 (prop
                     (html/head { `title: "Juno Browser" }
                                (html/style { `id: "juno-css" } "body { font-family: '-apple-system,BlinkMacSystemFont,'Segoe UI','Helvetica Neue',Helvetica,sans-serif;' }")
                                     (html/script { `id: "juno-core" `type: "module" }
                                                  js_resource
                                                  "\n\n"                               
                                                  ;; boot_up
                                                  "\n\n"
                                                  ))
                          `outerHTML))
        (scaffold_2 (prop
                          
                          (html/body { style: "height: 100vh; overflow: hidden;" }
                                     (html/header {  `id: "page-header" style: "background: #F3F3F3; height: 28px; display: flex;" } )
                                     (html/div { `id: "lower_right_corner" style: "position: absolute; right: 50px; bottom: 5px; width: 255px;" } )
                                     )
                          `outerHTML)))               
     (setTimeout (fn ()
                   (do
                     (save_locally (or options.save_as
                                      (+ "juno_image-" file_version_tag ".html"))
                                   (+ "<!DOCTYPE html><html>\n"
                                      scaffold_1
                                      scaffold_2
                                      "</html>")
                                   "text/html" )
                     ;(-> (first (html/query_all "body"))
                                        ;`prepend storage)
                     ))
                 100)
   true))

(defglobal `repl (core/browser_repl))
(defun rlog (val)
  (progn
   (console.log "rlog:" val)
   (-> repl `log val)))

(-> (-> document `querySelector "body")
    `appendChild (prop repl
                       `view))
      
;; announce ourselves to the world..


(rlog (html/div { `style: "display: flex padding: 5px" }
                (html/img { `style: "margin-left: 5px;margin-right: 10px; " src: core/juno_logo height: "15" })
                (html/span { `style: "font-weight: bold; display: inline-block; font-size: 0.9em; line-height: 15px;" } "Browser REPL")
                (html/span { `style: "display: inline-block; margin-left: 10px; font-size: 0.9em; line-height: 15px;" }
                           "Version: " Environment.build_version   )))
(rlog (html/div "Namespace: " (current_namespace)))

(setTimeout (fn ()
              (rlog (if (prop globalThis `in_starter)
                      (html/div "In starter mode")
                      (html/div "Ready"))))
            10)
      



(setTimeout (fn ()
              (progn
               (when (prop globalThis `in_starter)
                 (rlog (html/div "Bootstrapping new image.."))
                 
                 (-> repl `evaluate |
                     (use_unique_symbols "html")
                     (evaluate browser_initializer)
                     (describe `*initializer*)
                     (save_image) | )
                 (rlog (html/div "Complete..Open the newly created html file to use.")))))
            100)
            


                                    
                                    
           
                                    
