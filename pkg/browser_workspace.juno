;; Browser Based Workspace
;; Sets up the basic environment in Browser 
;; Initialize a simple REPL from which to start working



(declare (namespace core))
(console.log "browser_workspace: running")

(defparameter core/is_served? (and (not (blank? (resolve_path [ `location `hostname ] window)))
                                   (== (prop (fetch "/files") `status) 200)))
(console.log "browser_workspace: online? is_served: " is_served?)


(defun core/*initializer* ()
  (let
      ((scripts (-> (page_header) `querySelectorAll "script[id]")))
    (console.log "core/*initializer* running: " *namespace*)
    (if (> scripts.length 0)
      (map (fn (idx)
             (when (not (== (-> (prop scripts idx) `getAttribute `id) "juno-core"))
               (eval `(defglobal ,#(+ "$" (-> (prop scripts idx) `getAttribute `id)) ,#(prop scripts idx)))))
           (range scripts.length)))))


(defun $set_global_theme (theme_name options)
   (if (prop *global_themes* theme_name)
       (let
          ((head_elem (-> document `querySelector "head"))
           (existing (html/get_by_id "juno-css-theme")))
          (if existing
               (-> existing `remove))
          (-> head_elem `append
              (html/style { `id: "juno-css-theme" `type: "text/css" }
               (prop *global_themes* theme_name)) )          
          true)
       (throw ReferenceError "Invalid theme name provided")))

(defun browser_repl ()
  (let
      ((body_element (-> document `querySelector "body"))
       (output_container (html/div { `id: "output-container"  } ))
       (resize_observer nil)                                                      
                                        ;(result nil)
       (current_env Environment)
       (error_state nil)
       (initialized false)
       (evaluator (fn (lisp_text no_eval options)
                    (let
                        ((result nil))
                      (setq error_state nil)
                      (setq current_env (-> Environment `get_namespace_handle (current_namespace)))
                      (log "evaluator: options: " options)
                      (try
                        (= result (if no_eval
                                    lisp_text
                                    (-> current_env `evaluate lisp_text nil options)))
                        (catch Error (ex)
                          (do
                            (= error_state true)
                            (console.error ex)
                            (= result ex))))
                      (console.log "<-" result)
                      (when (not no_eval)                        
                        (-> output_container
                            `append
                            (html/div { style:"border-top: 1px solid #C0C0C0; padding: 5px; margin-top: 1px; width: calc(100% - 10px); display: inline-block; " }
                                      (html/code { `style: "font-style: italic;" }
                                                 lisp_text))))
                      (-> output_container
                          `append
                          (html/div { `style: "padding: 5px; margin-top: 0px; width: calc(100% - 10px); display: inline-block; " }
                                    (cond
                                      (is_element? result)
                                      result
                                      (is_number? result)
                                      (html/code { `style: " color: green;" }
                                                 result)
                                      (or (== true result)
                                          (== false result))
                                      (html/code { `style: " color: orange;" }
                                                 result)
                                      (is_function? result)
                                      (html/code { `style: " color: var(--type-function-color);" } "Function: "
                                                 (if result.name result.name "anonymous"))
                                      (and (is_array? result)
                                           (instanceof result.0 Error))
                                      (html/pre { `style: " color: var(--type-array-color);" } "ERROR: "
                                                (subtype result.0)
                                                "\n"
                                                result.0.message)
                                      (or error_state
                                          (instanceof result Error))
                                      (html/pre { `style: " color: var(--type-error-color);" } "ERROR: "
                                                (subtype result)
                                                "\n"
                                                result.message)
                                      (and (is_array? result)
                                           result.0.error)
                                      (html/pre { `style: " color: var(--type-error-color);" }                                                 
                                                (JSON.stringify result nil 3 ))
                                      else
                                      (html/pre { `style: "" } (JSON.stringify result nil 3 )))))
                      (set_prop output_container
                                `scrollTop
                                output_container.offsetHeight)
                      result)))
       
       (input_container (html/div {  `style: "height: calc(20% - 15px); overflow: hidden; " }
                                  ""))
       (juno_container (html/div { `id: "discard_container" `style: "height: inherit; max-height: 100%; overflow: scroll;" }
                                 output_container
                                 input_container))
       (perform_resize (fn ()
                         (progn
                          ;(console.log "repl: resize: " (prop juno_container.parentElement `offsetWidth))
                          (html/set_style [["width" (+ "" (- (prop juno_container.parentElement `offsetWidth) 2) "px")]] 
                                          juno_container)
                          )))
       (initialize (fn ()
                     (progn
                      (if initialized
                        (evaluator (html/div { `style: "display: flex padding: 5px" } "WARNING: REPL already initialized") true)
                        (progn
                         (= initialized true)
                         (= resize_observer (new ResizeObserver perform_resize))
                         (-> resize_observer `observe juno_container.parentElement)
                         (evaluator (html/div { `style: "display: flex padding: 5px" }                
                                              (html/span { `style: "font-weight: bold; display: inline-block;" } "Juno Environment Builder")
                                              (html/span { `style: "display: inline-block; margin-left: 10px;" }
                                                         "Environment Version: " Environment.build_version   )) true)                         
                         (evaluator (html/div "Namespace: " (current_namespace)) true)))))))
    {
     `view: juno_container
     `input_container: input_container
     `initialize: initialize
     `output_container: output_container
     `log: (fn (val)
             (evaluator val true))
     `evaluate: (fn (lisp_text options)
                  (evaluator lisp_text nil options))
     }))
     
;; easy page header access

(defun core/page_header ()
  (first (html/query_all "head")))

(defglobal core/*env_skeleton* (reader (LZString.decompressFromBase64 (clone *env_template*))))

(defun core/read_text_file (file)
  (console.log "reading text file stub called"))

(defun core/save_image (options)
   (let
       ((js_resource (save_env { `want_buffer: true
                                `do_not_include: (conj  [ `browser_repl `line_reader  ] (if (is_array? options.do_not_include) options.do_not_include []) )}))
        (scripts (-> (page_header) `querySelectorAll "script[id]"))
        (styles (-> (page_header) `querySelectorAll "style[id]"))
        (do_not_include_scripts (if (is_array? options.do_not_include_scripts)
                                    options.do_not_include_scripts
                                    []))
        (log (if (is_function? options.log)
               options.log
               console.log))
        (save_method nil)
        (additional_embeds (let
                               ((acc [])
                                (deduper (new Set)))
                             (map (fn (idx)
                                     (let
                                        ((script_id (-> (prop scripts idx) `getAttribute `id)))
                                        (when (and (not (== (-> (prop scripts idx) `getAttribute `id) "juno-core"))
                                                   (not (-> deduper `has (-> (prop scripts idx) `getAttribute `id)))
                                                   (not (contains? script_id do_not_include_scripts)))
                                           (-> deduper `add (-> (prop scripts idx) `getAttribute `id))
                                           (push acc (prop scripts idx)))))
                                  (range scripts.length))
                             acc))
        (additional_styles (let
                               ((acc [])
                                (deduper (new Set)))
                             (map (fn (idx)
                                    (when (and (not (== (-> (prop styles idx) `getAttribute `id) "juno-css"))
                                               (not (-> deduper `has (-> (prop styles idx) `getAttribute `id))))                                      
                                      (-> deduper `add (-> (prop styles idx) `getAttribute `id))
                                      (push acc (prop styles idx))))
                                  (range styles.length))
                             acc))
        (total_export_script_count (+ (length additional_embeds) 1)) ;; add one for juno-core
        (script_ids (for_each (embedded additional_embeds)
                        (-> embedded `getAttribute `id)))
        (dcomps (date_components (new Date)))
        (file_version_tag (if (not (blank? options.version_tag))
                              options.version_tag
                              (join "." [ dcomps.year dcomps.month dcomps.day dcomps.hour dcomps.minute ])))
        (scaffold_1 (prop
                     (html/head { `title: "Seedling" }
                                (html/meta { `charset: "utf-8" })
                                (html/style { `id: "juno-css" } "")
                                (html/script { `id: "juno-core" `type: "module" }
                                             js_resource
                                             "\n\n"                               
                                             ;; boot_up
                                             "\n\n")
                                (for_each (stl (or additional_styles []))
                                          (html/style { `id: (-> stl `getAttribute `id) } 
                                                      (prop stl `innerHTML)))
                                                                           
                                (for_each (scr (or additional_embeds []))
                                          (html/script { `id: (-> scr `getAttribute `id) `type: (-> scr `getAttribute `type) `charset: (-> scr `getAttribute `charset) }
                                                       (prop scr `innerHTML))))
                                     ;scr))
                                        
                          `outerHTML))
        (scaffold_2 (prop
                          
                          (html/body { style: (+ "" (if options.no_header 
                                                        "height: 100vh; "
                                                        "height: 98vh; ")
                                                 " overflow: hidden;")
                                             `id: "body" }
                                     (if options.no_header
                                        (html/header {  `id: "page-header" })
                                        (html/header {  `id: "page-header" class: "juno-page-header" } ))
                                     (html/div { `id: "lower_right_corner" style: "position: absolute; right: 50px; bottom: 5px; width: 255px;" } )
                                     )
                          `outerHTML)))

     (declare (function http/send_files http/data_to_file)
              (global http/send_files http/data_to_file))
     
     (log "save_image exporting: " script_ids)
     (log "namespaces: " (namespaces) (sort (http/symbols)))
     ;(try
      ; (log "http: " http/send_files)
       ;(catch Error (e)
        ; (console.error "Issue on accessing http: " e)))
     
     (if (and is_served? 
              (not options.save_locally)
              (contains? "http_client" *env_config*.features))
       (progn
        (console.log "we are online and we have http client software")
        (= save_method (fn (fname content content_type)
                             (http/send_files "/save_file" (http/data_to_file (+ "environments/" (or options.save_as (prop *env_config*.export `save_prefix) "a1") ".html") content content_type)))))
       (= save_method save_locally))
     (new Promise (fn (resolve reject)
                    (setTimeout (fn ()
                                  (try
                                    (resolve (save_method (or options.save_as                                       
                                                          (+ (or (prop *env_config*.export `save_prefix) "juno_image")
                                                             "-" file_version_tag ".html"))
                                                      (+ "<!DOCTYPE html>\n<html>\n"
                                                         scaffold_1
                                                         scaffold_2
                                                         "</html>")
                                                      "text/html" ))
                                    (catch Error (e)
                                      (reject e))))
                                100)))))
     

(defun core/*system_initializer* ()
  (let
      ((pkg (-> Environment `evaluate "core/html_package")))
    (console.log "system initializer: initializing packaged html_package")
    (-> Environment `evaluate pkg nil { `source_name: "pkg/html.juno" })

    ;(eval (reader (clone browser_repl_package)))
    (undefine `browser_repl_package)
    (undefine `rlog)
    (set_prop globalThis `env Environment) ;; establish a global handle (not necessary but handy for development)
    (console.log "system initializer Complete")))

(defglobal `repl (core/browser_repl))
(defun rlog (val)
  (progn
   (console.log "rlog:" val)
   (-> repl `log val)))

(-> (-> document `querySelector "body")
    `appendChild (prop repl
                       `view))

(defglobal $current_theme (-> (prop (new URL window.location) `searchParams) `get "theme"))
(console.log "$current_theme: " $current_theme)

(when (not (blank? $current_theme))
  ($set_global_theme $current_theme))

(setTimeout (fn ()
              (rlog (if (prop globalThis `in_starter)
                      (progn
                       (-> repl `initialize)
                       (html/div "In starter mode..building new image.."))
                      (html/div "Ready"))))
            10)
      



(setTimeout (fn ()
              (progn
               (when (prop globalThis `in_starter)
                 (rlog (html/div "Bootstrapping new image.."))                 
                 (-> repl `evaluate |
                     (use_unique_symbols "html")
                     (evaluate (LZString.decompressFromBase64 browser_initializer) { `source_name: "pkg/browser_initializer.juno" })
                     | { `source_name: "pkg/browser_initializer.juno" })
                 (undefine `browser_initializer) ;; no longer needed in text form, remove to save space
                 (-> repl `evaluate | (save_image) | )
                 (rlog (html/div "Complete..Open the newly created html file to use.")))))
            100)
            


                                    
                                    
           
                                    
