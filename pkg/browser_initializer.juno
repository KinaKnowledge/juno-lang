
;; main browser initialization file - initializes the user browser environment
;; after the browser_workspace has setup the underlying environment

(defglobal main_menu_button nil) ;; placeholders 
(defglobal resource_loader_button nil)
(defglobal juno_container nil)
(defglobal repl_editor nil)
(defglobal *scratch* ";; *scratch* buffer\n\n")
(defvalue *key_bindings* {
                           repl:{}
                           buffer_editor:{}
                           global:{}
                           active: {}
                           })



(defvalue *main_menu* [])
(defvalue *serialized_controls* [])

;; the controls at the top level of the view
(defglobal $root_controls [])

;; the global pointer to the control which has focus
;; nil if there are no focus points or values.

(defparameter *last_focus* nil)
(defparameter *last_top_frame* nil)
(defparameter *app_menu_control* nil)
(defparameter *log_key_events* false)

(set_prop *key_bindings*.repl          
          `history_next_entry { win: "Ctrl-Alt-n" mac: "Ctrl-Alt-n" }                                                               
          `history_prior_entry { win: "Ctrl-Alt-p" mac: "Ctrl-Alt-p" })

(create_css_entry "td.juno-obj-to-dom-key"
                  [["vertical-align" "top"]
                   ["color" "#881280"]
                   ["text-align" "right"]
                   ["font-weight" "bold"]
                   ["padding-right" "5px"]])

;;(create_css_entry "span.juno-value"
 ;;                 [["display" "inline-block"]])
   
;;(create_css_entry "li.juno-array-item"
;;                  [["list-style" "decimal"]])   
 


      

(defun_sync value_to_dom (val options _path)
  (let 
      ((classes "juno-value juno-type-")
       (options (or options {}))
       (elem nil)
       (_path (or _path [] ))
       (lpath (function () (join "~" _path))))
    (declare (function array_to_dom obj_to_dom function_to_dom)
             (global array_to_dom obj_to_dom function_to_dom))
    (= elem
       (cond 
         (is_array? val)
         (array_to_dom val options _path)
         (is_element? val)
         (progn
          (if val.parentElement
            (details
             (summary { `lpath: (lpath) `class: (+ classes "view") `tabindex:0 } (+ (sub_type val) " "))
             (span { `tabindex: 0 `style: "font-family: var(--main-app-font)" } "[ RENDERED ELEMENT ]"))
            val))
         (is_regex? val)
         (span { `lpath: (lpath) `tabindex: 0  `class: (+ classes "regexp") } (-> val `toString))
         (is_string? val)
         (if (starts_with? "=:" val)
           (span { `lpath: (lpath) `tabindex: 0  `class: (+ classes "symbol") } (JSON.stringify val))
           (span { `lpath: (lpath) `tabindex: 0 `class: (+ classes "string") } (JSON.stringify val)))
         (instanceof val Error)
         (details (summary { `class: (+ classes "error") } 
                           (span { `tabindex: 0 `class: (+ classes "error") `style: "margin-left: 5px; font-style: italic;" } val.name " " val.message))
                  (progn
                   (defvar tmp (pre { `tabindex: 0 `class: (+ classes "error") }))
                   (set_prop tmp `innerHTML (join "\n" (rest (split_by "\n" val.stack))))
                   tmp))
         (is_function? val)
         (function_to_dom val options _path)
         (is_object? val)
         (obj_to_dom val options _path)          
         else
         (span { `lpath: (lpath) `tabindex: 0 `class: (+ classes (lowercase (sub_type val))) } val)))
    elem))  

(defun_sync function_to_dom (val options _path)
  (let
      ((_path (or _path []))
       (options (or options {}))
       (detail_elem nil)
       (expanded false)
       (expansion_elem nil)
       (lpath (function () (join "~" _path)))
       (classes "juno-value juno-type-function")
       (render_function (function ()
                                  (pre  { `lpath: (lpath)  `tabindex: 0 `class: classes } (-> val `toString)))))
    (assert (is_function? val))
    (= detail_elem
       (details (summary { `tabindex: 0 `lpath: (lpath) `class: (+ classes "function") }
                        (span { `lpath: (lpath)
                               `class: (+ classes "function")
                               `style: "margin-left: 5px; font-style: italic;" }
                              (aif (fn_signature val)
                                   (if (== it.type "class")
                                     (+ "class " it.name)                                            
                                     (+ (if (== it.type "async")
                                          "(fn ("                                            
                                          "(function (")
                                        (join " " it.args)
                                        "))")))))
                (= expansion_elem (span { `class: "juno-in-expansion" } (+ (dtext "Opening") "...")))))
    (attach_event_listener detail_elem
                                `toggle
                                (fn (e)
                                    (unless expanded
                                     (= expanded true)
                                     (-> expansion_elem `replaceWith (render_function))
                                     (= render_function nil))))
    detail_elem))
    
                
       
       
       

(defun_sync array_to_dom (arr options _path)
    (let
        ((total_len arr.length)
         (_path (or _path []))
         (lpath (function () (join "~" _path)))
         (options (or options {}))
         (expanded false)
         (expansion_mode false)
         (detail_elem nil)
         (expansion_elem nil)
         (idx -1)
         (segment_size 10)
         (new_row_elem [])
         (render_array (function ()
                           (ol { `lpath: (lpath) `start: 0 `class: "juno-type-array" } 
                             (progn 
                                (for_each (val arr)
                                    (progn
                                        (inc idx)
                                        (li { `class: "juno-array-item" } 
                                            (value_to_dom val options (conj _path [idx])))))))))
         (row_elem []))
      (assert (is_array? arr))
      (when (or (> _path.length 2)
                (> arr.length (or options.expansion_length 30)))
        (= expansion_mode true))
            
      (= detail_elem 
         (details (+ { `class: "juno-type-array" }
                      (if (and (== _path.length 0)
                              (not expansion_mode))
                      { `open: true }
                      {}))
                 (summary { `lpath: (lpath)  `tabindex: 0 }  "Array [" total_len "] ")
                 (if expansion_mode
                     (= expansion_elem (span { `class: "juno-in-expansion" } (+ (dtext "Opening") "...")))
                     (render_array))))
     (when expansion_mode
         (attach_event_listener detail_elem
                                `toggle
                                (fn (e)
                                    (unless expanded
                                     (= expanded true)
                                     (-> expansion_elem `replaceWith (render_array))
                                     (= render_array nil)))))
     detail_elem))
           
(defun_sync obj_to_dom (obj options _path)
  (let
      ((options (or options {}))
       (classes "juno-value juno-type-")
       (detail_elem nil)
       (expanded false)
       (expansion_elem nil)
       (expansion_mode false)
       (render_table (function () 
                         (table
                            (body
                             (for_each (keyval (pairs obj))
                                       (destructuring_bind (key value)
                                                           keyval
                                                           (tr 
                                                            (td {  `class: "juno-obj-to-dom-key" } key)
                                                            (td { `class: "juno-obj-to-dom-value" } 
                                                                (value_to_dom value options (conj _path [ key ] ))))))))))
       (_path (or _path []))
       (lpath (function () (join "~" _path))))
    (when (or (eq nil options.visited)
              (< _path.length 2))
           (set_prop options
                     `visited (new Set)))
    
    (if (-> options.visited `has obj)
        (span { `lpath: (lpath) `tabindex: 0 `class: "juno-value juno-obj-to-dom" } "[CIRCULAR]")
        (cond
          (== (length obj) 0)
          (span { `lpath: (lpath) `tabindex: 0 `class: "juno-value juno-obj-to-dom" } "Object {}")
          else
          (progn
           (-> options.visited `add obj)    
           (when (> _path.length 2)
             (= expansion_mode true))
           (= detail_elem 
              (details (+ {  `class: "juno-obj-to-dom" }
                          (if (== _path.length 0)
                            { `open: true }
                            {}))
                       (summary { `lpath: (lpath) `class: "juno-obj-to-dom" } obj.constructor.name)
                       (if expansion_mode
                         (= expansion_elem (span { `class: "juno-in-expansion" } (+ (dtext "Opening") "...")))
                         (render_table))))
           (when expansion_mode
             (attach_event_listener detail_elem
                                    `toggle
                                    (fn (e) 
                                      (unless expanded
                                              (= expanded true)
                                              (-> expansion_elem `replaceWith (render_table))
                                              (= render_table nil)))))
           detail_elem)))))

(defun copy_text_to_clipboard (text)
        (if text
           (let ((temp (textarea { `style: "position: absolute; top: -100px; left: -200px;"  } )))
               (-> (get_by_id "body") `append temp)
               (set_prop temp
                         `value
                         text)
               (-> temp `select)
               (-> temp `setSelectionRange 0 999999)
               (-> document `execCommand "copy")
               (-> temp `remove)
               true
            )
            false)
        { `usage: ["text:string"]
          `description:"Copies the provided textual argument to the system clipboard.  It cannot copy more complex types due to security limitations of browser sandboxed code."
          `tags: ["env" "copy" "clipboard" "ui"]
        } )


(defun *help_menu_function* ()
  [["No Help Installed" (fn () false) ]])


(console.log "browser_initializer running")

(defun current_controls ()
  (uniq (flatten (control_tree $root_controls))))

(defun cascade_resize (top_control)
  (control_tree (or top_control $root_controls)
                (fn (control)
                  (if control.resize
                    (-> control `resize)))))
    

(defun get_control_by_id (id)
  (let
      ((controls (current_controls))
       (ctrl nil))
    (for_each (`control controls)
              (when (== id (and control.options control.options.id))
                (= ctrl control)
                (break)))
    ctrl))

(defun get_control_by_name (name)
  (let
      ((controls (current_controls))
       (ctrl nil))
    (for_each (`control controls)
        (progn
          (when (== name control.name)
               (= ctrl control)
               (break))))
    ctrl))                                                   

(defun holding_tank_controls ()
  (aif (get_control_by_name "Holding Tank")
       (-> it `controls)
       []))

(defun replace_control (target_control new_control)
  (let
      ((tmp (new Object))
       (replaced_keys (new Set)))
    (assert (is_object? target_control) "Invalid object provided for old_control")
    (assert (is_object? new_control) "Invalid object provided for new_control")
    ;; first transfer the old object contents to the new location
    (for_each (k (keys target_control))
              (set_prop tmp
                        k
                        (prop target_control k)))
    
    ;; now tmp has the target_control scope references
    ;; replace the target_control with new values
    (for_each (k (keys new_control))
              (progn
               (-> replaced_keys `add k)
               (set_prop target_control
                         k
                         (prop new_control k))))
    
    ;; now remove any keys that are not in the set from the target_control
    (for_each (k (keys target_control))
              (if (not (-> replaced_keys `has k))
                (remove_prop target_control k)))
    
    ;; the objects should be swapped at this point
    ;; return tmp as the old control
    tmp))

(defun control_for_dom_element (elem)
    (let
        ((control_id nil))
       (assert (is_element? elem) "Invalid element provided")
       (= control_id (-> elem `getAttribute "control_id"))
       (aif (and control_id ;; we have a control_id, so get the control
                 (get_control_by_id control_id))
            it ;; and return it
           (cond
             (eq nil elem.parentElement)
             nil ;; at top (or cannot go up further) so return nil
              
              ;; no control found and we have a parent_element
             else
             (control_for_dom_element elem.parentElement)))))



(defun control_position (control)
    (let
       ((parent_view nil)
        (parent_control_position 0)
        (parent_control nil))
    (assert control.view "target_container isn't a control container")
    (= parent_view control.view.parentElement)
    (when parent_view
        (= parent_control (control_for_dom_element parent_view))
        (when (and parent_control
                   parent_control.controls)
           (map (fn (parental_sub_control idx)
                    (when (== parental_sub_control control)
                        (= parent_control_position idx)))
                (-> parent_control `controls))))
    (aif (and (eq parent_control nil)
              (get_control_by_name "Holding Tank"))
         (if (-> it `has_control? control)
           (= parent_control it)))
      
    {
        `child: control
        `parent: parent_control
        `child_position: parent_control_position
    }))

(defun get_container_for_control (control)
    (let
        ((existing_container nil)
         (pos nil)
         (next_parent nil)
         ;; controls should be in one of these container types
         (valid_containers ["split_view_horizontal" "split_view_vertical" "control_container" ]))
      (assert (and (is_object? control)
                   control.view)
              "Invalid control received")
      (= pos (control_position control))
      
    ;; is the child control (the control passed) a container?
      (cond 
        (and pos.child
           (contains? pos.child.type valid_containers))
        (= existing_container control)
        (and pos.parent
            (contains? pos.parent.type valid_containers))
        (= existing_container pos.parent)
        pos.parent
        (progn
          (while (and pos.parent
                      (not existing_container))
             (progn
                 (= pos (control_position pos.parent))
                 (console.log "pos is now: " pos)
                 (if (and pos.parent
                          (contains? pos.parent.type valid_containers))
                     (= existing_container pos.parent))))))
       
      existing_container))

(defun_sync is_control? (val)
  (and val.type val.view val.toJSON))

(defun_sync is_top_control? (control)
  (if (is_control? control)
    (contains? control $root_controls)
    false))

(defun top_frame (control)
  (let
      ((parent nil))
    (declare (local parent))    ;; parent is a global object - shouldn't need to declare this since it has technically already been shadowed
   (assert (is_control? control) "Invalid control provided")
   (= parent (control_position control))
   (while parent.parent
       (= parent (control_position parent.parent)))
   parent.child))

(defun set_focus_to (target_control _controls)
  (let
      ((focused_list (query_all ".juno-focused"))
       (controls (or _controls
                     (reduce (c (current_controls))                        
                        (when c.on_focus                          
                          c)))))
    
    (for_each (control controls)
                 (when (and (or (eq nil target_control)
                                (not (== target_control control)))
                            (is_function? control.on_blur))
                   (-> control `on_blur)))
    
    ;; remove any focus class markers
    (when (> focused_list.length 0)
      (= focused_list (map (fn (v) v) focused_list))       
      (apply remove_class "juno-focused" focused_list))
    (for_each (control controls)
                 (when (and (or (eq nil target_control)
                                (not (== target_control control)))
                            (is_function? control.on_blur))
                   (-> control `on_blur)))
    (when (not (== *last_focus* target_control))
      (when (and *last_focus*
                 (prop *last_focus* `menu_items))
        (-> *app_menu_control* `remove_menu (or (prop *last_focus* `name)
                                                "Control"))))
      
    (if target_control
      (progn
              
       (-> target_control `on_focus)              
       (setq *last_focus* target_control)
       (setq *last_top_frame* (top_frame target_control))
       (when target_control.menu_items
         (-> *app_menu_control* `add_menu [ (or target_control.name
                                                "Control")
                                           target_control.menu_items ])))
             
       
      (progn
       (setq *last_focus* nil)))))

(defun default_focus ()
  (let
      ((found_control nil))
    (control_tree $root_controls
                  (fn (control)
                      (when (and (not found_control)
                                 (is_function? control.on_focus))
                        (= found_control control))))
    (if found_control
      (progn
        (set_focus_to found_control)
        found_control)
      nil)))

(defun swap_control (target_control new_control)
  (let
      ((tmp (new Object))
       (position_details_target nil)
       (position_details_new nil)
       (holding_tank (get_control_by_name "Holding Tank"))
       (replaced_keys (new Set)))
    (assert (is_control? target_control) "Invalid control provided for old_control")
    (assert (is_control? new_control) "Invalid control provided for new_control")
    (assert (not (== target_control new_control)) "Cannot swap the same control")
    ;; get their position in the tree 
    (= position_details_target (control_position target_control))
    (= position_details_new (control_position new_control))
    (console.log "swap_control: target: " target_control "new: " new_control)
    (debug)
    (cond        
        (== position_details_target.parent holding_tank)   ;; target is in the holding tank so take the old control out and replace with new
        (progn
            (-> holding_tank `remove_control position_details_target.child)
            (-> holding_tank `add_control position_details_new.child)
            (if position_details_new.parent.set_content ;; add the targeted control to the new_controls old location (if not in holding_tank)
              (progn
               (-> position_details_new.parent `set_content position_details_new.child_position position_details_target.child)
               (cascade_resize)
               (set_focus_to position_details_target.child))
                position_details_target.child))

        (and (== position_details_target.child holding_tank)   ;; target IS the holding tank so replace the holding tank with the new value and hide the holding tank
             position_details_target.parent.set_content)
        (progn
         (-> holding_tank `remove_control position_details_new.child) ;; ensure the child is removed from the holding tank (if in it)
         (-> position_details_target.parent `set_content position_details_target.child_position position_details_new.child)         
         (-> holding_tank `hide)
         (cascade_resize)
         (set_focus_to position_details_new.child))
        
        (and position_details_target.parent.set_content
             position_details_new.parent.set_content)  ;; controls are both in the tree somewhere so swap their positions
        (progn
            (-> position_details_target.parent `set_content 
                                                position_details_target.child_position 
                                                position_details_new.child)
            (-> position_details_new.parent `set_content 
                                             position_details_new.child_position 
                                             position_details_target.child)
            (set_focus_to position_details_new.child)
            (cascade_resize)
            target_control)
        
        (and (== position_details_new.parent holding_tank)   ;; new control is in the holding tank 
             (is_function? position_details_target.parent.set_content))
        (progn
            (-> holding_tank `remove_control position_details_new.child.options.id)
            (-> holding_tank `add_control position_details_target.child)
            (-> position_details_target.parent `set_content 
                                                position_details_target.child_position 
                                                position_details_new.child)
            (set_focus_to position_details_new.child)
            (cascade_resize)
            position_details_new.child)
        
        (and (eq nil position_details_new.parent)  ;; this is a new control without a parent
             position_details_target.parent.set_content)
        (progn  ;; add to the holding tank the target and put the new in the targets old place..
            (-> position_details_target.parent `set_content 
                                                position_details_target.child_position 
                                                position_details_new.child)
            (-> holding_tank `add_control position_details_target.child)
            (cascade_resize)
            (set_focus_to position_details_new.child))
            
        else
        (progn
            (notify "Unhandled swap condition - see console")
            (console.warn "unhandled swap position: target: " position_details_target "new: " position_details_new)
            nil))))                                



;; container view operation
;; given a command performs an operation on the control structure

;; definitions
;; target_control - the control that is to be impacted with a change 
;; target_control_container - the container of the target_control
;; new_control - an optional new control to be inserted into the control tree
;; options - options for the given command

(defun container_view_operation (command target_control new_control options)
  (let
    ((orig_target target_control)
     (target_control (control_for_dom_element target_control.view)) ;; ensure we have the correct handle to the impaced control since this could be a sub_control given to us
     (position_details nil) ;; the structure that holds the position details of the operation
     (holding_tank (get_control_by_name "Holding Tank"))
     (tmpview nil)
     (new_container nil)
     (split_view_parent nil))
    
    (assert target_control "Unable to find the target control")
    (assert holding_tank "Unable to find the holding tank")
    
    (= position_details (control_position target_control))
    (console.log "container_view_operation: original_target: " orig_target)
    (console.log "container_view_operation: computed_target: " target_control)
    (console.log "container_view_operation: command: " command "position_details: " position_details "new_control: " new_control)
    (when (and (== position_details.parent nil) ;; top level control
               (not (== position_details.child holding_tank))
               (is_top_control? position_details.child))
      (= target_control (first (-> position_details.child `controls)))
      (= position_details (control_position target_control))
      (console.log "container_view_operation: shifted down: target_control was a top control: " position_details))
      
      
      
    ;; if the parent structure is nil in position_details, then we are at the root
    (cond
          (or (== command "hide")
              (== command "destroy"))
          (progn
              (cond 
                    ;; the control is not a root control if it has a parent 
                (or (== position_details.parent.type "split_view_vertical")
                    (== position_details.parent.type "split_view_horizontal"))
                (progn
                    ;; grab the child control to keep displaying, ie. not the one in the child_position
                    (set_prop position_details
                              `child_to_display
                              (if (== position_details.child_position 0)
                                  (second (-> position_details.parent `controls))
                                  (first (-> position_details.parent `controls))))
                    
                    ;; we need to know the split views parent since we are going to remove the split view
                    ;; and hoist the remaining child to display into the parent structure in place of the 
                    ;; split_view - not an even swap because the existing split_view is retired 
                    
                    (= split_view_parent (control_position position_details.parent))
                    (assert split_view_parent.parent.set_content "Unable to set the content of the split view parent")
                    (console.log "container_view_operation: split_view_parent: " split_view_parent)
                    (console.log "container_view_operation: position_details: " position_details)
                    (when (not options.dry_run)
                     ;; elevate the child to keep to the targeted_control container's position in it's parent
                        (-> split_view_parent.parent `set_content split_view_parent.child_position position_details.child_to_display)
                        
                        ;; set the child to hide in non displayed controls 
                        (if (and (== command "hide")
                                 (not (== target_control holding_tank)))
                            (-> holding_tank
                                `add_control 
                                target_control)))
                    (cascade_resize)
                    true)
                (and (== position_details.parent holding_tank)                         
                     (== command "destroy"))
                (-> holding_tank `remove_control position_details.child.options.id)
                else
                (progn
                    (notify "Cannot hide a single control - try replacing")
                    position_details)))
            
          (== command "replace")    
          (progn
              (swap_control target_control new_control)
              true)
          
          (== command "split_left")    
          (progn
              (assert (is_control? new_control) "Invalid control provided for the replacement control")
              (assert (not (== position_details.parent holding_tank)) "Cannot split the holding tank")
              (= tmpview (div { } "Placeholder"))
              ;; get it off the dom
              (-> position_details.child.view `replaceWith
                  tmpview)                                 
              (= new_container (split_view_vertical new_control position_details.child (or options { `ratio: 0.3 } )))
              (-> holding_tank `remove_control new_control)
              (-> position_details.parent `set_content position_details.child_position new_container)
              (cascade_resize)
              true)
          (== command "split_right")    
          (progn
              (assert (is_control? new_control) "Invalid control provided for the replacement control")
              (assert (not (== position_details.parent holding_tank)) "Cannot split the holding tank")
              (= tmpview (div { } "Placeholder"))
              ;; get it off the dom
              (-> position_details.child.view `replaceWith
                  tmpview)                                  
              (= new_container (split_view_vertical position_details.child new_control  (or options { `ratio: 0.7 } )))
              (-> holding_tank `remove_control new_control)
              (-> position_details.parent `set_content position_details.child_position new_container)
              
              (cascade_resize)
              true)
          (== command "split_above")    
          (progn
              (assert (is_control? new_control) "Invalid control provided for the replacement control")
              (assert (not (== position_details.parent holding_tank)) "Cannot split the holding tank")
              (= tmpview (div { } "Placeholder"))
              ;; get it off the dom
              (-> position_details.child.view `replaceWith
                  tmpview)              
              (= new_container (split_view_horizontal new_control position_details.child (or options { `ratio: 0.3 } )))
              (-> holding_tank `remove_control new_control)
              (-> position_details.parent `set_content position_details.child_position new_container)
              (cascade_resize)
              true)
          (== command "split_below")    
          (progn
              (assert (is_control? new_control) "Invalid control provided for the replacement control")
              (assert (not (== position_details.parent holding_tank)) "Cannot split the holding tank")
              (= tmpview (div { } "Placeholder"))
              ;; get it off the dom
              (-> position_details.child.view `replaceWith
                  tmpview)             
              (= new_container (split_view_horizontal  position_details.child new_control (or options { `ratio: 0.7 } )))
              (-> holding_tank `remove_control new_control)
              (-> position_details.parent `set_content position_details.child_position new_container)
              (cascade_resize)
              true)
          else
          (progn
           (notify (+ "container_view_operation: unknown command: " command))
           position_details))))
  
  



    
(defmacro place_control(placement `& control_def)
   (let
      ((where_map {
                   `top: "split_above"
                   `below: "split_below"
                   `left: "split_left"
                   `right: "split_right"
                   `replace: "replace"  })
       (where (aif (prop where_map placement)
                   it
                   "split_right")))
       
  `(let
      ((target_container  (control_position (top_frame (default_focus)))))
     (when target_container.child 
       (= target_container (first (-> target_container.child `controls)))
       (container_view_operation ,#where target_container
                                   ,@control_def)))))
              
(defun show_control (control_to_show)
  (let
      ((target_control (if *last_focus*
                         *last_focus*
                           nil)))
    (if target_control
      (progn
       (swap_control target_control control_to_show)
       (set_focus_to control_to_show)
       true)
      (progn
       (place_control "right" control_to_show)
       (set_focus_to control_to_show)
       false))))

(defun process_focus_chain (e originator_container)
  (progn
   (handle_event e)   
   (when e.path
     (let
         ((target_control nil)
          (controls (reduce (c (current_controls))                        
                        (when c.on_focus                          
                          c)))
          (focused_list (query_all ".juno-focused")))

      
       (for_each (elem e.path)
          (progn
           (for_each (control controls)
                     (when (== elem control.view)
                       (= target_control control)
                       (break)))
           (when target_control
             (break))))
       
       (set_focus_to target_control controls)))))


    

(defun make_menu (for_element menu_items options)
  (let
      ((menu_items menu_items)
       (for_element for_element)
       (pos nil)
       (disappear_timer nil)       
                                        
       (view nil))
    (aif (get_by_id "cmenu")
         (-> it `remove))
    (setq view
          (div { `id: `cmenu `class: "juno-menu" `style: "z-index: 30" }
               (div {  `class: "pure-menu pure-menu-horizontal"  }               
                    (ul { `class: "pure-menu-list" }                 
                        (map (fn (item idx)                     
                               (if item
                                 (li { `idx: idx `class: "pure-list-item" } (a { `idx: idx  `href: "#" `class: "pure-menu-link" } item.0))
                                 []))
                             (or menu_items []))))))

    (when for_element
      (setq pos
            (-> for_element `getBoundingClientRect))
      (set_style [["top" (+ "" (Math.max 0 pos.bottom) "px") ]
                  ["left" (+ "" (Math.max pos.left 0) "px") ]] view)
      (console.log "make_menu: found element at: " pos))
    
    (attach_event_listener view
                           `click
                           (fn (e)
                             (progn
                              (handle_event e)
                              (defvar idx (-> e.srcElement `getAttribute `idx))
                              (defvar item (prop menu_items idx))
                             
                              (console.log "clicked item: " idx item item.1)
                               (when item
                                 (item.1 e))
                               (-> view `remove))))
    (setTimeout
     (fn ()
       (progn
        (attach_event_listener view
                               `mouseleave
                               (function (e)
                                         (progn
                                          (when disappear_timer
                                            (clearTimeout disappear_timer))
                                          (= disappear_timer (setTimeout (fn ()
                                                                           (progn
                                                                            (console.log "removed view")
                                                                            (-> view `remove)
                                                                            (= disappear_timer nil)))
                                                                         500)))))
        (attach_event_listener view
                               `mouseenter
                               (function (e)
                                         (when disappear_timer
                                           (clearTimeout disappear_timer)
                                           (= disappear_timer nil))))))
     500) ;; delay a little before adding the timeout so we don't accidentally hover over it 
    (if options.do_not_attach
      view
      (progn       
       (-> (get_by_id "body") `appendChild view)
       (console.log "appended view" view)
       view))))

(defun get_key_code (e)
  (let
      ((k []))
    (when e.ctrlKey
      (push k "Ctrl"))
    (when e.altKey
      (push k "Alt"))
    (when e.metaKey
      (push k "Meta"))
    (push k e.key)
    (join "-" k)))

(defun request_user_input (prompt type options)
  (new Promise (fn (resolve reject)                 
                 (let
                     ((user_input (if options.input
                                    options.input
                                    (input { `type: (or type "text") })))
                      (ok_button (button { `class: "pure-button-primary" `style: "float:right" } "OK"))
                      (cancel_button (button  "Cancel"))
                      (dwin (dialog prompt                                    
                                    (br)
                                    user_input
                                    (br)
                                    (div { `class: "pure-button-group" `role: "group" }
                                         cancel_button
                                         ok_button))))
                   (attach_event_listener ok_button
                                          `click
                                          (fn (e)
                                            (do                                              
                                              (resolve user_input.value)
                                              (-> dwin `remove))))
                   (attach_event_listener cancel_button
                                          `click
                                          (fn (e)
                                            (do
                                              (-> dwin `remove)
                                              (resolve nil))))
                   (-> juno_container
                       `appendChild dwin)
                   (when (is_function? dwin.showModal)
                     (-> dwin `showModal))))))
                                           
    
                     
(defun message (text)
  (rlog (div { `style: "border-left: 5px solid darkblue; padding: 5px;" } text)))

(defun error_message (text)
  (rlog (div { `style: "border-left: 5px solid red; padding: 5px;" } text)))

(defun log_error (message error_instance)
  (progn
   (error_message message)
   (console.error message)
   (when error_instance
     (when error_instance.messasge
       (error_message error_instance.message))
     (console.error error_instance))))
     

(defun load_js_file (file)
  (let
      ((fdata (try
                (read_file file { `read_as: "text" })
                (catch Error (e)
                  e)))
       (assignment_to nil)
       (error nil))
    (message (+ "found and read JS " file.name ", size: " file.size))
    (cond
      (and fdata
           (not (instanceof fdata Error)))
      (progn
       (aif (request_user_input "Enter a name for a reference to the loaded Javascript" "text")
            (do
              (= assignment_to it)              
              (try
                (progn
                 (debug)
                 (cond
                   (or (== assignment_to "global")
                       (== assignment_to "script"))
                   (-> (page_header) `append (script { `type: "text/javascript" `charset: "utf-8" }
                                                     (javascript fdata)))
                   else
                   (eval `(defglobal ,#assignment_to (javascript ,#fdata)))))
                (catch Error (e)
                  (do
                    (= error true)
                    (error_message (+ "Unable to create " assignment_to ": " e.message))
                    (console.error "ERROR: " e))))                                                    
              (when (not error)
                (message (+ "Loaded JS to " assignment_to ))))
            (notify "Entry Cancelled")))
      else
      (progn
       (rlog "Unable to read the file")
       (console.error fdata)))))

(defun embed_js_orig (name js_text) 
  (progn
   (debug)
   (-> (page_header) `append (html/script { `id: name `type: "text/javascript" `charset: "utf-8" }
                                     (javascript js_text)))   
   (eval `(defglobal ,#name (html/get_by_id ,#name)
            {
             `embedded_script: true
             }))))

(defun embed_js (name js_text) 
  (progn
   (debug)
   (eval `(-> (page_header) `append (html/script { `id: name `type: "text/javascript" `charset: "utf-8" }
                                     (javascript ,#js_text))))
   (eval `(defglobal ,#name (html/get_by_id ,#name)
            {
             `embedded_script: true
             }))))

(defun embed_js_file (file)
  (let
      ((fdata (try
                (read_file file { `read_as: "text" })
                (catch Error (e)
                  e)))
       (assignment_to nil)
       (error nil))
    (message (+ "found and read JS " file.name ", size: " file.size))
    (cond
      (and fdata
           (not (instanceof fdata Error)))
      (progn
       (aif (request_user_input "Enter a name for a reference to the loaded Javascript" "text")
            (do
              (= assignment_to it)              
              (try
                (embed_js_orig assignment_to fdata)                   
                (catch Error (e)
                  (do
                    (= error true)
                    (error_message (+ "Unable to create " assignment_to ": " e.message))
                    (console.error "ERROR: " e))))                                                    
              (when (not error)
                (message (+ "Loaded JS to " assignment_to ))))
            (notify "Entry Cancelled")))
      else
      (progn
       (rlog "Unable to read the file")
       (console.error fdata)))))

(defun load_files (files)
  (when (> files.length 0)
    (for_each (file files)
       (do
         (cond
           (== file.type "text/javascript")
           (embed_js_file file)
           (== file.type "text/plain")
           (notify "Text Resource")
           (or (ends_with? file.name ".lisp")
               (ends_with? file.name ".juno"))
           (notify "Loading lisp file"))))))



(defun control_frame (options `& contents)
  (let
      ((has_control_bar? (and (> contents.length 1)
                              (has_class? "juno-buffer-bar" contents.0)))
       (content (if has_control_bar?
                     [(first contents)
                      (div { `class: "juno-view-content" }
                           (rest contents)) ]
                     (div { `class: "juno-view-content" }
                           (rest contents))))
       (elem (div (+ { tabindex: 0 control_id: (or options.id (generate_id "frame"))
                      class: (+  "juno-view-container"
                                  (or options.classes "")) }
                      (if options.style
                        { `style: options.style }
                        {}))
                   content)))
    (console.log "control_frame: has_control_bar: " has_control_bar? contents)
    (when (not has_control_bar?)
      (set_style [["height" "100%" ]] content))
    (when (is_array? options.events)
      (for_each (ev options.events)
                (destructuring_bind (event_type action)
                     ev
                   (console.log "making events: " event_type action)
                   (attach_event_listener elem event_type action))))
     elem))

(defun name_control (prefix)
  (let
      ((prefix (or prefix "Unnamed"))
       (name ""))
    (if (get_control_by_name prefix)
      (+ prefix " " (inc *view_count*))
      prefix)))




(defun symbol_browser (options)
   (let
       ((self {})
        (options (or options {}))
        (id (generate_id "symbol_browser"))
        (name (name_control (or options.name "Symbol Browser")))                  
        (title_span (span { `class: "juno-title" } name))
        (path_span (span { `class: "juno-path" `style: "float: right" } ""))
        (buffer_commands_button (button { `title: "Commands" } "⋯"))
        (stack [ ])
        (filter_span (span { `style: "margin-left: 8px; margin-right: 8px; font-family: var(--main-mono-space);" } ""))
        (filter_span_container (span { `style: "margin-left: 10px; padding-top: 2px; padding-bottom: 2px; border: 1px solid var(--type-regexp-color);" } 
                                     (span { `style: "padding-left: 10px; padding-right: 10px; background: var(--type-regexp-color); padding-top: 2px; padding-bottom: 2px; color: wheat;" } (+ (dtext "Filter") ":"))
                                     filter_span))
        (olist_style "padding-block-start: 3px; margin-block-start: 0.2em; padding-inline-start: 2px; ")
        (li_style "")
        (control_status (div {  class: "juno-buffer-bar" }
                                buffer_commands_button
                                (cond
                                  (is_array? options.additional_elements)
                                  options.additional_elements
                                  else
                                  title_span)
                                filter_span_container
                                path_span))
        (symbol_struct (symbols_by_namespace))
        (element_for_pos (fn (pos want_parent?)
                           (let
                               ((target_col nil))                                
                             (= target_col (-> cview `querySelector (+ "[pos='" (if pos pos 0) "']")))                             
                             (cond 
                               (and want_parent? target_col)
                               target_col
                               target_col
                               (or (-> target_col `querySelector ".juno-highlighted")
                                   target_col.children.0)))))
        (filter_by_text (fn (pos text)
                            (let
                                ((elems (aif (element_for_pos pos true)
                                             it.children
                                             []))
                                 (elem nil)
                                 (num_found 0)
                                 (elem_bank_found [])
                                 (elem_bank_not_found [])
                                 (target_focus nil)
                                 ;;(remove_class "filtered-hidden" elem) (add_class "filtered-hidden" elem)
                                 (clear_it (blank? text)))
                                (if clear_it
                                    (progn
                                        (remove_class "filtered-hidden" elems)
                                        (focus_to (element_for_pos pos))
                                        false)
                                    (progn
                                        (for_each (idx (range elems.length))
                                            (progn
                                                (= elem (prop elems idx))
                                                (if (starts_with? text elem.innerText)
                                                    (push elem_bank_found elem)
                                                    (push elem_bank_not_found elem))))
                                        (cond
                                            (== elem_bank_found.length 0)
                                            false ;; do nothing
                                            (> elem_bank_found.length 0)
                                            (progn
                                                (console.log "found: " elem_bank_found.length)
                                                (for_each (elem elem_bank_found)
                                                    (remove_class "filtered-hidden" elems))
                                                (for_each (elem elem_bank_not_found)
                                                    (add_class "filtered-hidden" elem))
                                                (focus_to elem_bank_found.0)
                                                true)))))))
                                       
                                
        (filter_state {
                      chars: []
                      col_num: nil
                      })
        (show_filter_state (fn ()
                               (progn
                                   (if (> (length filter_state.chars) 0)
                                       (set_style [["opacity" "1"]] filter_span_container)
                                       (set_style [["opacity" "0"]] filter_span_container))
                                   (set_prop filter_span
                                            `innerText (join "" filter_state.chars)))))
        (clear_selector (fn (update?)
                            (progn
                                (console.log "clear_selector: filter_state: " (as_lisp filter_state))
                                (when filter_state.col_num
                                    (filter_by_text filter_state.col_num ""))
                                (set_prop filter_state
                                          `chars []
                                          `col_num nil)
                                (when update?
                                    (show_filter_state)))))
        (pop_from_selector (fn (pos)
                               (progn
                                   (if (== pos filter_state.col_num)
                                       (progn
                                           (pop filter_state.chars)
                                           (filter_by_text filter_state.col_num (join "" filter_state.chars)))
                                       (clear_selector))
                                   (show_filter_state))))
        (push_into_selector (fn (pos k)
                              (progn
                                  (defvar elems nil)
                                  (cond
                                      (eq nil filter_state.col_num)
                                      (progn
                                         (set_prop filter_state
                                                   `col_num
                                                   pos)
                                         (when (filter_by_text pos (+ (join "" filter_state.chars) k))
                                             (push filter_state.chars k)))
                                      (eq pos filter_state.col_num)
                                      (progn
                                          (when (filter_by_text pos (+ (join "" filter_state.chars) k))
                                                (push filter_state.chars k)))
                                      else
                                      (progn
                                        (push_into_selector pos k)))
                                  ;; update the displayed state of our filter 
                                  (show_filter_state)
                                  )))
                                                      
                                         
                                         
        (handle_keyup (fn (e)
                        (when (and e.srcElement
                                   (get_attribute e.srcElement "ctype"))
                          (let
                              ((elem e.srcElement)
                               (ctype (get_attribute elem "ctype"))
                               (pos (parseInt (get_attribute elem "pos")))
                               (final_pos stack.length))
                            (console.log "pos: " pos "press: " e)                           
                            (cond
                              (and (== e.key "ArrowUp")
                                   e.altKey)
                              (focus_to elem.parentElement.children.0)
                              (== e.key "ArrowUp")
                              (focus_to elem.previousElementSibling)
                              (== e.key "ArrowDown")
                              (focus_to elem.nextElementSibling)
                              (and (== e.key "ArrowLeft")
                                   (>= pos 0))
                              (progn
                                  (aif (element_for_pos (- pos 1))
                                   (focus_to it))
                                  (clear_selector true))
                              (== e.key "ArrowRight")
                              (progn
                                (console.log "moving to the right: " (element_for_pos (+ pos 1)))
                                (aif (element_for_pos (+ pos 1))
                                     (focus_to it)
                                     (focus_to (element_for_pos (+ pos 1) true))) ;; didn't get a standard list, it's probably a value of sort..
                                (clear_selector true))
                              (== e.key "Enter")
                              (progn
                                  (handle_event e)
                                  (handle_click e))
                              (== e.key "Backspace")
                              (pop_from_selector pos)
                              (== e.key "Tab")
                              nil
                              (> e.keyCode 47)
                              (progn
                               (push_into_selector pos e.key)
                               (console.log "filter state: " (as_lisp filter_state))))))))
                                                                                                                              
        (handle_click (fn (e)
                          (when (and e.srcElement 
                                     (get_attribute e.srcElement "ctype"))
                              (console.log "handle_click: " e.srcElement)
                              (let
                                  ((elem e.srcElement)
                                   (ctype (get_attribute elem "ctype"))
                                   (pos (get_attribute elem "pos"))
                                   (final_pos stack.length))
                                  (when pos
                                      (= pos (parseInt pos)))
                                  (clear_selector true)
                                  
                                  (console.log "handle_click: pos: " pos "final_pos:" final_pos ctype elem.innerText stack)
                                  (remove_class "juno-highlighted" e.srcElement.parentElement.children)
                                  (add_class "juno-highlighted" e.srcElement)
                                  (cond
                                     (== ctype "nspace")
                                     (progn
                                         (= stack [])
                                         (render_view e.srcElement.innerText)
                                         
                                         ;; next display the first namespace
                                         (= stack [ elem.innerText ])
                                         (render_view))
                                     (and (== ctype "sym")
                                          (== pos final_pos))
                                     (progn
                                         (push stack elem.innerText)
                                         (console.log "STACK is now: " stack)
                                         (render_view))
                                     (< pos final_pos)
                                     (progn
                                         (= stack (-> stack `slice 0 pos))
                                         (push stack elem.innerText)                                         
                                         (console.log "mid stack click: stack now: " (as_lisp stack) "view children:" (length cview.children) (range cview.children.length))
                                         (for_each (child_num (-> (range cview.children.length) `reverse))
                                            (progn
                                               (console.log "child_num: " child_num (prop cview.children child_num) (parseInt (get_attribute (prop cview.children child_num) `pos)))
                                                (when (> (parseInt (get_attribute (prop cview.children child_num) `pos)) (- stack.length 1))
                                                    (-> (prop cview.children child_num) `remove))))
                                         (render_view))                                         
                                     else
                                     (progn
                                      (push stack  elem.innerText)                                 
                                      (render_view)
                                      ))))))
                            
        (cview (div { `style: "" `class: "juno-symbol-browser" }))
        (has_children? (fn (val)
                           (and (is_object? val)
                                (> (length val) 0))))
        (next_possibles (fn ()
                            (let
                               ((path (conj [ "context" "scope" ] (or (rest stack) [])))
                                (ns (first stack))
                                (idx -1)
                                (val nil))
                            (assert ns "No namespace yet - invalid stack")
                            (= val (resolve_path path (-> Environment `get_namespace_handle ns)))
                            (console.log "next_possibles: namespace:" ns path "value: " val)
                            (when options.on_select
                                 (options.on_select ns (rest stack)))                
                            (cond 
                              (is_function? val)
                              (pre { `tabindex: 0 `ctype: (subtype val) `style: "background: #FFFFFF; min-width: 200px; overflow: scroll; width: 100%;" }
                                   (value_to_dom val))
                              (is_array? val)                                                           
                              (for_each (symb (resolve_path path (-> Environment `get_namespace_handle ns)))
                                 (progn
                                     (inc idx)
                                     (li { `tabindex: 0 `ctype: (if (is_object? symb) "sym" (lowercase (subtype symb)))
                                       `pos: stack.length
                                       `title: (subtype symb)
                                       `class: (+ "juno-list-item " (if (has_children? symb) "juno-list-item-has-children " "") "juno-type-" (lowercase (subtype symb)))
                                      `style: li_style } idx)))
                              (is_object? val)                                                    
                              (for_each (symb (sort (pairs (resolve_path path (-> Environment `get_namespace_handle ns)))
                                                    { `key: [ 0 ] }))
                                 (li { `tabindex: 0 `ctype: (if (is_object? symb.1) "sym" (lowercase (subtype symb.1)))
                                       `pos: stack.length
                                       `title: (subtype symb.1)
                                       `class: (+ "juno-list-item " (if (has_children? symb.1) "juno-list-item-has-children " "") "juno-type-" (lowercase (subtype symb.1))) 
                                       `style: li_style } symb.0))
                                                                                   
                              (is_string? val)
                              (pre { `tabindex: 0 `ctype: "string" `style: "min-width: 200px; background: #FFFFFF; overflow: scroll; width: 100%;" }
                                   val)
                              else         
                              (pre { `tabindex: 0 `ctype: (subtype val) `style: "min-width: 200px; background: #FFFFFF; overflow: scroll; width: 100%;" }
                                 (value_to_dom val))))))

        (render_view (fn (ns_name)
                       (progn
                        (console.log "render_view: stack " stack)
                        (if (> stack.length 1)
                          (set_prop path_span
                                    `innerText (+ "[ "(join " " (rest stack )) " ]"))
                          (set_prop path_span
                                    `innerText ""))                                    
                        (clear_selector true)
                        (cond
                          (== stack.length 0) ;; initial state
                          (progn
                           (-> cview `replaceChildren
                              (ol { `pos: 0 }
                               (for_each (ns (sort (namespaces)))
                                         (li {`tabindex: 0
                                              `ctype: "nspace"
                                              `pos: 0
                                              `class: (+ "juno-list-item juno-namespace" (if (== ns ns_name) " juno-highlighted" ""))
                                              `style: li_style
                                              } ns))))
                           (focus_to (element_for_pos 0)))
                          else
                          (progn
                           (defvar next_elem (next_possibles))
                           (cond
                             (is_array? next_elem)
                             (progn
                                 (-> cview `appendChild
                                    (ol { `pos: stack.length  }
                                         next_elem))                                 
                                 (setTimeout (fn () (focus_to (element_for_pos stack.length))) 10))
                             (is_element? next_elem)
                             (progn
                              (-> cview `appendChild                                 
                                  next_elem)
                              (-> next_elem `setAttribute "pos" stack.length)                              
                              (focus_to next_elem)))
                           
                           (set_prop cview `scrollLeft (+ cview.offsetWidth 20)))))))
                                                                                                                               
                          
        (view (control_frame { `id: id  `events: [[ "click" handle_click]
                                                  [ "keyup" handle_keyup ]] }
                             control_status
                             cview))
        (resize (fn ()
                  (progn                           
                   (let
                       ((new_height (- (prop view.parentElement `offsetHeight) 20))
                        (new_width  (- (prop view.parentElement `offsetWidth) 5)))
                     (set_style [[ "width" (+ "" new_width "px") ]
                                 [ "height" (+ "" new_height "px") ]]
                                view)
                     (when options.on_resize
                       (options.on_resize self))))))
        (resize_observer (new ResizeObserver resize))
        (on_focus (fn ()
                   (progn                  
                    (add_class "juno-focused" control_status ))))
        (initialized false)
        (initialize (fn ()
                      (when (and view.parentElement
                                 (not initialized))
                        (= initialized true)                       
                        (-> resize_observer `observe view.parentElement)
                        (render_view (current_namespace))
                        (push stack (current_namespace))
                        (render_view)
                        (defglobal *sbcview* cview))))   ;; TODO: REMOVE 
        
        (to_json (function ()
                           `[symbol_browser ,#options])))

    
     (set_prop options
               `id id
               `name name)                
     (set_prop self
               `view view
               `options options
               `name name
               `type "symbol_browser"              
               `initialize initialize
               `resize resize
               `toJSON to_json
               `on_focus on_focus)
     self))

(defun symbol_chooser (prompt type options)
  (new Promise (fn (resolve reject)                 
                 (let
                     ((ns nil)
                      (target_path target_path)
                      (set_val (fn (selected_ns selected_path)
                                   (progn 
                                      (console.log "ns: " selected_ns selected_path)
                                      (= ns selected_ns )
                                      (= target_path selected_path)
                                      (cond
                                        (blank? ns)
                                        (set_disabled new_symbol_button)
                                        (not (blank? ns))
                                        (progn
                                         (set_enabled new_symbol_button)
                                         (set_prop new_symbol_button
                                                  `innerText (+ (dtext "New Global Value"))))))))
                                            
                      (new_symbol_button (button { `tabindex: 0 `title: (dtext "Create New Entry") `style: "margin-left: 8px; margin-right: 8px;  font-weight: bold; background: var(--highlight-bg-color);" } (dtext "New")))
                      (path_span (span { `tabindex: 0 `title: (dtext "Click to copy path")  `class: "juno-path" } ""))
                      (symbol_ctl (symbol_browser { 
                                                   `additional_elements: [(span { `class: "juno-title" } (dtext "Open A Location"))
                                                                          (span { `title: (dtext "Edit Mode") `class: "juno-mode" } (if type type  ""))
                                                                          new_symbol_button
                                                                          ] 
                                                    `on_select: set_val }))
                      (ok_button (button { `class: "juno-primary" `style: "min-width: 100px; margin-right: 20px; margin-left: 20px; float:right; font-weight: bold;" } "OK"))
                      (cancel_button (button { `style: "margin-left: 20px;" }   "Cancel"))
                      (dwin (dialog { `style: "height: 40%; width: 60%; overflow: hidden; padding: 2px;" }                                                                    
                                    (div { `style: "height: calc(100% - 50px);" }
                                         symbol_ctl.view)
                                    (br)
                                    (div { `class: "juno-button-group pure-button-group" `role: "group" }
                                         cancel_button
                                         ok_button))))
                   (attach_event_listener ok_button
                                          `click
                                          (fn (e)
                                            (do                                              
                                              (resolve {
                                                  `namespace: ns
                                                  `path: target_path
                                                  })
                                              (-> dwin `remove))))
                   (attach_event_listener cancel_button
                                          `click
                                          (fn (e)
                                            (do
                                              (-> dwin `remove)
                                              (resolve nil))))
                   (-> juno_container
                       `appendChild dwin)
                   (-> symbol_ctl `initialize)
                   (when (is_function? dwin.showModal)
                     (-> dwin `showModal))))))


(defun make_editor (content options)
  (let
      ((options (or options {
                             `type: "juno"                             
                             }))
       (resize_observer nil)
       (intf {})
       (initialized false)
       (id (or options.id (generate_id id)))
       (content (or content ""))
       (controls (div { `style: "display: flex; " }))
       (parent_view nil)
       (check_observer (fn ()
                         (when (not (== view.parentElement parent_view))
                           (-> resize_observer `disconnect)
                           (-> resize_observer `observe view.parentElement)
                           (= parent_view view.parentElement))))
       (editor_div (div { `style: "height: calc(100% - 23px); width: 100%; overflow: hidden;" }))
       (view (div { `control_id: id `style: "overflow: hidden; height: calc(100% - 10px); display: inline-block; width: inherit;" }                 
                  controls
                  editor_div))     
       (perform_resize (fn ()
                         (when view.parentElement
                           (check_observer)
                          ;(console.log "editor: main resize: " (prop view.parentElement `offsetWidth) (prop view.parentElement `offsetHeight))
                          (html/set_style [["width" "calc(100% - 2px)"];           (+ "" (- (prop view.parentElement `offsetWidth) 2) "px")]
                                           ["height" (+ "" (- (prop view.parentElement `offsetHeight) 10) "px")]]
                                          view)
                          (-> editor `resize))))
       (editor nil)
       (set_evaluator (fn ()
                        (when options.evaluator
                               (-> editor.commands `addCommand
                                   {
                                    `name: "execute"
                                    `bindKey: { `win: "Shift-Enter" `mac: "Shift-Enter" }
                                    `exec: (function (editor)
                                                     (let
                                                         ((val nil)
                                                          (copytext (if options.repl_mode
                                                                      (-> editor `getValue)
                                                                      (-> editor `getCopyText))))
                                                       (if (blank? copytext)
                                                         (if (not options.repl_mode)
                                                           (notify (dtext "Please highlight text to evaluate")))
                                                         (try
                                                           (options.evaluator copytext)
                                                           (catch Error (e)
                                                             (progn
                                                              (notify (+ (dtext "Unhandled error") ": " e.message ))
                                                              (console.error e)))))))
                                    }))))
       (font_size (or options.font_size nil))
       (increase_font_size (function ()
                                     (when font_size
                                       (= font_size (Math.min 200 (+ font_size 1)))
                                       (set_prop options
                                                 `font_size font_size)
                                       (console.log "editor: options: " options)
                                       (-> editor `setFontSize font_size))))
       (decrease_font_size (function ()
                                     (when font_size
                                       (= font_size (Math.max 1 (- font_size 1)))
                                       (set_prop options
                                                 `font_size font_size)
                                       (console.log "editor: options: " options)
                                       (-> editor `setFontSize font_size))))
       (initialize_editor (fn ()
                            (when (not initialized)
                              (setq initialized true)
                              (setq parent_view view.parentElement)
                              (setq editor
                                    (ace.edit editor_div))
                              (set_evaluator)
                              (when options.on_save
                                (-> editor.commands `addCommand
                                    {
                                     `name: "save"
                                     `bindKey: { `win: "Ctrl-s" `mac: "Command-s" }
                                     `exec: (function (editor)
                                                      (options.on_save (-> editor `getValue)))
                                     }))


                              
                              (-> editor.commands `addCommand
                                  {
                                   `name: "increase_font_size"
                                   `bindKey: { `win: "Ctrl-Shift-=" `mac: "Ctrl-Shift-=" }
                                   `exec: increase_font_size })
                              
                              (-> editor.commands `addCommand
                                  {
                                   `name: "decrease_font_size"
                                   `bindKey: { `win: "Ctrl-Shift--" `mac: "Ctrl-Shift--" }
                                   `exec: decrease_font_size })
                              
                                   
                              (when (is_array? options.commands)
                                (for_each (command options.commands)
                                          (do
                                            (-> editor.commands `addCommand
                                                command))))
                              
                              (when options.on_focus
                                (-> editor `on `focus options.on_focus))
                              (when options.on_blur
                                (-> editor `on `blur options.on_blur))
                              (when options.read_only
                                (-> editor `setReadOnly true))
                              (-> editor.session `setUseSoftTabs true)
                              (-> editor `setOptions {
                                                      `enableBasicAutocompletion: true
                                                      `enableLiveAutocompletion: true
                                                      `showFoldWidgets: true
                                                      `cursorStyle: "wide"
                                                      `useSoftTabs: true
                                                      `highlightActiveWord: true
                                                      `fontFamily: "Roboto Mono"
                                                      `fontSize: 14
                                                      })
                              (-> editor.session `setUseWorker true)
                              (-> editor `setShowFoldWidgets true)
                              (cond
                                (== options.type "juno")
                                (-> editor.session `setMode "ace/mode/juno")
                                (== options.type "javascript")
                                (-> editor.session `setMode "ace/mode/javascript")
                                (== options.type "css")
                                (-> editor.session `setMode "ace/mode/css"))
                              (console.log "editor initialized: content: " (subtype content) content)                                                          
                              (-> editor `setValue content -1)
                              (if (eq nil font_size)
                                (= font_size (parseInt (-> editor `getFontSize)))
                                (-> editor `setFontSize font_size))
                              (set_prop options
                                        `font_size
                                        font_size)
                              
                              (when options.on_change
                                (-> editor `on `change (function (val)
                                                                 (options.on_change editor val))))                             
                              (-> editor `resize true)                             
                              (set_prop intf `editor editor)                             
                              ))))
    
    (if (not (is_symbol? `$ace_editor))
      (throw TypeError "$ace_editor symbol not found, and is required for this editor."))
    
    (when (is_element? options.command_bar)
      (-> controls `prepend options.command_bar))
      
    (= resize_observer (new ResizeObserver perform_resize))
    (= intf
       {
        `view: view
        `editor: editor
        `set: (fn (text)
                (-> editor `setValue text))
        `get: (fn (text)
                (-> editor `getValue))
        `type: `make_editor
        `set_evaluator: (fn (new_evaluator)
                          (when (is_function? new_evaluator)
                            (set_prop options
                                      `evaluator
                                      new_evaluator)
                            (set_evaluator)))
        `get_evaluator: (fn ()
                          options.evaluator)
        `save: (function ()
                         (options.on_save (-> editor `getValue)))
        `increase_font_size: increase_font_size
        `decrease_font_size: decrease_font_size
        `menu_items: (function ()
                       [[(dtext "Increase Font Size") increase_font_size]
                        [(dtext "Decrease Font Size") decrease_font_size]])
        `options: options
        `name: (or options.name "Untitled Buffer")
        `toJSON: (function ()
                           `(make_editor ,#(-> editor `getValue) ,#options))
        `initialize: (fn ()
                       (when view.parentElement
                         (console.log "editor: performing initialization")
                         (-> resize_observer `observe view.parentElement)
                         (initialize_editor)                        
                             
                         ))
        })))
               


(defun select_evaluator ()
  (let
      ((idx -1)
       (dups (new Set))
       (new_name nil)
       (selected_idx nil)
       (available (reduce (control (flatten (control_tree $root_controls)))
                          (when control.evaluate
                            (if (-> dups `has (or control.name "Untitled"))
                              (progn
                               (= new_name (+ (or control.name "Untitled")
                                             "-" idx))
                               (-> dups `add new_name)
                               [ (inc idx) new_name
                                 control ])
                              (progn
                               (-> dups `add control.name)
                               [ (inc idx) control.name control ])))))
       (selection_box (select { }
                              (map (fn (v)
                                     (option { `value: v.0 } v.1))
                                     (or available [])))))
    (= selected_idx
       (request_user_input (dtext "Select an available evaluator")
                           nil
                           { input: selection_box }))
    (when selected_idx
        (prop (prop available selected_idx) 2))))
  

(defun buffer_editor (title namespace path_to_value mode options)
  (let
      ((nseval (if (not (blank? namespace))
                 (-> Environment `get_namespace_handle namespace)
                 Environment))
       (title_span (span { `class: "juno-title" } title))
       (options (or options {}))
       (id (or options.id (generate_id "buffer_editor")))
       (evaluator (cond (and (is_object? options.evaluator)
                             (is_function? options.evaluator.evaluate))
                        options.evaluator.evaluate
                        (is_function? options.evaluator)
                        options.evaluator))
                                                
       (evaluator_span (span { `class: "juno-evaluator" `title: (dtext "Name of the evaluator assigned to this buffer") } "-"))
       (buffer_commands_button (button { `title: "Buffer Commands" } "⋯"))
       (is_dirty? false)
       
       (command_bar (or options.command_bar
                        (div { `class: "juno-buffer-bar" }
                             buffer_commands_button
                             title_span                                                             
                             (span { `title: "Namespace" `class: "juno-namespace" `style: "display:inline-block; padding-left: 30px; padding-right: 5px;" } nseval.namespace)
                             evaluator_span
                             (if options.read_only
                               (span { `title: "This buffer doesn't allow editing" `style: "padding-left: 5px; padding-right: 5px;" } (dtext "Locked"))
                               ())
                             
                             (span { `class: "juno-mode" `title: "Current Editing Mode" `style: "float: right; margin-right: 15px; display: inline-block; padding-left: 5px; padding-right: 5px;" } mode))))      
       (init_value (resolve_path path_to_value nseval.global_ctx.scope))
       (on_save (fn (value)
                  (progn
                   (try
                     (progn
                      (set_path path_to_value nseval.global_ctx.scope
                                value)
                      (remove_class "juno-needs-save" title_span)
                      (= is_dirty? false)
                      (notify (+ "Set " title)))
                     (catch Error (`e)
                       (progn
                        (log_error (+ (dtext "Unable to save buffer")
                                      " "
                                      title)
                                   e)))))))
       (on_focus (fn ()
                   (progn                                     
                    (setq *last_focus* edit_control)
                    (add_class "juno-focused" command_bar)
                    (-> edit_control.editor `focus))))
       
       (edit_control (make_editor (if (is_string? init_value)
                                    init_value
                                    "")                                  
                                  {
                                   type: mode
                                   command_bar: command_bar                                                                     
                                   on_save: on_save
                                   id: id
                                   read_only: options.read_only
                                   font_size: options.font_size
                                   on_change: (function (editor val)
                                                        (progn
                                                         (when (not is_dirty?)
                                                           (= is_dirty? true)
                                                           (add_class "juno-needs-save" title_span))
                                                         (when options.on_change
                                                           (-> options.on_change editor val))))
                                   evaluator: evaluator                                   
                                   }))
       (menu_items (fn ()
                     (conj  
                      [(when path_to_value
                         [(+ (dtext "Save to") " " (last path_to_value))
                          (fn (e) (-> edit_control `save))])
                       [(dtext "Select Evaluator")
                        select_my_evaluator]]
                      (-> edit_control `sub_menu_items))))
       (set_evaluator_control (fn (control)
                                (if control.evaluate
                                  (progn
                                   (-> edit_control `set_evaluator control.evaluate)
                                   (set_prop options
                                             `evaluator_id
                                             control.options.id)
                                   (if control.name
                                     (set_prop evaluator_span
                                               `innerText
                                               (+ "⭢ " control.name)))))))       
       (select_my_evaluator (fn ()
                        (aif (select_evaluator)
                             (progn
                              (set_evaluator_control it)
                              (notify (+ (dtext "Evaluator set to ") it.name)))))))
                            
    
    (console.log "buffer_editor: init_value: " init_value path_to_value nseval)
   
    (attach_event_listener buffer_commands_button
                           `click
                           (fn (e)
                             (progn
                              (handle_event e)
                              (make_menu buffer_commands_button
                                                           (menu_items)
                                                           ))))
                              
                              
                                          
    (set_prop options
              `id
              id)
    (set_prop edit_control
              `sub_initializer
              edit_control.initialize
              `sub_menu_items
              edit_control.menu_items)
    (set_prop edit_control
              `set_evaluator_control  set_evaluator_control
              `on_focus on_focus
              `options options
              `name title
              `menu_items menu_items
              `type `buffer_editor
              `initialize (fn ()
                            (when edit_control.view.parentElement                              
                              (-> edit_control `sub_initializer)
                              (console.log "buffer_editor: sub initialized: setting evaluator if I have it: " options)
                               (set_evaluator_control (get_control_by_id options.evaluator_id))))
                                       
                              
              `toJSON (function ()                                                                 
                                 `(buffer_editor ,#title ,#namespace ,#path_to_value ,#mode ,#options)))
    edit_control))




(defun log_view (options)
  (let
      ((output_container (div {   `style: "height: calc(100% - 20px); overflow: scroll; width: 100%; vertical-align:bottom; " } ))       
       (options (or options {}))
       (title_span (span { `class: "juno-title" } (if options.title options.title "Unnamed")))
       (control_status (div {  `class: "juno-buffer-bar" }
                            (cond (is_array? options.additional_elements)
                                  options.additional_elements
                                  options.title
                                  title_span
                                  else
                                  [])))
       (resize_observer nil)
       (parent_view nil)
       (check_observer (fn ()
                         (when (not (== view.parentElement parent_view))
                           (-> resize_observer `disconnect)
                           (-> resize_observer `observe view.parentElement)
                           (= parent_view view.parentElement))))
       (id (or options.id (generate_id "log_view")))
       (view (div { `tabindex: 0 `control_id: id `style: "overflow: hidden; margin: 0px; padding: 0px; height: 100%; width: 100%;" }
                  control_status
                  output_container))
       (initialized false)
       (initialize (fn ()
                     (when (and view.parentElement
                                (not initialized))
                       (= initialized true)
                       (= parent_view view.parentElement)
                       (= resize_observer (new ResizeObserver perform_resize))
                       (-> resize_observer `observe view.parentElement))))
                       
       (perform_resize (fn ()
                         (let
                               ((new_height (- (prop view.parentElement `offsetHeight) 5))
                                (new_width  (- (prop view.parentElement `offsetWidth) 0)))
                             
                             (set_style [[ "width" (+ "" new_width "px") ]
                                         [ "height" (+ "" new_height "px") ]]
                                        view))))
       (add_result (fn (result command_text error_state)
                     (progn
                      (when (not (eq nil command_text))
                        (-> output_container
                            `append
                            (if (> command_text.length 100)
                              (details {  style:"border-left: 3px solid #0167835e; border-top: 1px solid #00000008; padding: 10px; margin-top: 7px; background: #F8F6F6; width: calc(100% - 10px); display: inline-block; " }
                                       (summary { `tabindex: 0 `class: "juno-code-value" } (+ (-> command_text `substr 0 100) "..."))
                                       (pre { `tabindex: 0 `class: "juno-code-value" }
                                             command_text))
                              (div {  style:"border-left: 3px solid #0167835e; border-top: 1px solid #00000008; padding: 10px; margin-top: 7px; background: #F8F6F6; width: calc(100% - 10px); display: inline-block; " }
                                   (code { `tabindex: 0 `class: "juno-code-value" }
                                             command_text)))))
                      (-> output_container
                          `append
                          (div {  `style: (+ " margin-top: 0px; background: #F8F6F6; width: calc(100% - 10px); display: inline-block; font-family: var(--main-mono-space); "
                                            (if (eq nil command_text)
                                              "border-top: 1px solid #00000008; padding: 5px;"
                                              "border-left: 3px solid #0167835e; padding: 10px; margin-bottom: 5px; border-bottom: 1px solid transparent;")) } 
                               (value_to_dom result)))
                      (when (> output_container.children.length (or options.max_entries 100))
                        (-> (last output_container.children)
                            `remove))                      
                      (set_prop output_container
                                `scrollTop
                                1000000)
                      (set_prop view
                                `scrollTop
                                0)
                      result)))
       (interf {}))
    (set_prop options
              `id
              id)
    (set_prop interf
              `view view
              `append add_result
              `control_bar control_status
              `output_container output_container
              `initialize initialize
              `resize perform_resize
              `type `log_view
              `clear (fn ()
                       (-> output_container `replaceChildren))
              `options options
              `toJSON (function ()
                                `(log_view ,#options)))
    interf))


   

(defun browser_repl (options)
  (let
      ((options (or options {}))
       (name options.name)       
       (resize_observer nil)
       (namespace_span  (span { `title: "REPL Namespace" `class: "juno-namespace" `style: "display:inline-block; padding-left: 30px; padding-right: 5px;" } (current_namespace)))
       (commands_button (button { `title: "REPL Commands" } "⋯"))
       (title_span (span { `class: "juno-title" } (if options.name options.name "Unnamed")))
       (path_span (span { `tabindex: 0 `title: (dtext "Click to copy focused path")  `class: "juno-path" } ""))
       (current_env Environment)
       (error_state nil)
       (initialized false)       
       (intf nil)
       (id (or options.id (generate_id "repl")))
       (output_control (log_view { `additional_elements: [ commands_button title_span namespace_span path_span ] `id: id }))
       (history (if (is_array? options.history)
                  options.history
                  []))
       (push_history (fn (lisp_text)
                       (progn
                        (push history
                                lisp_text)
                        (= history_idx (- history.length 1))
                        (when (> history.length (or options.max_history_size
                                                    50))
                          (take history)))))
       (history_idx 0) 
       (history_prior_entry (fn ()
                              (when (> history.length 0)
                               (-> input_container `set (prop history history_idx))
                               (dec history_idx)                               
                               (when (< history_idx 0)
                                 (= history_idx (- history.length 1))))))
       (history_next_entry (fn ()
                              (when (> history.length 0)
                               (inc history_idx)                               
                               (when (>= history_idx history.length)
                                 (= history_idx 0))
                               (-> input_container `set (prop history history_idx)))))
       (clear_output (fn ()
                       (-> output_control `clear)))
       (clear_history (fn ()
                        (progn
                         (= history [])
                         (= history_idx 0))))
       
       (repl_key_bindings (function ()
                                    (map (function (kb)
                                             (destructuring_bind (command_name bindings)
                                                 kb
                                                {
                                                 `name: command_name
                                                 `bindKey: bindings
                                                 `exec: (function (editor)
                                                                  (-> intf command_name editor))
                                                 }))                                                      
                                         (or (pairs *key_bindings*.repl) []))))
       (evaluator (fn (lisp_text no_eval)
                    (let
                        ((result nil))
                      (setq error_state nil)
                      (setq current_env (-> Environment `get_namespace_handle (current_namespace)))                    
                      (try
                        (= result (if no_eval
                                    lisp_text
                                    (-> current_env `evaluate lisp_text {} { `throw_on_error: true })))
                        (catch Error (ex)
                          (do
                            (= error_state true)
                            (notify "Error state")
                            (= result ex))))
                      (console.log "<-" result)
                      (set_prop namespace_span
                                `innerText
                                (current_namespace))                     
                      (-> output_control `append result lisp_text error_state)
                      (if (not error_state)
                        (-> input_container `set "")))))
                             
       (input_container (make_editor 
                                   ""                                  
                                  {
                                   type: "juno"                                                                                                                             
                                   on_change: (function (editor val)
                                                        (progn
                                                         true))
                                   `id: id
                                   repl_mode: true                                                                              
                                   evaluator: (fn (lisp_text no_eval)
                                                (progn
                                                 (push_history lisp_text)
                                                 (evaluator lisp_text no_eval)))                                                 
                                   commands: (repl_key_bindings)
                                   }))

       (sview (split_view_horizontal
                                 output_control
                                 input_container
                                 { `ratio: (or options.ratio 0.7) `id: id } ))  ;; 80/20 top-bottom
       
       (view sview.view)
       (non_whitespace_regex (new RegExp "\\\\s"))
       (on_focus (fn ()
                   (progn
                    ;(-> input_container.editor `focus) ;; bring focus to the repl
                    (add_class "juno-focused" output_control.control_bar )))) ;; we know that is the command bar
       (on_blur (fn ()
                  (progn
                   true)))
       (menu_items (fn ()
                     [[(dtext "Clear Output Log")
                       (function ()
                                 (clear_output))]
                      [(dtext "Clear REPL History")
                       (function ()
                                 (clear_history))]]))
       (initialize (fn ()
                     (progn
                      (if initialized
                        false
                        (progn
                         (= initialized true)
                         (console.log "repl initializing")
                         (-> output_control `append (html/div { `style: "display: flex padding: 5px" }                
                                              (html/span { `style: "font-weight: bold; display: inline-block;" } "Juno REPL")
                                              (html/span { `style: "display: inline-block; margin-left: 10px;" }
                                                         "Version: " Environment.build_version   )))
                         true))))))

       (attach_event_listener output_control.output_container
                           `focusin
                           (function (e)
                             (progn
                              (handle_event e)
                              (console.log "output-control: focus: " (-> e.srcElement `getAttribute "lpath") e.srcElement)
                              (aif (-> e.srcElement `getAttribute "lpath")
                                   (progn
                                    (set_prop path_span
                                             `innerText
                                             (+ "[ " (join " "
                                                           (for_each (v (split_by "~" it))
                                                                     (cond (> (length (scan_str non_whitespace_regex v)) 0)
                                                                           (+ "\"" v "\"")
                                                                           (isNaN (new Number v))
                                                                           (+ "`" v)
                                                                           else
                                                                           v)))
                                                           " ]"))
                                    (console.log "setting path span:: " it))
                                   (progn
                                    (console.log "clearing path span")
                                    (set_prop path_span
                                             `innerText
                                             ""))))))
    
    (attach_event_listener commands_button
                           `click
                           (fn (e)
                             (progn
                              (handle_event e)
                              (make_menu commands_button
                                         (menu_items)
                                         ))))

    (attach_event_listener path_span
                           `click
                           (fn (e)
                             (progn
                              (copy_text_to_clipboard path_span.innerText)
                              (notify (+ (dtext "Copied") " " path_span.innerText)))))

    ;; by changing the split_view type value, we prevent this control from being split or
    ;; controls being swapped
    
    (set_prop sview
              `type
              "REPL_split")
    
    (set_prop options
              `id
              id)
                   
    (= intf {
             `view: view
             `options: options
             `name: name             
             `input_container: input_container
             `history_next_entry: history_next_entry
             `history_prior_entry: history_prior_entry
             `clear_output: clear_output
             `initialize: initialize
             `type: "browser_repl"
             `resize: (fn ()
                       (-> sview `resize))
             `menu_items: menu_items                           
             `on_focus: on_focus
             `on_blur: on_blur
             `toJSON: (function ()
                                (progn
                                 (set_prop options
                                           `history
                                           [(quote quotel) history])
                                `(browser_repl ,#(or options { `ratio: sview.options.ratio } ))))
             `controls: (fn () [ input_container output_control])
             `output_container: output_control.view
             `log: (fn (val)
                     (-> output_control `append val nil))
             `evaluate: (fn (lisp_text no_eval)
                          (evaluator lisp_text no_eval))
             })
    intf))


;; singleton - if it already exists, just return the control
;; otherwise make it 
(defun control_holding_tank (initial_controls options)
  (aif (get_control_by_name "Holding Tank")
       it
       (let
           ((my_controls (if (and initial_controls
                                  (is_array? initial_controls))
                           (to_object
                            (reduce (control initial_controls)
                                    (when control.options.id 
                                      [control.options.id control])))
                           {}))                                                    
            (options (or options {}))
            (intf {})
            (name (or options.name
                      "Holding Tank"))
            (initialized false)
            (title_span (span { `class: "juno-title" } (dtext "Holding Tank")))
            (buffer_commands_button (button { `title: "Buffer Commands" } "⋯"))
            (control_status (div {  `class: "juno-buffer-bar" }
                                 buffer_commands_button
                                 (cond (is_array? options.additional_elements)
                                       options.additional_elements
                                       else
                                       title_span
                                       )))
            (perform_resize (fn ()
                              (when view.parentElement
                                (when (not initialized)
                                  (initialize))
                                (render_view))))
            
            (resize_observer nil)
            (add_control (fn (control)
                             (when (not (== control intf))
                                 (assert (and control.type control.options.id) "Invalid control provided")
                                 (set_prop my_controls
                                           control.options.id
                                           control)
                                 (render_view)
                                 control)))
            (remove_control (fn (id)
                              (if (is_object? id)
                                (aif (prop my_controls id.options.id)
                                     (progn
                                      (remove_prop my_controls id.options.id)
                                      (render_view)))
                                (aif (prop my_controls id)
                                     (progn
                                      (remove_prop my_controls id)
                                      (render_view))
                                     (notify "The requested control wasn't found")))))
            (id (or options.id (generate_id "holding_tank")))
            (render_view (fn ()
                           (-> control_view
                               `replaceChildren
                               (table { `style: "width: 100%" }
                                (thead
                                 (th "Name") (th "Type") (th "Actions"))
                                (tbody
                                 (for_each (control (values my_controls))
                                           (tr
                                            (td control.name)
                                            (td control.type)
                                            (td { `for_control_id: control.options.id }
                                                (button (dtext "View"))                                               
                                                (button { `style: "float: right" } (dtext "Destroy"))))))))))
            (handle_button_event (fn (elem)
                                   (aif (and elem.parentElement
                                            (-> elem.parentElement `getAttribute "for_control_id"))
                                        (progn
                                         (console.log "holding_tank: button_event: " elem.innerText elem)
                                         (cond
                                           (== elem.innerText (dtext "View"))
                                           (swap_control intf (get_control_by_id it))
                                           (== elem.innerText (dtext "Destroy"))
                                           (container_view_operation "destroy" (get_control_by_id it)))))))
                                   
            (initialize (fn ()
                          (when (and view.parentElement
                                     (not initialized))
                            (= initialized true)
                            (-> resize_observer `observe view.parentElement)
                            (console.log "holding_tank: in initialization: " options view.parentElement)
                            (if options.in_tree
                              (progn
                               (console.log "holding_tank: in tree and setting view up to block..and calling render")
                               (set_style [["display" "block"]] view)
                               (render_view))
                              (-> (get_by_id "body")
                                  `append view)))))
                        
            (on_focus (fn ()
                        (progn
                         (add_class "juno-focused" control_status ))))
            (control_view (div { `style: "overflow: scroll; margin: 0px; padding: 0px; height: 100%; width: 100%;" }))
            (show (fn ()
                      (let
                          ((root_control (if *last_focus*
                                             (top_frame *last_focus*)
                                             (prop $root_controls 1)))
                           (current_parent (if view.parentElement
                                               (control_position (control_for_dom_element view))
                                               { `child: intf `parent: nil `child_position: 0 }))
                           (target_control (if root_control.controls
                                             (first (-> root_control `controls)))))
                        (console.log "holding_tank: show: " root_control current_parent target_control)
                          (cond 
                            (eq current_parent.parent nil)
                            (progn
                             (set_prop options
                                       `in_tree
                                       true)
                             (set_style [["display" "block"]] view)
                             (container_view_operation "split_right" target_control intf { `ratio: 0.8 }))
                            current_parent.parent
                            (progn
                              (set_focus_to intf))))))
            (hide (fn ()
                    (progn
                     (console.log "holding_tank: hide: " view.parentElement)
                     (if view.parentElement
                       (container_view_operation "hide" intf)
                       (remove_prop options
                                    `in_tree)
                       (set_style [["display" "none"]] view)
                        (-> (get_by_id "body")
                            `append view)))))
                             
                          
            (view (div { `tabindex: 0 `control_id: id `style: "display: none; overflow: hidden; margin: 0px; padding: 0px; height: 100%; width: 100%;" }
                       control_status
                       control_view)))

         (attach_event_listener view
                                `click
                                (fn (e)
                                  (when (== e.srcElement.tagName "BUTTON")
                                    (handle_button_event e.srcElement))))
         (set_prop options
                   `id id
                   `name name)
         (= resize_observer (new ResizeObserver perform_resize))        
         
         (= intf
            {
              `view: view
              `type: "holding_tank"
              `id: id
              `name: options.name 
              `initialize: initialize
              `on_focus: on_focus
              `controls: (fn ()
                           (values my_controls))
              `add_control: add_control
              `has_control?: (fn (thing) (if (is_string? thing)
                                           (prop my_controls thing)
                                           (prop my_controls thing.options.id)))
              `remove_control: remove_control
              `name: options.name
              `hide: hide
              `show: show
              `resize: perform_resize
              `options: options
              `toJSON: (function ()
                                 `(control_holding_tank ,#(values my_controls)  ,#options ))
              })
          intf)))

(defun empty_selection_control (options)
    (let
        ((options (or options {
                               `name: "Empty Selection" 
                               }))
         (title_span (span { `class: "juno-title" } (if options.title options.title "Select Control")))
         (buffer_commands_button (button { `title: "Buffer Commands" } "⋯"))
         (control_status (div {  `class: "juno-buffer-bar" }
                              buffer_commands_button
                              (cond (is_array? options.additional_elements)
                                  options.additional_elements
                                  else
                                  title_span
                                  )))
         (resize_observer nil)
         (id (or options.id (generate_id "empty")))
         (initialized false)
         (parent_view nil)
         (check_observer (fn ()
                         (when (not (== view.parentElement parent_view))
                           (-> resize_observer `disconnect)
                           (-> resize_observer `observe view.parentElement)
                           (= parent_view view.parentElement))))
         (perform_resize (fn ()
                           (when view.parentElement
                             (check_observer)
                           (let
                               ((new_height (- (prop view.parentElement `offsetHeight) 20))
                                (new_width  (- (prop view.parentElement `offsetWidth) 5)))
                             
                             (set_style [[ "width" (+ "" new_width "px") ]
                                         [ "height" (+ "" new_height "px") ]]
                                        view)))))
         (initialize (fn ()
                       (when (and view.parentElement
                                  (not initialized))
                         (= initialized true)
                         (= parent_view view.parentElement)
                         (-> resize_observer `observe view.parentElement))))
         (on_focus (fn ()
                   (progn
                    ;(-> input_container.editor `focus) ;; bring focus to the repl
                    (add_class "juno-focused" control_status ))))
         (control_view (div { `class: "juno-empty-content" } ""))
         (view (div { `tabindex: 0 `control_id: id `style: "overflow: hidden; margin: 0px; padding: 0px; height: 100%; width: 100%;" }
                  control_status
                  control_view)))
                             
        (set_prop options
                  `id
                  id)
        (= resize_observer (new ResizeObserver perform_resize))
        
        
       {
           `view: view
           `type: "empty_control"
           `id: id
           `initialize: initialize
           `on_focus: on_focus
           `name: options.name
           `resize: perform_resize
           `options: options
           `toJSON: (function ()
                      `[empty_selection_control ,#options ])
       }))



(defun menu_tree (items options _path)
  (let
      ((options (either options { `flat_index: 0 }))
       (path (either _path []))
       (disappear_timer nil)
       (id (either options.id "cmenu"))       
       (menu_element
        (fn (idx text `& args)
          (let
              ((view (li {  `class: "pure-list-item"                                         
                          `style: (if (> args.length 0)
                                    "position: relative;"
                                    "")
                          }
                         (a { 
                             `idx: idx
                             `path: (join "~" (conj path idx))
                             `href: "#"
                             `class: "pure-menu-link" 
                             `style: "min-width: 150px;"
                             }
                            (if (== args.length 0)
                              (span { `path: (join "~" (conj path idx)) `class: "juno-menu-text" } text)
                              [(span { `path: (join "~" (conj path idx)) `class: "juno-menu-text" } text)
                               (span { `class: "juno-menu-submenu" } "›")]))
                         args))
               (timer nil))
            (if (== args.length 0)
              view                           
              (progn
               (attach_event_listener view
                                      `mouseenter
                                      (fn (e)
                                        (do
                                          (when timer
                                            (clearTimeout timer))
                                          (= timer
                                             (setTimeout (fn ()
                                                           (set_style [["display" "inline-block" ]
                                                                       ["position" "absolute"]
                                                                       ["top" "0px"]
                                                                       ["left" (+ "" e.srcElement.offsetWidth "px") ]]
                                                                      view.children.1))                                                           
                                                         150)))))
               (attach_event_listener view
                                      `mouseleave
                                      (fn (e)
                                        (do
                                          (when timer
                                            (clearTimeout timer))
                                          (= timer
                                             (setTimeout (fn ()                                                         
                                                           (set_style [["display" "none"]] view.children.1))
                                                         150)))))
               
               view)))))
       (view nil))
    
    (= view
       (ul (+ {}
              { `class: (if (> path.length 0)
                             "juno-menu pure-menu-list"
                             "pure-menu-list")
                `style: (+ (if (> path.length 0)
                             "display: none;"
                             "display: inline-block;")
                           "position: relative;")  }
              (if (== path.length 0)
                { `id: id }
                {}))
                     
           (map (fn (item idx)
                  (let
                      ((text (if (is_function? item.0)
                               (item.0)
                               item.0)))
                    (set_prop options
                              `flat_index
                              (+ 1 options.flat_index))                     
                    (cond
                      (is_array? item.1)
                      (menu_element options.flat_index text (menu_tree item.1 options (conj path [ idx 1])))
                      (and (== text "--") (eq nil item.1))
                      (hr { `class: "LightHR" })
                      (is_function? item.1)
                      (menu_element idx text)
                      else
                      [])))
                items)))
    (if (> path.length 0)      
       view
      (progn
       (attach_event_listener view
                              `click
                              (fn (e)
                                (let
                                    ((path (-> e.srcElement `getAttribute "path"))
                                     (idx (-> e.srcElement `getAttribute "idx"))
                                     (target (if path
                                               (resolve_path (split_by "~" path) items))))
                                  (handle_event e)
                                  (console.log "clicked: " path e target )
                                  (-> view `remove)
                                  (sleep 0.01) ;; disconnect and move to back of the event loop for the call
                                  (when (and target
                                             (is_function? target.1))
                                    (target.1 e target.2))
                                  )))
       (setTimeout (fn ()
                     (progn
                      (attach_event_listener view
                                             `mouseleave
                                             (function (e)
                                                       (progn
                                                        (when disappear_timer
                                                          (clearTimeout disappear_timer))
                                                        (= disappear_timer (setTimeout (fn ()
                                                                                         (progn
                                                                                          
                                                                                          (-> view `remove)
                                                                                          (= disappear_timer nil)))
                                                                                       700)))))
                      (attach_event_listener view
                                             `mouseenter
                                             (function (e)
                                                       (when disappear_timer
                                                         (clearTimeout disappear_timer)
                                                         (= disappear_timer nil))))))
                   700) ;; delay a little before adding the timeout so we don't accidentally hover over it 
       {
        `view: view
        `toJSON: (function ()
                           `(menu_tree ,#items ,#options))
        `type: "menu_tree"
        }))))

(defun app_menu(global_menu_path options)
  (let
      ((view nil)
       (options (either options {}))
       (top_levels [])
       (menu_trees (resolve_path global_menu_path Environment.global_ctx.scope))
       (id (or options.id (generate_id "app_menu")))
       (intf {})
       (menu_trees (or menu_trees []))
       (compute_top_levels (fn ()
                             (each menu_trees `0)))
       (help_idx nil)
       (add_menu (fn (menu)
                   (let
                       ((existing_idx (index_of menu.0 top_levels)))
                     (if (== existing_idx -1)
                       (push menu_trees
                             menu)
                       (-> menu_trees `splice existing_idx 1 menu))
                     (set_path global_menu_path Environment.context.scope menu_trees)
                     (build_view))))
       (remove_menu (fn (menu_text)
                      (let
                          ((existing_idx (index_of menu_text top_levels)))
                        (when (> existing_idx -1)
                          (-> (prop view.children existing_idx)
                              `remove)
                          (-> menu_trees `splice existing_idx 1))
                        (set_path global_menu_path Environment.context.scope menu_trees))))                        
       (build_view (fn ()
                       (let
                           ((new_view nil)
                            (header_elem nil))
                         (= top_levels (compute_top_levels))
                         (unless options.disable_help
                                 (push top_levels
                                       "Help")
                                 (= help_idx (- (length top_levels) 1)))
                         
                         (= new_view
                            (ul { `id: id `class: "pure-menu-list" `style: "margin-left: 10px" }
                                (if (> top_levels.length 0)
                                  (map (fn (top_level idx)
                                         (li { `idx: idx  `class: "juno-menu-header juno-main-menu-header" }
                                             (span { `idx: idx `class: "juno-menu-item" } (dtext top_level))))
                                       top_levels)
                                  [])))
                         (attach_event_listener new_view
                                                `click
                                                (fn (e)
                                                  (let
                                                      ((idx (-> e.srcElement `getAttribute `idx))
                                                       (pos (if (== e.srcElement.tagName "SPAN")
                                                              (-> e.srcElement.parentElement `getBoundingClientRect)
                                                              (-> e.srcElement `getBoundingClientRect)))
                                                       (help_menu_function nil)
                                                       (mview nil)
                                                       (menu nil))
                                                    (aif (get_by_id "cmenu")
                                                         (-> it `remove))
                                                    (when idx
                                                      
                                                      (if (== (parseInt idx) help_idx)
                                                        (= help_menu_function *help_menu_function*)
                                                        (= help_menu_function nil))
                                                      (console.log "app_menu: clicked: " idx "help_idx: " help_idx (prop menu_trees (parseInt idx)))
                                                      (aif (or help_menu_function
                                                               (resolve_path [ (parseInt idx) 1 ] menu_trees))
                                                           (progn
                                                            (cond
                                                              help_menu_function
                                                              (= menu (menu_tree (it)))
                                                              (is_function? it)
                                                              ;; if the underlying menu is a function, call the function to get..
                                                              ;; up to the minute menu contents
                                                              (= menu (menu_tree (it (first (prop menu_trees (parseInt idx))))))
                                                              ;; other wise it is a standard menu, which may not rehydrate well depending
                                                              ;; on how it was created..
                                                              else
                                                              (= menu (menu_tree it)))
                                                            (= mview (div { `id: `cmenu `class: "juno-menu" `style: " z-index: 30" }
                                                                   menu.view))
                                                            (set_style [["position" "absolute"]
                                                                        ["left" (+ "" (Math.max 0 pos.left 0) "px")]
                                                                        ["top" (+ "" (Math.max 0 pos.bottom ) "px") ]]
                                                                       mview)                                                                
                                                            (-> (get_by_id "body") `appendChild
                                                                   mview))
                                                           (notify "Unable to find menu resource"))))))
                                                                        
                         (if view.parentElement
                           (-> view `replaceWith new_view))
                         (= view new_view)
                         view))))
    
    
    (build_view)
    (set_prop options
              `id
              id)
    (set_prop intf
              `view view
              `add_menu add_menu
              `remove_menu remove_menu
              `type "app_menu"
              `toJSON (function ()
                                `(app_menu ,#global_menu_path ,#options)))
    (setq *app_menu_control* intf)
    intf))

(defun app_header (controls options)
  (let
      ((existing_header (-> document `querySelector "header"))
       (intf nil))
    (when (eq existing_header nil)
      (-> (first (get_by_tag "body"))
          `prepend
          (= existing_header (header { `id: "page-header" class: "juno-page-header" }))))
    (when options.app_title
      (-> existing_header `appendChild (span { `class: "juno-header" } options.app_title)))
    (for_each (`elem controls)
              (progn
               (cond
                 elem.view
                 (-> existing_header `appendChild elem.view)
                 (is_element? elem)
                 (-> existing_header `appendChild elem)
                 else
                 (create_dom_element "span" elem))))
    (set_prop options
              `id
              (or options.id "app-header"))
   
    (= intf
       {     
        `options: options
        `controls: controls
        `type: "app_header"
        `toJSON: (function ()
                           `(app_header ,#controls ,#options))
        })
    
    intf))




(defun controls_by_parent ()
    (let
        ((acc [])
         (current { `root: [] })
         (found_control {})
         (control_identity (fn (control)
                                 (and control
                                      (or control.name
                                          control.options.id
                                          "Untitled"))))
         (collect_control (fn (control parent)
                              (when (and control.options.id 
                                         (not (prop found_control control.options.id)))
                                 (when (and parent
                                            (not control.name))
                                     (cond
                                         parent.name
                                         (set_prop control
                                                   `name
                                                   (+ "" parent.name "-" control.type))
                                         parent.type
                                         (set_prop control
                                                   `name
                                                   (+ "" parent.type "-" control.type))))
                                 (cond
                                     (and parent
                                          (not (prop current (control_identity parent))))
                                     (set_prop current 
                                               (control_identity parent)
                                               [ control ])
                                     (and parent
                                          (prop current (control_identity parent)))
                                     (push (prop current (control_identity parent))
                                               control)
                                     (eq nil parent)
                                     (push (prop current `root)
                                               control))
                                 (set_prop found_control
                                           control.options.id
                                           control)))))
        (for_each (controls (or $root_controls []))
           (control_tree controls collect_control))
        current))


(defun gen_layout_menu ()
    (let
        ((menu_acc [])
         (holding_tank (get_control_by_name "Holding Tank"))
         (root_ctls (new Set)))
      (reduce (pset (pairs (controls_by_parent)))
         (destructuring_bind (key controls)
            pset
            (console.log "key: " key "is the holding tank?" (== (get_control_by_name key) holding_tank) controls  )
            (cond
                (== key "root")
                (progn
                    (for_each (control controls) 
                       (-> root_ctls `add control.name))
                    nil)
                
                (and (-> root_ctls `has key)
                     (not (== key "Holding Tank")))
                [key (for_each (operation ["Show" "Hide" "--" "Destroy"])
                      (progn
                         (defvar control (get_control_by_name key))        
                         [(dtext operation)
                          (cond
                            (== operation "--")
                            nil
                            (or (and (== operation "Show")
                                     (-> holding_tank `has_control? control))
                                (and (== operation "Hide")
                                     (not (-> holding_tank `has_control? control)))
                                (and (== operation "Destroy")
                                     (-> holding_tank `has_control? control)))
                            (fn ()
                              (container_view_operation (to_key operation) 
                                                        (get_control_by_name key)
                                                        nil)))]))]
                
                (not (== key "Holding Tank"))
                [key (for_each (operation ["Split Above" "Split Below" "Split Left" "Split Right"])
                         [(dtext operation) (fn ()
                                               (progn
                                                   (console.log key "operation: " operation controls)
                                                   (container_view_operation (to_key operation) 
                                                                        (get_control_by_name key)
                                                                        (empty_selection_control))))])])))))

(defun gen_view_menu ()
  (progn
   (defvar holding_tank (get_control_by_name "Holding Tank"))                
   (defvar holding_tank_visible? (if (prop (control_position holding_tank) `parent)
                                     true
                                     false))
   (conj 
        (reduce (control (current_controls))
            (when (and control.on_focus
                       control.options.id)
              (defvar is_displayed? (and (not (== holding_tank control))
                                         (not (-> holding_tank `has_control? control))))
              (console.log "is_displayed: " is_displayed? control.name)
              [(or control.name "Untitled") 
               (reduce (operation ["Show" "Focus" "Hide" "--" "Destroy"])
                       (cond
                         (== control.name "Holding Tank")                              
                         (cond
                           (== operation "Focus")
                           [(dtext "Show")
                            (fn (e)
                              (-> (get_control_by_name "Holding Tank")
                                  `show))]
                           (and holding_tank_visible?
                                (== operation "Hide"))
                           [(dtext "Hide")
                            (fn (e)
                              (-> (get_control_by_name "Holding Tank")
                                  `hide))]
                           else
                           nil)
                         else
                         [(dtext operation)
                          (cond
                            (and (not is_displayed?)
                                 (== operation "Show"))
                            (fn (e)
                              (aif (get_control_by_id control.options.id)
                                   (show_control it)))
                            (and is_displayed? (== operation "Focus"))
                            (fn (e)
                              (aif (get_control_by_id control.options.id)
                                   (set_focus_to it)))
                            (and is_displayed? (== operation "--"))
                            nil
                            (and is_displayed? (== operation "Hide"))
                            (fn (e)
                              (aif (get_control_by_id control.options.id)
                                   (container_view_operation "hide" it)
                                   (notify (+ "Unable to find control " (or control.name control.options.id)))))
                            (== operation "Destroy")
                            (fn (e)
                              (aif (get_control_by_id control.options.id)
                                   (container_view_operation "destroy" it)
                                   (notify (+ "Unable to find control " (or control.name control.options.id))))))]))]))
        [[(dtext "List All Active Controls") 
          (fn ()
            (progn
             (rlog (control_tree $root_controls))))  ]])))
                  
                                  

(defun serialize_controls (controls)
  [(quote quote) [(quote quote) (JSON.parse (JSON.stringify controls))]])
    

(defun save_control_image ()
  (progn
   (set_focus_to nil)
   (= *serialized_controls* (serialize_controls $root_controls))
      ;[(quote quote) [(quote quote) (JSON.parse (JSON.stringify $root_controls))]])
   (console.log "*serialized_controls*: " *serialized_controls*)
   (save_image)))

(defun rehydrate_controls (container serialized_controls)
  (let
      ((control nil))
    (for_each (`serialized_control serialized_controls)
      (progn
       (= control (eval serialized_control))
       (when (and control.view
                  (not control.view.parentElement))
         (-> container
             `append control.view))
       (push $root_controls
             control)
       (when control.initialize
         (-> control `initialize))))))
       



    

(defun new_buffer (options)
  (let
      ((target_container (or *last_focus*  (default_focus)))
       (symbol_data (or options.path
                        (symbol_chooser "Select a symbol to edit" options.type)))
       (target_ns symbol_data.namespace)
       (target_env nil))
    (when target_ns
      (= target_env (-> Environment `get_namespace_handle symbol_data.namespace)))
    (when symbol_data.path
      (if (is_top_control? target_container)
        (container_view_operation "split_right" (first (-> target_container `controls))
                                  (buffer_editor (last symbol_data.path) target_ns symbol_data.path options.type ))
        (swap_control target_container (buffer_editor (last symbol_data.path) target_ns symbol_data.path options.type ))))))

(defun user/*initializer* ()
  (let
      ((header nil)       
       (scripts (-> (page_header) `querySelectorAll "script[id]"))                     
       (scratch_editor nil)
       (page_frame nil)
       (control nil)
       (repl_split nil))
                                                               
    (console.log "user/*initializer is running." )
    
    ;(defglobal main_menu_button (li  { `class: "juno-menu-header" }
     ;                                        (span { `class: "juno-menu-item" `style: "" } "File")))

    (defglobal resource_loader_button (file_picker_button "" load_files))    
    (set_style [["position" "absolute"]
                ["top" "-100px"]
                ["left" "-100px"]
                ["width" "1px"]
                ["height" "1px"]] resource_loader_button)
    
    (-> (get_by_id "body") `appendChild resource_loader_button)
       
    (defvalue $root_controls [])
    
    
    ;; the root container which controls are added to..
    (defglobal juno_container
      (div { `style: "height: inherit; width: inherit; position: relative; overflow:hidden;" }))

    
    
    
    (attach_event_listener juno_container `click
                           (fn (e)
                             (progn
                              (defvar menu (get_by_id `cmenu))
                              (when menu (-> menu `remove)))))
    
    (set_prop *env_config*.export
	      `save_path
	      nil)
            
    (attach_event_listener juno_container
                           `focusin
                           (fn (e)
                             (process_focus_chain e)))

    (-> (get_by_id "body") `appendChild juno_container)

    ;; initialize or rehydrate the controls
    (if (== (length *serialized_controls*) 0)
      (progn       
       (console.log "initializing control surface")
       (defglobal $repl (browser_repl { `name: "Juno REPL" }))
       (= scratch_editor
          (buffer_editor "*scratch*" "user" [ `*scratch* ] `juno))

       (push *main_menu*
             [ "File" (fn ()
                        [["New Editor" [["Juno Lisp" (fn (e) (new_buffer { `type: "juno" }))]
                                        ["Javascript" (fn (e) (new_buffer { `type: "javascript" })) ]
                                        ["CSS" (fn (e) (new_buffer { `type: "css" })) ]
                                        ["Text" (fn (e) (new_buffer { `type: "text" })) ]
                                        ["JSON" (fn (e) (new_buffer { `type: "json" }))]]]
                         ["Save Environment" (fn (e) (save_control_image)) ]
                         ["Load Resource" (fn (e) (-> resource_loader_button `click)) ]])])
                         
       
       (push *main_menu*            
             ["View" gen_view_menu])
       (push *main_menu*
             ["Layout"
               gen_layout_menu])
       
       (push $root_controls
             (app_header [(app_menu [ `*main_menu* ])]
                         { `app_title: "Seedling" }))
       (setq page_frame ;; or surface which can be named in the upper right or middle
             (control_container nil {                                     
                                     `root_frame: true
                                     }))

       
       (set_prop *key_bindings*.global
                 "open_new_buffer" {
                                    `win: "Ctrl-Enter"
                                    `mac: "Ctrl-Enter"
                                    `description: "New Juno Buffer"
                                    `exec: (fn () (new_buffer { type: "juno" }))
                                     })
                 
       (-> juno_container
           `append page_frame.view)

       (-> page_frame `initialize)
       
       (-> page_frame `set_content 0
           (split_view_vertical scratch_editor
                                $repl))
       
       (console.log "initializer: *last_top_frame*: " *last_top_frame*)
       
       (push $root_controls page_frame)
       ;; the holding tank contains the controls  that are still needed but not
       ;; presently displayed 
       (push $root_controls (control_holding_tank [] {}))
       
       (-> scratch_editor
           `set_evaluator_control $repl)
       
       (when (blank? (prop *env_config*.export `save_prefix))
         (set_prop *env_config*.export
                   `save_prefix
                   "seedling"))
       
       (-> juno_container
           `append page_frame.view)       
       (-> page_frame `initialize))
      (progn     
       (console.log "serialized controls: " *serialized_controls*)
       (rehydrate_controls juno_container *serialized_controls*)))
    
    (default_focus)
    ;; setup key bindings
    (set_prop *key_bindings*
              `active
              {})  ;; reset out and copy
    (for_each (desc (values (prop *key_bindings* `global)))
       (progn
        (set_prop *key_bindings*.active
                  desc.mac ;; TODO: Needs to be adjusted for windows (needs dynamic os lookup)
                  (prop desc `exec))))
    (attach_event_listener juno_container
                           `keyup
                           (fn (e)
                             (progn
                              (handle_event e)
                              (defvar kcode (get_key_code e))                             
                              (aif (prop *key_bindings*.active kcode)
                                   (it))                                   
                              (when *log_key_events* (console.log "key_up: " e)))))

    (defun core/rlog (`& vals)
      (progn
       (for_each (`v (or vals []))
          (-> $repl `log v))
       nil))
    
  (notify (+ "Hello " *namespace* ))
  true))





