
;; main browser initialization file - initializes the user browser environment
;; after the browser_workspace has setup the underlying environment

(defglobal main_menu_button nil) ;; placeholders 
(defglobal resource_loader_button nil)
(defglobal juno_container nil)
(defglobal repl_editor nil)
(defglobal *scratch* ";; *scratch* buffer\n\n")
(defglobal *key_bindings* {
                           repl:{}
                           buffer_editor:{}
                           })


(set_prop *key_bindings*.repl          
          `history_next_entry { win: "Ctrl-Alt-n" mac: "Ctrl-Alt-n" }                                                               
          `history_prior_entry { win: "Ctrl-Alt-p" mac: "Ctrl-Alt-p" })
                              
          
  
;; $controls is the list of global controls such as editors and views
;; putting $ as a prefix indicates to the environment that it is not
;; to be saved as part of the image.  It must be rebuilt on initialization
;; since it contains live stateful objects.
(console.log "browser_initializer running")
(defglobal $controls nil)

(defun make_menu (for_element menu_items options)
  (let
      ((menu_items menu_items)
       (for_element for_element)
       (pos nil)
       (disappear_timer nil)
       (view nil))
    (aif (get_by_id "cmenu")
         (-> it `remove))
    (setq view
          (div { `id: `cmenu `class: "juno-menu" `style: "z-index: 30" }
               (div {  `class: "pure-menu pure-menu-horizontal"  }               
                    (ul { `class: "pure-menu-list" }                 
                        (map (fn (item idx)                     
                               (if item
                                 (li { `idx: idx `class: "pure-list-item" } (a { `idx: idx  `href: "#" `class: "pure-menu-link" } item.0))
                                 []))
                             (or menu_items []))))))
       
      (when for_element
        (setq pos
              (-> for_element `getBoundingClientRect))
        (set_style [["top" (+ "" (Math.max 0 pos.bottom) "px") ]
                    ["left" (+ "" (Math.max pos.left 0) "px") ]] view)
        (console.log "make_menu: found element at: " pos))
    (attach_event_listener view
                           `click
                           (fn (e)
                             (progn
                              (defvar idx (-> e.srcElement `getAttribute `idx))
                              (defvar item (prop menu_items idx))
                             
                              (console.log "clicked item: " idx item item.1)
                               (when item
                                 (item.1 e))
                               (-> view `remove))))
    (setTimeout
     (fn ()
       (progn
        (attach_event_listener view
                               `mouseleave
                               (function (e)
                                         (progn
                                          (when disappear_timer
                                            (clearTimeout disappear_timer))
                                          (= disappear_timer (setTimeout (fn ()
                                                                           (progn
                                                                            (console.log "removed view")
                                                                            (-> view `remove)
                                                                            (= disappear_timer nil)))
                                                                         500)))))
        (attach_event_listener view
                               `mouseenter
                               (function (e)
                                         (when disappear_timer
                                           (clearTimeout disappear_timer)
                                           (= disappear_timer nil))))))
     500) ;; delay a little before adding the timeout so we don't accidentally hover over it 
    (if options.do_not_attach
      view
      (progn       
       (-> (get_by_id "body") `appendChild view)
       (console.log "appended view" view)
       view))))

(defun request_user_input (prompt type options)
  (new Promise (fn (resolve reject)                 
                 (let
                     ((user_input (if options.input
                                    options.input
                                    (input { `type: (or type "text") })))
                      (ok_button (button { `class: "pure-button-primary" `style: "float:right" } "OK"))
                      (cancel_button (button  "Cancel"))
                      (dwin (dialog prompt                                    
                                    (br)
                                    user_input
                                    (br)
                                    (div { `class: "pure-button-group" `role: "group" }
                                         cancel_button
                                         ok_button))))
                   (attach_event_listener ok_button
                                          `click
                                          (fn (e)
                                            (do                                              
                                              (resolve user_input.value)
                                              (-> dwin `remove))))
                   (attach_event_listener cancel_button
                                          `click
                                          (fn (e)
                                            (do
                                              (-> dwin `remove)
                                              (resolve nil))))
                   (-> juno_container
                       `appendChild dwin)
                   (when (is_function? dwin.showModal)
                     (-> dwin `showModal))))))
                                           
    
                     
(defun message (text)
  (rlog (div { `style: "border-left: 5px solid darkblue; padding: 5px;" } text)))

(defun error_message (text)
  (rlog (div { `style: "border-left: 5px solid red; padding: 5px;" } text)))

(defun log_error (message error_instance)
  (progn
   (error_message message)
   (console.error message)
   (when error_instance
     (when error_instance.messasge
       (error_message error_instance.message))
     (console.error error_instance))))
     

(defun load_js_file (file)
  (let
      ((fdata (try
                (read_file file { `read_as: "text" })
                (catch Error (e)
                  e)))
       (assignment_to nil)
       (error nil))
    (message (+ "found and read JS " file.name ", size: " file.size))
    (cond
      (and fdata
           (not (instanceof fdata Error)))
      (progn
       (aif (request_user_input "Enter a name for a reference to the loaded Javascript" "text")
            (do
              (= assignment_to it)              
              (try
                (progn
                 (debug)
                 (cond
                   (or (== assignment_to "global")
                       (== assignment_to "script"))
                   (-> (page_header) `append (script { `type: "text/javascript" `charset: "utf-8" }
                                                     (javascript fdata)))
                   else
                   (eval `(defglobal ,#assignment_to (javascript ,#fdata)))))
                (catch Error (e)
                  (do
                    (= error true)
                    (error_message (+ "Unable to create " assignment_to ": " e.message))
                    (console.error "ERROR: " e))))                                                    
              (when (not error)
                (message (+ "Loaded JS to " assignment_to ))))
            (notify "Entry Cancelled")))
      else
      (progn
       (rlog "Unable to read the file")
       (console.error fdata)))))

(defun embed_js_orig (name js_text) 
  (progn
   (debug)
   (-> (page_header) `append (html/script { `id: name `type: "text/javascript" `charset: "utf-8" }
                                     (javascript js_text)))   
   (eval `(defglobal ,#name (html/get_by_id ,#name)
            {
             `embedded_script: true
             }))))

(defun embed_js (name js_text) 
  (progn
   (debug)
   (eval `(-> (page_header) `append (html/script { `id: name `type: "text/javascript" `charset: "utf-8" }
                                     (javascript ,#js_text))))
   (eval `(defglobal ,#name (html/get_by_id ,#name)
            {
             `embedded_script: true
             }))))

(defun embed_js_file (file)
  (let
      ((fdata (try
                (read_file file { `read_as: "text" })
                (catch Error (e)
                  e)))
       (assignment_to nil)
       (error nil))
    (message (+ "found and read JS " file.name ", size: " file.size))
    (cond
      (and fdata
           (not (instanceof fdata Error)))
      (progn
       (aif (request_user_input "Enter a name for a reference to the loaded Javascript" "text")
            (do
              (= assignment_to it)              
              (try
                (embed_js_orig assignment_to fdata)                   
                (catch Error (e)
                  (do
                    (= error true)
                    (error_message (+ "Unable to create " assignment_to ": " e.message))
                    (console.error "ERROR: " e))))                                                    
              (when (not error)
                (message (+ "Loaded JS to " assignment_to ))))
            (notify "Entry Cancelled")))
      else
      (progn
       (rlog "Unable to read the file")
       (console.error fdata)))))

(defun load_files (files)
  (when (> files.length 0)
    (for_each (file files)
       (do
         (cond
           (== file.type "text/javascript")
           (embed_js_file file)
           (== file.type "text/plain")
           (notify "Text Resource")
           (or (ends_with? file.name ".lisp")
               (ends_with? file.name ".juno"))
           (notify "Loading lisp file"))))))


(defun make_editor (content options)
  (let
      ((options (or options {
                             `type: "juno"
                             }))
       (resize_observer nil)
       (intf {})
       (content (or content ""))
       (controls (div { `style: "display: flex; " }))
       (editor_div (div { `style: "height: calc(100% - 20px); width: 100%; overflow: hidden;" }))
       (view (div { `style: "overflow: hidden; height: calc(100% - 5px); display: inline-block; width: inherit;" }                  
                  controls
                  editor_div))      
       (perform_resize (fn ()
                         (when view.parentElement
                          ;(console.log "editor: main resize: " (prop view.parentElement `offsetWidth) (prop view.parentElement `offsetHeight))
                          (html/set_style [["width" "calc(100% - 2px)"];           (+ "" (- (prop view.parentElement `offsetWidth) 2) "px")]
                                           ["height" (+ "" (- (prop view.parentElement `offsetHeight) 10) "px")]]
                                          view)
                          (-> editor `resize)
                          )))
       (editor nil)
       (set_evaluator (fn ()
                        (when options.evaluator
                               (-> editor.commands `addCommand
                                   {
                                    `name: "execute"
                                    `bindKey: { `win: "Shift-Enter" `mac: "Shift-Enter" }
                                    `exec: (function (editor)
                                                     (let
                                                         ((val nil)
                                                          (copytext (if options.repl_mode
                                                                      (-> editor `getValue)
                                                                      (-> editor `getCopyText))))
                                                       (if (blank? copytext)
                                                         (if (not options.repl_mode)
                                                           (notify (dtext "Please highlight text to evaluate")))
                                                         (try
                                                           (options.evaluator copytext)
                                                           (catch Error (e)
                                                             (progn
                                                              (notify (+ (dtext "Unhandled error") ": " e.message ))
                                                              (console.error e)))))))
                                    }))))
       (initialize_editor (fn ()
                            (progn
                             (setq editor
                                   (ace.edit editor_div))
                             (set_evaluator)
                             (when options.on_save
                               (-> editor.commands `addCommand
                                   {
                                    `name: "save"
                                    `bindKey: { `win: "Ctrl-s" `mac: "Command-s" }
                                    `exec: (function (editor)
                                                     (options.on_save (-> editor `getValue)))
                                    }))

                             
                             
                             (when (is_array? options.commands)
                               (for_each (command options.commands)
                                  (do
                                    (-> editor.commands `addCommand
                                        command))))
                                              
                             (when options.on_focus
                               (-> editor `on `focus options.on_focus))
                             (when options.on_blur
                               (-> editor `on `blur options.on_blur))
                             (when options.read_only
                               (-> editor `setReadOnly true))
                             (-> editor.session `setUseSoftTabs true)
                             (-> editor `setOptions {
                                   `enableBasicAutocompletion: true
                                   `enableLiveAutocompletion: true
                                   `showFoldWidgets: true
                                   `fontFamily: "Roboto Mono"                  
                                   })
                             (-> editor.session `setUseWorker true)
                             (-> editor `setShowFoldWidgets true)
                             (cond
                               (== options.type "juno")
                               (-> editor.session `setMode "ace/mode/juno")
                               (== options.type "javascript")
                               (-> editor.session `setMode "ace/mode/javascript")
                               (== options.type "css")
                               (-> editor.session `setMode "ace/mode/css"))
                             (console.log "editor initialized: content: " (subtype content) content)                                                          
                             (-> editor `setValue content -1)
                             
                             (when options.on_change
                               (-> editor `on `change (function (val)
                                                                (options.on_change editor val))))                             
                             (-> editor `resize true)                             
                             (set_prop intf `editor editor)                             
                             ))))       
    
    (if (not (is_symbol? `$ace_editor))
      (throw TypeError "$ace_editor symbol not found, and is required for this editor."))
    
    (when (is_element? options.command_bar)
      (-> controls `prepend options.command_bar))
      
    (= resize_observer (new ResizeObserver perform_resize))
    (= intf
       {
        `view: view
        `editor: editor
        `set: (fn (text)
                (-> editor `setValue text))
        `get: (fn (text)
                (-> editor `getValue))
        `set_evaluator: (fn (new_evaluator)
                          (when (is_function? new_evaluator)
                            (set_prop options
                                      `evaluator
                                      new_evaluator)
                            (set_evaluator)))
        `get_evaluator: (fn ()
                          options.evaluator)
        `save: (function ()
                         (options.on_save (-> editor `getValue)))                 
        `options: options
        `initialize: (fn ()
                       (when view.parentElement
                         (console.log "editor: performing initialization")
                         (-> resize_observer `observe view.parentElement)
                         (initialize_editor)
                         ))
        })))
               
(defun show_file_menu ()
  (let
      ((view nil))
    
    (setq view
          (make_menu main_menu_button
                     [["Save Environment" (fn (e) (save_image)) ]
                      ["Load Resource" (fn (e) (-> resource_loader_button `click)) ]
                      ["Style CSS" (fn (e) (notify "View Site CSS"))]
                      ]))))   
    

(defun select_evaluator ()
  (let
      ((idx -1)
       (dups (new Set))
       (new_name nil)
       (selected_idx nil)
       (available (reduce (control $controls)
                          (when control.evaluate
                            (if (-> dups `has (or control.name "Untitled"))
                              (progn
                               (= new_name (+ (or control.name "Untitled")
                                             "-" idx))
                               (-> dups `add new_name)
                               [ (inc idx) new_name
                                 control ])
                              (progn
                               (-> dups `add control.name)
                               [ (inc idx) control.name control ])))))
       (selection_box (select { }
                              (map (fn (v)
                                     (option { `value: v.0 } v.1))
                                     (or available [])))))
    (= selected_idx
       (request_user_input (dtext "Select an available evaluator")
                           nil
                           { input: selection_box }))
    (when selected_idx
        (prop (prop available selected_idx) 2))))
  

(defun buffer_editor (title namespace path_to_value mode options)
  (let
      ((nseval (if (not (blank? namespace))
                 (-> Environment `get_namespace_handle namespace)
                 Environment))
       (title_span (span { `class: "juno-title" } title))
       (evaluator (cond (and (is_object? options.evaluator)
                             (is_function? options.evaluator.evaluate))
                        options.evaluator.evaluate
                        (is_function? options.evaluator)
                        options.evaluator))
                                                
       (evaluator_span (span { `class: "juno-evaluator" `title: (dtext "Name of the evaluator assigned to this buffer") } "-"))
       (buffer_commands_button (button { `title: "Buffer Commands" } "⋯"))
       (is_dirty? false)
       (command_bar (or options.command_bar
                        (div { `class: "juno-buffer-bar" }
                             buffer_commands_button
                             title_span                                                             
                             (span { `title: "Namespace" `class: "juno-namespace" `style: "display:inline-block; padding-left: 30px; padding-right: 5px;" } nseval.namespace)
                             evaluator_span
                             (if options.read_only
                               (span { `title: "This buffer doesn't allow editing" `style: "padding-left: 5px; padding-right: 5px;" } (dtext "Locked"))
                               ())
                             
                             (span { `class: "juno-mode" `title: "Current Editing Mode" `style: "float: right; margin-right: 15px; display: inline-block; padding-left: 5px; padding-right: 5px;" } mode))))      
       (init_value (resolve_path path_to_value nseval.global_ctx.scope))
       (on_save (fn (value)
                  (progn
                   (try
                     (progn
                      (set_path path_to_value nseval.global_ctx.scope
                                value)
                      (remove_class "juno-needs-save" title_span)
                      (= is_dirty? false)
                      (notify (+ "Set " title)))
                     (catch Error (`e)
                       (progn
                        (log_error (+ (dtext "Unable to save buffer")
                                      " "
                                      title)
                                   e)))))))
                     
       (edit_control (make_editor (if (is_string? init_value)
                                    init_value
                                    "")                                  
                                  {
                                   type: mode
                                   command_bar: command_bar
                                   on_focus: (fn ()
                                               (progn
                                                (console.log "focused editor.")
                                                (add_class "juno-focused" title_span)))
                                   on_blur: (fn ()
                                              (remove_class "juno-focused" title_span))
                                   on_save: on_save
                                   read_only: options.read_only
                                   on_change: (function (editor val)
                                                        (progn
                                                         (when (not is_dirty?)
                                                           (= is_dirty? true)
                                                           (add_class "juno-needs-save" title_span))
                                                         (when options.on_change
                                                           (-> options.on_change editor val))))
                                   evaluator: evaluator                                   
                                   }))
       (set_evaluator_control (fn (control)
                                (if control.evaluate
                                  (progn
                                   (-> edit_control `set_evaluator control.evaluate)
                                   (if control.name
                                     (set_prop evaluator_span
                                               `innerText
                                               (+ "⭢ " control.name)))))))
       (select_my_evaluator (fn ()
                        (aif (select_evaluator)
                             (progn
                              (set_evaluator_control it)
                              (notify (+ (dtext "Evaluator set to ") it.name)))))))
                            
    
    (console.log "buffer_editor: init_value: " init_value path_to_value nseval)
    (attach_event_listener buffer_commands_button
                           `click
                           (fn (e)
                             (progn
                              (handle_event e)
                              (make_menu buffer_commands_button
                                                           [(when path_to_value
                                                              [(+ (dtext "Save to") " " (last path_to_value))
                                                               (fn (e) (-> edit_control `save))])
                                                            [(dtext "Select Evaluator")
                                                             select_my_evaluator]]
                                                           ))))
                              
                              
                                          
                                            
    (set_prop edit_control
              `set_evaluator_control
              set_evaluator_control)
    edit_control))


(defun log_view (options)
  (let
      ((output_container (div {   `style: "font-size: 0.9em; height: calc(100% - 20px); overflow: scroll; display: flex; flex-direction: column-reverse; width: 100%; vertical-align:bottom; " } ))
       (clear_button (button (dtext "Clear")))
       (title_span (span { `class: "juno-title" } (if options.title options.title "Unnamed")))
       (control_status (div {  `class: "juno-buffer-bar" }
                            title_span
                            clear_button))
       (view (div { `style: "overflow: hidden; margin: 0px; padding: 0px; height: 100%; width: 100%;" }
                  control_status
                  output_container))
       (add_result (fn (result command_text error_state)
                     (progn
                      (when (not (eq nil command_text))
                        (-> output_container
                            `prepend
                            (div { style:"border-top: 1px solid #C0C0C0; padding: 5px; margin-top: 1px; background: #F8F6F6; width: calc(100% - 10px); display: inline-block; " }
                                      (code { `style: "font-style: italic; color: darkblue;" }
                                                 command_text))))
                      (-> output_container
                          `prepend
                          (div { `style: "padding: 5px; margin-top: 0px; background: #F8F6F6; width: calc(100% - 10px); display: inline-block; " }
                                    (cond
                                      (is_element? result)
                                      result
                                      (is_number? result)
                                      (html/code { `style: " color: green;" }
                                                 result)
                                      (or (== true result)
                                          (== false result))
                                      (html/code { `style: " color: orange;" }
                                                 result)
                                      (is_function? result)
                                      (html/code { `style: " color: darkblue;" } "Function: "
                                                 (if result.name result.name "anonymous"))
                                      
                                      (and (is_array? result)
                                           (instanceof result.0 Error))
                                      (html/pre { `style: " color: darkred;" } "ERROR: "
                                                (subtype result.0)
                                                "\n"
                                                result.0.message)
                                      (or error_state
                                          (instanceof result Error))
                                      (html/pre { `style: " color: darkred;" } "ERROR: "
                                                (subtype result)
                                                "\n"
                                                result.message)
                                      (and (is_array? result)
                                           result.0.error)
                                      (html/pre { `style: " color: darkred;" }                                                 
                                                (JSON.stringify result nil 3 ))
                                           
                                      else
                                      (html/pre { `style: "" } (JSON.stringify result nil 3 )))))
                      (when (> output_container.children.length (or options.max_entries 100))
                        (-> (last output_container.children)
                            `remove))
                      (set_prop output_container
                                `scrollTop
                                output_container.offsetHeight)
                      result)))                                                               
       (interf {}))
    (attach_event_listener clear_button
                           `click
                           (fn ()
                             (-> output_container `replaceChildren)))
    (set_prop interf
              `view view
              `append add_result              
              `clear (fn ()
                       (-> output_container `clear))
              `options options)
    interf))


   

(defun browser_repl (options)
  (let
      ((name options.name)
       (output_control (log_view { `title: name }))
       (resize_observer nil)                                                                                            
       (current_env Environment)
       (error_state nil)
       (initialized false)
       (intf nil)
       (history (if (is_array? options.history)
                  options.history
                  []))
       (push_history (fn (lisp_text)
                       (progn
                        (push history
                              lisp_text)
                        (= history_idx (- history.length 1))
                        (when (> history.length (or options.max_history_size
                                                    50))
                          (take history)))))
       (history_idx 0) 
       (history_prior_entry (fn ()
                              (progn
                               (dec history_idx)                               
                               (when (< history_idx 0)
                                 (= history_idx (- history.length 1)))
                               (-> input_container `set (prop history history_idx)))))
       (history_next_entry (fn ()
                              (progn
                               (inc history_idx)                               
                               (when (>= history_idx history.length)
                                 (= history_idx 0))
                               (-> input_container `set (prop history history_idx)))))
       (clear_output (fn ()
                       (-> output_control `clear)))
       (repl_key_bindings (function ()
                                    (map (function (kb)
                                             (destructuring_bind (command_name bindings)
                                                 kb
                                                {
                                                 `name: command_name
                                                 `bindKey: bindings
                                                 `exec: (function (editor)
                                                                  (-> intf command_name editor))
                                                 }))                                                      
                                         (or (pairs *key_bindings*.repl) []))))
       (evaluator (fn (lisp_text no_eval)
                    (let
                        ((result nil))
                      (setq error_state nil)
                      (setq current_env (-> Environment `get_namespace_handle (current_namespace)))                      
                      (try
                        (= result (if no_eval
                                    lisp_text
                                    (-> current_env `evaluate lisp_text)))
                        (catch Error (ex)
                          (do
                            (= error_state true)
                            (= result ex))))
                      (console.log "<-" result)
                      (-> output_control `append result lisp_text error_state)
                      (if (not error_state)
                        (-> input_container `set "")))))
                             
       (input_container (make_editor 
                                   ""                                  
                                  {
                                   type: "juno"                                                                                                                             
                                   on_change: (function (editor val)
                                                        (progn
                                                         true))
                                   repl_mode: true
                                   evaluator: (fn (lisp_text no_eval)
                                                (progn
                                                 (push_history lisp_text)
                                                 (evaluator lisp_text no_eval)))                                                 
                                   commands: (repl_key_bindings)
                                   }))

       (sview (split_view_horizontal
                                 output_control
                                 input_container
                                 { `ratio: 0.7 } ))  ;; 80/20 top-bottom
       
       (juno_container sview.view)
       
       (initialize (fn ()
                     (progn
                      (if initialized
                        (evaluator (div { `style: "display: flex padding: 5px" } "WARNING: REPL already initialized") true)
                        (progn
                         (= initialized true)                                                 
                         (-> output_control `append (html/div { `style: "display: flex padding: 5px" }                
                                              (html/span { `style: "font-weight: bold; display: inline-block;" } "Juno REPL")
                                              (html/span { `style: "display: inline-block; margin-left: 10px;" }
                                                         "Version: " Environment.build_version   )))
                         (-> output_control `append (html/div "Namespace: " (current_namespace)))))))))
    (= intf {
             `view: juno_container
             `options: options
             `name: name
             `input_container: input_container
             `history_next_entry: history_next_entry
             `history_prior_entry: history_prior_entry
             `clear_output: clear_output
             `initialize: initialize
             `output_container: output_control.view
             `log: (fn (val)
                     (-> output_control `append val))
             `evaluate: (fn (lisp_text no_eval)
                          (evaluator lisp_text no_eval))
             })
    intf))




(defun user/*initializer* ()
  (let
      ((header nil)       
       (scripts (-> (page_header) `querySelectorAll "script[id]"))        
       (embeds  nil)       
       (initial_split nil)
       (repl_split nil))
                                                               
    (console.log "user/*initializer is running." )
   
    (defglobal main_menu_button (li  { `class: "juno-menu-header" }
                                             (span { `class: "juno-menu-item" `style: "" } "File")))

    (defglobal resource_loader_button (file_picker_button "" load_files))    
    (set_style [["position" "absolute"]
                ["top" "-100px"]
                ["left" "-100px"]
                ["width" "1px"]
                ["height" "1px"]] resource_loader_button)
    
    (-> (get_by_id "body") `appendChild resource_loader_button)

    (unless (is_symbol? `*global_repl_history*)
            (defglobal *global_repl_history* []))
    
    (defglobal $repl (browser_repl { `name: "Global REPL" `history: *global_repl_history* }))
    (defglobal $controls [])
    (push $controls
          $repl)
    
    (defglobal juno_container
      (div { `style: "height: inherit; width: inherit; position: relative; overflow:hidden;" }))
    
     
    (setq header (-> document `querySelector "header"))

    (-> header `appendChild (span { `class: "juno-header" } "Seedling" ))
    (-> header `appendChild (ul { `class: "pure-menu-list" `style: "margin-left: 10px;" }
                                main_menu_button))
    
   

    (attach_event_listener juno_container `click
                           (fn (e)
                             (progn
                              (defvar menu (get_by_id `cmenu))
                              (when menu (-> menu `remove)))))
    
    (set_prop *env_config*.export
	      `save_path
	      nil)
        
    (attach_event_listener main_menu_button
			      `click
			      (fn (e)
				(show_file_menu)))

    (-> (get_by_id "body") `appendChild juno_container)
    
    (push $controls
          (buffer_editor "*scratch*" "user" [ `*scratch* ] `juno))
        
 
    (setq initial_split
          (split_view_vertical (last $controls)
                               $repl))

    (-> juno_container
        `append initial_split.view)
            
    (console.log "*initializer: calling initial_split: initializer")
    (debug)
    (-> initial_split `initialize)
    (-> (last $controls)
        `set_evaluator_control $repl)
    (when (blank? (prop *env_config*.export `save_prefix))
      (set_prop *env_config*.export
                `save_prefix
                "seedling"))
  (notify (+ "Hello " *namespace* ))
  true))





