
;; main browser initialization file - initializes the user browser environment
;; after the browser_workspace has setup the underlying environment

(defglobal main_menu_button nil) ;; placeholders 
(defglobal resource_loader_button nil)
(defglobal juno_container nil)
(defglobal repl_editor nil)
(defglobal *scratch* ";; *scratch* buffer\n\n")
(defvalue *key_bindings* {
                           repl:{}
                           editor:{}
                           global:{}
                           active: {}
                           })



(defvalue *main_menu* [])
(defvalue *serialized_controls* [])

(defparameter core/$current_control nil)

;; the controls at the top level of the view
(defparameter core/$root_controls [])

(defparameter core/*system_repl* nil)

(console.log "browser_initializer running")

;; the global pointer to the control which has focus
;; nil if there are no focus points or values.

(defparameter core/is_served? (not (blank? (resolve_path [ `location `hostname ] window))))
(defparameter filesystem {})
(defparameter *last_focus* nil)
(defparameter *last_top_frame* nil)
(defparameter *app_menu_control* nil)
(defparameter *log_key_events* false)

(defparameter *whitespace_regexp* (new RegExp "\\\\s" `g))

(defparameter TokenIterator (function () true)) ;; filled in by the first editor

(defparameter
    *editor_themes*
    (reduce (included_lib (or *env_config*.included_libraries []))
        (aif (starts_with? "theme" included_lib)
            (second (split_by "-" (first (split_by "." included_lib)))))))

(set_prop *key_bindings*.repl          
          `history_next_entry { win: "Ctrl-Alt-n" mac: "Ctrl-Alt-n" }                                                               
          `history_prior_entry { win: "Ctrl-Alt-p" mac: "Ctrl-Alt-p" })

(create_css_entry "td.juno-obj-to-dom-key"
                  [["vertical-align" "top"]
                   ["color" "#881280"]
                   ["text-align" "right"]
                   ["font-weight" "bold"]
                   ["padding-right" "5px"]])





;;(create_css_entry "span.juno-value"
 ;;                 [["display" "inline-block"]])
   
;;(create_css_entry "li.juno-array-item"
;;                  [["list-style" "decimal"]])   
 
;; for determining keycodes
(defun get_operating_platform ()
    (if (contains? "Macintosh" navigator.userAgent)
        "mac"
        "win"))
      

(defun_sync value_to_dom (val options _path)
  (let 
      ((classes "juno-value juno-type-")
       (options (or options {}))
       (elem nil)
       (_path (or _path [] ))
       (lpath (function () (join "~" _path))))
    (declare (function array_to_dom obj_to_dom function_to_dom)
             (global array_to_dom obj_to_dom function_to_dom))
    (= elem
       (cond 
         (is_array? val)
         (array_to_dom val options _path)
         (is_element? val)
         (progn
          (if val.parentElement
            (details
             (summary { `lpath: (lpath) `class: (+ classes "view") `tabindex:0 } (+ (sub_type val) " "))
             (span { `tabindex: 0 `style: "font-family: var(--main-app-font)" } "[ RENDERED ELEMENT ]"))
            val))
         (is_regex? val)
         (span { `lpath: (lpath) `tabindex: 0  `class: (+ classes "regexp") } (-> val `toString))
         (is_string? val)
         (if (starts_with? "=:" val)
           (span { `lpath: (lpath) `tabindex: 0  `class: (+ classes "symbol") } (JSON.stringify val))
           (span { `lpath: (lpath) `tabindex: 0 `class: (+ classes "string") } (JSON.stringify val)))
         (instanceof val Error)
         (details (summary { `class: (+ classes "error") } 
                           (span { `tabindex: 0 `class: (+ classes "error") `style: "margin-left: 5px; font-style: italic;" } val.name " " val.message))
          (if val.details  ;; there is a details rider on this error from the compiler, print it
              (value_to_dom val.details)
              (progn
                 (defvar tmp (pre { `tabindex: 0 `class: (+ classes "error") }))
                 (set_prop tmp `innerHTML (join "\n" (rest (split_by "\n" val.stack))))
                 tmp)))
         (is_function? val)
         (function_to_dom val options _path)
         (is_object? val)
         (obj_to_dom val options _path)          
         else
         (span { `lpath: (lpath) `tabindex: 0 `class: (+ classes (lowercase (sub_type val))) } val)))
    elem))  

(defun_sync function_to_dom (val options _path)
  (let
      ((_path (or _path []))
       (options (or options {}))
       (detail_elem nil)
       (expanded false)
       (ftype (lowercase (subtype val)))
       (expansion_elem nil)
       (lpath (function () (join "~" _path)))
       (classes (+"juno-value juno-type-" ftype))
       (render_function (function ()
                                  (pre  { `lpath: (lpath)  `tabindex: 0 `class: "juno-value juno-type-code" } (-> val `toString)))))
    (assert (is_function? val))
    (= detail_elem
       (details (summary { `tabindex: 0 `lpath: (lpath) `class: classes }
                        (span { `lpath: (lpath)
                               `class: classes
                               `style: "margin-left: 5px; font-style: italic;" }
                              (aif (fn_signature val)
                                   (if (== it.type "class")
                                     (+ "class " it.name)                                            
                                     (+ (if (== it.type "async")
                                          "(fn ("                                            
                                          "(function (")
                                        (join " " it.args)
                                        "))")))))
                (= expansion_elem (span { `class: "juno-in-expansion" } (+ (dtext "Opening") "...")))))
    (attach_event_listener detail_elem
                                `toggle
                                (fn (e)
                                    (unless expanded
                                     (= expanded true)
                                     (-> expansion_elem `replaceWith (render_function))
                                     (= render_function nil))))
    detail_elem))
    
                
       
       
       

(defun_sync array_to_dom (arr options _path)
    (let
        ((total_len arr.length)
         (_path (or _path []))
         (lpath (function () (join "~" _path)))
         (options (or options {}))
         (expanded false)
         (expansion_mode false)
         (detail_elem nil)
         (expansion_elem nil)
         (idx -1)
         (segment_size 10)
         (new_row_elem [])
         (render_array (function ()
                           (ol { `lpath: (lpath) `start: 0 `class: "juno-type-array" } 
                             (progn 
                                (for_each (val arr)
                                    (progn
                                        (inc idx)
                                        (li { `class: "juno-array-item" } 
                                            (value_to_dom val options (conj _path [idx])))))))))
         (row_elem []))
      (assert (is_array? arr))
      (when (or (> _path.length 2)
                (> arr.length (or options.expansion_length 30)))
        (= expansion_mode true))
            
      (= detail_elem 
         (details (+ { `class: "juno-type-array" }
                      (if (and (== _path.length 0)
                              (not expansion_mode))
                      { `open: true }
                      {}))
                 (summary { `lpath: (lpath)  `tabindex: 0 }  "Array [" total_len "] ")
                 (if expansion_mode
                     (= expansion_elem (span { `class: "juno-in-expansion" } (+ (dtext "Opening") "...")))
                     (render_array))))
     (when expansion_mode
         (attach_event_listener detail_elem
                                `toggle
                                (fn (e)
                                    (unless expanded
                                     (= expanded true)
                                     (-> expansion_elem `replaceWith (render_array))
                                     (= render_array nil)))))
     detail_elem))
           
(defun_sync obj_to_dom (obj options _path)
  (let
      ((options (or options {}))
       (classes "juno-value juno-type-")
       (detail_elem nil)
       (expanded false)
       (expansion_elem nil)
       (expansion_mode false)
       (get_pairs (if options.include_prototypes
                    pairs*
                    pairs))
       (render_table (function () 
                         (table
                            (tbody
                             (for_each (keyval (get_pairs obj))
                                       (destructuring_bind (key value)
                                                           keyval
                                                           (tr 
                                                            (td {  `class: "juno-obj-to-dom-key" } key)
                                                            (td { `class: "juno-obj-to-dom-value" } 
                                                                (value_to_dom value options (conj _path [ key ] ))))))))))
       (_path (or _path []))
       (lpath (function () (join "~" _path))))
    (declare (function get_pairs))
    (when (or (eq nil options.visited)
              (< _path.length 2))
           (set_prop options
                     `visited (new Set)))
    
    (if (-> options.visited `has obj)
        (span { `lpath: (lpath) `tabindex: 0 `class: "juno-value juno-obj-to-dom" } "[CIRCULAR]")
        (cond
          (== (length obj) 0)
          (span { `lpath: (lpath) `tabindex: 0 `class: "juno-value juno-obj-to-dom" } "Object {}")
          else
          (progn
           (-> options.visited `add obj)    
           (when (> _path.length 2)
             (= expansion_mode true))
           (= detail_elem 
              (details (+ {  `class: "juno-obj-to-dom" }
                          (if (== _path.length 0)
                            { `open: true }
                            {}))
                       (summary { `lpath: (lpath) `class: "juno-obj-to-dom" } obj.constructor.name)
                       (if expansion_mode
                         (= expansion_elem (span { `class: "juno-in-expansion" } (+ (dtext "Opening") "...")))
                         (render_table))))
           (when expansion_mode
             (attach_event_listener detail_elem
                                    `toggle
                                    (fn (e) 
                                      (unless expanded
                                              (= expanded true)
                                              (-> expansion_elem `replaceWith (render_table))
                                              (= render_table nil)))))
           detail_elem)))))




(defun copy_text_to_clipboard (text)
        (if text
           (let ((temp (textarea { `style: "position: absolute; top: -100px; left: -200px;"  } )))
               (-> (get_by_id "body") `append temp)
               (set_prop temp
                         `value
                         text)
               (-> temp `select)
               (-> temp `setSelectionRange 0 999999)
               (-> document `execCommand "copy")
               (-> temp `remove)
               true
            )
            false)
        { `usage: ["text:string"]
          `description:"Copies the provided textual argument to the system clipboard.  It cannot copy more complex types due to security limitations of browser sandboxed code."
          `tags: ["env" "copy" "clipboard" "ui"]
        } )


(defun_sync get_keybinding (category command)
   (aif (resolve_path [category command] *key_bindings*)
        it
        nil)
   {
       description: (+ "Given a category, such as `editor or `global and a command name, "
                        "returns the object with the defined key binding data or nil")
       usage: ["category:string" "command:string"]
       tags: ["key" "binding" "global" "sequence"]
    })

(defun_sync to_ace_keybinding (name keybinding_object fx_to_call)
   { name: name
     bindKey: { win: keybinding_object.win mac: keybinding_object.mac }
     exec: (or fx_to_call keybinding_object.exec) }
   {
       description: (+ "Given a Juno keybinding object with an exec function or an override "
                       "function as the third argument,  returns a keybinding object in a "
                       "format that can be used with the Ace Editor.")
       usage: ["name:string" "keybinding_object:object" "fx_to_call:function"]
       tags: ["key" "binding" "Ace" "editor" "command"]
   })

(defun_sync editor_key_bindings (editor)
   (resolve_path [`commands `commandKeyBinding ] editor)
   {
       `description: "Returns current key bindings for the provided ACE editor object."
       `usage: ["editor:object"]
       `tags: ["bindings" "key" "controls"]
   })

(defun_sync dispatch_event(event_obj)
  ;(console.log "dispatch_event: " event_obj)
  true)

(defun edit_mode_for_extension (ext)
   (or (resolve_path [ `editor `extensions_to_mode ext ] *env_config*)
       ext)
   {
       `description: (+ "Maps a file extension (with no period as a prefix) to an editor mode using the " 
                        "*env_config*~editor~extensions_to_mode lookup object. "
                        "If the file extension is found in the lookup, it will return the value, "
                        "otherwise it will return the provided extension back unchanged.")
       `usage: ["ext:string"]
       `tags: ["extension" "files" "type" "mode" "edit" "editor" ]
   })

(defun *help_menu_function* ()
  [["No Help Installed" (fn () false) ]])


(defun log (`& args)
   (progn
      (apply console.log args)
      (aif (-> Environment `get_global "*system_repl*" nil)
           (progn
              (-> it `log (apply div { `style: "display: flex;" } 
                           (for_each (val args)
                              (div { `style: "padding-right: 10px" } (value_to_dom val)))))))
      nil)
   {
       `description: "Logs arguments to the console and the current *system_repl* output.  Returns nil."
       `usage: ["arg0:*" "argN:*"]
       `tags: ["log" "console" "values" "display"]
   })

(defun_sync clear_log ()
   (aif (and *last_focus*
             (prop *last_focus* `clear_output)
             *last_focus*)
        (progn
           (setTimeout (fn ()
                          (-> it `clear_output))
                       5)
           nil))
   {
     `description: "Clears the REPL that is currently focused."
     `usage: []
     `tags: ["log" "console" "clear" "output" "display"]
     })

(defun_sync decorative_usage (symbol_data namespace suppress_type)
  (let
      ((val (if (is_string? symbol_data)
                (cond
                   (starts_with? "(" symbol_data)
                   (-> symbol_data `substr 1)
                   (starts_with? "[" symbol_data)
                   (-> symbol_data `substr 1)
                   else
                   symbol_data)
                symbol_data.name))
       (show_type (function ()
                     (span { `style: "margin-left: 15px; font-style: italic" 
                             `class: (+ "juno-type-" (lowercase (or description.type "")))
                             }
                         (cond 
                            description.macro
                            "Macro"
                            description.type
                            (if suppress_type [] 
                                description.type)))))
       (metadata (if (and (is_object? symbol_data)
                          namespace
                          (not symbol_data.require_ns))
                     [list symbol_data]
                     (meta_for_symbol (trim val) true)))
       
       (description (if (is_object? symbol_data)
                        symbol_data
                        (if namespace
                           (first (reduce_sync (v metadata)
                                     (when (== v.namespace namespace)
                                        v)))
                           (first (or metadata [])))))
       (view nil)
       (is_symbol_binding (if (and description.require_ns
                                   (is_array? description.initializer)
                                   (== description.initializer.0 (quote pend_load)))
                              true
                              false))
       (rval nil))
     
      (when (and is_symbol_binding
                 (is_object? description))
       (set_prop description
          `usage
          (prop (first (reduce_sync (v metadata)
                                    (when (== v.namespace description.require_ns)
                                       v)))
                `usage)))
      (= rval
         (cond
            (is_array? description.usage)
            (div { `style: "display: inline-block"} "("
                 (flatten [(span { `class: "juno-operator-name" `style: "font-weight: bold;" } val)
                           (for_each (arg description.usage)
                              (destructuring_bind (arg_name arg_type arg_needed)
                                 (split_by ":" arg)
                                 (= arg_type (or arg_type ""))
                                 (span { `class: (+ "juno-type-" (if (starts_with? "?" arg_type)
                                                                     (lowercase (or (chop_front arg_type) ""))
                                                                     (lowercase arg_type))
                                                    " juno-arg-name") `title: arg_type
                                                `style: (if (== arg_needed "required") "text-decoration: underline" "") } arg_name ":" arg_type)
                                 ))])
                 ")" (show_type))
            (is_string? description.fn_args)
            (div { `style: "display: inline-block"} "("
                 (span { `class: "juno-operator-name" `style: "font-weight: bold;" } val)
                 (for_each (arg_name (split_by " " (chop (rest description.fn_args))))
                    (span { `class: "juno-arg-name" } arg_name))
                 ")" (show_type))
            
            else
            nil))
      rval)
  {
    `usage: ["symbol:string|object" "namespace:?string" "suppress_type:?boolean"]
    `description: (+ "Given a symbol name as a string or an object metadata value (as from describe), returns a DOM element of the usage information.  "
                     "If the usage metadata is defined for the symbol it will use that, otherwise "
                     "if the symbol is a function and has fn_args defined, that content will be returned "
                     "in a DOM element.  Used by the editor to display usage information. ")
    `tags: [ `usage `editor `formatting `help `assist ]
    })

(defun unpack_description (description)
   (let
      ((desc (eval description))
       (rr (new RegExp "<-" `g))
       (subsections []))
       (for_each (seg (split_by "<br>" desc))
          (when (is_string? seg)
             (= seg (replace rr "\\u{279C}"  seg))
             (map (fn (comp i)
                     (if (== 1 (% i 2))
                         (push subsections
                            (pre comp))
                         (push subsections
                            (p comp))))
                  (split_by "%%%" seg))))
       (div
          subsections))
    {
       `usage: ["description:text"]
       `description: "Given a marked up description text, builds the output format for the browser."
       `tags: [ `usage `help `assist `formatted `markup ]
   })

(defun format_help (meta_obj)
   (let
      ((is_symbol_binding (if (and meta_obj.require_ns
                                   (is_array? meta_obj.initializer)
                                   (== meta_obj.initializer.0 (quote pend_load)))
                              true
                              false))
       (imported_usage (first (if is_symbol_binding
                                  (reduce  (v (meta_for_symbol meta_obj.name true))
                                     (when (== v.namespace meta_obj.require_ns)
                                        v))
                                  []))))
      (when imported_usage
         (set_prop meta_obj
            `usage
            (prop imported_usage `usage))
         (set_prop meta_obj
            `tags
            (prop imported_usage `tags)))
            
            
      
      (div { `style: "width: calc(100% - 20px);" }
           (h3 (span { `style: "color: var(--namespace-color); " } meta_obj.namespace ) "/" meta_obj.name
               (if meta_obj.macro
                  (span { `style: "float: right; margin-right: 20px; " } "Macro")
                  (span { `title: "Type" `style: "float: right" `class: (+ "juno-type-" (lowercase meta_obj.type)) } meta_obj.type)))
           (hr { `class: "LightHR" })
           (cond
              (and (contains? `unction meta_obj.type)
                   meta_obj.usage)
              [(h4 "Usage")
               (decorative_usage meta_obj meta_obj.namespace true)]
              (contains? `unction meta_obj.type)
              [(h4 "Arguments")
               meta_obj.fn_args]
              else
              [])
           (if (or meta_obj.description
                   is_symbol_binding)
               [(h4 "Description")
                (if is_symbol_binding
                   (p
                      (div { } "This is a bound symbol into " (span { `style: "color: var(--namespace-color); " }  meta_obj.require_ns)
                           " to " (join " " meta_obj.requires) ".  For more information refer to the core/use_symbols macro and to " (join " " meta_obj.requires) ".")
                      (br))
                   (unpack_description meta_obj.description))]
                [])
              
              (if meta_obj.tags
                 [(h4 "Tags")
                  (for_each (`sym meta_obj.tags)
                     (span {  `style: "margin-right: 5px; padding: 5px;border: 1px solid var(--main-accent-line-hover)"} sym ))]
                 [])
              (if meta_obj.requires
                 [(h4 "Requires")
                  (for_each (`sym (sort meta_obj.requires))
                     (span { `class: (+ "juno-type-" (lowercase (or (prop (describe sym) `type) ""))) `style: "padding: 5px;"} sym ))]
                 []) ))
   {
     `description: (+ "Render object definitions to html.  Given a path "
                      "to Environment.definitions, or the output of the "
                      "describe function, returns a DOM element.")
     `usage: ["meta_obj:object"]
     `tags: [`help `? `usage `info `man `manual ]
     })


(defmacro ? (symname)
   `(let
       ((results (describe ,#(if (starts_with? "=:" symname)
                                 (-> symname `substr 2)
                                 symname) true)))
       (for_each (`meta_obj (or results []))
          (format_help meta_obj)
          ))
   {
       `description: "Given a quoted symbol as an argument, the function returns a formatted manual page for the provided symbol."
       `usage: ["name:quoted_symbol"]
       `tags:["help" "assistance" "man" "usage" "info"]
   })

(defun_sync find_last_paren (editor pos)
   (try
      (let
         ((pos  (or pos (-> editor `getCursorPosition)))
          (stream (indirect_new TokenIterator editor.session pos.row pos.column))
          (done false)
          (depth 0)
          (t nil)
          (comps nil)
          (calc_depth (function (val)
                          (progn
                            (= comps (split_by "" val))
                            (while (> comps.length 0)
                              (progn
                                 (= t (pop comps))          
                               (cond 
                                  (or (== t ")")
                                      (== t "]"))
                                  (inc depth)
                                  (or (== t "(")
                                      (== t "["))
                                  (dec depth)))))))
          (start nil)
          (token nil))
         (while (and (not done)
                     (not start))
            (progn
               (= token (-> stream `getCurrentToken))
               (when (== token.type "keyword")
                  (calc_depth token.value))
               (if (eq token nil)
                   (progn
                      (= done true)
                      (break))
                   (if (and (== token.type "keyword")
                            (or (== token.value.0 "(")
                                (== token.value.0 "[")))
                      (progn
                         (if (<= depth 0)
                             (progn
                                (= start { row: (-> stream `getCurrentTokenRow)
                                               column: (-> stream `getCurrentTokenColumn) })
                                (= done true)
                                (break))))))
                       
               (= token (-> stream `stepBackward))))
         (when start
            (-> editor.session `getBracketRange start)))
      (catch Error (e)
         (progn
            (console.error e)
            nil))))



(defun current_controls (no_subcontrols)
  (let
     ((ctls (uniq (flatten (control_tree $root_controls))))
      (ids nil))
     (if no_subcontrols
         (progn
            (= ids (new Set))
            (reduce (ctl ctls)
               (progn
                  (unless (-> ids `has ctl.options.id)
                          (-> ids `add ctl.options.id)
                          ctl))))
         ctls)))

(defun cascade_resize (top_control)
  (control_tree (or top_control $root_controls)
                (fn (control)
                  (if control.resize
                    (-> control `resize)))))
    

(defun set_global_theme (theme_name options)
   (if (prop *global_themes* theme_name)
       (let
          ((head_elem (-> document `querySelector "head"))
           (existing (get_by_id "juno-css-theme")))
          (if existing
               (-> existing `remove))
          (-> head_elem `append
              (style { `id: "juno-css-theme" `type: "text/css" }
               (prop *global_themes* theme_name)) )
          (set_path [ `application `global_theme ] *env_config* theme_name)
          (when (and (not options.suppress_set_sub_theme)
                     (contains? theme_name *editor_themes*))
             (set_path [ `editor `default_theme ] *env_config* theme_name))
          ;; unless we are told not to, set any controls to the theme
          (unless options.suppress_cascade
              (for_each (control (current_controls))
                        (when (is_function? control.set_theme)
                          (-> control `set_theme theme_name))))
          true)
       (throw ReferenceError "Invalid theme name provided"))
   { `description: (+ "Sets the global theme to the named theme.  Global themes "
                      "values are looked for in *global_themes*.  If a key is found "
                      "in that object, the theme is installed, and the *env_config* "
                      "value is updated to reflect this choice.  Additionally, if an "
                      "editor theme is found with the same name, the default editor "
                      "theme is set as well.  Editor themes are found in the global "
                      "*editor_themes*. <br><br>"
                      "Options are as follows:<br>"
                      "suppress_set_sub_theme:boolean:false:If true, individual control "
                      "themes such as the editor theme setting will not be set as part "
                      "the global theme and will retain their existing settings and "
                      "defaults.<br>"
                      "suppress_cascade:boolean:false:If this value is true, the application "
                      "theme will change, but controls will not be told about it and will "
                      "retain their current settings as they are instantiated with.")
     `tags: ["themes" "environment" "color" "settings"]
     `usage: ["theme_name:string" "options:object"] })

(defun get_control_by_id (id)
  (let
      ((controls (current_controls))
       (ctrl nil))
    (for_each (`control controls)
              (when (== id (and control.options control.options.id))
                (= ctrl control)
                (break)))
    ctrl))

(defun get_control_by_name (name)
  (let
      ((controls (current_controls))
       (ctrl nil))
    (for_each (`control controls)
        (progn
          (when (== name control.name)
               (= ctrl control)
               (break))))
    ctrl))

(defun select_controls (predicate_func)
  (let
      ((controls (current_controls))
       (acc [])
       (ctrl nil))
    (for_each (`control controls)
        (progn
         (when (predicate_func control)
           (push acc control))))
    acc)
  {
   `description: (+ "Given a predicate function (a function that takes a "
                    "single value and returns a true or false value), tests "
                    "control by passing the control to the predicate and if "
                    "the function returns true, the control will be "
                    "returned in the array.  The function will return all "
                    "controls which tested true.")
   `usage: ["predicate_function:function"]
   `tags: ["selection" "filter" "controls"]
   })



(defun render_control_tree (controls)
   (let
      ((cell_style "border: 1px dashed var(--main-accent-line-hover);")
       (sub_style "border-right: 1px dashed var(--main-accent-line-hover); border-bottom: 1px dashed var(--main-accent-line-hover);border-top: 1px dashed var(--main-accent-line-hover);")
       (parent_style "border-left: 1px dashed var(--main-accent-line-hover); border-bottom: 1px dashed var(--main-accent-line-hover);border-top: 1px dashed var(--main-accent-line-hover);"))
      (table { `style: "vertical-align: top; margin: 5px; box-shadow: 1px 1px 4px 1px #00000060;" }
        (cond
           (is_array? controls)
           (for_each (ctl controls)
              (tr { `style: (+ "vertical-align: top;" cell_style) }
               (if (is_function? ctl.controls)
                   [ (td { `control_id: ctl.options.id 
                            style: (+ ""
                                      parent_style
                                      (if (== ctl *last_focus*)
                                          "font-weight: bold; background: var(--control-focused);"
                                          ""))
                            } (or ctl.name (+ "/" ctl.type)))
                    (td { `style: sub_style } (render_control_tree (-> ctl `controls)))]
                   (td { `control_id: ctl.options.id `colspan: 2 
                         `style: (+ "" cell_style (if (== ctl *last_focus*) "font-weight: bold; background: var(--control-focused);" "")) } 
                         (or ctl.name (+ "/" ctl.type))))))
           (is_object? controls)
           (tr { `style: "" }
            (if (is_function? controls.controls)
                [(td { `style: (if (== controls *last_focus*) "font-weight: bold; background: var(--control-focused);" "") } controls.name)
                 (td { `control_id: controls.options.id `style: cell_style } (render_control_tree (-> controls `controls)))]
                (td { `control_id: controls.options.id `colspan: 2 
                      `style: (+ "" cell_style (if (== controls *last_focus*) "font-weight: bold; background: var(--control-focused);" "")) }  
                      (or controls.name (+ "/" controls.type)))))))))

(defun holding_tank_controls ()
  (aif (get_control_by_name "Holding Tank")
       (-> it `controls)
       []))

(defun replace_control (target_control new_control)
  (let
      ((tmp (new Object))
       (replaced_keys (new Set)))
    (assert (is_object? target_control) "Invalid object provided for old_control")
    (assert (is_object? new_control) "Invalid object provided for new_control")
    ;; first transfer the old object contents to the new location
    (for_each (k (keys target_control))
              (set_prop tmp
                        k
                        (prop target_control k)))
    
    ;; now tmp has the target_control scope references
    ;; replace the target_control with new values
    (for_each (k (keys new_control))
              (progn
               (-> replaced_keys `add k)
               (set_prop target_control
                         k
                         (prop new_control k))))
    
    ;; now remove any keys that are not in the set from the target_control
    (for_each (k (keys target_control))
              (if (not (-> replaced_keys `has k))
                (remove_prop target_control k)))
    
    ;; the objects should be swapped at this point
    ;; return tmp as the old control
    tmp))



(defun control_for_dom_element (elem)
    (let
        ((control_id nil))
       (assert (is_element? elem) "Invalid element provided")
       (= control_id (-> elem `getAttribute "control_id"))
       (aif (and control_id ;; we have a control_id, so get the control
                 (get_control_by_id control_id))
            it ;; and return it
           (cond
             (eq nil elem.parentElement)
             nil ;; at top (or cannot go up further) so return nil
              
              ;; no control found and we have a parent_element
             else
             (control_for_dom_element elem.parentElement)))))



(defun control_position (control)
    (let
       ((parent_view nil)
        (parent_control_position 0)
        (parent_control nil))
    (assert control.view "target_container isn't a control container")
    (= parent_view control.view.parentElement)
    (when parent_view
        (= parent_control (control_for_dom_element parent_view))
        (when (and parent_control
                   parent_control.controls)
           (map (fn (parental_sub_control idx)
                    (when (== parental_sub_control control)
                        (= parent_control_position idx)))
                (-> parent_control `controls))))
    (aif (and (eq parent_control nil)
              (get_control_by_name "Holding Tank"))
         (if (-> it `has_control? control)
           (= parent_control it)))
      
    {
        `child: control
        `parent: parent_control
        `child_position: parent_control_position
    }))

(defun get_container_for_control (control)
    (let
        ((existing_container nil)
         (pos nil)
         (next_parent nil)
         ;; controls should be in one of these container types
         (valid_containers ["split_view_horizontal" "split_view_vertical" "control_container" ]))
      (assert (and (is_object? control)
                   control.view)
              "Invalid control received")
      (= pos (control_position control))
      
    ;; is the child control (the control passed) a container?
      (cond 
        (and pos.child
           (contains? pos.child.type valid_containers))
        (= existing_container control)
        (and pos.parent
            (contains? pos.parent.type valid_containers))
        (= existing_container pos.parent)
        pos.parent
        (progn
          (while (and pos.parent
                      (not existing_container))
             (progn
                 (= pos (control_position pos.parent))
                 (console.log "pos is now: " pos)
                 (if (and pos.parent
                          (contains? pos.parent.type valid_containers))
                     (= existing_container pos.parent))))))
       
      existing_container))

(defun_sync is_control? (val)
  (and (is_object? val) val.type val.view val.toJSON))

(defun_sync is_top_control? (control)
  (if (is_control? control)
    (contains? control $root_controls)
    false))

(defun top_frame (control)
  (let
      ((parent nil))
    (declare (local parent))    ;; parent is a global object - shouldn't need to declare this since it has technically already been shadowed
   (assert (is_control? control) "Invalid control provided")
   (= parent (control_position control))
   (while parent.parent
       (= parent (control_position parent.parent)))
   parent.child))

(defun parents_for_control (control)
  (if (and (is_control? control)
           control.view.parentElement)
       (progn
          (defvar parent (control_for_dom_element control.view.parentElement))
          (if (is_top_control? parent)
              [parent]
              (reduce (ctl (flatten [parent (parents_for_control parent)]))
                 ctl)))
       [nil])
  {
   `description: "Given a control, returns an array containing the parent chain, with the last being the top control."
   `usage: ["control:object"]
   `tags: [ `control `controls `position `heirarchy ]
   })


(defun set_focus_to (target_control _controls)
  (let
      ((focused_list (query_all ".juno-focused"))
       (controls (or _controls
                     (reduce (c (current_controls))                        
                        (when c.on_focus                          
                          c)))))
    
    (for_each (control controls)
                 (when (and (or (eq nil target_control)
                                (not (== target_control control)))
                            (is_function? control.on_blur))
                   (-> control `on_blur)))
    
    ;; remove any focus class markers
    (when (> focused_list.length 0)
      (= focused_list (map (fn (v) v) focused_list))       
      (apply remove_class "juno-focused" focused_list))
    (for_each (control controls)
                 (when (and (or (eq nil target_control)
                                (not (== target_control control)))
                            (is_function? control.on_blur))
                   (-> control `on_blur)))
    (when (not (== *last_focus* target_control))
      (when (and *last_focus*
                 (prop *last_focus* `menu_items))
        (-> *app_menu_control* `remove_menu (or (prop *last_focus* `name)
                                                "Control"))))
      
    (if target_control
      (progn
              
       (-> target_control `on_focus)              
       (setq *last_focus* target_control)
       (setq core/$current_control *last_focus*)
       (setq *last_top_frame* (top_frame target_control))
       (when target_control.menu_items
         (-> *app_menu_control* `add_menu [ (or target_control.name
                                                "Control")
                                           target_control.menu_items ])))
             
       
      (progn
       ;(setq *last_focus* nil)
       ))))

(defun default_focus ()
  (let
      ((found_control nil))
    (control_tree $root_controls
                  (fn (control)
                      (when (and (not found_control)
                                 (is_function? control.on_focus))
                        (= found_control control))))
    (if found_control
      (progn
        (set_focus_to found_control)
        found_control)
      nil)))

(defun commands_button (id)
  (button { `control_id: id
            `class: "juno-command-button"
            `title: (dtext "Commands") } "⋯"))

(defun swap_control (target_control new_control)
  (let
      ((tmp (new Object))
       (position_details_target nil)
       (position_details_new nil)
       (holding_tank (get_control_by_name "Holding Tank"))
       (replaced_keys (new Set)))
    (assert (is_control? target_control) "Invalid control provided for old_control")
    (assert (is_control? new_control) "Invalid control provided for new_control")
    (assert (not (== target_control new_control)) "Cannot swap the same control")
    ;; get their position in the tree 
    (= position_details_target (control_position target_control))
    (= position_details_new (control_position new_control))
    (console.log "swap_control: target: " target_control "new: " new_control)
    (debug)
    (cond        
        (== position_details_target.parent holding_tank)   ;; target is in the holding tank so take the old control out and replace with new
        (progn
            (-> holding_tank `remove_control position_details_target.child)
            (-> holding_tank `add_control position_details_new.child)
            (if position_details_new.parent.set_content ;; add the targeted control to the new_controls old location (if not in holding_tank)
              (progn
               (-> position_details_new.parent `set_content position_details_new.child_position position_details_target.child)
               (cascade_resize)
               (set_focus_to position_details_target.child))
                position_details_target.child))

        (and (== position_details_target.child holding_tank)   ;; target IS the holding tank so replace the holding tank with the new value and hide the holding tank
             position_details_target.parent.set_content)
        (progn
         (-> holding_tank `remove_control position_details_new.child) ;; ensure the child is removed from the holding tank (if in it)
         (-> position_details_target.parent `set_content position_details_target.child_position position_details_new.child)         
         (-> holding_tank `hide)
         (cascade_resize)
         (set_focus_to position_details_new.child))
        
        (and position_details_target.parent.set_content
             position_details_new.parent.set_content)  ;; controls are both in the tree somewhere so swap their positions
        (progn
            (-> position_details_target.parent `set_content 
                                                position_details_target.child_position 
                                                position_details_new.child)
            (-> position_details_new.parent `set_content 
                                             position_details_new.child_position 
                                             position_details_target.child)
            (set_focus_to position_details_new.child)
            (cascade_resize)
            target_control)
        
        (and (== position_details_new.child holding_tank)
             (is_function? position_details_target.parent.set_content))
        (progn
         (-> holding_tank `add_control position_details_target.child)
         (set_prop holding_tank.options
                   `in_tree
                   true) ;; otherwise the holding tank, if not initialized, will not mount correctly and place itself somewhere in the dom after initialization
         (-> position_details_target.parent `set_content position_details_target.child_position
             position_details_new.child)
         (-> holding_tank `show)
         (cascade_resize)
         (set_focus_to position_details_new.child)
         target_control)
         
        (and (== position_details_new.parent holding_tank)   ;; new control is in the holding tank 
             (is_function? position_details_target.parent.set_content))
        (progn
            (debug)
            (-> holding_tank `remove_control position_details_new.child.options.id)
            (-> holding_tank `add_control position_details_target.child)
            (-> position_details_target.parent `set_content 
                                                position_details_target.child_position 
                                                position_details_new.child)
            (set_focus_to position_details_new.child)
            (cascade_resize)
            position_details_new.child)
        
        (and (eq nil position_details_new.parent)  ;; this is a new control without a parent
             position_details_target.parent.set_content)
        (progn  ;; add to the holding tank the target and put the new in the targets old place..
            (-> position_details_target.parent `set_content 
                                                position_details_target.child_position 
                                                position_details_new.child)
            (-> holding_tank `add_control position_details_target.child)
            (cascade_resize)
            (set_focus_to position_details_new.child))
        (and (-> holding_tank `has_control? position_details_new.child)
             position_details_target.parent.set_content)
        (progn
           (-> position_details_target.parent `set_content
              position_details_target.child_position
              position_details_new.child)
           ;; remove from the holding tank
           (-> holding_tank `remove_control position_details_new.child)
           (-> holding_tank `add_control position_details_target.child)
           (cascade_resize)
           (set_focus_to position_details_new.child))
        
        else
        (progn
            (notify "Unhandled swap condition - see console")
            (log "unhandled swap position: target: " position_details_target "new: " position_details_new)
            nil))))                                




;; container view operation
;; given a command performs an operation on the control structure

;; definitions
;; target_control - the control that is to be impacted with a change 
;; target_control_container - the container of the target_control
;; new_control - an optional new control to be inserted into the control tree
;; options - options for the given command

(defun container_view_operation (command target_control new_control options)
   (let
      ((orig_target target_control)
       (target_control (control_for_dom_element target_control.view)) ;; ensure we have the correct handle to the impaced control since this could be a sub_control given to us
       (position_details nil) ;; the structure that holds the position details of the operation
       (holding_tank (get_control_by_name "Holding Tank"))
       (tmpview nil)
       (confirmed true)
       (new_container nil)
       (split_view_parent nil))
      
      (assert target_control "Unable to find the target control")
      (assert holding_tank "Unable to find the holding tank")
      
      (= position_details (control_position target_control))
      (console.log "container_view_operation: original_target: " orig_target)
      (console.log "container_view_operation: computed_target: " target_control)
      (console.log "container_view_operation: command: " command "position_details: " position_details "new_control: " new_control)
      (when (and (== position_details.parent nil) ;; top level control
                 (not (== position_details.child holding_tank))
                 (is_top_control? position_details.child))
         (= target_control (first (-> position_details.child `controls)))
         (= position_details (control_position target_control))
         (console.log "container_view_operation: shifted down: target_control was a top control: " position_details))
      
      (if (and (== command "destroy")
               (is_function? target_control.on_destroy))
          (= confirmed (-> target_control `on_destroy)))
      (console.log "container_view_operation: confirmed: " confirmed)
      (if confirmed
          ;; if the parent structure is nil in position_details, then we are at the root
          (cond
             (or (== command "hide")
                 (== command "destroy"))
             (progn
                (cond
                   ;; the control is not a root control if it has a parent
                   (or (== position_details.parent.type "split_view_vertical")
                       (== position_details.parent.type "split_view_horizontal"))
                   (progn
                      ;; grab the child control to keep displaying, ie. not the one in the child_position
                      (set_prop position_details
                         `child_to_display
                         (if (== position_details.child_position 0)
                             (second (-> position_details.parent `controls))
                             (first (-> position_details.parent `controls))))
                      
                      ;; we need to know the split views parent since we are going to remove the split view
                      ;; and hoist the remaining child to display into the parent structure in place of the
                      ;; split_view - not an even swap because the existing split_view is retired
                      
                      (= split_view_parent (control_position position_details.parent))
                      (assert split_view_parent.parent.set_content "Unable to set the content of the split view parent")
                      (console.log "container_view_operation: split_view_parent: " split_view_parent)
                      (console.log "container_view_operation: position_details: " position_details)
                      (when (not options.dry_run)
                         ;; elevate the child to keep to the targeted_control container's position in it's parent
                         (-> split_view_parent.parent `set_content split_view_parent.child_position position_details.child_to_display)
                         
                         ;; set the child to hide in non displayed controls
                         (cond
                            (and (== command "hide")
                                 (not (== target_control holding_tank)))
                            (-> holding_tank
                                `add_control
                                target_control)
                            (and (== command "destroy")
                                 (is_function? target_control.destroy))
                            (-> target_control `destroy)))
                      (cascade_resize)
                      (default_focus)
                      true)
                   (and (== position_details.parent holding_tank)
                        (== command "destroy"))
                   (progn
                      (-> holding_tank `remove_control position_details.child.options.id)
                      (if (is_function? position_details.child.destroy)
                        (-> position_details.child `destroy))
                      (default_focus))
                   else
                   (progn
                      (notify "Cannot hide a single control - try replacing")
                      position_details)))
             
             (== command "replace")
             (progn
                (swap_control target_control new_control)
                true)
             
             (== command "split_left")
             (progn
                (assert (is_control? new_control) "Invalid control provided for the replacement control")
                (assert (not (== position_details.parent holding_tank)) "Cannot split the holding tank")
                (= tmpview (div { } "Placeholder"))
                ;; get it off the dom
                (-> position_details.child.view `replaceWith
                    tmpview)
                (= new_container (split_view_vertical new_control position_details.child (or options { `ratio: 0.3 } )))
                (-> holding_tank `remove_control new_control)
                (-> position_details.parent `set_content position_details.child_position new_container)
                (cascade_resize)
                true)
             (== command "split_right")
             (progn
                (assert (is_control? new_control) "Invalid control provided for the replacement control")
                (assert (not (== position_details.parent holding_tank)) "Cannot split the holding tank")
                (= tmpview (div { } "Placeholder"))
                ;; get it off the dom
                (-> position_details.child.view `replaceWith
                    tmpview)
                (= new_container (split_view_vertical position_details.child new_control  (or options { `ratio: 0.7 } )))
                (-> holding_tank `remove_control new_control)
                (-> position_details.parent `set_content position_details.child_position new_container)
                
                (cascade_resize)
                true)
             (== command "split_above")
             (progn
                (assert (is_control? new_control) "Invalid control provided for the replacement control")
                (assert (not (== position_details.parent holding_tank)) "Cannot split the holding tank")
                (= tmpview (div { } "Placeholder"))
                ;; get it off the dom
                (-> position_details.child.view `replaceWith
                    tmpview)
                (= new_container (split_view_horizontal new_control position_details.child (or options { `ratio: 0.3 } )))
                (-> holding_tank `remove_control new_control)
                (-> position_details.parent `set_content position_details.child_position new_container)
                (cascade_resize)
                true)
             (== command "split_below")
             (progn
                (assert (is_control? new_control) "Invalid control provided for the replacement control")
                (assert (not (== position_details.parent holding_tank)) "Cannot split the holding tank")
                (= tmpview (div { } "Placeholder"))
                ;; get it off the dom
                (-> position_details.child.view `replaceWith
                    tmpview)
                (= new_container (split_view_horizontal  position_details.child new_control (or options { `ratio: 0.7 } )))
                (-> holding_tank `remove_control new_control)
                (-> position_details.parent `set_content position_details.child_position new_container)
                (cascade_resize)
                true)
             else
             (progn
                (notify (+ "container_view_operation: unknown command: " command))
                position_details))
          (progn
             false))))
  
  



    
(defmacro place_control(placement `& control_def)
   (let
      ((where_map {
                   `top: "split_above"
                   `below: "split_below"
                   `left: "split_left"
                   `right: "split_right"
                   `replace: "replace"  })
       (where (aif (prop where_map placement)
                   it
                   "split_right")))
       
  `(let
      ((target_container  (control_position (top_frame (default_focus)))))
     (when target_container.child 
       (= target_container (first (-> target_container.child `controls)))
       (container_view_operation ,#where target_container
                                   ,@control_def)))))
              
(defun show_control (control_to_show)
  (let
      ((control_to_show (cond 
                          (and (is_string? control_to_show)
                               (get_control_by_name control_to_show))
                          (get_control_by_name control_to_show)
                          (and (is_string? control_to_show)
                               (get_control_by_id control_to_show))
                          (get_control_by_id control_to_show)
                          (is_control? control_to_show)
                          control_to_show))
       (target_control (if *last_focus*
                         *last_focus*
                           nil)))
    (cond 
       (and target_control control_to_show)
       (progn
          (swap_control target_control control_to_show)
          (set_focus_to control_to_show)
          (sleep 0.1)
          
          true)
       control_to_show
       (progn
          (place_control "right" control_to_show)
          (sleep 0.1)
          (set_focus_to control_to_show)
          true)
       else
       (progn 
          (notify (dtext "The requested control to display wasn't found."))
          false)))
  {
    `description: (+ "Provided a control name, id or the control object itself, "
                     "will display the control, adjusting the layout as needed. "
                     "By default the control referenced by *last_focus* is swapped with the new one, "
                     "but if that isn't possible, the view is split and the new control is placed to "
                     "the right.<br>"
                     "Returns true if successful, otherwise a notification is "
                     "delivered that the control is not found, and false is "
                     "returned.")
    `tags: ["controls" "control" "display" "hiding" "holding_tank" "ui"]
    `usage: ["target:string|object"]
    })



(defun hide_control (target destroy?)
   (let
      ((control (cond 
                   (and (is_string? target)
                        (get_control_by_name target))
                   (get_control_by_name target)
                   (and (is_string? target)
                        (get_control_by_id target))
                   (get_control_by_id target)
                   (is_control? target)
                   target)))
      (if control
          (progn
             (container_view_operation (if destroy? "destroy" "hide") control nil)
             true)
          (progn
             (notify "Control not found")
             false)))
   {
       `description: (+ "Provided a control name, id or the control object itself, "
                        "will hide the control, adjusting the layout as needed. "
                        "Returns true if successful, otherwise a notification is "
                        "delivered that the control is not found, and false is "
                        "returned.  If destroy? is true, the control is removed from "
                        "the tree and destroyed.")
       `tags: ["controls" "control" "display" "hiding" "holding_tank" "ui"]
       `usage: ["target:string|object" "destroy?:?boolean"]
   })

(defun destroy_control (target)
  (hide_control target true)
  {
   `description: (+ "Provided a control name, id or the control object itself, "
                    "will hide the control, adjusting the layout as needed. "
                    "Returns true if successful, otherwise a notification is "
                    "delivered that the control is not found, and false is "
                    "returned. ")
   `tags: ["controls" "control" "display" "destroy" "remove" "holding_tank" "ui"]
   `usage: ["target:string|object"]
   })

(defun process_focus_chain (e originator_container)
  (progn
   (handle_event e)   
   (when e.path
     (let
         ((target_control nil)
          (controls (reduce (c (current_controls))                        
                        (when c.on_focus                          
                          c)))
          (focused_list (query_all ".juno-focused")))

      
       (for_each (elem e.path)
          (progn
           (for_each (control controls)
                     (when (== elem control.view)
                       (= target_control control)
                       (break)))
           (when target_control
             (break))))
       
       (set_focus_to target_control controls)))))


    



(defun menu_tree (items options _path)
  (let
      ((options (either options { `flat_index: 0 }))
       (path (either _path []))
       (disappear_timer nil)
       (min_width (+ "min-width: " (or options.min_width 300) "px;"))
       (id (either options.id "cmenu"))  
       (active_menu_item nil)
       (menu_element
        (fn (idx text `& args)
          (let
              ((view (li {  `class: "pure-list-item"                                         
                          `style: (+ (if (> args.length 0)
                                         "position: relative;"
                                         "")
                                     min_width)
                          }
                         (a { 
                             `idx: idx
                             `path: (join "~" (conj path idx))
                             `href: "#"
                             `class: "pure-menu-link" 
                             `style: ""
                             }
                            (if (== args.length 0)
                              (span { `path: (join "~" (conj path idx)) `class: "juno-menu-text" } text)
                              [(span { `path: (join "~" (conj path idx)) `class: "juno-menu-text" } text)
                               (span { `class: "juno-menu-submenu" } "❯")]))
                         args))
               (timer nil))
            (if (== args.length 0)
              (progn
                 (attach_event_listener view
                    `mouseenter
                    (fn (e)
                       (apply remove_class "juno-menu-selected" e.srcElement.parentElement.children)))
                 view)
              (progn
               (attach_event_listener view
                  `mouseenter
                  (fn (e)
                     (do
                        (= active_menu_item e.srcElement)
                        (apply remove_class "juno-menu-selected" e.srcElement.parentElement.children)
                        (add_class "juno-menu-selected" e.srcElement)
                        (when timer
                           (clearTimeout timer))
                        (= timer
                           (setTimeout (fn ()
                                          (set_style [["display" "inline-block" ]
                                                      ["position" "absolute"]
                                                      ["top" "0px"]
                                                      ["left" (+ "" e.srcElement.offsetWidth "px") ]]
                                                     view.children.1))
                                       150)))))
               (attach_event_listener view
                  `mouseleave
                  (fn (e)
                     (do
                        (when timer
                           (clearTimeout timer))
                        (= timer
                           (setTimeout (fn ()
                                          (progn
                                             (set_style [["display" "none"]] view.children.1)))
                                       150)))))
               
               view)))))
       (view nil))
    
    (= view
       (ul (+ {}
              { `class: (if (> path.length 0)
                             "juno-menu pure-menu-list"
                             "pure-menu-list")
                `style: (+ (if (> path.length 0)
                             "display: none;"
                             "display: inline-block;")
                           "position: relative;")  }
              (if (== path.length 0)
                { `id: id }
                {}))
                     
           (map (fn (item idx)
                  (let
                      ((text (if (is_function? item.0)
                               (item.0)
                               item.0)))
                    (set_prop options
                              `flat_index
                              (+ 1 options.flat_index))                     
                    (cond
                      (is_array? item.1)
                      (menu_element options.flat_index text (menu_tree item.1 options (conj path [ idx 1])))
                      (and (== text "--") (eq nil item.1))
                      (hr { `class: "LightHR" })
                      (is_function? item.1)
                      (menu_element idx text)
                      else
                      [])))
                items)))
    (if (> path.length 0)      
       view
      (progn
       (attach_event_listener view
                              `click
                              (fn (e)
                                (let
                                    ((path (-> e.srcElement `getAttribute "path"))
                                     (idx (-> e.srcElement `getAttribute "idx"))
                                     (target (if path
                                               (resolve_path (split_by "~" path) items))))
                                  (handle_event e)
                                  (-> view `remove)
                                  (aif (get_by_id "cmenu")
                                       (-> it `remove))
                                  (when (is_function? options.on_select)
                                     (options.on_select path))
                                  (sleep 0.01) ;; disconnect and move to back of the event loop for the call
                                  (when (and target
                                             (is_function? target.1))
                                    (target.1 e target.2))
                                  )))
       (setTimeout (fn ()
                     (progn
                      (attach_event_listener view
                                             `mouseleave
                                             (function (e)
                                                       (progn
                                                        (when disappear_timer
                                                          (clearTimeout disappear_timer))
                                                        (= disappear_timer (setTimeout (fn ()
                                                                                         (progn
                                                                                          (-> view `remove)
                                                                                          (when (is_function? options.on_select)
                                                                                             (options.on_select nil))
                                                                                          (= disappear_timer nil)))
                                                                                       (or *env_config*.application.menu_timeout
                                                                                           options.menu_timeout
                                                                                           2500))))))
                      (attach_event_listener view
                                             `mouseenter
                                             (function (e)
                                                       (when disappear_timer
                                                         (clearTimeout disappear_timer)
                                                         (= disappear_timer nil))))))
                   700) ;; delay a little before adding the timeout so we don't accidentally hover over it 
       {
        `view: view
        `toJSON: (function ()
                           `(menu_tree ,#items ,#options))
        `type: "menu_tree"
        }))))

(defun make_menu (for_element menu_items options)
  (let
      ((menu_items menu_items)
       (for_element for_element)
       (pos nil)
       (mtree nil)
       (disappear_timer nil)       
                                        
       (view nil))
    (aif (get_by_id "cmenu")
         (-> it `remove))
    (setq mtree
          (menu_tree menu_items options))
    (setq view
          mtree.view)
    (add_class "juno-menu" view)
    (when for_element
      (setq pos
            (-> for_element `getBoundingClientRect))
      (set_style [["top" (+ "" (Math.max 0 pos.bottom) "px") ]
                  ["left" (+ "" (Math.max pos.left 0) "px") ]
                  ["position" "absolute"]
                  ["z-index" "30"]]
                  view)
      (console.log "make_menu: found element at: " pos))
    
     
    (if options.do_not_attach
      view
      (progn       
       (-> (get_by_id "body") `appendChild view)
       (console.log "appended view" view)
       view))))

(defun_sync get_key_code (e)
  (let
      ((k []))
      (when e.metaKey
         (push k "Command"))
      (when e.ctrlKey
         (push k "Ctrl"))
      (when e.altKey
         (push k "Alt"))
    (when e.shiftKey
      (push k "Shift"))
    (unless (contains? e.key [ "Shift" "Control" "Alt" "Meta" ])      
            ;; normalize to the printed key characters on the keyboard
            (push k (cond 
                       (starts_with? "Key" e.code)
                       (-> e.code `substr 3)
                       (starts_with? "Digit" e.code)
                       (-> e.code `substr 5)
                       else
                       e.code)))
    (if (> k.length 0)
        (join "-" k)
        e.code))
  {
      `description: (+ "Given a key event, returns a text description of the set of characters in a normalized order "
                       "for matching keybinding handlers.  If no modifier keys (Control, Alt, Command, or Shift), returns "
                       "the direct code value from the key event.  If a modifier or modifiers are also pressed, will "
                       "return a composite value with the following order of priority, where if a key with a lower "
                       "prority is pressed, it will appear first in the returned value:<br>"
                       "Command - 0 <br>"
                       "Ctrl - 1<br>"
                       "Alt - 2<br>"
                       "Shift - 3 <br>"
                       "For example if the user is pressing both the Shift and the Control key and the 'A' key, the "
                       "returned value will be \"Ctrl-Shift-A\" as the priority value for 'Control' is 1 and the "
                       "priority value for 'Shift' is 3.  Note that whenever a modifier is pressed, the value of "
                       "the pressed key will be always uppercase as the descriptor.")
      `usage: ["event:Event"]
      `tags: [ "key" "events" "binding" "keycodes" "keyboard"]
  })

(defun request_user_input (prompt type options)
  (new Promise (fn (resolve reject)                 
                 (let
                     ((user_input (if options.input
                                    options.input
                                    (input { `type: (or type "text") `style: "width: calc(100% - 15px)" })))
                      (completed false)
                      (ok_button (button { `class: "juno-primary" `style: "float:right" } (dtext "OK")))
                      (cancel_button (button { `class: "juno-secondary" }  (dtext "Cancel")))
                      (dwin (dialog { `style: "height: min-content; width: min-content;"   }
                                    (div { `class: "juno-instructions" } prompt)
                                    (br)
                                    user_input
                                    (br)
                                    (div { `class: "pure-button-group juno-control-group" `style: "margin-top: 10px;" `role: "group" }
                                         (if options.no_cancel_button
                                            []
                                            cancel_button)
                                         ok_button)))
                      (clean_up (fn (val)
                                    (when (not completed)
                                        (= completed true)
                                        (resolve val)
                                        (-> dwin `remove)))))
                   (attach_event_listener ok_button
                                          `click
                                          (fn (e)
                                            (progn  
                                              (handle_event e)
                                              (clean_up user_input.value))))
                    ;; don't immediately react to keyup so as not to immediately react
                    ;; in certain scenarios
                   (setTimeout (fn ()
                                       (attach_event_listener user_input
                                          `keyup
                                          (fn (e)
                                            (cond 
                                              (== e.key "Enter")
                                              (progn
                                                (handle_event e)
                                                (clean_up user_input.value)
                                              )))))
                                250); 
                   (attach_event_listener cancel_button
                                          `click
                                          (fn (e)
                                            (progn
                                                (handle_event e)
                                                (clean_up))))
                                              
                   (attach_event_listener dwin
                                          `close
                                          (fn (e)
                                              (clean_up nil)))
                   
                   (when options.default_value
                       (set_prop user_input
                                 `value
                                 options.default_value))
                                              
                   (-> juno_container
                       `appendChild dwin)
                   (when (is_function? dwin.showModal)
                     (-> dwin `showModal)
                     (focus_to user_input))))))
                 
  
(defun alert_box (message detail)
   (request_user_input (or message "No message provided!") 
                       nil 
                       { `input: (if detail 
                                     (div detail)
                                     (span {})) 
                         `no_cancel_button: true })
   {
     `usage:[ "message:text" "detail:text|Element"]
     `description: "Creates a modal type popup dialog box which pauses the current execution flow until the OK button is clicked. The return value is undefined."
     `tags: ["alert" "popup" "modal" "box" "warn" "ui" "DOM" ]
   })
     
(defmacro alert_on_error (error_title `& forms)
   `(try
       (progn
          ,@forms)
       (catch Error (e)
          (progn
             (alert_box ,#(or error_title (dtext "Error on Operation"))
                         e.message)
             nil)))
   {
       `usage: ["error_title:text" "forms:*"]
       `description: (+ "All provided forms will be wrapped in a progn and the last value of the provided forms returned.  " 
                        "Any uncaught errors in the provided forms will be caught by this macro abd the provided " 
                        "error_title, and exception message presented to the user for acknowledgement.  On a caught error "
                        "nil will be returned to the calling code.")
       `tags: ["alert" "popup" "catch" "errors" "ui" "DOM"]
   })
          
(defun handle_save_file (control options)
  (let
      ((fname (when control
                (or (and options.no_prompt
                         (is_string? control.options.filename)
                         control.options.filename)
                    (request_user_input (dtext "Please enter a filename to save as:")
                                        "text"
                                        {
                                         `default_value: (or control.options.filename
                                                             control.name)
                                         }))))
       (rval nil))
      
    (when (and control 
               (not (blank? fname)) 
               control.get)
      (set_prop control.options
                `filename
                fname)
      (cond
        options.remote
        (try
           (progn
              (= rval (http/send_files "/save_file" (http/data_to_file fname (-> control `get))))
              (if (and rval 
                       (== rval.rval "OK"))
                  (progn
                 ;; check the results
                    (= rval rval.results)
                    (when (== rval.length 1)
                       (if control.display_context_message
                           (-> control `display_context_message (+ (dtext "Saved to") " " rval.0.filename)))
                       (dispatch_event { `command: "save_complete" `args: [ control rval.0.filename ] }))
                    rval)
                  (progn
                     (if control.display_context_message
                         (-> control `display_context_message (+ (dtext "ERROR") ":" (dtext "Cannot Save File") " " rval.message)))
                     (dispatch_event { `command: "save_error" `args: [ control rval ] })
                     rval))
              rval)
           (catch Error (e)
              (progn
                 (if control.display_context_message
                     (-> control `display_context_message (+ (dtext "ERROR") ":" (dtext "Cannot Save File") " " e.message)))
                 (dispatch_event {  `command: "save_error" `error: "true" `args: [ control e] })
                 e)))
        else
        (= rval
           (save_locally fname (-> control `get)
                         "application/text"))))    
    rval)
  {
   `usage: ["control:object" "options:?object"]
   `description: (+ "Given a control and an optional options object, will call the control's"
                    "`get method for the data value.  The user will be prompted for a filename "
                    "with the default value being either the control.options.filename or "
                    "control.options.name (in that order). The result of the save operation "
                    "is returned.")
   `tags: ["save" "file" "control"]
   })
    
                     
(defun message (text)
  (log (div { `style: "border-left: 5px solid darkblue; padding: 5px;" } text)))

(defun error_message (text)
  (log (div { `style: "border-left: 5px solid red; padding: 5px;" } text)))

(defun log_error (message error_instance)
  (progn
   (error_message message)
   (console.error message)
   (when error_instance
     (when error_instance.messasge
       (error_message error_instance.message))
     (console.error error_instance))))
     


(defun load_js_file (file)
  (let
      ((fdata (try
                (read_file file { `read_as: "text" })
                (catch Error (e)
                  e)))
       (assignment_to nil)
       (error nil))
    (message (+ "found and read JS " file.name ", size: " file.size))
    (cond
      (and fdata
           (not (instanceof fdata Error)))
      (progn
       (aif (request_user_input "Enter a name for a reference to the loaded Javascript" "text")
            (do
              (= assignment_to it)              
              (try
                (progn
                 (debug)
                 (cond
                   (or (== assignment_to "global")
                       (== assignment_to "script"))
                   (-> (page_header) `append (script { `type: "text/javascript" `charset: "utf-8" }
                                                     (javascript fdata)))
                   else
                   (eval `(defglobal ,#assignment_to (javascript ,#fdata)))))
                (catch Error (e)
                  (do
                    (= error true)
                    (error_message (+ "Unable to create " assignment_to ": " e.message))
                    (console.error "ERROR: " e))))                                                    
              (when (not error)
                (message (+ "Loaded JS to " assignment_to ))))
            (notify "Entry Cancelled")))
      else
      (progn
       (log "Unable to read the file")
       (console.error fdata)))))

(defun embed_js_orig (name js_text) 
  (progn
   (debug)
   (-> (page_header) `append (html/script { `id: name `type: "text/javascript" `charset: "utf-8" }
                                     (javascript js_text)))   
   (eval `(defglobal ,#name (html/get_by_id ,#name)
            {
             `embedded_script: true
             }))))

(defun embed_js (name js_text) 
  (progn
   (debug)
   (eval `(-> (page_header) `append (html/script { `id: name `type: "text/javascript" `charset: "utf-8" }
                                     (javascript ,#js_text))))
   (eval `(defglobal ,#name (html/get_by_id ,#name)
            {
             `embedded_script: true
             }))))

(defun embed_js_file (file)
  (let
      ((fdata (try
                (read_file file { `read_as: "text" })
                (catch Error (e)
                  e)))
       (assignment_to nil)
       (error nil))
    (message (+ "found and read JS " file.name ", size: " file.size))
    (cond
      (and fdata
           (not (instanceof fdata Error)))
      (progn
       (aif (request_user_input "Enter a name for a reference to the loaded Javascript" "text")
            (do
              (= assignment_to it)              
              (try
                (embed_js_orig assignment_to fdata)                   
                (catch Error (e)
                  (do
                    (= error true)
                    (error_message (+ "Unable to create " assignment_to ": " e.message))
                    (console.error "ERROR: " e))))                                                    
              (when (not error)
                (message (+ "Loaded JS to " assignment_to ))))
            (notify "Entry Cancelled")))
      else
      (progn
       (log "Unable to read the file")
       (console.error fdata)))))

(defun load_files (files)
  (when (> files.length 0)
    (for_each (file files)
       (do
         (cond
           (== file.type "text/javascript")
           (embed_js_file file)
           (== file.type "text/plain")
           (notify "Text Resource")
           (or (ends_with? file.name ".lisp")
               (ends_with? file.name ".juno"))
           (notify "Loading lisp file"))))))



(defun control_frame (options `& contents)
  (let
      ((has_control_bar? (and (> contents.length 1)
                              (has_class? "juno-buffer-bar" contents.0)))
       (content (if has_control_bar?
                     [(first contents)
                      (div { `class: "juno-view-content" }
                           (rest contents)) ]
                     (div { `class: "juno-view-content" }
                           (rest contents))))
       (elem (div (+ { tabindex: 0 control_id: (or options.id (generate_id "frame"))
                      class: (+  "juno-view-container"
                                  (or options.classes "")) }
                      (if options.style
                        { `style: options.style }
                        {}))
                   content)))
    (console.log "control_frame: has_control_bar: " has_control_bar? contents)
    (when (not has_control_bar?)
      (set_style [["height" "100%" ]] content))
    (when (is_array? options.events)
      (for_each (ev options.events)
                (destructuring_bind (event_type action)
                     ev
                   (console.log "making events: " event_type action)
                   (attach_event_listener elem event_type action))))
    elem)
  {
   `description: (+ "Creates and returns an element representing the external frame "
                    "of a control. The passed contents can contain a buffer bar as a "
                    "first element, which will be identified as such by having a "
                    "juno-buffer-bar class assigned to it. <br>"
                    "The passed contents (excluding the buffer bar) are wrapped in a"
                    "juno-view-content div, and the whole contents, including the optional "
                    "buffer bar element are wrapped in a juno-view-container div.<br><br>"
                    "The options are as follows: <br><br>"
                    "id:string:The assigned id for the control.<br>"
                    "style:string:A string containing css styling attributes that are assigned "
                    "to the juno-view-container div (the encompassing element).<br><br>"
                    "events:array:An array of array values in the form of pairs in the "
                    "form of [event_type:string action:fn] which are attached to the "
                    "juno-view-container element.")
   `usage: ["options:object" "elements:Elements"]
   `tags: ["ui" "controls" "control" "frame" "DOM" "Node" "element" ]
   })

(defun name_control (prefix)
  (let
      ((prefix (or prefix "Unnamed"))
       (name ""))
    (if (get_control_by_name prefix)
      (+ prefix " " (inc *view_count*))
      prefix)))




(defun symbol_browser (options)
   (let
       ((self {})
        (options (or options {}))
        (show_previews (not options.disable_preview))                                
        (id (generate_id "symbol_browser"))
        (name (name_control (or options.name "Symbol Browser")))                  
        (title_span (span { `class: "juno-title" } name))
        (path_span (span { `class: "juno-path" `style: "float: right" } ""))
        (buffer_commands_button (commands_button id))
        (stack [ ])
        (filter_span (span { `style: "margin-left: 8px; margin-right: 8px; font-family: var(--main-mono-space);" } ""))
        (filter_span_container (span { `style: "border-radius: 3px; margin-left: 10px; padding-top: 2px; padding-bottom: 2px; border: 1px solid var(--type-regexp-color);" } 
                                     (span { `style: "padding-left: 10px; padding-right: 10px; background: var(--type-regexp-color); padding-top: 2px; padding-bottom: 2px; color: wheat;" } (+ (dtext "Filter") ":"))
                                     filter_span))
        (olist_style "padding-block-start: 3px; margin-block-start: 0.2em; padding-inline-start: 2px; ")
        (li_style "")
        (control_status (div {  class: "juno-buffer-bar" }
                                buffer_commands_button
                                (cond
                                  (is_array? options.additional_elements)
                                  options.additional_elements
                                  else
                                  title_span)
                                filter_span_container
                                path_span))
        (symbol_struct (symbols_by_namespace))
        (element_for_pos (fn (pos want_parent?)
                           (let
                               ((target_col nil))                                
                             (= target_col (-> cview `querySelector (+ "[pos='" (if pos pos 0) "']")))                             
                             (cond 
                               (and want_parent? target_col)
                               target_col
                               target_col
                               (or (-> target_col `querySelector ".juno-highlighted")
                                   target_col.children.0)))))
        (filter_by_text (fn (pos text)
                            (let
                                ((elems (aif (element_for_pos pos true)
                                             it.children
                                             []))
                                 (elem nil)
                                 (num_found 0)
                                 (elem_bank_found [])
                                 (elem_bank_not_found [])
                                 (target_focus nil)
                                 ;;(remove_class "filtered-hidden" elem) (add_class "filtered-hidden" elem)
                                 (clear_it (blank? text)))
                                (if clear_it
                                    (progn
                                        (remove_class "filtered-hidden" elems)
                                        (focus_to (element_for_pos pos))
                                        false)
                                    (progn
                                        (for_each (idx (range elems.length))
                                            (progn
                                                (= elem (prop elems idx))
                                                (if (starts_with? text elem.innerText)
                                                    (push elem_bank_found elem)
                                                    (push elem_bank_not_found elem))))
                                        (cond
                                            (== elem_bank_found.length 0)
                                            false ;; do nothing
                                            (> elem_bank_found.length 0)
                                            (progn
                                                (console.log "found: " elem_bank_found.length)
                                                (for_each (elem elem_bank_found)
                                                    (remove_class "filtered-hidden" elems))
                                                (for_each (elem elem_bank_not_found)
                                                    (add_class "filtered-hidden" elem))
                                                (focus_to elem_bank_found.0)
                                                true)))))))
                                       
                                
        (filter_state {
                      chars: []
                      col_num: nil
                      })
        (show_filter_state (fn ()
                               (progn
                                   (if (> (length filter_state.chars) 0)
                                       (set_style [["opacity" "1"]] filter_span_container)
                                       (set_style [["opacity" "0"]] filter_span_container))
                                   (set_prop filter_span
                                            `innerText (join "" filter_state.chars)))))
        (clear_selector (fn (update?)
                            (progn
                                (console.log "clear_selector: filter_state: " (as_lisp filter_state))
                                (when filter_state.col_num
                                    (filter_by_text filter_state.col_num ""))
                                (set_prop filter_state
                                          `chars []
                                          `col_num nil)
                                (when update?
                                    (show_filter_state)))))
        (pop_from_selector (fn (pos)
                               (progn
                                   (if (== pos filter_state.col_num)
                                       (progn
                                           (pop filter_state.chars)
                                           (filter_by_text filter_state.col_num (join "" filter_state.chars)))
                                       (clear_selector))
                                   (show_filter_state))))
        (push_into_selector (fn (pos k)
                              (progn
                                  (defvar elems nil)
                                  (cond
                                      (eq nil filter_state.col_num)
                                      (progn
                                         (set_prop filter_state
                                                   `col_num
                                                   pos)
                                         (when (filter_by_text pos (+ (join "" filter_state.chars) k))
                                             (push filter_state.chars k)))
                                      (eq pos filter_state.col_num)
                                      (progn
                                          (when (filter_by_text pos (+ (join "" filter_state.chars) k))
                                                (push filter_state.chars k)))
                                      else
                                      (progn
                                        (push_into_selector pos k)))
                                  ;; update the displayed state of our filter 
                                  (show_filter_state)
                                  )))
                                                      
                                         
                                         
        (handle_keyup (fn (e)
                        (when (and e.srcElement
                                   (get_attribute e.srcElement "ctype"))
                          (let
                              ((elem e.srcElement)
                               (ctype (get_attribute elem "ctype"))
                               (pos (parseInt (get_attribute elem "pos")))
                               (final_pos stack.length))
                            ;(console.log "pos: " pos "press: " e)                           
                            (cond
                              (and (== e.key "ArrowUp")
                                   e.altKey)
                              (focus_to elem.parentElement.children.0)
                              (== e.key "ArrowUp")
                              (focus_to elem.previousElementSibling)
                              (== e.key "ArrowDown")
                              (focus_to elem.nextElementSibling)
                              (and (== e.key "ArrowLeft")
                                   (>= pos 0))
                              (progn
                                  (aif (element_for_pos (- pos 1))
                                   (focus_to it))
                                  (clear_selector true))
                              (== e.key "ArrowRight")
                              (progn
                                (console.log "moving to the right: " (element_for_pos (+ pos 1)))
                                (aif (element_for_pos (+ pos 1))
                                     (focus_to it)
                                     (focus_to (element_for_pos (+ pos 1) true))) ;; didn't get a standard list, it's probably a value of sort..
                                (clear_selector true))
                              (== e.key "Enter")
                              (progn
                                  (handle_event e)
                                  (handle_click e))
                              (== e.key "Backspace")
                              (pop_from_selector pos)
                              (== e.key "Tab")
                              nil
                              (> e.keyCode 47)
                              (progn
                               (push_into_selector pos e.key)
                               (console.log "filter state: " (as_lisp filter_state))))))))
                                                                                                                              
        (handle_click (fn (e)
                          (when (and e.srcElement 
                                     (get_attribute e.srcElement "ctype"))
                              (console.log "handle_click: " e.srcElement)
                              (let
                                  ((elem e.srcElement)
                                   (ctype (get_attribute elem "ctype"))
                                   (pos (get_attribute elem "pos"))
                                   (final_pos stack.length))
                                  (when pos
                                      (= pos (parseInt pos)))
                                  (clear_selector true)
                                  
                                  (console.log "handle_click: pos: " pos "final_pos:" final_pos ctype elem.innerText stack)
                                  (remove_class "juno-highlighted" e.srcElement.parentElement.children)
                                  (add_class "juno-highlighted" e.srcElement)
                                  (cond
                                     (== ctype "nspace")
                                     (progn
                                         (= stack [])
                                         (render_view e.srcElement.innerText)
                                         
                                         ;; next display the first namespace
                                         (= stack [ elem.innerText ])
                                         (render_view))
                                     (and (== ctype "sym")
                                          (== pos final_pos))
                                     (progn
                                         (push stack elem.innerText)
                                         (console.log "STACK is now: " stack)
                                         (render_view))
                                     (< pos final_pos)
                                     (progn
                                         (= stack (-> stack `slice 0 pos))
                                         (push stack elem.innerText)                                         
                                         (console.log "mid stack click: stack now: " (as_lisp stack) "view children:" (length cview.children) (range cview.children.length))
                                         (for_each (child_num (-> (range cview.children.length) `reverse))
                                            (progn
                                               (console.log "child_num: " child_num (prop cview.children child_num) (parseInt (get_attribute (prop cview.children child_num) `pos)))
                                                (when (> (parseInt (get_attribute (prop cview.children child_num) `pos)) (- stack.length 1))
                                                    (-> (prop cview.children child_num) `remove))))
                                         (render_view))                                         
                                     (== e.srcElement.tagName "LI")
                                     (progn
                                      (push stack  elem.innerText)                                 
                                      (render_view)
                                      ))))))
                            
        (cview (div { `style: "" `class: "juno-symbol-browser" }))
        (has_children? (fn (val)
                           (and (is_object? val)
                                (> (length val) 0))))
        (next_possibles (fn ()
                            (let
                               ((path (conj [ "context" "scope" ] (or (rest stack) [])))
                                (ns (first stack))
                                (idx -1)
                                (val nil))
                            (assert ns "No namespace yet - invalid stack")
                            (= val (resolve_path path (-> Environment `get_namespace_handle ns)))
                            (console.log "next_possibles: namespace:" ns path "value: " val)
                            (when options.on_select
                              (options.on_select ns (rest stack)))                            
                            (cond 
                              (is_function? val)
                              (pre { `tabindex: 0 `ctype: (subtype val) `style: "min-width: 200px; overflow: scroll; width: 100%;" }
                                   (value_to_dom val))
                              (is_array? val)                                                           
                              (for_each (symb (resolve_path path (-> Environment `get_namespace_handle ns)))
                                 (progn
                                     (inc idx)
                                     (li { `tabindex: 0 `ctype: (if (is_object? symb) "sym" (lowercase (subtype symb)))
                                       `pos: stack.length
                                       `title: (subtype symb)
                                       `class: (+ "juno-list-item " (if (has_children? symb) "juno-list-item-has-children " "") "juno-type-" (lowercase (subtype symb)))
                                      `style: li_style } idx)))
                              (is_object? val)                                                    
                              (for_each (symb (sort (pairs (resolve_path path (-> Environment `get_namespace_handle ns)))
                                                    { `key: [ 0 ] }))
                                 (li { `tabindex: 0 `ctype: (if (is_object? symb.1) "sym" (lowercase (subtype symb.1)))
                                       `pos: stack.length
                                       `title: (subtype symb.1)
                                       `class: (+ "juno-list-item " (if (has_children? symb.1) "juno-list-item-has-children " "") "juno-type-" (lowercase (subtype symb.1))) 
                                       `style: li_style } symb.0))
                                                                                   
                              (is_function? options.render_preview)
                              (let
                                  ((elem (options.render_preview)))
                                (if elem
                                  (if (get_attribute elem "ctype")
                                    elem
                                    (progn
                                     (-> elem `setAttribute `ctype "val")
                                     elem))
                                  (pre { `tabindex: 0 `ctype: "string" `style: "min-width: 200px; overflow: scroll; width: 100%;" }
                                       "The render_preview function didn't return an element as expected.  Check call.")))
                              
                              (is_string? val)
                              (pre { `tabindex: 0 `ctype: "string" `style: "min-width: 200px; overflow: scroll; width: 100%;" }
                                   val)
                              
                              else         
                              (pre { `tabindex: 0 `ctype: (subtype val) `style: "min-width: 200px;overflow: scroll; width: 100%;" }
                                 (value_to_dom val))))))

        (render_view (fn (ns_name)
                       (progn
                        (console.log "render_view: stack " stack)
                        (if (> stack.length 1)
                          (set_prop path_span
                                    `innerText (+ "[ "(join " " (rest stack )) " ]"))
                          (set_prop path_span
                                    `innerText ""))                                    
                        (clear_selector true)
                        (cond
                          (== stack.length 0) ;; initial state
                          (progn
                           (-> cview `replaceChildren
                              (ol { `pos: 0 }
                               (for_each (ns (sort (namespaces)))
                                         (li {`tabindex: 0
                                              `ctype: "nspace"
                                              `pos: 0
                                              `class: (+ "juno-list-item juno-namespace" (if (== ns ns_name) " juno-highlighted" ""))
                                              `style: li_style
                                              } ns))))
                           (focus_to (element_for_pos 0)))
                          else
                          (progn
                           (defvar next_elem (next_possibles))
                           (cond
                             (is_array? next_elem)
                             (progn
                                 (-> cview `appendChild
                                    (ol { `pos: stack.length  }
                                         next_elem))                                 
                                 (setTimeout (fn () (focus_to (element_for_pos stack.length))) 10))
                             (is_element? next_elem)
                             (progn
                              (-> cview `appendChild                                 
                                  next_elem)
                              (-> next_elem `setAttribute "pos" stack.length)                              
                              (focus_to next_elem)))
                           
                           (set_prop cview `scrollLeft (+ cview.offsetWidth 20)))))))
                                                                                                                               
                          
        (view (control_frame { `id: id  `events: [[ "click" handle_click]
                                                  [ "keyup" handle_keyup ]] }
                             control_status
                             cview))
        (resize (fn ()
                  (progn                           
                   (let
                       ((new_height (- (prop view.parentElement `offsetHeight) 20))
                        (new_width  (- (prop view.parentElement `offsetWidth) 5)))
                     (set_style [[ "width" (+ "" new_width "px") ]
                                 [ "height" (+ "" new_height "px") ]]
                                view)
                     (when options.on_resize
                       (options.on_resize self))))))
        (resize_observer (new ResizeObserver resize))
        (on_focus (fn ()
                   (progn                  
                    (add_class "juno-focused" control_status ))))
        (initialized false)
        (initialize (fn ()
                      (when (and view.parentElement
                                 (not initialized))
                        (= initialized true)                       
                        (-> resize_observer `observe view.parentElement)
                        (render_view (current_namespace))
                        (push stack (current_namespace))
                        (render_view)
                        (defglobal *sbcview* cview))))   ;; TODO: REMOVE 
        
        (to_json (function ()
                           `[symbol_browser ,#options])))

    
     (set_prop options
               `id id
               `name name)                
     (set_prop self
               `view view
               `options options
               `name name
               `type "symbol_browser"              
               `initialize initialize
               `resize resize
               `toJSON to_json
               `on_focus on_focus)
     self))

(defun symbol_chooser (prompt type options)
  (new Promise (fn (resolve reject)                 
                 (let
                     ((ns nil)
                      (target_path target_path)
                      (set_val (fn (selected_ns selected_path)
                                   (progn 
                                      (console.log "ns: " selected_ns selected_path)
                                      (= ns selected_ns )
                                      (= target_path selected_path)
                                      (cond
                                        (blank? ns)
                                        (set_disabled new_symbol_button)
                                        (not (blank? ns))
                                        (progn
                                         (set_enabled new_symbol_button)
                                         (set_prop new_symbol_button
                                                  `innerText (+ (dtext "New Global Value"))))))))
                                            
                      (new_symbol_button (button { `tabindex: 0 `title: (dtext "Create New Entry") `style: "margin-left: 8px; margin-right: 8px;  font-weight: bold; background: var(--highlight-bg-color);" } (dtext "New")))
                      (path_span (span { `tabindex: 0 `title: (dtext "Click to copy path")  `class: "juno-path" } ""))
                      (symbol_ctl (symbol_browser { 
                                                   `additional_elements: [(span { `class: "juno-title" `style: "color:var(--main-color)" } (dtext "Open A Location"))
                                                                          (span { `title: (dtext "Edit Mode") `class: "juno-mode" } (if type type  ""))
                                                                          new_symbol_button
                                                                          ] 
                                                    `on_select: set_val }))
                      (ok_button (button { `class: "juno-primary" `style: "min-width: 100px; margin-right: 20px; margin-left: 20px; float:right; font-weight: bold;" } "OK"))
                      (cancel_button (button { `style: "margin-left: 20px;" }   "Cancel"))
                      (dwin (dialog { `style: "height: 40%; width: 60%; overflow: hidden; padding: 2px;" }                                                                    
                                    (div { `style: "height: calc(100% - 50px);" }
                                         symbol_ctl.view)
                                    (br)
                                    (div { `class: "juno-button-group pure-button-group" `role: "group" }
                                         cancel_button
                                         ok_button))))
                   (attach_event_listener new_symbol_button
                                          `click
                                          (fn (e)
                                            (progn
                                             (aif (request_user_input (+ "" (dtext "Enter the name to be created in") " " ns) `text)
                                                  (progn
                                                   (-> dwin `remove)
                                                   (-> (-> Environment `get_namespace_handle ns)
                                                       `set_global it "")
                                                   (resolve { `namespace: ns `path: [ it ] }))))))
                   (attach_event_listener ok_button
                                          `click
                                          (fn (e)
                                            (do                                              
                                              (resolve {
                                                  `namespace: ns
                                                  `path: target_path
                                                  })
                                              (-> dwin `remove))))                   
                   (attach_event_listener cancel_button
                                          `click
                                          (fn (e)
                                            (do
                                              (-> dwin `remove)
                                              (resolve nil))))
                   (-> juno_container
                       `appendChild dwin)
                   (set_prop symbol_ctl.options
                      `temporary true)
                   (-> symbol_ctl `initialize)
                   (when (is_function? dwin.showModal)
                     (-> dwin `showModal))))))


(defun make_autocompletion_scores (analysis_object)
   (let
      ((result_set [])
       (keywords (try (compiler `[ true ] { `special_operators: true `env: Environment } )
                    (catch Error (e)
                       (progn
                          (log "error on compiler: " e.message)
                          (new Set)))))
       (included (new Set))
       (score 0))
      (for_each (r (sort analysis_object.allocations))
         (progn
            (-> included `add r)
            (cond
               (contains? r analysis_object.globals)
               (push result_set
                  { `value: r `score: (inc score) `meta: "local (shadowed global)" })
               else
               (push result_set
                  { `value: r `score: (inc score) `meta: "local" }))))
      (for_each (r (sort analysis_object.symbols))
         (cond
            (contains? r analysis_object.allocations)
            true ;; we already placed it 
            else
            (progn
               (-> included `add r)
               (push result_set
                  { `value: r `score: (inc score) `meta: "local?" } ))))
      (for_each (r (sort analysis_object.keywords))
         (progn
            (-> included `add r)
            (push result_set
               { `value: r `score: (inc score) `meta: "keyword" })))
      (for_each (r (sort analysis_object.globals))
         (progn
            (-> included `add r)
            (push result_set
               { `value: r `score: (inc score) `meta: "global" })))
      (for_each (r (sort analysis_object.literals))
         (progn
            (-> included `add r)
            (push result_set
               { `value: r `score: (inc score) `meta: "literal" })))
      (for_each (r (sort (to_array keywords)))
         (if (not (-> included `has r))
             (progn
                (-> included `add r)
                (push result_set
                   { `value: r `score: (inc score) `meta: "keyword" }))))
      (for_each (r (sort (to_array (all_globals))))
         (if (not (-> included `has r))
             (push result_set
                { `value: r `score: (inc score) `meta: "global" })))
      result_set)
   {
       `usage: ["analysis_object:object"]
       `description: (+ "Given the output of process_tree_symbols, returns a result_set to be provided to the Ace autocomplete callback for "
                        "suggestions for autocomplete.")
       `tags: ["editor" "analysis" "autocomplete" "session" "Ace"]
   })

(defun find_root_forms_for_buffer (buffer_text options)
   (let
      ((lines (split_by "\n" buffer_text))
       (ldat nil)
       (lnum -1)
       (running_depth_for_line 0)
       (new_depth nil)
       (last_line_max_col 0)
       (boundaries nil)
       (depth_positions [])
       (current_root_form nil))
      
      (for_each (line lines)
                (progn
                   (inc lnum)
                   (= ldat (analyze_text_line line))
                   
                   (= boundaries (sort (conj (for_each (o ldat.openers)
                                                [o 1 (prop line o) ])
                                             (for_each (c ldat.closers)
                                                [c -1 (prop line c)]))
                                       { `key: [ 0 ] }))
                   (= last_line_max_col (or (last ldat.closers) (length line)))
                   (for_each (t boundaries)
                      (progn
                         (= running_depth_for_line (+ t.1 running_depth_for_line))
                         (cond
                            (and (eq nil current_root_form)
                                    (== running_depth_for_line 1))
                            (progn
                               (= current_root_form {
                                                      `start_row: lnum
                                                      `start_col: t.0
                                                      `end_row: nil
                                                      `end_col: nil
                                                      }))
                            (and current_root_form
                                 (== running_depth_for_line 0))
                            (progn
                               (set_prop current_root_form
                                  `end_row lnum
                                  `end_col t.0)
                               (push depth_positions current_root_form)
                               (= current_root_form nil)))))))
      (if (and options.flexibility
               current_root_form
               (> running_depth_for_line 0)) ;; most likely unclosed form
          (progn
             (set_prop current_root_form
                `end_row lnum
                `end_col last_line_max_col)
             (push depth_positions current_root_form)
             (= current_root_form nil)))
      depth_positions)
   {
     description: (+ "Given a text value as a string and an optional options object, returns an array of objects, "
                      "each representing the starting and ending positions of each found form.  The returned objects "
                      "have the keys: start_row, start_col, end_row, and end_col, which will be numeric offsets "
                      "from line 0 and column 0 respectively.<br>"
                      "If an options object is given with the key flexibility set to true, then if the final "
                      "form is incomplete, will return the start to final part of the end form.")
     usage: ["text_buffer:string" "options:object"]
     tags: ["forms" "parsing" "syntax" "selection" ]
     })

(defun get_root_form_for_position (buffer_text row column flexibility_mode)
   (let
      ((root_forms (find_root_forms_for_buffer buffer_text { flexibility: (if flexibility_mode true false) } ))
       (target nil))
      (for_each (form (or root_forms []))
         (progn
            (when (and (>= row form.start_row)
                       (<= row form.end_row))
               (cond 
                  (or (and (== form.end_row form.start_row)
                           (>= column form.start_col)
                           (<= column form.end_col))
                  
                      (> (- form.end_row form.start_row) 0))
                  (progn
                     (= target form)
                     (break))))))
      target)
   {
     description: (+ "Given a text buffer, a row number (>= 0) and a column number (>= 0), returns an object that has the "
                     "position values for the enclosing form to a depth of 0.  The object returned has " 
                     "the following layout: <br>"
                     "{ start_row:int end_row:int start_col:int end_col:int }<br>"
                     "All values start at offset 0.")
     tags: ["form" "position" "selection" "text" "lisp"]
     usage: ["buffer_text:string" "row:int" "column:int" "flexibility_mode:?boolean"]
   })


(defun floating_div (contents options)
   (let
      ((close_button (button { `title: (dtext "Close") } "X"))
       (move_state nil)
       (expander_elem (div { `style: "position: absolute; right: 0px; bottom: 0px; width: 15px; height: 15px; cursor: nwse-resize; background: transparent;" }
                           ""))
       (full_block (div { `style: "z-index: 8; width: 100%; height: 100%; position: absolute; top:0px; left: 0px;" }))
       (dims nil)
       (resize_mode false)
       (max_dims {
                  `width: 0
                  `height: 0
                  })
       (body_element nil)
       (block_on (fn (e)
                    (progn
                       (= dims (-> frame `getBoundingClientRect))
                       (= body_element (get_by_id "body"))
                       (= max_dims {
                                     `width: (prop body_element `offsetWidth)
                                     `height: (prop body_element `offsetHeight) })
                       (-> body_element `appendChild full_block)
                       (= move_state {
                                       mx: e.pageX
                                       my: e.pageY
                                       fx: dims.right
                                       fy: dims.top
                                       w: dims.width
                                       h: dims.height
                                       }))))
       (control_bar (div { `class: "juno-buffer-bar" style: "cursor: grab;" }
                 close_button
                 (or options.title "")))
       (end_drag (fn (e)
                    (progn
                       (= move_state nil)
                       (= resize_mode false)
                       (if (is_function? contents.resize)
                           (-> contents `resize))
                       (-> full_block `remove))))       
       (handle_drag (fn (e)
                      (when (and move_state
                                 (== e.buttons 1))
                         (if resize_mode
                            (set_style [["width"  (+ "" (Math.max 300 (Math.min (- max_dims.width 30) (+ dims.width (- e.pageX move_state.mx)))) "px")]
                                        ["height" (+ "" (Math.max 30 (Math.min (- max_dims.height 30) (+ dims.height (- e.pageY move_state.my)))) "px")]]
                                       frame)
                            (set_style [["top"  (+ "" (Math.max 0 (Math.min (- max_dims.height 30) (+ dims.top (- e.pageY move_state.my)))) "px") ]
                                        ["left" (+ "" (Math.max 0 (Math.min (- max_dims.width 30) (+ dims.left (- e.pageX move_state.mx)))) "px") ]]
                                       frame)))))
                                   
       (frame (div { class: "juno-floating-container" 
                     style: (+ "left: " (+ 50 (random_int 10)) "%; " 
                               "top: " (+ 5 (random_int 10)) "px; "
                                (if (is_string? options.style)
                                    (+ "" options.style ";")
                                    ""))
                                  }
               (control_frame {}
                control_bar
                (cond
                   (and (is_object? contents)
                        contents.view)
                   contents.view
                   (is_element? contents)
                   contents
                   else
                   (value_to_dom contents)))
               expander_elem)))
      
      (attach_event_listener close_button
         `click
         (fn (v)
            (progn
               (when options.on_close
                  (options.on_close))
               (-> frame `remove))))
      
      (attach_event_listener control_bar
         `mousedown
         (fn (e)
            (block_on e)))
      (attach_event_listener expander_elem
         `mousedown
         (fn (e)
            (progn
               (= resize_mode true)
               (block_on e))))
      
      
      (attach_event_listener full_block
                             `mouseup
                             end_drag)
      (attach_event_listener frame
                             `mouseup
                             end_drag)
      (attach_event_listener frame
                             `mousemove
                             handle_drag)
      (attach_event_listener full_block
                             `mousemove
                             handle_drag)
      (-> (get_by_id "body") `appendChild frame)
      ;; if we have a control, initialize it if it needs it since it is 
      ;; now mounted on the DOM
      (when contents.initialize
         (-> contents `initialize))
      
      true))

(defun monitor_control_tree ()
   (let
       ((view nil)
        (title_span (span { } "Control Structure"))       
        (update_timer nil))
     (if (get_by_id `control_tree_monitor)
       (notify "Control Tree Already Showing")
       (progn
        (setTimeout (fn ()
                      (set_prop title_span
                                `innerText
                                (dtext "Click to highlight a control")))
                    4000)
        (= view (div { `id: `control_tree_monitor }
                     (render_control_tree $root_controls)))
        (attach_event_listener view
                               `click
                               (fn (e)
                                 (let
                                     ((id (-> e.srcElement `getAttribute "control_id"))
                                      (body_element (get_by_id "body"))
                                      (dims nil)
                                      (highlighter nil)
                                      (control (if id (get_control_by_id id))))
                                   (when control
                                     (when control.view
                                       (= dims (-> control.view `getBoundingClientRect))
                                       (console.log "control dims: " control.name dims)
                                       (-> body_element `appendChild
                                           (= highlighter (div { `id: "highlighter" `class: "identification" `style: (+ "z-index: 7; position: absolute; top: " dims.top "px; left: " dims.left "px; width: " (- dims.width 5) "px; height: " (- dims.height 5) "px; border: 3px dashed red;") }
                                                           "")))
                                       (setTimeout (fn ()
                                                     (do 
                                                        (aif (get_by_id "highlighter")
                                                             (-> it `remove))
                                                        (-> highlighter `remove)))
                                                   1000))))))
                                   
        (= update_timer (setInterval (fn ()
                                     (progn                                        
                                        (-> view `replaceChildren (render_control_tree $root_controls))))
                                     1000))
        (floating_div view
                      {  `title: title_span
                         `on_close: (fn ()
                                     (progn
                                      (clearInterval update_timer)))
                       })))))

  

(defun handle_lisp_format_event (val editor)
  (progn    
    (when (and (== (- val.end.row val.start.row) 1)
              (== val.action "insert"))     
       (defvar indent_string (format_lisp_line val.end.row (function (rnum) 
                                                                     (-> editor.session `getLine rnum))))
       (when indent_string
        (-> editor.session `indentRows val.end.row val.end.row indent_string)))))

(defun_sync indent_editor_line (editor row_number options)
  (if (is_number? row_number)
    (let
        ((line (-> editor.session `getLine row_number))
         (orig_line (clone line))
         (indent_string (format_lisp_line row_number
                                          (or options.get_row
                                              (function (rnum) 
                                                        (-> editor.session `getLine rnum))))))
      (console.log "indent_row: " row_number "indent_string: " indent_string line)
      (if indent_string
        (progn
         (setq line (+ "" indent_string (trim line)))
         (console.log "line at " row_number " to be replaced with: " (JSON.stringify line))
         (if options.apply
           (progn
            (-> editor.selection `clearSelection)
            (-> editor.selection `setSelectionAnchor row_number 0)
            (-> editor.selection `selectLineEnd)
            (console.log "indent_editor_line: selected line" (JSON.stringify (clone (-> editor.selection `getRange))))
            (-> editor.session `remove (-> editor.selection `getRange))
            (-> editor.selection `setSelectionAnchor row_number 0)
            (-> editor.selection `selectLineEnd)
            (console.log "indent_editor_line: selected line" (JSON.stringify (clone (-> editor.selection `getRange))))
            (-> editor.session `replace (-> editor.selection `getRange) line)
            (console.log "indent_editor_line: get_line: " (JSON.stringify (-> editor.session `getLine row_number)))
            (-> editor.selection `clearSelection)
            true)
           line))        
        line))
    (throw EvalError "invalid row_number provided to indent_row")))

(defun_sync indent_editor_selection (editor)
  (let
      ((start nil)
       (end nil)
       (selected_range (clone (-> editor.selection `getRange))))
    
    (= start selected_range.start.row)
    (= end selected_range.end.row)
    (console.log "tab: start: selected_range: " (JSON.stringify selected_range))
    (-> editor.selection `clearSelection)
    (-> editor.selection `setSelectionAnchor start 0)
    (-> editor.selection `selectTo end 0)
    (-> editor.selection `selectLineEnd)
    (console.log "tab: start: fully selected_range: " (-> editor.selection `getRange))                                                   
    (defvar lines (for_each (row_number (range_inc selected_range.start.row selected_range.end.row))
                            (-> editor.session `getLine row_number)))
    (console.log "tab: lines: pre-change: " (clone lines))
    
    (for_each (row_number (range_inc selected_range.start.row selected_range.end.row))
              (progn
               (console.log "tab: [start]: [ " selected_range.start.row selected_range.end.row " ] analyzing row: " row_number ": " (JSON.stringify (prop lines (- row_number start))))
               (set_prop lines
                         (- row_number start)
                         (indent_editor_line editor row_number
                                     { get_row: (function (rnum)
                                                          (progn
                                                           (console.log "get_row: rnum: " rnum " relative: " (- rnum start))
                                                           (cond
                                                             (and (>= rnum start)
                                                                  (< rnum end))
                                                             (prop lines
                                                                   (- rnum start))
                                                             else
                                                             (-> editor.session `getLine rnum)))) ;; not impacted by the change
                                      } ))))
    
    (console.log "tab: adjusted lines: " lines)
    (console.log "tab:     lines joined: " (join "\n" lines))
    (-> editor.session `replace (-> editor.selection `getRange) (join "\n" lines))
    (-> editor.selection `selectLineEnd)
    ;(-> editor.selection `setRange selected_range)
    (console.log "tab: reselected fixed: " (-> editor `getCopyText))))


(defun_sync select_to_current_form (editor pos)
  (if editor
    (let
        ((rng (-> editor `getSelectionRange))
         (already_selected? (if (and (== rng.start.row rng.end.row)
                                     (== rng.start.column rng.end.column))
                                false
                                true))
         (cpos (or pos 
                   (if already_selected?
                      (progn
                         (-> editor `navigateTo rng.start.row rng.start.column)
                         (-> editor `getCursorPosition))
                      (-> editor `getCursorPosition)))))
      (when cpos
        (= rng (find_last_paren editor cpos))
        (when rng
          (-> editor.selection `clearSelection)
          (-> editor.selection `setRange rng)))
      rng)
    nil)
  {
   description: (+ "Given an editor and an optional position { row column }, if possible, "
                   "selects the innermost current form (expression) in the editor and "
                   "returns the range.")
   usage: ["editor:object" "pos:?object"]
   tags: ["editor" "selection" "form" "lisp" "editing" ]
   })
          
           
(defun show_editor_keybindings (editor_control)
   (let
      ((binding_row (fn (keysequence binding)
                       (tr
                          (td keysequence)
                          (td (or binding.description
                                  (from_key binding.name)))))))
      (table { `style: "width: 100%" }
             (thead
                (tr
                   (th "Key Sequence")
                   (th "Description")))
             (tbody
                (for_each (bindpair (sort (pairs (editor_key_bindings editor_control.editor))
                                          { `key: [`0] }))
                   (destructuring_bind (keysequence binding)
                      bindpair
                      (cond
                         (is_array? binding)
                         (for_each (bindval binding)
                            (binding_row keysequence bindval))
                         (is_object? binding)
                         (binding_row keysequence binding)
                         else
                         [])))))))

(defun_sync select_root_form (editor pos)
   (if (and (is_object? editor)
            (is_object? pos))
       (let
          ((last_selection nil)
           (idx 0)
           (current_selection nil))
          ;; start with the current position
          (= current_selection (find_last_paren editor pos))
          (while (and (< idx 100)
                      current_selection
                      (or (eq nil last_selection)
                          (not (and (== last_selection.start.column current_selection.start.column)
                                    (== last_selection.start.row current_selection.start.row)
                                    (== last_selection.end.column current_selection.end.column)
                                    (== last_selection.end.row current_selection.end.row)))))
             (progn
                (inc idx)
                (= last_selection current_selection)
                (= current_selection (find_last_paren editor current_selection.start))
                ))
          (aif current_selection
             {
               `start_row: it.start.row
               `start_col: it.start.column
               `end_row: it.end.row
               `end_col: it.end.column
               })
             ))
   {
     `usage: ["editor:object" "pos:object"]
     `description: "Given an editor and a position, returns the determined root form for the position."
     `tags: ["selection" "editor" "root" "form" "position"]
     })

(defun select_to_root_form (editor pos)
   (if editor
       (let
          ((cpos (-> editor `getCursorPosition))
           (pos (if pos
                    (select_root_form editor pos)
                     (select_root_form editor cpos))))
          (when pos
             (-> editor.selection `clearSelection)
             (-> editor.selection `setSelectionAnchor pos.start_row pos.start_col)
             (-> editor.selection `selectTo pos.end_row (+ pos.end_col 1))
             true))
       (throw TypeError "editor must be provided to select_to_root_form"))
   {
       description: (+ "Given an editor and an optional position, will select the complete form (to a depth of 0) if possible. "
                        "If given a position object with a row and column value, the function will use that instead.  If "
                        "succesful, the value true will be returned.  If no editor is provided, the function will throw a "
                        "TypeError.")
       usage: ["editor:object" "pos:?object"]
       tags: ["editor" "selection" "form" "lisp" "editing"]
   })


(defun get_juno_autocompletions (editor session pos prefix callback)
   (let
      ((root_form (select_root_form editor pos))
       (collect_error (fn (e)
                         true))
       (text_data (+ "" (-> editor.session `getTextRange (new ace.Range root_form.start_row root_form.start_col root_form.end_row root_form.end_col)) ")"))
       (tokens (reader text_data { `suppress_throw_on_error: true on_error: collect_error  } )))
      
      (= tokens (make_autocompletion_scores (process_tree_symbols tokens prefix)))
      (callback null tokens))
   {
       `usage: ["editor:object" "session:object" "pos:object" "prefix:text" "callback:fn" ]
       `description: "Internally used by the editor for autocompletion."
       `tags: ["ace" "editor" "autocomplete" ]
   })
 
(defun clone_edit_session (session)
   (let
      ((s (new ace.EditSession (-> session `getDocument)
                               (-> session `getMode)))
       (undoManager (-> session `getUndoManager)))
      (-> s `setUndoManager undoManager)
      (-> s `setTabSize (-> session `getTabSize))
      (-> s `setUseSoftTabs (-> session `getUseSoftTabs))
      (-> s `setOverwrite (-> session `getOverwrite))
      (-> s `setBreakpoints (-> session `getBreakpoints))
      (-> s `setUseWrapMode (-> session `getUseWrapMode))
      (-> s `setUseWorker (-> session `getUseWorker))
      (-> s `setWrapLimitRange session.$wrapLimitRange.min session.$wrapLimitRange.max)
      (set_prop s session.$foldData
         (-> session `$cloneFoldData))
      s))
       


(defun make_editor (content options)
   (let
      ((options (or options {
                              `type: "juno"
                              }))
       (resize_observer nil)
       (intf {})
       (initialized false)
       (config_value (function (key default_value)
                        (or (prop options key)
                            (resolve_path [ `editor key ] *env_config*)
                            default_value)))
       (id (or options.id (generate_id id)))
       (content (or content ""))
       (controls (div { `style: "display: flex; " }))
       (parent_view nil)
       (name (name_control (or options.name "Untitled Buffer")))
       (context_clear_timer nil)
       (display_context_message (function (value)
                                   (if (and (blank? value)
                                            context_clear_timer)
                                       nil
                                       (progn
                                          (when context_clear_timer
                                             (clearTimeout context_clear_timer))
                                          (= context_clear_timer nil)
                                          (when (not (blank? value))
                                             (= context_clear_timer (setTimeout (fn () (= context_clear_timer nil)) 3000)))  ;; delay for clearing the message to quickly if a blank comes in
                                          (cond
                                             (is_element? value)
                                             (-> help_context_elem
                                                 `replaceChildren value)
                                             else
                                             (-> help_context_elem
                                                 `replaceChildren (span { `style: "display: inline-block; text-overflow: ellipsis; width: 100%; overflow: hidden" } (+ "" value))))))))
       (check_observer (fn ()
                          (when (not (== view.parentElement parent_view))
                             (-> resize_observer `disconnect)
                             (-> resize_observer `observe view.parentElement)
                             (= parent_view view.parentElement))))
       
       (help_context_elem (div { `class: "juno-help-context" } ""))
       (context_bar (div { `class: "juno-context-bar" }
                     help_context_elem))
       (offset_depth 46)
       (editor_div (div { `class: "opacity-0" `style: (+ "height: calc(100% - " offset_depth  "px); width: 100%; overflow: hidden;font-family:var(--main-mono-space);") }))
       
       (view (div { `control_id: id `style: "overflow: hidden; height: calc(100% - 10px); display: inline-block; width: inherit;" }
              controls
              editor_div
              context_bar))
       
       (perform_resize (fn ()
                          (when view.parentElement
                             (check_observer)
                             (html/set_style [["width" "calc(100% - 2px)"];           (+ "" (- (prop view.parentElement `offsetWidth) 2) "px")]
                                              ["height" (+ "" (- (prop view.parentElement `offsetHeight) 2) "px")]]
                              view)
                             (set_style [["height" (+ "calc(100% - " (+ (Math.max 12 controls.offsetHeight) (Math.max 40 context_bar.offsetHeight))  "px)") ]] editor_div)
                             (when editor
                                (-> editor `resize)))))
       (editor nil)
       (set_evaluator (fn ()
                         (when options.evaluator
                            (aif (get_keybinding "editor" "evaluate_selection")
                                 (bind_key "evaluate_selection" evaluate_selection)
                                 (-> editor.commands `addCommand
                                     {
                                       `name: "evaluate_selection"
                                       `bindKey: { `win: "Shift-Enter" `mac: "Shift-Enter" }
                                       `exec: evaluate_selection
                                       })))))
       
       (evaluate_selection (function (editor)
                              (let
                                 ((rval nil)
                                  (copytext (if options.repl_mode
                                                (-> editor `getValue)
                                                (-> editor `getCopyText))))
                                 (if (blank? copytext)
                                     (if (not options.repl_mode)
                                         (display_context_message (dtext "Please highlight text to evaluate")))
                                     (try
                                        (progn
                                           (= rval (options.evaluator copytext nil (not options.repl_mode)))
                                           (-> rval `then
                                               (function (val)
                                                  (setTimeout (fn ()
                                                                 (cond
                                                                    (instanceof val Error)
                                                                    (display_context_message (+ (subtype val)
                                                                                                (if val.message (+ ":" val.message)
                                                                                                    "")))
                                                                    (is_function? val)
                                                                    (display_context_message (+ "<- " (subtype val)))
                                                                    else
                                                                    (progn
                                                                       (defvar chopped (as_lisp val))
                                                                       (if (> chopped.length 200)
                                                                           (= chopped (+ (-> chopped `substr 0 200) "...")))
                                                                       (display_context_message (+ "<- " chopped)))))
                                                   100))
                                               (function (e)
                                                  (progn
                                                     (notify "Failure on evaluation")
                                                     (setTimeout (fn ()
                                                                    (cond
                                                                       (instanceof e Error)
                                                                       (display_context_message (+ (subtype e)
                                                                                                   (if e.message (+ ":" e.message)
                                                                                                       "")))
                                                                       else
                                                                       (display_context_message "Evaluation Failure")))
                                                      100)))))
                                        (catch Error (e)
                                           (progn
                                              (notify (+ (dtext "Unhandled error") ": " e.message ))
                                              (console.error e))))))))
       
       (font_size (config_value `font_size 14))
       (increase_font_size (function ()
                              (when font_size
                                 (= font_size (Math.min 200 (+ font_size 1)))
                                 (set_prop options
                                    `font_size font_size)
                                 (console.log "editor: options: " options)
                                 (-> editor `setFontSize font_size))))
       (decrease_font_size (function ()
                              (when font_size
                                 (= font_size (Math.max 1 (- font_size 1)))
                                 (set_prop options
                                    `font_size font_size)
                                 (console.log "editor: options: " options)
                                 (-> editor `setFontSize font_size))))
       (select_form_root (fn ()
                            (progn
                               (select_to_root_form editor)
                               nil)))
       (select_current_form (fn ()
                               (select_to_current_form editor)))
       (get_selection (function ()
                         (-> editor.selection `getRange)))
       (get_lines (function (from to)
                     (-> editor.selection `getLines from to)))
       (is_selected? (function ()
                        (progn
                           (defvar rng (get_selection))
                           (not (and (== rng.start.row rng.end.row)
                                     (== rng.start.column rng.end.column))))))
       (last_bracket_match nil)
       (active_lisp_operator nil) ;; the last active lisp operator
       (find_active_lisp_operator (function ()
                                     (let
                                        ((new_op nil)
                                         (rnge (or (-> editor.session `getBracketRange (-> editor `getCursorPosition))
                                                   (find_last_paren editor)))
                                         (usage nil))
                                        (if rnge
                                            (progn
                                               (= last_bracket_match rnge)
                                               (= new_op (first (split_by *whitespace_regexp* (-> editor.session `getTextRange last_bracket_match))))
                                               
                                               (when (not (== new_op active_lisp_operator))
                                                  (= active_lisp_operator new_op)
                                                  (= usage (decorative_usage active_lisp_operator))
                                                  (if usage 
                                                     (-> help_context_elem
                                                        `replaceChildren usage)
                                                     (-> help_context_elem `replaceChildren))
                                                  (when usage 
                                                     (dispatch_event { `command: "display_usage" `args: [active_lisp_operator] }))
                                                  (when options.on_new_lisp_operator
                                                     (options.on_new_lisp_operator active_lisp_operator))))
                                            (progn
                                               (= active_lisp_operator nil)
                                               (-> help_context_elem
                                                   `replaceChildren)
                                               (when options.on_new_lisp_operator
                                                  (options.on_new_lisp_operator nil)))))))
       
       (indent_row (function (row_number options)
                      (indent_editor_line editor row_number options)))
       
       (indent_current_row (function (editor)
                              (when (== (prop (-> editor.session `getMode) `$id) "ace/mode/juno")
                                 (if (not (is_selected?))
                                     (progn
                                        (defvar row_number (prop (-> editor `getCursorPosition)
                                                                 `row))
                                        (console.log "tab: start: single line: " row_number)
                                        (indent_row row_number { `apply: true }))
                                     (indent_editor_selection editor)))))
       
       (bind_key (fn (key_command func)
                    (aif (get_keybinding "editor" key_command)
                         (progn
                            (console.log "binding command: " key_command it (to_ace_keybinding key_command it func))
                            (-> editor.commands `addCommand
                                (to_ace_keybinding key_command it func))))))
       
       (build_key_bindings (fn (editor)
                              (progn
                                 (console.log "building_key_bindings")
                                 
                                 (when options.on_save
                                    (bind_key "on_save" (function (editor)
                                                           (options.on_save (-> editor `getValue)))))
                                 (bind_key "increase_font_size" increase_font_size)
                                 (bind_key "decrease_font_size" decrease_font_size)
                                 (bind_key "select_form_root" select_form_root)
                                 (bind_key "select_current_form" select_current_form)
                                 (bind_key "indent_current_row" indent_current_row)
                                 (bind_key "evaluate_selection" evaluate_selection)
                                 
                                 (when (is_array? options.commands)
                                    (for_each (command options.commands)
                                       (do
                                          (-> editor.commands `addCommand
                                              (to_ace_keybinding command.name command))))))))
       
       
       (initialize_editor (fn ()
                             (when (not initialized)
                                (let
                                   ((comps nil)
                                    (identifier_regex (new RegExp "[A-Za-z*+0-9_\\$\\u00A2-\\uFFFF]+"))
                                    (extension nil))
                                   (setq initialized true)
                                   (setq parent_view view.parentElement)
                                   (setq editor
                                         (ace.edit editor_div))
                                   (defglobal LangTools (-> ace `require "ace/ext/language_tools"))
                                   (when options.clone_with_editor_id
                                      (let ((editor_to_clone (aif (get_control_by_id options.clone_with_editor_id)
                                                                  it.editor))
                                            (new_session nil))
                                         (when editor_to_clone
                                            (= new_session (clone_edit_session editor_to_clone.session))
                                            (-> editor `setSession new_session))))
                                   
                                   (unless options.evaluator
                                      (when *system_repl*
                                         (display_context_message (+ "Evaluator for this buffer is " (prop *system_repl* `name)))
                                         (set_prop options
                                            `evaluator
                                            (prop *system_repl* `evaluate))))
                                   
                                   (console.log "initialize_editor: " options.type " options: " (clone options))
                                   (set_evaluator)
                                   
                                   (when options.on_focus
                                      (-> editor `on `focus options.on_focus))
                                   (when options.on_blur
                                      (-> editor `on `blur options.on_blur))
                                   (when options.read_only
                                      (-> editor `setReadOnly true))
                                   (when options.on_click
                                      (-> editor `on `click options.on_click))
                                   (-> editor.session `setUseSoftTabs true)
                                   
                                   (-> editor.session `setUseWorker true)
                                   (-> editor.session `setUseSoftTabs true)
                                   (-> editor `setShowFoldWidgets true)
                                   
                                   ;; set the extension if we haven't been given a specific option type
                                   (when (and (eq nil options.type)
                                              (is_string? options.filename))
                                      (= comps (split_by "." options.filename))
                                      (when (> comps.length 1)
                                         (= extension (edit_mode_for_extension (last comps)))
                                         (console.log "make_editor: setting extension: " extension " based on: " options.filename)
                                         (set_prop options
                                            `type
                                            extension)))
                                   (console.log "initialize_editor: setting mode: " (clone options.type) " options: " (clone options))
                                   (cond
                                      (== options.type "juno")
                                      (progn
                                         (console.log "mode to juno")
                                         (-> editor.session `setMode "ace/mode/juno")
                                         (-> editor `setOptions {
                                                                  `enableBasicAutocompletion:  [{ identifierRegexps: [ identifier_regex ]
                                                                                                  getCompletions: (fn (editor session pos prefix callback)
                                                                                                                     (get_juno_autocompletions editor session pos prefix callback)) }] 
                                                                  enableLiveAutocompletion: true
                                                                  enableSnippets: true
                                         }))
                                      (== options.type "javascript")
                                      (progn
                                         (-> editor `setOptions {
                                                                  `enableLiveAutocompletion: true
                                                                  `enableBasicAutocompletion: true })
                                         (-> editor.session `setMode "ace/mode/javascript"))
                                      (== options.type "css")
                                      (progn
                                         (-> editor.session `setMode "ace/mode/css")
                                         (-> editor `setOptions {
                                                                  `enableLiveAutocompletion: true
                                                                  `enableBasicAutocompletion: true }))
                                      options.type
                                      (progn
                                         (-> editor.session `setMode options.type)
                                         (-> editor `setOptions {
                                                               `enableLiveAutocompletion: true
                                                                  `enableBasicAutocompletion: true })))
                                   
                                   (cond
                                      (is_string? options.theme)
                                      (setTimeout (fn () (progn
                                                       (-> intf `set_theme options.theme)
                                                       (remove_class "opacity-0" editor_div))) 50)
                                      else
                                      (aif (resolve_path [ `editor `default_theme ] *env_config*)
                                           (setTimeout (fn ()
                                                          (progn
                                                             (-> intf `set_theme it)
                                                             (remove_class "opacity-0" editor_div))) 50)))
                                   (build_key_bindings editor)
                                   (-> editor `setOptions {
                                                            `showFoldWidgets: true
                                                            `cursorStyle: "wide"
                                                            `firstLineNumber: (or options.first_line_number 0)
                                                            `useSoftTabs: true
                                                            `highlightActiveWord: true
                                                            })
                                   (if (is_string? options.filename)
                                       (if is_served?
                                           (try
                                              (progn
                                                 (defvar remote_content (-> (fetch (+ "/files/" options.filename)) `text))
                                                 (if (is_string? remote_content)
                                                     (-> editor `setValue remote_content -1)
                                                     (progn
                                                        (-> editor `setValue content)
                                                        (display_context_message (+ "NOTICE: unable to fetch file: " options.filename " (editor set to local value)")))))
                                              (catch Error (e)
                                                 (progn
                                                    (-> editor `setValue content)
                                                    (display_context_message (+ "ERROR on fetching: " options.filename " (editor set to local value)  " e.message))
                                                    (log "Error on fetching file: " options.filename ": " e))))
                                           (progn
                                              (-> editor `setValue content)
                                              (display_context_message (+ "NOTICE: not online, so the file cannot be fetched.  Using existing local value at path."))))
                                       (progn
                                          (-> editor `setValue content -1)
                                          (display_context_message "Editing local value")))
                                   (if (eq nil font_size)
                                       (= font_size (parseInt (-> editor `getFontSize)))
                                       (-> editor `setFontSize font_size))
                                   (set_prop options
                                      `font_size
                                      font_size)
                                   (set_prop options
                                      `name
                                      name)
                                   
                                   (defglobal TokenIterator (prop (-> ace `require "ace/token_iterator") `TokenIterator))
                                   (when options.on_change
                                      (-> editor `on `change (function (val)
                                                                (progn
                                                                   (when (== (prop (-> editor.session `getMode) `$id) "ace/mode/juno")
                                                                      (handle_lisp_format_event val editor)
                                                                      (find_active_lisp_operator))
                                                                   (options.on_change editor val)))))
                                   (-> editor `resize true)
                                   (unless options.clone_with_editor_id
                                      (try
                                         (aif (-> editor.session `getUndoManager)
                                              (-> it `reset))
                                         (catch Error (e)
                                            (log "ERROR on undo manager:" e,message))))
                                   (set_prop intf `editor editor)
                                   (when (is_object? options.on_mode_set)
                                      (options.on_mode_set options.type))
                                   (when options.on_initialized
                                      (options.on_initialized intf))
                                   )))))
      
      (if (not (is_symbol? `$ace_editor))
          (throw TypeError "$ace_editor symbol not found, and is required for this editor."))
      
      (when (is_element? options.command_bar)
         (-> controls `prepend options.command_bar))
      (set_style [["height" (+ "calc(100% - " (+ (Math.max 12 controls.offsetHeight) (Math.max 40 context_bar.offsetHeight))  "px)") ]] editor_div )
      
      (= resize_observer (new ResizeObserver perform_resize))
      (= intf
       {
         `view: view
         `editor: editor
         `set: (fn (text)
                  (-> editor `setValue text))
         `get: (fn (text)
                  (-> editor `getValue))
         `get_selection: get_selection
         `is_selected?: is_selected?
         `type: `make_editor
         `destroy: (fn ()
                      (when editor
                         (-> editor `destroy)
                         (= editor nil)
                         (= intf nil)))
         
         `set_evaluator: (fn (new_evaluator)
                            (when (is_function? new_evaluator)
                               (set_prop options
                                  `evaluator
                                  new_evaluator)
                               (set_evaluator)))
         `set_mode: (fn (mode_name)
                       (progn
                          (set_prop options
                             `type
                             mode_name)
                          (cond
                             (== options.type "juno")
                             (-> editor.session `setMode "ace/mode/juno")
                             (== options.type "javascript")
                             (-> editor.session `setMode "ace/mode/javascript")
                             (== options.type "css")
                             (-> editor.session `setMode "ace/mode/css")
                             else
                             (-> editor.session `setMode options.type))
                          (when options.on_mode_set
                             (options.on_mode_set mode_name))))
         `set_theme: (fn (theme_name)
                        (progn
                           (-> editor `setTheme (+ "ace/theme/" theme_name))
                           (set_prop options
                              `theme
                              theme_name)
                           (when options.on_theme_set
                              (options.on_theme_set theme_name))))
         `display_context_message: display_context_message
         `get_evaluator: (fn ()
                            options.evaluator)
         `resize: (fn ()
                     (perform_resize))
         `bind_key: bind_key
         `save: (function ()
                   (when options.on_save (options.on_save (-> editor `getValue))))
         `increase_font_size: increase_font_size
         `decrease_font_size: decrease_font_size
         `menu_items: (function ()
                         [[(dtext "Increase Font Size") increase_font_size]
                          [(dtext "Decrease Font Size") decrease_font_size]
                          (if (-> editor `getReadOnly)
                              [ (dtext "Allow Editing" ) (fn () (-> intf `set_read_only false)) ]
                              [ (dtext "Set Read-Only Mode") (fn () (-> intf `set_read_only true)) ])
                          [(dtext "Set Edit Mode") 
                           [["Juno" (fn () (-> intf `set_mode "juno"))]
                            ["Javascript" (fn () (-> intf `set_mode "javascript")) ]
                            ["Text" (fn () (-> intf `set_mode "text"))]
                            ["CSS" (fn () (-> intf `set_mode "css"))]
                            ["JSON" (fn () (-> intf `set_mode "json"))]]]
                          [(dtext "Set Editor Theme") (for_each (theme *editor_themes*)
                                  [theme  (fn () (-> intf `set_theme theme))])]])
         `get_active_lisp_operator: (fn ()
                                       (find_active_lisp_operator))
         `set_read_only: (fn (read_only?)
                           (-> editor `setReadOnly read_only?))
         `options: options
         `name: options.name 
         `set_name: (fn (new_name)
                      (when (not (blank? new_name))
                         (set_prop options
                            `name
                            (name_control new_name))
                         options.name))
         `toJSON: (function ()
                     `(make_editor ,#(-> editor `getValue) ,#options))
         `initialize: (fn ()
                         (when view.parentElement
                            (console.log "editor: performing initialization")
                            (-> resize_observer `observe view.parentElement)
                            (initialize_editor))) })))

(defun select_evaluator ()
  (let
      ((idx -1)
       (dups (new Set))
       (new_name nil)
       (selected_idx nil)
       (available (reduce (control (flatten (control_tree $root_controls)))
                          (when control.evaluate
                            (if (-> dups `has (or control.name "Untitled"))
                              (progn
                               (= new_name (+ (or control.name "Untitled")
                                             "-" idx))
                               (-> dups `add new_name)
                               [ (inc idx) new_name
                                 control ])
                              (progn
                               (-> dups `add control.name)
                               [ (inc idx) control.name control ])))))
       (selection_box (select { }
                              (map (fn (v)
                                     (option { `value: v.0 } v.1))
                                     (or available [])))))
    (= selected_idx
       (request_user_input (dtext "Select an available evaluator")
                           nil
                           { input: selection_box }))
    (when selected_idx
        (prop (prop available selected_idx) 2))))
  
(defun buffer_editor (title namespace path_to_value mode options)
  (let
      ((nseval (if (not (blank? namespace))
                 (-> Environment `get_namespace_handle namespace)
                 Environment))
       (already_exists? (if (get_control_by_name title)
                            (throw ReferenceError "An editor with the same name is already open.")))
       (title (name_control title))
       (title_span (span { `class: "juno-title" } title))
       (options (or options {}))
       (id (or options.id (generate_id "buffer_editor")))
       (evaluator (cond
                    (and (is_object? options.evaluator)
                         (is_function? options.evaluator.evaluate))
                    options.evaluator.evaluate
                    (is_function? options.evaluator)
                    options.evaluator
                    *system_repl*
                    *system_repl*))
       
       (evaluator_span (span { `class: "juno-evaluator" `title: (dtext "Name of the evaluator assigned to this buffer") } "-"))
       (buffer_commands_button (commands_button id))
       (nav_back_button (button { `title: (dtext "back") } "<"))
       (nav_forward_button (button { `title: (dtext "forward") } ">"))
       (is_dirty? false)
       (col_pos_span (span { `title: "Position (Row Column)" `style: "float: right;margin-right: 15px; display: inline-block; padding-left: 5px; padding-right: 5px;" } "[0 0]"))
       (mode_span (span { `class: "juno-mode" `title: "Current Editing Mode" `style: "float: right; margin-right: 15px; display: inline-block; padding-left: 5px; padding-right: 5px;" } mode))
       (command_bar (or options.command_bar
                        (div { `class: "juno-buffer-bar" }
                             buffer_commands_button
                             title_span                                                             
                             (span { `title: "Namespace" `class: "juno-namespace" `style: "display:inline-block; padding-left: 30px; padding-right: 5px;" } nseval.namespace)
                             evaluator_span
                             (if options.read_only
                               (span { `title: "This buffer doesn't allow editing" `style: "padding-left: 5px; padding-right: 5px;" } (dtext "Locked"))
                               ())
                             mode_span
                             col_pos_span)))
       (init_value (resolve_path path_to_value nseval.global_ctx.scope))
       (current_pos nil)
       (on_save (fn (value)
                  (let
                      ((rval nil)
                       (report []))
                      (try
                         (make_path path_to_value nseval.global_ctx.scope
                                    value)
                         (catch Error (e)
                            (progn
                               (log_error "Invalid path: " e.message)
                               (push report (+ (dtext "Invalid local path") e.message)))))
                      (try
                         (progn
                            (when (and is_served?
                                       (is_string? options.filename)
                                       (contains? "http_client" *env_config*.features))
                               (= rval (handle_save_file edit_control { remote: true no_prompt: true}))
                               (log "handle_save_file result: " rval)
                               (if (is_error? rval)
                                   (throw rval))))
                         (catch Error (`e)
                            (progn
                               (push report (+ (dtext "Unable to save file")
                                             " "
                                             options.filename " "
                                             e.message)))))
                      (if (== report.length 0)
                          (progn
                             (remove_class "juno-needs-save" title_span)
                             (= is_dirty? false))
                          (progn
                             (-> edit_control `display_context_message (join " " report)))
                         ))))
       (on_focus (fn ()
                   (progn                                     
                    (setq *last_focus* edit_control)
                    (add_class "juno-focused" command_bar))))
       (update_position (function ()
                          (progn
                           (= current_pos (-> edit_control.editor `getCursorPosition))
                           (set_prop col_pos_span
                                     `innerText
                                     (+ "[" current_pos.row " " current_pos.column "]"))                           
                           (set_prop options `cursor_position current_pos)
                           ;; check for new lisp operator
                           (-> edit_control `get_active_lisp_operator))))       
       (edit_control (make_editor (if (is_string? init_value)
                                    init_value
                                    "")                                  
                                  {
                                   type: mode
                                   command_bar: command_bar                                                                     
                                   on_save: on_save
                                   filename: options.filename
                                   id: id
                                   theme: options.theme
                                   read_only: options.read_only
                                   font_size: options.font_size
                                   on_click: (function ()
                                                       (update_position))                                   
                                   on_theme_set: (function (val)
                                                           (set_prop options
                                                                     `theme
                                                                     val))
                                   on_mode_set: (function (val)
                                                          (progn
                                                           (= mode val)
                                                           (set_prop mode_span `innerText val)))
                                   on_change: (function (editor val)
                                                        (progn                                                         
                                                         (when (not is_dirty?)
                                                           (= is_dirty? true)
                                                           (add_class "juno-needs-save" title_span))
                                                         (when options.on_change
                                                           (-> options.on_change editor val))))
                                   evaluator: evaluator                                   
                                   }))
       (menu_items (fn ()
                     (conj  
                      [(when path_to_value
                         [(+ (dtext "Save to") " " (last path_to_value))
                          (fn (e) (-> edit_control `save))])
                       [(dtext "Select Evaluator")
                        select_my_evaluator]]
                      (-> edit_control `sub_menu_items))))
       (set_evaluator_control (fn (control)
                                (if control.evaluate
                                  (progn
                                   (-> edit_control `set_evaluator control.evaluate)
                                   (set_prop options
                                             `evaluator_id
                                             control.options.id)                                   
                                   (if control.name
                                     (set_prop evaluator_span
                                               `innerText
                                               (+ "⭢ " control.name)))))))
       (select_my_evaluator (fn ()
                        (aif (select_evaluator)
                             (progn
                              (set_evaluator_control it)
                              (notify (+ (dtext "Evaluator set to ") it.name)))))))
                            
    
     
    (console.log "buffer_editor: init_value: " init_value path_to_value nseval)
   
    (attach_event_listener edit_control.view
                           `keyup
                           (function (e)
                              (update_position)))
                              
    
    
                                        
    (set_prop options
              `id
              id)
    (set_prop edit_control
              `sub_initializer
              edit_control.initialize
              `sub_menu_items
              edit_control.menu_items)
    
    (set_prop options
       `name
       title)
    
    (set_prop edit_control
              `set_evaluator_control  set_evaluator_control
              `on_focus on_focus
              `on_destroy (fn ()                           
                            (cond
                              (not is_dirty?)
                              true 
                              is_dirty?
                              (request_user_input (+ "" title ": " (dtext "The value of this editor hasn't been stored. Really remove?"))
                                                  "text"
                                                  { input: (input { `type: "hidden" `value: "remove" }) })))                                                                                                                                                     
              `options options
              `name title
              `menu_items menu_items
              `type `buffer_editor
              `initialize (fn ()
                            (when edit_control.view.parentElement                              
                              (-> edit_control `sub_initializer)
                              (console.log "buffer_editor: sub initialized: setting evaluator if I have it: " options)
                              (cond
                                options.evaluator_id
                                (set_evaluator_control (get_control_by_id options.evaluator_id))
                                *system_repl*
                                (set_evaluator_control *system_repl*))))
                                       
                              
              `toJSON (function ()                                                                 
                                 `(buffer_editor ,#title ,#namespace ,#path_to_value ,#mode ,#options)))
    edit_control))



(defun log_view (options)
  (let
      ((output_container (div { `class: "juno-log-output"  } ))       
       (options (or options { `display_options: { include_prototypes: false }}))
       (title_span (span { `class: "juno-title" } (if options.title options.title "Unnamed")))
       (control_status (div {  `class: "juno-buffer-bar" }
                            (cond (is_array? options.additional_elements)
                                  options.additional_elements
                                  options.title
                                  title_span
                                  else
                                  [])))
       (name (or options.name (name_control "log_view")))
       (resize_observer nil)
       (parent_view nil)
       (set_show_prototypes (fn (state)
                                  (progn                                                                      
                                   (set_prop options.display_options
                                             `include_prototypes
                                             state)
                                   (log_message "show prototypes: " options.display_options.include_prototypes))))
                                   
       (check_observer (fn ()
                         (when (not (== view.parentElement parent_view))
                           (-> resize_observer `disconnect)
                           (-> resize_observer `observe view.parentElement)
                           (= parent_view view.parentElement))))
       (id (or options.id (generate_id "log_view")))
       (view (div { `tabindex: 0 `control_id: id `style: "overflow: hidden; margin: 0px; padding: 0px; height: 100%; width: 100%;" }
                  control_status
                  output_container))
       (initialized false)
       (initialize (fn ()
                     (when (and view.parentElement
                                (not initialized))
                       (= initialized true)
                       (= parent_view view.parentElement)                                   
                       (= resize_observer (new ResizeObserver perform_resize))
                       (-> resize_observer `observe view.parentElement))))
                       
       (perform_resize (fn ()
                         (let
                               ((new_height (- (prop view.parentElement `offsetHeight) 5))
                                (new_width  (- (prop view.parentElement `offsetWidth) 0)))
                             
                             (set_style [[ "width" (+ "" new_width "px") ]
                                         [ "height" (+ "" new_height "px") ]]
                                        view))))
       (add_result (fn (result command_text error_state)
                     (progn
                      (console.log "log_view: <- " result) 
                      (when (not (eq nil command_text))
                        (-> output_container
                            `append
                            (if (> command_text.length 100)
                              (details {  class: "juno-result" }
                                       (summary { `tabindex: 0 `class: "juno-code-value" } (+ (-> command_text `substr 0 100) "..."))
                                       (pre { `tabindex: 0 `class: "juno-code-value" }
                                             command_text))
                              (div {  class: "juno-result" }
                                   (code { `tabindex: 0 `class: "juno-code-value" }
                                             command_text)))))
                      (-> output_container
                          `append
                          (div { `class: "juno-log-message"
                                `style: (+ " margin-top: 0px; width: calc(100% - 10px); display: inline-block; font-family: var(--main-mono-space); "
                                            (if (eq nil command_text)
                                              "border-top: 1px solid #00000008; padding: 5px;"
                                              "border-left: 3px solid #0167835e; padding: 10px; margin-bottom: 5px; border-bottom: 1px solid transparent;")) } 
                               (value_to_dom result options.display_options)))
                      (when (> output_container.children.length (or options.max_log_lines
                                                                    *env_config*.application.max_log_lines
                                                                    10))
                        (-> (first output_container.children)
                            `remove))                      
                      (set_prop output_container
                                `scrollTop
                                1000000)
                      (set_prop view
                                `scrollTop
                                0)
                      result)))
       (set_max_log_lines (fn (val)
                            (when (is_number? val)
                              (set_prop options
                                        `max_log_lines
                                        val)
                              (while (> output_container.children.length options.max_log_lines)
                                (-> (first output_container.children)
                                    `remove))
                              true)))
                              
       (menu_items (fn ()
                     [[(dtext "Clear Log")
                       (function ()
                                 (-> output_container `replaceChildren))]
                      [(dtext "Set Max Log Lines")
                       (fn ()
                         (aif (request_user_input (+ (dtext "Enter the number of log lines to keep") ":") `number { `default_value: (or options.max_log_lines
                                                                                                                                        *env_config*.application.max_log_lines) })
                              (set_max_log_lines it)))]
                      [(if options.display_options.include_prototypes
                         (dtext "Hide Object Prototype Detail")
                         (dtext "Show Object Prototype Detail"))
                       (function ()
                                 (set_show_prototypes (not options.display_options.include_prototypes)))]]))
                      
       (on_focus (fn ()
                   (progn                   
                    (add_class "juno-focused" control_status)))) ;; we know that is the command bar
       (log_message (fn (`& args)
                      (progn
                       (add_result (div { `tabindex: 0 `style: "display: flex; justify-content: flex-start; align-items: flex-start; " }
                                        (div { `timestamp: (time_in_millis) `style: "padding-right: 10px; min-width: 150px; display: inline-block; " } (formatted_date (new Date)))
                                        (div { `style: "display: flex; justify-content: flex-start; align-items: flex-start; " }
                                             (for_each (v args)
                                                       (cond
                                                         (is_string? v)
                                                         (div { `tabindex: 0 `class: "juno-value juno-type-string" `style: "display: inline-block; padding-left: 10px" } v)
                                                         (is_number? v)
                                                         (div { `tabindex: 0 `class: "juno-value juno-type-number" `style: "display: inline-block; padding-left: 10px" } v)
                                                         (or (== v true) (== v false))
                                                         (div { `tabindex: 0 `class: "juno-value juno-type-boolean" `style: "display: inline-block; padding-left: 10px" } v)
                                                         else
                                                         (div { `tabindex: 0 `class: "juno-value" `style: "display: inline-block; padding-left: 10px" } (value_to_dom v))))))
                                   nil nil)
                       nil)))
                        
       (interf {}))
    (set_prop options
              `id
              id
              `name
              name)

    (set_prop interf
              `view view
              `name name
              `append add_result
              `log_message log_message
              `menu_items menu_items
              `control_bar control_status
              `output_container output_container
              `initialize initialize
              `resize perform_resize
              `type `log_view              
              `clear (fn ()
                       (-> output_container `replaceChildren))
              `options options
              `toJSON (function ()
                                `(log_view ,#options)))
    interf))


(defun browser_repl (options)
  (let
      ((options (or options {}))
       (name options.name)       
       (resize_observer nil)
       (id (or options.id (generate_id "repl")))
       (namespace_span  (span { `title: "REPL Namespace" `class: "juno-namespace" `style: "display:inline-block; padding-left: 30px; padding-right: 5px;" } (current_namespace)))
       (control_button (commands_button id));  { `title: "REPL Commands" } "⋯"))
       (title_span (span { `class: "juno-title" } (if options.name options.name "Unnamed")))
       (show_prototype_details_button (button { `title: (dtext "Show Object Prototype Detail") } "P"))
       (path_span (span { `tabindex: 0 `title: (dtext "Click to copy focused path")  `class: "juno-path" } ""))
       (current_env Environment)
       (error_state nil)
       (initialized false)       
       (intf nil)       
       (toggle_prototype_detail (function ()
                                          (progn                                           
                                           (set_prop options.display_options
                                                     `include_prototypes
                                                     (not options.display_options.include_prototypes))
                                           (set_prop output_control.options.display_options                                                     
                                                     `include_prototypes options.display_options.include_prototypes)
                                           (if options.display_options.include_prototypes
                                             (add_class "juno-button-on" show_prototype_details_button)
                                             (remove_class "juno-button-on" show_prototype_details_button)))))
       (output_control (log_view { `display_options: (or options.display_options {} )
                                   `additional_elements: [ control_button title_span show_prototype_details_button namespace_span path_span ] `id: id }))
       (history (if (is_array? options.history)
                  options.history
                  []))
       (push_history (fn (lisp_text)
                       (progn
                        (push history
                                lisp_text)
                        (= history_idx history.length)
                        (when (> history.length (or options.max_history_size
                                                    50))
                          (take history)))))
       (history_idx 0) 
       (history_prior_entry (fn ()
                              (when (> history.length 0)
                                 (dec history_idx)
                                 (when (or (< history_idx 0)
                                           (>= history_idx history.length))
                                    (= history_idx history.length))
                                 (if (== history_idx history.length)
                                     (-> input_container `set "")
                                     (-> input_container `set (prop history history_idx)))
                               )))
       (history_next_entry (fn ()
                              (when (> history.length 0)
                                 (inc history_idx)
                                 (if (== history_idx history.length)
                                     (-> input_container `set "")
                                     (progn
                                        (if (>= history_idx history.length)
                                            (= history_idx 0))
                                        (-> input_container `set (prop history history_idx)))))))
       (clear_output (fn ()
                       (-> output_control `clear)))
       (clear_history (fn ()
                        (progn
                         (= history [])
                         (= history_idx 0))))
       
       (repl_key_bindings (function ()
                                    (map (function (kb)
                                             (destructuring_bind (command_name bindings)
                                                 kb                                                                                                                  
                                                 { name: command_name
                                                   mac: (prop bindings `mac)
                                                   win: (prop bindings `win)
                                                  exec: (function (editor)
                                                                  (-> intf command_name editor)) }))                                                                                                                                                                  
                                         (or (pairs *key_bindings*.repl) []))))
       (evaluator (fn (lisp_text no_eval no_clear)
                    (let
                        ((result nil))
                      (setq error_state nil)
                      (setq current_env (-> Environment `get_namespace_handle (current_namespace)))                    
                      (try
                        (= result (if no_eval
                                    lisp_text
                                    (-> current_env `evaluate lisp_text {} { `throw_on_error: true })))
                        (catch Error (ex)
                          (do
                            (= error_state true)
                            (notify (+ "Error: " ex.message))
                            (= result ex))))
                      (console.log "<-" result)
                      (set_prop namespace_span
                                `innerText
                                (current_namespace))                     
                      (-> output_control `append result lisp_text error_state)
                      (if (and (not error_state)
                               (not no_clear))
                        (-> input_container `set ""))
                      result)))
                             
       (input_container (make_editor 
                                   ""                                  
                                  {
                                   type: "juno"                                                                                                                             
                                   on_change: (function (editor val)
                                                        (progn
                                                         true))
                                   theme: options.theme
                                   id: id
                                   clone_with_editor_id: options.clone_with_editor_id
                                   repl_mode: true
                                   on_new_lisp_operator: (function (val)
                                                            (progn                                                               
                                                               (dispatch_event { `command: "display_usage" `args: [val] })))
                                   evaluator: (fn (lisp_text no_eval no_clear)
                                                (progn
                                                 (push_history lisp_text)
                                                 (evaluator lisp_text no_eval no_clear)))
                                   commands: (repl_key_bindings)
                                   `on_initialized: (fn (control)
                                                       (when initialized
                                                          (try
                                                             (-> control.editor `focus)
                                                             (catch Error (e)
                                                                (log "error on focus: " e.message)))))
                                                       }))

       (sview (split_view_horizontal
                                 output_control
                                 input_container
                                 { `ratio: (or options.ratio 0.7) `id: id } ))  ;; 80/20 top-bottom
       
       (view sview.view)
       (non_whitespace_regex (new RegExp "\\\\s"))
       (on_focus (fn ()
                   (progn
                    ;(-> input_container.editor `focus) ;; bring focus to the repl
                    (add_class "juno-focused" output_control.control_bar )
                    )))
       (on_blur (fn ()
                  (progn
                   true)))
       (destroy (fn ()
                  (-> input_container `destroy)))
       (menu_items (fn ()
                     [[(dtext "Clear Output Log")
                       (function ()
                                 (clear_output))]
                      [(dtext "Clear REPL History")
                       (function ()
                                 (clear_history))]
                      [(if options.display_options.include_prototypes
                         (dtext "Hide Object Prototype Detail")
                         (dtext "Show Object Prototype Detail"))
                       (function ()
                                 (toggle_prototype_detail))]
                      [(dtext "Set Editor Theme") (for_each (theme *editor_themes*)
                                                            [theme  (fn ()
                                                                      (progn
                                                                       (set_prop options `theme theme)
                                                                       (-> input_container `set_theme theme)))])]]))
       (initialize (fn ()
                     (progn
                      (if initialized
                        false
                        (progn
                         (= initialized true)
                         (console.log "repl initializing")
                         (when (eq nil options.display_options)
                           (set_prop options
                                     `display_options
                                     { `include_prototypes: false }))                           
                         (if options.display_options.include_prototypes
                           (add_class "juno-button-on" show_prototype_details_button))
                         (-> output_control `append (html/div { `style: "display: flex padding: 5px" }                
                                              (html/span { `style: "font-weight: bold; display: inline-block;" } "Juno REPL")
                                              (html/span { `style: "display: inline-block; margin-left: 10px;" }
                                                         "Version: " Environment.build_version   )))
                         ;; become the system_repl if none is yet defined
                         (when (eq nil *system_repl*)
                           (= *system_repl* intf)
                           (-> input_container `display_context_message (+ "This control (" intf.name ") is now the *system_repl*")))
                         
                         true))))))

       (attach_event_listener output_control.output_container
                           `focusin
                           (function (e)
                             (progn
                              (handle_event e)
                              (console.log "output-control: focus: " (-> e.srcElement `getAttribute "lpath") e.srcElement)
                              (aif (-> e.srcElement `getAttribute "lpath")
                                   (progn
                                    (set_prop path_span
                                             `innerText
                                             (+ "[ " (join " "
                                                           (for_each (v (split_by "~" it))
                                                                     (cond (> (length (scan_str non_whitespace_regex v)) 0)
                                                                           (+ "\"" v "\"")
                                                                           (isNaN (new Number v))
                                                                           (+ "`" v)
                                                                           else
                                                                           v)))
                                                           " ]"))
                                    (console.log "setting path span:: " it))
                                   (progn
                                    (console.log "clearing path span")
                                    (set_prop path_span
                                             `innerText
                                             ""))))))
     
    (attach_event_listener show_prototype_details_button
                           `click
                           (fn (e)
                             (progn
                              (handle_event e)
                              (toggle_prototype_detail))))
    
    (attach_event_listener path_span
                           `click
                           (fn (e)
                             (progn
                              (copy_text_to_clipboard path_span.innerText)
                              (notify (+ (dtext "Copied") " " path_span.innerText)))))

    ;; by changing the split_view type value, we prevent this control from being split or
    ;; controls being swapped
    
    (set_prop sview
              `type
              "REPL_split")
    
    (set_prop options
              `id
              id)
                   
    (= intf {
             `view: view
             `options: options
             `name: name             
             ;`input_container: input_container  ;; do not use
             `editor_control: input_container             
             `history_next_entry: history_next_entry
             `history_prior_entry: history_prior_entry
             `command_history: (function ()
                                        history)
             `clear_history: (function ()
                                       (clear_history))
             `clear_output: clear_output             
             `initialize: initialize
             `destroy: destroy
             `type: "browser_repl"
             `resize: (fn ()
                       (-> sview `resize))
             `menu_items: menu_items                           
             `on_focus: on_focus
             `on_blur: on_blur           
             `set_theme: (fn (theme_name)
                           (when (contains? theme_name *editor_themes*)
                             (set_prop options `theme theme_name)
                             (-> input_container `set_theme theme_name)))
             `toJSON: (function ()
                                (progn
                                 (set_prop options
                                           `history
                                           [(quote quotel) history])
                                `(browser_repl ,#(or options { `ratio: sview.options.ratio } ))))
             `controls: (fn () [ input_container output_control])
             
             `output_container: output_control.view
             `log: (fn (val)
                     (-> output_control `log_message val))
             `evaluate: (fn (lisp_text no_eval no_clear)
                          (evaluator lisp_text no_eval no_clear))
             })
    intf))


;; singleton - if it already exists, just return the control
;; otherwise make it 
(defun control_holding_tank (initial_controls options)
  (aif (get_control_by_name "Holding Tank")
       it
       (let
           ((my_controls (if (and initial_controls
                                  (is_array? initial_controls))
                           (to_object
                            (reduce (control initial_controls)
                                    (when control.options.id 
                                      [control.options.id control])))
                           {}))                                                    
            (options (or options {}))
            (intf {})
            (name (or options.name
                      "Holding Tank"))
            (initialized false)
            (id (or options.id (generate_id "holding_tank")))
            (title_span (span { `class: "juno-title" } (dtext "Holding Tank")))
            (buffer_commands_button (commands_button id))
            (control_status (div {  `class: "juno-buffer-bar" }
                                 buffer_commands_button
                                 (cond (is_array? options.additional_elements)
                                       options.additional_elements
                                       else
                                       title_span
                                       )))
            (perform_resize (fn ()
                              (when view.parentElement
                                (when (not initialized)
                                  (initialize))
                                (render_view))))
            
            (resize_observer nil)
            (add_control (fn (control)
                             (when (not (== control intf))
                                 (assert (and control.type control.options.id) "Invalid control provided")
                                 (when (and (not (== control.type "empty_control"))  ;; don't store the empty controls since they are placeholders
                                            (not control.options.temporary))
                                    (set_prop my_controls
                                       control.options.id
                                       control)
                                    (render_view)
                                    control))))
            (remove_control (fn (id)
                              (if (is_object? id)
                                (aif (prop my_controls id.options.id)
                                     (progn
                                      (remove_prop my_controls id.options.id)
                                      (render_view)))
                                (aif (prop my_controls id)
                                     (progn
                                      (remove_prop my_controls id)
                                      (render_view))
                                     (notify "The requested control wasn't found")))))
            
            (render_view (fn ()
                           (-> control_view
                               `replaceChildren
                               (table { `style: "width: 100%" }
                                (thead
                                 (th "Name") (th "Type") (th "Actions"))
                                (tbody
                                 (for_each (control (values my_controls))
                                           (tr
                                            (td control.name)
                                            (td control.type)
                                            (td { `for_control_id: control.options.id }
                                                (button (dtext "View"))                                               
                                                (button { `style: "float: right" } (dtext "Destroy"))))))))))
            (handle_button_event (fn (elem)
                                   (aif (and elem.parentElement
                                            (-> elem.parentElement `getAttribute "for_control_id"))
                                        (progn
                                         (console.log "holding_tank: button_event: " elem.innerText elem)
                                         (cond
                                           (== elem.innerText (dtext "View"))
                                           (swap_control intf (get_control_by_id it))
                                           (== elem.innerText (dtext "Destroy"))
                                           (container_view_operation "destroy" (get_control_by_id it)))))))
                                   
            (initialize (fn ()
                          (when (and view.parentElement
                                     (not initialized))
                            (= initialized true)
                            (-> resize_observer `observe view.parentElement)
                            (console.log "holding_tank: in initialization: " options view.parentElement)
                            (if options.in_tree                                
                              (progn
                               (console.log "holding_tank: in tree and setting view up to block..and calling render")
                               (set_style [["display" "block"]] view)
                               (render_view))
                              (-> (get_by_id "body")
                                  `append view)))))
                        
            (on_focus (fn ()
                        (progn
                         (add_class "juno-focused" control_status ))))
            (control_view (div { `style: "overflow: scroll; margin: 0px; padding: 0px; height: 100%; width: 100%;" }))
            (show (fn ()
                      (let
                          ((root_control (if *last_focus*
                                             (top_frame *last_focus*)
                                             (prop $root_controls 1)))
                           (current_parent (if view.parentElement
                                               (control_position (control_for_dom_element view))
                                               { `child: intf `parent: nil `child_position: 0 }))
                           (target_control (if root_control.controls
                                             (first (-> root_control `controls)))))
                        (console.log "holding_tank: show: " root_control "current_parent: " current_parent "target_control: " target_control)
                        (console.log "holding_tank: do I have a parent_element: " (parents_for_control intf))
                          (cond 
                            (eq current_parent.parent nil)
                            (progn
                             (set_prop options
                                       `in_tree
                                       true)
                             (set_style [["display" "block"]] view)
                             (container_view_operation "split_right" target_control intf { `ratio: 0.8 }))
                            current_parent.parent
                            (progn
                             (set_style [["display" "block"]] view)
                             (set_prop options
                                       `in_tree
                                       true)
                             (set_focus_to intf))))))
            (hide (fn ()
                    (progn
                     (console.log "holding_tank: hide: " view.parentElement)
                     (if view.parentElement
                       (container_view_operation "hide" intf)
                       (remove_prop options
                                    `in_tree)
                       (set_style [["display" "none"]] view)
                        (-> (get_by_id "body")
                            `append view)))))
                             
                          
            (view (div { `tabindex: 0 `control_id: id `style: "display: none; overflow: hidden; margin: 0px; padding: 0px; height: 100%; width: 100%;" }
                       control_status
                       control_view)))

         (attach_event_listener view
                                `click
                                (fn (e)
                                  (when (== e.srcElement.tagName "BUTTON")
                                    (handle_button_event e.srcElement))))
         (set_prop options
                   `id id
                   `name name)
         (= resize_observer (new ResizeObserver perform_resize))        
         
         (= intf
            {
              `view: view
              `type: "holding_tank"
              `id: id
              `name: options.name 
              `initialize: initialize
              `on_focus: on_focus
              `controls: (fn ()
                           (values my_controls))
              `add_control: add_control
              `has_control?: (fn (thing) (if (is_string? thing)
                                           (prop my_controls thing)
                                           (prop my_controls thing.options.id)))
              `remove_control: remove_control
              `name: options.name
              `hide: hide
              `show: show
             
              `resize: perform_resize
              `options: options
              `toJSON: (function ()
                                 `(control_holding_tank ,#(values my_controls)  ,#options ))
              })
          intf)))

(defun empty_selection_control (options)
   (let
      ((existing_control (last (holding_tank_controls))))
      (if existing_control
         existing_control
     (let
        ((options (or options {
                               `name: "Empty Selection" 
                               }))
         (id (or options.id (generate_id "empty")))
         (title_span (span { `class: "juno-title" } (if options.title options.title "Select Control")))
         (buffer_commands_button (commands_button id))
         (control_status (div {  `class: "juno-buffer-bar" }
                              buffer_commands_button
                              (cond (is_array? options.additional_elements)
                                  options.additional_elements
                                  else
                                  title_span
                                  )))
         (resize_observer nil)         
         (initialized false)
         (parent_view nil)
         (check_observer (fn ()
                         (when (not (== view.parentElement parent_view))
                           (-> resize_observer `disconnect)
                           (-> resize_observer `observe view.parentElement)
                           (= parent_view view.parentElement))))
         (perform_resize (fn ()
                           (when view.parentElement
                             (check_observer)
                           (let
                               ((new_height (- (prop view.parentElement `offsetHeight) 20))
                                (new_width  (- (prop view.parentElement `offsetWidth) 5)))
                             
                             (set_style [[ "width" (+ "" new_width "px") ]
                                         [ "height" (+ "" new_height "px") ]]
                                        view)))))
         (initialize (fn ()
                       (when (and view.parentElement
                                  (not initialized))
                         (= initialized true)
                         (= parent_view view.parentElement)
                         (-> resize_observer `observe view.parentElement))))
         (on_focus (fn ()
                   (progn
                     ;; bring focus to the repl
                    (add_class "juno-focused" control_status ))))
         (control_view (div { `class: "juno-empty-content" } ""))
         (view (div { `tabindex: 0 `control_id: id `style: "overflow: hidden; margin: 0px; padding: 0px; height: 100%; width: 100%;" }
                  control_status
                  control_view)))
                             
        (set_prop options
                  `id
                  id)
        (= resize_observer (new ResizeObserver perform_resize))
        
        
       {
           `view: view
           `type: "empty_control"
           `id: id
           `initialize: initialize
           `on_focus: on_focus
           `name: options.name
           `resize: perform_resize
           `options: options
           `toJSON: (function ()
                      `[empty_selection_control ,#options ])
        }))))

(defun find_common_prefix (candidates match_to)
   (let
      ((result [])
       (subset nil)
       (match_to match_to))
      (cond
         (== (length candidates) 0)
         ""
         (== (length candidates) 1)
         (first candidates)
         
         (not (blank? match_to))
         (progn
            (while (progn
                      (= subset (reduce (c candidates)
                                   (when (starts_with? match_to c)
                                      c)))
                      (and (< subset.length 2)
                           (> match_to.length 0)))
               (= match_to (chop match_to)))
            
            (find_common_prefix subset))
         else
         (progn
            (= candidates (sort candidates))  ;; make sure the candidates are sorted
            (for_each (idx (range (length candidates.0)))
               (if (== (prop (first candidates) idx)
                       (prop (last candidates) idx))
                   (push result (prop (first candidates) idx))
                   (break)))           
            (join "" result)))))

(defun place_caret_at_end (el)
   (progn
      (javascript |
                  el.focus();
                  if (typeof window.getSelection != "undefined"
                             && typeof document.createRange != "undefined") {
                     var range = document.createRange();
                     range.selectNodeContents(el);
                     range.collapse(false);
                     var sel = window.getSelection();
                     sel.removeAllRanges();
                     sel.addRange(range);
                     }
                  | )
      true))

(defmacro on_key_down_event (e view `& key_to_action_pairs)
   (let
      ((acc []))     
      ;(assert (and e view key_to_action_pairs)
       ;       "Invalid syntax for on_key_down_event")
      (for_each (key_to_action_pair key_to_action_pairs)
                        (destructuring_bind (key action)
                           key_to_action_pair
                           (if (== key "otherwise")
                               (push acc true)
                               (push acc `(== kcode ,#key)))
                           (push acc action)))
      `(attach_event_listener 
          view
          `keydown
          (function (e)
             (let
                ((kcode e.key))
                (cond
                   ,@acc))))))

(defmacro defcontrol (name control_args allocations control_options)
   (let
      ((declared_allocations (each allocations first))
       (required_allocations [(quote render)])
       (user_allocations allocations)
       (meta { `description: (or control_options.description "No description")
               `tags: (or control_options.tags [`control `ui `DOM ])
               `usage: (if (is_array? control_options.usage)
                           (conj control_options.usage
                                 [ "options:object" ])
                           nil) })
       (args (progn
                (cond
                   (is_array? control_args)
                   (conj control_args [ (quote options) ])
                   else
                   (throw SyntaxError "defcontrol: missing/malformed control arguments - check syntax"))))
       (control_options (if (is_object? control_options)
                            control_options
                            {}))
       (control_bar? (if control_options.control_bar
                        true)))            
       (assert name "control name is required: check syntax for defcontrol")
       (if (< (length (reduce (d declared_allocations)
                         (contains? d required_allocations)))
              (length required_allocations))
           (throw SyntaxError "missing required declarations: must have render"))
  ;; ok, now create the form to be returned..
      `(defun ,#name ,#args
          (let
             ((self {})
              (options (or options {}))
              (`name (name_control (or options.name ,#(desym_ref name))))
              (id (generate_id ,#name))
              (initialized false)
              (title_span (span { `class: "juno-title" } name))
              (command_button (commands_button id))
              (content_view (div { } "uninitialized.."))
              (resize (fn ()
                         (progn
                            (let
                               ((new_height (- (prop view.parentElement `offsetHeight) 20))
                                (new_width  (- (prop view.parentElement `offsetWidth) 5)))
                               (set_style [[ "width" (+ "" new_width "px") ]
                                           [ "height" (+ "" new_height "px") ]]
                                          view)
                               (when options.on_resize
                                  (options.on_resize self))
                               ,#(if control_options.render_on_resize
                                     `(do_render)
                                     true)
                               true))))
              ,@user_allocations
              (control_status (if ,#control_bar?
                                  (div { `class: "juno-buffer-bar" }
                                   command_button
                                   (cond 
                                      (is_array? options.additional_elements)
                                      options.additional_elements
                                      else
                                      title_span)
                                   ,#(if (contains? (quote control_bar_elements) declared_allocations)
                                         (progn
                                            (prop (prop allocations (index_of (quote control_bar_elements) declared_allocations)) 1))
                                         []))
                                  nil))
              (do_render (fn ()
                            (let
                               ((new_view (render self)))
                               (if (and new_view
                                        (not (== content_view new_view)))
                                   (-> content_view `replaceChildren new_view))
                               (if _on_render
                                   (_on_render self)))))
              (resize_observer (new ResizeObserver resize))
              (view (control_frame (to_object
                                       [[`id id]
                                        [`events ,#control_options.events ]])
                     (if ,#control_bar?
                         control_status
                         [])
                                content_view))
              (_on_render (fn ()
                             ,#(if (contains? (quote on_render) declared_allocations)
                                `(on_render self)
                                nil)))
                             
              (_on_focus (fn ()                           
                           (progn
                            ,#(if control_bar?
                                `(add_class "juno-focused" control_status)
                                `[])
                            ,#(if (contains? (quote on_focus) declared_allocations)
                                `(on_focus self)))))
              (_on_destroy (fn ()                                     
                             (progn
                              ,#(if (contains? (quote on_destroy) declared_allocations)
                                  `(on_destroy self)))))
              (_to_json (function ()
                           (progn
                              ,#(if (contains? (quote to_json) declared_allocations)
                                    `(to_json)
                                    `[(quote ,#name) ,@control_args options]))))
              (initialize (function ()
                             (progn
                                (when (and view.parentElement
                                           (not initialized))
                                   (= initialized true)
                                   (-> resize_observer `observe view.parentElement)                                   
                                   ,#(if (contains? (quote on_initialize) declared_allocations)
                                         `(on_initialize self)
                                         true)
                                   (do_render))))))
             (set_prop options
                `id id
                `name name)
             ,@(when (is_array? control_options.expose)
                  (for_each (method_set control_options.expose)
                     (destructuring_bind (method_name method_reference)
                        method_set
                     `(set_prop self
                         ,#method_name ,#method_reference))))
             ,#(if (contains? (quote menu_items) declared_allocations)
                   `(set_prop self
                       `menu_items menu_items)
                   [])
             ;; finally set the required self options
             (set_prop self
                `options options
                `name name
                `type ,#(desym_ref name)
                `view view
                `resize resize                
                `initialize initialize
                `toJSON _to_json
                `on_destroy _on_destroy
                `on_focus _on_focus)
             ;; and return the self
             self)
          ,#meta))
   {
       `description: (+ "The macro defcontrol creates a function in the current namespace that implements the specified "
                        "control features passed to the macro.  The macro handles most of the boiler plate for a basic "
                        "control, combining the passed allocations and options to produce a standardized control "
                        "constructor.  The macro is similar in shape to a defun+let form with some differences.<br><br>"
                        "Like the defun macro, the first argument provides the name of the control that it will be used " 
                        "to construct the name and type of the control.  Also similar to defun, the second argument is "
                        "an array containing any arguments for the control.  Note that, mandatorily, an options argument "
                        "will be appended as the last argument of the argument list, so an empty array passed will "
                        "cause the control only to have an options argument.<br><br>"
                        "The next argument is a series of allocation forms that are integrated into a let allocation "
                        "structure, and so should be in the same form as the allocation block of the let operator.  For "
                        "example, ((render (fn () (div { } \"My View\")))) would meet the minimal requirement for a "
                        "control to be constructed.  The caller of this macro can have as many allocation forms as needed "
                        "to implement the required behavior of the emitted control.  To note that there are "
                        "symbols that made available to these provided forms in the evaluation context of the form that "
                        "can be referenced and used by the user provided forms:<br>"
                        "self:object - The interface object returned.<br>"
                        "content_view:Element - The control's view (not including the control_bar.  Effectively the contents of "
                        "the control view.<br>"
                        "do_render:function - Calls the (render) function provided to the macro.  User code can call this "
                        "function when a redraw is required.<br>"
                        "resize:function - A resize function to invoke if a forced resize is required.<br>"
                        "initialized:boolean - This value is true if the function is initialized or false if it hasn't " 
                        "yet been.<br>"
                        "options:object - The options object passed to the control on instantiation.<br>"
                        "<br><br>"
                        "There are multiple functions that are called upon certain events, which allow the caller to build "
                        "customized behavior and hook into the system when needed.  These functions are specified in the "
                        "allocation forms provided to the macro and are all optional except for render:<br>"
                        "render:function - This function returns the DOM structure assigned to content_view and is what is "
                        "drawn in the control's content container.  If the function returns nil, nothing is done.  Can be "
                        "used in conjunction with the on_render below, which acts on the already drawn view.<br>"
                        "on_focus:function - When a focusing event occurs to the control, this function is called with the "
                        "self object of the macro.<br>"
                        "on_render:function - If this function is specified it will act as the render function so as to "
                        "manipulate an already built view, via the content_view in scope symbol, which is the contents of the "
                        "controls view.<br>"
                        "control_bar_elements:array - If the control is specified with the control_bar control_options set to "
                        "true, the Elements in this array will be placed into the control bar after any runtime additional_elements "
                        "provided to the options object.<br>"
                        "menu_items:function - A function that is called on demand that should return an array containing "
                        "pairs of [menu_text menu_function] that implement any command functionality for the menu.<br>"
                        "on_destroy:function - When the control receives a destroy call, this user provided function will be "
                        "called with the self object.<br>"
                        "on_initialize:function - Upon initialization, this function will be called with the self function. It "
                        "should be expected that the initialization should be called only once for a control lifespan.<br>"
                        "to_json:function - This synchronous function call can be used to provide a customization hook "
                        "for the control.  The return value must be a structure that can be serialized into JSON form.<br><br>"
                        "The final object, control_options is meta data and other flags for the macro:<br>"
                        "exposes:array - An array of pairs that specify [ `function_handle function_to_call ] that are placed "
                        "on the self interface and provide the API for the control.  In order for a resource in the control "
                        "scope to be accessed, it must be specified in this option, otherwise the function remains effectively "
                        "private to the control.<br>"
                        "usage:array - The argument specification for the macro"
                        "description:string - The description of the control that is registered in the Environment.<br>"
                        "control_bar:boolean - If a control bar is to be displayed on the top of the control, set this to "
                        "true.<br>")
       `usage: ["name:symbol" "control_arguments:array" "allocations:array" "control_options:object"]
       `tags: ["control" "define" "controls" "ui"]
   })

(defcontrol tree_browser ()
   ((options (or (and (is_object? options)
                          options)
                     (throw SyntaxError "options object is required for tree_browser")))
    (stack [])
    (initial_render false)
    (title_span (span { spellcheck: false `contenteditable: true `tabindex: 0 `style: "caret-color: red; outline: none; display: inline-block; font-size: 1.1em; font-weight: bold; font-family: var(--main-mono-space); min-width: 10px; border: 1px dotted goldenrod; padding-left: 5px; padding-right: 5px" } ""))
    (on_destroy (fn (self)
                  (progn
                   (when options.on_destroy                     
                     (options.on_destroy self))
                   true)))
    (current_pos 0)
    (content_view (div { `style: "" `class: "juno-symbol-browser" }))
    (get_current_stack (fn ()
                           (clone stack)))
    (ol_for_pos (fn (pos)
                   (let
                      ((target_col nil))
                      (= target_col (-> content_view `querySelector (+ "ol[pos='" (if pos pos 0) "']")))
                      target_col)))
    
    (select_child (fn (ol_elem selected_child_text)
                     (when selected_child_text
                        (for_each (child ol_elem.children)
                           (if (and (is_element? child)
                                    (== (get_attribute child "path_value") selected_child_text))
                               (add_class "juno-selected" child)
                               (remove_class "juno-selected" child))))))
    (path_sep (fn ()
                 (or options.path_separator "/")))
    
    (num_ol_elems (fn ()
                     (length content_view.children)))
    
    (create_ol_at_pos (fn (pos)
                         (let
                            ((stack_value_at_pos (prop stack pos))
                             (contents (get_possibles pos)))
                            (ol { `style: (if (not (is_array? contents))
                                              "width: 100%; max-width: 100%; position: relative;"
                                              "height: calc(100% - 20px);  position: relative;")
                                 `pos: pos }
                                contents))))
    
    (find_value (fn (elem key)
                   (let
                      ((v nil))
                      (cond
                         (= v (get_attribute elem key))
                         v
                         elem.parentElement
                         (find_value elem.parentElement key)
                         else
                         nil))))
    
    (get_specifics_for_event (fn (e)
                                (let
                                   ((elem e.srcElement)
                                    (path_value (find_value elem "path_value"))
                                    (pos (int (find_value elem "pos"))))
                                   (set_path_at pos path_value))))
    
    (set_path_at (fn (pos path_value)
                    (when path_value
                       (cond
                          (== pos stack.length) ;; at end
                          (progn
                             (push stack path_value)
                             (render_stack))
                          (< pos stack.length)
                          (progn
                             (= stack (-> stack `slice 0 pos))
                             (push stack path_value)
                             (clear_suffix)
                             (render_stack))
                          else
                          (log "set_path_at: unhandled: " pos path_value)))))
    (at_leaf (fn ()
                (not (has_class? "filtered-hidden" instruction_div))))
    
    (get_path_components (fn ()
                            (let
                               ((text (or title_span.innerText ""))
                                (ps (path_sep)))
                               (if (ends_with? ps text)
                                   (= text (chop text)))
                               (split_by ps text))))
    (get_suffix (fn ()
                   (let
                      ((comps (get_path_components)))
                      (if (> comps.length stack.length)
                          (last comps)
                          ""))))
    
    (clear_suffix (fn ()
                     (let
                        ((elem (ol_for_pos stack.length))
                         (ps (path_sep)))
                        (set_prop title_span
                           `innerText (+ (join ps stack)
                                         (if (and (> stack.length 0)
                                                  (not (at_leaf)))
                                             ps
                                             "")))
                        (if elem
                            (for_each (c elem.children)
                               (remove_class "filtered-lower-opacity" c))))))
                        
    (get_matches (fn (k highlight?)
                    (let
                       ((num_matches 0)
                        (pos stack.length)
                        (addl (if (blank? k) "" k))
                        (suffix (+ (get_suffix) addl))
                        (matched [])
                        (first_match nil)
                        (not_matched []))                       
                       (if (< pos 0)
                           []
                           (aif (ol_for_pos pos)
                                (for_each (c it.children)
                                   (progn
                                      (if (and (not (blank? suffix))
                                               (starts_with? suffix c.innerText))
                                          (push matched
                                                c)
                                          (push not_matched
                                                c))))))
                       (when highlight?
                          
                          
                          (for_each (elem not_matched)
                             (add_class "filtered-lower-opacity" elem))
                           (for_each (elem matched)
                              (remove_class "filtered-lower-opacity" elem)))
                       (= first_match matched.0)
                       (when first_match
                          (set_prop first_match.parentElement
                             `scrollTop
                             (- (prop first_match `offsetTop) 10)))
                       matched)))
    
    (get_last_column_values (fn ()
                               (let
                                  ((elem (ol_for_pos stack.length)))
                                  (if elem
                                      (for_each (c elem.children)
                                         (prop c `innerText))
                                      []))))
    
    (matched_as_text (fn (matched)
                        (map (fn (v)
                                v.innerText)
                             matched)))
    (last_suffix nil)
    (select_matches (fn (k)
                       (let
                          ((text nil)
                           (in_reverse (== k "Backspace"))
                           (matched nil)
                           (prefix nil)
                           (existing_suffix nil)
                           (ps (path_sep))
                           (at_leaf? (at_leaf)))                         
                          ;; are we going forward or backwards?
                          ;; if forwards, determine if we pressed a delim key or a regular key
                          ;; if we pressed a delim key, and the final path segment matches an element in the column, push that value to the stack, and redraw the columns and the title_span
                          ;; if we pressed a regular key, find the common prefixes, write that to the title_span,
                          ;; ...and follow the filter process.
                          ;; if we matched to a leaf, display the instruction_div 
                          
                          ;; if backwards, determine if we are at a leaf or not
                          ;; if we are, remove the character from the title_span, pop the stack, find the common prefix, write that to the title_span, follow the filter process
                          ;; if we are not, remove the character, find the common prefix, write that to the title_span and 
                          ;; follow the filter process
                          
                          ;; Filter process:
                          ;; Determine the amount of matched elements at the last path segment
                          ;; if 1 match then append the value to the path and redraw the title and the column selectors
                          ;; if >1 then find the common prefix, and append the common prefix to the title_span
                          ;; ..and highlight the matching values in the column
                          ;; if 0 matches don't append the character since it cannot contribute to narrowing the selection
                          
                          (cond
                             in_reverse
                             (progn 
                                (when at_leaf? ;; if we are at leaf state, remove the final value from the stack
                                    (pop stack)
                                    (add_class "filtered-hidden" instruction_div))
                                ;; find the common prefix with one character removed
                                (= existing_suffix (get_suffix))                                
                                (when (not (blank? existing_suffix))
                                   (= prefix (find_common_prefix (get_last_column_values) (chop existing_suffix))))
                                (when (== prefix last_suffix)
                                    ;; we had this value last backspace, so we need to go back further
                                    (= prefix "")
                                    (= last_suffix nil))
                                (cond
                                   (blank? existing_suffix)  ;; there is no suffix, so pop the stack 
                                   (progn                                      
                                      (pop stack)
                                      (clear_suffix)
                                      (render_stack))
                                   
                                   (blank? prefix)  ;; when no common prefix remove the suffix altogether
                                   ;; we will have to rebuild the title_span explicitly otherwise suffix will be preserved
                                   (progn
                                      (clear_suffix)
                                      (render_stack))
                                      ;; clear all the matches..
                                   (> (length prefix) 0)
                                   (progn
                                      (clear_suffix)                                     
                                      (render_stack prefix)
                                      (= last_suffix prefix)
                                      (get_matches "" true))
                                   else
                                   ;; just clear the last suffix 
                                   (= last_suffix nil)))
                                ;; if we were at a leaf, we are no longer so remove the leaf node from the stack
                               
                             (or (== k ps)
                                 (== k "Tab"))
                             (progn
                               (when (and (> (length title_span.innerText) 0)
                                          (not (ends_with? ps title_span.innerText)))
                                  (push stack
                                        (get_suffix))
                                  (render_stack)
                                  (clear_suffix)
                                  (place_caret_at_end title_span)))
                             else
                             (progn
                                (= matched (get_matches k true))                                                               
                                (cond                                  
                                   (== (length matched) 1)  ;; ok we matched only 1 so go ahead and put it into the stack
                                   (progn
                                      (push stack 
                                            (first (split_by "\n" matched.0.innerText)))                                      
                                      (try (render_stack)
                                         (catch Error (e)
                                            (log "ERROR: " e.message))))
                                   (> (length matched) 1)  ;; multiple matches, so add the character to the suffix
                                   (progn
                                      ;; find the common prefix and render title
                                      (= prefix (find_common_prefix (matched_as_text matched) (get_suffix)))
                                      ;; subtract suffix                                                                            
                                      (render_title prefix)))))
                          (= last_suffix (get_suffix))
                           true)))
                                   
                                ;; if it is a control type type don't display
    
    (instruction_div (span {`style: "padding-left: 8px; padding-right: 8px; margin-left: 30px; font-weight: bold; color: var(--value-modified-color);"  `class: "filtered-hidden"  } (dtext "Press Enter To Open")))
    (prefix_div (span { `style: "font-size: 1.1em; margin-right: 8px;" } (dtext "Select or Type:")))
    (open_selection (fn ()
                       (when (and (not (has_class? "filtered-hidden" instruction_div))
                                  options.on_select
                                  (options.on_select stack)))))
    (handle_enter_event (fn (e)
                           (cond
                              (== e.srcElement title_span)
                              (progn
                                 (handle_event e)
                                 (open_selection))
                              else
                              (get_specifics_for_event e))))
   
    (on_initialize (fn (self)
                      (progn
                          (on_key_down_event e view
                             ("Enter" (progn
                                         (handle_enter_event e)))
                                         
                             ("Escape" (progn
                                          (handle_event e)
                                          (destroy_control self)))
                             ("Tab" (progn
                                       (if (not (at_leaf))
                                           (handle_event e))
                                       (select_matches e.key)))
                             (`otherwise (progn 
                                            (when (== e.srcElement title_span)
                                               (handle_event e)
                                               (select_matches e.key)))))
                         (-> title_span.parentElement
                             `appendChild
                             instruction_div)
                         (-> title_span.parentElement `insertBefore
                             prefix_div title_span)
                         (add_class "juno-highlighted" title_span.parentElement)
                         (attach_event_listener content_view
                                                `click
                                                get_specifics_for_event ))))
    
    (get_possibles (fn (pos)
                       (cond 
                          (is_function? options.get_possibles_elem)
                          (-> options `get_possibles_elem pos)
                          (is_function? options.get_possibles)  ;;  returns either a single obj with keys or an array of those objects
                          ;; keys: ctype has_children? title path_value  and view
                          (let
                                ((idx -1)
                                 (val nil)
                                 (filter_text (last (split_by (or options.path_separator "/") title_span.innerText))))
                                (= val (-> options `get_possibles pos self))
                                (if (not (is_array? val))
                                    (remove_class "filtered-hidden"  instruction_div)
                                    (add_class "filtered-hidden" instruction_div))                                
                                (cond
                                   (is_array? val)
                                   (for_each (obj val)
                                      (progn
                                         (inc idx)
                                         
                                         (li { `tabindex: 0
                                                `ctype: (or obj.ctype "sym" )
                                               `title: obj.title
                                               `class: (+ "juno-list-item " 
                                                          (if obj.has_children? "juno-list-item-has-children " "") 
                                                          (if (and (not (blank? filter_text))
                                                                   (not (starts_with? filter_text obj.path_value)))
                                                              "filtered-lower-opacity"
                                                              ""))
                                               `style: (or obj.style
                                                           "")
                                               `path_value: obj.path_value
                                               } 
                                               (if obj.view 
                                                   obj.view 
                                                   idx))))
                                         
                                   (is_object? val)
                                   (li { `tabindex: 0
                                         `ctype: (or val.ctype "sym" )
                                         `title: val.title
                                         `class: (+ "juno-list-item " (if val.has_children? "juno-list-item-has-children " "") (if val.class val.class ""))
                                         `style:  (+ "height: calc(100% - 20px); " (if val.style val.style ""))
                                         `path_value: (or val.path_value nil)
                                         } (if val.view val.view idx))
                                   (is_string? val)
                                   (pre { `tabindex: 0 `ctype: "string" `style: "min-width: 200px; overflow: scroll; width: calc(100% - 50px);" }
                                    val)
                                   else
                                   (pre { `tabindex: 0 `ctype: (subtype val) `style: "min-width: 200px;overflow: scroll; width: calc(100% - 50px);" }
                                    (value_to_dom val))))
                           else
                           (div { } "Missing get_possibles function or get_possibles_elem in options"))))
    
    (render_title (fn (new_suffix)
                     (let
                        ((suffix (or new_suffix (get_suffix) ""))
                         (ps (path_sep)))                       
                        (set_prop title_span
                           `innerText
                           (+ (join ps stack)
                              (cond 
                                 (at_leaf)
                                 ""
                                 (and (blank? suffix)
                                      (> stack.length 0))
                                 ps
                                 (== stack.length 0)
                                 (+ "" suffix)
                                 else
                                 (+ ps suffix))))
                        (place_caret_at_end title_span))))
    
    (render_stack (fn (prefix)
                     (let
                        ((ol_elem nil))
                        
                        (when (== stack.length 0)
                              `innerText "")
                        (when (> (num_ol_elems) stack.length)
                           (for_each (pos (range_inc  stack.length (num_ol_elems)))
                              (progn
                                 (= ol_elem (ol_for_pos pos))
                                 (when ol_elem
                                    (-> ol_elem `remove)))))
                        ;; is the stack already drawn, or do we need to render it?
                        (for_each (pos (range (+ stack.length 1)))
                           (progn
                              (= ol_elem (ol_for_pos pos))
                              (if ol_elem
                                  (select_child ol_elem (prop stack pos))
                                  (-> content_view `append
                                      (create_ol_at_pos pos)))))
                        (render_title prefix))))
    
    (on_render (fn (self broaden)
                       (let
                          ((next_elem nil))
                          ;(render_stack)
                          nil)))
                          
    (render (fn ()
               (if (not initial_render)
                   (progn
                      (= initial_render true)
                      (render_stack)
                      content_view)
                   nil))))
   {
     `control_bar: true
     `expose: [[`get_current_stack get_current_stack]]
     })



(defun file_tree_browser(options)
    (let
       ((open_button (button { `class: "juno-primary" `style: "font-weight: bold;" } "Open"))
        (render_entry (fn (entry)
                         (let
                              ((etype (fn (entry)
                                         (cond
                                                entry.isDirectory "directory"
                                                entry.isFile "file"
                                                entry.isSymlink "symlink")))
                               (rval nil))
                              (= rval
                               {
                                 `has_children?: entry.isDirectory
                                 `path_value: entry.name
                                 `class: (etype entry)
                                 `ctype: "sym"
                                 `view: (div { `style: "display: inline-block; width: 100%;"
                                               `class: (+ "juno-type-file-entry " (etype entry)) }
                                               entry.name
                                               (if entry.isDirectory
                                                    (span { `style: "display: inline-block; float: right" } "▸")
                                                      "")) })
                              ;(log "render_entry: entry rval: " rval rval.view.outerHTML)
                              rval)))
        
        (get_possibles (fn (pos control)
                           (let
                              ((next_values (if (== pos 0)
                                                (http/list_files "/")
                                                (http/list_files (join "/" (-> control `get_current_stack))))))
                              (when (is_array? next_values)
                                 (sort next_values { `key:`name }))
                              ;(log "next_values: " (clone next_values))
                              (= next_values (clone next_values))
                              (cond
                                 (is_array? next_values)
                                 (for_each (entry next_values)
                                    (render_entry entry))
                                 (instanceof next_values Blob)
                                 {
                                   `has_children?: false
                                   `ctype: "file"
                                   `style: "width: calc(100% - 10px) !important;"
                                   `view: (div { `style: "display: inline-block; width: calc(100% - 50px); height: 100%; overflow: hidden" }
                                           (div { `style: "height: calc(100% - 30px); overflow: scroll;" }
                                            (pre {} (-> next_values `text)))
                                           (div { `style: "padding: 10px;" }
                                            open_button))
                                   }
                                 else
                                 {
                                   `has_children?: false
                                   `ctype: "file"
                                   `view: (pre {} (sub_type next_values))
                                   }))))
        
        (control (tree_browser (+ { `path_separator: "/"
                                    `render_entry: render_entry
                                    `get_possibles: get_possibles}
                                    (if (is_object? options)
                                        options
                                        {})))))
       
                                    
       (attach_event_listener open_button
                              `click
                              (fn (e)
                                 (when options.on_select 
                                    (try
                                       (options.on_select (-> control `get_current_stack) control)
                                       (catch Error (e)
                                          (progn
                                             (log "file_tree_browser: error on on_select handler: " e.message e)
                                             (notify (+ "Error: " e.message))))))))
       control))



(defun save_active_buffer (save_all)
  (cond
    save_all
    (for_each (control (select_controls (fn (ctl) (is_function? (prop ctl `save)))))
              (-> control `save))
    (and *last_focus*
         (prop *last_focus* `save))
    (-> *last_focus* `save)
    *last_focus*         
    (notify (+ "" (or (prop *last_focus* `name) "Unnamed") " " (dtext "doesn't have a save method") "."))
    else
    (notify (dtext "There isn't an active control."))))
    
    

(defcontrol line_display ()
   ((menu_items (fn ()
                   [["Test" (fn ()
                               (notify "Notify Test Menu"))]]))
    (current_value (or "Not Set"))
    (set (fn (val)
            (progn
               (= current_value val)
               (do_render))))
    (render (fn ()
               (div { `class: "juno-mono-space" `style: "white-space: nowrap; overflow: hidden; text-overflow: ellipsis;" }
                current_value))))
   {
       `buffer_bar: false
       `expose: [[`set set]]
       `usage: []
   })

(defun handle_app_click_event (e)
  (let
      ((elem e.srcElement)
       (elem_type e.srcElement.tagName)       
       (control_id (get_attribute elem "control_id"))
       (control (if control_id
                  (get_control_by_id control_id)))
       (parents (each (parents_for_control control) `name)))
    (cond
      (and (has_class? "juno-command-button" elem)
           (== elem_type "BUTTON")           
           control)
      ;; a command button was clicked show the menu for the control
      (let
          ((control_menu (conj (if (is_function? control.menu_items)
                                 (-> control `menu_items)
                                 [[]])
                               [[(dtext "Swap") (reduce (other_control (current_controls true))
                                                         (unless (or (== other_control control)
                                                                     (eq nil other_control.name)
                                                                     (contains? other_control.name parents))
                                                                 [other_control.name (fn () (swap_control control other_control)) ]))]
                                [(dtext "Hide") (fn ()
                                                  (hide_control control))]
                                ["--" nil]
                                [(dtext "Destroy") (fn ()
                                                     (destroy_control control))]])))
        (make_menu elem control_menu)))))

      
                                                 



(defun app_menu(global_menu_path options)
  (let
      ((view nil)
       (options (either options {}))
       (top_levels [])
       (menu_trees (resolve_path global_menu_path Environment.global_ctx.scope))
       (id (or options.id (generate_id "app_menu")))
       (intf {})
       (menu_trees (or menu_trees []))
       (compute_top_levels (fn ()
                             (each menu_trees `0)))
       (help_idx nil)
       (add_menu (fn (menu)
                   (let
                       ((existing_idx (index_of menu.0 top_levels)))
                     (if (== existing_idx -1)
                       (push menu_trees
                             menu)
                       (-> menu_trees `splice existing_idx 1 menu))
                     (set_path global_menu_path Environment.context.scope menu_trees)
                     (build_view))))
       (remove_menu (fn (menu_text)
                      (let
                          ((existing_idx (index_of menu_text top_levels)))                           
                        (when (and (> existing_idx -1)
                                   (prop view.children existing_idx))
                          (-> (prop view.children existing_idx)
                              `remove)
                          (-> menu_trees `splice existing_idx 1))
                        (set_path global_menu_path Environment.context.scope menu_trees))))
       (show_sub_menu (fn (e)
                         (let
                            ((idx (-> e.srcElement `getAttribute `idx))
                             (menu_header (if (== e.srcElement.tagName "SPAN")
                                              e.srcElement.parentElement
                                              e.srcElement))
                             (pos (-> menu_header `getBoundingClientRect))
                             (help_menu_function nil)
                             (on_select (fn ()
                                           (when menu_header
                                              (remove_class "juno-menu-selected" menu_header))))
                             (mview nil)
                             (menu nil))
                            (aif (get_by_id "cmenu")
                                 (-> it `remove))
                            (remove_class "juno-menu-selected" menu_header)
                            (when idx
                               (add_class "juno-menu-selected" menu_header)
                               (if (== (parseInt idx) help_idx)
                                   (= help_menu_function *help_menu_function*)
                                   (= help_menu_function nil))
                               (console.log "app_menu: clicked: " idx "help_idx: " help_idx (prop menu_trees (parseInt idx)))
                               (aif (or help_menu_function
                                        (resolve_path [ (parseInt idx) 1 ] menu_trees))
                                    (progn
                                       (cond
                                          help_menu_function
                                          (= menu (menu_tree (it) { `on_select: on_select } ))
                                          (is_function? it)
                                          ;; if the underlying menu is a function, call the function to get..
                                          ;; up to the minute menu contents
                                          (= menu (menu_tree (it (first (prop menu_trees (parseInt idx)))) { `on_select: on_select } ))
                                          ;; other wise it is a standard menu, which may not rehydrate well depending
                                          ;; on how it was created..
                                          else
                                          (= menu (menu_tree it { `on_select: on_select } )))
                                       (= mview (div { `id: `cmenu `class: "juno-menu" `style: " z-index: 30" }
                                                     menu.view))
                                       (set_style [["position" "absolute"]
                                                   ["left" (+ "" (Math.max 0 pos.left 0) "px")]
                                                   ["top" (+ "" (Math.max 0 pos.bottom ) "px") ]]
                                                  mview)
                                       (-> (get_by_id "body") `appendChild
                                           mview))
                                    (progn
                                       (remove_class "juno-menu-selected" menu_header)
                                       (notify "Unable to find menu resource")))))))
       (build_view (fn ()
                       (let
                           ((new_view nil)
                            (header_elem nil))
                         (= top_levels (compute_top_levels))
                         (unless options.disable_help
                                 (push top_levels
                                       "Help")
                                 (= help_idx (- (length top_levels) 1)))
                         
                         (= new_view
                            (ul { `id: id `class: "pure-menu-list" `style: "margin-left: 10px" }
                                (if (> top_levels.length 0)
                                  (map (fn (top_level idx)
                                         (li { `idx: idx  `class: "juno-menu-header juno-main-menu-header" }
                                             (span { `idx: idx `class: "juno-menu-item" } (dtext top_level))))
                                       top_levels)
                                  [])))
                         (map (fn (child)
                                 (progn
                                    (attach_event_listener child
                                       `mouseenter
                                       (fn (e)
                                          (progn
                                             (when (get_by_id "cmenu") ;; if the menu is already showing show the new menu, otherwise don't do anything
                                                (remove_class "juno-menu-selected" new_view.children)
                                                (show_sub_menu e)))))
                                    (attach_event_listener child
                                       `mouseleave
                                       (fn (e)
                                          true))))
                              new_view.children)
                         (attach_event_listener new_view
                                                `click
                                                show_sub_menu)
                                                                        
                         
                         (if view.parentElement
                           (-> view `replaceWith new_view))
                         (= view new_view)
                         view))))
    
    
    (build_view)
    (set_prop options
              `id
              id)
    (set_prop intf
              `view view
              `add_menu add_menu
              `remove_menu remove_menu
              `type "app_menu"
              `toJSON (function ()
                                `(app_menu ,#global_menu_path ,#options)))
    (setq *app_menu_control* intf)
    intf))

(defun app_header (controls options)
  (let
      ((existing_header (-> document `querySelector "header"))
       (intf nil))
    (when (eq existing_header nil)
      (-> (first (get_by_tag "body"))
          `prepend
          (= existing_header (header { `id: "page-header" class: "juno-page-header" }))))
    (when options.app_title
      (-> existing_header `appendChild (span { `class: "juno-header" } options.app_title)))
    (for_each (`elem controls)
              (progn
               (cond
                 elem.view
                 (-> existing_header `appendChild elem.view)
                 (is_element? elem)
                 (-> existing_header `appendChild elem)
                 else
                 (create_dom_element "span" elem))))
    (set_prop options
              `id
              (or options.id "app-header"))
   
    (= intf
       {     
        `options: options
        `controls: controls
        `type: "app_header"
        `toJSON: (function ()
                           `(app_header ,#controls ,#options))
        })
    
    intf))


(defun build_starter_environment ()
  (if is_served?
    (progn
     (floating_div (iframe { width: 500 height: 300
                   `style: "width: 90%; min-width: 500px; overflow: scroll; border: 0px solid transparent;"
                   src: (+ "/env/starter.html?theme=" (resolve_path [ `application `global_theme ] *env_config*))} )))))


(defun controls_by_parent ()
    (let
        ((acc [])
         (current { `root: [] })
         (found_control {})
         (control_identity (fn (control)
                                 (and control
                                      (or control.name
                                          control.options.id
                                          "Untitled"))))
         (collect_control (fn (control parent)
                              (when (and control.options.id 
                                         (not (prop found_control control.options.id)))
                                 (when (and parent
                                            (not control.name))
                                     (cond
                                         parent.name
                                         (set_prop control
                                                   `name
                                                   (+ "" parent.name "-" control.type))
                                         parent.type
                                         (set_prop control
                                                   `name
                                                   (+ "" parent.type "-" control.type))))
                                 (cond
                                     (and parent
                                          (not (prop current (control_identity parent))))
                                     (set_prop current 
                                               (control_identity parent)
                                               [ control ])
                                     (and parent
                                          (prop current (control_identity parent)))
                                     (push (prop current (control_identity parent))
                                               control)
                                     (eq nil parent)
                                     (push (prop current `root)
                                               control))
                                 (set_prop found_control
                                           control.options.id
                                           control)))))
        (for_each (controls (or $root_controls []))
           (control_tree controls collect_control))
        current))

(defun all_global_controls (namespace)
   (let
      ((env_handle (if namespace 
                       (-> Environment `get_namespace_handle namespace)
                       nil)))
      (if namespace
          (reduce (pset (pairs env_handle.context.scope))
             (destructuring_bind (symbol_name symbol_value)
                pset
                (if (is_control? symbol_value)
                    symbol_name)))
          (flatten (for_each (namespace (namespaces))
                      (for_each (ctl (all_global_controls namespace))
                         (+ namespace "/" ctl))))))
   {
     `description: (+ "Returns all controls in the global context.  If provided " 
                      "with a namespace, it will return only the controls for "
                      "that namespace, otherwise it will return all controls "
                      "in every namespace in a fully qualified form.")
     `usage: ["namespace:?string"]
     `tags: [`controls `ui `global]
     })


(defun serialize_controls (controls)
  [(quote quote) [(quote quote) (JSON.parse (JSON.stringify controls))]])



(defun save_control_image ()
  (progn

   (log (dtext "Saving Application State.."))
   (set_focus_to nil)
   (defvar system_repl *system_repl*)
   (= *system_repl* nil)
   
   (= *serialized_controls* (serialize_controls $root_controls))
      ;[(quote quote) [(quote quote) (JSON.parse (JSON.stringify $root_controls))]])
   (console.log "*serialized_controls*: " *serialized_controls*)
   
   (log (dtext "Save Application State Results: ") (save_image))
   (log (dtext "Complete"))
   (= *system_repl* system_repl)))

(defun rehydrate_controls (container serialized_controls)
  (let
      ((control nil))
    (for_each (`serialized_control serialized_controls)
      (progn
       (= control (eval serialized_control))
       (when (and control.view
                  (not control.view.parentElement))
         (-> container
             `append control.view))
       (push $root_controls
             control)
       (when control.initialize
         (-> control `initialize))))))



(defun_sync to_indent (str)
    (join "" (for_each (c (range str.length))
                       " ")))

           
(defun_sync juno_format_handler (line tab base_indent)
   "")  ;; we let the control take care of this since it has better visibility to prior lines




(defun new_buffer (options)
  (let
      ((options (cond
                   (is_array? options)
                   { `path: options `type: "juno"}
                   (is_object? options)
                   options
                   (is_string? options)
                   { `path: [ options ] `type: "juno" }
                   else
                   { `type: "juno" }))
       (target_container (or *last_focus*  (default_focus)))
       (symbol_data (if options.path
                        { `path: options.path `namespace: (or options.namespace (current_namespace)) }
                        (symbol_chooser "Select a symbol to edit" options.type)))
       (target_ns symbol_data.namespace)
       (target_env nil))
      (console.log "new_buffer: for: " options target_ns symbol_data)
      
    (when target_ns
      (= target_env (-> Environment `get_namespace_handle symbol_data.namespace)))
    (when (and target_env (not (resolve_path symbol_data.path target_env.global_ctx.scope)))
       (console.log "new_buffer: target symbol doesn't exist: creating it")
       (set_path symbol_data.path target_env.global_ctx.scope ""))
    (when symbol_data.path
      (if (is_top_control? target_container)
        (container_view_operation "split_right" (first (-> target_container `controls))
                                  (buffer_editor (last symbol_data.path) target_ns symbol_data.path options.type options))
        (swap_control target_container (buffer_editor (last symbol_data.path) target_ns symbol_data.path options.type options )))))
  {
      `description: (+ "Opens a new editor, if possible, in the currently focused control.  If necessary, it may "
                       "split the view to the right for the new editor.  If no options are provided, the user "
                       "will be prompted for a symbol to edit.  Options can be: <br>"
                       "string: is considered a symbol name and the function will open or create the " 
                       "specified symbol in the current namespace global context.<br>"
                       "array: is considered a path to access, and if the path is present will open the path.  If not, "
                       "will attempt to create the final value in the path as a string for editing.<br>"
                       "object: if an object, the object can contain:<br>"
                       "  path: array: the path to the symbol to be edited.  If the final path segment doesn't exist "
                       "it will create it.<br>"
                       "  namespace: string: the namespace to use for accessing the provided path.<br>"
                       "  type: the mode to open the editor in. The default mode is Juno.<br>")
      `tags: ["editor" "edit" "buffer" "control"]
      `usage: ["options:object?"]
  })



(defun wait_for_file_selection () 
   (new Promise (fn (resolve reject)
                   (let
                       ((selection nil)
                        (target_control (or *last_focus* (default_focus)))
                        (control (file_tree_browser { `on_select: (fn (stack)
                                                                    (progn
                                                                     (= selection (join "/" stack))
                                                                     (if (> stack.length 0)
                                                                       (progn
                                                                        (destroy_control control)))))
                                                                        
                                                     `on_destroy: (fn (self)
                                                                    (progn
                                                                     (setTimeout (fn ()
                                                                                    (progn
                                                                                       (set_focus_to target_control)
                                                                                       (resolve selection))
                                                                                    20))
                                                                     true)) })))

                     (place_control `below control)
                     (set_focus_to control))))
   {
       `description: (+ "Opens a file tree browser for selection of a file.  Once the a " 
                        "file is chosen, or the selection is cancelled via escape, then either "
                        "the selected path is returned, or nil if cancelled or closed.")
       `usage:[]
       `tags: ["UI" "DOM" "file" "editor" "select" "open"]
   })



(defun edit_file (options)
   (let
      ((options (if (and (is_object? options)
                         options.filename)
                    options
                    (progn
                       {
                           filename: (wait_for_file_selection)
                       })))
       (symbol_path (cond
                       (is_array? options.path)
                       options.path
                       (is_string? options.filename)
                       (conj ["filesystem"] (split_by "/" options.filename))))
       (acc []))
      (if (eq options.filename nil)
          (return nil))
      (assert (and symbol_path options.filename) "Invalid options to edit_file")
      (if (and (starts_with? "filesystem" symbol_path)
               (eq nil (resolve_path symbol_path Environment.global_ctx.scope)))
          (progn
             (for_each (comp (chop symbol_path))
                (progn
                   (push acc comp)
                   (set_path acc Environment.global_ctx.scope {})))
             (push acc (last symbol_path))
             (set_path acc Environment.global_ctx.scope "")))
      (set_prop options
         `path
         symbol_path)
      (alert_on_error "File Open Error"
         (new_buffer options)))
   {
       `description: (+ "If provided an options object with a filename key and file path value, "
                        "the function will attempt to fetch and present that file for editing. "
                        "If an error is encountered, the error will be presented to the user "
                        "in a popup window and nil returned.  If called with no options, the "
                        "function will prompt the user to select a file via a file_tree_browser "
                        "control.")
       `usage: ["options:object"]
       `tags: ["DOM" "ui" "file" "edit" "open"]
   })
         
      

(defun set_key_binding (scope name desc)
  (let
      ((target (resolve_path [ scope ] *key_bindings*))
       (key_mode (get_operating_platform)))
    (progn
     (set_prop target
               name
               desc)
     (set_prop *key_bindings*.active
               (prop desc key_mode) 
               (prop desc `exec)))))

;; build a more sophisticated keyword_mapper
(defun_sync keyword_mapper (token)
   (progn
      (defvar details nil)
      (defvar rval
         (cond
            (contains? token *formatting_rules*.keywords)
            "keyword"
            (progn
               (setq details
                     (first (meta_for_symbol token true)))
               details.type)
            (lowercase details.type)
            else
            "identifier"))      
      rval))

;; and redirect the core/keyword_mapper

(use_quoted_initializer
 (defun_sync core/keyword_mapper (token)
   (user/keyword_mapper token)))

(defun gen_file_menu ()
   [["New Editor" [["Juno Lisp" (fn (e) (new_buffer { `type: "juno" }))]
                   ["Javascript" (fn (e) (new_buffer { `type: "javascript" })) ]
                   ["CSS" (fn (e) (new_buffer { `type: "css" })) ]
                   ["Text" (fn (e) (new_buffer { `type: "text" })) ]
                   ["JSON" (fn (e) (new_buffer { `type: "json" }))]]]
    (if is_served?
      ["Open File" edit_file ]
      [])
    (if is_served?
      ["Generate Starter Environment" build_starter_environment]
      [])
    (if (and *last_focus*
             (is_function? (prop *last_focus* `get)) ;; does it have a get method for the text
             (prop *last_focus* `name))  ;; and a name to identify it
        [(+ (dtext "save") " " 
            (or (aif (resolve_path [ `options `filename ] *last_focus*)
                     (last (split_by "/" it)))
                (resolve_path [ `options `name ] *last_focus*)
                "")
            "...")
          [(if is_served?
               [(dtext "to server file") (fn (e) (handle_save_file *last_focus* { `remote: true }))]
               [])
           [(dtext "as local file") (fn (e) (handle_save_file *last_focus*))]]]
        [])    
    ["Save Environment" (fn (e) (save_control_image)) ]
    ["Load File Into Environment" (fn (e) (-> resource_loader_button `click)) ]
    (if *global_themes*
        ["Set Global Theme" (for_each (theme_name (keys *global_themes*))
                               [theme_name (fn ()
                                              (set_global_theme theme_name))])]
        [])])

(defun gen_layout_menu ()
   (let
      ((menu_acc [])
       (idx 0)
       (holding_tank (get_control_by_name "Holding Tank"))
       (root_ctls (new Set)))
      (reduce (pset (pairs (controls_by_parent)))
         (destructuring_bind (key controls)
            pset
            (console.log "key: " key "is the holding tank?" (== (get_control_by_name key) holding_tank) controls  )
            (cond
               (== key "root")
               (progn
                  (for_each (control controls)
                     (-> root_ctls `add control.name))
                  nil)
               
               (and (-> root_ctls `has key)
                    (not (== key "Holding Tank")))
               [key (for_each (operation ["Split Right" "Split Bottom" "Show" "Hide"])
                       (progn
                          (defvar control (get_control_by_name key))
                          [(dtext operation)
                           (cond
                              (and (> idx 1)
                                   (== operation "--"))
                              nil
                              (== operation "Split Right")
                              (fn ()
                                (place_control "right" (empty_selection_control)))
                              (== operation "Split Bottom")
                              (fn ()
                                (place_control "below" (empty_selection_control)))
                              (or (and (== operation "Show")
                                       (-> holding_tank `has_control? control))
                                  (and (== operation "Hide")
                                       (not (-> holding_tank `has_control? control)))
                                  (and (== operation "Destroy")
                                       (-> holding_tank `has_control? control)))
                              (progn
                                 (when (-> holding_tank `has_control? control)
                                    (inc idx))
                                 (fn ()
                                    (container_view_operation (to_key operation)
                                     (get_control_by_name key)
                                     nil))))]))]
               
               (not (== key "Holding Tank"))
               [key (for_each (operation ["Split Above" "Split Below" "Split Left" "Split Right"])
                       [(dtext operation) (fn ()
                               (progn
                                  (console.log key "operation: " operation controls)
                                  (container_view_operation (to_key operation)
                                   (get_control_by_name key)
                                   (empty_selection_control))))])])))))

(defun gen_controls_menu ()
  (progn
   (defvar holding_tank (get_control_by_name "Holding Tank"))                
   (defvar holding_tank_visible? (if (prop (control_position holding_tank) `parent)
                                     true
                                     false))
   (conj 
        (reduce (control (current_controls))
            (when (and control.on_focus
                       control.options.id)
              (defvar is_displayed? (and (not (== holding_tank control))
                                         (not (-> holding_tank `has_control? control))))
              (console.log "is_displayed: " is_displayed? control.name)
              [(or control.name "Untitled") 
               (reduce (operation ["Show" "Focus" "Hide" "--" "Destroy"])
                       (cond
                         (== control.name "Holding Tank")                              
                         (cond
                           (== operation "Focus")
                           [(dtext "Show")
                            (fn (e)
                              (-> (get_control_by_name "Holding Tank")
                                  `show))]
                           (and holding_tank_visible?
                                (== operation "Hide"))
                           [(dtext "Hide")
                            (fn (e)
                              (-> (get_control_by_name "Holding Tank")
                                  `hide))]
                           else
                           nil)
                         else
                         [(dtext operation)
                          (cond
                            (and (not is_displayed?)
                                 (== operation "Show"))
                            (fn (e)
                              (aif (get_control_by_id control.options.id)
                                   (show_control it)))
                            (and is_displayed? (== operation "Focus"))
                            (fn (e)
                              (aif (get_control_by_id control.options.id)
                                   (set_focus_to it)))
                            (and is_displayed? (== operation "--"))
                            nil
                            (and is_displayed? (== operation "Hide"))
                            (fn (e)
                              (aif (get_control_by_id control.options.id)
                                   (container_view_operation "hide" it)
                                   (notify (+ "Unable to find control " (or control.name control.options.id)))))
                            (== operation "Destroy")
                            (fn (e)
                              (aif (get_control_by_id control.options.id)
                                   (container_view_operation "destroy" it)
                                   (notify (+ "Unable to find control " (or control.name control.options.id))))))]))]))
        [[(dtext "Monitor Control Tree") 
          (fn ()
            (progn
             (monitor_control_tree)))  ]])))



(defun user/*initializer* ()
  (let
      ((header nil)       
       (scripts (-> (page_header) `querySelectorAll "script[id]"))                     
       (scratch_editor nil)
       (page_frame nil)
       (control nil)
       (key_mode (get_operating_platform))
       (repl_split nil))
                                                               
    (console.log "user/*initializer is running." )
    
    ;(defglobal main_menu_button (li  { `class: "juno-menu-header" }
     ;                                        (span { `class: "juno-menu-item" `style: "" } "File")))

    (defglobal resource_loader_button (file_picker_button "" load_files))    
    (set_style [["position" "absolute"]
                ["top" "-100px"]
                ["left" "-100px"]
                ["width" "1px"]
                ["height" "1px"]] resource_loader_button)
    
    (-> (get_by_id "body") `appendChild resource_loader_button)
       
    (defvalue $root_controls [])
    
    
    ;; the root container which controls are added to..
    (defglobal juno_container
      (div { `style: "height: inherit; width: inherit; position: relative; overflow:hidden;" }))

    
    (set_prop *env_config*.editor
       `extensions_to_mode
       {
         `js: `javascript
         `lisp: `juno
         })
    
    (attach_event_listener juno_container `click
                           (fn (e)
                             (progn
                              (defvar menu (get_by_id `cmenu))
                              (when menu (-> menu `remove)))))
    
    (set_prop *env_config*.export
	      `save_path
	      nil)
            
    (attach_event_listener juno_container
                           `focusin
                           (fn (e)
                             (process_focus_chain e)))

    (-> (get_by_id "body") `appendChild juno_container)

    
    (set_prop *formatting_rules*
       `allocating_forms {
                           `let: (fn (tree)
                                    (progn
                                       (flatten (list (resolve_multi_path [ 1 `* 0 ] tree)))))
                           `defun: (fn (tree)
                                      (progn
                                         (conj (list (resolve_path [ 1 ] tree))
                                               (flatten (list (resolve_path [ 2 ] tree) ) ))))
                           `defun_sync: (fn (tree)
                                           (progn
                                              (conj (list (resolve_path [ 1 ] tree))
                                                    (flatten (list (resolve_path [ 2 ] tree) ) ))))
                           `defmacro: (fn (tree)
                                         (progn
                                            (conj (list (resolve_path [ 1 ] tree))
                                                  (flatten (list (resolve_path [ 2 ] tree))))))
                           `function: (fn (tree)
                                         (flatten (list (resolve_path [ 1 ] tree) )))
                           `fn: (fn (tree)
                                   (flatten (list (resolve_path [ 1 ] tree) )))
                           `lambda: (fn (tree)
                                       (flatten (list (resolve_path [ 1 ] tree) )))
                           `destructuring_bind: (fn (tree)
                                                   (progn
                                                      (flatten (list (resolve_path [ 1 ] tree)))))
                           `defvar: (fn (tree)
                                        (flatten (list (prop tree 1))))
                           `for_each: (fn (tree)
                                         (list (resolve_path [ 1 0 ] tree)))
                           `for_with: (fn (tree)
                                         (list (resolve_path [ 1 0 ] tree)))
                           `reduce: (fn (tree)
                                       (list (resolve_path [ 1 0 ] tree)))
                           `reduce_sync: (fn (tree)
                                            (list (resolve_path [ 1 0 ] tree)))
                           `defglobal: (fn (tree)
                                          (list (prop tree 1)))
                           `defparameter: (fn (tree)
                                             (list (prop tree 1)))
                           
                           })
    
    
    ;; initialize or rehydrate the controls
    (if (== (length *serialized_controls*) 0)
      (progn       
       (console.log "initializing control surface")
       ;; take in the global default theme, but don't impact the setting for the sub themes
       (set_global_theme *env_config*.application.global_theme { `suppress_set_sub_theme: true `suppress_cascade: true })
       (defglobal $repl (browser_repl { `name: "Juno REPL" }))
       (= scratch_editor
          (buffer_editor "*scratch*" "user" [ `*scratch* ] `juno))

       (push *main_menu*   ;; using a wrapper function allows us to change the menu more dynamically
             [ "File" (fn ()
                         (gen_file_menu))])
                         
       
       (push *main_menu*            
             ["Controls" (fn ()
                        (gen_controls_menu))])
       (push *main_menu*
             ["Layout"
               gen_layout_menu])
       
       (push $root_controls
             (app_header [(app_menu [ `*main_menu* ])]
                         { `app_title: "Seedling" }))
       (setq page_frame ;; or surface which can be named in the upper right or middle
             (control_container nil {                                     
                                     `root_frame: true
                                     }))

       
       (set_prop *key_bindings*.global
                 "open_new_buffer" { win: "Command-Enter"
                                     mac: "Command-Enter"
                                     description: "New Juno Buffer"
                                     exec: (fn () (new_buffer { type: "juno" }))
                                    }
                 "save_file" { win: "Ctrl-S"
                               mac: "Command-S"
                               description: "Save File"
                               exec: (fn () (save_active_buffer))                              
                              }
                 "open_file" { win: "Ctrl-O"
                               mac: "Command-O"
                               description: "Open File"
                               exec: (fn () (edit_file))
                              }
                 "save_environment" { win: "Ctrl-Shift-S"
                                      mac: "Command-Shift-s"
                                      description: "Saves the current state of the application"
                                      exec: (fn () (save_control_image))
                                     })
       ;; the execs are nil because the editor will use the key of the object to assign the correct
       ;; internal function
       
       (set_prop *key_bindings*.editor
                 "evaluate_selection" { win: "Shift-Enter"
                                        mac: "Shift-Enter"
                                        description: "Evaluate the current selected text"
                                        exec: nil
                                       }
                 "on_save" {  description: "On Save Event"
                              win: "Ctrl-s"
                              mac: "Command-s"
                              exec: nil
                            }
                 "increase_font_size" {
                                       description: "Increase the font size of the current editor"
                                       win: "Ctrl-Shift-="
                                       mac: "Ctrl-Shift-="
                                       exec: nil
                                       }
                 "decrease_font_size" {
                                       description: "Decrease the font size of the current editor"
                                       win: "Ctrl-Shift--"
                                       mac: "Ctrl-Shift--"
                                       exec: nil
                                       }
                 "select_form_root" {
                                     description: "select_form_root"
                                     win: "Ctrl-Shift-Enter"
                                     mac: "Ctrl-Shift-Enter" 
                                     exec: nil }
                 "select_current_form" {
                                        description: "select_current_form"
                                        win: "Ctrl-Enter"
                                        mac: "Ctrl-Enter" 
                                        }
                 "indent_current_row" {
                                       description: "Indent the row at the cursor position"
                                       win: "tab"
                                       mac: "tab"
                                       exec: nil
                                       })
                 
       
       
                 
       (-> juno_container
           `append page_frame.view)

       (-> page_frame `initialize)
       
       (-> page_frame `set_content 0
           (split_view_vertical scratch_editor
                                $repl))
       
       (console.log "initializer: *last_top_frame*: " *last_top_frame*)
       
       (push $root_controls page_frame)
       ;; the holding tank contains the controls  that are still needed but not
       ;; presently displayed 
       (push $root_controls (control_holding_tank [] {}))
       
       (-> scratch_editor
           `set_evaluator_control $repl)
       
       (when (blank? (prop *env_config*.export `save_prefix))
         (set_prop *env_config*.export
                   `save_prefix
                   "seedling"))
       
       (-> juno_container
           `append page_frame.view)       
       (-> page_frame `initialize))
      (progn     
       (console.log "serialized controls: " *serialized_controls*)
       (rehydrate_controls juno_container *serialized_controls*)))
    
    (default_focus)
    ;; setup key bindings
    (set_prop *key_bindings*
              `active
              {})  ;; reset out and copy
    (for_each (desc (values (prop *key_bindings* `global)))
       (progn
        (set_prop *key_bindings*.active
                  (prop desc key_mode) 
                  (prop desc `exec))))

     (attach_event_listener juno_container
                           `click
                           (fn (e)
                             (handle_app_click_event e)))
    
    (attach_event_listener juno_container
                           `keydown
                           (function (e)
                             (progn                              
                              (defvar kcode (get_key_code e))
                              (when *log_key_events* (log "key_code:" kcode ))
                              ;(console.log "kcode is: " kcode)
                              (aif (prop *key_bindings*.active kcode)
                                   (progn
                                    (handle_event e)
                                    (it)))                              
                              )))

    
    
    
    (notify (+ "Hello " *namespace* ))
    true))






