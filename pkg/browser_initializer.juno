
;; main browser initialization file - initializes the user browser environment
;; after the browser_workspace has setup the underlying environment

(defglobal main_menu_button nil) ;; placeholders 
(defglobal resource_loader_button nil)
(defglobal juno_container nil)
(defglobal repl_editor nil)
(defglobal *scratch* ";; *scratch* buffer\n\n")

;; $controls is the list of global controls such as editors and views
;; putting $ as a prefix indicates to the environment that it is not
;; to be saved as part of the image.  It must be rebuilt on initialization
;; since it contains live stateful objects.

(defglobal $controls nil)

(defun make_menu (for_element menu_items)
  (let
      ((menu_items menu_items)
       (for_element for_element)
       (pos nil)
       (disappear_timer nil)
       (view nil))
    (aif (get_by_id "cmenu")
         (-> it `remove))
    (setq view
          (div { `id: `cmenu `class: "juno-menu"  }
               (div {  `class: "pure-menu pure-menu-horizontal"  }               
                    (ul { `class: "pure-menu-list" }                 
                        (map (fn (item idx)                     
                               (li { `idx: idx `class: "pure-list-item" } (a { `idx: idx  `href: "#" `class: "pure-menu-link" } item.0)))
                             (or menu_items []))))))
    (when for_element
      (setq pos
            (-> for_element `getBoundingClientRect))
      (set_style [["top" (+ "" (Math.max 0 pos.bottom) "px") ]
                  ["left" (+ "" (Math.max pos.left 0) "px") ]] view))
    
    (attach_event_listener view
                           `click
                           (fn (e)
                             (progn
                              (defvar idx (-> e.srcElement `getAttribute `idx))
                              (defvar item (prop menu_items idx))
                             
                              (console.log "clicked item: " idx item item.1)
                               (when item
                                 (item.1 e))
                               (-> view `remove))))
    (setTimeout
     (fn ()
       (progn
        (attach_event_listener view
                               `mouseleave
                               (function (e)
                                         (progn
                                          (when disappear_timer
                                            (clearTimeout disappear_timer))
                                          (= disappear_timer (setTimeout (fn ()
                                                                           (progn
                                                                            (-> view `remove)
                                                                            (= disappear_timer nil)))
                                                                         500)))))
        (attach_event_listener view
                               `mouseenter
                               (function (e)
                                         (when disappear_timer
                                           (clearTimeout disappear_timer)
                                           (= disappear_timer nil))))))
     500)
    (-> (get_by_id "body") `appendChild view) 
    view))

(defun request_user_input (prompt type)
  (new Promise (fn (resolve reject)                 
                 (let
                     ((user_input  (input { `type: (or type "text") }))
                      (ok_button (button { `class: "pure-button-primary" `style: "float:right" } "OK"))
                      (cancel_button (button  "Cancel"))
                      (dwin (dialog prompt                                    
                                    (br)
                                    user_input
                                    (br)
                                    (div { `class: "pure-button-group" `role: "group" }
                                         cancel_button
                                         ok_button))))
                   (attach_event_listener ok_button
                                          `click
                                          (fn (e)
                                            (do                                              
                                              (resolve user_input.value)
                                              (-> dwin `remove))))
                   (attach_event_listener cancel_button
                                          `click
                                          (fn (e)
                                            (do
                                              (-> dwin `remove)
                                              (resolve nil))))
                   (-> juno_container
                       `appendChild dwin)
                   (when (is_function? dwin.showModal)
                     (-> dwin `showModal))))))
                                           
    
                     
(defun message (text)
  (rlog (div { `style: "border-left: 5px solid darkblue; padding: 5px;" } text)))

(defun error_message (text)
  (rlog (div { `style: "border-left: 5px solid red; padding: 5px;" } text)))

(defun log_error (message error_instance)
  (progn
   (error_message message)
   (console.error message)
   (when error_instance
     (when error_instance.messasge
       (error_message error_instance.message))
     (console.error error_instance))))
     

(defun load_js_file (file)
  (let
      ((fdata (try
                (read_file file { `read_as: "text" })
                (catch Error (e)
                  e)))
       (assignment_to nil)
       (error nil))
    (message (+ "found and read JS " file.name ", size: " file.size))
    (cond
      (and fdata
           (not (instanceof fdata Error)))
      (progn
       (aif (request_user_input "Enter a name for a reference to the loaded Javascript" "text")
            (do
              (= assignment_to it)              
              (try
                (progn
                 (debug)
                 (cond
                   (or (== assignment_to "global")
                       (== assignment_to "script"))
                   (-> (page_header) `append (script { `type: "text/javascript" `charset: "utf-8" }
                                                     (javascript fdata)))
                   else
                   (eval `(defglobal ,#assignment_to (javascript ,#fdata)))))
                (catch Error (e)
                  (do
                    (= error true)
                    (error_message (+ "Unable to create " assignment_to ": " e.message))
                    (console.error "ERROR: " e))))                                                    
              (when (not error)
                (message (+ "Loaded JS to " assignment_to ))))
            (notify "Entry Cancelled")))
      else
      (progn
       (rlog "Unable to read the file")
       (console.error fdata)))))

(defun embed_js_orig (name js_text) 
  (progn
   (debug)
   (-> (page_header) `append (html/script { `id: name `type: "text/javascript" `charset: "utf-8" }
                                     (javascript js_text)))   
   (eval `(defglobal ,#name (html/get_by_id ,#name)
            {
             `embedded_script: true
             }))))

(defun embed_js (name js_text) 
  (progn
   (debug)
   (eval `(-> (page_header) `append (html/script { `id: name `type: "text/javascript" `charset: "utf-8" }
                                     (javascript ,#js_text))))
   (eval `(defglobal ,#name (html/get_by_id ,#name)
            {
             `embedded_script: true
             }))))

(defun embed_js_file (file)
  (let
      ((fdata (try
                (read_file file { `read_as: "text" })
                (catch Error (e)
                  e)))
       (assignment_to nil)
       (error nil))
    (message (+ "found and read JS " file.name ", size: " file.size))
    (cond
      (and fdata
           (not (instanceof fdata Error)))
      (progn
       (aif (request_user_input "Enter a name for a reference to the loaded Javascript" "text")
            (do
              (= assignment_to it)              
              (try
                (embed_js_orig assignment_to fdata)                   
                (catch Error (e)
                  (do
                    (= error true)
                    (error_message (+ "Unable to create " assignment_to ": " e.message))
                    (console.error "ERROR: " e))))                                                    
              (when (not error)
                (message (+ "Loaded JS to " assignment_to ))))
            (notify "Entry Cancelled")))
      else
      (progn
       (rlog "Unable to read the file")
       (console.error fdata)))))

(defun load_files (files)
  (when (> files.length 0)
    (for_each (file files)
       (do
         (cond
           (== file.type "text/javascript")
           (embed_js_file file)
           (== file.type "text/plain")
           (notify "Text Resource")
           (or (ends_with? file.name ".lisp")
               (ends_with? file.name ".juno"))
           (notify "Loading lisp file"))))))


(defun make_editor (content options)
  (let
      ((options (or options {
                             `type: "juno"
                             }))
       (resize_observer nil)
       (intf {})
       (content (or content ""))
       (controls (div { `style: "display: flex; " }))
       (editor_div (div { `style: "height: calc(100% - 20px); width: 100%; overflow: hidden;" }))
       (view (div { `style: "overflow: hidden; height: calc(100% - 5px); display: inline-block; width: inherit;" }                  
                  controls
                  editor_div))      
       (perform_resize (fn ()
                         (when view.parentElement
                          ;(console.log "editor: main resize: " (prop view.parentElement `offsetWidth) (prop view.parentElement `offsetHeight))
                          (html/set_style [["width" "calc(100% - 2px)"];           (+ "" (- (prop view.parentElement `offsetWidth) 2) "px")]
                                           ["height" (+ "" (- (prop view.parentElement `offsetHeight) 10) "px")]]
                                          view)
                          (-> editor `resize)
                          )))
       (editor nil)
       (initialize_editor (fn ()
                            (progn
                             (setq editor
                                   (ace.edit editor_div))
                             (when options.evaluator
                               (-> editor.commands `addCommand
                                   {
                                    `name: "execute"
                                    `bindKey: { `win: "Shift-Enter" `mac: "Shift-Enter" }
                                    `exec: (function (editor)
                                                     (let
                                                         ((val nil)
                                                          (copytext (-> editor `getCopyText)))
                                                       (if (blank? copytext)
                                                         (notify (dtext "Please highlight text to evaluate"))
                                                         (try
                                                           (options.evaluator val)
                                                           (catch Error (e)
                                                             (progn
                                                              (notify (+ (dtext "Unhandled error") ": " e.message ))
                                                              (console.error e)))))))
                                    }))
                             (when options.on_save
                               (-> editor.commands `addCommand
                                   {
                                    `name: "save"
                                    `bindKey: { `win: "Ctrl-s" `mac: "Command-s" }
                                    `exec: (function (editor)
                                                     (options.on_save (-> editor `getValue)))
                                    }))

                             
                             
                             (when (is_array? options.commands)
                               (for_each (command options.commands)
                                  (do
                                    (-> editor.commands `addCommand
                                        command))))
                                              
                             (when options.on_focus
                               (-> editor `on `focus options.on_focus))
                             (when options.on_blur
                               (-> editor `on `blur options.on_blur))
                             (when options.read_only
                               (-> editor `setReadOnly true))
                             (-> editor.session `setUseSoftTabs true)
                             (-> editor `setOptions {
                                   `enableBasicAutocompletion: true
                                   `enableLiveAutocompletion: true
                                   `showFoldWidgets: true
                                   `fontFamily: "Roboto Mono"                  
                                   })
                             (-> editor.session `setUseWorker true)
                             (-> editor `setShowFoldWidgets true)
                             (cond
                               (== options.type "juno")
                               (-> editor.session `setMode "ace/mode/juno")
                               (== options.type "javascript")
                               (-> editor.session `setMode "ace/mode/javascript")
                               (== options.type "css")
                               (-> editor.session `setMode "ace/mode/css"))
                             (console.log "editor initialized: content: " (subtype content) content)                                                          
                             (-> editor `setValue content -1)
                             
                             (when options.on_change
                               (-> editor `on `change (function (val)
                                                                (options.on_change editor val))))                             
                             (-> editor `resize true)                             
                             (set_prop intf `editor editor)                             
                             ))))
       
    
    (if (not (is_symbol? `$ace_editor))
      (throw TypeError "$ace_editor symbol not found, and is required for this editor."))
    
    (when (is_element? options.command_bar)
      (-> controls `prepend options.command_bar))
      
    (= resize_observer (new ResizeObserver perform_resize))
    (= intf
       {
        `view: view
        `editor: editor
        `options: options
        `initialize: (fn ()
                       (when view.parentElement
                         (console.log "editor: performing initialization")
                         (-> resize_observer `observe view.parentElement)
                         (initialize_editor)
                         ))
        })))


(defun split_view_vertical (content_a content_b options)
  (let
      ((center_width 7)
       (right_margin 5)
       (center_divider (div { `class: "juno-vertical-dragger"
                              `style: (+ " top: 0px; left: 50%; cursor: col-resize; height: 100%; width: " center_width "px") }))
       (left_container (div { `class: "juno-view-container" }
                            (if content_a.view
                              content_a.view
                              content_a)))
       (right_container (div { `class: "juno-view-container" }
                            (if content_b.view
                              content_b.view
                              content_b)))
       (view_overlay (div { `style: "width: 0%; height: 0%; position: absolute; top: 0px; left; 0px; background: transparent; cursor: col-resize" }))
       (view (div { `class: "juno-vertical-split-container" `style: "height: calc(100% - 5px); width: 100%;" }
                  left_container
                  center_divider
                  right_container
                  view_overlay
                 ))
       (drag_status nil)       
       (resize_observer nil)
       (center_pos nil)
       (initialized false)
       (init_timer nil)
       (perform_resize (fn ()
                         (when view.parentElement
                           (let
                               ((new_height (- (prop view.parentElement `offsetHeight) 5))
                                (new_width  (- (prop view.parentElement `offsetWidth) 0)))
                             
                             (set_style [[ "width" (+ "" new_width "px") ]
                                         [ "height" (+ "" new_height "px") ]]
                                        view)
                             ;; get the center position - set it to the midpoint if we are just initializing
                             (when (== center_pos nil)
                               (= center_pos (/ view.offsetWidth 2)))
                             (when (> center_pos (- new_width 20))
                               (= center_pos (Math.max 20 (- new_width 20))))
                             (set_style [["width" (+ (- center_pos center_width) "px") ]]                                         
                                        left_container)
                             (set_style [["width" (+ "" center_width "px") ]] center_divider)
                             (set_style [["width" (+ (- view.offsetWidth center_pos center_width right_margin) "px") ]]                                                                            
                                        right_container)
                             ;(console.log "[" left_container.offsetWidth "<->" right_container.offsetWidth "]")
                             ))))
       (init_drag (fn (e)
                    (when (== drag_status nil)
                      (= drag_status 1)
                      (set_style [["width" "100%"]
                                  ["height" "100%"]] view_overlay)
                      ;; since our overlay covers the center_divider add a class to indicate activity
                      ;; on the center divider
                      (add_class "juno-active-hover" center_divider))))
       
       (complete_drag (fn (e)
                        (progn
                         (set_style [["width" "0%"]
                                     ["height" "0%"]] view_overlay)
                         (remove_class "juno-active-hover" center_divider)
                         (= drag_status nil)                         
                         (perform_resize))))
       (perform_drag (fn (e)
                       (progn
                        (-> e `preventDefault)
                        (when drag_status                          
                          (if (== e.buttons 0)
                            (complete_drag)
                            (progn
                             (= center_pos (Math.max 20 (Math.min e.offsetX (- view.offsetWidth 20))))))
                          (perform_resize)))))
                                                                           
       (initialize (fn ()
                     (progn
                      (when init_timer
                        (clearInterval init_timer)
                        (= init_timer nil))
                      (console.log "split_view_vertical: initialize called: " initialized)
                      (when (not initialized)                       
                        (= initialized true)
                        (-> resize_observer `observe view.parentElement)
                        (perform_resize)
                        (console.log "split_view_vertical initialized:" initialized)
                        (when content_a.initialize
                          (-> content_a `initialize))
                        (when content_b.initialize
                          (-> content_b `initialize)))))))

    ;; set up the events
    (attach_event_listener view_overlay
                           `mousemove
                           (fn (e)
                             (progn
                              (handle_event e)
                              (when drag_status
                                (perform_drag e)))))
                             
    (attach_event_listener view_overlay
                           `mouseup
                           (fn (e)
                             (progn
                              (handle_event e)                              
                              (complete_drag))))

    (attach_event_listener center_divider
                           `mouseup
                           (fn (e)
                             (progn
                              (handle_event e)                              
                              (complete_drag))))
    (attach_event_listener center_divider
                           `mousedown
                           (fn (e)
                             (progn                              
                              (handle_event e)                              
                              (init_drag e))))
    (= resize_observer (new ResizeObserver perform_resize))
    (console.log "split_view_vertical: ready: initialized: " initialized)
    (when true ;options.auto_initialize
      (= init_timer (setInterval (fn (e)
                                   (progn
                                    (when view.parentElement
                                      (clearInterval init_timer)
                                      (= init_timer nil)
                                      (initialize))))
                                 250)))                                 
    {
     view: view
     initialize: initialize
     }))
                             

(defun split_view_horizontal (content_a content_b options)
  (let
      ((center_height 7)
       (bottom_margin 5)
       (center_divider (div { `class: "juno-horizontal-dragger"
                              `style: (+ "cursor: row-resize; width: 100%; height: " center_height "px") }))
       (top_container (div { `class: "juno-view-container" }
                            (if content_a.view
                              content_a.view
                              content_a)))
       (bottom_container (div { `class: "juno-view-container" }
                            (if content_b.view
                              content_b.view
                              content_b)))
       (view_overlay (div { `style: "width: 0%; height: 0%; position: absolute; top: 0px; left; 0px; background: transparent; cursor: row-resize" }))
       (view (div { `class: "juno-horizontal-split-container" `style: "height: calc(100% - 5px); width: 100%;margin: 0px; padding: 0px;" }
                  top_container
                  center_divider
                  bottom_container
                  view_overlay
                 ))
       (drag_status nil)
       (initialized false)
       (resize_observer nil)
       (center_pos nil)
       (initialized false)
       (init_timer nil)
       (perform_resize (fn ()
                         (when view.parentElement
                           (let
                               ((new_height (- (prop view.parentElement `offsetHeight) 5))
                                (new_width  (- (prop view.parentElement `offsetWidth) 0)))
                             
                             (set_style [[ "width" (+ "" new_width "px") ]
                                         [ "height" (+ "" new_height "px") ]]
                                        view)
                             ;; get the center position - set it to the midpoint if we are just initializing
                             (when (== center_pos nil)
                               (= center_pos (/ view.offsetHeight 2)))
                             (when (> center_pos (- new_height 40))
                               (= center_pos (Math.max 20 (- new_height 40))))
                             (set_style [["height" (+ "" center_pos  "px") ]]
                                        top_container)
                             (set_style [["height" (+ "" center_height "px") ]] center_divider)
                             (set_style [["height" (+ (- view.offsetHeight center_height center_pos 0) "px") ]]                                         
                                        bottom_container)
                             ;(console.log "[" top_container.offsetHeight "<|>" bottom_container.offsetHeight "]")
                             ))))
       (init_drag (fn (e)
                    (when (== drag_status nil)
                      (= drag_status 1)
                      (set_style [["width" "100%"]
                                  ["height" "100%"]] view_overlay)
                      ;; since our overlay covers the center_divider add a class to indicate activity
                      ;; on the center divider
                      (add_class "juno-active-hover" center_divider))))
       
       (complete_drag (fn (e)
                        (progn
                         (set_style [["width" "0%"]
                                     ["height" "0%"]] view_overlay)
                         (remove_class "juno-active-hover" center_divider)
                         (= drag_status nil)
                         (console.log "adjustment complete")
                         (perform_resize))))
       (perform_drag (fn (e)
                       (progn
                        (-> e `preventDefault)
                        (when drag_status
                          ;(console.log "view_overlay: center_pos: " center_pos "offsetY: " e.offsetY "movementX: " e.movementY)
                          (if (== e.buttons 0)
                            (complete_drag)
                            (progn
                             (= center_pos (Math.max 20 (Math.min (- e.offsetY center_height 3) (- view.offsetHeight 40))))))
                          (perform_resize)))))
                                                                           
       (initialize (fn ()
                     (progn
                      (when init_timer
                        (clearInterval init_timer)
                        (= init_timer nil))
                      (when (not initialized)
                        (= initialized true)
                        (-> resize_observer `observe view.parentElement)
                        (perform_resize)
                        (console.log "split_view_horizontal initialized: " initialized)
                        (when content_a.initialize
                          (-> content_a `initialize))
                        (when content_b.initialize
                          (-> content_b `initialize)))))))

    ;; set up the events
    (attach_event_listener view_overlay
                           `mousemove
                           (fn (e)
                             (progn
                              (handle_event e)
                              (when drag_status
                                (perform_drag e)))))
                             
    (attach_event_listener view_overlay
                           `mouseup
                           (fn (e)
                             (progn
                              (handle_event e)                              
                              (complete_drag))))

    (attach_event_listener center_divider
                           `mouseup
                           (fn (e)
                             (progn
                              (handle_event e)                              
                              (complete_drag))))
    (attach_event_listener center_divider
                           `mousedown
                           (fn (e)
                             (progn                              
                              (handle_event e)                              
                              (init_drag e))))
    (= resize_observer (new ResizeObserver perform_resize))
    (console.log "split_view_horizontal: ready: initialized: " initialized)
    (when true ;options.auto_initialize
      (= init_timer (setInterval (fn (e)
                                   (progn
                                    (when view.parentElement
                                      (clearInterval init_timer)
                                      (= init_timer nil)
                                      (initialize))))
                                 250)))                                 
    {
     view: view
     initialize: initialize
     }))


                  

(defun show_main_menu ()
  (let
      ((view nil))
    
    (setq view
          (make_menu main_menu_button
                     [["Save Environment" (fn (e) (save_image)) ]
                      ["Load Resource" (fn (e) (-> resource_loader_button `click)) ]
                      ["Style CSS" (fn (e) (notify "View Site CSS"))]
                      ]))))   
    

(defun buffer_editor (title namespace path_to_value mode options)
  (let
      ((nseval (if (not (blank? namespace))
                 (-> Environment `get_namespace_handle namespace)
                 Environment))
       (title_span (span { `class: "juno-title" } title))
       (buffer_commands_button (button { `title: "Buffer Commands" } "▸"))
       (is_dirty? false)
       (command_bar (or options.command_bar
                        (div { `class: "juno-buffer-bar" }
                             buffer_commands_button
                             title_span                                                             
                             (span { `title: "Namespace" `class: "juno-namespace" `style: "display:inline-block; padding-left: 30px; padding-right: 5px;" } nseval.namespace)
                             (if options.read_only
                               (span { `title: "This buffer doesn't allow editing" `style: "padding-left: 5px; padding-right: 5px;" } (dtext "Locked"))
                               ())
                             (span { `class: "juno-mode" `title: "Current Editing Mode" `style: "float: right; margin-right: 15px; display: inline-block; padding-left: 5px; padding-right: 5px;" } mode))))      
       (init_value (resolve_path path_to_value nseval.global_ctx.scope))
       (on_save (fn (value)
                  (progn
                   (try
                     (progn
                      (set_path path_to_value nseval.global_ctx.scope
                                value)
                      (remove_class "juno-needs-save" title_span)
                      (= is_dirty? false)
                      (notify (+ "Set " title)))
                     (catch Error (`e)
                       (progn
                        (log_error (+ (dtext "Unable to save buffer")
                                      " "
                                      title)
                                   e)))))))
                                                                        
                     
       (edit_control (make_editor (if (is_string? init_value)
                                    init_value
                                    "")                                  
                                  {
                                   type: mode
                                   command_bar: command_bar
                                   on_focus: (fn ()
                                               (progn
                                                (console.log "focused editor.")
                                                (add_class "juno-focused" title_span)))
                                   on_blur: (fn ()
                                              (remove_class "juno-focused" title_span))
                                   on_save: on_save
                                   read_only: options.read_only
                                   on_change: (function (editor val)
                                                        (progn
                                                         (when (not is_dirty?)
                                                           (= is_dirty? true)
                                                           (add_class "juno-needs-save" title_span))
                                                         (when options.on_change
                                                           (-> options.on_change editor val))))
                                    evaluator: options.evaluator
                                   })))
    (console.log "buffer_editor: init_value: " init_value path_to_value nseval)
    edit_control))
    



(defun user/*initializer* ()
  (let
      ((header nil)       
       (scripts (-> (page_header) `querySelectorAll "script[id]"))        
       (embeds  nil)
       (initial_split nil))
                                                               
    (console.log "user/*initializer is running." )
   
    (defglobal main_menu_button (li  { `class: "juno-menu-header" }
                                             (span { `class: "juno-menu-item" `style: "" } "File")))

    (defglobal resource_loader_button (file_picker_button "" load_files))    
    (set_style [["position" "absolute"]
                ["top" "-100px"]
                ["left" "-100px"]
                ["width" "1px"]
                ["height" "1px"]] resource_loader_button)
    
    (-> (get_by_id "body") `appendChild resource_loader_button)

    (defglobal juno_container (get_by_id "juno_container"))
    (defglobal $controls [])
      
    (setq header (-> document `querySelector "header"))

    (-> header `appendChild (span { `class: "juno-header" } "Seedling" ))
    (-> header `appendChild (ul { `class: "pure-menu-list" `style: "margin-left: 10px;" }
                                main_menu_button))
    
    ;(-> header `appendChild (img { `style: "margin-left: 5px;margin-right: 10px;margin-top: 5px; " src: core/juno_logo height: "15" }))

    (attach_event_listener juno_container `click
                           (fn (e)
                             (progn
                              (defvar menu (get_by_id `cmenu))
                              (when menu (-> menu `remove)))))
    
    (set_prop *env_config*.export
	      `save_path
	      nil)
        
    (attach_event_listener main_menu_button
			      `click
			      (fn (e)
				(show_main_menu)))

    ;; make the repl more sophisticated
    (when (and (is_symbol? `$ace_editor)
               repl)
      (defglobal repl_editor (ace.edit repl.input_container)
         {
          `serialize_with_image: false
          })
      (-> repl_editor.commands `addCommand
          {
           `name: "execute"
           `bindKey: { `win: "Shift-Enter" `mac: "Shift-Enter" }
           `exec: (function (editor)
                            (let
                                ((val (-> editor `getValue)))
                              (-> repl `evaluate val)
                              (-> editor `setValue "", -1)))
                                 
           })
      (-> repl_editor.session `setUseSoftTabs true)
      (-> repl_editor.session `setMode "ace/mode/juno")
            
      (-> repl_editor `setOptions {
                                   `enableBasicAutocompletion: true
                                   `enableLiveAutocompletion: true
                                   `showFoldWidgets: true
                                   })
      (-> repl_editor.session `setUseWorker true)
      (-> repl_editor `setShowFoldWidgets true))

    (push $controls
          (buffer_editor "*scratch*" "user" [ `*scratch* ] `juno))
    
    (when (is_symbol? `repl)
      (-> repl.view `remove)      
      (setq initial_split
            (split_view_vertical $controls.0
                                 repl))
      (-> (get_by_id "body") `appendChild initial_split.view)
      (console.log "*initializer: calling initial_split: initializer")
      (debug)
      (-> initial_split `initialize))
    (when (blank? (prop *env_config*.export `save_prefix))
      (set_prop *env_config*.export
                `save_prefix
                "seedling"))
  (notify (+ "Hello " *namespace* ))
  true))





