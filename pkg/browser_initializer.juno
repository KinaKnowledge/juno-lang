
;; main browser initialization file - initializes the user browser environment
;; after the browser_workspace has setup the underlying environment

(defglobal main_menu_button nil) ;; placeholders 
(defglobal resource_loader_button nil)
(defglobal juno_container nil)
(defglobal repl_editor nil)

(defglobal controls nil)

(defun make_menu (for_element menu_items)
  (let
      ((menu_items menu_items)
       (for_element for_element)
       (pos nil)
       (view nil))
    (aif (get_by_id "cmenu")
         (-> it `remove))
    (setq view
          (div { `id: `cmenu `style: "position: absolute; z-index: 20" }
               (div {  `class: "pure-menu pure-menu-horizontal" `style: "box-shadow: 1px 1px 4px 0px #00000082" }               
                    (ul { `class: "pure-menu-list" }                 
                        (map (fn (item idx)                     
                               (li { `idx: idx `class: "pure-list-item" } (a { `idx: idx  `href: "#" `class: "pure-menu-link" } item.0)))
                             (or menu_items []))))))
    (when for_element
      (setq pos
            (-> for_element `getBoundingClientRect))
      (set_style [["top" (+ "" (Math.max 0 pos.bottom) "px") ]
                  ["left" (+ "" (Math.max pos.left 0) "px") ]] view))
    
    (attach_event_listener view
                           `click
                           (fn (e)
                             (progn
                              (defvar idx (-> e.srcElement `getAttribute `idx))
                              (defvar item (prop menu_items idx))
                             
                              (console.log "clicked item: " idx item item.1)
                               (when item
                                 (item.1 e))
                               (-> view `remove))))
    (-> (get_by_id "body") `appendChild view) 
    view))

(defun request_user_input (prompt type)
  (new Promise (fn (resolve reject)                 
                 (let
                     ((user_input  (input { `type: (or type "text") }))
                      (ok_button (button { `class: "pure-button-primary" `style: "float:right" } "OK"))
                      (cancel_button (button  "Cancel"))
                      (dwin (dialog prompt                                    
                                    (br)
                                    user_input
                                    (br)
                                    (div { `class: "pure-button-group" `role: "group" }
                                         cancel_button
                                         ok_button))))
                   (attach_event_listener ok_button
                                          `click
                                          (fn (e)
                                            (do                                              
                                              (resolve user_input.value)
                                              (-> dwin `remove))))
                   (attach_event_listener cancel_button
                                          `click
                                          (fn (e)
                                            (do
                                              (-> dwin `remove)
                                              (resolve nil))))
                   (-> juno_container
                       `appendChild dwin)
                   (when (is_function? dwin.showModal)
                     (-> dwin `showModal))))))
                                           
    
                     
(defun message (text)
  (rlog (div { `style: "border-left: 5px solid darkblue; padding: 5px;" } text)))

(defun error_message (text)
  (rlog (div { `style: "border-left: 5px solid red; padding: 5px;" } text)))

(defun load_js_file (file)
  (let
      ((fdata (try
                (read_file file { `read_as: "text" })
                (catch Error (e)
                  e)))
       (assignment_to nil)
       (error nil))
    (message (+ "found and read JS " file.name ", size: " file.size))
    (cond
      (and fdata
           (not (instanceof fdata Error)))
      (progn
       (aif (request_user_input "Enter a name for a reference to the loaded Javascript" "text")
            (do
              (= assignment_to it)              
              (try
                (progn
                 (debug)
                 (cond
                   (or (== assignment_to "global")
                       (== assignment_to "script"))
                   (-> (page_header) `append (script { `type: "text/javascript" `charset: "utf-8" }
                                                     (javascript fdata)))
                   else
                   (eval `(defglobal ,#assignment_to (javascript ,#fdata)))))
                (catch Error (e)
                  (do
                    (= error true)
                    (error_message (+ "Unable to create " assignment_to ": " e.message))
                    (console.error "ERROR: " e))))                                                    
              (when (not error)
                (message (+ "Loaded JS to " assignment_to ))))
            (notify "Entry Cancelled")))
      else
      (progn
       (rlog "Unable to read the file")
       (console.error fdata)))))

(defun embed_js_orig (name js_text) 
  (progn
   (debug)
   (-> (page_header) `append (html/script { `id: name `type: "text/javascript" `charset: "utf-8" }
                                     (javascript js_text)))   
   (eval `(defglobal ,#name (html/get_by_id ,#name)
            {
             `embedded_script: true
             }))))

(defun embed_js (name js_text) 
  (progn
   (debug)
   (eval `(-> (page_header) `append (html/script { `id: name `type: "text/javascript" `charset: "utf-8" }
                                     (javascript ,#js_text))))
   (eval `(defglobal ,#name (html/get_by_id ,#name)
            {
             `embedded_script: true
             }))))

(defun embed_js_file (file)
  (let
      ((fdata (try
                (read_file file { `read_as: "text" })
                (catch Error (e)
                  e)))
       (assignment_to nil)
       (error nil))
    (message (+ "found and read JS " file.name ", size: " file.size))
    (cond
      (and fdata
           (not (instanceof fdata Error)))
      (progn
       (aif (request_user_input "Enter a name for a reference to the loaded Javascript" "text")
            (do
              (= assignment_to it)              
              (try
                (embed_js_orig assignment_to fdata)                   
                (catch Error (e)
                  (do
                    (= error true)
                    (error_message (+ "Unable to create " assignment_to ": " e.message))
                    (console.error "ERROR: " e))))                                                    
              (when (not error)
                (message (+ "Loaded JS to " assignment_to ))))
            (notify "Entry Cancelled")))
      else
      (progn
       (rlog "Unable to read the file")
       (console.error fdata)))))

(defun load_files (files)
  (when (> files.length 0)
    (for_each (file files)
       (do
         (cond
           (== file.type "text/javascript")
           (embed_js_file file)
           (== file.type "text/plain")
           (notify "Text Resource")
           (or (ends_with? file.name ".lisp")
               (ends_with? file.name ".juno"))
           (notify "Loading lisp file"))))))


(defun make_editor (content options)
  (let
      ((options (or options {
                             `type: "juno"
                             }))
       (resize_observer nil)
       (content (or content ""))
       (controls (div { `style: "display: flex; height: 1.2em; " }))
       (editor_div (div { `style: "height: calc(100% - 15px); width: 100%;" }))
       (view (div { `style: "overflow: hidden; height: calc(100% - 5px); display: inline-block; width: inherit;" }                  
                  editor_div))
       (perform_resize (fn ()
                         (when view.parentElement
                          (console.log "editor: main resize: " (prop view.parentElement `offsetWidth) (prop view.parentElement `offsetHeight))
                          (html/set_style [["width" (+ "" (- (prop view.parentElement `offsetWidth) 2) "px")]
                                           ["height" (+ "" (- (prop view.parentElement `offsetHeight) 2) "px")]]
                                          view)
                          (-> editor `resize true)
                          )))
       (editor nil)
       (initialize_editor (fn ()
                            (progn
                             (setq editor
                                   (ace.edit editor_div))
                             (when options.evaluator
                               (-> editor.commands `addCommand
                                   {
                                    `name: "execute"
                                    `bindKey: { `win: "Shift-Enter" `mac: "Shift-Enter" }
                                    `exec: (function (editor)
                                                     (let
                                                         ((val nil)
                                                          (copytext (-> editor `getCopyText)))
                                                       (if (blank? copytext)
                                                         (notify (dtext "Please highlight text to evaluate"))
                                                         (try
                                                           (options.evaluator val)
                                                           (catch Error (e)
                                                             (progn
                                                              (notify (+ (dtext "Unhandled error") ": " e.message ))
                                                              (console.error e)))))))
                                    }))
                             (when options.on_save
                               (-> editor.commands `addCommand
                                   {
                                    `name: "save"
                                    `bindKey: { `win: "Ctrl-s" `mac: "Command-Enter" }
                                    `exec: (function (editor)
                                                     (options.on_save (-> editor `getValue)))
                                    }))
                             (-> editor.session `setUseSoftTabs true)
                             (-> editor `setOptions {
                                   `enableBasicAutocompletion: true
                                   `enableLiveAutocompletion: true
                                   `showFoldWidgets: true
                                   })
                             (-> editor.session `setUseWorker true)
                             (-> editor `setShowFoldWidgets true)
                             (cond
                               (== options.type "juno")
                               (-> editor.session `setMode "ace/mode/juno")
                               (== options.type "javascript")
                               (-> editor.session `setMode "ace/mode/javascript")
                               (== options.type "css")
                               (-> editor.session `setMode "ace/mode/css"))
                             (console.log "editor initialized")
                             (-> editor `resize true)
                             ))))
       
    
    (if (not (is_symbol? `$ace_editor))
      (throw TypeError "$ace_editor symbol not found, and is required for this editor."))
    
    
      
    (= resize_observer (new ResizeObserver perform_resize))
   
    {
     `view: view
     `editor: editor
     `options: options
     `initialize: (fn ()
                    (when view.parentElement
                      (console.log "editor: performing initialization")
                      (-> resize_observer `observe view.parentElement)
                      (initialize_editor)
                      ))
     }))


(defun split_view_vertical (content_a content_b options)
  (let
      ((center_divider (div { `class: "juno-vertical-dragger" } ""))
       (left_container (div { `class: "juno-view-container" }
                           (if content_a.view
                             content_a.view
                             content_a)))
       (right_container (div { `class: "juno-view-container" }
                           (if content_b.view
                             content_b.view
                             content_b)))
       (view (div { `class: "juno-vertical-split-container"  `style: "height: calc(100% - 5px); width: 100%;" } 
                  left_container
                  center_divider
                  right_container))
       (left_content content_a)
       (body_element (-> document `querySelector "body"))
       (right_content content_b)
       (split_size_left "50%")
       (resize_observer nil)
       (perform_resize (fn ()
                         (when view.parentElement
                           (let
                               ((new_height (- (prop view.parentElement `offsetHeight) 5))
                                (new_width (- (prop view.parentElement `offsetWidth) 2))
                                (center center_divider.offsetLeft))
                             (set_style [["width" (+ "" new_width "px")]
                                         ["height" (+ "" new_height "px")]]
                                        view)
                             (set_style [["width" (+ "" center "px")]
                                         ["height" (+ "" new_height "px")]] left_container)
                             (set_style [["width" (+ "" (- new_width center 4) "px")]
                                         ["height" (+ "" new_height "px")]] right_container)
                             (console.log "split_view: performed resize" center)))))
       (initial_style [["display" "inline-block"]
                       [ "width" split_size_left]
                       [ "height" "100%"]]))
    (set_style initial_style left_content)
    (set_style initial_style right_content)
    (= resize_observer (new ResizeObserver perform_resize))
    
    {
     `view: view
     `initialize: (fn ()
                    (progn
                     (console.log "split_view_vertical: initializing" center_divider.offsetLeft)
                     (-> resize_observer `observe view.parentElement)
                     (= split_size_left (+ "" center_divider.offsetLeft "px"))
                     ;; and cascade..
                     (when left_content.initialize
                       (-> left_content `initialize))
                     (when right_content.initialize
                       (-> right_content `initialize))))
                     
     `set_left_pane_content: (fn (content)
                               (when (or (is_element? content)
                                         (is_element? content.view))                                 
                                 (set_style [["display" "inline-block"]
                                             [ "width" split_size_left]
                                             [ "height" "100%"]]
                                            (if content.view
                                              content.view
                                              content))
                                 (-> left_content `replaceWith
                                     content)
                                 (setq left_content
                                       content)))                                 
     }))
    
                  

(defun show_main_menu ()
  (let
      ((view nil))
    
    (setq view
          (make_menu main_menu_button
                     [["Save Image" (fn (e) (save_image)) ]
                      ["Load Resource" (fn (e) (-> resource_loader_button `click)) ]
                      ["Style CSS" (fn (e) (notify "View Site CSS"))]
                      ]))))   
    





(defun user/*initializer* ()
  (let
      ((header nil)       
       (scripts (-> (page_header) `querySelectorAll "script[id]"))        
       (embeds  nil)
       (initial_split nil))
                                                               
    (console.log "user/*initializer is running." )
   
    (defglobal main_menu_button (button { `style: "margin-top: -5px" }
                                             (span { `style: "margin-top: -2px; font-weight: bold;" } "λ")))

    (defglobal resource_loader_button (file_picker_button "" load_files))    
    (set_style [["position" "absolute"]
                ["top" "-100px"]
                ["left" "-100px"]
                ["width" "1px"]
                ["height" "1px"]] resource_loader_button)
    
    (-> (get_by_id "body") `appendChild resource_loader_button)

    (defglobal juno_container (get_by_id "juno_container"))
    (defglobal controls [])
      
    (setq header (-> document `querySelector "header"))
    
    (-> header `appendChild main_menu_button)
    (-> header `appendChild (img { `style: "margin-left: 5px;margin-right: 10px;margin-top: 5px; " src: core/juno_logo height: "15" }))

    (attach_event_listener juno_container `click
                           (fn (e)
                             (progn
                              (defvar menu (get_by_id `cmenu))
                              (when menu (-> menu `remove)))))
    
    (set_prop *env_config*.export
	      `save_path
	      nil)
        
    (attach_event_listener main_menu_button
			      `click
			      (fn (e)
				(show_main_menu)))

    ;; make the repl more sophisticated
    (when (and (is_symbol? `$ace_editor)
               repl)
      (defglobal repl_editor (ace.edit repl.input_container)
         {
          `serialize_with_image: false
          })
      (-> repl_editor.commands `addCommand
          {
           `name: "execute"
           `bindKey: { `win: "Shift-Enter" `mac: "Shift-Enter" }
           `exec: (function (editor)
                            (let
                                ((val (-> editor `getValue)))
                              (-> repl `evaluate val)
                              (-> editor `setValue "", -1)))
                                 
           })
      (-> repl_editor.session `setUseSoftTabs true)
      (-> repl_editor.session `setMode "ace/mode/juno")
            
      (-> repl_editor `setOptions {
                                   `enableBasicAutocompletion: true
                                   `enableLiveAutocompletion: true
                                   `showFoldWidgets: true
                                   })
      (-> repl_editor.session `setUseWorker true)
      (-> repl_editor `setShowFoldWidgets true))

    (push controls
          (make_editor "" { `type: "juno" }))
    
    (when (is_symbol? `repl)
      (-> repl.view `remove)      
      (setq initial_split
            (split_view_vertical controls.0
                                 repl))
      (-> (get_by_id "body") `appendChild initial_split.view)    
      (-> initial_split `initialize))
  (notify (+ "Hello " *namespace* ))
  true))





