
;; main browser initialization file - initializes the user browser environment
;; after the browser_workspace has setup the underlying environment

(defglobal main_menu_button nil) ;; placeholders 
(defglobal resource_loader_button nil)
(defglobal juno_container nil)
(defglobal repl_editor nil)
(defglobal *scratch* ";; *scratch* buffer\n\n")
(defglobal *key_bindings* {
                           repl:{}
                           buffer_editor:{}
                           })



(defparameter *non_displayed_controls* {})
(defvalue *main_menu* [])
(defvalue *serialized_controls* [])

;; the controls at the top level of the view
(defglobal $root_controls [])

;; the global pointer to the control which has focus
;; nil if there are no focus points or values.

(defparameter *last_focus* nil)
(defparameter *app_menu_control* nil)

(set_prop *key_bindings*.repl          
          `history_next_entry { win: "Ctrl-Alt-n" mac: "Ctrl-Alt-n" }                                                               
          `history_prior_entry { win: "Ctrl-Alt-p" mac: "Ctrl-Alt-p" })

(create_css_entry "td.juno-obj-to-dom-key"
                  [["vertical-align" "top"]
                   ["color" "#881280"]
                   ["text-align" "right"]
                   ["font-weight" "bold"]
                   ["padding-right" "5px"]])

;;(create_css_entry "span.juno-value"
 ;;                 [["display" "inline-block"]])
   
;;(create_css_entry "li.juno-array-item"
;;                  [["list-style" "decimal"]])   
 

(defun_sync value_to_dom (val options _path)
  (let 
      ((classes "juno-value juno-type-")
       (options (or options {}))
       (_path (or _path [] ))         
       (lpath (function () (join "~" _path))))
    (declare (function array_to_dom obj_to_dom)
             (global array_to_dom obj_to_dom))
    
    (cond 
      (is_array? val)
      (array_to_dom val options _path)
      (is_element? val)
      (progn
       (if (== val.offsetHeight 0)
         val
         (details
          (summary { `lpath: (lpath) `class: (+ classes "view") `tabindex:0 } (+ (sub_type val) " "))
          (span { `tabindex: 0 `style: "font-family: var(--main-app-font)" } "[ RENDERED ELEMENT ]"))))
      (is_regex? val)
      (span { `lpath: (lpath) `tabindex: 0  `class: (+ classes "regexp") } (-> val `toString))
      (is_string? val)
      (if (starts_with? "=:" val)
        (span { `lpath: (lpath) `tabindex: 0  `class: (+ classes "symbol") } (JSON.stringify val))
        (span { `lpath: (lpath) `tabindex: 0 `class: (+ classes "string") } (JSON.stringify val)))
      (instanceof val Error)
      (details (summary { `class: (+ classes "error") } 
                        (span { `tabindex: 0 `class: (+ classes "error") `style: "margin-left: 5px; font-style: italic;" } val.name " " val.message))
               (progn
                (defvar tmp (pre { `tabindex: 0 `class: (+ classes "error") }))
                (set_prop tmp `innerHTML (join "\n" (rest (split_by "\n" val.stack))))
                tmp))
      (is_function? val)
      (details (summary { `tabindex: 0 `lpath: (lpath) `class: (+ classes "function") }
                        (span { `lpath: (lpath)
                               `class: (+ classes "function")
                               `style: "margin-left: 5px; font-style: italic;" }
                              (aif (fn_signature val)
                                   (if (== it.type "class")
                                     (+ "class " it.name)                                            
                                     (+ (if (== it.type "async")
                                          "(fn ("                                            
                                          "(function (")
                                        (join " " it.args)
                                        "))")))))
               (pre  { `lpath: (lpath)  `tabindex: 0 `class: (+ classes "function") } (-> val `toString)))
      (is_object? val)
      (obj_to_dom val options _path)          
      else
      (span { `lpath: (lpath) `tabindex: 0 `class: (+ classes (lowercase (sub_type val))) } val))))  

(defun_sync array_to_dom (arr options _path)
    (let
        ((total_len arr.length)
         (_path (or _path []))
         (lpath (function () (join "~" _path)))
         (options (or options {}))
         (expanded false)
         (expansion_mode false)
         (detail_elem nil)
         (expansion_elem nil)
         (idx -1)
         (segment_size 10)
         (new_row_elem [])
         (render_array (function ()
                           (ol { `lpath: (lpath) `start: 0 `class: "juno-type-array" } 
                             (progn 
                                (for_each (val arr)
                                    (progn
                                        (inc idx)
                                        (li { `class: "juno-array-item" } 
                                            (value_to_dom val options (conj _path [idx])))))))))
         (row_elem []))
      (assert (is_array? arr))
      (when (or (> _path.length 2)
                (> arr.length (or options.expansion_length 30)))
        (= expansion_mode true))
            
      (= detail_elem 
         (details (+ { `class: "juno-type-array" }
                      (if (and (== _path.length 0)
                              (not expansion_mode))
                      { `open: true }
                      {}))
                 (summary { `lpath: (lpath)  `tabindex: 0 }  "Array [" total_len "] ")
                 (if expansion_mode
                     (= expansion_elem (span { `class: "juno-in-expansion" } (+ (dtext "Opening") "...")))
                     (render_array))))
     (when expansion_mode
         (attach_event_listener detail_elem
                                `toggle
                                (fn (e)
                                    (unless expanded
                                     (= expanded true)
                                     (-> expansion_elem `replaceWith (render_array))
                                     (= render_array nil)))))
     detail_elem))
           
(defun_sync obj_to_dom (obj options _path)
  (let
      ((options (or options {}))
       (classes "juno-value juno-type-")
       (detail_elem nil)
       (expanded false)
       (expansion_elem nil)
       (expansion_mode false)
       (render_table (function () 
                         (table
                            (body
                             (for_each (keyval (pairs obj))
                                       (destructuring_bind (key value)
                                                           keyval
                                                           (tr 
                                                            (td {  `class: "juno-obj-to-dom-key" } key)
                                                            (td { `class: "juno-obj-to-dom-value" } 
                                                                (value_to_dom value options (conj _path [ key ] ))))))))))
       (_path (or _path []))
       (lpath (function () (join "~" _path))))
    (when (or (eq nil options.visited)
              (< _path.length 2))
           (set_prop options
                     `visited (new Set)))
    
    (if (-> options.visited `has obj)
        (span { `lpath: (lpath) `tabindex: 0 } "[CIRCULAR]")
        (progn
          (-> options.visited `add obj)    
          (when (> _path.length 2)
              (= expansion_mode true))
          (= detail_elem 
             (details (+ {  `class: "juno-obj-to-dom" }
                        (if (== _path.length 0)
                          { `open: true }
                          {}))
                   (summary { `lpath: (lpath) `class: "juno-obj-to-dom" } obj.constructor.name)
                   (if expansion_mode
                       (= expansion_elem (span { `class: "juno-in-expansion" } (+ (dtext "Opening") "...")))
                       (render_table))))
          (when expansion_mode
               (attach_event_listener detail_elem
                                      `toggle
                                      (fn (e) 
                                          (unless expanded
                                             (= expanded true)
                                             (-> expansion_elem `replaceWith (render_table))
                                             (= render_table nil)))))
          detail_elem))))

(defun copy_text_to_clipboard (text)
        (if text
           (let ((temp (textarea { `style: "position: absolute; top: -100px; left: -200px;"  } )))
               (-> (get_by_id "body") `append temp)
               (set_prop temp
                         `value
                         text)
               (-> temp `select)
               (-> temp `setSelectionRange 0 999999)
               (-> document `execCommand "copy")
               (-> temp `remove)
               true
            )
            false)
        { `usage: ["text:string"]
          `description:"Copies the provided textual argument to the system clipboard.  It cannot copy more complex types due to security limitations of browser sandboxed code."
          `tags: ["env" "copy" "clipboard" "ui"]
        } )


(defun *help_menu_function* ()
  [["No Help Installed" (fn () false) ]])


(console.log "browser_initializer running")

(defun current_controls ()
  (flatten (control_tree $root_controls)))

(defun cascade_resize (top_control)
  (control_tree (or top_control $root_controls)
                (fn (control)
                  (if control.resize
                    (-> control `resize)))))
    

(defun get_control_by_id (id)
  (let
      ((controls (current_controls))
       (ctrl nil))
    (for_each (`control controls)
              (when (== id (and control.options control.options.id))
                (= ctrl control)
                (break)))
    ctrl))

(defun replace_control (target_control new_control)
  (let
      ((tmp (new Object))
       (replaced_keys (new Set)))
    (assert (is_object? target_control) "Invalid object provided for old_control")
    (assert (is_object? new_control) "Invalid object provided for new_control")
    ;; first transfer the old object contents to the new location
    (for_each (k (keys target_control))
              (set_prop tmp
                        k
                        (prop target_control k)))
    
    ;; now tmp has the target_control scope references
    ;; replace the target_control with new values
    (for_each (k (keys new_control))
              (progn
               (-> replaced_keys `add k)
               (set_prop target_control
                         k
                         (prop new_control k))))
    
    ;; now remove any keys that are not in the set from the target_control
    (for_each (k (keys target_control))
              (if (not (-> replaced_keys `has k))
                (remove_prop target_control k)))
    
    ;; the objects should be swapped at this point
    ;; return tmp as the old control
    tmp))

(defun control_for_dom_element (elem)
    (let
        ((control_id nil))
        (assert (is_element? elem) "Invalid element provided")
        (= control_id (-> elem `getAttribute "control_id"))
        (aif (and control_id ;; we have a control_id, so get the control
                  (get_control_by_id control_id))
             it ;; and return it
            (cond
              (eq nil elem.parentElement)
              nil ;; at top (or cannot go up further) so return nil
              
              ;; no control found and we have a parent_element
              else
              (control_for_dom_element elem.parentElement)))))



(defun control_position (control)
    (let
       ((parent_view nil)
        (parent_control_position 0)
        (parent_control nil))
    (assert control.view "target_container isn't a control container")
    (= parent_view control.view.parentElement)
    (when parent_view
        (= parent_control (control_for_dom_element parent_view))
        (when (and parent_control
                   parent_control.controls)
           (map (fn (parental_sub_control idx)
                    (when (== parental_sub_control control)
                        (= parent_control_position idx)))
                (-> parent_control `controls))))
    {
        `child: control
        `parent: parent_control
        `child_position: parent_control_position
    }))

(defun get_container_for_control (control)
    (let
        ((existing_container nil)
         (pos nil)
         (next_parent nil)
         ;; controls should be in one of these container types
         (valid_containers ["split_view_horizontal" "split_view_vertical" "control_container" ]))
      (assert (and (is_object? control)
                   control.view)
              "Invalid control received")
      (= pos (control_position control))
      (debug)
    ;; is the child control (the control passed) a container?
      (cond 
        (and pos.child
           (contains? pos.child.type valid_containers))
        (= existing_container control)
        (and pos.parent
            (contains? pos.parent.type valid_containers))
        (= existing_container pos.parent)
        pos.parent
        (progn
          (while (and pos.parent
                      (not existing_container))
             (progn
                 (= pos (control_position pos.parent))
                 (console.log "pos is now: " pos)
                 (if (and pos.parent
                          (contains? pos.parent.type valid_containers))
                     (= existing_container pos.parent))))))
       
      existing_container))

;; *scratch* buffer

(defun container_view_operation (command target_control new_control options)
    (let
        ((target_root_control (control_for_dom_element target_control.view))
         (existing_container nil)
         (position_details   nil)
         (tmpview nil)
         (new_container nil)
         (old_control nil)
         (child_index nil)
         (idx -1)
         (targeted nil))
      (assert target_root_control "Unable to find the target control")
      
      (= existing_container (get_container_for_control target_root_control))
      (when (eq nil existing_container)
          (throw TypeError "Cannot find the container for the control to be added"))
      (assert (is_function? existing_container.set_content) "target_container cannot set content")
      
      (when (== target_root_control existing_container)
          (= position_details (control_position existing_container))
          (= child_index position_details.child_position)
          (= existing_container position_details.parent))

      (when (eq nil child_index)
      ;; now which position is the child in the container?
        (for_each (`child (-> existing_container `controls))
                  (progn
                   (inc idx)
                   (when (== child target_root_control)
                     (= child_index idx)
                     (break)))))
             
      
      (= position_details
         {
          `target_root: target_root_control
          `target_position: child_index
          `container: existing_container
          `parent_container: (control_position existing_container)
                                  
          })
      
      (cond
          (== command "replace")
          (progn
              (assert (is_object? new_control) "Invalid control provided for the replacement control")
              (= targeted (replace_control position_details.target_root new_control))
              (when (prop *non_displayed_controls*
                          new_control.options.id)
                    (remove_prop *non_displayed_controls*
                                 new_control.options.id))
              (when (and targeted.view
                         targeted.view.parentElement)
                     ;; we are mounted so replace it
                    (-> targeted.view `replaceWith new_control.view)
                    (-> new_control `initialize))
              (set_prop *non_displayed_controls*
                        targeted.options.id
                        targeted))
          (== command "add_left")    
          (progn
              (assert (is_object? new_control) "Invalid control provided for the replacement control")
              (= tmpview (div { } "Placeholder"))
              ;; get it off the dom
              (-> position_details.target_root.view `replaceWith
                  tmpview)                    
              (= new_container (split_view_vertical new_control position_details.target_root options))
              (-> position_details.container `set_content position_details.target_position new_container))
          (== command "add_right")
          (progn
              (assert (is_object? new_control) "Invalid control provided for the replacement control")
              (= tmpview (div { } "Placeholder"))
              ;; get it off the dom
              (-> position_details.target_root.view `replaceWith
                  tmpview)                    
              (= new_container (split_view_vertical position_details.target_root new_control options))
              (-> position_details.container `set_content position_details.target_position new_container))
          (== command "add_top")
          (progn
              (assert (is_object? new_control) "Invalid control provided for the replacement control")
              (= tmpview (div { } "Placeholder"))
              ;; get it off the dom
              (-> position_details.target_root.view `replaceWith
                  tmpview)                    
              (= new_container (split_view_horizontal new_control position_details.target_root  options))
              (-> position_details.container `set_content position_details.target_position new_container))    
          (== command "add_bottom")
          (progn
              (assert (is_object? new_control) "Invalid control provided for the replacement control")
              (= tmpview (div { } "Placeholder"))
              ;; get it off the dom
              (-> position_details.target_root.view `replaceWith
                  tmpview)                    
              (= new_container (split_view_horizontal position_details.target_root new_control options))
              (-> position_details.container `set_content position_details.target_position new_container)))

      ;; do a cascade resize since parent elements may have changed
      (when position_details.container
        (setTimeout (fn ()
                      (cascade_resize $root_controls))
                    20))
      position_details))
  
  
  
(defun set_focus_to (target_control _controls)
  (let
      ((focused_list (query_all ".juno-focused"))
       (controls (or _controls
                     (reduce (c (current_controls))                        
                        (when c.on_focus                          
                          c)))))
    
    (for_each (control controls)
                 (when (and (or (eq nil target_control)
                                (not (== target_control control)))
                            (is_function? control.on_blur))
                   (-> control `on_blur)))
    
    ;; remove any focus class markers
    (when (> focused_list.length 0)
      (= focused_list (map (fn (v) v) focused_list))       
      (apply remove_class "juno-focused" focused_list))
    (for_each (control controls)
                 (when (and (or (eq nil target_control)
                                (not (== target_control control)))
                            (is_function? control.on_blur))
                   (-> control `on_blur)))
    (when (not (== *last_focus* target_control))
      (when (and *last_focus*
                 (prop *last_focus* `menu_items))
        (-> *app_menu_control* `remove_menu (or (prop *last_focus* `name)
                                                "Control"))))
      
    (if target_control
      (progn
              
       (-> target_control `on_focus)              
       (setq *last_focus* target_control)
       (when target_control.menu_items
         (-> *app_menu_control* `add_menu [ (or target_control.name
                                                "Control")
                                           target_control.menu_items ])))
             
       
      (progn
       (setq *last_focus* nil)
       (console.log "lost all control focus")
       (notify "lost all control focus")))))

(defun process_focus_chain (e originator_container)
  (progn
   (handle_event e)   
   (when e.path
     (let
         ((target_control nil)
          (controls (reduce (c (current_controls))                        
                        (when c.on_focus                          
                          c)))
          (focused_list (query_all ".juno-focused")))

      
       (for_each (elem e.path)
          (progn
           (for_each (control controls)
                     (when (== elem control.view)
                       (= target_control control)
                       (break)))
           (when target_control
             (break))))
       
       (set_focus_to target_control controls)))))


    

(defun make_menu (for_element menu_items options)
  (let
      ((menu_items menu_items)
       (for_element for_element)
       (pos nil)
       (disappear_timer nil)       
                                        
       (view nil))
    (aif (get_by_id "cmenu")
         (-> it `remove))
    (setq view
          (div { `id: `cmenu `class: "juno-menu" `style: "z-index: 30" }
               (div {  `class: "pure-menu pure-menu-horizontal"  }               
                    (ul { `class: "pure-menu-list" }                 
                        (map (fn (item idx)                     
                               (if item
                                 (li { `idx: idx `class: "pure-list-item" } (a { `idx: idx  `href: "#" `class: "pure-menu-link" } item.0))
                                 []))
                             (or menu_items []))))))

    (when for_element
      (setq pos
            (-> for_element `getBoundingClientRect))
      (set_style [["top" (+ "" (Math.max 0 pos.bottom) "px") ]
                  ["left" (+ "" (Math.max pos.left 0) "px") ]] view)
      (console.log "make_menu: found element at: " pos))
    
    (attach_event_listener view
                           `click
                           (fn (e)
                             (progn
                              (handle_event e)
                              (defvar idx (-> e.srcElement `getAttribute `idx))
                              (defvar item (prop menu_items idx))
                             
                              (console.log "clicked item: " idx item item.1)
                               (when item
                                 (item.1 e))
                               (-> view `remove))))
    (setTimeout
     (fn ()
       (progn
        (attach_event_listener view
                               `mouseleave
                               (function (e)
                                         (progn
                                          (when disappear_timer
                                            (clearTimeout disappear_timer))
                                          (= disappear_timer (setTimeout (fn ()
                                                                           (progn
                                                                            (console.log "removed view")
                                                                            (-> view `remove)
                                                                            (= disappear_timer nil)))
                                                                         500)))))
        (attach_event_listener view
                               `mouseenter
                               (function (e)
                                         (when disappear_timer
                                           (clearTimeout disappear_timer)
                                           (= disappear_timer nil))))))
     500) ;; delay a little before adding the timeout so we don't accidentally hover over it 
    (if options.do_not_attach
      view
      (progn       
       (-> (get_by_id "body") `appendChild view)
       (console.log "appended view" view)
       view))))



(defun request_user_input (prompt type options)
  (new Promise (fn (resolve reject)                 
                 (let
                     ((user_input (if options.input
                                    options.input
                                    (input { `type: (or type "text") })))
                      (ok_button (button { `class: "pure-button-primary" `style: "float:right" } "OK"))
                      (cancel_button (button  "Cancel"))
                      (dwin (dialog prompt                                    
                                    (br)
                                    user_input
                                    (br)
                                    (div { `class: "pure-button-group" `role: "group" }
                                         cancel_button
                                         ok_button))))
                   (attach_event_listener ok_button
                                          `click
                                          (fn (e)
                                            (do                                              
                                              (resolve user_input.value)
                                              (-> dwin `remove))))
                   (attach_event_listener cancel_button
                                          `click
                                          (fn (e)
                                            (do
                                              (-> dwin `remove)
                                              (resolve nil))))
                   (-> juno_container
                       `appendChild dwin)
                   (when (is_function? dwin.showModal)
                     (-> dwin `showModal))))))
                                           
    
                     
(defun message (text)
  (rlog (div { `style: "border-left: 5px solid darkblue; padding: 5px;" } text)))

(defun error_message (text)
  (rlog (div { `style: "border-left: 5px solid red; padding: 5px;" } text)))

(defun log_error (message error_instance)
  (progn
   (error_message message)
   (console.error message)
   (when error_instance
     (when error_instance.messasge
       (error_message error_instance.message))
     (console.error error_instance))))
     

(defun load_js_file (file)
  (let
      ((fdata (try
                (read_file file { `read_as: "text" })
                (catch Error (e)
                  e)))
       (assignment_to nil)
       (error nil))
    (message (+ "found and read JS " file.name ", size: " file.size))
    (cond
      (and fdata
           (not (instanceof fdata Error)))
      (progn
       (aif (request_user_input "Enter a name for a reference to the loaded Javascript" "text")
            (do
              (= assignment_to it)              
              (try
                (progn
                 (debug)
                 (cond
                   (or (== assignment_to "global")
                       (== assignment_to "script"))
                   (-> (page_header) `append (script { `type: "text/javascript" `charset: "utf-8" }
                                                     (javascript fdata)))
                   else
                   (eval `(defglobal ,#assignment_to (javascript ,#fdata)))))
                (catch Error (e)
                  (do
                    (= error true)
                    (error_message (+ "Unable to create " assignment_to ": " e.message))
                    (console.error "ERROR: " e))))                                                    
              (when (not error)
                (message (+ "Loaded JS to " assignment_to ))))
            (notify "Entry Cancelled")))
      else
      (progn
       (rlog "Unable to read the file")
       (console.error fdata)))))

(defun embed_js_orig (name js_text) 
  (progn
   (debug)
   (-> (page_header) `append (html/script { `id: name `type: "text/javascript" `charset: "utf-8" }
                                     (javascript js_text)))   
   (eval `(defglobal ,#name (html/get_by_id ,#name)
            {
             `embedded_script: true
             }))))

(defun embed_js (name js_text) 
  (progn
   (debug)
   (eval `(-> (page_header) `append (html/script { `id: name `type: "text/javascript" `charset: "utf-8" }
                                     (javascript ,#js_text))))
   (eval `(defglobal ,#name (html/get_by_id ,#name)
            {
             `embedded_script: true
             }))))

(defun embed_js_file (file)
  (let
      ((fdata (try
                (read_file file { `read_as: "text" })
                (catch Error (e)
                  e)))
       (assignment_to nil)
       (error nil))
    (message (+ "found and read JS " file.name ", size: " file.size))
    (cond
      (and fdata
           (not (instanceof fdata Error)))
      (progn
       (aif (request_user_input "Enter a name for a reference to the loaded Javascript" "text")
            (do
              (= assignment_to it)              
              (try
                (embed_js_orig assignment_to fdata)                   
                (catch Error (e)
                  (do
                    (= error true)
                    (error_message (+ "Unable to create " assignment_to ": " e.message))
                    (console.error "ERROR: " e))))                                                    
              (when (not error)
                (message (+ "Loaded JS to " assignment_to ))))
            (notify "Entry Cancelled")))
      else
      (progn
       (rlog "Unable to read the file")
       (console.error fdata)))))

(defun load_files (files)
  (when (> files.length 0)
    (for_each (file files)
       (do
         (cond
           (== file.type "text/javascript")
           (embed_js_file file)
           (== file.type "text/plain")
           (notify "Text Resource")
           (or (ends_with? file.name ".lisp")
               (ends_with? file.name ".juno"))
           (notify "Loading lisp file"))))))


(defun make_editor (content options)
  (let
      ((options (or options {
                             `type: "juno"                             
                             }))
       (resize_observer nil)
       (intf {})
       (initialized false)
       (id (or options.id (generate_id id)))
       (content (or content ""))
       (controls (div { `style: "display: flex; " }))
       (parent_view nil)
       (check_observer (fn ()
                         (when (not (== view.parentElement parent_view))
                           (-> resize_observer `disconnect)
                           (-> resize_observer `observe view.parentElement)
                           (= parent_view view.parentElement))))
       (editor_div (div { `style: "height: calc(100% - 23px); width: 100%; overflow: hidden;" }))
       (view (div { `control_id: id `style: "overflow: hidden; height: calc(100% - 10px); display: inline-block; width: inherit;" }                 
                  controls
                  editor_div))     
       (perform_resize (fn ()
                         (when view.parentElement
                           (check_observer)
                          ;(console.log "editor: main resize: " (prop view.parentElement `offsetWidth) (prop view.parentElement `offsetHeight))
                          (html/set_style [["width" "calc(100% - 2px)"];           (+ "" (- (prop view.parentElement `offsetWidth) 2) "px")]
                                           ["height" (+ "" (- (prop view.parentElement `offsetHeight) 10) "px")]]
                                          view)
                          (-> editor `resize))))
       (editor nil)
       (set_evaluator (fn ()
                        (when options.evaluator
                               (-> editor.commands `addCommand
                                   {
                                    `name: "execute"
                                    `bindKey: { `win: "Shift-Enter" `mac: "Shift-Enter" }
                                    `exec: (function (editor)
                                                     (let
                                                         ((val nil)
                                                          (copytext (if options.repl_mode
                                                                      (-> editor `getValue)
                                                                      (-> editor `getCopyText))))
                                                       (if (blank? copytext)
                                                         (if (not options.repl_mode)
                                                           (notify (dtext "Please highlight text to evaluate")))
                                                         (try
                                                           (options.evaluator copytext)
                                                           (catch Error (e)
                                                             (progn
                                                              (notify (+ (dtext "Unhandled error") ": " e.message ))
                                                              (console.error e)))))))
                                    }))))
       (initialize_editor (fn ()
                            (when (not initialized)
                              (setq initialized true)
                              (setq parent_view view.parentElement)
                              (setq editor
                                    (ace.edit editor_div))
                              (set_evaluator)
                              (when options.on_save
                                (-> editor.commands `addCommand
                                    {
                                     `name: "save"
                                     `bindKey: { `win: "Ctrl-s" `mac: "Command-s" }
                                     `exec: (function (editor)
                                                      (options.on_save (-> editor `getValue)))
                                     }))

                              
                              
                              (when (is_array? options.commands)
                                (for_each (command options.commands)
                                          (do
                                            (-> editor.commands `addCommand
                                                command))))
                              
                              (when options.on_focus
                                (-> editor `on `focus options.on_focus))
                              (when options.on_blur
                                (-> editor `on `blur options.on_blur))
                              (when options.read_only
                                (-> editor `setReadOnly true))
                              (-> editor.session `setUseSoftTabs true)
                              (-> editor `setOptions {
                                                      `enableBasicAutocompletion: true
                                                      `enableLiveAutocompletion: true
                                                      `showFoldWidgets: true
                                                      `cursorStyle: "wide"
                                                      `useSoftTabs: true
                                                      `highlightActiveWord: true
                                                      `fontFamily: "Roboto Mono"                  
                                                      })
                              (-> editor.session `setUseWorker true)
                              (-> editor `setShowFoldWidgets true)
                              (cond
                                (== options.type "juno")
                                (-> editor.session `setMode "ace/mode/juno")
                                (== options.type "javascript")
                                (-> editor.session `setMode "ace/mode/javascript")
                                (== options.type "css")
                                (-> editor.session `setMode "ace/mode/css"))
                              (console.log "editor initialized: content: " (subtype content) content)                                                          
                              (-> editor `setValue content -1)
                              
                              (when options.on_change
                                (-> editor `on `change (function (val)
                                                                 (options.on_change editor val))))                             
                              (-> editor `resize true)                             
                              (set_prop intf `editor editor)                             
                              ))))
    
    (if (not (is_symbol? `$ace_editor))
      (throw TypeError "$ace_editor symbol not found, and is required for this editor."))
    
    (when (is_element? options.command_bar)
      (-> controls `prepend options.command_bar))
      
    (= resize_observer (new ResizeObserver perform_resize))
    (= intf
       {
        `view: view
        `editor: editor
        `set: (fn (text)
                (-> editor `setValue text))
        `get: (fn (text)
                (-> editor `getValue))
        `type: `make_editor
        `set_evaluator: (fn (new_evaluator)
                          (when (is_function? new_evaluator)
                            (set_prop options
                                      `evaluator
                                      new_evaluator)
                            (set_evaluator)))
        `get_evaluator: (fn ()
                          options.evaluator)
        `save: (function ()
                         (options.on_save (-> editor `getValue)))                 
        `options: options
        `name: (or options.name "Untitled Buffer")
        `toJSON: (function ()
                           `(make_editor ,#(-> editor `getValue) ,#options))
        `initialize: (fn ()
                       (when view.parentElement
                         (console.log "editor: performing initialization")
                         (-> resize_observer `observe view.parentElement)
                         (initialize_editor)                        
                             
                         ))
        })))
               


(defun select_evaluator ()
  (let
      ((idx -1)
       (dups (new Set))
       (new_name nil)
       (selected_idx nil)
       (available (reduce (control (flatten (control_tree $root_controls)))
                          (when control.evaluate
                            (if (-> dups `has (or control.name "Untitled"))
                              (progn
                               (= new_name (+ (or control.name "Untitled")
                                             "-" idx))
                               (-> dups `add new_name)
                               [ (inc idx) new_name
                                 control ])
                              (progn
                               (-> dups `add control.name)
                               [ (inc idx) control.name control ])))))
       (selection_box (select { }
                              (map (fn (v)
                                     (option { `value: v.0 } v.1))
                                     (or available [])))))
    (= selected_idx
       (request_user_input (dtext "Select an available evaluator")
                           nil
                           { input: selection_box }))
    (when selected_idx
        (prop (prop available selected_idx) 2))))
  

(defun buffer_editor (title namespace path_to_value mode options)
  (let
      ((nseval (if (not (blank? namespace))
                 (-> Environment `get_namespace_handle namespace)
                 Environment))
       (title_span (span { `class: "juno-title" } title))
       (options (or options {}))
       (id (or options.id (generate_id "buffer_editor")))
       (evaluator (cond (and (is_object? options.evaluator)
                             (is_function? options.evaluator.evaluate))
                        options.evaluator.evaluate
                        (is_function? options.evaluator)
                        options.evaluator))
                                                
       (evaluator_span (span { `class: "juno-evaluator" `title: (dtext "Name of the evaluator assigned to this buffer") } "-"))
       (buffer_commands_button (button { `title: "Buffer Commands" } "⋯"))
       (is_dirty? false)
       
       (command_bar (or options.command_bar
                        (div { `class: "juno-buffer-bar" }
                             buffer_commands_button
                             title_span                                                             
                             (span { `title: "Namespace" `class: "juno-namespace" `style: "display:inline-block; padding-left: 30px; padding-right: 5px;" } nseval.namespace)
                             evaluator_span
                             (if options.read_only
                               (span { `title: "This buffer doesn't allow editing" `style: "padding-left: 5px; padding-right: 5px;" } (dtext "Locked"))
                               ())
                             
                             (span { `class: "juno-mode" `title: "Current Editing Mode" `style: "float: right; margin-right: 15px; display: inline-block; padding-left: 5px; padding-right: 5px;" } mode))))      
       (init_value (resolve_path path_to_value nseval.global_ctx.scope))
       (on_save (fn (value)
                  (progn
                   (try
                     (progn
                      (set_path path_to_value nseval.global_ctx.scope
                                value)
                      (remove_class "juno-needs-save" title_span)
                      (= is_dirty? false)
                      (notify (+ "Set " title)))
                     (catch Error (`e)
                       (progn
                        (log_error (+ (dtext "Unable to save buffer")
                                      " "
                                      title)
                                   e)))))))
       (on_focus (fn ()
                   (progn                                     
                    (setq *last_focus* edit_control)
                    (add_class "juno-focused" command_bar))))
       
       (edit_control (make_editor (if (is_string? init_value)
                                    init_value
                                    "")                                  
                                  {
                                   type: mode
                                   command_bar: command_bar                                                                     
                                   on_save: on_save                                   
                                   read_only: options.read_only
                                   on_change: (function (editor val)
                                                        (progn
                                                         (when (not is_dirty?)
                                                           (= is_dirty? true)
                                                           (add_class "juno-needs-save" title_span))
                                                         (when options.on_change
                                                           (-> options.on_change editor val))))
                                   evaluator: evaluator                                   
                                   }))
       (menu_items (fn ()
                     [(when path_to_value
                        [(+ (dtext "Save to") " " (last path_to_value))
                         (fn (e) (-> edit_control `save))])
                      [(dtext "Select Evaluator")
                       select_my_evaluator]]))
       (set_evaluator_control (fn (control)
                                (if control.evaluate
                                  (progn
                                   (-> edit_control `set_evaluator control.evaluate)
                                   (set_prop options
                                             `evaluator_id
                                             control.options.id)
                                   (if control.name
                                     (set_prop evaluator_span
                                               `innerText
                                               (+ "⭢ " control.name)))))))       
       (select_my_evaluator (fn ()
                        (aif (select_evaluator)
                             (progn
                              (set_evaluator_control it)
                              (notify (+ (dtext "Evaluator set to ") it.name)))))))
                            
    
    (console.log "buffer_editor: init_value: " init_value path_to_value nseval)
    (attach_event_listener buffer_commands_button
                           `click
                           (fn (e)
                             (progn
                              (handle_event e)
                              (make_menu buffer_commands_button
                                                           (menu_items)
                                                           ))))
                              
                              
                                          
    (set_prop options
              `id
              id)
    (set_prop edit_control
              `sub_initializer
              edit_control.initialize)
    (set_prop edit_control
              `set_evaluator_control  set_evaluator_control
              `on_focus on_focus
              `options options
              `name title
              `menu_items menu_items
              `type `buffer_editor
              `initialize (fn ()
                            (when edit_control.view.parentElement                              
                              (-> edit_control `sub_initializer)
                              (console.log "buffer_editor: sub initialized: setting evaluator if I have it: " options)
                               (set_evaluator_control (get_control_by_id options.evaluator_id))))
                                       
                              
              `toJSON (function ()
                                 `(buffer_editor ,#title ,#namespace ,#path_to_value ,#mode ,#options)))
    edit_control))




(defun log_view (options)
  (let
      ((output_container (div {   `style: "font-size: 0.9em; height: calc(100% - 20px); overflow: scroll; width: 100%; vertical-align:bottom; " } ))       
       (options (or options {}))
       (title_span (span { `class: "juno-title" } (if options.title options.title "Unnamed")))
       (control_status (div {  `class: "juno-buffer-bar" }
                            (cond (is_array? options.additional_elements)
                                  options.additional_elements
                                  options.title
                                  title_span
                                  else
                                  [])))
       (resize_observer nil)
       (parent_view nil)
       (check_observer (fn ()
                         (when (not (== view.parentElement parent_view))
                           (-> resize_observer `disconnect)
                           (-> resize_observer `observe view.parentElement)
                           (= parent_view view.parentElement))))
       (id (or options.id (generate_id "log_view")))
       (view (div { `tabindex: 0 `control_id: id `style: "overflow: hidden; margin: 0px; padding: 0px; height: 100%; width: 100%;" }
                  control_status
                  output_container))
       (initialized false)
       (initialize (fn ()
                     (when (and view.parentElement
                                (not initialized))
                       (= initialized true)
                       (= parent_view view.parentElement)
                       (= resize_observer (new ResizeObserver perform_resize))
                       (-> resize_observer `observe view.parentElement))))
                       
       (perform_resize (fn ()
                         (let
                               ((new_height (- (prop view.parentElement `offsetHeight) 5))
                                (new_width  (- (prop view.parentElement `offsetWidth) 0)))
                             
                             (set_style [[ "width" (+ "" new_width "px") ]
                                         [ "height" (+ "" new_height "px") ]]
                                        view))))
       (add_result (fn (result command_text error_state)
                     (progn
                      (when (not (eq nil command_text))
                        (-> output_container
                            `append
                            (if (> command_text.length 100)
                              (details {  style:"border-left: 3px solid #0167835e; border-top: 1px solid #00000008; padding: 10px; margin-top: 7px; background: #F8F6F6; width: calc(100% - 10px); display: inline-block; " }
                                       (summary { `tabindex: 0 `class: "juno-code-value" } (+ (-> command_text `substr 0 100) "..."))
                                       (pre { `tabindex: 0 `class: "juno-code-value" }
                                             command_text))
                              (div {  style:"border-left: 3px solid #0167835e; border-top: 1px solid #00000008; padding: 10px; margin-top: 7px; background: #F8F6F6; width: calc(100% - 10px); display: inline-block; " }
                                   (code { `tabindex: 0 `class: "juno-code-value" }
                                             command_text)))))
                      (-> output_container
                          `append
                          (div {  `style: (+ " margin-top: 0px; background: #F8F6F6; width: calc(100% - 10px); display: inline-block; font-family: var(--main-mono-space); "
                                            (if (eq nil command_text)
                                              "border-top: 1px solid #00000008; padding: 5px;"
                                              "border-left: 3px solid #0167835e; padding: 10px; margin-bottom: 5px; border-bottom: 1px solid transparent;")) } 
                               (value_to_dom result)))
                      (when (> output_container.children.length (or options.max_entries 100))
                        (-> (last output_container.children)
                            `remove))                      
                      (set_prop output_container
                                `scrollTop
                                1000000)
                      (set_prop view
                                `scrollTop
                                0)
                      result)))
       (interf {}))
    (set_prop options
              `id
              id)
    (set_prop interf
              `view view
              `append add_result
              `control_bar control_status
              `output_container output_container
              `initialize initialize
              `resize perform_resize
              `type `log_view
              `clear (fn ()
                       (-> output_container `replaceChildren))
              `options options
              `toJSON (function ()
                                `(log_view ,#options)))
    interf))


   

(defun browser_repl (options)
  (let
      ((options (or options {}))
       (name options.name)       
       (resize_observer nil)
       (namespace_span  (span { `title: "REPL Namespace" `class: "juno-namespace" `style: "display:inline-block; padding-left: 30px; padding-right: 5px;" } (current_namespace)))
       (commands_button (button { `title: "REPL Commands" } "⋯"))
       (title_span (span { `class: "juno-title" } (if options.name options.name "Unnamed")))
       (path_span (span { `tabindex: 0 `title: (dtext "Click to copy focused path")  `class: "juno-path" } ""))
       (current_env Environment)
       (error_state nil)
       (initialized false)       
       (intf nil)
       (id (or options.id (generate_id "repl")))
       (output_control (log_view { `additional_elements: [ commands_button title_span namespace_span path_span ] `id: id }))
       (history (if (is_array? options.history)
                  options.history
                  []))
       (push_history (fn (lisp_text)
                       (progn
                        (push history
                                lisp_text)
                        (= history_idx (- history.length 1))
                        (when (> history.length (or options.max_history_size
                                                    50))
                          (take history)))))
       (history_idx 0) 
       (history_prior_entry (fn ()
                              (when (> history.length 0)
                               (-> input_container `set (prop history history_idx))
                               (dec history_idx)                               
                               (when (< history_idx 0)
                                 (= history_idx (- history.length 1))))))
       (history_next_entry (fn ()
                              (when (> history.length 0)
                               (inc history_idx)                               
                               (when (>= history_idx history.length)
                                 (= history_idx 0))
                               (-> input_container `set (prop history history_idx)))))
       (clear_output (fn ()
                       (-> output_control `clear)))
       (clear_history (fn ()
                        (progn
                         (= history [])
                         (= history_idx 0))))
       
       (repl_key_bindings (function ()
                                    (map (function (kb)
                                             (destructuring_bind (command_name bindings)
                                                 kb
                                                {
                                                 `name: command_name
                                                 `bindKey: bindings
                                                 `exec: (function (editor)
                                                                  (-> intf command_name editor))
                                                 }))                                                      
                                         (or (pairs *key_bindings*.repl) []))))
       (evaluator (fn (lisp_text no_eval)
                    (let
                        ((result nil))
                      (setq error_state nil)
                      (setq current_env (-> Environment `get_namespace_handle (current_namespace)))                    
                      (try
                        (= result (if no_eval
                                    lisp_text
                                    (-> current_env `evaluate lisp_text {} { `throw_on_error: true })))
                        (catch Error (ex)
                          (do
                            (= error_state true)
                            (notify "Error state")
                            (= result ex))))
                      (console.log "<-" result)
                      (set_prop namespace_span
                                `innerText
                                (current_namespace))                     
                      (-> output_control `append result lisp_text error_state)
                      (if (not error_state)
                        (-> input_container `set "")))))
                             
       (input_container (make_editor 
                                   ""                                  
                                  {
                                   type: "juno"                                                                                                                             
                                   on_change: (function (editor val)
                                                        (progn
                                                         true))
                                   `id: id
                                   repl_mode: true                                                                              
                                   evaluator: (fn (lisp_text no_eval)
                                                (progn
                                                 (push_history lisp_text)
                                                 (evaluator lisp_text no_eval)))                                                 
                                   commands: (repl_key_bindings)
                                   }))

       (sview (split_view_horizontal
                                 output_control
                                 input_container
                                 { `ratio: (or options.ratio 0.7) `id: id } ))  ;; 80/20 top-bottom
       
       (view sview.view)
       (non_whitespace_regex (new RegExp "\\\\s"))
       (on_focus (fn ()
                   (progn
                    ;(-> input_container.editor `focus) ;; bring focus to the repl
                    (add_class "juno-focused" output_control.control_bar )))) ;; we know that is the command bar
       (on_blur (fn ()
                  (progn
                   true)))
       (menu_items (fn ()
                     [[(dtext "Clear Output Log")
                       (function ()
                                 (clear_output))]
                      [(dtext "Clear REPL History")
                       (function ()
                                 (clear_history))]]))
       (initialize (fn ()
                     (progn
                      (if initialized
                        (evaluator (div { `style: "display: flex padding: 5px" } "WARNING: REPL already initialized") true)
                        (progn
                         (= initialized true)
                         (console.log "repl initializing")
                         (-> output_control `append (html/div { `style: "display: flex padding: 5px" }                
                                              (html/span { `style: "font-weight: bold; display: inline-block;" } "Juno REPL")
                                              (html/span { `style: "display: inline-block; margin-left: 10px;" }
                                                         "Version: " Environment.build_version   )))))))))

    (attach_event_listener output_control.output_container
                           `focusin
                           (function (e)
                             (progn
                              (handle_event e)
                              (console.log "output-control: focus: " (-> e.srcElement `getAttribute "lpath") e.srcElement)
                              (aif (-> e.srcElement `getAttribute "lpath")
                                   (progn
                                    (set_prop path_span
                                             `innerText
                                             (+ "[ " (join " "
                                                           (for_each (v (split_by "~" it))
                                                                     (cond (> (length (scan_str non_whitespace_regex v)) 0)
                                                                           (+ "\"" v "\"")
                                                                           (isNaN (new Number v))
                                                                           (+ "`" v)
                                                                           else
                                                                           v)))
                                                           " ]"))
                                    (console.log "setting path span:: " it))
                                   (progn
                                    (console.log "clearing path span")
                                    (set_prop path_span
                                             `innerText
                                             ""))))))
    
    (attach_event_listener commands_button
                           `click
                           (fn (e)
                             (progn
                              (handle_event e)
                              (make_menu commands_button
                                         (menu_items)
                                         ))))

    (attach_event_listener path_span
                           `click
                           (fn (e)
                             (progn
                              (copy_text_to_clipboard path_span.innerText)
                              (notify (+ (dtext "Copied") " " path_span.innerText)))))

    ;; by changing the split_view type value, we prevent this control from being split or
    ;; controls being swapped
    
    (set_prop sview
              `type
              "REPL_split")
    
    (set_prop options
              `id
              id)
                   
    (= intf {
             `view: view
             `options: options
             `name: name             
             `input_container: input_container
             `history_next_entry: history_next_entry
             `history_prior_entry: history_prior_entry
             `clear_output: clear_output
             `initialize: initialize
             `type: "browser_repl"
             `resize: (fn ()
                       (-> sview `resize))
             `menu_items: menu_items                           
             `on_focus: on_focus
             `on_blur: on_blur
             `toJSON: (function ()
                                (progn
                                 (set_prop options
                                           `history
                                           [(quote quotel) history])
                                `(browser_repl ,#(or options { `ratio: sview.options.ratio } ))))
             `controls: (fn () [ input_container output_control])
             `output_container: output_control.view
             `log: (fn (val)
                     (-> output_control `append val nil))
             `evaluate: (fn (lisp_text no_eval)
                          (evaluator lisp_text no_eval))
             })
    intf))


(defun control_container (content options)
  (let
      ((contained_content nil)
       
       (resize_observer nil)
       (options (or options {}))
       (name (or options.name nil))
       (id (or options.id (generate_id "container")))       
       (init_timer nil)
       (view (div { `control_id: id `class: "juno-view-container" } ))
       (initialized false)
       (parent_view nil)
       (check_observer (fn ()
                         (when (not (== view.parentElement parent_view))
                           (-> resize_observer `disconnect)
                           (-> resize_observer `observe view.parentElement)
                           (= parent_view view.parentElement))))
       (perform_resize (fn ()
                         (when view.parentElement
                           (check_observer)
                           (let
                               ((new_height (- (prop view.parentElement `offsetHeight) 0))
                                (new_width  (- (prop view.parentElement `offsetWidth) 0)))
                             
                             (set_style [[ "width" (+ "" new_width "px") ]
                                         [ "height" (+ "" new_height "px") ]]
                                        view)))))
       (set_content (fn (position new_content) ;; position is discarded but it is essentially 0 since this is a single unit container
                      (let
                          ((new_view nil))
                        (= new_view
                           (cond
                             new_content.view
                             new_content.view

                             (is_element? new_content)
                             new_content
                             
                             else
                             (progn
                              (if new_content 
                                (div { } (as_lisp new_content))
                                (div { `class: "juno-empty-content" } "Set Content")))))
                        (-> view `replaceChildren new_view)
                        (if (not new_content.view)
                          (= contained_content
                             {
                              `view: view
                              })
                          (= contained_content new_content))
                        (perform_resize)
                        (when new_content.initialize
                          (-> new_content `initialize))  ;; initialize if not already
                        view)))
       (initialize (fn ()
                     (progn
                      (when init_timer
                        (clearInterval init_timer)
                        (= init_timer nil))
                      (when (not initialized)
                        (= initialized true))
                      (when view.parentElement
                        (= parent_view view.parentElement)
                        (-> resize_observer `observe view.parentElement)
                        (perform_resize)
                        (console.log "control_container: initializing with: " content)
                        (when content
                          (set_content 0 content))
                        (when (is_function? contained_content.initialize)
                          (-> contained_content `initialize))))))
                      
                        
       (intf (new Object)))
    
    (set_prop options
              `name
              name
              `id
              id)
    
    (= resize_observer (new ResizeObserver perform_resize))
    
    (= init_timer (setInterval (fn (e)
                                   (progn
                                    (when view.parentElement
                                      (clearInterval init_timer)
                                      (= init_timer nil)
                                      (initialize))))
                               250))
    
    
    (set_prop intf
              `view view              
              `initialize initialize              
              `set_content set_content
              `name options.name
              `resize: perform_resize
              `menu_items options.menu_items
              `controls (fn () contained_content)
              `toJSON (function ()
                                 `(control_container ,#contained_content ,#options))
              `type `control_container
              `options options)))

(defun empty_selection_control (options)
    (let
        ((options (or options {
                               `name: "Empty Selection" 
                               }))
         (resize_observer nil)
         (id (or options.id (generate_id "empty")))
         (initialized false)
         (parent_view nil)
         (check_observer (fn ()
                         (when (not (== view.parentElement parent_view))
                           (-> resize_observer `disconnect)
                           (-> resize_observer `observe view.parentElement)
                           (= parent_view view.parentElement))))
         (perform_resize (fn ()
                           (when view.parentElement
                             (check_observer)
                           (let
                               ((new_height (- (prop view.parentElement `offsetHeight) 30))
                                (new_width  (- (prop view.parentElement `offsetWidth) 25)))
                             
                             (set_style [[ "width" (+ "" new_width "px") ]
                                         [ "height" (+ "" new_height "px") ]]
                                        view)))))
         (initialize (fn ()
                       (when (and view.parentElement
                                  (not initialized))
                         (= initialized true)
                         (= parent_view view.parentElement)
                         (-> resize_observer `observe view.parentElement))))
         (view (div { `control_id: id `style: "height: 100%; width: 100%; overflow: hidden; margin: 10px; border-radius: 20px; border: 5px dotted #A0A0A0;" }
                    (div { `style: "font-size: 3.0em; text-align: center; width: 100%; padding-top: 15px;" } "Select New Control"))))                        
        (set_prop options
                  `id
                  id)
        (= resize_observer (new ResizeObserver perform_resize))
        
        
       {
           `view: view
           `type: "empty_selection_control"
           `id: id
           `initialize: initialize
            `name: options.name
           `resize: perform_resize
           `options: options
           `toJSON: (function ()
                      `[empty_selection_control ,#options ])
       }))



(defun menu_tree (items options _path)
  (let
      ((options (either options { `flat_index: 0 }))
       (path (either _path []))
       (disappear_timer nil)
       (id (either options.id "cmenu"))       
       (menu_element
        (fn (idx text `& args)
          (let
              ((view (li {  `class: "pure-list-item"                                         
                          `style: (if (> args.length 0)
                                    "position: relative;"
                                    "")
                          }
                         (a { 
                             `idx: idx
                             `path: (join "~" (conj path idx))
                             `href: "#"
                             `class: "pure-menu-link" 
                             `style: "min-width: 150px;"
                             }
                            (if (== args.length 0)
                              (span { `path: (join "~" (conj path idx)) `class: "juno-menu-text" } text)
                              [(span { `path: (join "~" (conj path idx)) `class: "juno-menu-text" } text)
                               (span { `class: "juno-menu-submenu" } ">")]))
                         args))
               (timer nil))
            (if (== args.length 0)
              view                           
              (progn
               (attach_event_listener view
                                      `mouseenter
                                      (fn (e)
                                        (do
                                          (when timer
                                            (clearTimeout timer))
                                          (= timer
                                             (setTimeout (fn ()
                                                           (set_style [["display" "inline-block" ]
                                                                       ["position" "absolute"]
                                                                       ["top" "0px"]
                                                                       ["left" (+ "" e.srcElement.offsetWidth "px") ]]
                                                                      view.children.1))
                                                         150)))))
               (attach_event_listener view
                                      `mouseleave
                                      (fn (e)
                                        (do
                                          (when timer
                                            (clearTimeout timer))
                                          (= timer
                                             (setTimeout (fn ()                                                         
                                                           (set_style [["display" "none"]] view.children.1))
                                                         150)))))
               
               view)))))
       (view nil))
    
    (= view
       (ul (+ {}
              { `class: "pure-menu-list"                               
                `style: (+ (if (> path.length 0)
                             "display: none;"
                             "display: inline-block;")
                           "position: relative;")  }
              (if (== path.length 0)
                { `id: id }
                {}))
                     
           (map (fn (item idx)
                  (let
                      ((text (if (is_function? item.0)
                               (item.0)
                               item.0)))
                    (set_prop options
                              `flat_index
                              (+ 1 options.flat_index))                     
                    (cond
                      (is_array? item.1)
                      (menu_element options.flat_index text (menu_tree item.1 options (conj path [ idx 1])))
                      (and (== text "--") (eq nil item.1))
                      (hr { `class: "LightHR" })
                      (is_function? item.1)
                      (menu_element idx text)
                      else
                      [])))
                items)))
    (if (> path.length 0)      
       view
      (progn
       (attach_event_listener view
                              `click
                              (fn (e)
                                (let
                                    ((path (-> e.srcElement `getAttribute "path"))
                                     (idx (-> e.srcElement `getAttribute "idx"))
                                     (target (if path
                                               (resolve_path (split_by "~" path) items))))
                                  (handle_event e)
                                  (console.log "clicked: " path e target )
                                  (-> view `remove)
                                  (sleep 0.01) ;; disconnect and move to back of the event loop for the call
                                  (when (and target
                                             (is_function? target.1))
                                    (target.1 e target.2))
                                  )))
       (setTimeout (fn ()
                     (progn
                      (attach_event_listener view
                                             `mouseleave
                                             (function (e)
                                                       (progn
                                                        (when disappear_timer
                                                          (clearTimeout disappear_timer))
                                                        (= disappear_timer (setTimeout (fn ()
                                                                                         (progn
                                                                                          
                                                                                          (-> view `remove)
                                                                                          (= disappear_timer nil)))
                                                                                       500)))))
                      (attach_event_listener view
                                             `mouseenter
                                             (function (e)
                                                       (when disappear_timer
                                                         (clearTimeout disappear_timer)
                                                         (= disappear_timer nil))))))
                   500) ;; delay a little before adding the timeout so we don't accidentally hover over it 
       {
        `view: view
        `toJSON: (function ()
                           `(menu_tree ,#items ,#options))
        `type: "menu_tree"
        }))))

(defun app_menu(global_menu_path options)
  (let
      ((view nil)
       (options (either options {}))
       (top_levels [])
       (menu_trees (resolve_path global_menu_path Environment.global_ctx.scope))
       (id (or options.id (generate_id "app_menu")))
       (intf {})
       (menu_trees (or menu_trees []))
       (compute_top_levels (fn ()
                             (each menu_trees `0)))
       (help_idx nil)
       (add_menu (fn (menu)
                   (let
                       ((existing_idx (index_of menu.0 top_levels)))
                     (if (== existing_idx -1)
                       (push menu_trees
                             menu)
                       (-> menu_trees `splice existing_idx 1 menu))
                     (set_path global_menu_path Environment.context.scope menu_trees)
                     (build_view))))
       (remove_menu (fn (menu_text)
                      (let
                          ((existing_idx (index_of menu_text top_levels)))
                        (when (> existing_idx -1)
                          (-> (prop view.children existing_idx)
                              `remove)
                          (-> menu_trees `splice existing_idx 1))
                        (set_path global_menu_path Environment.context.scope menu_trees))))                        
       (build_view (fn ()
                       (let
                           ((new_view nil)
                            (header_elem nil))
                         (= top_levels (compute_top_levels))
                         (unless options.disable_help
                                 (push top_levels
                                       "Help")
                                 (= help_idx (- (length top_levels) 1)))
                         
                         (= new_view
                            (ul { `id: id `class: "pure-menu-list" `style: "margin-left: 10px" }
                                (if (> top_levels.length 0)
                                  (map (fn (top_level idx)
                                         (li { `idx: idx  `class: "juno-menu-header juno-main-menu-header" }
                                             (span { `idx: idx `class: "juno-menu-item" } (dtext top_level))))
                                       top_levels)
                                  [])))
                         (attach_event_listener new_view
                                                `click
                                                (fn (e)
                                                  (let
                                                      ((idx (-> e.srcElement `getAttribute `idx))
                                                       (pos (if (== e.srcElement.tagName "SPAN")
                                                              (-> e.srcElement.parentElement `getBoundingClientRect)
                                                              (-> e.srcElement `getBoundingClientRect)))
                                                       (help_menu_function nil)
                                                       (mview nil)
                                                       (menu nil))
                                                    (aif (get_by_id "cmenu")
                                                         (-> it `remove))
                                                    (when idx
                                                      
                                                      (if (== (parseInt idx) help_idx)
                                                        (= help_menu_function *help_menu_function*)
                                                        (= help_menu_function nil))
                                                      (console.log "app_menu: clicked: " idx "help_idx: " help_idx (prop menu_trees (parseInt idx)))
                                                      (aif (or help_menu_function
                                                               (resolve_path [ (parseInt idx) 1 ] menu_trees))
                                                           (progn
                                                            (cond
                                                              help_menu_function
                                                              (= menu (menu_tree (it)))
                                                              (is_function? it)
                                                              ;; if the underlying menu is a function, call the function to get..
                                                              ;; up to the minute menu contents
                                                              (= menu (menu_tree (it (first (prop menu_trees (parseInt idx))))))
                                                              ;; other wise it is a standard menu, which may not rehydrate well depending
                                                              ;; on how it was created..
                                                              else
                                                              (= menu (menu_tree it)))
                                                            (= mview (div { `id: `cmenu `class: "juno-menu" `style: "font-size: 0.9em; z-index: 30" }
                                                                   menu.view))
                                                            (set_style [["position" "absolute"]
                                                                        ["left" (+ "" (Math.max 0 pos.left 0) "px")]
                                                                        ["top" (+ "" (Math.max 0 pos.bottom ) "px") ]]
                                                                       mview)                                                                
                                                            (-> (get_by_id "body") `appendChild
                                                                   mview))
                                                           (notify "Unable to find menu resource"))))))
                                                                        
                         (if view.parentElement
                           (-> view `replaceWith new_view))
                         (= view new_view)
                         view))))
    
    
    (build_view)
    (set_prop options
              `id
              id)
    (set_prop intf
              `view view
              `add_menu add_menu
              `remove_menu remove_menu
              `type "app_menu"
              `toJSON (function ()
                                `(app_menu ,#global_menu_path ,#options)))
    (setq *app_menu_control* intf)
    intf))

(defun app_header (controls options)
  (let
      ((existing_header (-> document `querySelector "header"))
       (intf nil))
    (when (eq existing_header nil)
      (-> (first (get_by_tag "body"))
          `prepend
          (= existing_header (header { `id: "page-header" class: "juno-page-header" }))))
    (when options.app_title
      (-> existing_header `appendChild (span { `class: "juno-header" } options.app_title)))
    (for_each (`elem controls)
              (progn
               (cond
                 elem.view
                 (-> existing_header `appendChild elem.view)
                 (is_element? elem)
                 (-> existing_header `appendChild elem)
                 else
                 (create_dom_element "span" elem))))
    (set_prop options
              `id
              (or options.id "app-header"))
   
    (= intf
       {     
        `options: options
        `controls: controls
        `type: "app_header"
        `toJSON: (function ()
                           `(app_header ,#controls ,#options))
        })
    
    intf))







(defun generate_control_menu ()
  (let
      ((valid_controls (reduce (control (current_controls))
                          (progn
                           (when control.set_content
                             control)))))
    (for_each (control valid_controls)
              [(or control.name control.options.id "Untitled")
               (for_each (operation ["Insert Above" "Insert Below" "Insert Left" "Insert Right"])
                         [(dtext operation) (fn ()
                                              (container_view_operation (to_key operation) 
                                                                        control
                                                                        (empty_selection_control)))])])))
                                                    

(defun serialize_controls (controls)
  [(quote quote) [(quote quote) (JSON.parse (JSON.stringify controls))]])
    

(defun save_control_image ()
  (progn
   (set_focus_to nil)
   (= *serialized_controls* (serialize_controls $root_controls))
      ;[(quote quote) [(quote quote) (JSON.parse (JSON.stringify $root_controls))]])
   (console.log "*serialized_controls*: " *serialized_controls*)
   (save_image)))

(defun rehydrate_controls (container serialized_controls)
  (let
      ((control nil))
    (for_each (`serialized_control serialized_controls)
      (progn
       (= control (eval serialized_control))
       (when control.view
         (-> container
             `append control.view))
       (push $root_controls
             control)
       (when control.initialize
         (-> control `initialize))))))

(defun user/*initializer* ()
  (let
      ((header nil)       
       (scripts (-> (page_header) `querySelectorAll "script[id]"))                     
       (scratch_editor nil)
       (page_frame nil)
       (control nil)
       (repl_split nil))
                                                               
    (console.log "user/*initializer is running." )
    
    ;(defglobal main_menu_button (li  { `class: "juno-menu-header" }
     ;                                        (span { `class: "juno-menu-item" `style: "" } "File")))

    (defglobal resource_loader_button (file_picker_button "" load_files))    
    (set_style [["position" "absolute"]
                ["top" "-100px"]
                ["left" "-100px"]
                ["width" "1px"]
                ["height" "1px"]] resource_loader_button)
    
    (-> (get_by_id "body") `appendChild resource_loader_button)
       
    (defvalue $root_controls [])
    
    
    ;; the root container which controls are added to..
    (defglobal juno_container
      (div { `style: "height: inherit; width: inherit; position: relative; overflow:hidden;" }))

    
    
    
    (attach_event_listener juno_container `click
                           (fn (e)
                             (progn
                              (defvar menu (get_by_id `cmenu))
                              (when menu (-> menu `remove)))))
    
    (set_prop *env_config*.export
	      `save_path
	      nil)
            
    (attach_event_listener juno_container
                           `focusin
                           (fn (e)
                             (process_focus_chain e)))

    (-> (get_by_id "body") `appendChild juno_container)

    ;; initialize or rehydrate the controls
    (if (== (length *serialized_controls*) 0)
      (progn       
       (console.log "initializing control surface")
       (defglobal $repl (browser_repl { `name: "Juno REPL" }))
       (= scratch_editor
          (buffer_editor "*scratch*" "user" [ `*scratch* ] `juno))

       (push *main_menu*
             [ "File" (fn ()
                        [["Save Environment" (fn (e) (save_control_image)) ]
                         ["Load Resource" (fn (e) (-> resource_loader_button `click)) ]
                         ["Style CSS" (fn (e) (notify "View Site CSS"))]])])
       (push *main_menu*            
             ["View" (fn ()
                       (progn
                        (reduce (control (current_controls))
                                (when (and control.on_focus
                                           control.options.id)
                                  [(or control.name "Untitled") 
                                   (fn (e)
                                     (aif (get_control_by_id control.options.id)
                                          (set_focus_to it)))]))))])
             
       
       (push $root_controls
             (app_header [(app_menu [ `*main_menu* ])]
                         { `app_title: "Seedling" }))
       (setq page_frame ;; or surface which can be named in the upper right or middle
             (control_container nil {
                                     `name: "Default Container"
                                     }))

       
       
       (-> juno_container
           `append page_frame.view)

       (-> page_frame `initialize)
       
       (-> page_frame `set_content 0
           (split_view_vertical scratch_editor
                                $repl))
       
       (push $root_controls page_frame)
       
       (-> scratch_editor
           `set_evaluator_control $repl)
       (when (blank? (prop *env_config*.export `save_prefix))
         (set_prop *env_config*.export
                   `save_prefix
                   "seedling"))
       (-> juno_container
           `append page_frame.view)       
       (-> page_frame `initialize))
      (progn     
       (console.log "serialized controls: " *serialized_controls*)
       (rehydrate_controls juno_container *serialized_controls*)))
       
       

    (defun core/rlog (`& vals)
      (progn
       (for_each (`v (or vals []))
          (-> $repl `log v))
       nil))
    
  (notify (+ "Hello " *namespace* ))
  true))





