;; Browser Environment Kickstart for Juno
;; author: anygren

;; Go to core since this is a branch-off...
(declare (namespace "core"))
       

(set_namespace "core")

;; Remove any namespaces we don't want to include 
(when (contains? "tests" (namespaces))
  (delete_namespace "tests"))

;(import "doc/help.lisp")
(import "pkg/logo.juno")


(defglobal core/html_package ((quote quote) (read_text_file "pkg/html.juno")))
(defglobal core/style_css ((quote quote) (read_text_file "html/style.css")))
(defglobal core/*global_themes* { juno_light: (read_text_file "html/juno_light.css")
                                 earth_tones: (read_text_file "html/earth_tones.css")
                                 cobalt: (read_text_file "html/cobalt.css")
                                 idle_fingers: (read_text_file "html/idle_fingers.css")})
(defglobal core/browser_initializer ((quote quote) (read_text_file "pkg/browser_initializer.juno")))
(defglobal core/browser_repl_package ((quote quote) (read_text_file "pkg/browser_workspace.juno")))




;; Make sure we have the ability to produce a file..
(when (not (contains? "io" *env_config*.features))
  (import "src/base-io.lisp"))

(import "src/build-tools.lisp")

;(defglobal core/browser_boot_code
 ; (read_text_file "js/browser_boot.js"))

(defun core/*system_initializer* ()
  (let
      ((pkg (-> Environment `evaluate "core/html_package")))
    (console.log "system initializer: initializing packaged html_package")
    (-> Environment `evaluate pkg)
    (console.log "initializing browser_repl_package")
    (eval (reader (clone browser_repl_package)))
    (set_prop globalThis `env Environment) ;; establish a global handle (not necessary but handy for development)
    (console.log "system initializer Complete")))


 ;; import the http client package into the image..
(import "pkg/http_client.juno")

(defglobal core/*env_template* (btoa (read_text_file  "./src/environment.lisp")))

;; everything loaded above this line is what will be preserved.....
;; -----------------------------------------------------------

(defglobal *core_symbols* (core/symbols))


;; Bring in the build tools for compiling buffers

(import "pkg/html_server.juno")

;; Set the new environments default namespace 
(set_path [ `export `default_namespace ] *env_config* "user")


       

(progn
 
  (defvar no_includes (reduce (`sym (core/symbols))
			      (if (not (contains? sym *core_symbols*))
				  sym
				  nil)))
  (defglobal included_libs ["ext-searchbox.js" "ext-split.js" "mode-juno.js" "ext-language_tools.js" "mode-json.js" "mode-javascript.js" "mode-css.js" "mode-css.js"
                            "theme-juno_light.js" "theme-earth_tones.js" "theme-chrome.js" "theme-crimson_editor.js" "theme-cobalt.js" "theme-idle_fingers.js"
                            "theme-gruvbox.js" "theme-dracula.js" "theme-katzenmilch.js" "theme-solarized_dark.js" "theme-solarized_light.js"])

  
  (set_path [ `included_libraries ] *env_config* included_libs)
  (when (eq nil (prop *env_config* `editor))
    (set_prop *env_config*
              `editor
              {
                default_theme: "cobalt"
                font_size: 14
               }))
  
  (when (eq nil (prop *env_config* `application))
    (set_prop *env_config*
              `application
              { menu_timeout: 2500
                global_theme: "idle_fingers"
                max_log_lines: 100
               }))
  
  
  (setq no_includes
	(conj no_includes
	      ["repl" "Deno" "read_text_file" "path" "readline" "readline_mod" "streams" "write_text_file" "Deno.readTextFile" "Deno.writeTextFile"]))
  ;; print them out 
;  (console.log "NOT INCLUDING: ")
 ; (console.table (sort no_includes))

  ;; save the image 

  
  (core/save_env { save_as: "js/juno_browser.js"		   
		   preserve_imports: false
                   features: [ "compiler" "repl" "core-ext" "html" "build-tools" "browser" "http_client" ]
		   do_not_include: no_includes })
  
  (console.log "building standalone starter.html file..")

  
  (defglobal env {})

  
  (let
      ((js_resource (read_text_file "js/juno_browser.js"))              
       (doctext nil)       
       (embeds (for_each (embeded_lib included_libs)
                         [(to_key (replace (new RegExp "-" `g) "_" (first (split_by "." embeded_lib))))
                          (compile `(javascript ,#(read_text_file (+ "js_lib/" embeded_lib )))
                                   { `formatted_output: true }) ]))
       (embedded_editor (compile
                         `(javascript ,#(read_text_file "js_lib/ace.js"))
                         { `formatted_output: true })))
    
    (= doctext
       (html/serialize_document
         (html/html 
          (html/head { `title: "Juno Browser" }
                   (html/style { `id: "juno-css" } "body { `font-family: \"-apple-system,BlinkMacSystemFont,'Segoe UI','Helvetica Neue',Helvetica,sans-serif;\" }")
                   (html/script { `id: "juno-core" `type: "module" }
                                js_resource
                                "\n\n"                               
                                "globalThis.in_starter=true;"
                                "\n\n"
                                )
                   (html/script { `id: "ace_editor" `type: "text/javascript" `charset: "utf-8" }
                                embedded_editor)
                   (for_each (embed_set embeds)
                             (destructuring_bind (id lib)
                                 embed_set
                                 (html/script { `id: id `type: "text/javascript" `charset: "utf-8" }
                                              lib))))
                 
                                
        (html/body { style: "height: 100vh; overflow: hidden;" }
                   (html/header { `id: "page_header"  style: "background: #F3F3F3; display: flex;" }
                               )
                   (html/div { `id: "lower_right_corner" style: "position: absolute; right: 50px; bottom: 5px; width: 255px;" } )
                   ))))
   
    (write_text_file "environments/starter.html"
                     doctext)
    true))

;; Notes and examples: to load p5:
;; (defglobal p5 (html/script { `src: "./p5.min.js" }))


