;; Browser Environment Kickstart for Juno 
;; To be run on the server, not in the browser

;; author: anygren

;; Go to core since this is a branch-off...
(declare (namespace "core"))
 
;(set_namespace "core")      
;; Remove any namespaces we don't want to include 
(when (contains? "tests" (namespaces))
  (delete_namespace "tests"))

;(import "doc/help.lisp")
;(import "pkg/logo.juno")
(import "pkg/lz-string.juno")

(defglobal core/html_package ((quote quote) (env_encode_string (read_text_file "pkg/html.juno"))))
(defglobal core/style_css ((quote quote) (read_text_file "html/style.css")))
(defglobal core/*global_themes* { juno_light: (read_text_file "html/themes/juno_light.css")
                                  earth_tones: (read_text_file "html/themes/earth_tones.css")
                                  ice: (read_text_file "html/themes/ice.css")
                                  cobalt: (read_text_file "html/themes/cobalt.css")
                                  dark_grey: (read_text_file "html/themes/dark_grey.css")
                                  idle_fingers: (read_text_file "html/themes/idle_fingers.css")
                                  dark_was_the_night: (read_text_file "html/themes/dark_was_the_night.css") })
(defglobal core/browser_initializer ((quote quote) (LZString.compressToBase64 (read_text_file "pkg/browser_initializer.juno"))))
(defglobal core/browser_repl_package ((quote quote) (read_text_file "pkg/browser_workspace.juno")))




;; Make sure we have the ability to produce a file..
(when (not (contains? "io" *env_config*.features))
  (import "src/base-io.lisp"))

(import "src/build-tools.lisp")

(import "pkg/sys.juno")
;(defglobal core/browser_boot_code
 ; (read_text_file "js/browser_boot.js"))

(defun core/*system_initializer* ()
  (let
      ((pkg (-> Environment `evaluate "core/html_package")))
    (console.log "system initializer: namespaces:" (namespaces))
    (console.log "system initializer: " *namespace*  "initializing packaged html_package")
    (-> Environment `evaluate pkg)
    (console.log "initializing browser_repl_package")
    (eval (reader (clone browser_repl_package)))
    (set_prop globalThis `env Environment) ;; establish a global handle (not necessary but handy for development)
    (console.log "system initializer Complete")))


 ;; import the http client package into the image..
(import "pkg/http_client.juno")
(defun core/normalize_file_path (target_path _provided_env)
   (let
      ((env_details (if (is_object? _provided_env)
                        _provided_env
                        (aif (http/get "/base_directory")
                             (and it.rval
                                (== it.rval "OK")
                                (prop it `data)))))
       (server_base_directory env_details.base)
       (server_cwd env_details.cwd)
       (is_absolute? (fn (val)
                        (starts_with? "/" val)))
       (is_relative? (fn (val)
                        (not (is_absolute? val))))
       (clean (fn (val)
                 (reduce (v val)
                    (unless (or (blank? v)
                                (== v ".")
                                (== v ".."))
                       v))))
       (target_path (if (blank? target_path)
                        env_details.cwd
                        target_path))
       (target_comps (clean (split_by "/" target_path)))
       (base_comps (clean (split_by "/" env_details.base)))
       (cwd_comps (clean (split_by "/" env_details.cwd)))
       (common_root []))
      
      (cond
         (and (is_absolute? env_details.base)
              (is_absolute? target_path))
         (progn
            (for ((p1 p2) (pairs_from_list (interlace base_comps target_comps)))
                 (if (== p1 p2)
                     (push common_root p1)))
            (if (== common_root.length base_comps.length)
                (+ "/" (join "/" (conj common_root
                                       (slice target_comps common_root.length))))
                nil))
         (is_absolute? env_details.base)
         (progn
            (for ((p1 p2) (pairs_from_list (interlace base_comps cwd_comps)))
                 (if (== p1 p2)
                     (push common_root p1)))
            (if (== common_root.length base_comps.length)
                (+ "/" (join "/" (conj cwd_comps
                                       target_comps)))
                nil))
         (is_relative? env_details.base)
         (progn
            (+ "/" (join "/" target_comps)))
         else
         nil)))
(defglobal core/*env_template* (LZString.compressToBase64 (read_text_file  "./src/environment.lisp")))

;; everything loaded above this line is what will be preserved...
;; capture the core symbols and place into the *core_symbols* library
;; -----------------------------------------------------------

(defglobal *core_symbols* (core/symbols))


;; Bring in the build tools for compiling buffers

(import "pkg/html_server.juno")

;; Set the new environments default namespace 
(set_path [ `export `default_namespace ] *env_config* "user")

;; build the no includes list to only include symbols listed in the *core_symbols* library:
(progn
  (defvar no_includes (reduce (`sym (core/symbols))
			      (if (not (contains? sym *core_symbols*))
				  sym
				  nil)))
  
  ;; base line included libraries
  (defglobal included_libs ["lz-string.js"])
  
  ;; add in external modules for modes and themes.
  ;; the list below establishes the baseline features, modes, and themes
  ;; included with the editor 
  
  
  
  (defglobal included_editor_assets (sort (each (sys/list_files "./js_lib/editor-assets") `name)))
  (set_prop Environment.definitions.included_editor_assets
     `requires [])  ;; remove the requirements for this because sys/list_files is included
  
  ;(set_path [ `included_libraries ] *env_config* included_libs)
  
  ;; setup the theme defaults if not previously set..
  (when (eq nil (prop *env_config* `editor))
    (set_prop *env_config*
              `editor
              {
                default_theme: "juno_light"  ; "cobalt"
                font_size: 14
                themes: (reduce (theme included_editor_assets)
                           (aif (starts_with? "theme" theme)
                                (second (split_by "-" (first (split_by "." theme))))))
               }))
  
  (when (eq nil (prop *env_config* `application))
    (set_prop *env_config*
              `application
              { menu_timeout: 2500
                global_theme: "juno_light"; "idle_fingers"
                max_log_lines: 100
                name: "Seedling"
                quick_alerts:  {
                                 display: true
                                 default_display_time: 750
                                 }
                on_ready: `seedling_ready
               }))
  
  
            
  ;; make sure not to add references that will not be available in the browser environment
  
  (setq no_includes
	(conj no_includes
	      ["repl" "Deno" "read_text_file" "path" "readline" "readline_mod" "streams" "write_text_file" "Deno.readTextFile" "Deno.writeTextFile" "readline_mod"]))
  
  (set_namespace_declaration "html" "serialize_with_image" false)
  
  ;; print them out 
  
   ;(console.log "NOT INCLUDING: ")
   ;(console.table (sort no_includes))
  
  ;; save the image 
  (try
     (core/save_env { save_as: "js/juno_browser.js"
                      preserve_imports: false
                      features: [ "compiler" "repl" "core-ext" "html" "build-tools" "browser" "http_client" ]
                      do_not_include: no_includes })
     (catch Error (e)
        (progn
           (console.log "ERROR received from save_env the environment:" e)
           (throw e))))
     
  (console.log "building standalone starter.html file.." (current_namespace))
  
  (defglobal env {})

  (let
      ((js_resource (read_text_file "js/juno_browser.js"))              
       (doctext nil)       
       (embeds (for_each (embeded_lib included_libs)
                         [(to_key (replace (new RegExp "-" `g) "_" (first (split_by "." embeded_lib))))
                          (compile `(javascript ,#(read_text_file (+ "js_lib/" embeded_lib )))
                                   { `formatted_output: true }) ]))
       (embeded_editor_assets 
          (for_each (embeded_lib included_editor_assets)
             [(to_key (replace (new RegExp "-" `g) "_" (first (split_by "." embeded_lib))))
              (compile `(javascript ,#(read_text_file (+ "js_lib/editor-assets/" embeded_lib )))
                 { `formatted_output: true }) ]))
       (embedded_editor (compile
                         `(javascript ,#(read_text_file "js_lib/ace.js"))
                         { `formatted_output: true })))
    
    (= doctext
       (html/serialize_document
         (html/html 
          (html/head { `title: (get_default [ `application `name ]) }
                   (html/style { id: "juno-css" } core/style_css) ; "body { `font-family: \"-apple-system,BlinkMacSystemFont,'Segoe UI','Helvetica Neue',Helvetica,sans-serif;\" }")
                   (html/script { id: "juno-core" `type: "module" }
                                js_resource
                                "\n\n"                               
                                "globalThis.in_starter=true;"
                                "\n\n"
                                )
                   (html/script {`id: "ace_editor" `type: "text/javascript" charset: "utf-8" }
                                embedded_editor)
                   (for_each (embed_set (conj embeds embeded_editor_assets))
                             (destructuring_bind (id lib)
                                 embed_set
                                 (html/script { `id: id `type: "text/javascript" `charset: "utf-8" }
                                              lib))))
                 
        (html/body { style: "height: 100vh; overflow: hidden;" }
                   (html/header { `id: "page_header"  style: "background: #F3F3F3; display: flex;" })
                   (html/div { `id: "lower_right_corner" style: "position: absolute; right: 50px; bottom: 5px; width: 255px;" } )))))
   
    (write_text_file "environments/starter.html"
                     doctext)
    
    (set_namespace_declaration "html" "serialize_with_image" true)
    true))

;; Notes and examples: to load p5:
;; (defglobal p5 (html/script { `src: "./p5.min.js" }))


