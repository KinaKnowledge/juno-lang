;; *scratch* buffer

(when (not (contains? "sys" (namespaces)))
   (create_namespace `sys))

(declare (namespace `sys))

(if_compile_time_defined `Deno
   (progn
      (let
         ((status (Deno.permissions.query { name: "run" })))
         (unless (== status.state "granted")
            (warn "sys namespace requires run permissions which are not active.")
            (warn "Evaluate (sys/request) to request.")))
      
      (defun exec (command options)
         (let
            ((options (cond
                         (is_object? options)
                         options
                         (eq nil options)
                         {}
                         else
                         (throw TypeError "system: options must be an object if provided")))
             (arg_set (if (is_array? options.args)
                          options.args
                          []))
             (command_output nil))
            ;; Note: Need to change to Deno.Command
            (= command_output (new Deno.Command command
                                          (+ {
                                               args: arg_set
                                               }
                                            options)))
            
            command_output)
         {
           `description: (+ "The exec function creates a `Command` object using the `Deno.Command` "
                            "facility.  The name of the command to run is provided as the first argument, "
                            "and an `options` object can be provided to control how output ( `stdout` ), "
                            "input ( `stdin` ) and error ( `stderr` ) output are handled. <br>The "
                            "returned `Command` object should be considered a staged command, and will not "
                            "actually spawn a new process until one of the following methods are "
                            "called:<br>output:function - Will execute a process based on the parameters of "
                            "the `Command` object asynchronously, but will collect all of its output.  Since "
                            "a promise is initially returned, the call to `output` in Juno will return once "
                            "the process is completed.   This option cannot be used with `stdin` set "
                            "to `piped.  `<br>outputSync:function - Will execute a process synchronously, "
                            "and therefore the event loop will be blocked until the function "
                            "returns.  <br>spawn:function - create a streamable subprocess, which will "
                            "return a `ChildProcess` object.<br><br>#### Options <br><br>args:array - These "
                            "should be the arguments passed to the command.  Each element in the array "
                            "corresponds to an argument passed to the command.<br>cwd:string - The working "
                            "directory of the process to be created<br>clearEnv:boolean - If true clears "
                            "environment variables that are passed to the parent process.  The Deno runtime "
                            "states that this doesn\'t guarantee all environmental variables will be removed, "
                            "as the operating system may set variables for the child process.<br>uid:number "
                            "- The system will attempt to set the child\'s user id for the spawned process.  "
                            "If it fails, the spawn will fail.<br>gid:number - The system will attempt to "
                            "set the group ID of the child process.<br>The following options determine how "
                            "stdin, stdout and stderr should be handled in the child "
                            "process.<br>stdin:string - There are three options: \"piped\", \"inherit\", or "
                            "\"null\".  Defaults to \"piped\" for `output` and `outputSync` , and \"inherit\" for "
                            "`spawn`.  <br>stdout:string - There are three options: \"piped\",\"inherit\", or "
                            "\"null\".<br>stderr:string - There are three options: \"piped\",\"inherit\", or "
                            "\"null\"<br>windowsRawArguments:boolean - Skips quoting and escaping of the "
                            "argument on windows, but it is ignored on non-Windows operating systems.<br>For "
                            "more details on this command see the Deno documentation for Deno.Command and "
                            "Deno.CommandOptions.<br>Example for use in Deno server:```(decode_text (prop "
                            "(-> (sys/exec \"uptime\") `output) `stdout))\n```<br> ")
           `usage: ["command:string|array" "options:object"]
           `tags: ["exec" "run" "process" "subprocess" "command"]
           
           })
      
      (defun system (command)
         (let
            ((comps (split_into_words command))
             (result (-> (exec (first comps) { args: (rest comps) }) `output))
             (rval nil))
            (= rval
               {
                    stdout: (aif result.stdout
                                 (decode_text it)
                                 nil)
                    stderr: (aif result.stderr
                                 (decode_text it))
                    success: result.success
                    code: result.code
                    })                
            rval)
         {
           `description: (+ "Given a command string or an array with the command and arguments, the "
                            "system function calls the sys/exec function with the command, collects the "
                            "results and returns a serializable object.  This facility provides a simple "
                            "mechanism for running external commands and collecting the return values prior "
                            "to further operations.  The returned simple object contains:<br>stdout:string - "
                            "The standard output that the evaluated command returned. <br>stderr:string - "
                            "Any error output that was produced by the executed command.<br>success:boolean "
                            "- If the command returned 0, then success will be true.  <br>code:integer - The "
                            "return code of the process.<br>")
           `usage: ["command:string|array"]
           `tags: ["exec" "run" "process" "subprocess" "command"]
           })
      
      (defun request ()
         (Deno.permissions.request { name: "run" })
         {
           `description: "Requests 'run' permissions from the virtual machine."
           `usage: []
           `tags: ["permissions" "run" "process" "subproces"]
           })
      
      (defun compile_executable (options)
            (let
               ((perms (permissions))
                (options (or options {
                                       }))
                (perm_flags (cond
                               (is_array? options.permissions)
                               (for_each (p options.permissions)
                                  (+ "--allow-" p))
                               else
                               (reduce (p (pairs (permissions)))
                                  (destructuring_bind (name status)
                                     p
                                     (when (== status "granted")
                                        (+ "--allow-" name))))))
                (emit_file (cond
                                      options.emit_as
                                      options.emit_as
                                      (resolve_path [ `export `save_executable ] *env_config*)
                                      (resolve_path [ `export `save_executable ] *env_config*)
                                      else
                                      (+ "juno." *env_config*.build)))
                (command (join " "
                               (flatten
                                  ["deno compile"
                                   perm_flags
                                   (if (is_array? options.additional_args)
                                       options.additional_args
                                       [])
                                   "-o"
                                   emit_file
                                   (if (and (is_string? options.target)
                                            (not (blank? options.target)))
                                       ["--target" options.target]
                                       [])
                                   (cond
                                      (is_string? options.source)
                                      options.source
                                      (resolve_path [ `export `save_path ] *env_config*)
                                      (resolve_path [ `export `save_path ] *env_config*)
                                      else
                                      (throw TypeError "compile_executable: cannot resolve the source option: check env_config or provide source in options"))])))
                (result nil))
               
               (if (== perms.run "granted")
                   (progn
                      (= result (system command))
                      (if result.success
                         {
                             success: true
                             emitted: emit_file
                         }
                         result))
                   (progn
                      {
                        `success: false
                        `stderr: "Invalid permissions: require run permissions, evaluate (sys/request) to request access at the console."
                        `stdout: ""
                        })))
            {
              description: (+ "The compile_executable function generates a stand-alone executable from "
                              "a source javascript file.  This can be useful for bundling and distributing "
                              "into a single runtime the application logic and all dependencies.  The output "
                              "varies on the options object provided.  If no options are provided, the "
                              "`*env_config*` object is referenced for default locations and names, and the "
                              "current permission set is used for the emitted binary.  If successful, an "
                              "object is returned with `sucess` set to `true` and an `emitted` key indicating "
                              "where the binary was written.<br><br>#### Options <br><br>emit_as:string - A "
                              "path name to the location to which to write the binary executable file.  By "
                              "default this value is sourced from `*env_config*.exports.save_executable`.  If "
                              "that is not present, then the file is emitted in the current directory with the "
                              "form `juno.{*env_config*.build}`.  <br>permissions:array - A list of "
                              "permissions to be allowed in the emitted executable file.  The current "
                              "permissions can be accessed with the `(permissions)` function.  Include only "
                              "the key names, such as `read` or `net` that you wish to retain in the emitted "
                              "binary.<br>additional_args:array - A list of command line arguments to be "
                              "passed to the Deno compile command.<br>source:string - The source file to be "
                              "used as the bundled image.  By default this value is taken from "
                              "`*env_config*.exports.save_path` <br>target:string - The target architecture to "
                              "emit as.  See `deno compile --help` to see the full list of values "
                              "available.<br> ")
              usage: ["options:object"]
              tags: ["compile" "build" "image" "save" "executable" "export" ]
              })

      
      (defun_sync stat (filepath)
         (Deno.lstatSync filepath)
         {
           description: (+ "<br><br>Given a path to a file as a string, returns a FileInfo object, which "
                           "will contain the results of the `stat()` system "
                           "call:```isFile:Boolean\nisDirectory:Boolean\nisSymlink:Boolean" 
                           "\nsize:Number\nmtime:Date\natime:Date\nbirthtime:Date\ndev:Number\n" 
                           "ino:Number\nmode:Number\nnlink:Number\nuid:Number\ngid:Number\nrdev:Number\n" 
                           "blksize:Number\nblocks:Number```<br> ")
           usage: ["filepath:string"]
           tags: ["file" "status" "information" "io" "filesystem"]
           })
      (defun_sync is_file? (filepath)
         (try
            (prop (stat filepath) `isFile)
            (catch Error (e)
               false))
         {
             description: "Returns true if the provided file path is a file object, otherwise false."
             usage: ["filepath:string"]
             tags: ["file" "status" "information" "filesystem"]
         })
      
      (defun_sync is_dir? (filepath)
         (try
            (prop (stat filepath) `isDirectory)
            (catch Error (e)
               false))
         {
             description: "Returns true if the provided file path is a file object, otherwise false."
             usage: ["filepath:string"]
             tags: ["file" "directory" "status" "information" "filesystem"]
         })
      
      (defun_sync is_symlink? (filepath)
         (try
            (prop (stat filepath) `isSymlink)
            (catch Error (e)
               false))
         {
             description: "Returns true if the provided file path is a symbolic link, otherwise false."
             usage: ["filepath:string"]
             tags: ["file" "directory" "status" "information" "filesystem"]
         })
      
      (defun_sync filesize (filepath)
         (try
            (aif (stat filepath)
                 (if it.isFile
                    (prop it `size)
                    nil))
            (catch Error (e)
               nil))
         {
           description: (+ "If the provided path is a file, returns the size of the file.  "
                           "Otherwise if the path cannot be found, or the object pointed to by the path "
                           "isn\'t a file, `nil` will be returned.´ ")
           usage: ["filepath:string"]
           tags: ["file" "directory" "status" "information" "filesystem"]
         })
      
      (defun_sync rename (source_path remote_path)
         (progn
            (Deno.renameSync source_path remote_path)
            (or (is_file? remote_path) 
                (is_dir? remote_path)
                (is_symlink? remote_path)
                false))
         {
           description: (+ "Given a source path and a target path, renames the source path to the "
                           "target path.  If the operation is successful returns true.  True is returned "
                           "when the rename operation is validated by a check to ensure that the target "
                           "entry is present in the filesystem (either a file, a directory or a symbolic "
                           "link).<br>If the source file isn\'t present, or the target file cannot be "
                           "written, an error will be thrown. ")
           usage: ["source_path:string" "remote_path:string"]
           tags: ["file" "directory" "status" "information" "filesystem" "move" "mv" "filename"]
         })
      
      (defun_sync delete_file (filepath)
         (try 
            (let
               ((fd (stat filepath)))
               (if (or fd.isFile fd.isSymlink)
                   (progn
                      (Deno.removeSync filepath)
                      true)
                   false))
            (catch Error (e)
               false))
        {
          description: (+ "<br><br>Given a path to a file or symbolic link, the function will remove the entry "
                          "and return true if no errors are encountered.  Otherwise, if the target of the "
                          "path isn\'t a file or link, or the file doesn\'t exist, returns false.<br> ")
          usage: ["filepath:string"]
          tags: ["remove" "file" "status" "information" "filesystem"]
        })
         
      (defun_sync delete_dir (dirpath)
        (if (is_dir? dirpath)
         (try 
            (progn
               (Deno.removeSync dirpath { `recursive: true } )
               true)
            (catch Error (e)
               false))
         false)
        {
          description: (+ "<br><br>Given a path to a directory, the function will remove the directory and any "
                          "content and return true if no errors are encountered.  Otherwise, if the target of "
                          "the path isn\'t a file or the file doesn\'t exist, returns false.<br> ")
          usage: ["dirpath:string"]
          tags: ["remove" "directory" "status" "information" "filesystem"]
        })
      
      (defun list_files (dirpath details?)
        (if (is_dir? dirpath)
            (try
               (let
                  ((entries []))
                  (for_with (entry (Deno.readDir dirpath))
                     (if details?
                        (push entries (stat dirpath))
                        (push entries entry)))
                  entries)
               (catch Error (e)
                  []))
            [])
        {
          description: (+ "The list files returns a list of DirEntry objects for the provided "
                          "directory.  Otherwise if the path isn\'t a directory or the path doesn\'t exist, "
                          "it will return an empty array. <br>If `details?` is true, the full `stat` data "
                          "for each entry in the directory is provided in the response. ")


          usage: ["dirpath:string" "details?:?boolean"]
          tags: ["directory" "status" "information" "filesystem"]
        })
      
      (defun_sync mkdir (dirpath options)
         (progn
            (Deno.mkdirSync dirpath options)
            (is_dir? dirpath))
         {
           description: (+ "Given a string as a path, synchronously creates a new directory, or "
                           "directory tree.   If the directory already exists, the function will throw an "
                           "error.<br><br>#### Options <br><br>recursive:boolean - If true, the parent "
                           "directory structure will be created.  All parent directories are set to the "
                           "same permissions.  Will not throw an error if a directory already "
                           "exists.<br>mode:number - The permissions for the created directory "
                           "structure.<br> ")
           usage:["dirpath:string" "options:?object"]
           tags: [`directory `tree `make `create `folder `filesystem ]
         })
      
      (defun_sync ensure_path_exists (fspath options)
         (cond  
            (eq nil fspath)
            (throw ReferenceError "ensure_path_exists: nil path argument")
            (is_file? fspath)
            true
            (is_dir? fspath)
            true
            (and (is_object? options)
               options.dir)
            (progn 
               (mkdir fspath (+ { recursive: true }
                                options))
               (is_dir? fspath))
            else
            (let
               ((fsresult nil)
                (comps (split_by "/" fspath))
                (dir_name (join "/" (but_last comps)))
                (an_error nil))
               (when (not (blank? dir_name))
                  (mkdir dir_name
                         (+ { recursive: true }
                            (if (is_object? options)
                                options
                                {})))
                  (unless (is_dir?  dir_name)
                     (throw Error (+ "ensure_path_exists: cannot make parent directories: " dir_name))))
               (= fsresult (Deno.createSync fspath))
               (if fsresult
                  (-> fsresult `close))
               (when (and fsresult
                          options.mode)
                  (try
                     (Deno.chmodSync fspath options.mode)
                     (catch Error (e)
                        (progn
                           (= an_error e)))))
               (if an_error
                  (throw an_error)
                  true)))
         {
           description: (+ "Given a path to a file or a directory, `ensure_path_exists` will return "
                           "true if the file or directory exists, or if it doesn\'t exist, it will create "
                           "the specified path.  By default, the function assumes that the provided path is "
                           "a path to a file and so will treat the last segment of the path as a file to be "
                           "created.  However, if the `dir` flag is `true` in options, the final path "
                           "component will be created as a directory.  The function returns true if the "
                           "file already exists or was created, or will throw an error if the file or "
                           "directory path cannot be made.<br><br>#### Options <br><br>dir:boolean - If "
                           "true, the final segment of the path will be created as a "
                           "directory.<br>mode:number - If provided, the specified path will be constructed "
                           "with the permissions set to the provided mode, which is usually specified in "
                           "octal, such as `0o700`.<br> ")
           usage: ["fspath:string" "options:?object"]
           tags: ["filesystem" "path" "create" "folder" "directory" "create"]
         })
               
      (defun_sync copy_file (from_path to_path)
         (if (and (is_string? from_path)
                  (is_string? to_path))
             (progn
                (Deno.copyFileSync from_path to_path)
                (is_file? to_path))
             (throw TypeError "copy_file: bad argument(s): requires two string arguments"))
         {
           description: (+ "Given a `from_path` and a `to_path`, copy_file will synchronously copy "
                           "the file located a `from_path` to the `to_path` location.  If the operations "
                           "fails, the function will throw an error, otherwise it will return true if "
                           "successful. ")
           usage: ["from_path:string" "to_path:string"]
           tags: ["filesystem" "path" "copy" "clone" "directory"]
         })
      
      (defun watch_fs (paths options)
         (Deno.watchFs paths options)
         {
           description: (+ "Given a path, or an array of paths, creates and returns an "
                           "`FSWatcher`.  The provided paths can be files or directories and they must "
                           "already exist.  When file system events occur in the watched paths (or "
                           "potentially subpaths), events are then created and returned via the `FSWatcher` "
                           "object.<br>Event firing orders are not guaranteed to be returned in "
                           "chronological order.<br>Once the path or paths are no longer required to be "
                           "watched, the `FSWatcher` object should be closed by calling the `close` method "
                           "of the watcher.<br><br>#### Options  <br><br>recursive:boolean -If true, the "
                           "subpaths of provided watch directories will also be watched.<br><br>#### "
                           "Example <br>```(let\n   ((watcher (watch_fs \"/tmp\")))\n   (setTimeout (fn ()\n    "
                           "             (progn\n                     (-> watcher `close)\n                  "
                           "  (log \"closed watcher\")))\n               10000)\n   (for_with (event watcher)\n "
                           "    (log \"FS EVENT: \" event)))\n```<br><br>If a file is then created in the "
                           "`/tmp` directory while the block is running, an event will be produced on the "
                           "console:```FS EVENT:  { kind: \"create\", paths: [ \"/private/tmp/abc.txt\" ], "
                           "flag: null }```<br><br>")
           usage: ["paths:string|array"]
           tags: ["filesystem" "path" "watch" "events" "file" "directory"]
         })
      
      (defun dir_tree (dirpath options)
        (let
           ((base_dir dirpath)
            (results [])
            (options (or options {}))
            (reducer options.reducer)
            (traverse (fn (path)
                          (progn
                             (for_each (entry (list_files path))
                                (progn
                                   (set_prop entry
                                      `name
                                      (+ path "/" entry.name))
                                   (if reducer
                                      (if (reducer entry)
                                          (push results
                                             entry))
                                      (push results
                                         entry))
                                   (if entry.isDirectory
                                      (traverse entry.name))))))))
           (when (is_dir? dirpath)
              (traverse dirpath))
           results)
        {
          `description: (+ "The `dir_tree` function recursively follows a directory hierarchy and "
                           "returns a non-nested structure with the contents of the directory and the "
                           "contained sub-directories.  The returned value is an array containing "
                           "`DirEntry` objects with the keys  `name`, `isFile`, `isDirectory` and "
                           "`isSymlink`.  <br>Each `DirEntry` name value will be the full path to the found "
                           "entity: the provided base path to the dir_tree function plus the position of "
                           "the entity in the sub directory structure.<br>An optional `reducer` function "
                           "can be provided to the dir_tree function in options, which will be called with "
                           "the signature `(entry)`.  If the reducer function returns a true value for the "
                           "entry when called, the entry will be included in the returned results.  If the "
                           "reducer returns false, nil or undefined, the entry will be excluded from the "
                           "final results.  <br><br>#### Example <br><br>Find all files that have the "
                           "\".pdf\" extension in a subfolder:```(dir_tree \"/tmp\"\n          {\n             "
                           "`reduce: (function (entry)\n                              (and entry.isFile\n    "
                           "                            (ends_with? \".pdf\" entry.name)))\n         "
                           "})```<br><br><br> ")
          `usage: ["base_path:string" "options:?object"]
          `tags: ["directory" "folder" "recursive" "subdirectory" "reduce"]
        })
      
      (defun make_temp_dir (opts)
         (-> Deno `makeTempDir opts)
         {
           description: (+ "<br><br>Makes a temporary directory in the default directory and returns the "
                           "path as a string.  See also `with_temp_dir`. <br><br>#### Options "
                           "<br><br>prefix:string - The prefix given to the start of the final temp "
                           "directory name in the constructed path.<br>suffix:string - The suffix given to "
                           "the end of the final temp directory name.<br>dir:string - The explicit path in "
                           "which to construct the temp directory.<br> ")

           usage: ["opts:options"]
           tags: ["temp" "directory" "tmp" "filesystem"]
         })
         
      ;; reference sys directly in macros since the compiled namespace
      ;; probably isn't sys
      (defmacro with_temp_dir ((tmp_path) `& body_forms)
         (progn
            (console.log "with_tmp_dir: " body_forms)
         `(let
            ((,#tmp_path (sys/make_temp_dir))
             (caught_error nil)
             (rval nil))
            (try
               (= rval 
                  (progn
                     ,@body_forms))
               (catch Error (e)
                  (progn
                     (= caught_error e))))
            (when (is_dir? ,#tmp_path)
               (sys/delete_dir ,#tmp_path))
            (if caught_error
               (throw caught_error)
               rval)))
         {
           description: (+ "The `with_temp_dir` macro creates a temporary named handle which is "
                            "bound to the `tmp_path` argument as a first argument to the macro.  The "
                            "remaining forms (macro arguments) are evaluated in a `progn` with the symbol "
                            "name provided to `tmp_path` bound to the path to the temp directory, which is a "
                            "string.  As with a `progn` form, the final form\'s return value is returned from "
                            "the evaluated macro code.  Once the provided forms to the macro are completed, "
                            "the temp directory is removed prior to the return value being returned.  If an "
                            "exception is encountered during the processing of the provided forms, the "
                            "exception is caught, the temp directory cleaned up and the exception is then "
                            "re-thrown.```(with_temp_dir (tt)\n         (write_text_file (+ tt \"/text.txt\") \n "
                            "                         (+ \"TT was: \" (is_dir? tt) \": \" tt))\n        "
                            "(read_text_file (+ tt \"/text.txt\")))```<br><br><br><br><br> ")
           usage: ["tmp_path:symbol" "body_forms:*"]
           tags: ["temp" "directory" "filesystem" "tmp"]
         })
               
      
   
      (unless (resolve_path [ `export `save_executable ] *env_config*)
         (set_path [ `export `save_executable ] *env_config* "bin/juno"))
      (register_feature "system")
      true)
   (progn
      (warn "The sys module requires a Deno runtime.")
      (delete_namespace "sys")
      
      false))


