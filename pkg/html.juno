;; Juno HTML Pakage

;; For browser based DOM utilization and manipulation

;; Initializes and loads the html namespace 
;; (c) 2022 Kina
;; Author: Alex Nygren

(console.log "HTML Package: " (namespaces) (contains? "html" (namespaces)))

(when (contains? "html" (namespaces))
  (delete_namespace `html))

(create_namespace `html { `serialize_with_image: false })


(declare (namespace `html))


;; Tag component names sourced from
;; https://developer.mozilla.org/en-US/docs/Web/HTML/Element


(defglobal *DOM_TAGS* [`html `base `head `link `meta `style `title
                       `body `address `article `aside `footer `header
                       `h1 `h2 `h3 `h4 `h5 `h6
                       `main `nav `section
                       `blockquote `dd `div `dl `dt `figcaption `figure
                       `hr `li `menu `ol `p `pre `ul
                       `a `abbr `b `bdi `bdo `br `cite `code `data `dfn `em
                       `i `kbd `mark `q `rp `rt `ruby `s `samp `small `span
                       `strong `sub `time `u `var `wbr
                       `area `audio `img  `track `video
                       `embed `iframe `object `picture `portal `source
                       `svg `math `canvas `noscript `script
                       `del `ins
                       `caption `col `colgroup `table `tbody `td `tfoot
                       `th `thead `tr
                       `button `datalist `fieldset `form `input `label `legend
                       `meter `optgroup `option `output `progress `select `textarea
                       `details `dialog `summary 
                       `polygon `polyline `rect `circle `ellipse `line
                       `slot `template ])


(defmacro get_by_id (id)
  `(-> document `getElementById ,#id)
  {
   `description: "Given an id, this macro is shorthand for calling document.getElementById with the passed id"
   `usage: ["id:string"]
   `tags: ["html" "DOM" "id" "find" ]
   })

(defun get_by_tag (tagname)
  (if tagname
    (-> document `querySelectorAll tagname)
    (throw "get_by_tag: invalid tagname provided"))
  {
   `description: "Deprecated: use query_all: Returns all tags in the document matching the provided tagname"
   `usage: ["tagname:string"]
   `tags: ["html" "DOM" "id" "find" ]
   })

(defun query_all (query)
  (if (is_string? query)
    (-> document `querySelectorAll query)
    (throw ReferenceError "query_all: argument must be a string"))
  {
   `description: "Returns all tags in the document matching the provided tagname"
   `usage: ["tagname:string"]
   `tags: ["html" "DOM" "id" "find" ]
   })

(defun append_children (parent children)
  (when (and (is_element? parent)
             (is_array? children))
    (for_each (child children)
              (-> parent `appendChild child)))
  parent)

(defun_sync is_input? (elem)
   (if (== (sub_type elem) "HTMLInputElement")
       true
       false)
   {
     description: (+ "If the given element is an HTMLInputElement type, then the function "
                     "returns true, otherwise it returns false. ")
     usage: ["elem:Element"]
     tags: [ `ui `element `DOM `view html ]
   })

(defun generate_id (prefix)
  (if (is_string? prefix)
    (+ "" prefix "-" (time_in_millis) "-" (random_int 9999999))
    (+ "control-" (time_in_millis) "-" (random_int 9999999))))


(defmacro getAttribute (elem attrib)  ;; legacy
  `(-> ,#elem `getAttribute ,#attrib)
   {
     description: (+ "Use get_attribute<br>.Given a DOM Element and attribute text, "
                     "returns the value of the attrbute or nil "
                     "if not set. ")
     usage: ["element:Element" "attrib:string" "value:string"]
     tags: ["DOM" "attribute" "element" "set" "property"]
     deprecated: "get_attribute"
   })

(defmacro get_attribute (elem attrib)
  `(-> ,#elem `getAttribute ,#attrib)
  {
     description: (+ "Given a DOM Element and attribute text, "
                     "returns the value of the attrbute or nil "
                     "if not set.")
     usage: ["element:Element" "attrib:string" "value:string"]
     tags: ["DOM" "attribute" "element" "set" "property"]
   })

(defmacro set_attribute (elem attrib value)
   `(-> ,#elem `getAttribute ,#attrib ,#value)
   {
     description: (+ "Given a DOM Element, attribute text and value, sets "
                     "the provided attribute to the value on the element. "
                     "There is no return value.")
     usage: ["element:Element" "attrib:string" "value:string"]
     tags: ["DOM" "attribute" "element" "set" "property"]
   })
;(defbinding (html/create_element (document.createElement document.createElement)))

;(defglobal html/create_element (-> document.createElement `bind document)
 ;  {
  ;  `description: "Binding for document.createElement"
   ; `initializer: (quote  (-> document.createElement `bind document))
    ;})

(defun_sync create_element (element_name)
  (-> document `createElement element_name))

;; first create the base constructor function which will be called
;; with the tag to create

(defun_sync append_children (parent children)
  (do
    (for_each (child (or children []))
              (cond
                (is_array? child)
                (append_children parent child)
                (is_element? child)
                (-> parent `appendChild child)                               
                child.view
                (-> parent `appendChild child.view)
                else
                (-> parent `appendChild (-> document `createTextNode (+ "" child)))))
    parent))

(defun_sync create_dom_element (element_name `& args)
  (let
      ((opts (if (and (is_object? args.0)
                      (not (is_array? args.0))
                      (not (is_element? args.0)))
               args.0
               nil))
       (content (if opts
                  (if (> args.length 0)
                    (rest args)
                    [])
                  (or args
                      [])))       
       (elem (-> document `createElement element_name)))
    
    (when opts
      (for_each (pset (pairs opts))
                (do
                  (cond
                    (is_function? pset.1)
                    (set_prop elem
                              pset.0
                              pset.1)
                    (and (== pset.0 "onclick")
                         (is_string? pset.1))
                    (set_prop elem
                       pset.0
                       (eval_struct (read_lisp pset.1)))
                    else
                    (-> elem `setAttribute pset.0 pset.1)))))
    (when (> content.length 0)
      (for_each (child content)
                (cond
                  (is_element? child)
                  (-> elem `appendChild child)
                  (is_array? child)
                  (append_children elem child)
                  (is_string? child)
                  (-> elem `appendChild (-> document `createTextNode child))
                  else
                  (try
                    (-> elem `appendChild (-> document `createTextNode (+ "" child)))
                    (catch TypeError (e)
                      (-> elem `appendChild (-> document `createTextNode (+ "ERROR: " (subtype child)))))))))
    elem))



;; next create the individual pointers to the create_dom_element function
;; for every tag name in the *DOM_TAG* list create the construction function
(defglobal load_handle (get_by_id "juno-loading-message"))
(when load_handle
   (-> load_handle `appendChild (create_dom_element "div" { } "Building DOM Tags"))
   (sleep 0.01))
(console.log "html: creating dom tag function" load_handle)
(for_each (tagname *DOM_TAGS*)
          (let
              ((bound_fn (-> create_dom_element `bind create_dom_element tagname)))
            ;; use the set_global function directly since we are dynamically creating the symbol names
            (-> Environment `set_global
                tagname
                bound_fn
                {
                 `initializer: `(-> create_element `bind create_dom_element ,#tagname)
                 `description: (+ "The function " tagname " creates a DOM element of type " tagname " and returns the constructed object.")
                 `usage: [ "options:?object" "elem:*" "elemN:*" ]
                 `tags: ["html" "ui" "DOM" "tags" "element" "node"]
                 })))

(console.log "html: finished dom functions.")

;; various helper functions 

(defun set_style (style_attributes elem)
  (when (is_element? elem)
    (let ((`current_style (-> elem `getAttribute "style"))
          (`attribs       (or (no_empties (from_style_text current_style)) []))
          (`combined      (pairs
                           (to_object
                            (conj attribs style_attributes))))
          (`newtext
           (join ";"
                 (for_each (`atr combined)
                           (join ": " atr)))))

      (-> elem `setAttribute "style" newtext)
      elem))
  {
   `tags:["ui" "html" "css" "element" "style"]
   `description:"Given a set of style attributes in the [[attribute value]] form, and an element, sets the element style attribute to contain the specified values. Returns the element."
   `usage:["style_attributes:list" "element:Element"]
   })

(defun_sync has_class? (classname elem)
  (if (and elem
           (is_element? elem))
    (-> elem.classList `contains classname)
    false)
  {
   `usage: ["classname:string" "element:Element"]
   `description: "If the provided element has the specified CSS class, returns true, otherwise the function returns false"
   `tags: ["css" "DOM" "class" "ui" "element" "html"]
   })

(defun add_class (class_name `& elems)
  (progn
    (defvar effected [])
    (= elems (flatten elems))
    (when (and (not (eq nil elems))
               (> elems.length 0))
      (= elems (if (or (instanceof elems.0 NodeList)
                       (instanceof elems.0 HTMLCollection)
                       (and (is_array? elems.0)
                            (> elems.0.length 0)))
                 elems.0
                 elems))
      (when (> (length elems) 0)
         (for_each (`e elems)
            (do
               (when e.classList
                  (push effected e)
                  (-> e.classList `add class_name))))))
    effected)
  {
   `usage: ["class_name:string" "element:Element" "element?:Element"]
   `description: "Removes the designated CSS class from the provided element or elements. Returns the list of nodes."
   `tags: ["ui" "html" "css" "class"]
   })

(defun remove_class (class_name `& elems)
  (do
    (defvar `effected [])
    (= elems (flatten elems))
    (when (and (not (eq nil elems))
               (> elems.length 0))
      (= elems (if (or (instanceof elems.0 NodeList)
                       (instanceof elems.0 HTMLCollection)
                       (is_array? elems.0))
                 elems.0
                 elems))
      (for_each (`e elems)
                (do
                  (when e.classList
                    (push effected e)
                    (-> e.classList `remove class_name)))))
    effected)
  {
   `usage: ["class_name:string" "element:Element" "element?:Element"]
   `description: "Removes the designated CSS class from the provided element or elements. Returns the list of nodes."
   `tags: ["ui" "html" "css" "class"]
   })


(defun resolve_dom_path (path from_elem)
   (if (and (is_array? path)
              (is_element? from_elem))
      (if (> path.length 1)
          (resolve_dom_path (rest path) (prop from_elem.children (first path)))
          (prop from_elem.children (first path))))
   {
     description: (+ "Given an array containing the indexes of the children to traverse in "
                     "top down order, will return the child element found at the given path.  "
                     "Otherwise, if the path doesn\'t exist in the DOM structure, the path isn\'t an "
                     "array, or the provided element isn\'t a DOM element, then nil is returned.   ")
     usage: ["path:array" "from_elem:Element"]
     tags:  ["DOM" "path" "resolve" "element" "UI" "traverse"]
   })

(defun path_between (child_elem parent_elem _acc)
   (if (== child_elem parent_elem)
       (or _acc [])
       (progn
          (when (eq _acc nil)
             (= _acc []))
          (if child_elem.parentElement
             (progn
                (prepend _acc (-> (Array.from child_elem.parentNode.children)
                               `indexOf child_elem))
                (path_between child_elem.parentElement parent_elem _acc))
             nil)))
   {
     description: (+ "Given a child DOM element and a parent DOM element, returns the path "
                     "between them as an array, with the first index of the array being the first "
                     "child of the parent and the last index being the index offset of the child in "
                     "it\'s parent element.  If the child and the parent are the same, an empty array "
                     "is returned.  If the child cannot be found in the parent structure at all, then "
                     "nil is returned. ")
     usage: ["child_element:Element" "parent_element:Element"] 
     tags:  ["DOM" "path" "resolve" "element" "UI" "traverse"]
     })

(defun traverse_dom (elem operator_function _acc)
   (let
      ((acc (or _acc [])))
      (if (and (is_element? elem)
               (is_function? operator_function))
          (map (fn (child_elem idx)
                  (progn
                     (operator_function child_elem (conj acc idx))
                     (traverse_dom child_elem operator_function (conj acc idx))))
               (Array.from elem.children))
          (cond
             (not (is_function? operator_function))
             (throw TypeError "traverse_dom: invalid operator_function provided")
             (not (is_element? elem))
             (throw TypeError "traverse_dom: invalid element provided"))))
   {
     description: (+ "Given a starting element with the `root_element` argument and an "
                     "`operator_function`, the `traverse_dom` function recursively moves through the "
                     "children of the root_element and applies the operator function.  The operator "
                     "function is called with the signature:```(element path)```<br><br>where element "
                     "is a descendent of the root_element, and the path is the dom path to the "
                     "child.  This function mirrors `traverse` in terms of function, but applies to "
                     "the DOM.  See also `path_between` and `resolve_dom_path`. <br>")
     usage: ["element:Element" "operator_function:function"]
     tags:  ["DOM" "path" "resolve" "element" "UI" "traverse"]
   })

(defun set_disabled (`& args)
  (when (and args (> (length args) 0))
    (for_each (`elem (flatten args))
              (if elem (-> elem `setAttribute `disabled "true"))))
  { `description: "Given an arbitrary list of Elements, set them to disabled."
   `tags: ["ui" "html" "css"]
   `usage: ["element:Element" "element?:Element"]
   } )

(defun set_enabled (`& args)
  (when (and args (> (length args) 0))
    (for_each (`elem (flatten args))
              (if elem (-> elem `removeAttribute `disabled))))
  { `description: "Given an arbitrary list of Elements, set them to enabled (removes the disabled property from the Element)."
   `tags: ["ui" "html" "css"]
   `usage: ["element:Element" "element?:Element"]
   } )

(defun remove_attribute (elem `& attribs)
  (when (and elem
             (is_element? elem)
             attribs
             (> attribs.length 0))
    (for_each (attrib (flatten attribs))
              (-> elem `removeAttribute attrib)))
  {
   `description: "Provided a target DOM element and 1 or more attributes, removes each attribute from the targeted DOM element."
   `usage: ["element:Element" "attrib0:string" "attribN:string"]
   `tags: [ `ui `html `attribute `delete ]
   })

(defun attach_event_listener (elem event_type handler_function)
  (when elem
    ((jslambda (`elem `event `f) "return elem.addEventListener(event,f);")  elem event_type handler_function))
  {
   `usage:["element:Element" "event_type:string" "handler:function"]
   `description:"Given an element, an event type such as `click, and a function, attaches the provided function as an event handler to the HTML Element."
   `tags:["ui" "events" "HTML" "events" ""]
   })

(defun remove_css_entry (entry_name)
  (do
    (aif (get_by_id (to_key (+ "juno-css-" entry_name)))
      (-> it `remove)))
  {
   `usage:["entry_name:string"]
   `description:"If a class has been created by create_css_entry, use this function to remove the class from the document."
   `tags: ["html" "css" "ui"]
   })

(defun create_css_entry (entry_name css_attribute_list)
  (let
      ((css_attributes (reduce (attrib_set (or css_attribute_list []))
                               (destructuring_bind (attrib val)
                                                   attrib_set
                                                   (when (and (not (blank? attrib))
                                                              (not (blank? val)))
                                                     (+ "" attrib ": " val)))))
       
       (head_elem (-> document `querySelector "head"))
       (new_style nil))
      ;(log "create_css_entry: " entry_name "css_attributes: "  css_attributes )
    (when head_elem
      (remove_css_entry entry_name)
      (-> head_elem `appendChild
          (= new_style
             (style { `id: (to_key (+ "juno-css-" entry_name )) `type: "text/css" }
                    (+ "" entry_name "{ " (join ";" css_attributes) " }")))))
    new_style)
  { `usage: ["entry_name:string" "css_attribute_list:array"]
   `description: (+ " Given a name for the class and a list of formatted css attributes "
                    "create and load the CSS object into the DOM.<br> Example: <br><code> "
                    "(create_css_entry 'FilteredSelect:focus-within' "
                    "                  [[`box-shadow '0px 0px 10px 0px rgba(0,0,0,0.75)']])<br>"
                    " </code>")
   `tags: ["html" "css" "ui"]
   } )

(defun css_entry_to_css_format (entry_name css_attribute_list)
  (let
      ((`style (create_element "style"))
       (`css_attributes (map (fn (v)
                               (+ v.0 ": " v.1))
                             css_attribute_list)))
    (+ "" entry_name " {\n   " (join ";\n   " css_attributes) ";\n}")
    )

  { `usage: ["entry_name:string" "css_attribute_list:array"]
   `description: (+ "Given a name for the class and a list of formatted css attributes returns a formatted string in CSS syntax.<br> Example: <br><code>"
                    "(create_css_entry 'FilteredSelect:focus-within'
                                    [['box-shadow' '0px 0px 10px 0px rgba(0,0,0,0.75)']])<br>"
                    "</code>")
   `tags: ["html" "css" "ui" "convert"]
   } )

(defun_sync handle_event (e)
  (progn
   (-> e `preventDefault)
   (-> e `stopPropagation)))

(defun_sync focus_to (elem)
   
    (aif elem
       (-> it `focus)))
    

(defmacro blur_to (elem)
    `(aif ,#elem (-> it `blur)))


;(set_prop (get_by_id "juno-css")
;          `textContent
 ;         style_css)
    
(when load_handle
   (-> load_handle `appendChild (create_dom_element "div" { } "Initializing..."))
   (sleep 0.01))

(console.log "html is loaded");
(register_feature "html")
(load_pends "html")
true
