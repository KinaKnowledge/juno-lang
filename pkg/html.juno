;; HTML Components - part of the Juno Library 
;; Initializes and load the html namespace

(when (contains? "html" (namespaces))
  (delete_namespace `html))
(create_namespace `html)
(progn
 (declare (namespace `html))

 ;; Tag component names sourced from
 ;; https://developer.mozilla.org/en-US/docs/Web/HTML/Element
 
 
 (defglobal *DOM_TAGS* [`base `head `link `meta `style `title
                        `body `address `article `aside `footer `header
                        `h1 `h2 `h3 `h4 `h5 `h6
                        `main `nav `section
                        `blockquote `dd `div `dl `dt `figcaption `figure
                        `hr `li `menu `ol `p `pre `ul
                        `a `abbr `b `bdi `bdo `br `cite `code `data `dfn `em
                        `i `kbd `mark `q `rp `rt `ruby `s `samp `small `span
                        `strong `sub `time `u `var `wbr
                        `area `audio `img `map `track `video
                        `embed `iframe `object `picture `portal `source
                        `svg `math `canvas `noscript `script
                        `del `ins
                        `caption `col `colgroup `table `tbody `td `tfoot
                        `th `thead `tr
                        `button `datalist `fieldset `form `input `label `legend
                        `meter `optgroup `option `output `progress `select `textarea
                        `details `dialog `summary
                        `slot `template ])
 
  (defmacro get_by_id (id)
    `(-> document `getElementById ,#id)
    {
     `description: "Given an id, this macro is shorthand for calling document.getElementById with the passed id"
     `usage: ["id:string"]
     `tags: ["html" "DOM" "id" "find" ]
     })
  
  
  (defun append_children (parent children)
    (when (and (is_element? parent)
               (is_array? children))
      (for_each (child children)
                (-> parent `appendChild child)))
    parent)
  
  ;; first create the base constructor which will be called with the tag to create

  (defun create_dom_element (element_name `& args)
    (let
        ((opts (if (is_object? args.0)
                 args.0
                 nil))
         (content (if opts
                    (if (> args.length 0)
                      (rest args)
                      [])
                    (or args
                        [])))
         (append_children (fn (parent children)
                            (do
                                (for_each (child children)
                                      (if (is_array? child)
                                        (append_children parent child)
                                        (-> parent `appendChild child)))
                                parent)))
         (elem (-> document `createElement element_name)))
      (when opts
        (for_each (pset (pairs opts))
          (do
            (cond
              (is_function? pset.1)
              (set_prop elem
                        pset.0
                        pset.1)
              else
              (-> elem `setAttribute pset.0 pset.1)))))
      (when (> content.length 0)
        (for_each (child content)
           (cond
             (is_element? child)
             (-> elem `appendChild child)
             (is_array? child)
             (append_children elem child)
             (is_string? child)
             (-> elem `appendChild (-> document `createTextNode child))
             else
             (-> elem `appendChild (-> document `createTextNode (+ "" child))))))
      elem))

  ;; next create the individual pointers to the create_dom_element function
  ;; for every tag name in the *DOM_TAG* list create the construction function

  (for_each (tagname *DOM_TAGS*)
   (let
       ((bound_fn (-> create_dom_element `bind create_dom_element tagname)))
     ;; use the set_global function directly since we are dynamically creating the symbol names
     (-> Environment `set_global tagname bound_fn)))


  ;; various helper functions 
  
  (defun set_style (style_attributes elem)
    (when (is_element? elem)
      (let ((`current_style (-> elem `getAttribute "style"))
            (`attribs       (or (no_empties (from_style_text current_style)) []))
            (`combined      (pairs
                             (to_object
                              (conj attribs style_attributes))))
            (`newtext
             (join ";"
                   (for_each (`atr combined)
                             (join ": " atr)))))

        (-> elem `setAttribute "style" newtext)
        elem))
    {
     `tags:["ui" "html" "css" "element" "style"]
     `description:"Given a set of style attributes in the [[attribute value]] form, and an element, sets the element style attribute to contain the specified values. Returns the element."
     `usage:["style_attributes:list" "element:Element"]
     })

  (defun has_class? (classname elem)
    (if (and elem
             (is_element? elem))
      (-> elem.classList `contains classname)
      false)
    {
     `usage: ["classname:string" "element:Element"]
     `description: "If the provided element has the specified CSS class, returns true, otherwise the function returns false"
     `tags: ["css" "DOM" "class" "ui" "element" "html"]
     })

  (defun add_class (class_name `& elems)
    (do
      (defvar `effected [])
      (= elems (flatten elems))
      (when (not (eq nil elems))
        (= elems (if (or (instanceof elems.0 NodeList)
                         (instanceof elems.0 HTMLCollection)
                         (is_array? elems.0))
                   elems.0
                   elems))
        (for_each (`e elems)
                  (do
                    (when e.classList
                      (push effected e)
                      (-> e.classList `add class_name)))))
      effected)
    {
     `usage: ["class_name:string" "element:Element" "element?:Element"]
     `description: "Removes the designated CSS class from the provided element or elements. Returns the list of nodes."
     `tags: ["ui" "html" "css" "class"]
     })

   (defun remove_class (class_name `& elems)
         (do
          (defvar `effected [])
          (= elems (flatten elems))
          (when (not (eq nil elems))
              (= elems (if (or (instanceof elems.0 NodeList)
                               (instanceof elems.0 HTMLCollection)
                               (is_array? elems.0))
                           elems.0
                           elems))
              (for_each (`e elems)
                (do
                    (when e.classList
                          (push effected e)
                          (-> e.classList `remove class_name)))))
          effected)
        {
         `usage: ["class_name:string" "element:Element" "element?:Element"]
         `description: "Removes the designated CSS class from the provided element or elements. Returns the list of nodes."
         `tags: ["ui" "html" "css" "class"]
         })

   (defun set_disabled (`& args)
     (when (and args (> (length args) 0))
       (for_each (`elem (flatten args))
                 (if elem (-> elem `setAttribute `disabled "true"))))
     { `description: "Given an arbitrary list of Elements, set them to disabled."
      `tags: ["ui" "html" "css"]
      `usage: ["element:Element" "element?:Element"]
      } )

   (defun set_enabled (`& args)
     (when (and args (> (length args) 0))
       (for_each (`elem (flatten args))
                 (if elem (-> elem `removeAttribute `disabled))))
     { `description: "Given an arbitrary list of Elements, set them to enabled (removes the disabled property from the Element)."
      `tags: ["ui" "html" "css"]
      `usage: ["element:Element" "element?:Element"]
      } )
   
  (register_feature "html")
  true)
