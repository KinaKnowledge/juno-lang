;; BigTable Package - Alpha
;; 2024 Kina 

;; the rebuild of the big table in juno


(progn
(create_css_entry "tbody th.juno-table-header"
   [["border" "1px outset #FFFFFFA0"]
    ["font-weight" "bold"]
    ["cursor" "e-resize"]
    ["background" "var(--main-accent-color)"]])



(create_css_entry "tbody th.juno-table-header:hover"
   [["border" "2px outset #FFFFFF"]])

(create_css_entry "thead.juno-big-table th"
   [["border" "2px outset #FFFFFFA0"]
    ["font-weight" "bold"]
    ["text-align" "center"]
    ["position"  "relative"]
    ["text-overflow: ellipsis" ]
    ["overflow" "hidden"]
    ["cursor" "s-resize"]])

(create_css_entry "thead.juno-big-table th:hover"
   [["border" "2px outset #FFFFFF"]])

(create_css_entry "tbody.juno-big-table.juno-stripes tr:nth-child(even) td"
      [["background" "#0000FF05"]])

(create_css_entry "tbody.juno-big-table td"
   [["padding-top" "8px"]
    ["padding-left" "5px"]
    ["padding-right" "5px"]
    ["vertical-align" "top" ]
    ["text-overflow" "ellipsis"]
    ["white-space" "nowrap"] 
    ["background" "var(--control-text-input-color-bg);"]
    ["overflow" "hidden;"]])

(create_css_entry "tbody.juno-big-table.grid td"
   [["border-right" "1px solid var(--main-accent-line)"]])

(create_css_entry "th.juno-col-sorted"
   [["background" "#00C0FF10"]])

(create_css_entry "th.juno-col-filtered"
      [["font-style" "italic"]
       ["background" "#00C0FF10"]])

(create_css_entry "tbody.juno-big-table td.juno-col-sorted"
      [["border-right" "1px outset #00000020"]
       ["border-left" "1px outset #00000020"]
       ["background" "#FFFFFF10"]])

(create_css_entry "tr.juno-table-row td"
   [["border-bottom" "1px solid var(--main-accent-line)"]])

(create_css_entry "th .juno-col-header-grabber"
   [["cursor" "col-resize"]
    ["position" "absolute"]
    ["right" "0px"]
    ["width" "5px"]
    ["height" "100%"]
    ["z-index" "10"]
    ["top" "0px"]])

(create_css_entry "tr.juno-table-row:hover"
   [;["background" "#FFFFFF30"]
    ;["transition" "all .1s ease-in-out"]
    ["box-shadow" "0px 0px 14px 0px var(--main-accent-line-hover)"]])


(create_css_entry "th .juno-col-header-grabber:hover"
   [["background" "var(--main-accent-line-hover)"]])

(create_css_entry "th .juno-row-header-grabber"
   [["cursor" "row-resize"]
    ["position" "absolute"]
    ["left" "0px"]
    ["width" "100%"]
    ["height" "5px;"]
    ["bottom" "0px"]])

(create_css_entry "th .juno-row-header-grabber:hover"
      [["background" "var(--main-accent-line-hover)"]])

(create_css_entry "tbody.juno-big-table tr.odd-row-color td"
   [["background" "#0000FF05"]])

(create_css_entry "tbody.juno-big-table.juno-stripes tr:nth-child(even):hover"
   [["box-shadow" "0px 0px 14px 0px var(--main-accent-line-hover)"]
    ["background" "#FFFFFF10"]])

(create_css_entry "tbody.juno-big-table.juno-stripes tr:nth-child(odd):hover"
   [["box-shadow" "0px 0px 14px 0px var(--main-accent-line-hover)"]])


(create_css_entry "tbody.fixed-width"
   [["font-family" "Roboto Mono, Fixed;"]])



(create_css_entry "tbody.juno-big-table tr td.selected"
   [["background" "var(--selected-bg-color)"]
    ["color" "var(--selected-color)"]])

(create_css_entry "tbody.juno-big-table tr td.juno-table-active-cell"
   [;["border" "2px solid var(--selected-color);"]
    ["box-shadow" "inset 0px 0px 1px 2px var(--selected-color);"]
    ])

(create_css_entry "tbody.juno-big-table textarea"
   [["resize" "none"]])

(create_css_entry "tbody.juno-big-table tr.selected"
   [["background" "var(--selected-bg-color)"]
    ["color" "var(--selected-color)"]])

(create_css_entry "thead.juno-big-table th.selected"
   [["background" "var(--selected-bg-color)"]
    ["color" "var(--selected-color)"]])

(create_css_entry "tbody.juno-big-table tr.selected th"
   [["background" "var(--selected-bg-color)"]
    ["color" "var(--selected-color)"]])

(create_css_entry "tbody.juno-big-table td.selected"
   [["background" "var(--selected-bg-color)  !important" ]
    ["color" "var(--selected-color)"]])

(create_css_entry "span.juno-table-cell-nil"
   [["background" "#FF101021"]
    ["display" "inline-block"]
    ["border-radius" "4px"]
    ["padding" "3px"]])


(create_css_entry "tbody.juno-big-table  td.al-cen"
   [["text-align" "center"]])

(create_css_entry "tbody.juno-big-table  td.al-right"
   [["text-align" "right"]])

(create_css_entry "tbody.juno-big-table td.al-mid"
   [["vertical-align" "middle"]])

(create_css_entry "section.juno-table-search"
   [["display" "inline-block"]
    ["width" "calc(100% - 10px)"]])

(create_css_entry ".juno-table-search section.button-group"
   [["display" "inline-block"]
    ["margin-left" "10px"]])

(create_css_entry ".juno-table-search button"
   [["margin" "1px"]
    ["padding" "3px"]
    ["min-width" "25px"]])

(create_css_entry ".juno-table-search input"
   [["min-width" "250px"]
    ["width" "calc(100% - 200px)"]
    ["padding" "5px"]])

(create_css_entry "section.juno-table-num-rows"
   [["display" "inline-block"]
    ["font-size" "0.9em"]
    ["margin-left" "10px"]
    ["line-height" "1.1em"]])

(create_css_entry "ol.juno-table-active-filters"
   [["display" "inline-block"]
    ["margin-block-start" "2px"]
    ["margin-left" "10px"]
    ;["border" "1px groove #FFFFFFC0"]
    ["padding" "4px"]])

(create_css_entry "ol.juno-table-active-filters li"
   [["list-style" "none"]
    ["display" "inline-block"]
    ["margin-left" "5px"]
    ["margin-right" "5px"]
    ["border-radius" "3px"]
    ["cursor" "default"]
    ["padding" "5px"]
    ["transition" "all .1s ease-in-out"]
    ["font-size" "0.9em"]
    ["border" "1px groove #FFFFFFC0"]
    ])

(create_css_entry "ol.juno-table-active-filters li:hover"
   [["background" "var(--selected-bg-color)"]
    ["color" "var(--selected-color)"]
    ["transition" "all .1s ease-in-out"]
    ])


(create_css_entry "div .filter-table-view-container"
   [["vertical-align" "top"]
    ["display" "inline-block"]
    ["width" "100%"]
    ["height" "100%"]])

(create_css_entry "div .filter-table-view"
   [["vertical-align" "top"]
    ["display" "inline-block"]
    ["height" "100%"]
    ["width" "calc(100% - 150px)"]
    ["position" "relative"]
    ["padding" "5px"]
    ["overflow" "hidden"]])

(create_css_entry ".filter-table-view .no-values"
   [["position" "absolute"]
    ["left" "calc(55% - 60px)"]
    ["top" "100px"]
    ["font-size" "1.2em"]
    ["font-weight" "bold"]
    ["opacity" "0.5"]])

(create_css_entry ".filter-table-view-container .actions-container"
   [["vertical-align" "top"]
    ["margin-top" "6px"]
    ["display" "inline-block"]])

(create_css_entry ".filter-table-view .item-container"
   [["vertical-align" "top"]
    ["display" "inline-block"]
    ["background" "var(--control-text-input-color-bg)"]
    ["width" "100%"]
    ["height" "calc(100% - 85px)"]
    ["padding" "0px"]
    ["overflow-y" "auto"]
    ["overflow-x" "auto"]])

(create_css_entry ".filter-table-view .special-selector"
   [["background" "var(--control-text-input-color-bg)"]
    ["font-style" "font-style: italic"]])

(create_css_entry ".filter-table-view label span"
   [["display" "inline-block"]
    ["text-overflow" "ellipsis"]
    ["white-space" "nowrap"]
    ["font-family" "var(--main-mono-space)"]])

(create_css_entry ".filter-table-view label"
   [["vertical-align" "top"]
    ["text-overflow" "ellipsis"]
    ["white-space" "nowrap"]
    ["overflow" "hidden"]
    ["display" "inline-block"]])

(create_css_entry ".filter-table-view label :checked + span"
   [["color" "var(--control-text-input-color)"]
    ["font-weight" "bold"]])

(create_css_entry ".filter-table-view li"
   [["list-style" "none"]
    ["padding" "4px"]
    ["border-bottom" "1px dotted var(--main-accent-line-hover)"]])

(create_css_entry ".filter-table-view input[type='checkbox']"
   [["vertical-align" "top"]
    ["margin-right" "15px"]
    ["display" "inline-block"]])

(create_css_entry ".filter-table-view input.filter-by"
   [["min-width" "200px"]
    ["width" "calc(100% - 7px)"]])

(create_css_entry ".item-container details"
   [["margin-bottom" "5px"]
    ["font-family" "var(--main-mono-space)"]
    ["border-bottom" "dotted 1px var(--main-accent-line-hover)"]])

(create_css_entry ".item-container details.sub-level"
   [["padding-left" "15px"]
    ["margin-top" "3px"]
    ["border-bottom" "none"]
    ["margin-bottom" "0px"]])

(create_css_entry ".item-container label.sub-level"
      [["padding-left" "27px"]
       ["display" "block"]
       ["margin-top" "3px"]
       ["border-bottom" "none"]])

(create_css_entry "td.search-result"
   [["background" "#ffe50191 !important"]
    ["color" "black"]])

(create_css_entry "tbody.juno-big-table td.al-bot"
            [["vertical-align" "bottom"]]))



;; some helpers

(defun to_alpha_name (c)
    (let
       ((a 1)
        (b 26)
        (cval  (parseInt c))
        (rval ""))
       (do
        (while (>= cval 0)
            (do
               (= rval (+ "" (String.fromCharCode (+ (/ (% cval b) a) 65)) rval))
               (= a b)
               (= b (* b 26))

               (= cval (- cval a))))
        rval)))



(defun is_nav_key? (key_code)
   (or (== key_code 9)
       (and (>= key_code 37)
            (<= key_code 40))
       (and (>= key_code 33)
            (<= key_code 36)))
   {
     `description: "Returns true if the `key_code` provided is an arrow key, tab, or !,$,#,or a double quote (&quote)."
     `tags: [`navigation `key `nav `arrow`]
     `usage: ["key_code:number"]
     })

(defun is_secure_context? ()
   window.isSecureContext)



(defun_sync to_date (value)
   (cond
      (is_string? value)
      (let
         ((dval (new Date value)))
         (if (== (-> dval `toString) "Invalid Date")
             (throw RangeError "to_date: invalid format"))
         dval)
      (is_number? value)
      (new Date value)
      (is_date? value)
      value
      else
      (throw TypeError (+ "to_date:invalid value type: " (sub_type value))))
   {
     description: (+ "<br><br>Given an input value that is of type string, Number or Date, returns a "
                     "Date object.<br>When providing a numeric input, the number will be considered "
                     "to be the milliseconds from the epoch, defined as the midnight at the beginning "
                     "of January 1, 1970, UTC.<br>If given a string object, the value is assumed to "
                     "be in the date time string format, which is a simplification of the ISO 8601  "
                     "calendar date extended format.   The format "
                     "is:```YYYY-MM-DDTHH:mm:ss.sssZ```<br><br>Where:<br>`YYYY`  is a four digit "
                     "year<br>`MM`  is a two digit month `(01-12)` <br>`DD`  is the day of the "
                     "month `(01-31)` <br>`T`  is a literal character, separating the date from the "
                     "time segment.<br>`HH`  is a two difit hour `(00-23)` <br>`mm`  is the two digit "
                     "minute `(00-59)` <br>`ss`  is the two digit second `(00-59)` <br>`sss` is the "
                     "three digit millisecond `(000-999)` <br>`Z` is the literal timezone separator, "
                     "which is followed by a positive or negative offset, with a `+` or `-` followed "
                     "by `HH:mm` indicating the offset time from UTC.<br>The provided date can be "
                     "specified in various increasing granularities.  All are "
                     "valid:<br>`YYYY` <br>`YYYY-MM` <br>`YYYY-MM-DD`<br><br> ")

     tags: [`date `time `conversion `string `number `milliseconds `convert ]
     usage: ["value:string|number|Date"]
   })



(defmacro with_each_element ((iter source_element selector) `& body_forms)
   `(for (,#iter (-> ,#source_element `querySelectorAll ,#selector))
         ,@body_forms))

(defun_sync is_node_list? (item)
   (instanceof item NodeList)
   {
     description: (+ "For the provided item value, returns `true` if the value is an instance "
                     "of a `NodeList` , otherwise `false`. ")

     usage: ["item:*"]
     tags: ["elements" "ui" "element" "node" "NodeList" "node_list" "DOM"]
   })

(defun progress_bar (options)
   (let
      ((pbr (progress (or options {})))
       (set_value (fn (v)
                     (set_prop pbr `value v))))
      {
          `view: pbr
          `set_value: set_value
      })
   {
     description: (+ "This function, which takes an optional object which can specify initial "
                      "value, class, or style settings, returns an object with a `view` element and "
                      "a `set_value` function.  The `view` can be embedded in the DOM, and "
                      "the `set_value` can be used to pass a number between 0 and 1 to indicate the "
                      "amount of progress against the represented goal. ")
     tags: [`progress `ui `DOM]
     usage: ["options:?object"]
   })

(defun make_icon (path_data size color width height stroke_width)
   (let
      ((size (or size 15))
       (width (or width 12))
       (height (or height 10))
       (stroke_width (or stroke_width "1"))
       (path_data (cond 
                     (is_string? path_data)
                     path_data
                     (is_array? path_data)
                     (join " " (flatten path_data))
                     else
                     "M 1 1 L 11 11 M 11 1 L 1 11"))
       (color (or color "var(--main-color)"))
       (vectors (svg { height: size version:"1.1" width: size viewBox:(+"0 0 " width " " height) }
                     (path { d: path_data 
                             fill:"transparent"
                             stroke: color
                             stroke-width: stroke_width
                     } )))
                      
       (container (div { `style: "display: inline-block;" })))
      (set_prop container
         `innerHTML (prop vectors `outerHTML))
      container)
   {
     `description: (+ "Given path data values, either as an array or string, produces an SVG "
                      "based icon within a inline-block div.  Default size is 15 and default color is "
                      "var(--main-color).<br>The values for the path data can either be in array or "
                      "string form and should be in the form of:```directive value "
                      "value```<br><br>Where directive is either `M` for `Move`, or `L` for `Line` and "
                      "is then followed by numeric values signifying `x` and `y` coordinates within "
                      "the bounding box, which has a default size of 12 wide and 10 high.  This can be "
                      "changed via the optional `width` and `height` arguments.<br>An example that "
                      "draws a dark blue downward arrow:```(make_icon [\"M 6 1\" \"L 6 11\" \"L 1 6\" \"M 6 "
                      "11\" \"L 11 6\"] 15 \"darkblue\")```<br><br>The width and height are set at the "
                      "default values, `12` and `10`, respectively.  <br>For finer control, the scale "
                      "can be adjusted.  For example here is the same icon drawn within a 120x100 "
                      "viewbox.  Note that the `stroke_width` parameter is specified as `10` to ensure "
                      "that the line drawn is thick enough to be legible:```(make_icon [\"M 50 0\" \"L 50 "
                      "100\" \"L 0 50\" \"M 50 100\" \"L 100 50\"] 15 \"darkblue\" 120 100 10)```<br><br><br> ")
       `usage: ["path_data:array|string" "size:number|string" "color:?string" "width:?number" "height:?number" "stroke_width:?number"]
       `tags: ["icon" "draw" "path" "svg" "ui"]
   })

(defun show_progress_popup(options)
   (let
      ((pbr (progress_bar (+ {
                               `style: "width: 100%;"
                               }
                            options)))
       (display_text
          (div { style: "margin-bottom: 5px;" } (or options.header "")))
       (dwin (floating_div
                (div { `style: "padding: 10px;" }
                   display_text
                   pbr.view)
                (+ {
                     controls: true
                     }
                  options))))
      {
        set_value: (fn (v)
                      (-> pbr `set_value v))
        set_text: (fn (text)
                     (set_prop display_text
                        `innerHTML
                        text))
        close: (fn ()
                  (progn
                     (-> dwin `close)
                     true)) })
   {
     description: (+ "When called, creates and displays a floating, non-modal popup window "
                     "that shows a progress bar with an optional title and header.<br>A handle "
                     "interface object is returned with methods for setting the value of the progress "
                     "bar with values between 0 and 1, inclusive, which correlates to the displayed "
                     "progress position.  If no initial value is provided, a \"busy\" type of progress "
                     "bar is displayed, indicating activity, but without showing relative progress as "
                     "no value has been set.<br><br>#### Options  <br><br>title:string -The text that "
                     "will appear in the title bar of the popup window.<br>header:string -The text "
                     "that is displayed above the progress bar to provide context into the current "
                     "activity.<br>value:number -A value between 0 and 1 indicating how much progress "
                     "to display in the progress bar.<br>Additionally the options object is passed to "
                     "both the `progress_bar` and the `floating_div` and so the options of those "
                     "functions can be used as additional parameters in this function.  For "
                     "additional information see those function\'s documentation.<br><br>#### "
                     "Interface  <br><br>close:functon - Call this function to close the "
                     "popup.<br>set_value: function - Call this function with a single numeric "
                     "argument as the work progresses with values between 0 and 1 to update the "
                     "progress bar\'s displayed position.  <br>set_text: function - When provided a "
                     "text string, this value will be displayed in the header text position. ")
     usage:["options:object"]
     tags: ["dom" "progress" "popup" "dialog" "UI" ]
     })
                
     
(defun downward_arrow_icon (size color) 
   (make_icon ["M 50 0" "L 50 100" "L 0 50" "M 50 100" "L 100 50"] size color 120 100 10))


(defun right_arrow_icon (size color) 
   (make_icon ["M 0 50" "L 100 50" "L 50 0" "M 100 50" "L 50 100"] size color 120 100 10))


(defun controls_icon (size color)
   (make_icon [["M 15 0" "L 15 30" "L 2 30" "L 2 40" "L 25 40" "L 25 30" "L 15 30" "M 15 40" "L 15 100"]
               ["M 52 0" "L 52 60" "L 40 60" "L 40 70" "L 63 70" "L 63 60" "L 52 60" "M 52 70" "L 52 100"]
               ["M 90 0" "L 90 20" "L 78 20" "L 78 30" "L 103 30" "L 103 20" "L 90 20" "M 90 30" "L 90 100"]
               ] size color 105 100 10))

(defun info_span ()
   (let
      ((d (span "")))
      (set_prop d `innerHTML "&#9432;")
      d))

(defun filter_icon (size color)
   (make_icon "M 1 1 L 11 1 L 11 2 L 7 6 L 7 10 L 5 10 L 5 6 L 1 2 L 1 1" size color))

(defun highlight_element (element)
   (when (is_element? element)
      (-> element `animate 
         [{ `background: "var(--highlight-bg-color)"  `easing: `ease-in }
            { `background: "var(--highlight-color)"  `opacity: 1    `easing: `ease-out  `offset: 0.1 }
            { `background: "var(--control-text-input-color-bg)" `opacity: 1 `easing: `ease-out } ]
         { `duration: 3000 })))

(defglobal *table_type_map* 
   {
     string: 0
     number: 1
     date: 2
     })

;;         string        number     date
;; string  nil           parseFloat Date.parse 
;; number  (+ "")        nil        Date.setTime 
;; date    toISOString   Date.getTime nil

(defun normalize_table_data_value (to_type value)
   (if (eq nil value)
       value
       (let
          ((table_conversion_matrix [[nil parseFloat to_date]
                                     (list (function (val) (+ "" val)) nil to_date)
                                     (list (function (val) (-> val `toISOString)) (function (val) (-> val `getTime)) nil )])
           (from_type (prop *table_type_map* (lowercase (sub_type value))))
           (converter nil))
          (declare (function converter))
          
          (if (and (is_number? to_type)
                   (is_number? from_type))
              (progn
                 (= converter (resolve_path [ from_type to_type ] table_conversion_matrix))
                 (if converter
                    (converter value)
                    value))
              (throw TypeError (+ "invalid conversion specified: " to_type " from: " (sub_type value)))))))


(defun possible_date? (text)
    (try
       (progn
          (defvar comps (split_by "-" (first (split_by "T" text))))
          (if (and (> comps.length 1)
                   (apply and* (map is_number? (map (function (c) (parseInt c)) comps))))
              (try
                 (is_date? (to_date text))
                 (catch RangeError (e)
                    false))
              false))
      (catch Error (e)
         false)))

(defun possible_number? (text)
    (try
       (not (isNaN (parseFloat text)))
      (catch Error (e)
         false)))
   

(defun profile_rows (rows progress_cb)
   (let
      ((column_meta {})
       (val nil)
       (pcb (if (is_function? progress_cb)
                progress_cb))
       (row_count 0))
   (for (row rows)
        (inc row_count)
        (when (and pcb
                   (== (% row_count 1000) 0))
           (try
              (pcb (/ row_count rows.length))
              (catch Error (e)
                 (log_error "profile_rows: error on progress_cb" e))))
        (for (idx (range row.length))
             (when (eq nil (prop column_meta idx))
                (set_prop column_meta
                   idx
                   { `idx: idx
                     `types: (new Set)
                     `has_nil: false
                     `has_undefined: false }))
             (= val (prop row idx))
             (cond
                (is_nil? val)
                (set_path [idx `has_nil ] column_meta true)
                (== undefined val)
                (set_path [idx `has_undefined ] column_meta true)
                (and (is_string? val)
                     (possible_date? val))
                (-> (resolve_path [ idx `types ] column_meta)
                                        `add "DateString")
                (and (is_string? val)
                     (possible_number? val))
                (-> (resolve_path [ idx `types ] column_meta)
                                        `add "NumberString")
                else
                (-> (resolve_path [ idx `types ] column_meta)
                    `add (sub_type val)))))
  (to_object           
   (for (cmeta (values column_meta))
        (set_prop cmeta
           `types
           (to_array cmeta.types)
           `type (if (== cmeta.types.length 1)
                     (first cmeta.types)
                     "General"))
        [cmeta.idx cmeta]))))

     
(defun date_format_editor (locale_options_object options)
   (let
      ((view nil)
       (sample_date (new Date))
       (settings_object (clone locale_options_object))
       (locale (or options.locale
                   navigator.language))
       (short_long_numeric [["Not Shown" nil ] ["Short" "short"] ["Long" "long"] ["Numeric" "numeric"]])
       (boolean_type [ true false ])
       (iso_date_style_values [["ISO Date/Time" 0] ["ISO Date Only" 1] [ (dtext "Custom for Locale") 2]])
       (keys_and_values  {
                           year: [["Not Shown" nil] ["YY" "2-digit"] ["YYYY" "numeric"]]
                           month: (conj short_long_numeric
                                     [["MM" "2-digit"] ["Narrow" "narrow"]]
                                       )
                           day: [["Not Shown" nil] ["DD" "2-digit"] ["Numeric" "numeric"]]
                           hour: [["Not Shown" nil] ["hh" "2-digit"] ["Numeric" "numeric"]]
                           minute: [["Not Shown" nil] ["mm" "2-digit"] ["Numeric" "numeric"]]
                           second: [["Not Shown" nil] ["ss" "2-digit"] ["Numeric" "numeric"]]
                           hour12: boolean_type
                           weekday: short_long_numeric
                           timeZone: nil
                           timeZoneName: [["Not Shown" nil ] ["Short" "short"] ["Long" "long"] [(from_key "shortOffset") "shortOffset"]
                                          [(from_key "longOffset") "longOffset"] [(from_key "shortGeneric") "shortGeneric"] [(from_key "longGeneric") "longGeneric"]]
                           })
       (sample_date_container (div { `style: "padding: 3px; border: 2px inset #FFFFFF40; background: #00000010; text-align: center;margin-bottom: 5px;" } ))
       (sample_date_display_type (select {}
                                         (for ((display_value value) iso_date_style_values)
                                              (option (+ { value: value }
                                                         (if (== value locale_options_object.iso_date_style)
                                                             { `selected: true }
                                                             {}))
                                                      display_value))))
                                                
       (update_date (function ()
                       (progn
                          (setTimeout
                             (fn ()
                                (progn
                                   (set_prop
                                      sample_date_container
                                      `innerText
                                      (try 
                                         (cond
                                            (== locale_options_object.iso_date_style 2)
                                            (-> sample_date `toLocaleDateString locale locale_options_object)
                                            (== locale_options_object.iso_date_style 1)
                                            (first (split_by "T" (-> sample_date `toISOString)))
                                            else
                                            (-> sample_date `toISOString))
                                         (catch Error (e)
                                            e.message)))))
                             50)
                          nil)))
       (on_change (function (path new_value)
                     (progn
                        (notify (+ "->" new_value ": " (join path)))
                        (log "settings object: " settings_object)
                        (if (and (== "null" new_value)
                                 (not (== (first path) "timeZone")))
                            (progn
                               (delete_prop locale_options_object (first path)))
                            (set_path path locale_options_object new_value))
                        (log "locale_options_object: " locale_options_object)
                        (try
                           (if options.on_change
                              (-> options `on_change path new_value))
                           (catch Error (e)
                              (log_error "date_format_editor: error: " e.message e)))
                        (update_date)
                        new_value)))
       (editor_paths (to_object
                        (for ((key value) (pairs keys_and_values))
                             [key {
                                    `values: (if (== value.0 true)
                                                 nil
                                                 value)
                                    `type: (cond
                                              (== value.0 true)
                                              "Boolean"
                                              else
                                              nil)
                                    }]))))
      
      ;(log "editor_paths: " editor_paths)
      ;(delete_prop editor_paths `hour12)
      (for_each (key (keys keys_and_values))
         (unless (prop settings_object key)
            (set_prop settings_object
               key nil)))
      
      (delete_prop settings_object
         `iso_date_style)
      ;(log "settings_object: " settings_object)
      (update_date)
      (attach_event_listener sample_date_display_type
         `change
         (fn (e)
            (progn
               (set_prop locale_options_object
                  `iso_date_style (parseInt e.srcElement.value))
               (log "date_style: " locale_options_object.iso_date_style e.srcElement.value)
               (try
                  (when (is_function? options.on_change)
                     (-> options `on_change [ `iso_date_style ] locale_options_object.iso_date_style))
                  (catch Error (e)
                     (notify "Unable to signal change")))
               (update_date))))
               
         
      (= view
         (div { `style: "display: inline-block;padding: 10px;" }
              sample_date_container
              sample_date_display_type
              (value_to_dom settings_object
                            {
                              editable: true
                              disable_object_toggle: true
                              pretty_keys: true
                              paths: editor_paths
                              on_change: on_change
                              })))
      (if options.controls
         {
           view: view
           locale: locale
           date_element: sample_date_container
           settings: locale_options_object
           }
         view)))



(defun_sync date_to_input_format (date)
   (if (is_date? date)
       (+ "" (-> date `getFullYear) 
          "-" 
          (-> (+ "" (+ 1 (-> date `getMonth))) `padStart 2 `0) 
          "-" 
          (-> (+ "" (-> date `getDate)) `padStart 2 `0)
          "T" 
          (-> (+ "" (-> date `getHours)) `padStart 2 `0)
          ":" 
          (-> (+ "" (-> date `getMinutes)) `padStart 2 `0))
          date)
   {
     description: (+ "Given a date object returns a string suitable for use in an input element."
                     "If the value provided isn't a date instance, then it will just return the value.")
     tags: [ "ui" "date" "time" "input" "parse" ]
     usage: ["date:Date"]
   })

;; this needs to be probably in *env_config* with the list of currencies for the application
(defglobal *currency_values*
   [["USD" (dtext "U.S. Dollar")]
    ["EUR" (dtext "Euro")]])

(defun_sync from_text_int (val)
   (aif (isNaN (parseInt val))
        val
        (parseInt val)))
        
(defun number_format_editor (locale_options_object options)
   (let
      ((view nil)
       (sample_value (or options.sample_value 123456.789))
       (currency_values *currency_values*)
       (settings_object (to_object
                           (for ((key value) (pairs (clone locale_options_object)))
                                [key (from_text_int value)])))
       (locale (or options.locale
                   navigator.language))
       (sample_format_container (div { `style: "padding: 10px;" } ))
       (construct_option (fn (value_array nil_text)
                           (conj [[(dtext (or nil_text "Default")) nil]]
                                 (for (value_code (or value_array []))
                                      [(dtext value_code) value_code]))))
       (boolean_type [ true false ])
       (keys_and_values  {
                           _style: (construct_option [`decimal `currency `percent ] "None")
                           currency: (construct_option (sort (each *currency_values* first)) "Off")
                           currencyDisplay: (construct_option [`code `symbol `narrowSymbol `name])
                           currencySign: (construct_option [`standard `accounting])
                           minimumIntegerDigits: (construct_option  (range_inc 1 21) "None")
                           minimumFractionDigits: (construct_option (range_inc 20) "None")
                           maximumFractionDigits: (construct_option (range_inc 20) "None")
                           minimumSignificantDigits: (construct_option (range_inc 1 21) "None")
                           maximumSignificantDigits: (construct_option (range_inc 1 21) "None")
                           roundingPriority: (construct_option [ `auto `morePrecision `lessPrecision ])
                           roundingMode: (construct_option [ `ceil `floor `expand `trunc `halfCeil `halfFloor `halfExpand `halfEven])
                           trailingZeroDisplay: (construct_option [ "auto" "stripIfInteger"])
                           notation: (construct_option [ `standard `scientific `engineering `compact ])
                           compactDisplay: (construct_option [ `short `long ])
                           useGrouping: (construct_option [ `always `auto `min2 ])
                           signDisplay: (construct_option [ `auto `always `exceptZero `negative `never ])
                           })
       (intf {})
       (update_sample (function ()
                       (progn
                          (setTimeout
                             (fn ()
                                (set_prop
                                   sample_format_container
                                   `innerText
                                   (if (eq nil locale_options_object.style)
                                       (progn
                                          (set_prop intf
                                             `formatter nil)
                                          sample_value)
                                       (try
                                          (progn
                                             (set_prop intf `formatter (new Intl.NumberFormat locale locale_options_object))
                                             (defglobal *last_formatter* intf.formatter)
                                             (-> intf.formatter `format sample_value))
                                          (catch Error (e)
                                             e.message)))))
                             50)
                          nil)))
       (on_change (function (path new_value)
                     (let
                        ((orig_path (clone path)))
                        (when (starts_with? "_" (first path))
                                 (set_prop path
                                    0
                                    (rest path.0)))
                        (if (== "null" new_value)
                           (progn
                              (delete_prop locale_options_object (first path)))
                           (progn
                              (set_path path locale_options_object
                                 (if (is_number? (second (prop keys_and_values (first orig_path))))
                                     (parseInt new_value)
                                     new_value))))
                        (try
                           (if options.on_change
                              (-> options `on_change path new_value))
                           (catch Error (e)
                              (log_error "date_format_editor: error: " e.message e)))
                        (update_sample)
                        ;(log "locale_options_object: " locale_options_object)
                        new_value)))
       (editor_paths (to_object
                        (for ((key value) (pairs keys_and_values))
                             [(if (== key "style")
                                  "_style"
                                  key)
                              {
                                    `values: value
                                    `type: (cond
                                              (== boolean_type value)
                                              "Boolean"
                                              else
                                              nil)
                                    }]))))
      (log "pre-settings object: " locale_options_object)
      (set_prop settings_object
         `_style (prop locale_options_object "style"))
      (for (key (keys keys_and_values))
         (if (== key "style")
             nil
             (unless (prop settings_object key)
                (set_prop settings_object
                   key nil))))
      (delete_prop settings_object "style")
      (log "Setting object: " settings_object)
      (update_sample)
      (= view
         (div { `style: "display: inline-block;padding: 10px;" }
              sample_format_container
              (value_to_dom settings_object
                            {
                              editable: true
                              disable_object_toggle: true
                              pretty_keys: true
                              paths: editor_paths
                              on_change: on_change
                              })))
      (= intf {
           view: view
           locale: locale
           settings: locale_options_object
           formatter: nil
           date_element: sample_format_container
           })
      (if options.controls
         intf
         view)))

              
(defun handle_table_key_navigation (table_view event)
   (let
      ((currently_selected nil)
       (state (-> table_view `get_state))
       (current_active state.active_cell)
       (kcode event.key_code)
       (shift_key? event.browser_event.shiftKey)
       (row_id_for table_view.get_row_id_for_row_number)
       (col_id_for table_view.get_column_id_by_number)
       (target_row event.row)
       (target_column event.column)
       (allowed_moves {
           `top: (> event.row 0)
           `left: (> event.column 0)
           `bottom: (< event.row (- state.total_rows 1))
           `right: (< event.column (- state.total_columns 1))
       })
       (shift_amount (fn (row column)
                        (let
                           ((state (-> table_view `get_state))
                            (row_move state.viewport.top)
                            (col_move state.viewport.left)
                            (params {
                                      `top: (Math.max 0 (- state.viewport.top row))
                                      `left: (Math.max 0 (- state.viewport.left column))
                                      `bottom: (Math.max 0 (- row (+ state.viewport.top (- state.viewport.num_rows 1))))
                                      `right: (Math.max 0 (- column (+ state.viewport.left (- state.viewport.num_columns 1))))
                                      }))
                           (cond
                              (> params.top 0)
                              (dec row_move params.top)
                              (> params.bottom 0)
                              (inc row_move params.bottom))
                           (cond
                              (> params.left 0)
                              (dec col_move params.left)
                              (> params.right 0)
                              (inc col_move params.right))
                           ;(log "shift_amount: for: " row column " vp to: " row_move col_move "from: " state.viewport.top state.viewport.left state.last_focus)
                           (if (> (sum (values params)) 0) (-> table_view `set_position row_move col_move))
                           ;(log "shifted..")
                           (if (not (-> table_view `path_visible? [ row column ]))
                              (progn
                                 (cond
                                    (or (> params.left 0)
                                        (> params.right 0))
                                    (progn
                                       ;(log "setting position to: " row_move column)
                                       (-> table_view `set_position row_move column))
                                       
                                    (or (> params.top 0)
                                        (> params.bottom 0))
                                    (-> table_view `set_position row col_move))))
                           params)))
                           
       (selected (-> table_view `get_selection)))``
      (log "tbl_key_nav: " event.key_code shift_key? "path: " target_row target_column "allowed: " allowed_moves)
      (cond
         (and (== kcode 13)
              (not shift_key?))
         (-> table_view `edit_active_cell)
         (and (== kcode 9)
              (not shift_key?)
              (not allowed_moves.right)
              allowed_moves.bottom)
         (progn
            (-> table_view `clear_selection)
            (inc target_row)
            (= target_column 0)
            (shift_amount target_row target_column)
            (-> table_view `add_selection [ (row_id_for target_row) (col_id_for target_column) ]
                event.browser_event.shiftKey))
         (and (== kcode 9)
              shift_key?
              (not allowed_moves.left))
         (progn
            (-> table_view `clear_selection)
            (dec target_row)
            (= target_column (- state.total_columns 1))
            ;(log "shift back: " target_row target_column)
            (shift_amount target_row target_column)
            (-> table_view `add_selection [ (row_id_for target_row) (col_id_for target_column) ]
                false))
         (and (== kcode 9)
              shift_key?
              allowed_moves.left)
         (progn
            (-> table_view `clear_selection)
            (dec target_column)
            (shift_amount target_row target_column)
            (-> table_view `add_selection [ (row_id_for target_row) (col_id_for target_column) ]
                false))
         (and (or (== kcode 39) 
                  (== kcode 9))
              allowed_moves.right)
         (progn
            (unless shift_key?
               (-> table_view `clear_selection))
            (inc target_column)
            ;(log "shifting right" target_row target_column)
            (shift_amount target_row target_column)
            (-> table_view `add_selection [ (row_id_for target_row) (col_id_for target_column) ]
                                                event.browser_event.shiftKey))
            
         (and (== kcode 37)
              allowed_moves.left)
         (progn
            (unless shift_key?
               (-> table_view `clear_selection))
            (dec target_column)
            (shift_amount target_row target_column)
            (-> table_view `add_selection [ (row_id_for target_row) (col_id_for target_column) ]
                                                                event.browser_event.shiftKey))
         (and (== kcode 38)
              allowed_moves.top)
         (progn
            (unless shift_key?
               (-> table_view `clear_selection))
            (dec target_row)
            (shift_amount target_row target_column)
            (-> table_view `add_selection [ (row_id_for target_row) (col_id_for target_column) ]
                                                                event.browser_event.shiftKey))
         (and (== kcode 40)
              allowed_moves.bottom)
         (progn
            (unless shift_key?
               (-> table_view `clear_selection))
            (inc target_row)
            (shift_amount target_row target_column)
            (-> table_view `add_selection [ (row_id_for target_row) (col_id_for target_column) ]
                                                                event.browser_event.shiftKey)))
            
      true))
         


(defun parse_tabular_text (text delim?)
   (let
      ((lines (split_by "\n" text)))
      (when (== "\r" (last (first lines)))
         (= lines (each lines chop)))
      (for (line lines)
           (split_by (or delim? "\t") line)))
   {
     `description: (+ "Given a string that is delimited into columns and rows, splits text "
                      "into a 2 dimensional array, with each row array containing an array of "
                      "columns.  The text is assumed to be either line (row) delimited by \"\n\" (Unix) "
                      "or \"\r\n\" (Windows).  The default column delimiter is by default tab `	`, however "
                      "this can be overode if provided an optional column delimiter as a second "
                      "argument.<br><br> ")
     `usage: ["text:string" "delim?:string"]
     `tags: ["parse" "table" "array" "tabular" "delimiter" "delimited" "lines" "rows" "columns" "csv"]
   })


(defun filter_table_view (tbl column_id options)
   (let
      ((unique_values [])
       (options (if (is_object? options)
                    options
                    {
                        `reset: true
                    }))
       (working (div { `class: "working" } (dtext "Working")))
       (clear_button (button { `command: "clear" } (dtext "Reset Filter")))
       (log_state (button { `style: "margin-top: 10px;" `command: "log_state" } "Log State"))
       (log_tbl_values (button { `command: "log_tbl_values" } "Source Values"))
       (no_values (div { `class: "no-values" } (dtext "No Values")))
       (no_matches (div { `class: "no-values" } (dtext "No Values")))
       (select_all_elem (li { class: "special-selector"  }(label { } (input { command: "select_all"  type: "checkbox"  }) (span (dtext "Select All")))))
       (blanks (li { class: "special-selector"  style: "margin-bottom: 5px" }(label { } (input { command: "blanks" type: "checkbox" `checked: true }) (span (dtext "Blanks")))))
       (item_selectors [ working ])
       (locale (or options.locale
                   navigator.language))
       (column_meta (-> tbl `get_column_by_id column_id))
       (filter_input (input { command: "filter" `class: "filter-by" `placeholder: "Filter Values" } ))
       (is_checked? (fn (elem)
                       (cond 
                          (== elem.tagName "LI")
                          elem.children.0.children.0.checked
                          else
                          elem.checked)))
       (get_checked_value (fn (elem)
                             elem.parentElement.innerText))
       (select_all (fn (state)
                      (cond 
                         (== column_meta.data_type 2)
                         (progn
                            ;(log "select_all: -> starting: " state)
                            (set_prop blanks.children.0.children.0 `checked state)
                            (destructuring_bind (total_items elems)
                               (get_level item_selection_box "year")
                               (for (elem elems)
                                    (remove_attribute elem `open)
                                    (set_prop elem.children.0.children.0.children.0 `checked state)))
                            ;(defvar checkboxes (-> item_selection_box `querySelectorAll "input"))
                            ;(for (cb checkboxes)
                            ;     (set_prop cb `checked state))
                            ;(log "setting state blanks to " state)
                            (set_prop blanks.children.0.children.0 `checked state)
                            (when state
                               (set_prop options `reset true)
                               (process_selected_dates)))
                         else
                         (progn
                            (set_prop blanks.children.0.children.0 `checked state)
                            (hide_no_matches)
                            (for (item item_selectors)
                                 (remove_class "juno-display-none" item)
                                 (set_prop item.children.0.children.0 `checked state))
                            (when state
                               (set_prop filter_input `value "")
                               (set_prop options `filter_by nil))
                            (set_prop options `reset true)))))
       (value_to_item_map {})
       (date_expansion_order {
                               year: "month"
                               month: "day_of_month"
                               day_of_month: "hour"
                               hour: "minute"
                               })
       (get_formatted_value (fn (dval level)
                                  (cond
                                     (== level "year")
                                     (-> dval `toLocaleDateString locale { `year: "numeric" })
                                     (== level "month")
                                     (-> dval `toLocaleDateString locale { `month: "long" })
                                     (== level "day_of_month")
                                     (span { `style: "display: inline-block; font-weight: normal;" }  (-> dval `toLocaleDateString locale { `day: "2-digit" }) 
                                           (span { `style: "margin-left: 50px; opacity: 0.6;" }  (-> dval `toLocaleDateString locale { `weekday: "long" })))
                                     (== level "hour")
                                     (+ (second (split_by " " (-> dval `toLocaleDateString locale { `hour: "numeric" `hour12: false }))) ":**")
                                     (== level "minute")
                                     "minuto")))
       (get_values_for_level (fn (level match_function)
                                (let
                                   ((method (cond
                                               (== level "year")
                                               "getFullYear"
                                               (== level "month")
                                               "getMonth"
                                               (== level "day_of_month")
                                               "getDate"
                                               (== level "hour")
                                               "getHours"
                                               (== level "minute")
                                               "getMinute"))
                                     (register {}))
                                   (declare (function match_function))
                                   (if (is_string? method)
                                       (sort (reduce (dval (or unique_values []))
                                                      (if (match_function dval)
                                                          (progn
                                                             (defvar `val (-> dval method))
                                                             (unless (prop register val)
                                                                (set_prop register val true)
                                                                [ (-> dval method) (get_formatted_value dval level)]))
                                                          nil))
                                             { `key: [ 0 ] })
                                       (progn
                                          (log_error "get_values_for_level: invalid level: " level)
                                          [])))))
                                               
       (build_date_values (fn (level match_function checked?)
                             (let
                                ((level (or level "year"))
                                 (checked? (if (== false checked?)
                                               false
                                               true))
                                               
                                 (match_function (if (is_function? match_function)
                                                     match_function
                                                     (fn (v)
                                                        v)))
                                 (units (get_values_for_level level match_function)))
                                (for ((unit display_val) units)
                                     (if (== level "hour")
                                         (label { `class: "sub-level" `level: level `value: unit } 
                                                (input (+ { type: "checkbox" `level: level } 
                                                          (if checked? 
                                                             { `checked: true }
                                                             {})))
                                                display_val)
                                         (details { `class: (if (== level "year") "" "sub-level") `level: level `value: unit }
                                                  (summary (label { `value: unit } 
                                                                  (input (+ { type: "checkbox" `level: level }
                                                                            (if checked? 
                                                                               { `checked: true } 
                                                                               {})))
                                                                  display_val))
                                                  (span { `needs_expansion: true } "opening")))))))
       (build_values (fn ()
                        (progn
                           (= unique_values (-> tbl `get_available_filter_values column_id))
                           (cond
                              (== column_meta.data_type 2)
                              (build_date_values "year")
                              else
                              (let
                                 ((idx -1))
                                 (= value_to_item_map {})
                                 (for (val unique_values)
                                      (inc idx)
                                      (set_prop value_to_item_map
                                         val idx)
                                      (li
                                         (label (input { type: "checkbox"  } ) (span val)))))))))
       (item_selection_box (div { class: "item-container" }
                                item_selectors))
       (get_level (fn (from_element level)
                     (let
                        ((items (reduce (item (-> from_element `querySelectorAll (+ "" (if (== level "hour")
                                                                                           "input"
                                                                                           "details")
                                                                                    "[level='" level "']")))
                                   (when (is_element? item)
                                      item))))
                        [items.length items])))
       (process_selected_dates (fn (initial?)
                                  (let
                                     ((destructure_date (fn (d)
                                                           (progn
                                                              [(-> d `getFullYear) (-> d `getMonth) (-> d `getDate) (-> d `getHours) ])))
                                      (dom_detail nil)
                                      (sub_detail nil)
                                      (completed (new Set))
                                      (selected_values (if initial?
                                                           options.selected_values
                                                           (-> tbl `get_available_filter_values column_id)))
                                      (all_checked false)
                                      (vfor (fn (elem) (get_attribute elem "value")))
                                      (all_checked_for_level (fn (level from_element)
                                                                (let
                                                                   ((num_checked 0))
                                                                   (destructuring_bind (total_avail elems)
                                                                      (get_level from_element level)
                                                                      (for (elem elems)
                                                                           (cond
                                                                              (== elem.tagName "DETAILS")
                                                                              (progn
                                                                                 (all_checked_for_level (prop date_expansion_order level) elem)
                                                                                 (when elem.children.0.children.0.children.0.checked
                                                                                    (inc num_checked)))
                                                                              (== elem.tagName "INPUT")
                                                                              (when elem.checked
                                                                                 (inc num_checked))))
                                                                      (if (and (> total_avail 0)
                                                                               (== total_avail num_checked))
                                                                          (when (== from_element.tagName "DETAILS")
                                                                             (remove_attribute from_element `open)))))))
                                      (open_level (fn (level value root)
                                                     (progn
                                                        (defvar root (or root item_selection_box))
                                                        (aif (-> root `querySelector (+ "details[level='" level "'][value='" value "']"))
                                                             (progn
                                                                ;(log "open_level: ->"  level value "open?" (get_attribute it `open))
                                                                (when (not (get_attribute it `open))
                                                                   (set_attribute it `open true)
                                                                   (handle_expansion { `srcElement: it.children.0 }))
                                                                it)
                                                             (progn 
                                                                (log "open_level: unabled to find: detail for " level "=" value)
                                                                nil)
                                                             )))))
                                     ;(log "process_selected_dates: starting" options.selected_values) 
                                     (log "process_selected_dates: selected_values: " selected_values)            
                                     (when (is_array? selected_values)
                                        (destructuring_bind (total_items elems)
                                           (get_level item_selection_box "year")
                                           (for (elem elems)
                                                (remove_attribute elem `open)
                                                (set_prop elem.children.0.children.0.children.0 `checked false)))
                                        (log "process_selected_dates: deselected all")
                                        (for (dval selected_values)
                                             (destructuring_bind (year month day_of_month hour)
                                                (destructure_date dval)
                                                (when (not (-> completed `has (+ "" year "-" month "-" day_of_month "-" hour)))
                                                   ;(log "process_selected_dates: ----- next: " year month day_of_month hour)
                                                   (= sub_detail (open_level "year" year))
                                                   (set_prop sub_detail.children.1.children.0 `checked true)
                                                   (= sub_detail (open_level "month" month sub_detail))
                                                   (set_prop sub_detail.children.1.children.0 `checked true)
                                                   (= dom_detail (open_level "day_of_month" day_of_month sub_detail))
                                                   (when dom_detail
                                                      (for (elem (or (second (get_level dom_detail "hour")) []))
                                                           (when (is_element? elem)
                                                              (set_prop elem `checked true)))
                                                      (handle_date_click dom_detail.children.1.children.0 true)
                                                      ))
                                                   (-> completed `add (+ "" year "-" month "-" day_of_month "-" hour))
                                                   
                                                )) ;; propagate upward, but don't alert to a change, since we are just setting to the current state
                                        ;; if all sub elements for a level are clicked, close the level
                                        
                                        (all_checked_for_level "year" item_selection_box)
                                        (log "process_selected_dates: complete")
                                        ))))
                                 
       (input_timer nil)
       (get_path_for_date_check (fn (elem _acc _idx)
                                   (let 
                                      ((acc (or _acc []))
                                       (parent nil)
                                       (_idx (or _idx 0))
                                       (level nil))
                                      (inc _idx)
                                      (when (and (< _idx 10)
                                                 (is_element? elem)
                                                 (is_checked? elem))
                                         (= level (get_attribute elem "level"))
                                         (push acc  [level 
                                                     (parseInt (get_attribute elem.parentElement "value"))] )
                                         ;(log "get_path_for_date_check: " _idx "level: " level (parseInt (get_attribute elem.parentElement "value")))
                                         (when (not (== level "year"))
                                            (= parent (get_details elem.parentElement))
                                            (when parent
                                               (unless (== level "hour")
                                                  (= parent (get_details parent.parentElement))))
                                            ;(log "-> parent: " (get_attribute parent "level") (parseInt (get_attribute elem.parentElement "value")))
                                            (when parent
                                               (get_path_for_date_check parent.children.0.children.0.children.0 acc _idx))))
                                      (if (== _idx 1)
                                          (to_object acc)
                                          acc))))
       (get_selected_date_values (fn ()
                                    (let 
                                       ((acc [])
                                        (deduped [])
                                        (match_val 0)
                                        (matches nil)
                                        (current 0)
                                        (calc_match_val (fn (match_object)
                                                           (+ (* match_object.year 10000)
                                                                             (* (+ match_object.month 1) 1000)
                                                                             (* (+ match_object.day_of_month 1) 32)
                                                                             match_object.hour)))
                                        (len_match_object 0)
                                        (current_date {})
                                        (levels {}))
                                       
                                       ;(log "item_selectors: " item_selection_box)
                                       ;(log "get_selected_date_values: starting")
                                       
                                       (for (item (-> item_selection_box `querySelectorAll "input"))
                                            (when (and (is_element? item)
                                                       (== item.tagName "INPUT"))
                                               (when (is_checked? item)
                                                  (push acc (get_path_for_date_check item 0)))))
                                       (log "get_selected_date_values: acc filled: " acc)
                                       (for (date_spec acc)
                                            (for ((key value) (pairs date_spec))
                                                 (cond
                                                    (eq nil (prop current_date key))
                                                    (progn
                                                       ;; key isn't part of the current date, so add it
                                                       (set_prop current_date
                                                          key value))
                                                    (not (== (prop current_date key) value))
                                                    (progn
                                                       (push deduped current_date)
                                                       (= current_date {})
                                                       (set_prop current_date
                                                          key value))
                                                    (== (prop current_date key) value)
                                                    true ;; already equal, so just keep the current date
                                                    else
                                                    (log "get_selected_date_values: fall through: " key value current_date))))
                                       (push deduped current_date)
                                       
                                       (log "get_selected_date_values: starting with: " unique_values)
                                       (log "get_selected_date_values: deduped: " deduped)
                                       ;; now match up the dates to the selected
                                       (= matches (reduce (dval (sort (or unique_values [])))
                                                     (when (is_date? dval)
                                                        (= current (+ (* (-> dval `getFullYear) 10000)
                                                                      (* (+ (-> dval `getMonth) 1) 1000)
                                                                      (* (+ (-> dval `getDate) 1) 32)
                                                                      (-> dval `getHours)))
                                                        (reduce (match_object deduped)
                                                           (progn
                                                              (defvar result nil)
                                                              (when (not match_object.complete)
                                                                 (= len_match_object (length match_object))
                                                                 (= match_val (calc_match_val match_object))
                                                                 (= result
                                                                    (cond
                                                                       (and (== len_match_object 1)
                                                                            (== (-> dval `getFullYear) match_object.year))
                                                                       dval
                                                                       (and (== len_match_object 2)
                                                                            (== (-> dval `getFullYear) match_object.year)
                                                                            (== (-> dval `getMonth) match_object.month))
                                                                       dval
                                                                       (and (== len_match_object 3)
                                                                            (== (-> dval `getFullYear) match_object.year)
                                                                            (== (-> dval `getMonth) match_object.month)
                                                                            (== (-> dval `getDate) match_object.day_of_month))
                                                                       dval
                                                                       (and (== len_match_object 4)
                                                                            (== (-> dval `getFullYear) match_object.year)
                                                                            (== (-> dval `getMonth) match_object.month)
                                                                            (== (-> dval `getDate) match_object.day_of_month)
                                                                            (== (-> dval `getHours) match_object.hour))
                                                                       dval))
                                                                 
                                                                 (when (> current
                                                                          match_object)
                                                                    (log "past (complete): " dval match_object.year match_object.month match_object.day_of_month match_object.hour (- current match_object) current match_object)
                                                                    (set_prop match_object
                                                                       `complete true)))
                                                              result)))))
                                       (= matches (flatten matches))
                                       matches)))
       (get_selected_values (fn ()
                               (let
                                  ((total_matched 0)
                                   (matches nil))
                                  (cond
                                     (== column_meta.data_type 2)
                                     (progn
                                        (= matches (get_selected_date_values)))
                                     else
                                     (= matches
                                        (reduce (item item_selectors)
                                           (when (is_checked? item)
                                              (cond
                                                 (== column_meta.data_type 1)
                                                 (parseFloat item.innerText)
                                                 (== column_meta.data_type 2)
                                                 item.innerText
                                                 else
                                                 item.innerText)))))
                                  matches)))
       (get_state (fn ()
                     (let
                        ((matched (get_selected_values))
                         (sel_vals
                            (cond
                               options.reset
                               nil
                               (not (is_checked? blanks))
                               matched
                               (and (is_checked? blanks)
                                    (== matched.length 0))
                               matched
                               (== matched.length unique_values.length)
                               nil
                               else
                               (progn
                                  (log "get_state: fall through for sel_vals: " matched)
                                  matched)))
                         (result nil))
                        (= result
                        
                           {
                             reset: options.reset
                             ;(and (is_checked? blanks)
                             ;    (or (eq nil sel_vals nil)
                             ;       (== matched.length unique_values.length))))
                             filter_by: (or options.filter_by nil)
                             selected_values: sel_vals
                             include_blanks: (if options.reset
                                                true
                                                (is_checked? blanks))
                             num_values: unique_values.length
                             })
                        (log "filter_table_view: get_state <-: " result)
                        result)))
       (restart_selection_timer (fn ()
                                   (progn
                                      (if input_timer
                                         (clearTimeout input_timer))
                                      (= input_timer
                                         (setTimeout (fn ()
                                                        (progn
                                                           (= input_timer nil)
                                                           (filter_by_input filter_input.value)))
                                                     250)))))
       (hide_no_matches (fn ()
                           (add_class "juno-display-none" no_matches)))
       (show_no_matches (fn ()
                           (remove_class "juno-display-none" no_matches)))
       (filtered_values (new Set))
       (resize_observer nil)
       (reset (fn ()
                 (progn
                    (set_prop filter_input `value "")
                    (filter_by_input nil)
                    (handle_on_change))))
       (refresh (fn ()
                   (progn
                      (-> item_selection_box
                         `replaceChildren working)
                      (hide_no_matches)
                      (= item_selectors (build_values))
                      (-> item_selection_box
                         `replaceChildren)
                      (for (item item_selectors)
                           (-> item_selection_box `appendChild item)))))
       (filter_by_input (fn (val suppress_notify?)
                           (let
                              ((scanner (unless (blank? val)
                                           (new RegExp val)))
                               (total_matched 0))
                              (if (blank? val)
                                  (progn
                                     (select_all true)
                                     (set_prop select_all_elem.children.0.children.0 `checked true)
                                     (hide_no_matches)
                                     (set_prop options
                                        `filter_by nil))
                                  (progn
                                     (set_prop options `reset false)
                                     (set_prop select_all_elem.children.0.children.0 `checked false)
                                     (for (item (or item_selectors []))
                                          (if (> (length (scan_str scanner item.children.0.innerText)) 0)
                                              (progn
                                                 (inc total_matched)
                                                 (set_prop item.children.0.children.0 `checked true)
                                                 (remove_class "juno-display-none" item))
                                              (progn
                                                 (set_prop item.children.0.children.0 `checked false)
                                                 (add_class "juno-display-none" item))))
                                     (set_prop options
                                        `filter_by val)))
                              (if (and (not (blank? val))
                                       (== total_matched 0))
                                  (show_no_matches)
                                  (hide_no_matches))
                              (when (and (not suppress_notify?)
                                         options.on_change)
                                 (-> options `on_change (get_state))))))
       (handle_on_change (fn ()
                            (when options.on_change
                               (-> options `on_change (get_state)))))
       (intf {})
       (initialized false)
       (initialize (fn ()
                      (unless initialized
                         (= initialized true)
                         (-> *system_repl* `clear_output)
                         
                         (log "filter_table_view: initialize: options: " options)
                         (log "filter_table_view: column_meta: " column_meta)
                         ;; build the item selectors
                         (refresh)
                         ;; all item selectors should be built at this point
                         ;; unique values should contain every distinct value for the column
                        
                         (cond
                            (or options.reset
                               (and (not (is_string? options.filter_by))
                                    (not options.include_blanks)
                                    (or (eq nil options.selected_values)
                                       
                                        (and (is_array? options.selected_values)
                                             (== options.selected_values.length 0)))))
                            (progn
                               (set_prop select_all_elem.children.0.children.0 `checked true)
                               (select_all true))
                            (is_array? options.selected_values)
                            (progn
                               (when (is_string? options.filter_by)
                                  (set_prop filter_input `value options.filter_by)
                                  (filter_by_input options.filter_by true))
                               (when (> options.selected_values.length 0)
                                  (for (item item_selectors)
                                       (when (not (has_class? "juno-display-none" item))
                                          (set_prop item.children.0.children.0 `checked false))))
                               (if (== column_meta.data_type 2)
                                   ;; these are details
                                   (process_selected_dates true)
                                   (for (val options.selected_values)
                                        (set_path [ (prop value_to_item_map val) `children 0 `children 0 `checked ]
                                                  item_selectors
                                                  val)))))
                         (if (and (not options.reset)
                                    (== options.include_blanks false))
                            (set_prop blanks.children.0.children.0 `checked false)
                            (set_prop blanks.children.0.children.0 `checked true))
                            
                         (log "filter_table_view: initialize: complete")
                         )))
       (get_details (fn (elem)
                       (let
                          ((idx 0)
                           (parent elem))
                          (while (and parent
                                      (not (== parent.tagName "DETAILS"))
                                      (not (has_class? "item-container" parent))
                                      (< idx 8))
                             (progn
                                (inc idx)
                                (= parent parent.parentElement)))
                          parent)))
                                   
       (in_date_click_handler false)   
       (handle_date_click (fn (elem suppress_notify)
                             (let
                                ((checked? (is_checked? elem))
                                 (level (get_attribute elem "level"))
                                 (container (get_details elem))
                                 (parent nil)
                                 (idx 0)
                                 (value (get_attribute elem.parentElement "value")))
                                ;(log "handle_date_click: -> "level value "checked: " checked? container.tagName (get_attribute container "level"))
                                (when (not (== level "hour"))
                                   (for (child (-> container `querySelectorAll "input"))
                                        (when (is_element? child)
                                           (set_prop child `checked checked?))))
                                (= parent (get_details container))
                                (while (and parent
                                            (< idx 10))
                                   (progn
                                      (inc idx)
                                      (when (== parent.tagName "DETAILS")
                                         ;(log "parent is: " parent.tagName (get_attribute parent "level") (get_attribute parent "value") parent.children.0.children.0.children.0.tagName)
                                         (when checked? (set_prop parent.children.0.children.0.children.0 `checked true)))
                                      (= parent (get_details parent.parentElement))))
                                (unless suppress_notify
                                   (handle_on_change)))))
                                
       (handle_expansion (fn (e)
                            (let
                               ((open_state (is_string? (get_attribute e.srcElement.parentElement "open")))
                                (parent e.srcElement.parentElement)
                                (level (get_attribute parent "level"))
                                (level_val (get_attribute parent "value"))
                                (checked? (is_checked? e.srcElement.children.0.children.0))
                                (internal_content e.srcElement.parentElement.children.1)
                                (pvals { })
                                (get_parent_values (fn ()
                                                      (let
                                                         ((idx 0)
                                                          (next parent))
                                                         (while (and next
                                                                     (get_attribute next "level")
                                                                     (< idx 7)
                                                                     (not (has_class? "item-container" next) ))
                                                            (progn
                                                               (inc idx)
                                                               (set_prop pvals
                                                                  (get_attribute next "level") (parseInt (get_attribute next "value")))
                                                               (= next next.parentElement)))
                                                         )))
                                (needs_expansion? (== "true" (get_attribute internal_content "needs_expansion")))
                                (elements nil)
                                (next_level (prop date_expansion_order level)))
                               ;(log "handle_expansion: ->" level "val: " level_val "checked: " checked?  "needs_expansion: " needs_expansion?)
                               (if needs_expansion?
                                  (progn
                                     (get_parent_values)
                                     (= elements (build_date_values next_level 
                                                                    (fn (dval)
                                                                       (progn
                                                                          (defvar match
                                                                             (for ((key value) (pairs pvals))
                                                                                  ;(log "key: " key "value: " value dval)
                                                                                  (cond
                                                                                     (and (== key "year")
                                                                                          (== (-> dval `getFullYear) value))
                                                                                     value
                                                                                     (and (== key "month")
                                                                                          (== (-> dval `getMonth) value))
                                                                                     value
                                                                                     (and (== key "day_of_month")
                                                                                          (== (-> dval `getDate) value))
                                                                                     value
                                                                                     (and (== key "hour")
                                                                                          (== (-> dval `getHours) value))
                                                                                     value
                                                                                     (and (== key "minute")
                                                                                          (== (-> dval `getMinute) value))
                                                                                     value
                                                                                     else
                                                                                     false)))
                                                                          (if (contains? false match)
                                                                              nil
                                                                              dval)))
                                                                    checked?))
                                                                                              
                                     (-> parent.children.1 `remove)
                                     (for (elem (or elements []))
                                          (-> parent `appendChild elem))))
                                     
                               ;(log "handle_expansion: <- open: " (get_attribute e.srcElement.parentElement "open") "needed to be?" needs_expansion? level level_val)
                               )))
       (handle_click_event (fn (e)
                              (try
                                 (progn
                                    (defvar command (or (get_attribute e.srcElement "command") "none"))
                                    (cond
                                       (or (== e.srcElement.tagName "DETAILS")
                                           (== e.srcElement.tagName "SUMMARY"))
                                       (progn
                                          (handle_expansion e))
                                       (== command "clear")
                                       (reset)
                                       (== command "select_all")
                                       (progn
                                          (select_all (is_checked? select_all_elem))
                                          (handle_on_change))
                                       (== command "log_state")
                                       (progn
                                          (log (-> tbl `get_state))
                                          (log "State: " (get_state))
                                          (log "Filter Values: " (-> tbl `get_available_filter_values column_id)))
                                       (== command "log_tbl_values")
                                       (progn
                                          (log "Source Values For Filter: " (-> tbl `get_available_filter_values column_id)))
                                       (and (== e.srcElement.tagName "INPUT")
                                            (get_attribute e.srcElement "level")
                                            (== e.srcElement.type "checkbox"))
                                       (progn
                                          (set_prop options `reset false)
                                          (set_prop select_all_elem.children.0.children.0 `checked false)
                                          (handle_date_click e.srcElement))
                                       (and (== e.srcElement.tagName "INPUT")
                                            (== e.srcElement.type "checkbox"))
                                       (progn
                                          (set_prop options `reset false)
                                          (set_prop select_all_elem.children.0.children.0 `checked false)
                                          (handle_on_change))))
                                 (catch Error (e)
                                    (log_error "handle_click_event: " e.message e)))))
       
       
       
       (view (div { class: "filter-table-view-container" }
                  (div { `class: "filter-table-view" }
                       filter_input
                       select_all_elem
                       blanks
                       item_selection_box
                       no_matches)
                  (div { `class: "actions-container" }
                       clear_button
                       (br)
                       log_state
                       (br)
                       log_tbl_values))))
      (log "filter_table_view: column meta: " column_meta)
      (attach_event_listener filter_input
         `keyup
         restart_selection_timer)
      (attach_event_listener view
         `click
         handle_click_event)
      
      
      (unless options.lazy_mode
         (initialize))
      
      (set_prop intf
         `view view
         `get_state (fn ()
                       (get_state))
         `select_all (fn (state)
                        (select_all state))
         `options options
         `refresh (fn ()
                     (refresh)))
      intf))
  

(defun column_properties_dialog (column_ids tbl on_close options)
   (if (and (is_array? column_ids) 
            (is_object? tbl))
       (let
          ((dwin nil)
           (cid nil)
           (changed false)
           (apply_changes_button (button { `disabled: true `act: `apply style: "float: right; margin: 10px;" } "Apply"))
           (set_changed (function ()
                           (progn
                              (= changed true)
                              (set_enabled apply_changes_button))))
           (column_data (clone ;; get the prototype of the object to use for our starting defaults 
                               (cond
                                  (is_string? (first column_ids))
                                  (-> tbl `get_column_by_id (first column_ids))
                                  (and options.defaults
                                     (is_object? options.defaults))
                                  options.defaults 
                                  else
                                  (throw RangeError "column_properties_dialog: column_ids must be an array containing string, or options.defaults object provided."))))
           (multi_column (> column_ids.length 1))
           (data_types (-> tbl `get_data_type_map))
           (on_value_change (function (path value)
                               (progn
                                  (log "on_value_change: path: " path ": " value)
                                  (set_changed)
                                  (set_path path column_data value)
                                  (setTimeout (fn () 
                                                 (progn
                                                    (when (== path.0 "data_type")
                                                       (set_format_view_for_type))
                                                    (log column_data))) 10)
                                              
                                  (if (== path.0 "name")
                                      (if (blank? value)
                                          nil
                                          (trim value))
                                      (int value)))))
           (basic_properties {
                               name: (if multi_column
                                              (+ "" column_ids.length " columns")
                                              column_data.name)
                               data_type: column_data.data_type
                              })
           (top_view (div { `class: "juno-form-data" `style: "flex-grow: 1; "}
                          (div { `style: "flex-grow: 0;"  }
                               (value_to_dom basic_properties
                                        { editable: true
                                          disable_object_toggle: true
                                          pretty_keys: true
                                          expand_all: true
                                          table_style: "width: 100%; background: #FFFFFF30; padding: 5px;"
                                          paths: {
                                               name: {
                                                   read_only: multi_column
                                               }
                                               data_type: {
                                                            values: [[(dtext "Text") 0]
                                                                     [(dtext "Number") 1]
                                                                     [(dtext "Date") 2]]
                                                            }
                                               }
                                          on_change: on_value_change
                                          }))))
           
           (filter_state {})
           (col_meta {
                       vertical_align: (or column_data.vertical_align
                                          0)
                       horizontal_align: (or column_data.horizontal_align
                                            0)
                       })
           
           (data_view (div { `style: "margin-top: 6px;"}
                           (value_to_dom col_meta
                                         {
                                           pretty_keys: true
                                           editable: true
                                           expand_all: true
                                           disable_object_toggle: true
                                           on_change: on_value_change
                                           paths: {
                                                    vertical_align: {
                                                                 values: [[(dtext "Top") 0]
                                                                          [(dtext "Middle") 1]
                                                                          [(dtext "Bottom") 2]]
                                                                 }
                                                    horizontal_align: {
                                                                 values: [[(dtext "Left") 0]
                                                                          [(dtext "Center") 1]
                                                                          [(dtext "Right") 2]]
                                                                 }
                                                    }
                                           })))
           (set_format_view_for_type (fn ()
                                        (let
                                           ((new_formatter (cond
                                                              (== column_data.data_type 0)
                                                              { view: (div { `style: "padding: 10px;"} "Text format has no configurable formatting.") }
                                                              (== column_data.data_type 1)
                                                              (number_format_editor (or column_data.number_format {})
                                                                                    {
                                                                                        controls: true
                                                                                        on_change: (fn ()
                                                                                                      (set_changed))
                                                                                    })
                                                              (== column_data.data_type 2)
                                                              (date_format_editor (or column_data.date_format {})
                                                                                  {
                                                                                    controls: true
                                                                                    on_change: (fn ()
                                                                                                  (set_changed))
                                                                                    }))))
                                           (when format_view_container
                                              (-> format_view_container.children.1
                                                 `replaceWith new_formatter.view))
                                           (= format_view new_formatter))))
           
           (filter_view (if multi_column
                            { `view: (div { } "Unavailable") }
                            (filter_table_view tbl (first column_ids)
                                               (+ {}
                                                  (if column_data.filter
                                                      column_data.filter
                                                      {})
                                                  {
                                                    on_change: (fn (state)
                                                                  (progn
                                                                     (= filter_state state)
                                                                     (set_changed)))
                                                    
                                                    }))))
           (filter_view_container (div {  style: "display: flex; padding-top: 0px; padding-left: 10px; height: inherit; overflow: hidden;" }
                                       filter_view.view))
           (format_view (set_format_view_for_type))
           (format_view_container (div { `style: "display: flex; padding-top: 0px; padding-left: 10px; height: inherit; overflow: auto;" }
                                       data_view
                                       format_view.view))
           (tab_set
              (tabs [["Data" filter_view_container]
                     ["Format" format_view_container]]))
           (apply_changes (fn ()
                             (progn
                                (for (column_id column_ids)
                                     (let
                                        ((real_column_data (-> tbl `get_column_by_id column_id))
                                         (orig_type real_column_data.data_type)
                                         (orig_filter (clone real_column_data.filter)))
                                        (for ((key value) (pairs column_data))
                                             ;(log "column_properties_dialog: setting: " (or real_column_data.name real_column_data.uuid) key value)
                                             (cond
                                                (and multi_column 
                                                   (or (== key "name")
                                                       (== key "uuid")))
                                                false ;; do nothing
                                                else
                                                (set_prop real_column_data
                                                   key (if (is_string? value)
                                                           (trim value)
                                                           value))))
                                        (cond
                                           (and (== column_data.data_type 2)
                                                (is_object? format_view.settings))
                                           (set_prop real_column_data
                                              `date_format
                                              format_view.settings)
                                           (and (== column_data.data_type 1)
                                                (is_object? format_view.settings))
                                           (set_prop real_column_data
                                              `number_format
                                              format_view.settings
                                              `number_formatter
                                              format_view.formatter
                                              ))
                                        (if (not (== orig_type real_column_data.data_type))
                                            (-> tbl `normalize column_id))
                                        (log "column_properties_dialog: apply_changes: filter_state " filter_state)
                                        (when (not (== (JSON.stringify orig_filter)
                                                       (JSON.stringify filter_state)))
                                           (try
                                              (-> tbl `set_filter column_id filter_state)
                                              (catch Error (e)
                                                 (alert_box "Error on filter operation: " e.message))))
                                        ))
                                ;(log "column_properties_dialog: applied changes")
                                (= changed false)
                                (set_disabled apply_changes_button)
                                (-> tbl `redraw)
                                true)))
           (perform_close (fn (force)
                             (unless force
                                (cond
                                   changed
                                   (progn
                                      (defvar choice
                                         (request_button_choice "Changes have been made to the filter." 
                                                                [[(dtext "Apply changes and close") 1]
                                                                 [(dtext "Close and do not save") 2]]))
                                      (cond
                                         (== choice "1")
                                         (progn
                                            (apply_changes)
                                            (-> dwin `close))
                                         (== choice "2")
                                         (-> dwin `close)))
                                   else
                                   (-> dwin `close))
                                (when on_close
                                   (on_close))
                                true
                                )))
           (name_input (input (+ (if multi_column
                                     { `disabled: true }
                                     { `tabindex: 0 })
                                 { style: "text-align: center; width: calc(100% - 165px); padding: 5px; font-size: 1.2em; font-weight: bold;" }
                                 { value: (if multi_column
                                              (+ "" column_ids.length " columns")
                                              column_data.name) })))
           (view (div { `style: "" }
                      top_view
                      tab_set.view
                      (div { 
                             style: "width: 100%; position: absolute; bottom: 10px; right: 10px; padding: 5px;" }
                             (button { `act: `close style: "float: right; margin: 10px;" } "Close")
                             apply_changes_button
                             )))
                 
           (dwin nil)
           (resize_observer nil))
          (= resize_observer (new ResizeObserver (fn (elem)
                                                    (progn
                                                       (set_style [["height" (+ (-  dwin.view.offsetHeight 230) "px") ]]
                                                                  filter_view_container)
                                                       (set_style [["height" (+ (-  dwin.view.offsetHeight 230) "px")]]
                                                                  format_view_container)))))
          (-> resize_observer `observe view)
          (attach_event_listener name_input
             `change
             (fn (e)
                (progn
                   (set_changed)
                   (if (blank? e.srcElement.value)
                       (set_prop column_data
                          `name nil)
                       (set_prop column_data
                          `name (trim e.srcElement.value))))))
          (attach_event_listener top_view
             `keydown
             (fn (e)
                (set_changed)))
          
          (attach_event_listener view
             `click
             (fn (e)
                (let
                   ((action (get_attribute e.srcElement "act")))
                   (when action
                      (cond
                         (== action "apply")
                         (apply_changes)
                         (== action "close")
                         (perform_close))))))
          
          (= dwin (floating_div view
                                {
                                  on_close: (fn () (perform_close true))
                                  controls: true
                                  on_display: (fn ()
                                                 (cond
                                                    options.show_format
                                                    (progn
                                                       (-> tab_set `activate_tab 1))))
                                                    
                                                 
                                  title: (dtext "Column Properties")
                                  position: { height: 620 width: 540 }
                                  })))
       (throw TypeError "column_properties_dialog: missing or nil arguments")))
                  

;; use dimensions to get the boundingClientRect 

;; approach is to use table with fixed layout controlled by the control with draggers, etc
;; must be passed a container_element that it is to be placed in since it must do 
;; calculations on width and height and how many rows to show

;; META_CELL is ALWAYS first cell in the row and if not present will be added to the row

(defun worktable (container_element rows options)
   (let
      ((table_elem (table (+ { style: (+ "user-select: none; "
                                         (or options.table_style "")
                                         "table-layout: fixed; border-collapse: collapse;
                                         border-spacing: 0; ") }
                                         (if (is_string? options.table_class)
                                             { class: options.table_class }
                                             {}))))
       (tcontainer (div { `t_role: "tcontainer" `style: "display: inline-block; width: calc(100% - 10px); height: calc(100% - 15px); overflow: hidden;position: absolute; top: 0px; left: 0px;" }
                                           table_elem))
       (scrollable_elem (div { `t_role: "scrollable" `style: "display: inline-block; width: 100%;position: absolute; top: 0px; left: 0px;" }
                             ""))
       (scroll_container (div { `t_role: "scroll_container" `style: "position: absolute; top: 0px; left: 0px;display: inline-block; width: 100%; height: 100%; overflow:scroll;" }
                              scrollable_elem))
       (view_overlay (div { `style: "width: 0%; height: 0%; position: absolute; top: 0px; left; 0px; background: transparent;" }))
       (view_id (gen_id "table"))
       (view (div { `id: view_id `style: "position: relative; display: inline-block; width: 100%; height: 100%; overflow: hidden;" }
                  scroll_container
                  tcontainer
                  view_overlay
                  ))
       (alive true)
       (column_header_elements [])
       (working_row_data [])
       (sort_symbols ["▲" "▼"])
       (menu_symbol "☰")
       (tbody_elem nil)
       (theader_elem nil)
       (intf {
               `id: (or options.id (uuid))
               })
       (meta_detector (function (cell_data)
                         (and (is_object? cell_data)
                              (prop cell_data "__META__"))))
       (row_has_meta? (function (row)
                         (meta_detector (first row))))
       (get_row_meta (function (row)
                        (if (row_has_meta? row)
                            (first row) ;; exists already
                            (progn
                               (prepend row
                                  {
                                    __META__: true
                                    uuid: (uuid)
                                    cell_meta: {}
                                    })
                               (first row)))))
       ;; the state object represents the internal state of the table, and holds everything required to reproduce the table (except the data itself)
       
       (state {
                viewport: {
                            left: 0 ;; viewport left of 0 = row.1 (first col is meta)
                            top: 0
                            num_columns: 0
                            num_rows: 0
                            }
                defaults: {
                            row_height: (or options.defaults.row_height 25)
                            scroll_bar_width: (or options.defaults.scroll_bar_width 15)
                            column_width: (or options.defaults.column_width 150)
                            row_header_width: (or options.defaults.row_header_width 40)
                            col_header_height: (or options.defaults.col_header_height 25)
                            }
                scroll_position: {
                                   top_pct: 0
                                   left_pct: 0
                                   height_pct: 0
                                   width_pct: 0
                                   }
                ;; selection format:
                ;; bounded area: [[upper_left_cell_path] [lower_right_cell_path]]
                ;; row(s): [[row_0_id] [row_1_id] [row_n_id]]
                ;; cols(s): [[`* col_0_id][`* col_1_id] [`* col_n_id]]
                selection: []
                row_data_by_id: {}
                original_sort_order: []
                active_cell: nil
                render_scale: (or options.scale 0.9)
                column_id_map: {}
                column_index_map: []
                sort_map: {}
                filters: []
                last_draw_time: 0
                adornment_check_required: false
                event_handlers: {
                                  on_redraw: (or options.on_redraw nil)
                                  }
                display_geometry: {}
                last_focus: nil
                })
       
       (header_offset_height 12) ;; will get set when table header is drawn
       (resize_observer nil)
       (resize_timer nil)
       (STRING_TYPE 0)
       (NUMBER_TYPE 1)
       (DATE_TYPE 2)
       (SUPPRESS_EVENT true)
       (data_types {
                     `text: STRING_TYPE
                     `number: NUMBER_TYPE
                     `date: DATE_TYPE
                     })
       (row_style_callback (or options.row_style_callback nil))
       (row_incremental_draw_threshold 6)
       (type_mapping *table_type_map*)
       (last_position (JSON.stringify state.viewport))
       (get_column_sequence (fn ()
                               (let
                                  ((seq (for ((id cnum) (sort (pairs state.column_id_map)
                                                  { key: [1] }))
                                             id)))
                                  (set_prop state
                                     `column_index_map
                                     seq)
                                  seq)))
       (compute_sort_map (function ()
                            (let
                               ((sm {})
                                (smr {})
                                (rmeta nil))
                               (-> working_row_data `map
                                  (function (r idx)
                                     (progn
                                        (= rmeta (get_row_meta r))
                                        (set_prop sm
                                           rmeta.uuid idx)
                                        )))
                               (set_prop state
                                  `sort_map sm)
                               state.sort_map)))
       (reset_viewport (function ()
                          (progn
                             (set_prop state.viewport
                                `left 0
                                `top 0
                                `num_rows 0
                                `num_columns 0)
                             (calculate_proposed_viewport))))
       (popup_progress nil)
       (initialize_data
          (fn ()
             (let
                ((max_rows (if (is_array? working_row_data)
                               working_row_data.length
                               0))
                 (pbr (when (> max_rows 5000)
                         (show_progress_popup {
                                                title: "Initializing"
                                                header: (dtext "Analyzing columns")
                                                })))
                 (bada (sleep 0)) ;; alllow the popup to show if we are showing it. 
                         
                 (max_data_cols
                    (if (and (is_array? working_row_data)
                             (is_array? working_row_data.0))
                        (apply Math.max
                           (map (function (r idx)
                                   (let
                                      ((rmeta (get_row_meta r)))
                                      (when (and pbr
                                                 (== (% idx 1000) 0))
                                         (-> pbr `set_value (/ idx max_rows))
                                         (sleep 0))
                                      ;; get the row sort order provided
                                      (set_prop state.sort_map
                                         rmeta.uuid idx)
                                      (- r.length 1)))
                                working_row_data))
                        0))
                 (total_columns (Math.max max_data_cols
                                          (if (is_array? options.columns)
                                              options.columns.length
                                              0)))
                 (col_data nil)
                 (nada (when pbr 
                          (-> pbr `set_text (dtext "Profiling Data"))
                          (sleep 0)))
                 (profile_data (profile_rows (each working_row_data rest)
                                             (if pbr
                                                (fn (v)
                                                   (progn
                                                      (-> pbr `set_value v)
                                                      (sleep 0)))))))
                ;(log "initialize_data: " profile_data)
                (set_prop state
                   `total_columns total_columns
                   `total_rows max_rows
                   `columns (for (idx (range total_columns))
                                 (= col_data (aif (and (is_array? options.columns)
                                                       (prop options.columns idx))
                                                  it
                                                  nil))
                                 (cond
                                    (or (is_string? col_data)
                                        (eq nil col_data))
                                    {
                                      `name: col_data  ;; if name is nil, the name will be a A,B,C,..
                                      `width: state.defaults.column_width
                                      `data_type: (cond
                                                     (or (== (resolve_path [ idx `type ] profile_data) "Number")
                                                         (== (resolve_path [ idx `type ] profile_data) "NumberString"))
                                                     NUMBER_TYPE
                                                     (== (resolve_path [ idx `type ] profile_data) "String")
                                                     STRING_TYPE
                                                     (== (resolve_path [ idx `type ] profile_data) "DateString")
                                                     DATE_TYPE
                                                     else
                                                     STRING_TYPE)
                                      `vertical_align: 0
                                      `uuid: (uuid)
                                      }
                                    (is_object? col_data)
                                    (+  (clone col_data)
                                       {
                                         `name: (cond
                                                   (is_string? col_data.name)
                                                   col_data.name
                                                   (is_function? col_data.name)
                                                   (-> col_data `name)
                                                   (is_number? col_data.name)
                                                   (+ "" col_data.name)
                                                   else
                                                   nil)
                                         `width: (or col_data.width state.defaults.column_width)
                                         `uuid: (or col_data.uuid (uuid))
                                         `vertical_align: (or col_data.vertical_align 0)
                                         `data_type: (cond
                                                        (is_string? col_data.data_type)
                                                        (let
                                                           ((ttext (lowercase col_data.data_type)))
                                                           (or (prop type_mapping ttext)
                                                               0))
                                                        (is_number? col_data.data_type)
                                                        col_data.data_type
                                                        (or (== (resolve_path [ idx `type ] profile_data) "Number")
                                                            (== (resolve_path [ idx `type ] profile_data) "NumberString"))
                                                        NUMBER_TYPE
                                                        (== (resolve_path [ idx `type ] profile_data) "String")
                                                        STRING_TYPE
                                                        (== (resolve_path [ idx `type ] profile_data) "DateString")
                                                        DATE_TYPE
                                                        else
                                                        STRING_TYPE)
                                         }))))
                (for (col_data state.columns)
                     (if (eq col_data.horizontal_align nil)
                         (set_prop col_data
                            `horizontal_align (cond
                                                 (== col_data.data_type STRING_TYPE)
                                                 0
                                                 (== col_data.data_type NUMBER_TYPE)
                                                 2
                                                 (== col_data.data_type DATE_TYPE)
                                                 1))))
                
                (set_prop state
                   `column_id_map
                   (to_object (map (fn (col_data idx)
                                      [col_data.uuid idx])
                                   state.columns)))
                
                ; now build the reverse sequence
                (get_column_sequence)
                
                (set_prop state
                   `original_sort_order
                   [])
                
                (for (row_data working_row_data)
                     (push state.original_sort_order
                        (prop (first row_data) `uuid))
                     (set_prop state.row_data_by_id
                        (prop (first row_data) `uuid)
                        row_data))
                
                (when (eq nil state.last_focus)
                   (log "initialize_data: setting focus to: 0 0")
                   (set_prop state
                      `last_focus
                      [(get_row_id_for_row_number 0)
                       (get_column_id_by_number 0)]))
                
                (unless options.do_not_normalize
                   (when pbr
                      (-> pbr `set_text (dtext "Normalizing Table"))
                      (sleep 0))
                   (normalize_table_data nil (if pbr
                                                 (fn (v)
                                                    (progn
                                                       (-> pbr `set_value v)
                                                       (sleep 0))))))

                (when pbr
                   (-> pbr `close)))))
       
       (normalize_table_data (fn (only_for_column_id progress_callback)
                                (let
                                   ((column_seq (get_column_sequence))
                                    (idx 0)
                                    (column_idx (if (is_string? only_for_column_id)
                                                    (get_column_number_by_id only_for_column_id))))
                                   (declare (function progress_callback))
                                   (log "normalize_table_data: " column_seq)
                                   (with_all_rows
                                      (fn (meta row_data)
                                         (progn
                                            (inc idx)
                                            (when (and progress_callback
                                                       (== (% idx 1000) 0))
                                               (progress_callback (/ idx working_row_data.length)))
                                            (if column_idx
                                               (set_value_at_position meta.uuid only_for_column_id (prop row_data column_idx) SUPPRESS_EVENT)
                                               (for (cid column_seq)
                                                    (set_value_at_position meta.uuid cid (prop row_data (get_column_number_by_id cid)) SUPPRESS_EVENT)))))))))
       
       
       
       (set (fn (data)
               (let
                  ((sorted_columns nil))
                  (log "set: options: " options)
                  (= working_row_data
                     (clone data))
                  (= search_row_data working_row_data)
                  (set_prop state.viewport
                     `top 0
                     `left 0
                     `num_rows 0
                     `num_columns 0)
                  (initialize_data)
                  (= sorted_columns (get_columns_with_property "sorted"))
                  (log "sorted_columns: " sorted_columns state.columns)
                  (when (> sorted_columns.length 0)
                     (sort_by sorted_columns.0.uuid sorted_columns.0.sorted))
                  (set_render_scale state.render_scale)
                  )))
       (valid_state (function ()
                       (not state.invalid)))
       (get_row (function (rnum)
                   (prop working_row_data rnum)))
       (get_row_number_by_id (function (row_id)
                                (prop state.sort_map row_id)))
       (get_row_id_for_row_number (function (row_num)
                                     (aif (first (get_row row_num))
                                          it.uuid)))
       (get_row_by_id (function (row_id)
                         (try
                            (prop state.row_data_by_id row_id)
                            ;(get_row (get_row_number_by_id row_id))
                            (catch Error (`e)
                               nil))))
       (get_column_number_by_id (function (col_id)
                                   (prop state.column_id_map col_id)))
       (get_column_id_by_number (function (col_number)
                                   (prop state.column_index_map col_number)))
       (get_column_info (function (col_number)  ;; offset by 1 (so column 0 is row.1 second column)
                           (prop state.columns col_number)))
       (get_column_info_by_id (function (col_id)
                                 (get_column_info (get_column_number_by_id col_id))))
       (get_columns_for_viewport (function ()
                                    (for (idx (range state.viewport.left (+ state.viewport.left state.viewport.num_columns)))
                                         (get_column_info idx))))
       (get_columns_with_property (function (property value?)
                                     (reduce_sync (col state.columns)
                                        (when (not (eq nil (prop col property)))
                                           col))))
       (get_row_element_by_uuid (function (uuid_row)
                                   (if tbody_elem
                                      (-> tbody_elem `querySelector (+ "tr[row_id='" uuid_row "']"))
                                      nil)))
       (get_element_by_uuid (fn (uuid_row uuid_col)
                               (let
                                  ((row_elem (get_row_element_by_uuid uuid_row))
                                   (cnum (when row_elem
                                            (get_column_number_by_id uuid_col))))
                                  (if cnum
                                     (-> row_elem `querySelector (+ "td[column='" cnum "']"))
                                     nil))))
       (get_element_by_abs_path (fn (uuid_path)
                                   (get_element_by_uuid  uuid_path.0 uuid_path.1)))
       (get_column_elements_by_uuid (function (uuid_col)
                                       (let
                                          ((cnum (get_column_number_by_id uuid_col)))
                                          (if tbody_elem
                                             (-> tbody_elem `querySelectorAll (+ "td[column='" cnum "']"))
                                             nil))))
       (get_path (function (path)
                    (cond
                       (and (== path.length 2)
                            (is_number? path.0))
                       (prop (get_row (first path)) (+ 1 (second path)))
                       (and (== path.length 2)
                            (== path.0 "*")
                            (is_number? path.1))
                       (resolve_multi_path [ "*" (+ 1 path.1) ] working_row_data)
                       (and (== path.length 2)
                            (== path.0 "*")
                            (is_string? path.1))
                       (progn
                          (defvar cnum (get_column_number_by_id path.1))
                          (if (is_number? cnum)
                              (resolve_multi_path [ "*" (+ cnum 1) ] working_row_data)
                              nil))
                       (and (== path.length 2)
                            (is_string? path.0)
                            (is_string? path.1))
                       (let
                          ((cnum (get_column_number_by_id path.1))
                           (row (get_row_by_id path.0)))
                          (if (and (is_number? cnum)
                                   (is_object? row))
                              (prop row
                                 (+ 1 cnum))
                              nil))
                       (and (== path.length 1)
                            (is_number? path.0))
                       (rest (get_row path.0))
                       (and (== path.length 1)
                            (is_string? path.0))
                       (get_row_by_id path.0))))
       
       (set_value_at_position (fn (uuid_row uuid_col value suppress_event_publish)
                                 (if (and (is_string? uuid_row)
                                          (is_string? uuid_col))
                                     (let
                                        ((row (get_row_by_id uuid_row))
                                         (cnum (get_column_number_by_id uuid_col))
                                         (cdata (get_column_info_by_id uuid_col))
                                         (old_value nil)
                                         (cell nil)
                                         (normalized_value nil))
                                        (when (and (is_object? row)
                                                   (is_number? cnum))
                                           (= old_value (prop row (+ cnum 1)))
                                           (= normalized_value (normalize_table_data_value (or cdata.data_type 0) value))
                                           (set_prop row (+ cnum 1)
                                                     normalized_value)
                                           (aif (get_element_by_uuid uuid_row uuid_col)
                                                (progn
                                                   (set_prop it
                                                      `innerText
                                                      normalized_value)
                                                   (highlight_element it)))
                                           (unless suppress_event_publish
                                              (publish_event {
                                                               `type: "set_value_at_position"
                                                               `path: [ uuid_row uuid_col]
                                                               `from: old_value
                                                               `to: normalized_value
                                                               }))
                                           normalized_value)))))
       
       ;; filtering table values
       (reset_filters (fn (redraw_table? suppress_event_publish)
                         (let
                            ((data_set [])
                             (idx 0)
                             (from_filters (clone state.filters))
                             (current_left state.viewport.left)
                             (current_num_cols state.viewport.num_columns)
                             (new_sort_map {}))
                            (set_prop state
                               `filters [])
                            (for (column_meta (or (get_columns_with_property "filter") []))
                                 (set_prop column_meta
                                    `filter
                                    nil))
                            (for (row_id state.original_sort_order)
                                 (push data_set
                                    (prop state.row_data_by_id row_id))
                                 (set_prop new_sort_map
                                    row_id idx)
                                 (inc idx))
                            (set_prop state
                               `sort_map
                               new_sort_map)
                            (= working_row_data
                               data_set)
                            (= search_row_data data_set)
                            (set_prop state
                               `total_rows 
                               working_row_data.length)
                             (unless suppress_event_publish
                                (if (> from_filters.length 0)
                                    (publish_event {
                                                     `type: "reset_filters"
                                                     `from: from_filters
                                                     })))
                            (reapply_sort)
                            (if redraw_table?
                               (progn
                                  (reset_viewport)
                                  (set_position 0 current_left)
                                  (set_prop state.viewport
                                     `left current_left
                                     `num_columns current_num_cols)
                                  (redraw_full_table)
                                  (calculate_scroll_position true)
                                  (resize)))
                            true)))
       (set_filter (fn (column_id filter_params suppress_event_publish)
                      (let
                         ((params (clone filter_params))
                          (qualified_rows [])
                          (idx -1)
                          (last_rows nil)
                          (found_existing? nil)
                          (column_data (get_column_info_by_id column_id))
                          (prior_column_filter (or (clone column_data.filter)
                                                   {
                                                       `filter_by: nil
                                                       `reset: true
                                                       `include_blanks: true
                                                       `selected_values: nil
                                                   })))
                         
                        ;(log "set_filter: prior column_data: " prior_column_filter)
                         ;; when or if we get to the column_id that we want to filter by, remove the
                         ;; column from the filter and invalidate all queries afterward to refilter
                        (set_prop state
                           `filters
                           (for (current_results state.filters)
                                (inc idx)
                                (if (== current_results.column_id column_id)
                                    (= found_existing? idx)
                                    (= last_rows current_results.qualified_row_ids))
                                (when (is_number? found_existing?)
                                   (set_prop current_results
                                      `qualified_rows nil))
                                current_results))
                        (when (and (is_object? column_data)   ;; have the column config
                                   (is_object? filter_params)) ;; have the filter parameters
                           (log "set_filter: setting for: " column_data.name ":" found_existing? ": " params last_rows)
                           ;(log "set_filter: do reset?" (and found_existing? params.reset) params.reset)
                           (set_prop column_data
                              `filter
                              params)
                           (cond
                              (and params.reset found_existing?)
                              (progn
                                 (-> state.filters `splice found_existing? 1)
                                 (log "set_filter: spliced out at: " found_existing?))
                              (and params.reset
                                 (== (length state.filters) 0))
                              (progn
                                 ;; reset requested but there is nothing in the filters
                                 (log "set_filter: reset requested but nothing in the filters: " state.filters))
                              found_existing?
                              (set_prop state.filters
                                 found_existing?
                                 (filter_by_column_id column_id last_rows))
                              else
                              (push state.filters
                                 (filter_by_column_id column_id last_rows)))
                           (log "set_filter: complete: state.filters: " state.filters (if suppress_event_publish "NOT published" "published event"))
                           (unless suppress_event_publish
                              (publish_event {
                                               `type: "set_filter"
                                               `column_id: column_id
                                               `from: prior_column_filter
                                               `to: (clone column_data.filter)
                                               }))
                           (apply_filters true))
                         true)))
       ;; returns a set of row_ids that match the columns filter_by 
       ;; if the checksum digest of the query already matches the existing query checksum then..
       ;; the existing cached set is returned
       ;; row_ids are the rows passed in from the prior filter
       (filter_by_column_id (fn (column_id row_ids)
                               (let
                                  ((set_of_values nil)
                                   (include_blanks? false)
                                   (qualified_rows (new Set))
                                   (cnum (if (is_string? column_id)
                                             (get_column_number_by_id column_id)
                                             nil))
                                   (cval nil)
                                   (params nil)
                                   (row_iteration_function (if row_ids
                                                               (fn (map_fn)
                                                                  (with_row_ids (if (is_set? row_ids)
                                                                                    (to_array row_ids)
                                                                                    row_ids)
                                                                                map_fn))
                                                               with_all_rows))
                                   (precalculated nil)
                                   (column_data (get_column_info_by_id column_id)))
                                  (declare (function row_iteration_function))
                                  (log "filter_by_column_id: -> starting: " (if (eq nil row_ids) "using all rows" "using row subset"))
                                  (when (and (is_object? column_data)           ;; have the column config
                                             (is_object? column_data.filter) ;; have the filter parameters
                                             (is_number? cnum))                 ;; found the column number for the column id
                                     (= params column_data.filter)
                                     (= include_blanks? (or params.include_blanks false))
                                     (for (fdata state.filters)
                                          (when (== fdata.column_id column_id)
                                             (= precalculated fdata)))
                                     (when precalculated
                                        (log "filter_by_column_id:" "cksum match:"  (== (cksum (JSON.stringify params)) precalculated.cksum) )
                                        (log "filter_by_column_id: precalculated:" precalculated))
                                     (when row_ids
                                        (log "filter_by_column_id: using row_ids: " row_ids))
                                     (log "filter_by_column_id: params: " params)
                                     ;(= precalculated nil)
                                     (cond
                                        column_data.filter.reset
                                        (= qualified_rows nil)
                                        (and (is_object? precalculated)
                                             (is_set? precalculated.qualified_rows)
                                             (== (cksum (JSON.stringify params)) precalculated.cksum))
                                        (progn
                                           (log "filter_by_column_id: cksum match: using qualified_rows: " precalculated.qualified_rows)
                                           (= qualified_rows precalculated.qualified_rows))
                                        (and (is_array? params.selected_values)
                                             (> params.selected_values.length 0))
                                        (progn
                                           (log "filter_by_column_id: performing search on: " params.selected_values)
                                           (= set_of_values (make_set params.selected_values))
                                           (row_iteration_function 
                                              (fn (meta row_data)
                                                 (try
                                                    (progn
                                                       (= cval (prop row_data cnum))
                                                       ;(log "checking:" cval cnum "<-" row_data)
                                                       (cond
                                                          (-> set_of_values `has cval)
                                                          (-> qualified_rows `add meta.uuid)
                                                          (and include_blanks?
                                                             (blank? cval))
                                                          (-> qualified_rows `add meta.uuid)))
                                                    (catch Error (e)
                                                       (log_error "row_iteration_function: error: " e.message e))))))
                                        (and (or (eq nil params.selected_values)
                                                 (== (length params.selected_values) 0))
                                             params.include_blanks)
                                        (progn
                                           (log "filter_by_column_id: no selected_values, but blanks")
                                           ;(log "filter_by_column_id: row_iteration_function: " (if (== row_iteration_function with_all_rows) "with_all_rows" "with_row_ids"))
                                           (row_iteration_function
                                              (fn (meta row_data)
                                                 (try
                                                    (progn
                                                       (when (blank? (prop row_data cnum))
                                                          (-> qualified_rows `add meta.uuid)))
                                                    (catch Error (e)
                                                       (log_error "row_iteration_function: error: " e.message e))))))
                                        else
                                        (progn
                                           (log "filter_by_column_id: fall through: " params)
                                           (= qualified_rows (new Set)) ;; empty set
                                           (log "filter_by_column_id: fall through: empty set")
                                           (= qualified_rows nil))))
                                                          
                                                       
                                           ;(log "filter_by_column_id: " qualified_rows)
                                           
                                  (log "filter_by_column_id: <- qualified_rows: " qualified_rows)
                                  { qualified_row_ids: qualified_rows
                                    cksum: (cksum (JSON.stringify column_data.filter))
                                    name: column_data.name
                                    column_id: column_id
                                    } )))
       (get_available_filter_values (fn (column_id)
                                       (let
                                          ((cdata (get_column_info_by_id column_id))
                                           (filter_data state.filters)
                                           (cnum (get_column_number_by_id column_id))
                                           (last_filter nil)
                                           (rval nil)
                                           (row_ids nil)
                                           (idx -1))
                                          (if (or (eq nil cdata)
                                                  (not (is_number? cnum)))
                                              (throw "get_available_filter_values: Invalid column identifier provided"))
                                          (for (filter_params state.filters)
                                               (inc idx)
                                               (when (== filter_params.column_id column_id)
                                                  (break))
                                               (if filter_params.qualified_row_ids
                                                  (= last_filter filter_params)
                                                  (= last_filter
                                                     (if (== idx 0)
                                                         (filter_by_column_id filter_params.column_id)
                                                         (filter_by_column_id filter_params.column_id last_filter.qualified_row_ids)))))
                                          (if last_filter
                                             (= row_ids (to_array last_filter.qualified_row_ids))
                                             (= row_ids (values state.original_sort_order)))
                                          ;(log "get_available_filter_values: " row_ids)
                                          (= rval 
                                             (sort (reduce (r (uniq (with_row_ids row_ids
                                                                                  (fn (meta row)
                                                                                     (prop row  cnum)))))
                                                      r)))
                                           ;(log "get_available_filter_values: " cdata.name rval)
                                           (or rval []))))
       (apply_filters (fn (force? suppress_event_publish)
                         (let
                            ((idx -1)
                             (row_ids nil)
                             (current_left state.viewport.left)
                             (current_num_cols state.viewport.num_columns)
                             (last_filter nil)
                             (last_row_ids nil)
                             (data_set []))
                            ;; get the last set of qualified_rows in the filter set 
                            (log "apply_filters: -> force?: " force? "state.filters: " state.filters)
                            ;(log "apply_filters: " current_left current_num_cols)
                            (cond
                               (== state.filters.length 0)
                               (reset_filters true)
                               force?
                               (progn
                                  (for (filter_params state.filters)
                                       (inc idx)
                                       (when (== idx 0)
                                          (log "apply_filters: using all rows->at beginning of chain."))
                                       (= last_filter 
                                          (if (== idx 0)
                                              (filter_by_column_id filter_params.column_id)
                                              (filter_by_column_id filter_params.column_id last_filter.qualified_row_ids))))
                                  (when last_filter
                                     (= row_ids (if last_filter.qualified_row_ids
                                                    last_filter.qualified_row_ids))))
                               else
                               (progn
                                  ;(log "apply_filters: non forced")
                                  (for (filter_params state.filters)
                                       (inc idx)
                                       (= last_filter filter_params)
                                       (if (is_set? filter_params.qualified_row_ids)
                                           (= row_ids filter_params.qualified_row_ids)
                                           (break)))))
                            (log "apply_filters: last_filter is: " last_filter)
                            ;(log "apply_filters: row_ids: " row_ids)
                            ;; do we have filters to apply?
                            (cond
                                (and (> state.filters.length 0)
                                     (is_set? row_ids))
                                (progn
                                   (= data_set (rows_for_ids row_ids))
                                   (= working_row_data data_set)
                                   (= search_row_data data_set)
                                   ;(log "apply_filters: working_row_data length: " working_row_data.length)
                                   (set_prop state
                                      `total_rows
                                      working_row_data.length)
                                   (reset_viewport)
                                   (set_position 0 current_left)
                                   (set_prop state.viewport
                                      `left current_left
                                      `num_columns current_num_cols)
                                   (reapply_sort)
                                   (redraw_full_table)
                                   (calculate_scroll_position true)
                                   (= sel_min_max {
                                                    `from: [99999999999 99999999999]
                                                    `to: [-1 -1]
                                                    })
                                   (build_selection_lookup)
                                   (set_prop state `adornment_check_required true)
                                   ;(log "apply_filters: sel_min_max: " sel_min_max)
                                   )
                                (> state.filters.length 0)
                                (progn ;; this filter has effectively been removed
                                   (log "apply_filters: found nil qualified_row_ids for column " (aif (get_column_number_by_id last_filter.column_id)
                                                                                                      it
                                                                                                      "unknown!"))
                                   (alert_box "Error" "Invalid row filter mechanism"))))))
                                   
                                
                 
       ;; normalize to uuids for different path types
       (set_value (fn (path value suppress_event_publish)
                     (let
                        ((target_value nil)
                         (row nil)
                         (rnum nil)
                         (cnum nil))
                        (cond
                           (== path.length 2)
                           (cond
                              (and (is_string? path.0)  ;; [ uuid uuid ]
                                   (is_string? path.1)
                                   (> path.0.length 1))
                              (set_value_at_position path.0 path.1 value)
                              (and (is_number? path.0)
                                   (is_number? path.1))
                              (set_value_at_position (get_row_id_for_row_number path.0)
                                                     (prop (get_column_info path.1) `uuid)
                                                     value
                                                     suppress_event_publish))
                           (== path.length 1)
                           (cond
                              (is_string? path.0)
                              (set_row_value path.0 value suppress_event_publish)
                              (is_number? path.0)
                              (set_row_value (get_row_id_for_row_number path.0)
                                             value
                                             suppress_event_publish))))))
       (set_row_value (fn (uuid_row new_row_array suppress_event_publish)
                         (if (is_array? new_row_array)
                             (let
                                ((rnum (get_row_number_by_id uuid_row))
                                 (old_value nil))
                                (if (is_number? rnum)
                                    (progn
                                       (= old_value (get_row_by_id uuid_row))
                                       (cond
                                          (row_has_meta? new_row_array)
                                          (progn
                                             (when (not (== (- working_row_data.length 1) state.total_columns))
                                                (throw Error (+ "set_row_value: row length mismatch (not including meta cell):" (- working_row_data.length 1) state.total_columns)))
                                             (set_prop working_row_data
                                                rnum
                                                new_row_array))
                                          else
                                          (progn
                                             (when (not (== working_row_data.length state.total_columns))
                                                (throw Error (+ "set_row_value: row length mismatch: " working_row_data.length state.total_columns)))
                                             (set_prop working_row_data
                                                rnum
                                                (conj [ (get_row_meta (get_row rnum)) ] new_row_array))))
                                       (unless suppress_event_publish
                                          (publish_event {
                                                           `event: "set_row_value"
                                                           `path: [ uuid_row ]
                                                           `row_num: rnum
                                                           `from: old_value
                                                           `to: new_row_array
                                                           })))
                                    (throw Error "set_row_value: invalid row id, row not found"))
                                new_row_array)
                             (throw Error (+ "set_row_value: invalid row data provided, must be array, got: " (sub_type new_row_array))))))
       (in_edit? false)
       (edit_active_cell_init 
          (fn ()
             (when (and (not options.read_only)
                        (not in_edit?))
                (let
                   ((elem (aif (get_active_cell)
                               (get_element_by_abs_path it)))
                    (cell_data nil)
                    (dval nil)
                    (input_element nil)
                    (handle_edit_event (fn (e)
                                          (cond
                                             (and in_edit?
                                                (== e.keyCode 27))
                                             (progn
                                                (= in_edit? false)
                                                (-> input_element `remove)
                                                (set_value cell_data.path cell_data.data)
                                                (refresh_cell)
                                                (focus_to e.srcElement.parentElement)
                                                (add_class "selected" elem))
                                             (and in_edit?
                                                (or (and (> column_data.data_type 0)
                                                         (== e.keyCode 13))
                                                    (== e.keyCode 9)))
                                             (progn
                                                (handle_event e)
                                                (= in_edit? false)
                                                (-> input_element `remove)
                                                (set_value cell_data.path (or input_element.value nil))
                                                (setTimeout (fn ()
                                                               (progn
                                                                  (refresh_cell)
                                                                  (focus_to (get_element_by_abs_path [cell_data.row_id cell_data.column_id]))
                                                                  (log "done editing..commiting")
                                                                  (add_class "selected" elem)))
                                                            10)))))
                    (handle_blur_event (fn (e)
                                          (if in_edit?
                                             (progn
                                                (= in_edit? false)
                                                (log "new date value: " input_element.value)
                                                (set_value cell_data.path (or input_element.value cell_data.data))
                                                (refresh_cell)
                                                (add_class "selected" (get_element_by_abs_path cell_data.path)))
                                             (add_class "selected" elem))))
                                          
                    (column_data nil)
                    (refresh_cell (fn ()
                                     (try
                                        (let
                                           ((row_style (if row_style_callback
                                                           (-> options `row_style_callback (rest (get_row cell_data.row)) cell_data.row (- cell_data.row state.viewport.top) (get_row_meta (get_row_by_id cell_data.row_id)))
                                                           nil)))
                                           (log "refresh_cell: " (get_path cell_data.path))
                                           (-> elem `replaceWith (render_cell (get_path cell_data.path) (get_row_meta (get_row_by_id cell_data.row_id)) cell_data.column nil row_style true)))
                                        (catch Error (e)
                                           (log_error "Error: " e))))))
                   (when (is_element? elem)
                      (= cell_data (get_data_for_elem elem))
                      (= column_data (get_column_info_by_id cell_data.column_id))
                      (log "editing: " "cell: " cell_data "column: " column_data)
                      (= in_edit? true)
                      (remove_class "selected" elem)
                      (cond
                         (== column_data.data_type 0)  ;; text value
                         (progn
                            (= dval cell_data.data)
                            (= input_element (textarea { tabindex: 0 style: "background: var(--editor-bg-color); color: var(--editor-text-color); position: absolute; padding: 5px; top: 1px; left: 0px; width: calc(100% - 12px); height: calc(100% - 13px);" } "")))
                            
                         (== column_data.data_type 1)  ;; numeric
                         (progn
                            (= dval cell_data.data)
                            (= input_element (input { tabindex: 0 type: `number style: "background: var(--editor-bg-color);  color: var(--editor-numeric-color);position: absolute; padding: 0px; top: 0px; left: 0px; width: calc(100% - 2px); height: calc(100% - 0px);"})))
                         (== column_data.data_type 2) ;; date time
                         (progn
                            (= dval (date_to_input_format cell_data.data))
                            (log "editing date: " dval cell_data.data)
                            (= input_element (input { tabindex: 0 type: "datetime-local"  style: "background: var(--editor-bg-color);  color: var(--editor-text-color);position: absolute; top: -3px; left: -3px; width: calc(100% - 10px); height: 100%;" value: dval }))))
                            
                      (set_style [["position" "relative"]] elem)
                      (-> elem `append input_element)
                      
                      (attach_event_listener input_element
                               `blur
                               handle_blur_event)
                      (attach_event_listener input_element
                         `keyup
                         handle_edit_event)
                      (focus_to input_element)
                      (cond 
                         (== column_data.data_type 1)
                         (progn
                            (set_prop input_element `value dval)
                            (focus_to input_element))
                         (== column_data.data_type 0)
                         (progn
                            (set_prop input_element `value dval)
                            (focus_to input_element)))
                      )))))
                           
       
       ;; given a row number, returns an array containing: [meta_cell working_row_data ]
       (get_data_slice (function (row_num)
                          (if (and (>= row_num 0)
                                   (< row_num state.total_rows))
                              (let
                                 ((row (get_row row_num))
                                  (col_offset (+ state.viewport.left 1)))
                                 [(+ { row_number: row_num height: state.defaults.row_height }
                                     (first row))
                                  (-> row `slice col_offset (+ col_offset state.viewport.num_columns))
                                  ])
                              (throw Error (+ "get_data_slice: invalid row num: " row_num)))))
       ;; given the current viewport in state, returns 2D array,
       ;; with each element in the array being an array [ augment_row_meta row_data_for_viewport ]
       
       (get_data_slice_for_viewport
          (function ()
             (let
                ((row_offset state.viewport.top)
                 (col_offset (+ state.viewport.left 1)) ;; meta is first row so add 1
                 (max_row_num (Math.min (+ row_offset state.viewport.num_rows)
                                        state.total_rows))
                 (row nil))
                (for (row_num (range row_offset max_row_num))
                     (= row (get_row row_num))
                     [(+ { `row_number: row_num `height: state.defaults.row_height }
                         (first row))
                      (-> row `slice col_offset (+ col_offset state.viewport.num_columns))]))))
       
       (path_in_viewport? (fn (path)
                             (cond
                                (and (is_string? path.0)
                                     (is_string? path.1))
                                (is_element? (get_element_by_abs_path path))
                                (and (is_number? path.0)
                                     (is_number? path.1))
                                (is_element? (get_element_by_abs_path [ (get_row_id_for_row_number path.0) (get_column_id_by_number path.1) ]))
                                else
                                (progn
                                   (log "path_in_viewport?: invalid path provided: " path)
                                   (throw RangeError (+ "path_in_viewport?: invalid path value: " (as_lisp path)))))))
       (width_delta 0)                         
       (calc_width_delta (fn ()
                            (progn
                               ;(log "upper_left_corner: " upper_left_corner.offsetWidth (is_element? upper_left_corner) (each column_header_elements `offsetWidth))
                               (cond
                                  (and (is_element? upper_left_corner)
                                       column_header_elements)
                                  (Math.round (- (sum (each column_header_elements `offsetWidth))
                                                 (/ (sum (each (get_columns_for_viewport) `width)) state.render_scale)))
                                  else
                                  (- (- state.display_geometry.width state.defaults.row_header_width) (sum (each (get_columns_for_viewport) `width)))))))

                                                           
       ;; calculates the current viewport as required and places it into state
       
       (calculate_proposed_viewport
          (fn ()
             (when (valid_state)
                (set_prop state.viewport
                   `left (Math.min state.viewport.left (- state.total_columns 1))
                   `top (Math.min state.viewport.top (- state.total_rows 1)))
                (let
                   ;; give a little extra play due to width variances and column fits (5)
                   ((width (- (/ state.display_geometry.width state.render_scale) state.defaults.scroll_bar_width upper_left_corner.offsetWidth))
                    (height (parseInt (/ state.display_geometry.height state.render_scale)))
                    (num_displayed_columns 0)
                    (acc 0)
                    (num_displayed_rows 0)
                    (next_column_width 0)
                    (at_right_edge false)
                    (starting_column state.viewport.left)
                    (starting_row state.viewport.top)
                    (finished false)
                    (col_data nil)
                    (rdata nil)
                    (needs_col_adjustment true)
                    (col_idx 0)
                    (row_idx (- starting_row 1)))
                   
                   ;; calculate number of columns to display
                   
                   ;(log "calculate_proposed_viewport: ->" (clone state.viewport))
                   (while needs_col_adjustment
                      (progn
                         (= starting_column state.viewport.left)
                         (= col_idx (Math.max -1 (- starting_column 1)))
                         (= acc (+ state.defaults.row_header_width header_offset_height))
                         (= num_displayed_columns 0)
                         (= width_delta (calc_width_delta))
                         ;(log "cpv: width_delta: " width_delta)
                         (cond 
                            (and (== (+ state.viewport.left state.viewport.num_columns) state.total_columns)
                                 (> state.viewport.left 0))
                             ;; at right edge
                             (progn
                                (= num_displayed_columns state.viewport.num_columns)
                                (= next_column_width (prop (get_column_info col_idx) `width))
                                ;(log "right: view width:" "wdelta:" width_delta "leftward col: " (prop (get_column_info col_idx) `name) next_column_width col_idx "vp:" state.viewport.left state.viewport.num_columns) 
                                (= needs_col_adjustment false)
                                (= finished true)
                                (= acc state.display_geometry.width)
                                (cond 
                                   (> width_delta next_column_width)
                                   (progn
                                      (set_prop state.viewport
                                         `left col_idx)
                                      (inc num_displayed_columns))
                                      
                                   (and (<= width_delta -20)) ;(* -1 (prop (get_column_info (+ state.viewport.left state.viewport.num_columns)) `width)))
                                   (progn
                                      ;(log "rightward: removing leftward column")
                                      (set_prop state.viewport
                                         `left (+ 1 state.viewport.left))
                                      (dec num_displayed_columns))))
                                
                             (and (> (+ state.viewport.left state.viewport.num_columns) state.total_columns)
                                  (> width_delta (prop (get_column_info col_idx) `width)))
                             (progn
                                (set_prop state.viewport
                                   `left (- state.viewport.left 1))
                                (= acc state.display_geometry.width)
                                (= num_displayed_columns (- state.total_columns state.viewport.left))
                                ;(log "cpv: overflow: wdelta:" width_delta "leftward col: " (prop (get_column_info col_idx) `name) next_column_width col_idx "vp:" state.viewport.left num_displayed_columns) 
                                (= needs_col_adjustment false))
                             
                             else        
                             (while (and (not finished)
                                         (< col_idx (- state.total_columns 1)))
                                (progn
                                   ;(log "cpv: wdelta:" width_delta "leftward col: " (prop (get_column_info col_idx) `name) next_column_width col_idx "vp:" state.viewport.left state.viewport.num_columns) 
                                   (inc col_idx)
                                   (= col_data (get_column_info col_idx))
                                   (inc num_displayed_columns)
                                   (if col_data.width
                                      (inc acc (prop col_data `width))
                                      (= finished true))
                                   (= next_column_width (prop (get_column_info (+ col_idx 1)) `width))
                                   ;(log "cpv: num_displayed_columns: " num_displayed_columns " acc at: " acc "next_column_width: " next_column_width "thresh width: " width)
                                   (cond
                                      (eq nil next_column_width)
                                      (= finished true)
                                      (and (>= (+ acc next_column_width) width)
                                           (== num_displayed_columns 1))
                                      (progn
                                         (inc num_displayed_columns)
                                         (= finished true))
                                      (>= (+ acc next_column_width) (+ width state.defaults.column_width))
                                      (= finished true))     
                                      )))
                         (if (and (> state.viewport.left 0)
                                  (not finished)
                                  (< acc (- width (if (eq next_column_width nil)  ;; if undefined we are at the final column
                                                      (* 1.5 state.defaults.column_width)
                                                      state.defaults.column_width))))
                             (progn
                                (set_prop state.viewport
                                   `left (Math.max 0 (- state.viewport.left 1))
                                   `num_columns (Math.min (+ state.viewport.num_columns 1) state.total_columns))
                                (= width_delta (calc_width_delta))
                               ; (log "calculate_proposed_viewport: width_delta: " width_delta)
                                (= num_displayed_columns state.viewport.num_columns)
                                (= finished false))
                             (= needs_col_adjustment false))))
                   
                   ;(log "calculate_proposed_viewport: " state.viewport.left state.viewport.num_columns num_displayed_columns)
                   (= finished false)
                   (= acc 0)
                   
                   (when (> state.total_rows 0)
                      (while (and (not finished)
                                  (< row_idx (- working_row_data.length 1)))
                         (progn
                            (inc row_idx)
                            (= rdata (get_row_meta (get_row row_idx)))
                            (inc num_displayed_rows)
                            (inc acc (+ (or rdata.height
                                            state.defaults.row_height)
                                        2))
                            (when (or (>= acc height)
                                      (== row_idx (- working_row_data.length 1)))
                               (= finished true)))))
                   
                   (set_prop state.viewport
                      `num_columns num_displayed_columns
                      `num_rows num_displayed_rows
                      `proposed true)
                   ;(log "calculate_proposed_viewport: <- vp: " acc (clone state.viewport))
                   state))))
       
       
       
       ;; calculate_geometry provides the state object with the dimensions
       ;; of the containing element, and whether the values are valid or not
       
       (calculate_geometry (fn ()
                              (when alive
                                 (let
                                    ((dims (if (is_element? container_element)
                                               (dimensions container_element))))
                                    (set_prop state
                                       `total_column_width (sum (each state.columns `width)))
                                    (if (is_object? dims)
                                        (set_prop state
                                           `display_geometry
                                           (+ {}
                                              dims))  ;; converts to standard object with plus operator
                                        (set_prop state
                                           `display_geometry
                                           {
                                             `width: 0
                                             `height: 0
                                             `x: 0
                                             `y: 0
                                             `invalid: true
                                             }))
                                    (when (valid_state)
                                       (when (is_element? table_elem)
                                          (set_style [["width" (+ "" (- (/ state.display_geometry.width state.render_scale) 10) "px") ]]
                                                     table_elem))
                                       (calculate_proposed_viewport)
                                       ;(log "calculate_geometry: " state.viewport.num_columns)
                                       (redraw_full_table))
                                    (valid_state)))))
       ;; sets how big/small the table is drawn
       (set_render_scale (fn (scale)
                            (progn
                               (set_prop state `render_scale scale)
                               (set_style [["transform" (+ "scale(" scale ")") ]
                                           ["transform-origin" "0 0"]
                                           ["width" (+ "calc(" (/ 100 scale) "% - " (+ 10 (Math.max 0 (* 32 (- 1 scale)))) "px)") ]
                                           ["height" (+ "calc(" (/ 100 scale) "% - " (+ 20 (Math.max 0 (* 84 (- 1 scale))))"px)") ]
                                           ] tcontainer)
                               ;(log "table render scale set: " state.render_scale (+ 20 (Math.max 0 (* 84 (- 1 scale)))))
                               (resize))))
       
       (calculate_scroll_position (fn (override)
                                     (when (or (not mouse_pressed)
                                               override)
                                        (set_prop state.scroll_position
                                           `top_pct (/ state.viewport.top state.total_rows)
                                           `left_pct (/ state.viewport.left state.total_columns)
                                           `height_pct (/ state.viewport.num_rows state.total_rows)
                                           `width_pct  (/ (sum (each (get_columns_for_viewport) `width)) state.total_column_width));    (/ state.viewport.num_columns state.total_columns))
                                        (when (< state.scroll_position.width_pct 0.99)
                                           (set_prop state.scroll_position
                                              `width_pct (Math.max  (* state.scroll_position.width_pct 0.8))))
                                        (set_style [["height" (+ "" (/ (- state.display_geometry.height header_offset_height) state.scroll_position.height_pct) "px") ]
                                                    ["width" (+ "" (if (< state.viewport.num_columns state.total_columns)
                                                                       (* 1.0 (/ state.display_geometry.width  state.scroll_position.width_pct))
                                                                       (* 0.9 (/ state.display_geometry.width  state.scroll_position.width_pct)))
                                                                "px") ]
                                                    ]
                                                   scrollable_elem)
                                        (set_style [["top" (+ "" header_offset_height "px")]
                                                    ["left" (+ "" state.defaults.row_header_width "px")]
                                                    ["height" (+ "calc(100% - " (+ header_offset_height 10) "px)")]   ;; <-- IMPACT SCROLL BAR BOTTOM POSITION
                                                    ["width" (+ "calc(100% - " state.defaults.row_header_width "px)")] ;state.defaults.row_header_width 10
                                                    ] scroll_container)
                                        (set_prop scroll_container
                                           `scrollTop
                                           (* state.scroll_position.top_pct
                                              scrollable_elem.offsetHeight)
                                           `scrollLeft
                                           (* state.scroll_position.left_pct
                                              scrollable_elem.offsetWidth))
                                       ; (calculate_proposed_viewport)
                                        (set_prop state
                                           `adornment_check_required true
                                           `last_draw_time (time_in_millis)))))
       (geometry_view_win nil)
       (geometry_view nil)
       (table_interval nil)
       (handled_events [])
       (publish_event (fn (event)
                         (try
                            (when (and alive
                                       (is_object? event))
                               (set_prop event
                                  `source_id intf.id
                                  `event_id (time_in_millis))
                               (when options.log_events
                                  (log "table:" event))
                               (when (is_function? options.on_event)
                                  (-> options `on_event event intf)))
                            (catch Error (e)
                               (log_error "worktable: on_event handler caught exception for: " event e)))))
       (show_geometry_view (fn (on_or_off)
                              (if on_or_off
                                 (when (not geometry_view_win)
                                    (= geometry_view_win
                                       (floating_div
                                          (progn
                                             (= geometry_view
                                                (div { `style: "width: 100%; height: calc(100% - 30px); overflow: scroll; display: inline-block" }
                                                     (value_to_dom
                                                        (+ state.viewport
                                                           state.display_geometry)
                                                        {
                                                          expand_all: true
                                                          }))))
                                          {
                                            position: {
                                                        left: "10%";
                                                        top: "50%"
                                                        width: 400;
                                                        height: 500;
                                                        }
                                            on_close: (fn ()
                                                         (progn
                                                            (= geometry_view_win nil)
                                                            (clearInterval table_interval)
                                                            (= geometry_view nil)))
                                            controls: true
                                            })))
                                 (progn
                                    (when geometry_view_win
                                       (-> geometry_view_win `close))
                                    (clearInterval table_interval)
                                    (= geometry_view  nil)
                                    (= geometry_view_win nil)))))
       (upper_left_corner nil)
       (locale (or options.locale
                   navigator.language))
       
       (drag_status nil)
       (init_drag (fn (e)
                     (cond
                        (and (is_element? upper_left_corner)
                             (== e.srcElement.parentElement upper_left_corner))
                        (progn
                           (= drag_status {
                                            column_header_height: (Math.max 1 state.defaults.col_header_height)
                                            start_y: nil
                                            drag_dir: 2
                                            header_elem: e.srcElement.parentElement
                                            row_drag_elem: e.srcElement
                                            row_num: nil
                                            row_initial_height: e.srcElement.parentElement.offsetHeight
                                            })
                           (set_style [["width" (+ "" table_elem.offsetWidth "px") ]
                                       ["background" "var(--main-accent-line-hover)" ]] e.srcElement)
                           
                           (set_style [["width" "100%"]
                                       ["height" "100%"]
                                       ["cursor" "row-resize"]]
                                      view_overlay))
                        
                        (has_class? "juno-col-header-grabber" e.srcElement)
                        (progn
                           (defvar column_num
                              (parseInt (get_attribute e.srcElement.parentElement "column")))
                           (defvar sel_range (get_selected_range))
                           (= drag_status {
                                            start_x: nil
                                            start_y: nil
                                            drag_dir: 1
                                            header_elem: e.srcElement.parentElement
                                            col_group_elem: (-> table_elem `querySelector (+ "col[column='" (parseInt (get_attribute e.srcElement.parentElement "column")) "']"))
                                            column_num: column_num
                                            column_initial_width: (prop (get_column_info column_num) `width)
                                            multi_column: (> (length sel_range) 1)
                                            selected_columns: (-> intf `get_selected_column_ids);; array of column ids
                                            })
                           (set_style [["width" "100%"]
                                       ["height" "100%"]
                                       ["cursor" "col-resize"]]
                                      view_overlay))
                        (has_class? "juno-row-header-grabber" e.srcElement)
                        (progn
                           (= drag_status {
                                            start_x: nil
                                            start_y: nil
                                            drag_dir: 2
                                            row_drag_elem: e.srcElement
                                            header_elem: e.srcElement.parentElement
                                            row_num: (parseInt (get_attribute e.srcElement.parentElement "row_num"))
                                            row_initial_height: (+ e.srcElement.offsetTop e.srcElement.offsetHeight)
                                            row_meta: (first (get_row (parseInt (get_attribute e.srcElement.parentElement "row_num"))))
                                            multi_row: (> (length (get_selected_range)) 1)
                                            selected_rows: (-> intf `get_selected_row_ids)
                                            })
                           (log "selected row ids: " drag_status.selected_rows)
                           (set_style [["width" (+ "" table_elem.offsetWidth "px") ]
                                       ["background" "var(--main-accent-line-hover)" ]] e.srcElement)
                           
                           (set_style [["width" "100%"]
                                       ["height" "100%"]
                                       ["cursor" "row-resize"]]
                                      view_overlay))
                        )))
       (complete_drag (fn (e)
                         (let
                            ((event (cond
                                       (== drag_status.drag_dir 1)
                                       {
                                         type: "col_resize"
                                         column_num: drag_status.column_num
                                         col_meta: (prop state.columns drag_status.column_num)
                                         target_columns: (if (and drag_status.selected_columns
                                                                  (> drag_status.selected_columns.length 0))
                                                             drag_status.selected_columns
                                                             [ (get_column_id_by_number drag_status.column_num) ])
                                         from: drag_status.column_initial_width
                                         to: (prop (prop state.columns drag_status.column_num) `width)
                                         }
                                       (and drag_status.column_header_height
                                          (== drag_status.drag_dir 2))
                                       {
                                         type: "col_header_size"
                                         from: drag_status.row_initial_height
                                         to: state.defaults.col_header_height
                                         }
                                       (== drag_status.drag_dir 2)
                                       {
                                         type: "row_resize"
                                         row_num: drag_status.row_num
                                         row_meta: drag_status.row_meta
                                         from: drag_status.row_initial_height
                                         to: drag_status.row_meta.height
                                         }
                                       else
                                       {
                                         type: "drag_other" })))
                            (set_style [["width" "0%"]
                                        ["height" "0"]] view_overlay)
                            (log "drag event: " event)
                            (cond
                               (and drag_status.selected_columns
                                  (> drag_status.selected_columns.length 0))
                               (progn
                                  (for (col_id drag_status.selected_columns)
                                       (set_prop (get_column_info_by_id col_id)
                                                 `width event.to)))
                               (and drag_status.selected_rows
                                  (> drag_status.selected_rows.length 0))
                               (progn
                                  (for (row_id drag_status.selected_rows)
                                       (set_prop (get_row_meta (get_row_by_id row_id))
                                                 `height drag_status.row_meta.height))))
                            (= drag_status nil)
                            (calculate_geometry)
                            ;(calculate_proposed_viewport)
                            (redraw_full_table)
                            ;(setTimeout (fn ()
                            (set_prop tcontainer
                               `scrollTop 0)
                                   ;     0)
                            (publish_event event))))
       (perform_drag (fn (e)
                        (progn
                           (-> e `preventDefault)
                           (when drag_status
                              (if (== e.buttons 0)
                                  (complete_drag)
                                  (cond
                                     (== drag_status.drag_dir 1)
                                     (progn
                                        (if drag_status.start_x
                                           (progn
                                              (set_path [ drag_status.column_num `width ] state.columns
                                                        (Math.max 10 (+  drag_status.column_initial_width (- e.offsetX drag_status.start_x))))
                                              (set_style [["width" (+ "" (resolve_path [ drag_status.column_num `width ] state.columns) "px") ]]
                                                         drag_status.col_group_elem))
                                           (progn
                                              (set_prop drag_status
                                                 `start_x
                                                 e.offsetX))))
                                     (and drag_status.column_header_height
                                        (== drag_status.drag_dir 2))
                                     (if drag_status.start_y
                                        (progn
                                           (defvar col_header_size (Math.max 10 (- (+ drag_status.row_initial_height (- e.offsetY drag_status.start_y)) drag_status.row_drag_elem.offsetHeight )))
                                           (set_prop state.defaults
                                              `col_header_height col_header_size)
                                           (set_style [["height" (+ col_header_size "px")]] upper_left_corner)
                                           (set_style [["top" (+ "" (- col_header_size 0) "px") ]]
                                                      drag_status.row_drag_elem))
                                        (progn
                                           (set_prop drag_status
                                              `start_y
                                              e.offsetY)))
                                     (== drag_status.drag_dir 2)
                                     (progn
                                        (if drag_status.start_y
                                           (progn
                                              (defvar row_size (Math.max state.defaults.row_height (- (+ drag_status.row_initial_height (- e.offsetY drag_status.start_y)) drag_status.row_drag_elem.offsetHeight )))
                                              (set_prop drag_status.row_meta
                                                 `height (- row_size drag_status.row_drag_elem.offsetHeight))
                                              (set_style [["top" (+ "" (- row_size 0) "px") ]]
                                                         drag_status.row_drag_elem)
                                              true)
                                           (progn
                                              (set_prop drag_status
                                                 `start_y
                                                 e.offsetY))))))))))
       
       ;; setup the column and row controls as needed after a redraw
       (perform_adornments (fn ()
                              (if ready_to_draw
                                 (let
                                    ((idx 0)
                                     (make_vertical_draggable (fn (elem)
                                                                 (progn
                                                                    (= dragger
                                                                       (span {  `class: "juno-row-header-grabber"
                                                                               `title: ""
                                                                               } ""))
                                                                    (-> elem `appendChild
                                                                       dragger)
                                                                    (attach_event_listener dragger
                                                                       `mousedown
                                                                       (fn (e)
                                                                          (progn
                                                                             (handle_event e)
                                                                             (init_drag e))))
                                                                    (attach_event_listener dragger
                                                                       `mouseup
                                                                       (fn (e)
                                                                          (progn
                                                                             (handle_event e)
                                                                             (complete_drag e)))))))
                                     (dragger nil))
                                    
                                    (when (is_function? options.on_redraw)
                                       (-> options `on_redraw intf))
                                    
                                    (for (elem (-> theader_elem `querySelectorAll "th"))
                                         (when (and (> idx 0)
                                                    (is_element? elem)
                                                    (or (== elem.children.length 0)
                                                        (not (has_class? "juno-col-header-grabber" (last elem.children)))))
                                            (= dragger
                                               (span {  `class: "juno-col-header-grabber"
                                                       `title: ""
                                                       } ""))
                                            (-> elem `appendChild
                                               dragger)
                                            (attach_event_listener dragger
                                               `mousedown
                                               (fn (e)
                                                  (progn
                                                     (handle_event e)
                                                     (init_drag e))))
                                            (attach_event_listener dragger
                                               `mouseup
                                               (fn (e)
                                                  (progn
                                                     (handle_event e)
                                                     (complete_drag e)))))
                                         (inc idx))
                                    
                                    (when (and (is_element? upper_left_corner)
                                               (== upper_left_corner.children.length 0))
                                       (make_vertical_draggable upper_left_corner))
                                    (for (elem (-> tbody_elem `querySelectorAll "th"))
                                         (when (< elem.children.length 1)
                                            (make_vertical_draggable elem))))
                                 ;; can't do it yet since the table has started a draw
                                 (progn
                                    (set_prop state
                                       `adornment_check_required
                                       true)))))
       
       (get_data_for_elem (fn (elem _state)
                             (if (is_element? elem)
                                 (let
                                    ((column (get_attribute elem "column"))
                                     (row (get_attribute elem "row_num"))
                                     (row_id (get_attribute elem "row_id"))
                                     (_state (or _state
                                                 {
                                                   `column: column
                                                   `row: row
                                                   `row_id: row_id
                                                   `table_element: nil
                                                   })))
                                    (if (and (eq nil _state.row)
                                             row)
                                        (set_prop _state
                                           `row row))
                                    (if (and (eq nil _state.column)
                                             column)
                                        (set_prop _state
                                           `column column))
                                    (if (and (eq nil _state.row_id)
                                             row_id)
                                        (set_prop _state
                                           `row_id row_id))
                                    (if (and (eq nil _state.table_element)
                                             (or (== elem.tagName "TD")
                                                 (== elem.tagName "TH")))
                                        (set_prop _state
                                           `table_element elem))
                                    ;(log "get_data_for_elem: _state: " _state column row)
                                    (cond
                                       (and _state.row
                                          _state.column)
                                       (progn
                                          (set_prop _state
                                             `row (parseInt _state.row)
                                             `column (parseInt _state.column))
                                          (set_prop _state
                                             `column_id (prop (get_column_info _state.column) `uuid)
                                             `column_name (prop (get_column_info _state.column) `name)
                                             `data (get_path [ _state.row _state.column ]))
                                          (set_prop _state
                                             `path [ _state.row_id _state.column_id])
                                          _state)
                                       (== elem.tagName "TABLE")
                                       (progn
                                          (when _state.row
                                             (set_prop _state
                                                `row (parseInt _state.row))
                                             (set_prop _state
                                                `path [ _state.row ]
                                                `data (get_path [ _state.row] )))
                                          (when _state.column
                                             (set_prop _state
                                                `column (parseInt _state.column))
                                             (set_prop _state
                                                `path: [ "*" _state.column ]
                                                `column_id (prop (get_column_info _state.column) `uuid)
                                                `column_name (prop (get_column_info _state.column) `name)))
                                          _state)
                                       else
                                       (get_data_for_elem elem.parentElement _state))))))
       ;; DRAWING AND RENDERING FUNCTIONS
       
       (ready_to_draw true)
       
       (shift_top (fn (amount)
                     (when ready_to_draw
                        (= ready_to_draw false)
                        (defvar irregular false)
                        (try
                           (let
                              ((row_elements tbody_elem.children)
                               (row_elem nil)
                               (irregular_thresh (Math.round (* 1.5 state.defaults.row_height)))
                               (row nil))
                              (when (> row_elements.length 0)
                                 (cond
                                    (< amount 0) ;; add a row to top, remove from the bottom
                                    (progn
                                       (destructuring_bind (row_meta row)
                                          (get_data_slice state.viewport.top)
                                          (when (> row_meta.height irregular_thresh)
                                             (= irregular true))
                                          (-> tbody_elem
                                             `insertBefore
                                             (= row_elem (render_row row_meta row))
                                             (first row_elements)))
                                       (when (> (prop (last row_elements) `offsetHeight) irregular_thresh)
                                          (= irregular true))
                                       (-> (last row_elements) `remove))
                                    (> amount 0)
                                    (progn
                                       (destructuring_bind (row_meta row)
                                          (get_data_slice (+ state.viewport.top (- state.viewport.num_rows 1)))
                                          (when (> row_meta.height irregular_thresh)
                                             (= irregular true))
                                          (-> tbody_elem
                                             `append
                                             (= row_elem (render_row row_meta row))))
                                       (when (> (prop (first row_elements) `offsetHeight) irregular_thresh)
                                          (= irregular true))
                                       (-> (first row_elements) `remove))))
                              
                              (calculate_scroll_position)
                              ;(when irregular
                              ;   (log "irregular!"))
                              (= ready_to_draw true))
                           (catch Error (e)
                              (progn
                                 (= ready_to_draw true)
                                 (log_error "shift_top: " e.message))))
                        irregular)))
       (nil_char "∅")
       (nil_display_char nil_char)
       ;; given the row_meta and row, draw a row including the header cell
       (render_cell (function (cell row_meta idx cell_row_data row_style is_active_cell?)
                       (let
                          ((col_meta (get_column_info idx))
                           (cell_meta (prop row_meta.cell_meta col_meta.uuid))
                           (row_column_style_data nil)
                           (row_column_value_data nil)
                           (search_result? (and state.search
                                                (prop state.search.paths row_meta.uuid)
                                                (prop (prop state.search.paths row_meta.uuid)
                                                      col_meta.uuid)))
                           (selected? (cond
                                         (== state.selection_type 0)
                                         false
                                         (== state.selection_type 1)
                                         (is_selected? nil col_meta.uuid)
                                         (== state.selection_type 2)
                                         (is_selected? row_meta.row_number idx))))
                          ;(when (== state.selection_type 2)
                          ;  (log "selected: " row_meta.row_number idx))
                          
                          (when row_style
                             (= row_column_style_data (and row_style.columns
                                                           (prop row_style.columns idx)))
                             (= row_column_value_data (and row_style.values
                                                           (prop row_style.values idx))))
                          (try
                             (td (+ { class: (+ (if col_meta.color_code_data_types
                                                    (+ "juno-type-" (lowercase (sub_type cell)) " ")
                                                    "")
                                                (if (>= col_meta.sorted 0)
                                                    "juno-col-sorted"
                                                    "")
                                                " "
                                                (if is_active_cell?
                                                   "juno-table-active-cell"
                                                   "")
                                                " "
                                                (prop [ "" " al-cen" " al-right" ] col_meta.horizontal_align)
                                                (prop [ "" " al-mid" " al-bot" ] col_meta.vertical_align)
                                                (if selected?
                                                   " selected"
                                                   "")
                                                (if search_result?
                                                   " search-result"
                                                   "")
                                                "") }
                                    { tabindex: 0
                                      column: idx
                                      style: (+ "height: " row_meta.height "px;"
                                                (if row_column_style_data
                                                   row_column_style_data
                                                   "")
                                                (if cell_meta.style
                                                   cell_meta.style
                                                   ""))
                                      })
                                 (cond
                                    (is_function? cell_meta.renderer)
                                    (-> cell_meta `renderer cell)
                                    row_column_value_data
                                    row_column_value_data
                                    (is_date? cell)
                                    (cond
                                       cell_meta.date_format
                                       (-> cell `toLocaleDateString locale
                                          cell_meta.date_format)
                                       (== col_meta.date_format.iso_date_style 1)
                                       (first (split_by "T" (-> cell `toISOString)))
                                       (== col_meta.date_format.iso_date_style 2)
                                       (-> cell `toLocaleDateString locale
                                          col_meta.date_format)
                                       else
                                       (-> cell `toISOString))
                                    (and (is_number? cell)
                                         col_meta.number_formatter)
                                    (progn
                                       (-> col_meta.number_formatter `format cell))
                                    (is_nil? cell)
                                    (or options.nil_display_value
                                       (and options.highlight_nils
                                          (span { `title: "nil" `class: "juno-table-cell-nil" }
                                                nil_display_char))
                                       "")
                                    else
                                    cell))
                             (catch Error (e)
                                (td { `class: "juno-error" } (+ "!ERROR: " e.message)))))))
       (render_error nil)
       (render_row (fn (row_meta row)
                      (let
                         ((idx (- state.viewport.left 1))
                          (active_cell_num (when (and state.active_cell.abs_path
                                                      (== state.active_cell.abs_path.0 row_meta.uuid))
                                              state.active_cell.num_path.1))
                          (cell_row_data (prop state.cell_data row_meta.uuid))
                          (row_style (if row_style_callback
                                         (try 
                                            (-> options `row_style_callback (rest (get_row row_meta.row_number)) row_meta.row_number (- row_meta.row_number state.viewport.top) row_meta)
                                            (catch Error (e)
                                               (progn
                                                  (= render_error e)
                                                  nil)))
                                         nil)))
                         (tr { `row_num: row_meta.row_number `row_id: row_meta.uuid
                               `class: (+ "juno-table-row "
                                          (if (and row_style row_style.class)
                                              row_style.class
                                              "")
                                          (if (is_selected? row_meta.uuid)
                                              " selected"
                                              ""))
                               `style: (+ (or row_style.style "") ";height: " row_meta.height "px;") }
                           (th { row_num: row_meta.row_number class: "juno-table-header" `style: (+ "position: relative; padding: 2px; text-align: center;")} (+ "" row_meta.row_number))
                           (for (cell row)
                                (inc idx)
                                (render_cell cell row_meta idx cell_row_data row_style (== idx active_cell_num)))))))
       
       
       ;; draws everything *inside* the table element, effectively renders the table contents to the viewport
       
       (redraw_full_table
          (fn (is_redraw)
             (when ready_to_draw
                (= ready_to_draw false)
                
                (try
                   (let
                      ((cols (get_columns_for_viewport))
                       (idx (- state.viewport.left 1))
                       (filtered_columns (make_set (each state.filters `column_id)))
                       (row_elem nil)
                       (remaining_cols cols.length)
                       (acc_width 0)
                       (th_style (+ " "
                                    (if (< state.defaults.col_header_height 30)
                                        "white-space: nowrap;"
                                        "")))
                       (num_rows_appended 0)
                       (num_columns_appended 0)
                       (remaining 0)
                       (can_add 0)
                       (col_selected? (if (== state.selection_type 1)
                                          true
                                          false))
                       (filled_container false)
                       (rdata (get_data_slice_for_viewport)))
                      (= nil_display_char
                         (if options.highlight_nils
                             nil_char
                             ""))
                      (= render_error nil)
                      (-> table_elem `replaceChildren)
                      ;; draw headers
                      ;; compute what we can show based
                      (-> table_elem
                         `append
                         (colgroup {}
                                   (col { width: (+ "" state.defaults.row_header_width "px;") }) ;; upper left hand corner block
                                   (for (column cols)
                                        (inc idx)
                                        (dec remaining_cols)
                                        (inc acc_width column.width)
                                        (col (+ { column: idx  } 
                                                (if (> remaining_cols 0) 
                                                    { width: (+ "" column.width "px" ) }
                                                    {}))))))
                      ;(log "columns: " idx acc_width)
                      (= idx (- state.viewport.left 1))
                      (-> table_elem
                         `append
                         (= theader_elem
                            (thead { class: "juno-big-table" }
                                   (tr
                                      (= upper_left_corner (th { style: (+ "position: relative; height: " state.defaults.col_header_height "px;") })) ;; upper left hand corner block
                                      (= column_header_elements
                                         (for (column cols)
                                              (progn
                                                 (inc idx)
                                                 (inc num_columns_appended)
                                                 (th (+ { class: (+ (if column.sorted
                                                                         "juno-col-sorted"
                                                                         "")
                                                                     (if (and col_selected? (is_selected? nil column.uuid))
                                                                         " selected"
                                                                         "")
                                                                     (if (-> filtered_columns `has column.uuid)
                                                                         " juno-col-filtered"
                                                                         ""))
                                                                }
                                                        
                                                        { column: idx title: idx 
                                                          style: th_style 
                                                          scope: "col"  })
                                                     (if column.sorted
                                                        (+ (prop sort_symbols column.sorted) " ")
                                                        "")
                                                     (if column.name
                                                        column.name
                                                        (to_alpha_name idx))
                                                     ))))))))
                         (= header_offset_height theader_elem.offsetHeight)
                         ;(log "columns: width:" acc_width theader_elem.offsetWidth "vp nc:" state.viewport.num_columns "# cols:" cols.length)
                      ;; now draw all the rows of our table
                      ;(= idx (- state.viewport.top 1))
                      (= tbody_elem
                         (tbody { tabindex: 0 
                                  class: (+ "juno-big-table"
                                            (if options.fixed_width
                                               " fixed-width" "")
                                            (if options.stripes
                                               " juno-stripes" "")
                                            (if options.grid
                                               " grid" "")
                                            ) }  ))
                      (-> table_elem
                         `append
                         tbody_elem)
                      
                      (for ((row_meta row) rdata)
                           (-> tbody_elem `append
                              (= row_elem (render_row row_meta row)))
                           (inc num_rows_appended)
                           (when (> (+ tbody_elem.offsetHeight theader_elem.offsetHeight 6) (- tcontainer.offsetHeight theader_elem.offsetHeight))
                              (= filled_container true)
                              (break)))
                      (when (and (not filled_container)
                                 (> state.viewport.top 0))
                         (= remaining (- (- (/ state.display_geometry.height state.render_scale) 60)
                                         (+ tbody_elem.offsetHeight theader_elem.offsetHeight 5)))
                         (= can_add (Math.floor (/ remaining state.defaults.row_height))))
                      (cond
                         (== state.total_rows 0)
                         (-> tbody_elem `appendChild
                            (div { `style: "font-weight: bold; font-size: 1.2em; opacity: 0.8; position: absolute; width: 100%; text-align: center; top: 50px" }
                                 (dtext (or options.no_data_message "No Data"))))
                         (and (> can_add 0)
                               (not is_redraw)
                               (not filled_container))
                          ;; scroll up by can add rows
                          (progn
                             (set_prop state.viewport
                                `top (- state.viewport.top can_add)
                                `num_rows (+ state.viewport.num_rows can_add))
                             (= ready_to_draw true)
                             (redraw_full_table true))
                          else
                          (progn
                             (set_prop state.viewport
                                `num_rows num_rows_appended
                                `proposed false)
                             (calculate_scroll_position)))
                      (set_prop tcontainer
                         `scrollTop 0)
                      (= ready_to_draw true)
                      true)
                   (catch Error (e)
                      (progn
                         (= ready_to_draw true)
                         (log_error "error: redraw_full_table: " e.message e)))))))
       (set_fixed_width (fn (on?)
                           (if on?
                              (progn
                                 (log "adding fixed-width")
                                 (set_prop options
                                    `fixed_width true)
                                 (redraw_full_table))
                              (progn
                                 (remove_prop options `fixed_width)
                                 (redraw_full_table)))))
       (check_focus (fn ()
                       (if (path_in_viewport? state.last_focus)
                               (focus_to (get_element_by_abs_path state.last_focus))
                               (focus_to tbody_elem))))
       (bound_top (function (top)
                     (Math.round (Math.min (Math.max 0 top) (- state.total_rows state.viewport.num_rows)))))
       (bound_left (function (left)
                      (Math.round (Math.min (Math.max 0 left) (- state.total_columns (- state.viewport.num_columns 1))))))
       (set_position (fn (top left)
                        (let
                           ((top (bound_top top))
                            (left (bound_left left))
                            (top_delta (- top state.viewport.top))
                            (top_delta_abs (Math.abs top_delta))
                            (left_delta (- (bound_left left) state.viewport.left))
                            (left_delta_abs (Math.abs left_delta))
                            (irregular false)
                            (current_focus (or (and document.activeElement
                                                    (get_data_for_elem document.activeElement))
                                               nil))
                            (total_delta (+ top_delta_abs left_delta_abs)))
                           (cond 
                              (> top 9999)
                              (set_prop state.defaults
                                 `row_header_width 60)
                              (> top 999)
                              (set_prop state.defaults
                                 `row_header_width 50)
                              else
                              (set_prop state.defaults
                                 `row_header_width 40))
                              
                           (when (and current_focus.row_id current_focus.column_id)
                              (set_prop state
                                 `last_focus
                                 [ current_focus.row_id 
                                   current_focus.column_id ]))
                           (remove_class "juno-table-active-cell" tbody_elem)
                           (= render_error nil)
                           (if (> state.total_rows 0)
                               (progn
                                  (cond
                                     (or (> top_delta_abs row_incremental_draw_threshold)
                                         (> left_delta_abs 0))
                                     (progn
                                        (set_prop state.viewport
                                           `top top
                                           `left left)
                                        (calculate_geometry))
                                     (== top_delta_abs 1)
                                     (progn
                                        (set_prop state.viewport
                                           `top top)
                                        (when (shift_top top_delta)
                                           (calculate_proposed_viewport)
                                           (redraw_full_table)))
                                     (> top_delta 1)
                                     (progn
                                        (for (offset (range top_delta_abs))
                                             (set_prop state.viewport
                                                `top (+ state.viewport.top 1))
                                             (when (shift_top 1)
                                                (= irregular true)))
                                        (calculate_proposed_viewport)
                                        (redraw_full_table))
                                     
                                     (< top_delta -1)
                                     (progn
                                        (for (offset (range top_delta_abs))
                                             (set_prop state.viewport
                                                `top (- state.viewport.top 1))
                                             (when (shift_top -1)
                                                (= irregular true)))
                                        (when irregular
                                           (calculate_proposed_viewport)
                                           (redraw_full_table))))
                                  (when render_error
                                     (log_error "table: row_style_callback error: " render_error.message render_error))
                                  (set_prop tcontainer
                                     `scrollTop 0)
                                  ;(log "set_position: " state.viewport.left state.viewport.num_columns)
                                  (check_focus)))
                           )))
       (rename_column (fn (identifier new_name)
                         (let
                            ((cdata (cond
                                       (is_string? identifier)
                                       (get_column_info_by_id identifier)
                                       (is_number? identifier)
                                       (get_column_info identifier)))
                             (old_name nil))
                            (cond
                               (or (not (is_string? new_name))
                                   (blank? new_name))
                               (throw Error "rename_column: invalid column name provided")
                               (is_object? cdata)
                               (progn
                                  (= old_name cdata.name)
                                  (set_prop cdata
                                     `name
                                     new_name)
                                  (calculate_proposed_viewport)
                                  (redraw_full_table)
                                  (publish_event {
                                                   `type: "rename_column"
                                                   `from: old_name
                                                   `to: cdata.name
                                                   `column_id: cdata.uuid
                                                   `column_num: (prop state.column_id_map cdata.uuid)
                                                   })
                                  cdata)
                               else
                               (throw Error "rename_column: invalid or missing column data element")))))
       (set_column_data_type (fn (identifier data_type)
                                (let
                                   ((cdata (cond
                                              (is_string? identifier)
                                              (get_column_info_by_id identifier)
                                              (is_number? identifier)
                                              (get_column_info identifier)))
                                    (cnum nil)
                                    (old_type nil))
                                   (log "set_column_data_type: to: " data_type "for: " cdata)
                                   (cond
                                      (eq nil cdata)
                                      (throw TypeError "set_column_data_type: invalid identifier - column not found")
                                      (not (is_number? data_type))
                                      (throw TypeError "set_column_data_type: invalid data_type: must be number from 0 to 2")
                                      (is_object? cdata)
                                      (progn
                                         (= cnum (get_column_number_by_id cdata.uuid))
                                         (if (not (is_number? cnum))
                                             (throw Error "set_column_data_type: cannot find column number associated with column identifier"))
                                         (= old_type cdata.data_type)
                                         (set_prop cdata
                                            `data_type data_type)
                                         (alert_on_error (dtext "Set Column Type Operation Failed")
                                                         (with_all_rows (fn (meta row_data)
                                                                           (progn
                                                                              (set_value_at_position meta.uuid cdata.uuid (prop row_data cnum) SUPPRESS_EVENT))))
                                                         (defglobal *dd* (all_data_rows))
                                                         (publish_event {
                                                                          `type: "set_column_data_type"
                                                                          `from: old_type
                                                                          `to: data_type
                                                                          `column_id: cdata.uuid
                                                                          })
                                                         (redraw_full_table)
                                                         (for (elem (get_column_elements_by_uuid cdata.uuid))
                                                              (highlight_element elem)))
                                         
                                         )))))
       (mouse_pressed false)
       (all_data_rows (fn ()
                         (for (row_id state.original_sort_order)
                              (get_row_by_id row_id))))
       (rows_for_ids (fn (ids)
                        (cond
                           (is_set? ids)
                           (reduce (id (to_array ids))
                              (get_row_by_id id))
                           (is_array? ids)
                           (reduce (id ids)
                                (get_row_by_id id)))))
       (with_row_ids (fn (ids map_fn)
                        (progn
                           (declare (function map_fn))
                           (defvar row_data nil)
                           (if (is_function? map_fn)
                               (try
                                  (progn
                                     (= row_data (rows_for_ids ids))
                                     (for ((meta `& row_data) (rows_for_ids ids))
                                          (map_fn meta row_data)))
                                  (catch Error (e)
                                     (progn
                                        (log_error "with_row_ids: error on operation: " e.message e)
                                        (throw e))))
                               (progn
                                  (log_error "with_row_ids: argument provided for map_fn isn't a function: " (sub_type map_fn))
                                  [])))))
                             
       (with_all_rows (fn (map_fn)
                         (let
                            ((reversion_buffer []))
                            (declare (function map_fn))
                            (if (is_function? map_fn)
                                (try
                                   (progn
                                      (for ((meta `& row_data) (all_data_rows))
                                           (push reversion_buffer
                                              {
                                                `row_data: row_data
                                                `meta: meta
                                                })
                                           (map_fn meta row_data)))
                                   (catch Error (e)
                                      (progn
                                         (log_error "with_all_rows: error on operation: " e.message e)
                                         (log_error "with_all_rows: incomplete")
                                         (for (obj reversion_buffer)
                                              (set_value [(get_row_by_id obj.meta.uuid)] obj.row_data true)))))
                                (throw TypeError "with_all_rows: non function provided for the map function")))))
       ;; SORT FUNCTIONS ----------
       
       (sort_rows (fn (row_data column_num dir)
                     (sort working_row_data
                                        { key: [  column_num ]
                                          reversed: (== dir 1)
                                        })))
       (reapply_sort (fn ()
                        (try
                           (let
                              ((sorted_columns (get_columns_with_property "sorted")))
                              (= ready_to_draw false)
                              (if (> (length sorted_columns) 0)
                                 (progn
                                   (= working_row_data (sort_rows working_row_data (+ 1 (get_column_number_by_id sorted_columns.0.uuid)) sorted_columns.0.sorted))
                                 ;(log "reapply_sort: working_row_data: " working_row_data)
                                   (compute_sort_map))
                                 (compute_sort_map)) ;; just recompute the sort map as it may have been filtered
                              (= ready_to_draw true))
                           (catch Error (e)
                              (progn
                                 (= ready_to_draw true))))))
                     
       (sort_by (fn (column_id dir)
                   (let
                      ((column_num (aif (get_column_number_by_id column_id)
                                        (+ it 1)))
                       (column_meta (when (is_number? column_num)
                                       (get_column_info_by_id column_id)))
                       (sorted_columns (get_columns_with_property "sorted"))
                       (sorted_columns_cloned (clone sorted_columns))
                       (previous_sort_map state.sort_map)
                       (sel_type 0)
                       (new_sort nil)
                       (dir_process (if (== dir 0)
                                        (function (val)
                                           val)
                                        reverse))
                       (old_data working_row_data))
                      (declare (function dir_process))
                      ;; clear selection unless columns
                      (unless (== state.selection_type 1)
                         (process_selection "clear" nil true))
                      ;(log dir "sorting by: " column_num column_id column_meta sorted_columns)
                      (= new_sort (sort_rows working_row_data column_num dir))
                      (try
                         (progn
                            (= ready_to_draw false)
                            (= working_row_data new_sort)
                            (for (col sorted_columns)
                                 (delete_prop col
                                    `sorted))
                            (set_prop column_meta
                               `sorted dir)
                            (compute_sort_map)
                            (publish_event {
                                             type: "sort"
                                             column_id: column_id
                                             dir: column_meta.sorted
                                             from: previous_sort_map
                                             prior_sorted_columns: sorted_columns_cloned
                                             }))
                         (catch Error (e)
                            (progn
                               (= working_row_data old_data)
                               (set_prop state
                                  `sort_map previous_sort_map)
                               (notify (+ "Error on sort: " e.message))
                               (log_error "table: sort: " e))))
                      (= ready_to_draw true)
                      (calculate_proposed_viewport)
                      (redraw_full_table))))
       
       ;; SEARCH FUNCTIONS
       (reset_search (fn ()
                        (progn
                           (remove_search_filter true)
                           (set_prop state
                              `search nil)
                           (calculate_proposed_viewport)
                           (redraw_full_table)
                           (publish_event { `type: "reset_search" })
                           )))
       (search_row_data nil)
       (search (fn (search_opts)
                  (let
                     ((search_text search_opts.search_text)
                      (results {
                                 paths:{}
                                 order:[]
                                 index: 0
                                 search_text: search_text
                                 })
                      (row_meta nil)
                      (col_meta nil)
                      (cells nil)
                      (idx 0)
                      (result nil)
                      (search_text_as_num (parseFloat search_text))
                      (is_valid_number (not (isNaN search_text_as_num)))
                      (col_meta nil)
                      (has_callout (is_function? search_opts.progress))
                      (store_result (fn (row_meta col_num)
                                       (progn
                                          ;(log "store_result: found: " row_meta.uuid col_num)
                                          (= col_meta (get_column_info_by_id (get_column_id_by_number col_num)))
                                          (make_path [ row_meta.uuid col_meta.uuid ] results.paths true)
                                          (push results.order [ row_meta.uuid col_meta.uuid]))))
                      (is_regex search_opts.regex)
                      (is_case_sensitive search_opts.case_sensitive)
                      (filter_mode search_opts.filter_results)
                      (regex (if is_regex
                                 (new RegExp search_text `g)
                                 nil)))
                     (if (and (not is_case_sensitive)
                              (not regex))
                        (= search_text (lowercase search_text)))
                     (if (not (is_array? search_row_data))
                         (progn 
                            (= search_row_data working_row_data)
                            (alert_box "Invalid search_row_data: check it")))
                     (log "search: " search_text  "# rows: " working_row_data.length)
                     (for (row_data search_row_data) 
                          (= row_meta (first row_data))
                          (= idx -1)
                          (when (and has_callout
                                     (== 0 (Math.mod idx 1000)))
                             (-> search_opts `progress (/ idx working_row_data.length)))
                          (for (cell (rest row_data))
                               (inc idx)
                               (cond
                                  (is_string? cell)
                                  (cond
                                     regex
                                     (progn
                                        (aif (scan_str regex cell)
                                             (when (> it.length 0)
                                                (store_result row_meta idx))))
                                     is_case_sensitive
                                     (if (contains? search_text cell)
                                         (store_result row_meta idx))
                                     (contains? search_text (lowercase cell))
                                     (store_result row_meta idx))
                                  (is_number? cell)
                                  (cond
                                     (and is_valid_number
                                        (not regex))
                                     (when (or (== cell search_text_as_num)
                                               (contains? search_text (+ "" cell)))
                                        (store_result row_meta idx))
                                     regex
                                     (if (> (length (scan_str regex (+ "" cell))) 0)
                                         (store_result row_meta idx)))
                                  (is_date? cell)
                                  (cond
                                     regex 
                                     (if (> (length (scan_str regex (-> cell `toISOString))) 0)
                                         (store_result row_meta idx))
                                     (contains? search_text (-> cell `toISOString))
                                     (store_result row_meta idx)
                                     
                                     ))))
                     (log results)
                     (set_prop state
                        `search results)
                     (calculate_proposed_viewport)
                     (if filter_mode
                        (show_only_search_rows))
                     (setTimeout (fn ()
                                    (progn
                                       (redraw_full_table)
                                       (move_to_search_result 0)))
                                 100)
                     results)))
       (remove_search_filter (fn (suppress_event_publish)
                                (let
                                   ((data_set nil)
                                    (new_sort_map {})
                                    (current_left state.viewport.left)
                                    (current_num_cols state.viewport.num_columns)
                                    (idx 0))
                                   (log "remove_search_filter: non_filtered_rows: " state.search.non_filtered_rows)
                                (when state.search.non_filtered_rows
                                   (= working_row_data (rows_for_ids state.search.non_filtered_rows))
                                   (for (row_id state.search.non_filtered_rows)
                                        (set_prop new_sort_map
                                           row_id idx)
                                        (inc idx))
                                   (set_prop state
                                      `sort_map
                                      new_sort_map)
                                   (set_prop state
                                      `total_rows
                                      working_row_data.length)
                                   (unless suppress_event_publish
                                      (publish_event {
                                                       `type: "reset_search_filter"
                                                       }))
                                   (reapply_sort)
                                   (set_position 0 current_left)
                                   (set_prop state.viewport
                                      `left current_left
                                      `num_columns current_num_cols)
                                   (redraw_full_table)
                                   (log "remove_search_filter: state: <- " state)
                                   (calculate_scroll_position true)
                                   (resize)))))
                                   
                                   
       (show_only_search_rows (fn (suppress_event_publish)
                          (if state.search
                             (let
                                ((data_set nil)
                                 (vp state.viewport)
                                 (idx 0)
                                 (new_sort_map {})
                                 (current_left vp.left)
                                 (current_num_cols vp.num_columns))
                                (= data_set (rows_for_ids (keys state.search.paths)))
                                (when (is_array? data_set)
                                   (unless state.search.non_filtered_rows
                                      (set_prop state.search
                                         `non_filtered_rows (each (each working_row_data first) `uuid)))
                                   (for (row_id state.search.non_filtered_rows)
                                        (set_prop new_sort_map
                                           row_id idx)
                                        (inc idx))
                                   (log "state.search: " state.search)
                                   (= working_row_data data_set)
                                   (set_prop state
                                      `total_rows
                                      working_row_data.length)
                                   (set_prop state
                                      `sort_map
                                      new_sort_map)
                                   (reset_viewport)
                                   (set_position 0 current_left)
                                   (set_prop state.viewport
                                      `left current_left
                                      `num_columns current_num_cols)
                                   (reapply_sort)
                                   (redraw_full_table)
                                   (calculate_scroll_position true)
                                   (= sel_min_max {
                                                    `from: [99999999999 99999999999]
                                                    `to: [-1 -1]
                                                    })
                                   (build_selection_lookup)
                                   (unless suppress_event_publish
                                      (publish_event {
                                                       `type: "show_only_search_rows"
                                                       }))
                                   (set_prop state `adornment_check_required true))))))
       (move_to_search_result (fn (dir)
                                 (let
                                    ((rnum 0)
                                     (cnum 0)
                                     (offset_rnum 0)
                                     (offset_cnum 0)
                                     (pos_rnum 0)
                                     (pos_cnum 0)
                                     (elem nil)
                                     (vp state.viewport))
                                 (when (and state.search
                                            (> state.search.order.length 0))
                                    (cond
                                       (== dir 1)
                                       (set_prop state.search
                                          `index (% (+ 1 state.search.index) state.search.order.length))
                                       (== dir -1)
                                       (if (== state.search.index 0)
                                           (set_prop state.search `index
                                              (- state.search.order.length 1))
                                           (set_prop state.search `index
                                              (- state.search.index 1))))
                                    (defvar pos (prop state.search.order state.search.index))
                                    
                                    (= rnum (get_row_number_by_id pos.0))
                                    (= cnum (get_column_number_by_id pos.1))
                                    (= offset_rnum (Math.max 1 (parseInt (/ vp.num_rows 3))))
                                    (= offset_cnum (Math.max 1 (parseInt (/ vp.num_columns 3))))
                                    ;(log "Current VP: " vp.top vp.left vp.num_rows vp.num_columns vp)
                                    (if (isNaN rnum)
                                        (progn
                                           (log_error "table: invalid row position: " rnum)
                                           (alert_box "Invalid row num"))
                                        (progn
                                           (= pos_rnum (Math.max 0 (- rnum offset_rnum)))))
                                    (if (isNaN cnum)
                                        (progn
                                           (log_error "table: invalid col position: " cnum)
                                           (alert_box "Invalid col num"))
                                        (progn
                                           (= pos_cnum (Math.max 0 (- cnum offset_cnum)))))
                                    
                                    (when (not (get_element_by_uuid pos.0 pos.1))
                                   
                                       ;(log "move_to_search_result: " state.search.index " [" offset_rnum "] " rnum "->" pos_rnum cnum "->" pos_cnum)
                                       (set_position pos_rnum pos_cnum))
                                    (publish_event { 
                                                     `type: "move_to_search_result"
                                                     `path: pos
                                                     })
                                    (set_active_cell [ pos.0 pos.1] )))))
                                          
       ;; SELECTION FUNCTIONS
       (set_active_cell (fn (path)
                           (progn
                              (clear_active_cell)
                              (set_prop state `active_cell
                                 { abs_path: path
                                   num_path: [ (get_row_number_by_id path.0) (get_column_number_by_id path.1) ]
                                   })
                              (aif (get_element_by_abs_path path)
                                   (progn
                                      (add_class "juno-table-active-cell" it)
                                      (setTimeout (fn () 
                                                     (focus_to (get_element_by_abs_path (get_active_cell)))) 2)))
                              (publish_event {
                                               `type: "set_active_cell"
                                               `path: path
                                               })
                              )))
       (clear_active_cell (fn ()
                             (progn
                                ;(log "clearing active_cell")
                                (aif (get_active_cell)
                                     (remove_class "juno-table-active-cell" (get_element_by_abs_path it)))
                                (set_prop state `active_cell nil)
                                (publish_event {
                                               `type: "clear_active_cell"
                                               }))))
       
       (get_active_cell (function (num?)
                           (if num?
                              (or state.active_cell.num_path nil)
                              (or state.active_cell.abs_path nil))))
       
       (add_selection (fn (path interpolate?)
                         (let
                            ((sel state.selection)
                             (not_blank_string? (function (val)
                                                   (and (is_string? val)
                                                        (not (blank? val)))))
                             (ptype_map { row: 0 col: 1 cell: 2 })
                             (ptype (if (is_array? path)
                                        (cond
                                           (and (== path.0 `*)
                                                (not_blank_string? path.1))
                                           "col"
                                           (and (== path.length 1)
                                                (== path.0 "*"))
                                           "all"
                                           (and (== path.length 1)
                                                (not_blank_string? path.0))
                                           "row"
                                           (and (not_blank_string? path.0)
                                                (not_blank_string? path.1))
                                           "cell"
                                           else
                                           (throw RangeError (+ "invalid path for selection: " (as_lisp path))))))
                             (min_max_values (if interpolate?
                                                 (progn
                                                    (let
                                                       ((tmp (get_selected_range))) 
                                                       (when tmp
                                                          (if (== ptype "cell")
                                                              [tmp.from tmp.to]
                                                              [(first tmp) (last tmp)]))))))
                             (inserted_id nil)
                             (active_cell_numeric (get_active_cell true))
                             (idx_number (cond
                                            (== ptype "col")
                                            (get_column_number_by_id (last path))
                                            (== ptype "row")
                                            (get_row_number_by_id (last path))
                                            else
                                            nil))
                             (grow_from 0)
                             (grow_count 0))
                            
                            (if (== state.selection.length 0)
                                (= interpolate? false))
                               
                            (when (not (== (prop ptype_map ptype) state.selection_type))
                               (clear_selection))
                            (when (and interpolate? min_max_values)
                               (= grow_from (cond
                                               (== ptype "row")
                                               (first active_cell_numeric)
                                               (== ptype "col")
                                               (second active_cell_numeric)))
                               (= grow_count (- idx_number grow_from)))
                            ;(log "add start: " interpolate? "ptype: " ptype path)
                            ;(log "selection: " sel)
                            ;(log "grow_from: " grow_from "grow_count:" grow_count "idx_number: " idx_number)
                            ;; ensure we are adding to the correct selection type
                            (cond
                               ;; adding to an existing selection or new selection if cell
                               ;; otherwise if a cell clear it
                               (== ptype "all")
                               (progn
                                  (set_active_cell [ (get_row_id_for_row_number 0) (get_column_id_by_number 0)])
                                  (set_prop sel `length 0)
                                  (push sel path))
                               ;; cell ------
                               (and (== ptype "cell")
                                    (is_array? sel.0)
                                    (== sel.0.length 2)
                                    (not (== sel.0.0 "*")))
                               (progn
                                  (cond
                                     (or (and (== sel.length 1)
                                              (not (and (== sel.0.0 path.0)
                                                        (== sel.0.1 path.1))))
                                         (== sel.length 0))
                                     (push sel path)
                                     (and interpolate?
                                        (not (and (== sel.0.0 path.0)
                                                  (== sel.0.1 path.1)
                                                  (== sel.1.0 path.0)
                                                  (== sel.1.1 path.1))))
                                     (progn
                                        (defvar path_idx
                                           [(get_row_number_by_id path.0)
                                            (get_column_number_by_id path.1)])
                                        (defvar active_cell (get_active_cell))
                                        (= sel_min_max {
                                                         `from: [99999999999 99999999999]
                                                         `to: [-1 -1]
                                                         })
                                        (set_prop state.selection
                                           `length 0)
                                        (when active_cell
                                           (push state.selection
                                              active_cell))
                                        (push state.selection
                                           path))))
                               ;; it's a cell but we have something of a different type selected (row or column)
                               ;; clear out the old selection if that is the case start a new selection
                               (== ptype "cell")
                               (progn
                                  ;; clear existing array
                                  (set_prop state
                                     `selection
                                     [])
                                  (= sel state.selection)
                                  (set_active_cell path)
                                  ;(log "add_selection: [ row col ]: " (get_row_number_by_id path.0) (get_column_number_by_id path.1))
                                  (push sel path))
                               ;; col -----
                               (and (== ptype "col")
                                    interpolate?
                                    (is_array? sel.0)
                                    (== sel.0.length 2)
                                    (== sel.0.0 "*"))
                               (progn
                                  (when (and (> sel.length 0)
                                             (is_array? sel.0)
                                             (not_blank_string? sel.0.1)
                                             (not (contains? path.1 (each sel `1))))
                                     (set_prop sel `length 0)
                                     (for (idx (if (> grow_count 0)
                                                   (range grow_from (+ grow_from grow_count))
                                                   (range_inc (+ grow_from grow_count) grow_from)))
                                          (= inserted_id (get_column_id_by_number idx))
                                          (when (not (contains? inserted_id (each sel `1)))
                                             (push sel [ `* inserted_id ] )))
                                     (when (not (contains? path.1 (each sel `1)))
                                        (push sel path))))
                               (== ptype "col")
                               (progn
                                  ;(set_prop sel `length 0)
                                  (clear_active_cell)
                                  (set_active_cell [ (get_row_id_for_row_number 0) path.1])
                                  (push sel path))
                               
                               ;; row --------------
                               (and (== ptype "row")
                                    interpolate?
                                    (and (is_array? sel.0)
                                         (== sel.0.length 1)))
                               (progn
                                  (set_prop sel `length 0)
                                  (when (not (contains? path.0 (each sel `0)))
                                     (for (idx (if (> grow_count 0)
                                                   (range grow_from (+ grow_from grow_count))
                                                   (range_inc (+ grow_from grow_count) grow_from)))
                                          (= inserted_id (get_row_id_for_row_number idx))
                                          (when (not (contains? inserted_id (each sel `0)))
                                             (push sel [ inserted_id ] )))
                                     (push sel path)))
                               
                               (== ptype "row")
                               (progn
                                  ;(set_prop sel `length 0)
                                  (clear_active_cell)
                                  (set_active_cell [ path.0 (get_column_id_by_number 0)])
                                  (push sel path))
                               else
                               (progn
                                  (log "fall through: " (as_lisp path))))
                            
                            (set_prop state `selection_type
                               (prop ptype_map ptype))
                            ;(log "add_selection: <- " (clone state.selection))
                            ptype)))
       (clear_selection (function ()
                           (progn
                              (set_prop state.selection
                                 `length 0)
                              (= sel_min_max {
                                               `from: [99999999999 99999999999]
                                               `to: [-1 -1]
                                               })
                              (set_prop state `selection_type nil)
                              (set_prop state `selection_contiguous? false)
                              (clear_active_cell)
                              true)))
       (remove_selection (function (target_path)
                            (let
                               ((sel state.selection)
                                (idx -1)
                                (found_idx nil))
                               (unless (is_array? target_path)
                                  (throw TypeError (+ "remove_selection: invalid target_path, must be an array: " (sub_type target_path))))
                               (for (path sel)
                                    (inc idx)
                                    (cond ;; row
                                       (and (is_array? path)
                                            (== path.length 1)
                                            (== target_path.length 1)
                                            (== path.0 target_path.0))
                                       (progn
                                          (= found_idx idx)
                                          (break))
                                       ;; col
                                       (and (is_array? path)
                                            (== path.length 2)
                                            (== path.0 "*")
                                            (== target_path.0 "*")
                                            (== path.1 target_path.1))
                                       (progn
                                          (= found_idx idx)
                                          (break))
                                       (and (is_array? path)
                                            (== path.length 2)
                                            (== path.0 target_path.0)
                                            (== path.1 target_path.1))
                                       (progn
                                          (= found_idx idx)
                                          (break))))
                               (when found_idx
                                  (-> sel `splice found_idx 1))
                               sel)))
       (select_all_rows (fn ()
                           (progn
                              (clear_selection)
                              (set_prop state `selection_type 0)
                              (with_all_rows (fn (meta row_data)
                                                (push state.selection [ meta.uuid ] )))
                              (set_active_cell [(get_row_id_for_row_number 0)
                                                (get_column_id_by_number 0)])
                              (build_selection_lookup)
                              (set_prop state `selection_contiguous? true)
                              (redraw_full_table))))
       
       (sel_min_max {
                      `from: [99999999999 99999999999]
                      `to: [-1 -1]
                      })
       (is_selected? (function ()
                        false))
       (in_selection? (function (cell_data)
                         (cond
                            (and cell_data.column_id cell_data.row_id cell_data.table_element)
                            (has_class? "selected" cell_data.table_element)
                            (and (eq nil cell_data.column_id)
                                 (not (blank? cell_data.row_id)))
                            (is_selected? cell_data.row_id)
                            (and (eq nil cell_data.row_id)
                                 (not (blank? cell_data.column_id)))
                            (is_selected? nil cell_data.column_id))))
       (is_selection_contiguous? (fn ()
                                    (let
                                       ((ordered nil)
                                        (contiguous? true)
                                        (last_idx nil))
                                       (cond
                                          (== state.selection.length 0)
                                          false
                                          (== state.selection_type 0) ;; rows
                                          (progn
                                             (for (idx (sort (for ((row_id) state.selection)
                                                                  (get_row_number_by_id row_id))))
                                                  (when (and (is_number? last_idx)
                                                             (> (- idx last_idx) 1))
                                                     (= contiguous? false)
                                                     (break))
                                                  (= last_idx idx))
                                             contiguous?)
                                          (== state.selection_type 1) ;; columns
                                          (progn
                                             (for (idx (sort (for ((ignore col_id) state.selection)
                                                                  (get_column_number_by_id col_id))))
                                                  (when (and (is_number? last_idx)
                                                             (> (- idx last_idx) 1))
                                                     (= contiguous? false)
                                                     (break))
                                                  (= last_idx idx))
                                             contiguous?)
                                          else
                                          true))))
                                       
       (get_selected (fn (as_range?)
                        (progn
                           ;(log "get_selected: start: " as_range? state.selection_type)
                           (cond
                              (== state.selection_type 0)
                              (progn
                                 (defvar ordered_row_nums
                                    (sort
                                       (for ((row_id) state.selection)
                                            (get_row_number_by_id row_id))))
                                 (if as_range?
                                    ordered_row_nums
                                    (for (row_num ordered_row_nums)
                                         (rest (get_row row_num)))))
                              (== state.selection_type 1)
                              (progn
                                 (defvar ordered_columns
                                    (sort (for ((discard column_id) state.selection)
                                               (+ 1 (get_column_number_by_id column_id)))))
                                 (if as_range?
                                    ordered_columns
                                    (for (row working_row_data)
                                         (progn
                                            (for (col_num ordered_columns)
                                                 (prop row col_num))))))
                              (== state.selection_type 2)
                              (progn
                                 (if as_range?
                                    (clone sel_min_max)
                                    (for (row_num (range_inc sel_min_max.from.0 sel_min_max.to.0))
                                         (defvar row (rest (get_row row_num)))
                                         (for (col_num (range_inc sel_min_max.from.1 sel_min_max.to.1))
                                              (prop row col_num)))))
                              else
                              []))))
       (get_selected_range (fn ()
                              (get_selected true)))
       (build_selection_lookup (fn ()
                                  (let
                                     ((row_num nil)
                                      (col_num nil)
                                      (lookup nil)
                                      (min_max sel_min_max))
                                     (cond
                                        (== state.selection.length 0)
                                        (= is_selected?
                                           (function ()
                                              false))
                                        (== state.selection_type 2)
                                        (progn
                                           (for ((row_id column_id) state.selection)
                                                (set_prop min_max
                                                   `from [(Math.min min_max.from.0 (get_row_number_by_id row_id))
                                                          (Math.min min_max.from.1 (get_column_number_by_id column_id))]
                                                   `to [(Math.max min_max.to.0 (get_row_number_by_id row_id))
                                                        (Math.max min_max.to.1 (get_column_number_by_id column_id))]))
                                           ;(log "sel_min_max: " sel_min_max min_max)
                                           (= is_selected?  ;; in_selection?
                                              (function (row_num column_num)
                                                 (and (>= row_num sel_min_max.from.0)
                                                      (<= row_num sel_min_max.to.0)
                                                      (>= column_num sel_min_max.from.1)
                                                      (<= column_num sel_min_max.to.1)))))
                                        (== state.selection_type 0)
                                        (progn
                                           (= lookup (new Set))
                                           (for ((row_id) state.selection)
                                                (-> lookup `add row_id))
                                           (= is_selected?  ;; in_selection?
                                              (function (row_id)
                                                 (progn
                                                    (-> lookup `has row_id)))))
                                        (== state.selection_type 1)
                                        (progn
                                           (= lookup (new Set))
                                           (for ((row_id column_id) state.selection)
                                                (-> lookup `add column_id))
                                           (= is_selected?  ;; in_selection?
                                              (function (ignored column_id)
                                                 (progn
                                                    (-> lookup `has column_id)))))))))
       
       (process_selection (fn (command path suppress_redraw? interpolate?)
                             (progn
                                (cond
                                   (== command "clear")
                                   (clear_selection)
                                   (== command "remove")
                                   (remove_selection path)
                                   (== command "add")
                                   (add_selection path interpolate?)
                                   else
                                   (throw "invalid selection command"))
                               ; 
                                (build_selection_lookup)
                                (set_prop state 
                                   `selection_contiguous?
                                   (is_selection_contiguous?))
                                (unless suppress_redraw?
                                   (redraw_full_table))
                                (when path
                                   (aif (get_element_by_abs_path path)
                                        (focus_to it)))
                                )))
       
       (table_event (fn (e type)
                       (let
                            ((cell_data (get_data_for_elem 
                                           e.srcElement))
                             (event (+ (or cell_data {})
                                       {
                                         type: type
                                         all_cells: (== e.srcElement upper_left_corner)
                                         element: (if (== type "keydown")
                                                      (get_element_by_abs_path (get_active_cell))
                                                      e.srcElement)
                                         browser_event: e
                                         in_selection?: (in_selection? cell_data)
                                         key_code: e.keyCode
                                         })))
                            (when (and event.row_id event.column_id)
                               (set_prop state
                                  `last_focus
                                  [event.row_id event.column_id]))
                            ;(log "table_event: " type e.srcElement.tagName)
                            ;(when (or e.shiftKey e.metaKey e.altKey)
                             ;  (handle_event e))
                            (when (or event.row_id event.column_id event.all_cells)
                               (publish_event event)))))
       
       (handle_context_menu (fn (e)
                               (let
                                  ((cell_data (get_data_for_elem e.srcElement))
                                   (menu_elem nil)
                                   (event (+ (or cell_data {})
                                             {
                                               `type: "contextmenu"
                                               `element: e.srcElement
                                               })))
                                  (set_prop event
                                     `browser_event
                                     e)
                                  (handle_event e)
                                  ;(log "handle_context_menu: column_num: " (get_column_number_by_id cell_data.column_id))
                                  (try
                                     (progn
                                        (if (is_function? options.on_context_menu)
                                            (= menu_elem
                                               (aif (-> options `on_context_menu event intf)
                                                    (if (is_element? it)
                                                        it
                                                        (make_menu e.srcElement
                                                                   [["Invalid Result"
                                                                     (fn (e)
                                                                        (alert_box "Error from on_context_menu"
                                                                                   e.message))]]))))
                                            (= menu_elem
                                               (cond
                                                  ;; column header click
                                                  (and (not options.read_only)
                                                       (blank? event.row_id)
                                                       event.column_id)
                                                  (make_menu e.srcElement
                                                             [[(dtext "Sort Ascending")
                                                               (fn (menu_click_event)
                                                                  (sort_by event.column_id 0))]
                                                              [(dtext "Sort Descending")
                                                               (fn (menu_click_event)
                                                                  (sort_by event.column_id 1))]
                                                              [(dtext "Rename Column")
                                                               (fn (menu_click_event)
                                                                  (aif (request_user_input (+ (dtext "Rename Column") " " event.column_name)
                                                                                           "string"
                                                                                           {
                                                                                             `validator: (fn (x)
                                                                                                            (if (< x.length 2)
                                                                                                                false
                                                                                                                x))
                                                                                             })
                                                                       (rename_column event.column_id it)))]
                                                              
                                                              [(dtext "Set Column Type")
                                                               (fn (menu_click_event)
                                                                  (aif (request_user_choice (+ (dtext "Select the data type for") " " event.column_name)
                                                                                            (for ((tname val) (pairs data_types))
                                                                                                 [(from_key tname) val])
                                                                                            {
                                                                                              `default_value: (progn
                                                                                                                 (log "dt: " (prop (get_column_info_by_id event.column_id) `data_type))
                                                                                                                 (prop (get_column_info_by_id event.column_id) `data_type))
                                                                                              })
                                                                       (progn
                                                                          (log "selected: " it)
                                                                          (set_column_data_type event.column_id (parseInt it)))))]]
                                                             {
                                                               `min_width: 200
                                                               }
                                                             ))))
                                        (when (or event.row_id event.column_id)
                                           (publish_event event)))
                                     (catch Error (e)
                                        (log_error "ctxmenu: " e.message e))))))
       (destroy_self (fn ()
                        (progn
                           (clearInterval table_interval)
                           (when geometry_view_win
                              (-> geometry_view_win `close))
                           (setTimeout (fn ()
                                          (progn
                                             (log "table_view: destroy")
                                             (publish_event
                                                {
                                                  `type: "table_complete"
                                                  `data: (as_lisp (-> intf `options))
                                                  })
                                             (= alive false)
                                             (= state nil)
                                             (= intf nil)
                                             ))
                                       0))))
       (set_scroll_position (fn ()
                               (progn
                                  (log "set_scroll_position: # rows: " state.total_rows)
                                  (set_position (Math.round (* state.total_rows (/ scroll_container.scrollTop scrollable_elem.offsetHeight)))
                                                (Math.round (* state.total_columns (/ scroll_container.scrollLeft scrollable_elem.offsetWidth)))
                                                ))))
       (resize (fn ()
                  (progn
                     (set_style [["width" (+ state.display_geometry.width "px") ]
                                 ["height" (+ state.display_geometry.height "px") ]]
                                view)
                     (calculate_geometry)
                     (= resize_timer nil)))))
                   
       ;; end let allocations
       
       
       ;; first initialize the data
       ;; build the principle table element when a geometry calculation occurs
       (set rows)
       
       (when options.show_geometry_view
          (show_geometry_view true))
       (= resize_observer (new ResizeObserver (fn (elems)
                                                 (resize))))
       
       (-> container_element
          `replaceChildren
          view)
       (when (is_element? container_element)
          (-> resize_observer `observe container_element))
       
       
       (attach_event_listener tcontainer
          `wheel
          (fn (e)
             (progn
                (set_prop scroll_container
                   `scrollTop
                   (+ scroll_container.scrollTop e.deltaY)
                   `scrollLeft
                   (+ scroll_container.scrollLeft e.deltaX))
                (set_position (Math.round (* state.total_rows (/ scroll_container.scrollTop scrollable_elem.offsetHeight)))
                              state.viewport.left))))
       
       (attach_event_listener scroll_container
          `scroll
          (fn (e)
             (progn
                (set_position (Math.round (* state.total_rows (/ e.srcElement.scrollTop scrollable_elem.offsetHeight)))
                              (Math.round (* state.total_columns (/ e.srcElement.scrollLeft scrollable_elem.offsetWidth)))
                              ))))
       
       (attach_event_listener view
          `mousedown
          (fn (e)
             (progn
                (= mouse_pressed true))))
       (attach_event_listener view
          `mouseup
          (fn (e)
             (progn
                (= mouse_pressed false)
                (calculate_scroll_position))))
       
       (attach_event_listener view_overlay
          `mouseup
          (fn (e)
             (progn
                (handle_event e)
                
                (complete_drag))))
       (attach_event_listener view_overlay
          `mousemove
          (fn (e)
             (progn
                (handle_event e)
                (when drag_status
                   (perform_drag e)))))
       
       
       (attach_event_listener table_elem
          `dblclick
          (fn (e)
             (let
                ((cell_data (get_data_for_elem e.srcElement))
                 (event (+ (or cell_data {})
                           {
                             type: "dblclick"
                             element: e.srcElement
                             browser_event: e
                             })))
                (handle_event e)
                (when (or event.row_id event.column_id)
                   (publish_event event)))))
       
                
       (attach_event_listener view
          `keydown
          (function (e)
             (if (== e.keyCode 9)
                 (handle_event e))))
       (attach_event_listener view
          `keyup
          (fn (e)
             (progn
                (unless in_edit?
                   (handle_event e)
                   ;(log "table_elem: " in_edit? "keyup: " e.keyCode e.srcElement.tagName document.activeElement.tagName state.last_focus)
                   (cond
                      (and (== e.srcElement tbody_elem)
                           state.last_focus
                           (is_nav_key? e.keyCode))
                       (progn
                          (set_position (Math.max 0 (- (get_row_number_by_id state.last_focus.0) (Math.round (/ state.viewport.num_rows 2))))
                                        (Math.max 0 (- (get_column_number_by_id state.last_focus.1) (Math.round (/ state.viewport.num_columns 2))))))
                       (and (== e.srcElement tbody_elem)
                            (is_nav_key? e.keyCode))
                       (progn
                          (focus_to (get_element_by_abs_path (get_active_cell)))))
                   (table_event e `keydown)))))
                          
       
       (attach_event_listener table_elem
          `click
          (fn (e)
             (progn
                (table_event e `click))))
       
       
       (attach_event_listener table_elem
          `contextmenu
          handle_context_menu)
       
       (= table_interval
          (setInterval (fn ()
                          (progn
                             (if geometry_view
                                (progn
                                   (-> geometry_view `replaceChildren
                                      (value_to_dom (+ state.viewport
                                                       state.scroll_position
                                                       state.display_geometry)))))
                             (if view.parentElement ;(get_by_id view_id)
                                (progn
                                   (when (and state.adornment_check_required
                                              (< state.last_draw_time (- (time_in_millis) 250)))
                                      (set_prop state
                                         `adornment_check_required
                                         false)
                                      (when (not (== last_position (JSON.stringify state.viewport)))
                                         (publish_event
                                            {
                                              type: "viewport_change"
                                              from: (JSON.parse last_position)
                                              to: (+ {} state.viewport)  ;; always disconnect from orig object for most things
                                              })
                                         (= last_position (JSON.stringify state.viewport)))
                                      (perform_adornments)))
                                (progn
                                   (destroy_self)))))
                       1000))
       (set_prop intf
          `view view
          `get (fn (include_meta?)
                  (if include_meta?
                     (all_data_rows)
                     (map (fn (row) (rest row))
                          (all_data_rows))))
          `get_current_dimensions (function ()
                             [ state.total_rows state.total_columns ])
          `get_data_dimensions (function ()
                                     [ state.original_sort_order.length state.total_columns ])
          `get_state (function ()
                        state)
          `get_columns (function ()
                          state.columns)
          `get_column_by_id (function (id)
                               (get_column_info_by_id id))
          `get_column_id_by_number (function (id)
                                      (get_column_id_by_number id))
          `get_path (function (path)
                       (get_path path))
          `get_row_by_id (function (row_id)
                            (get_row_by_id row_id))
          `get_row_number_by_id get_row_number_by_id
          `get_row_id_for_row_number (function (rownum)
                                        (get_row_id_for_row_number rownum))
          `get_data_type_map (function ()
                                data_types)
          `sort_by (fn (column_id dir)
                      (sort_by column_id dir))
          `destroy (function ()
                      (destroy_self))
          `add_selection (fn (path interpolate?)
                            (process_selection `add path false interpolate?))
          `remove_selection (fn (path)
                               (process_selection `remove path))
          `clear_selection (fn ()
                              (process_selection `clear))
          `select_all (fn ()
                         (select_all_rows))
          `is_selected? (fn ()
                           (> (length state.selection) 0))
          `is_selection_contiguous? (fn ()
                                       (is_selection_contiguous?))
          `get_selection (function ()
                            (get_selected))
          
          `get_selected_range (fn (as_ids?)
                                 (if as_ids?
                                    (clone state.selection)
                                    (get_selected_range state.selection)))
          `get_selection_type (function ()
                                 (if state.selection_type
                                    (prop [ `row `column `cell ] state.selection_type)
                                    nil))
          `get_selected_column_ids (function ()
                                      (if (== state.selection_type 1)
                                          (each state.selection `1)
                                          []))
          `get_selected_row_ids (function ()
                                   (if (== state.selection_type 0)
                                       (each state.selection `0)
                                       []))
          `path_visible? (fn (path)
                            (path_in_viewport? path))
          `resize (fn ()
                     (resize))
          `options (function ()
                      (+ {
                           columns: state.columns
                           viewport: {
                                       top: state.viewport.top
                                       left: state.viewport.left
                                       }
                           defaults: state.defaults
                           scale: state.render_scale
                           read_only: (or options.read_only false)
                           }
                        (if options.on_redraw
                           { on_redraw: options.on_redraw }
                           {})
                        (if options.fixed_width
                           { fixed_width: true }
                           {})
                        (if intf.id
                           { id: intf.id }
                           {})))
          `redraw (fn ()
                     (redraw_full_table))
          `set_path (fn (path value)
                       (set_value path value))
          `normalize (fn (column_id)
                        (normalize_table_data column_id))
          `set_scale (fn (scale)
                        (if (is_number? scale)
                            (set_render_scale (Math.min 3 (Math.max 0.1 scale)))))
          `set_fixed_width (fn (on?)
                              (set_fixed_width on?))
          `set_stripes (fn (on?)
                          (progn
                             (set_prop options
                                `stripes on?)
                             (redraw_full_table)))
          `set_option (fn (key value)
                         (progn
                            (set_prop options
                               key value)
                            (redraw_full_table)))
          
          `set (fn (data)
                  (set data))
          `get_active_cell (fn ()
                              (get_active_cell))
          `edit_active_cell (fn ()
                               (edit_active_cell_init))
          `set_active_cell (fn (path)
                              (set_active_cell path))
          `set_filter (fn (column_id filter_params)
                         (progn
                            (set_filter column_id filter_params)))
          `get_filters (fn ()
                          (clone state.filters))
          `get_available_filter_values (fn (column_id)
                                          (get_available_filter_values column_id))
          `reset_filters (fn ()
                            (reset_filters true))
          `search (fn (search_opts)
                     (search search_opts))
          `reset_search (fn ()
                           (reset_search))
          `next_search_result (fn ()
                                 (move_to_search_result 1))
          `prior_search_result (fn ()
                                  (move_to_search_result -1))
          `show_only_search_rows (fn ()
                                    (show_only_search_rows))
          `remove_search_filter (fn ()
                                   (remove_search_filter))
          `focus (fn ()
                    (progn
                       (if (and state.last_focus
                                (path_in_viewport? state.last_focus))
                           (focus_to (get_element_by_abs_path state.last_focus))
                           (focus_to tbody_elem))))
                    
          `show_geometry_view (fn (on_or_off)
                                 (show_geometry_view on_or_off))
          
          `set_position (fn (top left)
                           (set_position top left)))
       intf))
      

                
(defcontrol ctable (data_or_path)
   ((container (div { `style: "overflow: hidden; height: calc(100% - 15px); width: calc(100% - 0px);" } 
                    ))
    (show_hide_controls_button (button (controls_icon 12)))
    (show_hide_info_button (button { `style: "float: right;" title: "Show Additional Information" } (info_span)))
   
    (table_container (div { `style: "overflow: hidden; height: calc(100% - 0px); width: calc(100% - 0px);" } 
                                              "Initializing"))
    (reset_filters_button (button { disabled: true style: "position: absolute; bottom: 0px; left: 5px; font-size: 0.9em; font-weight: bold;" title: (dtext "Remove all row filters") } (dtext "Reset")))
    (current_num_rows_view (section { `class: "juno-table-num-rows" }))
    (active_filters_view (ol { `class: "juno-table-active-filters" } ))
    (findings_view (div { `style: "width: 100%; display: flex;" } (dtext "No Results")))
    (pbr (progress_bar { `style: "display: none; position: absolute; top: 5px; left: 5px; " `value: 0 }))
    (search_results_view (section { `class: "button-group" `style: "padding-top: 5px;min-width: 50px; width: 100%;position: relative;" } 
                                  pbr.view
                                  findings_view))
    (search_input (input { type: "search" placeholder: (dtext "Enter Search") title: (dtext "Type search terms and then press Enter") }))
    (active_filters (fn ()
                       (if (is_object? table_view)
                           (let
                              ((idx 0)
                               (filters (-> table_view `get_filters)))
                              (-> active_filters_view `replaceChildren)
                              (if (== filters.length 0)
                                  (progn
                                     (-> active_filters_view `append (filter_icon 10))
                                     (-> active_filters_view `append (li { `style: "background: none; border: none;" } (dtext "None"))))
                                  (for (filter filters)
                                       (if (== idx 0)
                                           (-> active_filters_view `append (filter_icon 10))
                                           (-> active_filters_view `append (right_arrow_icon 10)))
                                       (inc idx)
                                       (-> active_filters_view `append
                                          (li { `column_id: filter.column_id } (+ "" (or filter.name "unnamed")
                                                 (if filter.qualified_row_ids
                                                    (+ " (" filter.qualified_row_ids.size ")")
                                                    ""))))))))))
    (search_regex_button (button { title: (dtext "Use Regular Expression") command: "regex-mode" `class: "search-control" } ".*"))
    (search_case_sensitive_button 
       (button { title: (dtext "Case Sensitivity") command: "case-sensitivity" `class: "search-control"  } "Aa"))
    (search_filter_button (button { title: (dtext "Filter Results") command: "filter" `class: "search-control" } (filter_icon 12)))
    (search_view (section { `class: "juno-table-search" } 
                          search_input
                          (section { class: "button-group" }
                                   (button { command: "prior" `class: "search-control" } "<")
                                   (button { command: "next" `class: "search-control" } ">"))
                          (section { class: "button-group" }
                                   search_filter_button
                                   search_case_sensitive_button
                                   search_regex_button)
                          ;(div { `style: "width: 10px; display: inline-block;" })
                          search_results_view
                          ))
    (ctl_tabs (tabs [[(dtext "Filters") 
                      (div { `style: "height: 100%; min-height: 60px; position: relative; overflow: auto;" }
                           current_num_rows_view
                           active_filters_view
                           reset_filters_button
                           )]
                     [(dtext "Search") search_view]]))
    (ctable_top_element (div { `style: "display: none; height: 100px; min-width: 300px; overflow: auto;" } 
                            ctl_tabs.view))
    (table_view nil)
    (data (cond
             (and (is_array? data_or_path)
                  (is_array? data_or_path.0))
             data_or_path
             (is_array? data_or_path)
             (resolve_path data_or_path Environment.context.scope)
             else
             (throw TypeError "ctable: invalid data or path")))
    (set (fn (data)
            (when (is_object? table_view)
               (-> table_view `set data))))
    (set_path_value (fn (path value)
                       (when (is_object? table_view)
                          (-> table_view `set_path path value))))
    (zoom_control (input { type: "range" min: 10 max: 300 step: 1 value: 100 }))
    (scale (or options.scale 0.9))
    (zoom_in_button (button "+"))
    (zoom_out_button (button "-"))
    (nav_back_button (button { disabled: true style: "float: right" } "<"))
    (nav_forward_button (button { disabled: true style: "float: right" } ">"))
    (zoom_buttons (div { `style: "padding: 0px;"} 
                       zoom_out_button
                       zoom_in_button))
    (control_element (div { `style: "display: inline-flex;" }
                          zoom_buttons
                          show_hide_info_button))
    (undo_history [])
    (set_table_option (fn (opt_name value)
                         (progn
                            (set_prop options
                               opt_name
                               value)
                            (cond 
                               (is_function? (prop table_view (+ "set_" opt_name) ))
                               (-> table_view (+ "set_" opt_name) value)
                               else
                               (-> table_view `set_option opt_name value)))))
    (menu_items (fn ()
                   [[(if options.stripes
                         "✓  Highlight Odd/Even Rows"
                         "Highlight Odd/Even Rows")
                     (fn (e)
                        (set_table_option `stripes (not options.stripes)))]
                    [(if options.fixed_width 
                         "✓  Fixed Width Font"
                         "Fixed Width Font")
                     (fn (e)
                        (set_table_option `fixed_width (not options.fixed_width)))]
                    [(if options.grid
                         "✓  Display Grid"
                         "Display Grid")
                     (fn (e)
                        (set_table_option `grid (not options.grid)))]
                    [(if options.highlight_nils 
                         "✓  Highlight Nils"
                         "Highlight Nils")
                     (fn (e)
                        (set_table_option `highlight_nils (not options.highlight_nils)))]
                    (if (and (is_clipboard_allowed?)
                             (-> table_view `is_selected?))
                        ["Copy Selected" (fn (e)
                                            (copy_selection { `as_lisp: true }))]
                        [])
                    ["Reset Filters" (fn (e)
                                        (reset_filters))]
                    ["Log State" (fn (e)
                                    (log (-> table_view `get_state)))]
                    ]))
    (handle_copy (fn (options)
                    (let
                       ((selection (-> table_view `get_selection)))
                       (if (> selection.length 0)
                           (cond
                              options.as_lisp
                              (-> navigator.clipboard `writeText (pretty_print (as_lisp selection)))
                              options.as_json
                              (-> navigator.clipboard `writeText (JSON.stringify selection))
                              else
                              (-> navigator.clipboard `writeText
                                 (join "\n"
                                    (for (row selection)
                                         (join "\t" row)))))
                           (notify (dtext "Nothing selected in the table"))))))
                       
    (copy_selection (fn (event)
                       (handle_copy)))
    (on_focus (function ()
                 (when table_view
                    (-> table_view `focus))))
    (reset_filters (fn ()
                      (-> table_view `reset_filters true)))
    (position {
                `history: []
                `point: 0
                })
    (render (fn ()
               container))
    (on_resize (fn ()
                  (when (is_object? table_view)
                     (set_prop container `scrollTop 0)
                     ;(setTimeout (fn () (set_prop view `scrollTop 0)) 2)
                     (-> table_view `resize))))
    (check_nav_state (function (new_event)
                        (progn
                           (log "current position: " position.point position.length)
                           (if (< position.point (- position.history.length 2))
                               (set_enabled nav_forward_button)
                               (set_disabled nav_forward_button))
                           (if (and (> position.point 0)
                                    (> position.history.length 0))
                               (set_enabled nav_back_button)
                               (set_disabled nav_back_button)))))
    (last_event nil)
    (go_back (fn ()
                (when (> position.point 0)
                   (progn
                      (set_prop position
                         `point (- position.point 1))
                      (if (== position.point 0)
                          (set_disabled nav_back_button))
                      (let
                         ((pos_event nil)
                          (state nil)
                          (event (prop position.history position.point))
                          (tbl (if (and event
                                        (== table_view.id event.source_id)
                                        table_view)
                                   nil)))
                         
                         (when tbl
                            (= state (-> tbl `get_state))
                            (= last_event event)
                            (log "state: " state)
                            (if (and (== event.to.top state.viewport.top)
                                     (== event.to.left state.viewport.left)
                                     (> position.point 0))
                                (progn
                                   (go_back)) ; do it again since we got the present place we are at
                                (progn
                                   (log "setting position: " event.to.top event.to.left)
                                   (-> tbl
                                      `set_position event.to.top event.to.left)))))))))
    (go_forward (fn ()
                   (when (< position.point (- position.history.length 2))
                      (set_prop position
                         `point (+ position.point 1))
                      (if (== position.point (- position.history.length 1))
                          (set_disabled nav_forward_button))
                      (let
                         ((pos_event nil)
                          (state nil)
                          (event (prop position.history position.point))
                          (tbl (if (and event
                                        (== table_view.id event.source_id)
                                        table_view)
                                   nil)))
                         (log "go_forward: " event)
                         (when tbl
                            (= state (-> tbl `get_state))
                            (if (and (== event.to.top state.viewport.top)
                                     (== event.to.left state.viewport.left)
                                     (< position.point (- position.history.length 2)))
                                (progn
                                   (go_forward)) ; do it again since we got the present place we are at
                                (progn
                                   (-> tbl
                                      `set_position event.to.top event.to.from))))))))
    (active_dialog nil)
    (edit_column_properties (fn (menu_click_event filter_tab?)
                               (let
                                  ((col_ids (-> table_view `get_selected_column_ids)))
                                  (if active_dialog
                                     (if active_dialog.close
                                        (-> active_dialog `close)))
                                  (= active_dialog
                                        (column_properties_dialog col_ids
                                                                  table_view
                                                                  (fn (data)
                                                                     (progn
                                                                        (= active_dialog nil)
                                                                        (log "closed: " data)))
                                                                  {
                                                                    show_format: (not filter_tab?)
                                                            })))))
    
    (paste_selection (fn (event)
                              (let
                                 ((current_active (-> table_view `get_active_cell))
                                  (pdata  (map trim (split_by "\n" (-> navigator.clipboard `readText)))))
                                 (log "paste: " pdata)
                                 (cond
                                    (> pdata.length 1)
                                    (log "Multi-rows")
                                    (and (== pdata.length 1)
                                         (is_string? current_active.0))
                                    (-> table_view `set_path current_active (first pdata))))))
    (select_all (fn ()
                   (let
                      ((currently_selected (-> table_view `get_selection)))
                      (if (== currently_selected.length (prop (-> table_view `get_current_dimensions) 0))
                          (-> table_view `clear_selection)
                          (-> table_view `select_all)))))
    (is_active_cell_click? (fn (event)
                              (let
                                 ((current_active (-> table_view `get_active_cell)))
                                 (if (and current_active
                                          (== current_active.0 event.path.0)
                                          (== current_active.1 event.path.1))
                                     true
                                     false))))
    (get_current_row_counts (fn ()
                               (let
                                  ((total_rows (first (-> table_view `get_data_dimensions)))
                                   (current_n (first (-> table_view `get_current_dimensions))))
                                  [current_n total_rows])))
    (update_current_num_rows_view (fn ()
                                     (let ((vals (get_current_row_counts)))
                                        (if (== vals.0 vals.1)
                                            (set_disabled reset_filters_button)
                                            (set_enabled reset_filters_button))
                                        (-> current_num_rows_view
                                           `replaceChildren
                                           (span { } "N="
                                                 (if (== vals.0 vals.1)
                                                     vals.0
                                                     (+ "" vals.0 "/" vals.1)))))))
    (handle_table_event (fn (event intf)
                           (let
                              ((currently_selected nil)
                               (platform (get_operating_platform))
                               (mod_key (if (== platform "mac")
                                            event.browser_event.metaKey
                                            event.browser_event.ctrlKey))
                               (current_active (-> table_view `get_active_cell))
                               (state (-> table_view `get_state)))
                              ;(log "table-event: " event.browser_event)
                              (cond
                                 (== event.type "set_active_cell")
                                 (progn
                                    ;(log "ctable: event: set_active_cell: " event)
                                    true)
                                 (== event.type "contextmenu")
                                 (progn
                                    (handle_context_menu event))
                                 (== event.type "click")
                                 (try
                                    (progn
                                       
                                       (if (and (== event.browser_event.shiftKey false)
                                                (== mod_key false)
                                                (not event.all_cells)
                                                (not (is_active_cell_click? event)))
                                           (-> table_view `clear_selection))
                                       (cond
                                          (and (eq event.row_id nil)
                                               (not (blank? event.column_id)))
                                          (progn
                                             (= currently_selected (flatten (each (-> table_view `get_selected_range true) `1)))
                                             (if (and mod_key
                                                      (contains? event.column_id currently_selected))
                                                 (-> table_view `remove_selection [ "*" event.column_id ])
                                                 (-> table_view `add_selection [ "*" event.column_id ] event.browser_event.shiftKey)))
                                          (and (eq event.column_id nil)
                                               (not (blank? event.row_id)))
                                          (progn
                                             (= currently_selected (flatten (-> table_view `get_selected_range true)))
                                             (if (and mod_key
                                                      (contains? event.row_id currently_selected))
                                                (-> table_view `remove_selection [ event.row_id ])
                                                (-> table_view `add_selection [ event.row_id ] event.browser_event.shiftKey)))
                                          (and (not (blank? event.column_id))
                                               (not (blank? event.row_id)))
                                          (progn
                                             (if (is_active_cell_click? event)
                                                 (-> table_view `edit_active_cell)
                                                 (-> table_view `add_selection [ event.row_id event.column_id ] event.browser_event.shiftKey)))
                                          event.all_cells
                                          (select_all))
                                       (when (is_function? options.on_select)
                                          (-> options `on_select event table_view)))
                                    (catch Error (e)
                                       (log_error e.message e)))
                                 (and options.on_viewport_change
                                    (== event.type "viewport_change"))
                                 (progn
                                    (when (is_function? options.on_viewport_change)
                                       (-> options `on_viewport_change event table_view)))
                                 
                                 (== event.type "move_to_search_result")
                                 (progn
                                    (update_search_position))
                                 (== event.type "keydown")
                                 (try
                                    (progn
                                       (handle_table_key_navigation table_view event))
                                    (catch Error (e)
                                       (log_error e.message e))))
                              (active_filters)
                              (setTimeout (fn ()
                                             (update_current_num_rows_view))
                                          100)
                              (if options.log_events
                                 (log "event: " event "position: " position.history.length position.point))
                              )))
    (column_menu (fn (event)
                            [(if event.multi_selection
                                 []
                                 [(dtext "Sort Column Ascending")
                                  (fn (menu_click_event)
                                     (-> table_view `sort_by event.column_id 0))])
                             (if event.multi_selection
                                  []
                                  [(dtext "Sort Column Descending")
                                   (fn (menu_click_event)
                                      (-> table_view `sort_by event.column_id 1))])
                             (if (and (not event.multi_selection)
                                      event.selection_type)
                                 ["--" nil]
                                 [])
                             (if (and (not event.multi_selection)
                                      (== event.selection_type "column"))
                                 [(+ (dtext "Filter By") "...")
                                  (fn (menu_click_event)
                                     (edit_column_properties event `filter_tab))]
                                 [])
                             (if (== event.selection_type "column")
                                 [(if event.multi_selection
                                      (+ (dtext "Edit Multiple Columns") "...")
                                      (+ (dtext "Open Column Properties" "...")))
                                  (fn (menu_click_event)
                                     (edit_column_properties event))]
                                 [])
                             (if (== event.selection_type "column")
                                 ["--" nil]
                                 [])
                             ]))
    (clipboard_menu (fn (event)
                       [(if event.selection_type
                            [(dtext "Copy")
                             (fn (e)
                                (copy_selection))]
                            [])
                        (if event.selection_type
                           [(+ (dtext "Copy Selection as") "...")
                            [[(dtext "Quoted Lisp")
                              (fn (e)
                                 (handle_copy { `as_lisp: true }))]
                             [(dtext "JSON")
                              (fn (e)
                                 (handle_copy { `as_json: true }))]]]
                           [])]))
    (reset_search (fn ()
                     (progn
                        (set_prop search_input
                           `value "")
                        (-> table_view `reset_search)
                        (= search_results nil)
                        (set_prop findings_view
                           `innerText "-"))))
    (open_search (fn ()
                    (progn
                       (when (not (has_class? "juno-button-on" show_hide_info_button))
                          (show_info true))
                       (-> ctl_tabs `activate_tab 1)
                       (focus_to search_input))))
    (next_search_result (fn ()
                           (when table_view
                              (-> table_view `next_search_result))))
    (prior_search_result (fn ()
                            (when table_view
                               (-> table_view `prior_search_result))))
    (check_search_filter_state (fn ()
                                  (if table_view
                                     (let
                                        ((state (-> table_view `get_state)))
                                     (cond
                                        (and (== (length state.filters) 0)
                                             (== search_results nil))
                                        { search_filter_ok: true
                                          filter_column_ok: true }
                                        (and (> (length state.filters) 0)
                                             (== search_results nil))
                                        { search_filter_ok: false
                                          filter_column_ok: true }
                                        (and (== (length state.filters) 0)
                                             (is_object? search_results))
                                        { search_filter_ok: true
                                          filter_column_ok: false }
                                        else
                                        { search_filter_ok: false
                                          filter_column: true }))
                                     { search_filter_ok: false 
                                       filter_column_ok: false })))
    (search_results nil)
    (start_search (fn (text)
                     (let
                        ((search_text text)
                         (search_status (check_search_filter_state)))
                        (log "search_state: " search_status)
                        (cond
                           (blank? text)
                           (reset_search)
                           (> search_text.length 1)
                           (progn
                              (set_style [["display" "inline-block"]]
                                         pbr.view)
                              (= search_results
                                 (-> table_view `search { search_text: search_text
                                                       regex: (has_class? "juno-button-on" search_regex_button)
                                                       case_sensitive: (has_class? "juno-button-on" search_case_sensitive_button)
                                                       filter_results: (has_class? "juno-button-on" search_filter_button)
                                                       progress: (fn (v)
                                                                    (when pbr
                                                                       (-> pbr v)))
                                                       }))
                              (set_style [["display" "none"]] pbr.view)
                              (log "start_search: " search_results)
                              (cond
                                 (== search_results.order.length 0)
                                 (set_prop findings_view
                                    `innerText (dtext "No Results"))
                                 else
                                 (set_prop findings_view
                                    `innerText (+ "1" " " (dtext "of") " " search_results.order.length))))))))
    (update_search_position (fn ()
                               (let
                                  ((results_elem (div { `style: "padding: 5px; border-radius: 3px; border: 1px groove var(--main-accent-line-hover); display: inline-block; margin-right: 10px;"}
                                                       (+ "" (+ 1 search_results.index) " " (dtext "of") " " search_results.order.length)))
                                   (active_path [])
                                   (value nil)
                                   (value_found_elem (div { `style: "flex-grow: 2; border-radius: 3px; border: 1px groove var(--main-accent-line-hover); padding: 5px; display: inline-block; overflow: auto; " } "")))
                                  (setTimeout (fn ()
                                                 (progn
                                                    (= active_path (-> table_view `get_active_cell))
                                                    (= value (-> table_view `get_path active_path))
                                                    (set_prop value_found_elem
                                                       `innerText
                                                       (if (is_date? value)
                                                           (-> value `toISOString)
                                                           value))))
                                              10)
                                  (-> findings_view `replaceChildren results_elem)
                                  (-> findings_view `appendChild value_found_elem))))
    (show_info (fn (state)
                  (cond
                     state
                     (progn 
                        (set_style [["height" "calc(100% - 100px)"]] table_container)
                        (sleep 0.01)
                        (set_style [["display" "block"]] ctable_top_element)
                        (sleep 0)
                        (add_class "juno-button-on" show_hide_info_button)
                        (on_resize))
                        ;(setTimeout (fn () (set_prop view `scrollTop 0)) 1)
                     else
                     (progn
                        (set_style [["display" "none"]] ctable_top_element)
                        (set_style [["height" "calc(100% - 0px)"]] table_container)
                        (remove_class "juno-button-on" show_hide_info_button)
                        (on_resize)))))
                          
                        
    (handle_context_menu (fn (event)
                            (let
                               ((selection_type (-> table_view `get_selection_type))
                                (multi_selection? (and (or (== selection_type "row")
                                                          (== selection_type "column"))
                                                      (> (length (-> table_view `get_selected_range)) 1)))
                                (popup_menu nil))
                               (set_prop event
                                  `multi_selection multi_selection?
                                  `selection_type selection_type)
                               (cond
                                  (or (and (eq nil event.row_id)
                                           (is_string? event.column_id))  ;; context column menu
                                      (and (== selection_type `column)
                                           (has_class? "selected" event.browser_event.srcElement)))
                                  (progn
                                     (= popup_menu
                                        (make_menu event.element
                                                   (conj (column_menu event)
                                                         (clipboard_menu event))
                                                   {
                                                     min_width: 220
                                                     do_not_attach: true
                                                     })))
                                     
                                     
                                     ;(-> event.browser_event.srcElement `appendChild popup_menu)
                                         
                                  
                                  ;; context menu on cell
                                  (and (is_string? event.row_id)
                                       (is_string? event.column_id))
                                  (= popup_menu
                                     (make_menu event.element
                                                (clipboard_menu event)
                                                
                                                {
                                                  min_width: 220
                                                  do_not_attach: true
                                               })))
                               (when popup_menu
                                  (set_style [["top" (+ "" event.browser_event.pageY "px") ]
                                              ["left" (+ "" (Math.min (- window.innerWidth 220) event.browser_event.pageX) "px") ]]
                                             popup_menu)
                                  (-> (get_by_id "body") `appendChild popup_menu)))))
    
    (control_bar_elements [ control_element ])
    (top_element_displayed? (fn () (has_class? "juno-button-on" show_hide_info_button)))
    (undo (fn (e)
                (progn
                   (log "undo:" e))))
    (to_json (function ()
                `(ctable ,#data_or_path
                         ,#(+ options
                              (-> table_view `options)))))
    (on_initialize (fn (self)
                      (progn
                         (defvar tbl_id (uuid))
                         (-> container
                            `append ctable_top_element)
                         (-> container
                            `append table_container)
                         (= table_view
                            (worktable table_container data
                                    (+ {
                                        on_event: handle_table_event 
                                        id: tbl_id
                                        }
                                       { scale: scale }
                                       { grid: (or options.grid false) }
                                       { stripes: (or options.stripes false) }
                                       (if options.columns
                                          { `columns: options.columns }
                                          {})
                                        (if options.read_only
                                          { `read_only: options.read_only }
                                          {})
                                       (if options.fixed_width
                                          { `fixed_width: true }
                                          {})
                                       (if (is_function? options.row_style_callback)
                                          { `row_style_callback: options.row_style_callback }
                                          {}))))
                         (attach_event_listener zoom_buttons
                            `click
                            (fn (e)
                               (cond
                                  (== e.srcElement zoom_in_button)
                                  (progn
                                     (= scale (Math.min 3 (+ scale 0.1)))
                                     (-> table_view `set_scale scale))
                                  (== e.srcElement zoom_out_button)
                                  (progn
                                     (= scale (Math.max 0.2 (- scale 0.1)))
                                     (-> table_view `set_scale scale)))))
                                     
                         (attach_event_listener view
                            `click
                            (fn (e)
                               (let
                                  ((src e.srcElement))
                                  ;(log "ctable: view: click!" e.srcElement.tagName)
                                  (cond
                                     (== src nav_back_button)
                                     (go_back)
                                     (== src nav_forward_button)
                                     (go_forward)))))
                         (attach_event_listener search_view
                            `click
                            (fn (e)
                               (let
                                  ((count 0)
                                   (command nil)
                                   (elem e.srcElement))
                                  (while (and (< count 4)
                                              (not (== elem.tagName "BUTTON")))
                                     (progn
                                        (inc count)
                                        (= elem elem.parentElement)))
                                  (cond
                                     (or (== elem search_filter_button)
                                         (== elem search_case_sensitive_button)
                                         (== elem search_regex_button))
                                     (progn
                                        (if (has_class? "juno-button-on" elem)
                                            (remove_class "juno-button-on" elem)
                                            (add_class "juno-button-on" elem))
                                        (if (== elem search_filter_button)
                                            (if (prop (-> table_view `get_state) `search)
                                               (if (has_class? "juno-button-on" search_filter_button)
                                                   (-> table_view `show_only_search_rows)
                                                   (-> table_view `remove_search_filter))
                                               (start_search search_input.value))
                                            (start_search search_input.value))))
                                        
                                  (= command (get_attribute elem `command))
                                  (cond
                                     (and (== command "next")
                                          search_results)
                                     (progn
                                        (next_search_result))
                                     (and (== command "prior")
                                          search_results)
                                     (progn
                                        (prior_search_result))))))
                                     
                                 
                         (attach_event_listener search_view
                            `keyup
                            (fn (e)
                               (let
                                  ((elem e.srcElement)
                                   (key_code e.keyCode))
                                  (cond
                                     (== key_code 27)
                                     (reset_search)))))
                         (attach_event_listener search_view
                            `search
                            (fn (e)
                               (let
                                  ((elem e.srcElement))
                                  (start_search elem.value))))
                                  
                         (attach_event_listener active_filters_view
                            `click
                            (fn (e)
                               (aif (get_attribute e.srcElement `column_id)
                                   (notify (+ "clicked: " it)))))
                         (attach_event_listener reset_filters_button
                            `click
                            reset_filters)
                         (attach_event_listener show_hide_info_button
                            `click
                            (fn ()
                               (progn
                                  (show_info (not (top_element_displayed?))))))
                         (attach_event_listener zoom_control
                            `change
                            (fn (e)
                               (-> table_view `set_scale (/ (parseFloat zoom_control.value) 100))))
                         )))
    (on_destroy (fn ()
                   (-> table_view `destroy))))
    {
        control_bar: true
        expose: [[ `set set ]
                 [ `get (fn (meta?)
                           (-> table_view `get meta?))]
                 [ `undo undo ]
                 [ `copy_selection copy_selection]
                 [ `paste_selection paste_selection ]
                 [ `select_all select_all]
                 [ `set_path set_path_value]
                 [ `open_search open_search]
                 [ `next_search_result next_search_result]
                 [ `prior_search_result prior_search_result]
                 [ `get_table (function ()
                                 table_view) ]]
    })

true
;(run)
