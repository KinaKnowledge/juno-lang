#!/usr/bin/env bash

# Utility script for starting Juno
# For the command line REPL we use rlwrap..not required, but
# it certainly adds a lot of convenience

if [ -z `which deno` ]; then 
  echo "$0: cannot find the deno command, which this init script requires."
  exit 1
fi

RLWRAP="rlwrap"

if [ -z `which rlwrap` ]; then
  echo "rlwrap isn't installed, which this init script uses when available for " 
  echo "history and readline convenience."
  RLWRAP=""
fi

if [ -z "$RLWRAP_EDITOR" ]; then
  export RLWRAP_EDITOR=$EDITOR
fi

 

# Default JS engine is Deno 
PLATFORM=deno
MYNAME=`basename $0`
STARTUP="./js/startup_$PLATFORM.js"
MAIN_SWITCH=""
COMP_OUT=""
ADDR=""
MAIN_MODE="run"
GET_PLATFORM=""
for ARG in $@; do
    if [[ "$ARG" == -* ]]; then
	if [ -z "$MAIN_SWITCH" ]; then
	    MAIN_SWITCH=$ARG
	    if [ "$MAIN_SWITCH" == "--compile" ]; then
		   MAIN_MODE="compile"
	    fi
	fi	
    elif [ "$MAIN_SWITCH" == "--compile" ] && [ -z "$COMP_OUT" ]; then
	COMP_OUT=$ARG
    elif [[ "$ARG" == *.js ]]; then
	STARTUP=$ARG
    elif [ "$MAIN_SWITCH" == "--inspect-brk" ] && [ -z "$ADDR" ]; then
	ADDR=$ARG
    elif [ "$MAIN_SWITCH" == "--inspect" ] && [ -z "$ADDR" ]; then
	ADDR=$ARG    
    fi
done

if [ -n "$ADDR" ]; then
    MAIN_SWITCH="$MAIN_SWITCH=$ADDR"
fi

if [ -z "$MAIN_SWITCH" ]; then
    MAIN_SWITCH=" ";
fi

if [ "$MAIN_MODE" == "compile" ] && [ "$PLATFORM" == "deno" ]; then
    if [ -n "$COMP_OUT" ]; then
	$PLATFORM compile --output="$COMP_OUT" --allow-sys --allow-env --allow-write --allow-read --allow-net "$STARTUP"
    else
	echo "$MYNAME: missing compile output argument. See --help for arguments" >&2
	exit 1
    fi
elif [ "$MAIN_MODE" == "compile" ]; then
    echo "$MYNAME: compile only suported with a platform type of deno." >&2
    exit 1
elif [ "$MAIN_SWITCH" = "-?" ] || [ "$MAIN_SWITCH" = "--help" ]; then 
    cat <<EOF

Juno (c) 2022, 2023 Kina LLC - Command Line Utility
usage: [ --help | -? ]
       [ --compile output-file [ path ] ]
       [ --inspect | --inspect-brk [ip:port] ] [ path ]

 -? --help:     Print this help guide.

 --compile:     Build a standalone executable.
                Note that dynamic_imports will not work in the emitted binary.

 --inspect      Enable inspection in Chrome Devtools  If a host and port are
                provided as a second argument, it is in the host:port format.
                Example: 127.0.0.1:9933

 --inspect-brk: Debugging on, and prior to evaluation, Juno will wait for a
                debug connection prior to start. Like inspect, will take a
                second argument indicating a listening address and port.

 path           The Juno javascript environment file to use.  The default is
                ./js/startup_deno.js"

EOF

elif [ -n "$MAIN_SWITCH" ]; then
    if [ "$PLATFORM" == "deno" ]; then
     if [ -z "$RLWRAP" ]; then
       deno run $MAIN_SWITCH --unstable --allow-all "$STARTUP"
     else
	   rlwrap -c -r -m -q'"' -M .clj deno run $MAIN_SWITCH --unstable --allow-all "$STARTUP"
	 fi
    elif [ "$PLATFORM" == "node" ]; then
	  rlwrap -c -r -m -q'"' -M .clj node $MAIN_SWITCH "$STARTUP"
    else
	  if [ -z "$STARTUP" ]; then
	      echo "$MYNAME: missing $STARTUP script for platform $PLATFORM" >&2
	      exit 2
	  else
	      rlwrap -c -r -m -q'"' -M .clj $PLATFORM $MAIN_SWITCH "$STARTUP"
	  fi	
    fi    	    
else
    echo "juno: unknown option,  use -? for more information" 
fi
     
    
