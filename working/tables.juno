;; Tables 


(value path_to_value)


(defglobal parent_elem
   (div { } "Parent"
        (details { } 
                 (summary "Child 0 Summary")
                 (div { } "Child 2 "
                      (div "Child 3")
                      (div "Child 4"
                         (defglobal child_elem (div "Child 5")))))))
           
             
                      

     

(defun traverse_dom (elem operator_function _acc)
   (let
      ((acc (or _acc [])))
      (if (and (is_element? elem)
               (is_function? operator_function))
          (map (fn (child_elem idx)
                  (progn
                     (operator_function child_elem (conj acc idx))
                     (traverse_dom child_elem operator_function (conj acc idx))))
               (Array.from elem.children))
          (cond
             (not (is_function? operator_function))
             (throw TypeError "traverse_dom: invalid operator_function provided")
             (not (is_element? elem))
             (throw TypeError "traverse_dom: invalid element provided"))))
   {
     description: (+ "Given a starting element with the `root_element` argument and an "
                     "`operator_function`, the `traverse_dom` function recursively moves through the "
                     "children of the root_element and applies the operator function.  The operator "
                     "function is called with the signature:```(element path)```<br><br>where element "
                     "is a descendent of the root_element, and the path is the dom path to the "
                     "child.  This function mirrors `traverse` in terms of function, but applies to "
                     "the DOM.  See also `path_between` and `resolve_dom_path`. <br>")
     usage: ["element:Element" "operator_function:function"]
     tags:  ["DOM" "path" "resolve" "element" "UI" "traverse"]
   })



(search_dom (prop (get_control_by_name "seedling.dom") `view) "Seedling")
                          
(scan_str (new RegExp "Seedling" `g) "Seedling is an integrated development environment (IDE) written in Juno, a Lisp dialect that is compiled to JavaScript.  It runs in the browser and is a full Lisp environment.  This allows for writing programs and working in Lisp, with the resources that are available to JavaScript. It provides the ability to produce stand alone applications that can be served from any web server, with these files being able to fully encapsulate the resources and assets that they require.  Or, they can be referenced as remote resources like a traditional web page.  From within the Seedling Environment, you can manage the look and feel, and iteratively build your application, compiling new functions and CSS directives as needed in an interactive way.  An emitted HTML application built with Seedling can be used by itself (with no server), with others via a server, sent to others easily, and requires no external dependencies except an installed browser, making it useful in situations where you might want a power tool, but you have nothing available on hand except a browser environment.  ")

(defun_sync scan_str (regex search_string)
   (let
      ((`result      nil)
       (`last_result {})
       (`totals  [])
       (`strs    (+ "" search_string)))
      (if (is_regex? regex)
          (progc
             (set_prop regex
                `lastIndex 0)
             (while (do (= result (-> regex `exec strs ))
                        (and (not (== result.index last_result.index)) 
                             result))
                (progn
                   (= last_result result)
                   (push totals (to_object
                                           (for_each (v (keys result))
                                              [v (prop result v)]))))))
          (throw (new ReferenceError (+ "scan_str: invalid RegExp provided: " regex))))
      totals)
   {`description: (+ "Using a provided regex and a search string, performs a regex "
                     "exec using the provided regex argument on the string argument. "
                     "Returns an array of results or an empty array, with matched "
                     "text, index, and any capture groups.")
                  `usage:["regex:RegExp" "text:string"]
                  `tags:["regex" "string" "match" "exec" "array"] })

(defun dtable (row_data options)
   (let
      ((search_input (input { `class: "juno-search" title: (or options.title (dtext "Search")) placeholder: (dtext "Search") type: `search } ))
       (filter_button (filter_icon 22 (button {  `title: (dtext "Filter Matching Rows") `style: "width: 35px; padding: 3px;"})))
       (search_results_elem (div { `style: "display: none;padding: 5px;" } "No Data Found"))
       
       (title (or options.title nil))
       (view nil)
       (search_results [])
       (tview nil)
       (set_filter_mode (fn (state)
                           (if state
                              (progn
                                 (if (-> tview `querySelector "td.juno-selected") ;; do we have any selections currently?
                                     (for_items (row (-> tview `querySelectorAll "tr"))
                                        (if (-> row `querySelector ".juno-selected")
                                           (remove_class "juno-display-none" row)
                                           (add_class "juno-display-none" row)))
                                     (for_items (row (-> tview `querySelectorAll "tr.juno-display-none"))
                                               (remove_class "juno-display-none" row)))
                                 (add_class "juno-button-on" filter_button))
                              (progn
                                 (remove_class "juno-button-on" filter_button)
                                 (for_items (row (-> tview `querySelectorAll "tr.juno-display-none"))
                                           (remove_class "juno-display-none" row))))))
                                     
       (reset_search (fn ()
                        (progn
                           (set_prop search_input `value "")
                           (for_items (elem (-> tview `querySelectorAll "td.juno-selected"))
                                (remove_class "juno-selected" elem))
                           (for_items (elem (-> tview `querySelectorAll "tr.juno-display-none"))
                                (remove_class "juno-display-none" elem)))))
       (search_handler (fn (search_data)
                          (let
                             ((found false)
                              (search_data (lowercase search_data))
                              (hide_rows (has_class? "juno-button-on" filter_button))
                              (nothing_found true))
                             (set_style [["display" "none"]] search_results_elem)
                             (if (blank? search_data)
                                (reset_search)
                                (progn
                                   (for_items (elem (-> tview `querySelectorAll "td.juno-selected"))
                                              (remove_class "juno-selected" elem))
                                   (for_items (elem (-> tview `querySelectorAll "tr"))
                                              (remove_class "juno-selected" elem))
                                   (for_items (row (or (-> tview `querySelectorAll "tr") []))
                                              (progc
                                                 ;(log "searching row: " row.tagName row.innerText row.children)
                                                 (= found false)
                                                 (for_items (col row.children)
                                                            (progc
                                                               ;(log "..searching col: " col.innerText (contains? search_data col.innerText))
                                                               (when (contains? search_data (lowercase col.innerText))
                                                                  (add_class "juno-selected" col)
                                                                  (= nothing_found false)
                                                                  (= found true))))
                                                 (if hide_rows
                                                    (if found
                                                       (remove_class "juno-display-none" row)
                                                       (add_class "juno-display-none" row)))))
                                   (when nothing_found
                                      (reset_search)
                                      (set_style [["display" "inline-block"]] search_results_elem))
                                   ))))))
                             
      (= tview
         (table { `style: (or options.table_style "width: 100%") }
                (if (is_array? options.columns)
                    (thead
                       (for_each (colheader options.columns)
                          (cond
                             (is_string? colheader)
                             (th { `style: "padding: 5px;" }  colheader)
                             (and (is_object? colheader)
                                  colheader.name)
                             (th { `style: "padding: 5px;" }  colheader.name))))
                    [])
                (tbody
                   (for_each (row (or row_data []))
                      (tr { `class: "juno-dtable" }
                          (for_each (cell row)
                             (td { `class: "juno-dtable" }
                                 cell)))))))
      (= view 
         (cond 
            options.display_search
            (div { `style: "width: 100%" }
                 (div { `style: "padding: 4px; display: flex;" }
                      (if (is_string? options.title)
                          (label { `style: "font-weight: bold; margin-right: 20px;margin-top: 4px;font-size: 1.1em;" } options.title)
                          [])
                      search_input filter_button search_results_elem)
                 tview)
            options.title
            (div { `style: "width: 100%" }
                 (div { `style: "padding: 4px; display: flex;" }
                      (if (is_string? options.title)
                          (label { `style: "font-weight: bold; margin-right: 20px;display: inline-block;" } options.title)
                          []))
                 tview)
            else
            tview))
      (attach_event_listener search_input
         `keyup
         (fn (e)
            (when (blank? search_input.value)
               (reset_search))))
      (attach_event_listener search_input
         `search
         (fn (e)
            (if (blank? search_input.value)
                (reset_search)
                (search_handler search_input.value))))
      (attach_event_listener filter_button
         `click
         (fn (e)
            (set_filter_mode (not (has_class? "juno-button-on" filter_button)))))
      (if options.controls
         {
             view:view
             search: search_handler
             reset: reset_search
             options: options
             set_filter_mode: set_filter_mode
         }
         view))
   {
     description: (+ "Given two dimensional row data in the form of nested arrays, and an "
                     "optional options object, returns a DOM structure representing the data in an "
                     "HTMLTable.<br>The row_data should be in the following form:```[[\"Betty Sue\" "
                     "80]\n [\"John Smith\" 75]\n [\"Harvey Jones\" 70]]```<br><br>where the ordered "
                     "structure is by row, then by column.<br><br>#### Options  <br><br>columns:array "
                     "-When provided, the columns array provides the table header information.  If "
                     "the column object contains an array of strings, then the values in the array "
                     "are used for the column names.  If the columns array contains objects, then "
                     "the `name` key will determine the displayed name for the "
                     "column. <br>controls:boolean  - When set to true, a control interface object is "
                     "returned, instead of a DOM Element.  The control interface will have the "
                     "following form:```{ view: DOM Element\n  search: fn(search_data)\n  reset: fn()\n "
                     " options: object\n  set_filter_mode: fn(boolean) "
                     "\n}\n```<br><br>display_search:boolean - When true, the table will present search "
                     "controls on the top, where the user can search, highlight and filter the row "
                     "data of the table.  Default is false.<br>title:string - If present the text "
                     "given in the string will be presented to the upper left of the table itself, "
                     "otherwise no title is displayed.<br>")
     usage: ["row_data:array" "options:object"]
     tags: ["table" "data" "DOM" "ui" "element"]
   })


(dtable [[ "Alex" "Nygren"]
         [ "John" "Dank"]
         [ "Erin" "Nygren"]]
        { `title: "Names"
          `display_search: true
          `columns: ["First" "Last"]
          })



(defmacro for_items ((iteration_symbol collection) `& body_forms)
   `(let
      ((__collection ,#collection))
      (for_each (__idx (range __collection.length))
       (progn
          (defvar ,#iteration_symbol (-> __collection `item __idx))
          ,@body_forms)))
   {
     description: (+ "The `for_items` macro takes a collection, checks the length property "
                     "and then iterates through the collection assigning each value in the collection "
                     "to the provided iterator symbol.  The behavior is similar to `for_each` where "
                     "the final result of the body forms is accumulated and returned as an "
                     "array.  <br>The `for_items` macro provides a `progn` wrapper around the body "
                     "forms so it is not required to provide a block specifier in the body forms "
                     "provided.<br> ")

     usage: ["allocation_and_collection:array" "body:array"]
     tags: ["iteration" "for" "loop" "iterator" "collection" ]
   })

(defmacro for_every ((iteration_symbol iterable) `& body_forms)
   (let
      ((iter_mode (if (is_array? iteration_symbol)
                      "entries"
                      "values"))
       (symbol_allocs (if (is_array? iteration_symbol)
                          (for_each (sym iteration_symbol)
                             (list sym nil))
                          [(list iteration_symbol nil)])))
                          
   `(let
       ((_iterable ,#iterable)
        (_iterator_ (if (is_function? (prop _iterable ,#iter_mode))
                        (-> _iterable ,#iter_mode)
                        (progn
                           (log "for_every: iter_mode: " ,#iter_mode "iterable is: " _iterable)
                           (-> _iterable `entries))))
        (_next_val_ nil)
        (_more_ true)
        ,@symbol_allocs)
       (while (not (prop (= _next_val_ (-> _iterator_ `next)) `done))
          (progn
             ,@(if (== iter_mode "entries")
                  `[(= ,#symbol_allocs.0.0 _next_val_.value.0)
                    (= ,#symbol_allocs.1.0 _next_val_.value.1)]
                  `[(= ,#symbol_allocs.0.0 _next_val_.value)  ])
             ,@body_forms))))
   {
     description: (+ "When given an iterable object containing "
                     "the `entries` or `values` call, the `for_every` macro iterates through either "
                     "just the values or both the keys and the values, depending on the number of "
                     "allocation symbols that have been provided to the call.  When given 1 symbol to "
                     "allocate to each iteration, the `values` call is used to gain the iterator.  "
                     "When 2 symbols are provided, the `entries` function of the object is used to "
                     "ascertain the iterator.  <br>If the object doesn\'t support the `values` call, "
                     "the `entries` method is used instead.  <br><br>### Examples <br><br>The "
                     "following will call the entries method:<br> ")
     usage: ["allocation_and_collection:array" "body:array"]
     tags: ["iteration" "for" "loop" "iterator" "collection" ]
   })

(object_methods [])

(defun filter_icon (size element)
   (let
      ((view (or element (div { style: (+ "display: inline-block; width: " size)})))
       (size (or size 20))
       (svg_text 
          (prop (svg { xmlns:"http://www.w3.org/2000/svg"
                        width: (- size 6)
                        height: (- size 6)
                        viewBox:(+ "0 0 " size " " size)
                        fill:"none"
                        stroke:"currentColor"
                        stroke-width:2
                        stroke-linecap:"round"
                        stroke-linejoin:"round"
                        class:"feather feather-filter" }
        (polygon { points: "22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" })) `outerHTML)))
      (-> view `insertAdjacentHTML `beforeend svg_text)
      view))

(defun search_icon (size element)
   (let
      ((view (or element (div { style: (+ "display: inline-block; width: " size)})))
       (size (or size 20))
       (svg_text 
          (prop (svg { xmlns:"http://www.w3.org/2000/svg"
                        width: (- size 6)
                        height: (- size 6)
                        viewBox:(+ "0 0 " size " " size)
                        fill:"none"
                        stroke:"currentColor"
                        stroke-width:2
                        stroke-linecap:"round"
                        stroke-linejoin:"round"
                        class:"feather feather-filter" }
                  (circle { cx:"11" cy:"11" r:"8" })
                  (line { x1:"21" y1:"21" x2:"16.65" y2:"16.65" }))
            `outerHTML)))
      (-> view `insertAdjacentHTML `beforeend svg_text)
      view))
      
   
(let
   ((b (button { style: "padding: 2px;" }))
    (size 25))
   (set_prop b `innerHTML (prop (svg { xmlns:"http://www.w3.org/2000/svg"
                        width: (- size 10)
                        height: (- size 10)
                        viewBox:(+ "0 0 " size " " size)
                        fill:"none"
                        stroke:"currentColor"
                        stroke-width:2
                        stroke-linecap:"round"
                        stroke-linejoin:"round"
                        class:"feather feather-filter" }
                  (circle { cx:"11" cy:"11" r:"8" })
                  (line { x1:"21" y1:"21" x2:"16.65" y2:"16.65" })) `outerHTML))
   b)

(search_icon 25 (button { `style: "width: 40px;"}))

<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-search"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>


(defun tester ()
   (let
      ((search_handler (fn (search_data)
                          (progn
                             (progn
                                (log "step 0")
                                (progn 
                                   (for_each (r [ 0 1 2 3])
                                      (log "r is: " r)))
                                (log "MADE IT: 1"))))))
      (search_handler)))

(tester)

(let
   ((search_data "Dank")
    (found false))
   (progn
      (for_every (col (query_all "td"))
                 (when (contains? search_data col.innerText)
                    (= found true)))
      123))

(progn
   (progn
      (log "step 0")
      (progn
         (for_each (r [ 0 1 2 3])
            (log "r is: " r)))
      (log "MADE IT: 1")))




