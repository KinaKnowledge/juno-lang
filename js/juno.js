// Source: undefined  
// Build Time: 2022-07-22 07:59:22
// Version: 2022.07.22.07.59
export const DLISP_ENV_VERSION='2022.07.22.07.59';




function check_true(val) {
  return val||0===val
}
function get_next_environment_id() {
    globalThis.dlisp_environment_count++;
    return globalThis.dlisp_environment_count;
}
function get_outside_global(refname) {  try {    let tfn = new Function("{ if (typeof " + refname + " === 'undefined') { return undefined } else { return "+refname+" } }");    return tfn();  } catch (ex) {    return undefined;  }}
function subtype(value) {  if (value === null) return "null";  else if (value === undefined) return "undefined";  else if (value instanceof Array) return "array";  else if (value.constructor && value.constructor!=null && value.constructor.name!=='Object') {    return value.constructor.name;  }  return typeof value;}
function lisp_writer(obj,depth,max_depth) {
  if (depth===undefined) depth=0;
  if (max_depth===undefined) max_depth=1502;
  const bracketStyles=['(',')','(',')','{','}'];
  let bracketStyle=0;
  let text='';
  let type = subtype(obj);
  //if (depth === 0) console.log("lisp_writer:->",obj);
  if (type === undefined) {
    type = "UNKNOWN"
  }
  if (max_depth && (depth > max_depth)) {
    return "...";
  }
  if (depth > 500) {
    console.warn("lisp_writer: depth bomb: object: ",type);
    throw new Error("recursion too deep");
  }
 
  if (obj===undefined) return 'undefined';
  if (obj===null) return 'null';
  if (typeof obj==='number') return obj;
  if (typeof obj==='function') {
    //if (depth === 0) console.log("lisp_writer: <- [ function ]",obj.toString());
    if (obj.name) { return obj.name }
    
    return "lambda";
  } // technically this shouldn't be a JSON object but this is a convenience for us..
  if (obj instanceof Array) {
    if (obj.length > 0 && obj[0] instanceof String && obj[0].startsWith("=:")) {
      bracketStyle = 2;
    }
    text += bracketStyles[bracketStyle];
    // determine if we have any objects or arrays in the list
    for (let i in obj) {
      if (i > 0) text += ' ';
      
      text += lisp_writer(obj[i],depth+4,max_depth);
    }
    text += bracketStyles[bracketStyle+1];
    //if (depth === 0) console.log("lisp_writer: <- [ array ]",text);
    return text;
  } else if (typeof obj ==='object') {
    // object {}
    if (obj.constructor && obj.constructor.name !== "Object") {
      if (typeof Element != 'undefined') {
        if (obj instanceof Element) {
          let clist = Array.from(obj.classList).join(" ");
          if (obj.id) {
            return obj.constructor.name+"/"+obj.tagName.toLowerCase()+"#"+obj.id;
          } else {
            return obj.constructor.name+"/"+obj.tagName.toLowerCase()+"."+clist;
          }
        } else {
          return "" + obj.constructor.name + "";
        }
      } else {
        return "" + obj.constructor.name + "";
      }
    }
    bracketStyle=4;
    text+=bracketStyles[bracketStyle];
    let keys = Object.keys(obj);
    for (let i in keys) {
      if (i > 0) text+= ' ';
      if (typeof obj[keys[i]]=="symbol") {
	text+=lisp_writer(keys[i],depth+4)+": \"<symbol>\"";
      } else {
	text+=lisp_writer(keys[i],depth+4)+":"+lisp_writer(obj[keys[i]],depth+4, max_depth)
      }
    }
    text += bracketStyles[bracketStyle+1];
    //if (depth === 0) console.log("lisp_writer: <- [ object ]",text);
    return text;
  } else if (typeof obj === 'string') {
    // string    
    if (obj==="=:") return obj;
    else if (obj==="=:##") return ",#";
    else if (obj==="=$,@") return "=$,@";
    else if (obj.startsWith("=:")) return obj.substr(2);
    
    obj = obj.replaceAll("\"","\\\"");        
    obj = obj.replaceAll("'","\\'");        
    obj = obj.replaceAll("\n",'\\n');
    obj = obj.replaceAll("\r",'\\r');
    obj = obj.replaceAll("\f",'\\f');
    obj = obj.replaceAll("\b",'\\b');			         
    //obj = JSON.stringify(obj);  // encode with JSON semantics
    
    //if (depth == 0) console.log("lisp_writer: <-",'"'+obj+'"');
    
    return '"'+obj+'"';
    
    
  } else {
    //if (depth === 0) console.log("lisp_writer: <- [ other ]",obj);
    return obj; // numbers and booleans
  }
}
function clone(src,depth) {
        if (src===null) {
            return null;
        }
        depth = depth || 0;
        if (depth >= 500) {
          throw new EvalError("too deep");
        }
        if (src===undefined) {
            return undefined;
        } else if (src === null) {
	    return null;
	} else if (src instanceof Function ) {
            return src; 
        } else if (src==this) {
          return this;	
        } else if (src.constructor===String) {	  
	  return src.toString();
	} else if (src.constructor===Number) {
	  return src;
	} else if (src.constructor===Boolean) {
	  return src;
	} else if ((src.constructor===Array)||(src.constructor===Object)) {
	  let obj;
	  if (src.constructor===Array) {
	    obj=[];
	  } else {
	    obj={}
	  }
          for (let idx in src) {
	    obj[idx]=clone(src[idx],depth+1);
	  }
	  return obj;
	} else {
	  return src;
	}
}
class LispSyntaxError extends SyntaxError {
  constructor(json_structure) {
    super(JSON.stringify(json_structure));
    this.name = 'LispSyntaxError';
  }
}


if (typeof AsyncFunction === "undefined") {
  globalThis.AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;
}
export async function init_dlisp(Environment)  {
{
    await async function(){
        globalThis["subtype"]=subtype;
        globalThis["check_true"]=check_true;
        globalThis["clone"]=clone;
        globalThis["lisp_writer"]=lisp_writer;
        globalThis["LispSyntaxError"]=LispSyntaxError;
        return globalThis;
        
    }();
    if (check_true (("undefined"===typeof dlisp_environment_count))){
         await async function(){
            globalThis["dlisp_environment_count"]=0;
            return globalThis;
            
        }()
    };
    {
        let symname;
        symname="dlisp_env";
        {
            await async function(){
                globalThis[symname]=async function(opts) {
                    {
                        let subtype=function subtype(value) {  if (value === null) return "null";
  else if (value === undefined) return "undefined";
  else if (value instanceof Array) return "array";
  else if (value.constructor && value.constructor!=null && value.constructor.name!=='Object') {
    return value.constructor.name;
  }
  return typeof value;
};
                        let get_object_path=function(refname) {        if (check_true ((( refname["indexOf"].call(refname,".")>-1)||( refname["indexOf"].call(refname,"[")>-1)))){
            let chars;
            let comps;
            let mode;
            let name_acc;
            chars=(refname).split("");
            comps=[];
            mode=0;
            name_acc=[];
             ( function() {
                let __for_body__12=function(c) {
                     return    (function(){
                        if (check_true( ((c===".")&&(mode===0)))) {
                            (comps).push((name_acc).join(""));
                             return  name_acc=[]
                        } else if (check_true( ((mode===0)&&(c==="[")))) {
                            mode=1;
                            (comps).push((name_acc).join(""));
                             return  name_acc=[]
                        } else if (check_true( ((mode===1)&&(c==="]")))) {
                            mode=0;
                            (comps).push((name_acc).join(""));
                             return  name_acc=[]
                        } else  {
                             return (name_acc).push(c)
                        }
                    } )()
                };
                let __array__13=[],__elements__11=chars;
                let __BREAK__FLAG__=false;
                for(let __iter__10 in __elements__11) {
                    __array__13.push( __for_body__12(__elements__11[__iter__10]));
                    if(__BREAK__FLAG__) {
                         __array__13.pop();
                        break;
                        
                    }
                }return __array__13;
                 
            })();
            if (check_true (((name_acc && name_acc.length)>0))){
                 (comps).push((name_acc).join(""))
            };
             return  comps
        } else {
              return  ( function(){
                let __array_op_rval__14=refname;
                 if (__array_op_rval__14 instanceof Function){
                    return  __array_op_rval__14() 
                } else {
                    return[__array_op_rval__14]
                }
            })()
        }
    };
                        let get_outside_global=function get_outside_global(refname) {  try {    let tfn = new Function("{ if (typeof " + refname + " === 'undefined') { return undefined } else { return "+refname+" } }");    return tfn();  } catch (ex) {    return undefined;  }};
                        ;
                        opts=await (async function () {
                             if (check_true ((opts===undefined))){
                                  return new Object()
                            } else {
                                  return opts
                            } 
                        })();
                        let namespace=(opts.namespace||"core");
                        ;
                        let parent_environment=await (async function () {
                             if (check_true ((namespace==="core"))){
                                  return null
                            } else {
                                  return opts.parent_environment
                            } 
                        })();
                        ;
                        let active_namespace=namespace;
                        ;
                        let contained=(opts.contained||false);
                        ;
                        let Environment={
                            global_ctx:{
                                scope:new Object(),name:namespace
                            },version:DLISP_ENV_VERSION,definitions:(opts.definitions||new Object()),declarations:(opts.declarations||{
                                safety:{
                                    level:2
                                }
                            })
                        };
                        ;
                        let id=await (async function(){
                            let __array_op_rval__4=get_next_environment_id;
                             if (__array_op_rval__4 instanceof Function){
                                return await __array_op_rval__4() 
                            } else {
                                return[__array_op_rval__4]
                            }
                        })();
                        ;
                        await async function(){
                            Environment["context"]=Environment.global_ctx;
                            return Environment;
                            
                        }();
                        let unset_compiler=async function() {
                            throw new EvalError(("compiler must be set for "+namespace));
                            
                        };
                        ;
                        let compiler=unset_compiler;
                        ;
                        let compiler_operators=new Set();
                        ;
                        let special_identity=async function(v) {
                             return  v
                        };
                        ;
                        let MAX_SAFE_INTEGER=9007199254740991;
                        ;
                        await async function(){
                            Environment.global_ctx.scope["MAX_SAFE_INTEGER"]=MAX_SAFE_INTEGER;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let LispSyntaxError=globalThis.LispSyntaxError;
                        ;
                        await async function(){
                            Environment.global_ctx.scope["LispSyntaxError"]=LispSyntaxError;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let sub_type=subtype;
                        ;
                        await async function(){
                            Environment.global_ctx.scope["sub_type"]=sub_type;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let __VERBOSITY__=0;
                        ;
                        await async function(){
                            Environment.global_ctx.scope["__VERBOSITY__"]=__VERBOSITY__;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["__VERBOSITY__"]={
                                description:"Set __VERBOSITY__ to a positive integer for verbose console output of system activity.",tags:["debug","compiler","environment","global"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let int=parseInt;
                        ;
                        await async function(){
                            Environment.global_ctx.scope["int"]=int;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["int"]={
                                usage:"value:string|number",description:"Convenience method for parseInt, should be used in map vs. directly calling parseInt, which will not work directly",tags:["conversion","number"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let float=parseFloat;
                        ;
                        await async function(){
                            Environment.global_ctx.scope["float"]=float;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["float"]={
                                usage:"value:string|number",description:"Convenience method for parseFloat, should be used in map vs. directly calling parseFloat, which will not work directly",tags:["conversion","number"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let values=new Function("...args","{\n                                let acc = [];\n                                for (let _i in args) {\n                                    let value = args[_i];\n                                    let type = subtype(value);\n                                    if (value instanceof Set)  {\n                                        acc = acc.concat(Array.from(value));\n                                    } else if (type==='array') {\n                                        acc = acc.concat(value);\n                                    } else if (type==='object') {\n                                        acc = acc.concat(Object.values(value))\n                                    } else {\n                                        acc = acc.concat(value);\n                                    }\n                                }\n                                return acc;\n                            }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["values"]=values;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let pairs=new Function("obj","{\n                                    if (subtype(obj)==='array') {\n                                        let rval = [];\n                                        for (let i = 0; i < obj.length; i+=2) {\n                                            rval.push([obj[i],obj[i+1]]);\n                                        }\n                                        return rval;\n                                    } else {\n                                        let keys = Object.keys(obj);\n                                        let rval = keys.reduce(function(acc,x,i) {\n                                            acc.push([x,obj[x]])\n                                            return acc;\n                                        },[]);\n                                        return rval;\n                                    }\n                                }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["pairs"]=pairs;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let keys=new Function("obj","{  return Object.keys(obj);  }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["keys"]=keys;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let take=new Function("place","{ return place.shift() }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["take"]=take;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let prepend=new Function("place","thing","{ return place.unshift(thing) }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["prepend"]=prepend;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let first=new Function("x","{ return x[0] }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["first"]=first;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let last=new Function("x","{ return x[x.length - 1] }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["last"]=last;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let length=new Function("obj","{\n                                if(obj instanceof Array) {\n                                    return obj.length;\n                                } else if (obj instanceof Set) {\n                                    return obj.size;\n                                } else if ((obj === undefined)||(obj===null)) {\n                                    return 0;\n                                } else if (typeof obj==='object') {\n                                    return Object.keys(obj).length;\n                                } else if (typeof obj==='string') {\n                                    return obj.length;\n                                } \n                                return 0;\n                            }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["length"]=length;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let conj=new Function("...args","{   let list = [];\n                                if (args[0] instanceof Array) {\n                                    list = args[0];\n                                } else {\n                                    list = [args[0]];\n                                }\n                                args.slice(1).map(function(x) {\n                                    list = list.concat(x);\n                                });\n                                return list;\n                            }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["conj"]=conj;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let reverse=new Function("container","{ return container.slice(0).reverse }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["reverse"]=reverse;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["reverse"]={
                                usage:["container:list"],description:"Returns a copy of the passed list as reversed.  The original is not changed.",tags:["list","sort","order"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let map=new AsyncFunction("lambda","array_values","{ try {\n                                        let rval = [],\n                                                tl = array_values.length;\n                                        for (let i = 0; i < array_values.length; i++) {\n                                            rval.push(await lambda.apply(this,[array_values[i], i, tl]));\n                                         }\n                                        return rval;\n                                    } catch (ex) {           \n                                              if (lambda === undefined || lambda === null) {\n                                                    throw new ReferenceError(\"map: lambda argument (position 0) is undefined or nil\")\n                                              } else if (array_values === undefined || array_values === null) {\n                                                    throw new ReferenceError(\"map: container argument (position 1) is undefined or nil\")\n                                              } else if (!(lambda instanceof Function)) {\n                                                    throw new ReferenceError(\"map: lambda argument must be a function: received: \"+ typeof lambda)\n                                              } else if (!(array_values instanceof Array)) {\n                                                    throw new ReferenceError(\"map: invalid array argument, received: \" + typeof array_values)\n                                              } else {\n                                                    // something else just pass on the error\n                                                throw ex;\n                                              }\n                                    }\n                              }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["map"]=map;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let bind=new Function("func,this_arg","{ return func.bind(this_arg) }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["bind"]=bind;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let to_object=new Function("array_values","{\n                                      let obj={}\n                                      array_values.forEach((pair)=>{\n                                             obj[pair[0]]=pair[1]\n                                      });\n                                      return obj;\n                                    }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["to_object"]=to_object;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["to_object"]={
                                description:("Given an array of pairs in the form of [[key value] [key value] ...], constructs an "+"object with the first array element of the pair as the key and the second "+"element as the value. A single object is returned."),usage:["paired_array:array"],tags:["conversion","object","array","list","pairs"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let to_array=async function(container) {
                             return  await async function(){
                                if (check_true( (container instanceof Array))) {
                                     return container
                                } else if (check_true( await (await get_global("is_set?"))(container))) {
                                    let acc=[];
                                    ;
                                    await container["forEach"].call(container,async function(v) {
                                         return  (acc).push(v)
                                    });
                                     return  acc
                                } else if (check_true( (container instanceof String || typeof container==='string'))) {
                                     return (container).split("")
                                } else if (check_true( (container instanceof Object))) {
                                     return await pairs(container)
                                } else  {
                                     return await (async function(){
                                        let __array_op_rval__30=container;
                                         if (__array_op_rval__30 instanceof Function){
                                            return await __array_op_rval__30() 
                                        } else {
                                            return[__array_op_rval__30]
                                        }
                                    })()
                                }
                            } ()
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["to_array"]=to_array;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["to_array"]={
                                description:("Given a container of type Array, Set, Object, or a string, "+"it will convert the members of the container to an array form, "+"and return a new array with the values of the provided container. "+"In the case of an object, the keys and values will be contained in "+"paired arrays in the returned array.  A string will be split into "+"individual characters. If provided a different "+"type other than the listed values above, the value will be placed "+"in an array as a single element."),usage:["container:*"],tags:["list","array","conversion","set","object","string","pairs"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let slice=function(target,from,to) {
                             return    (function(){
                                if (check_true(to)) {
                                     return  target["slice"].call(target,from,to)
                                } else if (check_true(from)) {
                                     return  target["slice"].call(target,from)
                                } else  {
                                     throw new SyntaxError("slice requires 2 or 3 arguments");
                                    
                                }
                            } )()
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["slice"]=slice;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let rest=function(x) {
                             return    (function(){
                                if (check_true( (x instanceof Array))) {
                                     return  x["slice"].call(x,1)
                                } else if (check_true( (x instanceof String || typeof x==='string'))) {
                                     return  x["substr"].call(x,1)
                                } else  {
                                     return null
                                }
                            } )()
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["rest"]=rest;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let second=new Function("x","{ return x[1] }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["second"]=second;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let third=new Function("x","{ return x[2] }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["third"]=third;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let chop=new Function("x","{ if (x instanceof Array) { return x.slice(0, x.length-1) } else { return x.substr(0,x.length-1) } }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["chop"]=chop;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let chomp=new Function("x","{ return x.substr(x.length-1) }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["chomp"]=chomp;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let not=new Function("x","{ if (check_true(x)) { return false } else { return true } }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["not"]=not;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let push=new Function("place","thing","{ return place.push(thing) }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["push"]=push;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let pop=new Function("place","{ return place.pop() }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["pop"]=pop;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let list=async function(...args) {
                             return  args
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["list"]=list;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let flatten=new Function("x","{ return x.flat(999999999999) } ");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["flatten"]=flatten;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let jslambda=function(...args) {
                             return   ( function(){
                                let __apply_args__44= flatten(args);
                                return ( Function).apply(this,__apply_args__44)
                            })()
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["jslambda"]=jslambda;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let join=function(...args) {
                             return    (function(){
                                if (check_true( (args.length===1))) {
                                     return  args['0']["join"].call(args['0'],"")
                                } else  {
                                     return  args['1']["join"].call(args['1'],args['0'])
                                }
                            } )()
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["join"]=join;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let lowercase=function(x) {
                             return   x["toLowerCase"]()
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["lowercase"]=lowercase;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let uppercase=function(x) {
                             return   x["toUpperCase"]()
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["uppercase"]=uppercase;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let log=function(...args) {
                             return   ( function(){
                                return ( console.log).apply(this,args)
                            })()
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["log"]=log;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let split=new Function("container","token","{ return container.split(token) }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["split"]=split;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let split_by=new Function("token","container","{ return container.split(token) }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["split_by"]=split_by;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let is_object_ques_=new Function("x","{ return x instanceof Object }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["is_object?"]=is_object_ques_;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["is_object?"]={
                                description:"for the given value x, returns true if x is an Javascript object type.",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let is_array_ques_=new Function("x","{ return x instanceof Array }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["is_array?"]=is_array_ques_;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["is_array?"]={
                                description:"for the given value x, returns true if x is an array.",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let is_number_ques_=function(x) {
                             return  ( subtype(x)==="Number")
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["is_number?"]=is_number_ques_;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["is_number?"]={
                                description:"for the given value x, returns true if x is a number.",usage:["arg:value"],tags:["type","condition","subtype","value","what","function"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let is_function_ques_=function(x) {
                             return  (x instanceof Function)
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["is_function?"]=is_function_ques_;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["is_function?"]={
                                description:"for the given value x, returns true if x is a function.",usage:["arg:value"],tags:["type","condition","subtype","value","what","function"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let is_set_ques_=new Function("x","{ return x instanceof Set }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["is_set?"]=is_set_ques_;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["is_set?"]={
                                description:"for the given value x, returns true if x is a set.",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let is_element_ques_=new Function("x","{ return x instanceof Element }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["is_element?"]=is_element_ques_;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["is_element?"]={
                                description:"for the given value x, returns true if x is an Element object",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let is_string_ques_=function(x) {
                             return  ((x instanceof String)||(typeof x==="string"))
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["is_string?"]=is_string_ques_;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["is_string?"]={
                                description:"for the given value x, returns true if x is a String object",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let is_nil_ques_=function(x) {
                             return  (x===null)
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["is_nil?"]=is_nil_ques_;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["is_nil?"]={
                                description:"for the given value x, returns true if x is exactly equal to nil.",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let is_regex_ques_=function(x) {
                             return  ( sub_type(x)==="RegExp")
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["is_regex?"]=is_regex_ques_;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["is_regex?"]={
                                description:"for the given value x, returns true if x is a Javascript regex object",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let is_date_ques_=function(x) {
                             return  ( sub_type(x)==="Date")
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["is_date?"]=is_date_ques_;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["is_date?"]={
                                description:"for the given value x, returns true if x is a Date object.",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let ends_with_ques_=new Function("val","text","{ if (text instanceof Array) { return text[text.length-1]===val } else if (subtype(text)=='String') { return text.endsWith(val) } else { return false }}");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["ends_with?"]=ends_with_ques_;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["ends_with?"]={
                                description:"for a given string or array, checks to see if it ends with the given start_value.  Non string args return false.",usage:["end_value:value","collection:array|string"],tags:["string","text","list","array","filter","reduce"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let starts_with_ques_=new Function("val","text","{ if (text instanceof Array) { return text[0]===val } else if (subtype(text)=='String') { return text.startsWith(val) } else { return false }}");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["starts_with?"]=starts_with_ques_;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["starts_with?"]={
                                description:"for a given string or array, checks to see if it starts with the given start_value.  Non string args return false.",usage:["start_value:value","collection:array|string"],tags:["string","text","list","array","filter","reduce","begin"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let blank_ques_=function(val) {
                             return  ((val==null)||((val instanceof String || typeof val==='string')&&(val==="")))
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["blank?"]=blank_ques_;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let contains_ques_=new Function("value","container","{ if (!value && !container) { return false }\n                           else if (container === null) { throw new TypeError(\"contains?: passed nil/undefined container value\"); }\n                           else if ((container instanceof String) || typeof container === \"string\") {\n                                if (subtype(value) === \"Number\") return container.indexOf(\"\"+value)>-1;\n                                else return container.indexOf(value)>-1;\n                           }\n                           else if (container instanceof Array) return container.includes(value);\n                           else if (container instanceof Set) return container.has(value);\n                           else throw new TypeError(\"contains?: passed invalid container type: \"+subtype(container)) }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["contains?"]=contains_ques_;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let make_set=function(vals) {
                            if (check_true ((vals instanceof Array))){
                                  return new Set(vals)
                            } else {
                                let vtype;
                                vtype= sub_type(vals);
                                 return    (function(){
                                    if (check_true( (vtype==="Set"))) {
                                         return new Set(vals)
                                    } else if (check_true( (vtype==="object"))) {
                                         return new Set( values(vals))
                                    }
                                } )()
                            }
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["make_set"]=make_set;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let meta_for_symbol=async function(quoted_symbol,search_mode) {
                            if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){
                                let local_data=Environment.global_ctx.scope[quoted_symbol];
                                ;
                                if (check_true (search_mode)){
                                      return await async function(){
                                        if (check_true(local_data)) {
                                             return [await (await get_global("add"))({
                                                namespace:namespace,name:quoted_symbol,type:await subtype(local_data)
                                            },await (async function() {
                                                let it;
                                                it=Environment.definitions[quoted_symbol];
                                                if (check_true (it)){
                                                      return it
                                                } else {
                                                      return new Object()
                                                }
                                            } )())]
                                        } else if (check_true(parent_environment)) {
                                             return await (async function() {
                                                {
                                                     let __call_target__=await parent_environment["meta_for_symbol"].call(parent_environment,quoted_symbol,true), __call_method__="flat";
                                                    return await __call_target__[__call_method__].call(__call_target__,1)
                                                } 
                                            })()
                                        } else if (check_true( (await length(await keys(children))>0))) {
                                            let __collector;
                                            let __result;
                                            let __action;
                                            __collector=[];
                                            __result=null;
                                            __action=async function(details) {
                                                 return  details
                                            };
                                            ;
                                            await (async function() {
                                                let __for_body__84=async function(__item) {
                                                    __result=await __action(__item);
                                                    if (check_true (__result)){
                                                          return (__collector).push(__result)
                                                    }
                                                };
                                                let __array__85=[],__elements__83=await (async function() {
                                                    let __for_body__88=async function(child_data) {
                                                         return  await child_data['1']["meta_for_symbol"].call(child_data['1'],quoted_symbol)
                                                    };
                                                    let __array__89=[],__elements__87=await pairs(children);
                                                    let __BREAK__FLAG__=false;
                                                    for(let __iter__86 in __elements__87) {
                                                        __array__89.push(await __for_body__88(__elements__87[__iter__86]));
                                                        if(__BREAK__FLAG__) {
                                                             __array__89.pop();
                                                            break;
                                                            
                                                        }
                                                    }return __array__89;
                                                     
                                                })();
                                                let __BREAK__FLAG__=false;
                                                for(let __iter__82 in __elements__83) {
                                                    __array__85.push(await __for_body__84(__elements__83[__iter__82]));
                                                    if(__BREAK__FLAG__) {
                                                         __array__85.pop();
                                                        break;
                                                        
                                                    }
                                                }return __array__85;
                                                 
                                            })();
                                             return  __collector
                                        }
                                    } ()
                                } else {
                                    quoted_symbol=await (async function () {
                                         if (check_true (await (await get_global("starts_with?"))("=:",quoted_symbol))){
                                              return await quoted_symbol["substr"].call(quoted_symbol,2)
                                        } else {
                                              return quoted_symbol
                                        } 
                                    })();
                                    {
                                        let it;
                                        it=Environment.definitions[quoted_symbol];
                                        if (check_true (it)){
                                              return await (await get_global("add"))({
                                                namespace:namespace,type:await sub_type(local_data),name:quoted_symbol
                                            },it)
                                        } else {
                                              return 
                                        }
                                    }
                                }
                            }
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["meta_for_symbol"]=meta_for_symbol;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let describe=async function(quoted_symbol,search_mode) {
                            {
                                let internal_results=await meta_for_symbol(quoted_symbol,true);
                                ;
                                if (check_true (((internal_results instanceof Array)&&internal_results['0']))){
                                     if (check_true (search_mode)){
                                          return internal_results
                                    } else {
                                          return await first(internal_results)
                                    }
                                } else {
                                    let external_results=await get_outside_global(quoted_symbol);
                                    ;
                                    if (check_true (external_results)){
                                          return {
                                            location:"external",type:await subtype(external_results)
                                        }
                                    } else {
                                          return null
                                    }
                                }
                            }
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["describe"]=describe;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let undefine=function(quoted_symbol) {
                            if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){
                                let namespace_identity;
                                let parent_call;
                                let child_call;
                                let target_symbol;
                                namespace_identity=(quoted_symbol).split("/");
                                parent_call=null;
                                child_call=null;
                                target_symbol=null;
                                ;
                                 return    (function(){
                                    if (check_true( (((namespace_identity.length===1)&&Environment.global_ctx.scope[namespace_identity['0']])||((namespace_identity.length>1)&&(namespace_identity['0']===namespace))))) {
                                        target_symbol= ( function () {
                                             if (check_true ((namespace_identity.length>1))){
                                                  return namespace_identity['1']
                                            } else {
                                                  return namespace_identity['0']
                                            } 
                                        })();
                                         ( get_global("delete_prop"))(Environment.definitions,target_symbol);
                                        if (check_true (Environment.global_ctx.scope[target_symbol])){
                                              return  ( get_global("delete_prop"))(Environment.global_ctx.scope,target_symbol)
                                        } else {
                                              return false
                                        }
                                    } else if (check_true( ((namespace_identity.length>1)&&parent_environment))) {
                                        parent_call= parent_environment["get_global"].call(parent_environment,"undefine");
                                         return  (parent_call)(quoted_symbol)
                                    } else if (check_true( ((namespace_identity.length>1)&&children[namespace_identity['0']]))) {
                                        child_call= ( function() {
                                            {
                                                 let __call_target__=children[namespace_identity['0']], __call_method__="get_global";
                                                return  __call_target__[__call_method__].call(__call_target__,"undefine")
                                            } 
                                        })();
                                         return   child_call(quoted_symbol)
                                    } else  {
                                         return false
                                    }
                                } )()
                            } else throw new SyntaxError("undefine requires a quoted symbol");
                            
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["undefine"]=undefine;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let eval_exp=async function(expression) {
                            await console.log("EVAL:",expression);
                             return  await (async function(){
                                let __array_op_rval__93=expression;
                                 if (__array_op_rval__93 instanceof Function){
                                    return await __array_op_rval__93() 
                                } else {
                                    return[__array_op_rval__93]
                                }
                            })()
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["eval_exp"]=eval_exp;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let indirect_new=new Function("...args","{\n                                    let targetClass = args[0];\n                                    if (subtype(targetClass)===\"String\") {\n                                        let tmpf=new Function(\"{ return \"+targetClass+\" }\");\n                                        targetClass = tmpf();\n                                    }\n                                    if (args.length==1) {\n                                        let f = function(Class) {\n                                            return new (Function.prototype.bind.apply(Class, args));\n                                        }\n                                        let rval = f.apply(this,[targetClass]);\n                                        return rval;\n                                    } else {\n                                        let f = function(Class) {\n                                            return new (Function.prototype.bind.apply(Class, args));\n                                        }\n                                        let rval = f.apply(this,[targetClass].concat(args.slice(1)));\n                                        return rval;\n                                    }}");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["indirect_new"]=indirect_new;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let range=function(...args) {
                            let from_to;
                            let step;
                            let idx;
                            let acc;
                            from_to= ( function () {
                                 if (check_true (args['1'])){
                                      return [parseInt(args['0']),parseInt(args['1'])]
                                } else {
                                      return [0,parseInt(args['0'])]
                                } 
                            })();
                            step= ( function () {
                                 if (check_true (args['2'])){
                                      return parseFloat(args['2'])
                                } else {
                                      return 1
                                } 
                            })();
                            idx=from_to['0'];
                            acc=[];
                             ( function(){
                                 let __test_condition__96=function() {
                                     return  (idx<from_to['1'])
                                };
                                let __body_ref__97=function() {
                                    (acc).push(idx);
                                     return  idx+=step
                                };
                                let __BREAK__FLAG__=false;
                                while( __test_condition__96()) {
                                     __body_ref__97();
                                     if(__BREAK__FLAG__) {
                                         break;
                                        
                                    }
                                } ;
                                
                            })();
                             return  acc
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["range"]=range;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let add=new Function("...args","{\n                                let acc;\n                                if (typeof args[0]===\"number\") {\n                                    acc = 0;\n                                } else if (args[0] instanceof Array) {\n                                    return args[0].concat(args.slice(1));\n                                } else if (typeof args[0]==='object') {\n                                   let rval = {};\n                                   for (let i in args) {\n                                        if (typeof args[i] === 'object') {\n                                            for (let k in args[i]) {\n                                                rval[k] = args[i][k];\n                                            }\n                                        }\n                                   }\n                                   return rval;\n                                } else {\n                                    acc = \"\";\n                                }\n                                for (let i in args) {\n                                    acc += args[i];\n                                }\n                                return acc;\n                             }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["add"]=add;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let merge_objects=new Function("x","{\n                                    let rval = {};\n                                    for (let i in x) {\n                                        if (typeof i === 'object') {\n                                            for (let k in x[i]) {\n                                                rval[k] = x[i][k];\n                                            }\n                                        }\n                                    }\n                                    return rval;\n                                 }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["merge_objects"]=merge_objects;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let index_of=new Function("value","container",("{ return container.indexOf(value) }"));
                        ;
                        await async function(){
                            Environment.global_ctx.scope["index_of"]=index_of;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let resolve_path=new Function("path,obj","{\n                                        if (typeof path==='string') {\n                                            path = path.split(\".\");\n                                        }\n                                        let s=obj;\n                                        return path.reduce(function(prev, curr) {\n                                            return prev ? prev[curr] : undefined\n                                        }, obj || {})\n                                    }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["resolve_path"]=resolve_path;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let delete_prop=new Function("obj","...args","{\n                                        if (args.length == 1) {\n                                            return delete obj[args[0]];\n                                        } else {\n                                            while (args.length > 0) {\n                                                let prop = args.shift();\n                                                delete obj[prop];\n                                            }\n                                        }\n                                        return obj;\n                                    }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["delete_prop"]=delete_prop;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let min_value=new Function("elements","{ return Math.min(...elements); }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["min_value"]=min_value;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let max_value=new Function("elements","{ return Math.max(...elements); }");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["max_value"]=max_value;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let interlace=async function(...args) {
                            let min_length;
                            let rlength_args;
                            let rval;
                            min_length=await min_value(await map(length,args));
                            rlength_args=await range(await length(args));
                            rval=[];
                            await (async function() {
                                let __for_body__108=async function(i) {
                                     return  await (async function() {
                                        let __for_body__112=async function(j) {
                                             return  (rval).push(await (async function(){
                                                let __targ__114=args[j];
                                                if (__targ__114){
                                                     return(__targ__114)[i]
                                                } 
                                            })())
                                        };
                                        let __array__113=[],__elements__111=rlength_args;
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__110 in __elements__111) {
                                            __array__113.push(await __for_body__112(__elements__111[__iter__110]));
                                            if(__BREAK__FLAG__) {
                                                 __array__113.pop();
                                                break;
                                                
                                            }
                                        }return __array__113;
                                         
                                    })()
                                };
                                let __array__109=[],__elements__107=await range(min_length);
                                let __BREAK__FLAG__=false;
                                for(let __iter__106 in __elements__107) {
                                    __array__109.push(await __for_body__108(__elements__107[__iter__106]));
                                    if(__BREAK__FLAG__) {
                                         __array__109.pop();
                                        break;
                                        
                                    }
                                }return __array__109;
                                 
                            })();
                             return  rval
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["interlace"]=interlace;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["interlace"]={
                                usage:["list0:array","list1:array","listn?:array"],description:"Returns a list containing a consecutive values from each list, in argument order.  I.e. list0.0 list1.0 listn.0 list0.1 list1.1 listn.1 ...",tags:["list","array","join","merge"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let trim=function(x) {
                             return   x["trim"]()
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["trim"]=trim;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let assert=function(assertion_form,failure_message) {
                            if (check_true (assertion_form)){
                                  return assertion_form
                            } else throw new EvalError((failure_message||"assertion failure"));
                            
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["assert"]=assert;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["assert"]={
                                description:"If the evaluated assertion form is true, the result is returned, otherwise an EvalError is thrown with the optionally provided failure message.",usage:["form:*","failure_message:string?"],tags:["true","error","check","debug","valid","assertion"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let unquotify=async function(val) {
                            let dval;
                            dval=val;
                            if (check_true (await (await get_global("starts_with?"))("\"",dval))){
                                 dval=await dval["substr"].call(dval,1,(dval.length-2))
                            };
                            if (check_true (await (await get_global("starts_with?"))("=:",dval))){
                                 dval=await dval["substr"].call(dval,2)
                            };
                             return  dval
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["unquotify"]=unquotify;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["unquotify"]={
                                description:"Removes binding symbols and quotes from a supplied value.  For use in compile time function such as macros.",usage:["val:string"],tags:["macro","quote","quotes","desym"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let or_args=async function(argset) {
                            let is_true;
                            is_true=false;
                            await (async function() {
                                let __for_body__124=async function(elem) {
                                    if (check_true (elem)){
                                        is_true=true;
                                        __BREAK__FLAG__=true;
                                        return
                                    }
                                };
                                let __array__125=[],__elements__123=argset;
                                let __BREAK__FLAG__=false;
                                for(let __iter__122 in __elements__123) {
                                    __array__125.push(await __for_body__124(__elements__123[__iter__122]));
                                    if(__BREAK__FLAG__) {
                                         __array__125.pop();
                                        break;
                                        
                                    }
                                }return __array__125;
                                 
                            })();
                             return  is_true
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["or_args"]=or_args;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let special_operators=async function() {
                             return  await make_set(await compiler([],{
                                special_operators:true,env:Environment
                            }))
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["special_operators"]=special_operators;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let defclog=async function(opts) {
                            let style;
                            style=("padding: 5px;"+await (async function () {
                                 if (check_true (opts.background)){
                                      return ("background: "+opts.background+";")
                                } else {
                                      return ""
                                } 
                            })()+await (async function () {
                                 if (check_true (opts.color)){
                                      return ("color: "+opts.color+";")
                                } 
                            })()+"");
                             return  async function(...args) {
                                 return  await (async function(){
                                    let __target_arg__130=[].concat(await conj(await (async function(){
                                        let __array_op_rval__131=style;
                                         if (__array_op_rval__131 instanceof Function){
                                            return await __array_op_rval__131() 
                                        } else {
                                            return[__array_op_rval__131]
                                        }
                                    })(),args));
                                    if(!__target_arg__130 instanceof Array){
                                        throw new TypeError("Invalid final argument to apply - an array is required")
                                    }let __pre_arg__132=("%c"+await (async function () {
                                         if (check_true (opts.prefix)){
                                              return opts.prefix
                                        } else {
                                              return (args).shift()
                                        } 
                                    })());
                                    __target_arg__130.unshift(__pre_arg__132);
                                    return (console.log).apply(this,__target_arg__130)
                                })()
                            }
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["defclog"]=defclog;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let NOT_FOUND=new ReferenceError("not found");
                        ;
                        await async function(){
                            Environment.global_ctx.scope["NOT_FOUND"]=NOT_FOUND;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let check_external_env_default=await (async function () {
                             if (check_true ((namespace==="core"))){
                                  return true
                            } else {
                                  return false
                            } 
                        })();
                        ;
                        await async function(){
                            Environment.global_ctx.scope["check_external_env_default"]=check_external_env_default;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let _star_namespace_star_=namespace;
                        ;
                        await async function(){
                            Environment.global_ctx.scope["*namespace*"]=_star_namespace_star_;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let set_global=function(refname,value,meta,is_constant,target_namespace,contained_req) {
                            {
                                  (function(){
                                    if (check_true(  not((typeof refname==="string")))) {
                                         throw new TypeError("reference name must be a string type");
                                        
                                    } else if (check_true( ((Environment===value)||(Environment.global_ctx===value)||(Environment.global_ctx.scope===value)))) {
                                        throw new EvalError("cannot set the environment scope as a global value");
                                        
                                    }
                                } )();
                                if (check_true ( resolve_path( ( function(){
                                    let __array_op_rval__137=refname;
                                     if (__array_op_rval__137 instanceof Function){
                                        return  __array_op_rval__137("constant") 
                                    } else {
                                        return[__array_op_rval__137,"constant"]
                                    }
                                })(),Environment.definitions))){
                                    throw new TypeError(("Assignment to constant variable "+refname));
                                    
                                };
                                let namespace_identity= ( function () {
                                     if (check_true (target_namespace)){
                                          return  ( function(){
                                            let __array_op_rval__138=target_namespace;
                                             if (__array_op_rval__138 instanceof Function){
                                                return  __array_op_rval__138(refname) 
                                            } else {
                                                return[__array_op_rval__138,refname]
                                            }
                                        })()
                                    } else {
                                          return (refname).split("/")
                                    } 
                                })();
                                ;
                                 return    (function(){
                                    if (check_true( (parent_environment&&(namespace_identity.length>1)&& not((namespace===namespace_identity['0']))))) {
                                         return  parent_environment["set_global"].call(parent_environment,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'],(contained||contained_req))
                                    } else if (check_true( ((namespace_identity.length>1)&& not((namespace_identity['0']===namespace))))) {
                                        if (check_true ((children[namespace_identity['0']]&& not(contained_req)))){
                                              return  ( function() {
                                                {
                                                     let __call_target__=children[namespace_identity['0']], __call_method__="set_global";
                                                    return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'])
                                                } 
                                            })()
                                        } else throw new EvalError(("namespace "+namespace_identity['0']+" doesn't exist"));
                                        
                                    } else  {
                                        let comps= get_object_path( ( function() {
                                             if (check_true ((1===namespace_identity.length))){
                                                  return namespace_identity['0']
                                            } else {
                                                  return namespace_identity['1']
                                            } 
                                        } )());
                                        ;
                                          (function(){
                                            Environment.global_ctx.scope[comps['0']]=value;
                                            return Environment.global_ctx.scope;
                                            
                                        })();
                                        if (check_true (((meta instanceof Object)&& not((meta instanceof Array))))){
                                            if (check_true (is_constant)){
                                                   (function(){
                                                    meta["constant"]=true;
                                                    return meta;
                                                    
                                                })()
                                            };
                                               (function(){
                                                Environment.definitions[comps['0']]=meta;
                                                return Environment.definitions;
                                                
                                            })()
                                        } else {
                                             if (check_true (is_constant)){
                                                   (function(){
                                                    Environment.definitions[comps['0']]={
                                                        constant:true
                                                    };
                                                    return Environment.definitions;
                                                    
                                                })()
                                            }
                                        };
                                         return  Environment.global_ctx.scope[comps['0']]
                                    }
                                } )()
                            }
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["set_global"]=set_global;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let get_global=function(refname,value_if_not_found,suppress_check_external_env,target_namespace,path_comps,contained_req) {
                             return    (function(){
                                if (check_true(  not((typeof refname==="string")))) {
                                     throw new TypeError("reference name must be a string type");
                                    
                                } else if (check_true( (refname==="Environment"))) {
                                     return Environment
                                } else if (check_true(  compiler_operators["has"].call(compiler_operators,refname))) {
                                     return special_identity
                                } else  {
                                    let namespace_identity;
                                    let comps;
                                    let refval;
                                    let symbol_name;
                                    let check_external_env;
                                    namespace_identity= ( function () {
                                         if (check_true (target_namespace)){
                                              return  ( function(){
                                                let __array_op_rval__144=target_namespace;
                                                 if (__array_op_rval__144 instanceof Function){
                                                    return  __array_op_rval__144(refname) 
                                                } else {
                                                    return[__array_op_rval__144,refname]
                                                }
                                            })()
                                        } else {
                                              return (refname).split("/")
                                        } 
                                    })();
                                    comps=(path_comps|| get_object_path( ( function() {
                                         if (check_true ((1===namespace_identity.length))){
                                              return namespace_identity['0']
                                        } else {
                                              return namespace_identity['1']
                                        } 
                                    } )()));
                                    refval=null;
                                    symbol_name=null;
                                    check_external_env= ( function () {
                                         if (check_true (suppress_check_external_env)){
                                              return false
                                        } else {
                                              return check_external_env_default
                                        } 
                                    })();
                                     return    (function(){
                                        if (check_true( (parent_environment&&(namespace_identity.length>1)&& not((namespace_identity['0']===namespace))))) {
                                             return  parent_environment["get_global"].call(parent_environment,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps,(contained||contained_req))
                                        } else if (check_true( ((namespace_identity.length>1)&& not((namespace_identity['0']===namespace))))) {
                                            if (check_true ((children[namespace_identity['0']]&& not(contained_req)))){
                                                  return  ( function() {
                                                    {
                                                         let __call_target__=children[namespace_identity['0']], __call_method__="get_global";
                                                        return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps)
                                                    } 
                                                })()
                                            } else throw new EvalError(("namespace "+namespace_identity['0']+" doesn't exist"));
                                            
                                        } else  {
                                            refval=Environment.global_ctx.scope[comps['0']];
                                            if (check_true (((undefined===refval)&&(namespace_identity.length===1)&&parent_environment))){
                                                let rval= parent_environment["get_global"].call(parent_environment,refname,value_if_not_found,suppress_check_external_env,null,comps,(contained||contained_req));
                                                ;
                                                 return  rval
                                            } else {
                                                if (check_true (((undefined===refval)&&check_external_env))){
                                                     refval= ( function () {
                                                         if (check_true (check_external_env)){
                                                              return ( get_outside_global(comps['0'])||NOT_FOUND)
                                                        } else {
                                                              return NOT_FOUND
                                                        } 
                                                    })()
                                                };
                                                 return    (function(){
                                                    if (check_true( ((NOT_FOUND===refval)&&value_if_not_found))) {
                                                         return value_if_not_found
                                                    } else if (check_true( (NOT_FOUND===refval))) {
                                                        throw new ReferenceError(("symbol not found: "+ ( function () {
                                                             if (check_true ((namespace_identity.length>1))){
                                                                  return  add(namespace,"/",namespace_identity['1'])
                                                            } else {
                                                                  return  add(namespace,"/",namespace_identity['0'])
                                                            } 
                                                        })()));
                                                        
                                                    } else if (check_true( (comps.length===1))) {
                                                         return refval
                                                    } else if (check_true( (comps.length>1))) {
                                                         return   resolve_path( rest(comps),refval)
                                                    } else  {
                                                         console.warn("get_global: condition fall through: ",comps);
                                                         return  NOT_FOUND
                                                    }
                                                } )()
                                            }
                                        }
                                    } )()
                                }
                            } )()
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["get_global"]=get_global;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let symbol_definition=async function(symname,target_namespace) {
                            let namespace_identity;
                            namespace_identity=await (async function () {
                                 if (check_true (target_namespace)){
                                      return await (async function(){
                                        let __array_op_rval__146=target_namespace;
                                         if (__array_op_rval__146 instanceof Function){
                                            return await __array_op_rval__146(symname) 
                                        } else {
                                            return[__array_op_rval__146,symname]
                                        }
                                    })()
                                } else {
                                     if (check_true ((await length(symname)>2))){
                                          return (symname).split("/")
                                    } else {
                                          return await (async function(){
                                            let __array_op_rval__147=symname;
                                             if (__array_op_rval__147 instanceof Function){
                                                return await __array_op_rval__147() 
                                            } else {
                                                return[__array_op_rval__147]
                                            }
                                        })()
                                    }
                                } 
                            })();
                             return  await async function(){
                                if (check_true( (namespace_identity.length===1))) {
                                    let it;
                                    it=Environment.definitions[symname];
                                    if (check_true (it)){
                                          return it
                                    } else {
                                         if (check_true (parent_environment)){
                                              return await parent_environment["symbol_definition"].call(parent_environment,symname)
                                        }
                                    }
                                } else if (check_true( (namespace_identity['0']===namespace))) {
                                     return Environment.definitions[symname]
                                } else if (check_true(parent_environment)) {
                                     return await parent_environment["symbol_definition"].call(parent_environment,namespace_identity['1'],namespace_identity['0'])
                                } else if (check_true( (namespace_identity.length===2))) {
                                     return await (async function() {
                                        {
                                             let __call_target__=children[namespace_identity['0']], __call_method__="symbol_definition";
                                            return await __call_target__[__call_method__].call(__call_target__,namespace_identity['1'])
                                        } 
                                    })()
                                } else  {
                                     return undefined
                                }
                            } ()
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["symbol_definition"]=symbol_definition;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["symbol_definition"]={
                                description:("Given a symbol name and an optional namespace, either as a fully qualified path "+"or via the target_namespace argument, returns definition information about the "+"retquested symbol.  "+"Used primarily by the compiler to find metadata for a specific symbol during compilation."),usage:["symname:string","namespace:string"],tags:["compiler","symbols","namespace","search","context","environment"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let compile=async function(json_expression,opts) {
                            let out;
                            opts=await add({
                                env:Environment
                            },opts,{
                                meta:await (async function() {
                                    if (check_true ((opts&&opts.meta))){
                                          return true
                                    } else {
                                          return false
                                    }
                                } )()
                            });
                            out=null;
                            out=await compiler(json_expression,opts);
                             return  await async function(){
                                if (check_true( ((out instanceof Array)&&out['0'].ctype&&(out['0'].ctype==="FAIL")))) {
                                     return out
                                } else if (check_true(opts.meta)) {
                                     return out
                                } else  {
                                     return out['1']
                                }
                            } ()
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["compile"]=compile;
                            return Environment.global_ctx.scope;
                            
                        }();
                        [await async function(){
                            Environment.definitions["compile"]={
                                description:("Compiles the given JSON or quoted lisp and returns a string containing "+"the lisp form or expression as javascript.<br>"+"If passed the option { meta: true } , an array is returned containing compilation metadata "+"in element 0 and the compiled code in element 1."),usage:["json_expression:*","opts:object"],tags:["macro","quote","quotes","desym"]
                            };
                            return Environment.definitions;
                            
                        }()];
                        let env_log=await defclog({
                            prefix:("env"+id),background:"#B0F0C0"
                        });
                        ;
                        await async function(){
                            Environment.global_ctx.scope["env_log"]=env_log;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let evaluate_local=async function(expression,ctx,opts) {
                            let compiled;
                            let error_data;
                            let result;
                            opts=(opts||new Object());
                            compiled=null;
                            error_data=null;
                            result=null;
                            if (check_true (opts.compiled_source)){
                                 compiled=expression
                            } else {
                                 await (async function(){
                                    try /* TRY SIMPLE */ {
                                          return compiled=await compiler(await (async function() {
                                             if (check_true (opts.json_in)){
                                                  return expression
                                            } else {
                                                  return await Environment["read_lisp"].call(Environment,expression,{
                                                    source_name:opts.source_name
                                                })
                                            } 
                                        } )(),{
                                            env:Environment,ctx:ctx,formatted_output:true,source_name:opts.source_name,throw_on_error:opts.throw_on_error,error_report:(opts.error_report||null),quiet_mode:(opts.quiet_mode||false)
                                        }) 
                                    } catch(__exception__153) {
                                          if (__exception__153 instanceof Error) {
                                             let e=__exception__153;
                                             {
                                                if (check_true (opts.throw_on_error)){
                                                    throw e;
                                                    
                                                };
                                                if (check_true ((e instanceof LispSyntaxError))){
                                                     await async function(){
                                                        e["message"]=await JSON.parse(e.message);
                                                        return e;
                                                        
                                                    }()
                                                };
                                                await async function(){
                                                    if (check_true( (e instanceof LispSyntaxError))) {
                                                         return error_data=await add({
                                                            error:"LispSyntaxError"
                                                        },e.message)
                                                    } else  {
                                                         return error_data={
                                                            error:await sub_type(e),message:e.message,stack:e.stack,form:await async function(){
                                                                if (check_true( ((expression instanceof String || typeof expression==='string')&&(expression.length>100)))) {
                                                                     return await add(await expression["substr"].call(expression,0,100),"...")
                                                                } else  {
                                                                     return await (await get_global("as_lisp"))(expression)
                                                                }
                                                            } (),parent_forms:[],source_name:opts.source_name,invalid:true
                                                        }
                                                    }
                                                } ();
                                                if (check_true (opts.error_report)){
                                                      return await (async function(){
                                                        let __array_op_rval__155=opts.error_report;
                                                         if (__array_op_rval__155 instanceof Function){
                                                            return await __array_op_rval__155(error_data) 
                                                        } else {
                                                            return[__array_op_rval__155,error_data]
                                                        }
                                                    })()
                                                } else {
                                                      return await console.error("Compilation Error: ",error_data)
                                                };
                                                 compiled=[{
                                                    error:true
                                                },null]
                                            }
                                        } 
                                    }
                                })()
                            };
                             return  await async function(){
                                if (check_true( (null==compiled))) {
                                     return null
                                } else if (check_true( (compiled['0'].namespace&&await not((compiled['0'].namespace===namespace))&&parent_environment))) {
                                     return await parent_environment["evaluate_local"].call(parent_environment,compiled,ctx,await add(new Object(),opts,{
                                        compiled_source:true
                                    }))
                                } else if (check_true( (compiled['0'].namespace&&await not((compiled['0'].namespace===namespace))))) {
                                     if (check_true (children[compiled['0'].namespace])){
                                          return await (async function() {
                                            {
                                                 let __call_target__=children[compiled['0'].namespace], __call_method__="evaluate_local";
                                                return await __call_target__[__call_method__].call(__call_target__,compiled,ctx,await add(new Object(),opts,{
                                                    compiled_source:true
                                                }))
                                            } 
                                        })()
                                    } else throw new EvalError(("unknown namespace "+compiled['0'].namespace+" assignment"));
                                    
                                } else  {
                                    if (check_true (opts.on_compilation_complete)){
                                         await (async function(){
                                            let __array_op_rval__156=opts.on_compilation_complete;
                                             if (__array_op_rval__156 instanceof Function){
                                                return await __array_op_rval__156(compiled) 
                                            } else {
                                                return[__array_op_rval__156,compiled]
                                            }
                                        })()
                                    };
                                    await (async function(){
                                        try /* TRY COMPLEX */ {
                                            if (check_true (((compiled instanceof Array)&&(compiled['0'] instanceof Object)&&compiled['0'].ctype&&await not((compiled['0'].ctype instanceof String || typeof compiled['0'].ctype==='string'))))){
                                                 await async function(){
                                                    compiled['0']["ctype"]=await subtype(compiled['0'].ctype);
                                                    return compiled['0'];
                                                    
                                                }()
                                            };
                                             return  result=await async function(){
                                                if (check_true(compiled.error)) {
                                                     throw new Error((await get_global("indirect_new"))(compiled.error,compiled.message));
                                                    
                                                } else if (check_true( (compiled['0'].ctype&&(await (await get_global("contains?"))("block",compiled['0'].ctype)||(compiled['0'].ctype==="assignment")||(compiled['0'].ctype==="__!NOT_FOUND!__"))))) {
                                                     if (check_true (await (async function(){
                                                        let __array_op_rval__159=compiled['0'].has_lisp_globals;
                                                         if (__array_op_rval__159 instanceof Function){
                                                            return await __array_op_rval__159() 
                                                        } else {
                                                            return[__array_op_rval__159]
                                                        }
                                                    })())){
                                                        await async function(){
                                                            compiled[1]=new AsyncFunction("Environment",("{ "+compiled['1']+"}"));
                                                            return compiled;
                                                            
                                                        }();
                                                         return  await (async function(){
                                                            let __array_op_rval__161=compiled['1'];
                                                             if (__array_op_rval__161 instanceof Function){
                                                                return await __array_op_rval__161(Environment) 
                                                            } else {
                                                                return[__array_op_rval__161,Environment]
                                                            }
                                                        })()
                                                    } else {
                                                        await async function(){
                                                            compiled[1]=new AsyncFunction(("{"+compiled['1']+"}"));
                                                            return compiled;
                                                            
                                                        }();
                                                         return  await (async function(){
                                                            let __array_op_rval__163=compiled['1'];
                                                             if (__array_op_rval__163 instanceof Function){
                                                                return await __array_op_rval__163() 
                                                            } else {
                                                                return[__array_op_rval__163]
                                                            }
                                                        })()
                                                    }
                                                } else if (check_true( (compiled['0'].ctype&&(("AsyncFunction"===compiled['0'].ctype)||("statement"===compiled['0'].ctype)||("objliteral"===compiled['0'].ctype))))) {
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__164=compiled['0'].has_lisp_globals;
                                                         if (__array_op_rval__164 instanceof Function){
                                                            return await __array_op_rval__164() 
                                                        } else {
                                                            return[__array_op_rval__164]
                                                        }
                                                    })())){
                                                        await async function(){
                                                            compiled[1]=new AsyncFunction("Environment",("{ return "+compiled['1']+"} "));
                                                            return compiled;
                                                            
                                                        }();
                                                         return  await (async function(){
                                                            let __array_op_rval__166=compiled['1'];
                                                             if (__array_op_rval__166 instanceof Function){
                                                                return await __array_op_rval__166(Environment) 
                                                            } else {
                                                                return[__array_op_rval__166,Environment]
                                                            }
                                                        })()
                                                    } else {
                                                        await async function(){
                                                            compiled[1]=new AsyncFunction(("{ return "+compiled['1']+"}"));
                                                            return compiled;
                                                            
                                                        }();
                                                         return  await (async function(){
                                                            let __array_op_rval__168=compiled['1'];
                                                             if (__array_op_rval__168 instanceof Function){
                                                                return await __array_op_rval__168() 
                                                            } else {
                                                                return[__array_op_rval__168]
                                                            }
                                                        })()
                                                    }
                                                } else if (check_true( (compiled['0'].ctype&&("Function"===compiled['0'].ctype)))) {
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__169=compiled['0'].has_lisp_globals;
                                                         if (__array_op_rval__169 instanceof Function){
                                                            return await __array_op_rval__169() 
                                                        } else {
                                                            return[__array_op_rval__169]
                                                        }
                                                    })())){
                                                        await async function(){
                                                            compiled[1]=new Function("Environment",("{ return "+compiled['1']+"} "));
                                                            return compiled;
                                                            
                                                        }();
                                                         return  await (async function(){
                                                            let __array_op_rval__171=compiled['1'];
                                                             if (__array_op_rval__171 instanceof Function){
                                                                return await __array_op_rval__171(Environment) 
                                                            } else {
                                                                return[__array_op_rval__171,Environment]
                                                            }
                                                        })()
                                                    } else {
                                                        await async function(){
                                                            compiled[1]=new Function(("{ return "+compiled['1']+"}"));
                                                            return compiled;
                                                            
                                                        }();
                                                         return  await (async function(){
                                                            let __array_op_rval__173=compiled['1'];
                                                             if (__array_op_rval__173 instanceof Function){
                                                                return await __array_op_rval__173() 
                                                            } else {
                                                                return[__array_op_rval__173]
                                                            }
                                                        })()
                                                    }
                                                } else  {
                                                     return compiled['1']
                                                }
                                            } ()
                                        }  catch(__exception__157) {
                                              if (__exception__157 instanceof Error) {
                                                 let e=__exception__157;
                                                 {
                                                    await env_log("caught error: ",e.name,e.message);
                                                    if (check_true (opts.error_report)){
                                                         await (async function(){
                                                            let __array_op_rval__174=opts.error_report;
                                                             if (__array_op_rval__174 instanceof Function){
                                                                return await __array_op_rval__174({
                                                                    error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack
                                                                }) 
                                                            } else {
                                                                return[__array_op_rval__174,{
                                                                    error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack
                                                                }]
                                                            }
                                                        })()
                                                    };
                                                    result=e;
                                                    if (check_true ((ctx&&ctx.in_try)))throw result;
                                                    
                                                }
                                            } 
                                        }
                                    })();
                                     return  result
                                }
                            } ()
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["evaluate_local"]=evaluate_local;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let evaluate=async function(expression,ctx,opts) {
                            {
                                if (check_true ((namespace===active_namespace))){
                                      return await evaluate_local(expression,ctx,opts)
                                } else {
                                      return await (async function() {
                                        {
                                             let __call_target__=children[active_namespace], __call_method__="evaluate";
                                            return await __call_target__[__call_method__].call(__call_target__,expression,ctx,opts)
                                        } 
                                    })()
                                }
                            }
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["evaluate"]=evaluate;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let eval_struct=async function(lisp_struct,ctx,opts) {
                            let rval;
                            rval=null;
                            if (check_true (lisp_struct instanceof Function)){
                                 rval=await (async function(){
                                    let __array_op_rval__177=lisp_struct;
                                     if (__array_op_rval__177 instanceof Function){
                                        return await __array_op_rval__177() 
                                    } else {
                                        return[__array_op_rval__177]
                                    }
                                })()
                            } else {
                                 rval=await evaluate(lisp_struct,ctx,await add({
                                    json_in:true
                                },(opts||new Object())))
                            };
                             return  rval
                        };
                        ;
                         await async function(){
                            Environment.global_ctx.scope["eval_struct"]=eval_struct;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let built_ins=["MAX_SAFE_INTEGER","LispSyntaxError","sub_type","__VERBOSITY__","int","float","values","pairs","keys","take","prepend","first","last","length","conj","reverse","map","bind","to_object","to_array","slice","rest","second","third","chop","chomp","not","push","pop","list","flatten","jslambda","join","lowercase","uppercase","log","split","split_by","is_object?","is_array?","is_number?","is_function?","is_set?","is_element?","is_string?","is_nil?","is_regex?","is_date?","ends_with?","starts_with?","blank?","contains?","make_set","eval_exp","indirect_new","range","add","merge_objects","index_of","resolve_path","delete_prop","min_value","max_value","interlace","trim","assert","unquotify","or_args","special_operators","defclog","NOT_FOUND","check_external_env_default","built_ins"];
                        ;
                        await async function(){
                            Environment.global_ctx.scope["built_ins"]=built_ins;
                            return Environment.global_ctx.scope;
                            
                        }();
                        let set_compiler=async function(compiler_function) {
                            compiler=compiler_function;
                            compiler_operators=await (async function(){
                                let __array_op_rval__180=compiler;
                                 if (__array_op_rval__180 instanceof Function){
                                    return await __array_op_rval__180([],{
                                        special_operators:true,env:Environment
                                    }) 
                                } else {
                                    return[__array_op_rval__180,[],{
                                        special_operators:true,env:Environment
                                    }]
                                }
                            })();
                            await async function(){
                                Environment.global_ctx.scope["compiler"]=compiler;
                                return Environment.global_ctx.scope;
                                
                            }();
                            await (await get_global("register_feature"))("compiler");
                             return  compiler
                        };
                        ;
                        await async function(){
                            Environment.global_ctx.scope["set_compiler"]=set_compiler;
                            return Environment.global_ctx.scope;
                            
                        }();
                        await async function(){
                            Environment.global_ctx.scope["clone"]=async function(val) {
                                if (check_true ((val===Environment))){
                                      return Environment
                                } else {
                                      return await clone(val,0,Environment)
                                }
                            };
                            return Environment.global_ctx.scope;
                            
                        }();
                        await async function(){
                            Environment["get_global"]=get_global;
                            Environment["set_global"]=set_global;
                            Environment["symbol_definition"]=symbol_definition;
                            Environment["namespace"]=namespace;
                            return Environment;
                            
                        }();
                        let children=(opts.children||new Object());
                        ;
                        let children_declarations=(opts.children_declarations||new Object());
                        ;
                        if (check_true ((namespace==="core"))){
                            if (check_true (await not(Environment.global_ctx.scope["*env_config*"]))){
                                 await async function(){
                                    Environment.global_ctx.scope["*env_config*"]={
                                        export:{
                                            save_path:"js/juno.js",default_namespace:"core",include_source:false
                                        },features:[],imports:new Object()
                                    };
                                    return Environment.global_ctx.scope;
                                    
                                }()
                            };
                            let current_namespace=function() {
                                 return  active_namespace
                            };
                            ;
                            let create_namespace=async function(name,options) {
                                 return  await async function(){
                                    if (check_true( await not((name instanceof String || typeof name==='string')))) {
                                         throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true( children[name])) {
                                         throw new EvalError("namespace already exists");
                                        
                                    } else  {
                                        let child_env;
                                        options=(options||new Object());
                                        child_env=await dlisp_env({
                                            parent_environment:Environment,namespace:name,contained:options.contained
                                        });
                                        if (check_true (child_env.evaluate)){
                                            await child_env["set_compiler"].call(child_env,compiler);
                                            await async function(){
                                                children[name]=child_env;
                                                return children;
                                                
                                            }();
                                            await async function(){
                                                children_declarations[name]=new Object();
                                                return children_declarations;
                                                
                                            }();
                                            await child_env["evaluate"].call(child_env,"(for_each (sym built_ins) (delete_prop Environment.context.scope sym))");
                                            if (check_true (options.contained)){
                                                 await async function(){
                                                    let __target_obj__188=children_declarations[name];
                                                    __target_obj__188["contained"]=true;
                                                    return __target_obj__188;
                                                    
                                                }()
                                            };
                                            await async function(){
                                                let __target_obj__189=children_declarations[name];
                                                __target_obj__189["serialize_with_image"]=await (async function () {
                                                     if (check_true ((false===options.serialize_with_image))){
                                                          return false
                                                    } else {
                                                          return true
                                                    } 
                                                })();
                                                return __target_obj__189;
                                                
                                            }();
                                             return  name
                                        } else {
                                            await console.error("ENV: couldn't create the child environment. Received: ",child_env);
                                            throw new EvalError(("unable to create namespace "+name));
                                            
                                        }
                                    }
                                } ()
                            };
                            ;
                            let set_namespace=async function(name) {
                                 return  await async function(){
                                    if (check_true( await not((name instanceof String || typeof name==='string')))) {
                                         throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true( (await not(("core"===name))&&(null==children[name])))) {
                                         throw new EvalError(("namespace "+name+" doesn't exist"));
                                        
                                    } else  {
                                        if (check_true ((name==="core"))){
                                             active_namespace="core"
                                        } else {
                                             active_namespace=name
                                        };
                                         return  name
                                    }
                                } ()
                            };
                            ;
                            let delete_namespace=async function(name) {
                                 return  await async function(){
                                    if (check_true( await not((name instanceof String || typeof name==='string')))) {
                                         throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true( ("core"===name))) {
                                         throw new EvalError("core namespace cannot be removed");
                                        
                                    } else if (check_true( (null==children[name]))) {
                                         throw new EvalError(("namespace "+name+"doesn't exist"));
                                        
                                    } else if (check_true( (name===await current_namespace()))) {
                                         throw new EvalError("namespace is the current namespace");
                                        
                                    } else  {
                                        await (await get_global("remove_prop"))(children,name);
                                        await (async function() {
                                            let __for_body__192=async function(k) {
                                                if (check_true (await (await get_global("starts_with?"))(k,name))){
                                                     return  await (await get_global("remove_prop"))(Environment.global_ctx._star_env_config_star_.imports,k)
                                                }
                                            };
                                            let __array__193=[],__elements__191=(await resolve_path(["global_ctx","scope","*env_config*","imports"],Environment)||[]);
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__190 in __elements__191) {
                                                __array__193.push(await __for_body__192(__elements__191[__iter__190]));
                                                if(__BREAK__FLAG__) {
                                                     __array__193.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__193;
                                             
                                        })();
                                         return  name
                                    }
                                } ()
                            };
                            ;
                             await async function(){
                                Environment.global_ctx.scope["create_namespace"]=create_namespace;
                                Environment.global_ctx.scope["set_namespace"]=set_namespace;
                                Environment.global_ctx.scope["delete_namespace"]=delete_namespace;
                                Environment.global_ctx.scope["namespaces"]=function() {
                                     return   add( keys(children),"core")
                                };
                                Environment.global_ctx.scope["current_namespace"]=current_namespace;
                                return Environment.global_ctx.scope;
                                
                            }()
                        };
                        let included_globals=async function() {
                             return  {
                                definitions:{ "__VERBOSITY__":{ "description":"Set __VERBOSITY__ to a positive integer for verbose console output of system activity.","tags":["debug","compiler","environment","global"]
                            },"int":{ "usage":"value:string|number","description":"Convenience method for parseInt, should be used in map vs. directly calling parseInt, which will not work directly","tags":["conversion","number"]
                        },"float":{ "usage":"value:string|number","description":"Convenience method for parseFloat, should be used in map vs. directly calling parseFloat, which will not work directly","tags":["conversion","number"]
                    },"reverse":{ "usage":["container:list"],"description":"Returns a copy of the passed list as reversed.  The original is not changed.","tags":["list","sort","order"]
                },"to_object":{ "description":"Given an array of pairs in the form of [[key value] [key value] ...], constructs an object with the first array element of the pair as the key and the second element as the value. A single object is returned.","usage":["paired_array:array"],"tags":["conversion","object","array","list","pairs"]
            },"to_array":{ "description":"Given a container of type Array, Set, Object, or a string, it will convert the members of the container to an array form, and return a new array with the values of the provided container. In the case of an object, the keys and values will be contained in paired arrays in the returned array.  A string will be split into individual characters. If provided a different type other than the listed values above, the value will be placed in an array as a single element.","usage":["container:*"],"tags":["list","array","conversion","set","object","string","pairs"]
        },"is_object?":{ "description":"for the given value x, returns true if x is an Javascript object type.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
    },"is_array?":{ "description":"for the given value x, returns true if x is an array.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_number?":{ "description":"for the given value x, returns true if x is a number.","usage":["arg:value"],"tags":["type","condition","subtype","value","what","function"]
},"is_function?":{ "description":"for the given value x, returns true if x is a function.","usage":["arg:value"],"tags":["type","condition","subtype","value","what","function"]
},"is_set?":{ "description":"for the given value x, returns true if x is a set.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_element?":{ "description":"for the given value x, returns true if x is an Element object","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_string?":{ "description":"for the given value x, returns true if x is a String object","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_nil?":{ "name":"is_nil?","fn_args":"(\"value\")","description":"for the given value x, returns true if x is exactly equal to nil.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_regex?":{ "name":"is_regex?","fn_args":"(x)","description":"for the given value x, returns true if x is a Javascript regex object","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_date?":{ "description":"for the given value x, returns true if x is a Date object.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"ends_with?":{ "description":"for a given string or array, checks to see if it ends with the given start_value.  Non string args return false.","usage":["end_value:value","collection:array|string"],"tags":["string","text","list","array","filter","reduce"]
},"starts_with?":{ "description":"for a given string or array, checks to see if it starts with the given start_value.  Non string args return false.","usage":["start_value:value","collection:array|string"],"tags":["string","text","list","array","filter","reduce","begin"]
},"interlace":{ "usage":["list0:array","list1:array","listn?:array"],"description":"Returns a list containing a consecutive values from each list, in argument order.  I.e. list0.0 list1.0 listn.0 list0.1 list1.1 listn.1 ...","tags":["list","array","join","merge"]
},"assert":{ "name":"assert","fn_args":"(assertion_form failure_message)","description":"If the evaluated assertion form is true, the result is returned, otherwise an EvalError is thrown with the optionally provided failure message.","usage":["form:*","failure_message:string?"],"tags":["true","error","check","debug","valid","assertion"]
},"unquotify":{ "description":"Removes binding symbols and quotes from a supplied value.  For use in compile time function such as macros.","usage":["val:string"],"tags":["macro","quote","quotes","desym"]
},"symbol_definition":{ "description":"Given a symbol name and an optional namespace, either as a fully qualified path or via the target_namespace argument, returns definition information about the retquested symbol.  Used primarily by the compiler to find metadata for a specific symbol during compilation.","usage":["symname:string","namespace:string"],"tags":["compiler","symbols","namespace","search","context","environment"]
},"compile":{ "description":"Compiles the given JSON or quoted lisp and returns a string containing the lisp form or expression as javascript.<br>If passed the option { meta: true } , an array is returned containing compilation metadata in element 0 and the compiled code in element 1.","usage":["json_expression:*","opts:object"],"tags":["macro","quote","quotes","desym"]
},"defmacro":{ "eval_when":{ "compile_time":true
}
},"desym":{ "eval_when":{ "compile_time":true
},"name":"desym","macro":true,"fn_args":"(val)"
},"desym_ref":{ "eval_when":{ "compile_time":true
},"name":"desym_ref","macro":true,"fn_args":"(val)"
},"deref":{ "eval_when":{ "compile_time":true
},"name":"deref","macro":true,"fn_args":"(val)","description":["=:+","If the value that the symbol references is a binding value, aka starting with '=:', then return the symbol value ","instead of the value that is referenced by the symbol. This is useful in macros where a value in a form is ","to be used for it's symbolic name vs. it's referenced value, which may be undefined if the symbol being ","de-referenced is not bound to any value."],"tags":["symbol","reference","syntax","dereference","desym"],"usage":["symbol:string"]
},"when":{ "eval_when":{ "compile_time":true
},"name":"when","macro":true,"fn_args":"(condition \"&\" mbody)","description":["=:+","Similar to if, but the body forms are evaluated in an implicit progn, if the condition form or expression is true. ","The function when will return the last form value.  There is no evaluation of the body if the conditional expression ","is false."],"usage":["condition:*","body:*"],"tags":["if","condition","logic","true","progn","conditional"]
},"if_compile_time_defined":{ "eval_when":{ "compile_time":true
},"name":"if_compile_time_defined","macro":true,"fn_args":"(quoted_symbol exists_form not_exists_form)","description":"If the provided quoted symbol is a defined symbol at compilation time, the exists_form will be compiled, otherwise the not_exists_form will be compiled.","tags":["compile","defined","global","symbol","reference"],"usage":["quoted_symbol:string","exists_form:*","not_exists_form:*"]
},"defexternal":{ "eval_when":{ "compile_time":true
},"name":"defexternal","macro":true,"fn_args":"(name value meta)"
},"defun":{ "eval_when":{ "compile_time":true
},"name":"defun","macro":true,"fn_args":"(name lambda_list body meta)","description":["=:+","Defines a top level function in the current environment.  Given a name, lambda_list,","body, and a meta data description, builds, compiles and installs the function in the","environment under the provided name.  The body isn't an explicit progn, and must be","within a block structure, such as progn, let or do."],"usage":["name:string:required","lambda_list:array:required","body:array:required","meta:object"],"tags":["function","lambda","define","environment"]
},"defun_sync":{ "eval_when":{ "compile_time":true
},"name":"defun_sync","macro":true,"fn_args":"(name args body meta)"
},"macroexpand":{ "name":"macroexpand","fn_args":"(quoted_form)","description":"Given a quoted form, will perform the macro expansion and return the expanded form.","usage":["quoted_form:*"],"tags":["macro","expansion","debug","compile","compilation"]
},"macroexpand_nq":{ "eval_when":{ "compile_time":true
},"name":"macroexpand_nq","macro":true,"fn_args":"(form)"
},"check_type":{ "eval_when":{ "compile_time":true
},"name":"check_type","macro":true,"fn_args":"(thing type_name error_string)","description":"If the type of thing (ascertained by sub_type) are not of the type type_name, will throw a TypeError with the optional error_string as the error message.","usage":["thing:*","type_name:string","error_string:string"],"tags":["types","validation","type","assert"]
},"get_object_path":{ "name":"get_object_path","fn_args":"(refname)"
},"do_deferred_splice":{ "name":"do_deferred_splice","fn_args":"(tree)"
},"define":{ "eval_when":{ "compile_time":true
},"name":"define","macro":true,"fn_args":"(\"&\" defs)","usage":["declaration:array","declaration:array*"],"description":["=:+","Given 1 or more declarations in the form of (symbol value ?metadata), ","creates a symbol in global scope referencing the provided value.  If a ","metadata object is provided, this is stored as a the symbol's metadata."],"tags":["symbol","reference","definition","metadata","environment"]
},"defbinding":{ "eval_when":{ "compile_time":true
},"name":"defbinding","macro":true,"fn_args":"(\"&\" args)","description":["=:+","Defines a global binding to a potentially native function.  This macro ","facilitates the housekeeping by keeping track of the source form ","used (and stored in the environment) so that the save environment ","facility can capture the source bindings and recreate it in the initializer ","function on rehydration.<br>","The macro can take an arbitrary amount of binding arguments, with the form: ","(symbol_name (fn_to_bind_to this))"],"usage":["binding_set0:array","binding_setN:array"],"tags":["toplevel","global","bind","environment","initialize"]
},"define_env":{ "eval_when":{ "compile_time":true
},"name":"define_env","macro":true,"fn_args":"(\"&\" defs)"
},"define_env%":{ "eval_when":{ "compile_time":true
},"name":"define_env%","macro":true,"fn_args":"(source_env_ctx \"&\" defs)"
},"type":{ "name":"type","fn_args":"(x)","usage":["value:*"],"description":"returns the type of value that has been passed.  Deprecated, and the sub_type function should be used.","tags":["types","value","what"]
},"destructure_list":{ "name":"destructure_list","fn_args":"(elems)"
},"destructuring_bind":{ "eval_when":{ "compile_time":true
},"name":"destructuring_bind","macro":true,"fn_args":"(bind_vars expression \"&\" forms)"
},"split_by_recurse":{ "name":"split_by_recurse","fn_args":"(token container)","usage":["token:string","container:string|array"],"description":["=:+","Like split_by, splits the provided container at ","each token, returning an array of the split ","items.  If the container is an array, the function ","will recursively split the strings in the array ","and return an array containing the split values ","of that array.  The final returned array may contain ","strings and arrays."],"tags":["split","nested","recursion","array","string"]
},"reduce":{ "eval_when":{ "compile_time":true
},"name":"reduce","macro":true,"fn_args":"((elem item_list) form)","description":"Provided a first argument as a list which contains a binding variable name and a list, returns a list of all non-null return values that result from the evaluation of the second list.","usage":[["binding-elem:symbol","values:list"],["form:list"]],"tags":["filter","remove","select","list","array"]
},"is_reference?":{ "eval_when":{ "compile_time":true
},"name":"is_reference?","macro":true,"fn_args":"(val)"
},"scan_str":{ "name":"scan_str","fn_args":"(regex search_string)","description":["=:+","Using a provided regex and a search string, performs a regex ","exec using the provided regex argument on the string argument. ","Returns an array of results or an empty array, with matched ","text, index, and any capture groups."],"usage":["regex:RegExp","text:string"],"tags":["regex","string","match","exec","array"]
},"remove_prop":{ "name":"remove_prop","fn_args":"(obj key)","usage":["obj:object","key:*"],"description":"Similar to delete, but returns the removed value if the key exists, otherwise returned undefined.","tags":["object","key","value","mutate"]
},"object_methods":{ "name":"object_methods","fn_args":"(obj)","description":"Given a instantiated object, get all methods (functions) that the object and it's prototype chain contains.","usage":["obj:object"],"tags":["object","methods","functions","introspection","keys"]
},"expand_dot_accessor":{ "name":"expand_dot_accessor","fn_args":"(val ctx)"
},"getf_ctx":{ "name":"getf_ctx","fn_args":"(ctx name _value)"
},"setf_ctx":{ "name":"setf_ctx","fn_args":"(ctx name value)"
},"set_path":{ "name":"set_path","fn_args":"(path obj value)"
},"minmax":{ "name":"minmax","fn_args":"(container)"
},"gen_multiples":{ "name":"gen_multiples","fn_args":"(len multiple?)"
},"path_multiply":{ "name":"path_multiply","fn_args":"(path multiple?)"
},"splice_in_return_b":{ "name":"splice_in_return_b","fn_args":"(js_tree _ctx _depth)"
},"aif":{ "eval_when":{ "compile_time":true
},"name":"aif","macro":true,"fn_args":"(test_expr eval_when_true eval_when_false)","description":["=:+","Anaphoric If - This macro defines a scope in which the symbol `it is used ","to store the evaluation of the test form or expression.  It is then available ","in the eval_when_true form and, if provided, the eval_when_false expression."],"usage":["test_expression:*","eval_when_true:*","eval_when_false:*?"],"tags":["conditional","logic","anaphoric","if","it"]
},"ifa":{ "eval_when":{ "compile_time":true
},"name":"ifa","macro":true,"fn_args":"(test thenclause elseclause)","description":"Similar to if, the ifa macro is anaphoric in binding, where the it value is defined as the return value of the test form. Use like if, but the it reference is bound within the bodies of the thenclause or elseclause.","usage":["test:*","thenclause:*","elseclause:*"],"tags":["cond","it","if","anaphoric"]
},"map_range":{ "name":"map_range","fn_args":"(n from_range to_range)","usage":["n:number","from_range:array","to_range:array"],"tags":["range","scale","conversion"],"description":["=:+","Given an initial number n, and two numeric ranges, maps n from the first range ","to the second range, returning the value of n as scaled into the second range. "]
},"range_inc":{ "name":"range_inc","fn_args":"(start end step)","description":["=:+","Givin","Similar to range, but is end inclusive: [start end] returning an array containing values from start, including end. ","vs. the regular range function that returns [start end).  ","If just 1 argument is provided, the function returns an array starting from 0, up to and including the provided value."],"usage":["start:number","end?:number","step?:number"],"tags":["range","iteration","loop"]
},"color_for_number":{ "name":"color_for_number","fn_args":"(num saturation brightness)","usage":["number:number","saturation:float","brightness:float"],"description":"Given an arbitrary integer, a saturation between 0 and 1 and a brightness between 0 and 1, return an RGB color string","tags":["ui","color","view"]
},"flatten_ctx":{ "name":"flatten_ctx","fn_args":"(ctx _var_table)","description":"Internal usage by the compiler, flattens the hierarchical context structure to a single level. Shadowing rules apply.","usage":["ctx_object:object"],"tags":["system","compiler"]
},"identify_symbols":{ "name":"identify_symbols","fn_args":"(quoted_form _state)"
},"unless":{ "eval_when":{ "compile_time":true
},"name":"unless","macro":true,"fn_args":"(condition \"&\" forms)","description":"opposite of if, if the condition is false then the forms are evaluated","usage":["condition:array","forms:array"],"tags":["if","not","ifnot","logic","conditional"]
},"use_quoted_initializer":{ "eval_when":{ "compile_time":true
},"name":"use_quoted_initializer","macro":true,"fn_args":"(\"&\" forms)","description":" \nuse_quoted_initializer is a macro that preserves the source form in the symbol definition object. \nWhen the environment is saved, any source forms that wish to be preserved through the \nserialization process should be in the body of this macro.  This is a necessity for global \nobjects that hold callable functions, or functions or structures that require initializers,\nsuch as things that connect or use environmental resources.\n","usage":["forms:array"],"tags":["compilation","save_env","export","source","use","compiler","compile"]
},"random_int":{ "name":"random_int","fn_args":"(\"&\" \"args\")","description":"Returns a random integer between 0 and the argument.  If two arguments are provided then returns an integer between the first argument and the second argument.","usage":["arg1:number","arg2?:number"],"tags":["rand","number","integer"]
},"resolve_multi_path":{ "name":"resolve_multi_path","fn_args":"(path obj not_found)","tags":["path","wildcard","tree","structure"],"usage":["path:array","obj:object","not_found:?*"],"description":"Given a list containing a path to a value in a nested array, return the value at the given path. If the value * is in the path, the path value is a wild card if the passed object structure at the path position is a vector or list."
},"symbol_tree":{ "name":"symbol_tree","fn_args":"(quoted_form _state _current_path)","description":"Given a quoted form as input, isolates the symbols of the form in a tree structure so dependencies can be seen.","usage":["quoted_form:quote"],"tags":["structure","development","analysis"]
},"except_nil":{ "name":"except_nil","fn_args":"(\"items\")","description":"Takes the passed list or set and returns a new list that doesn't contain any undefined or nil values.  Unlike no_empties, false values and blank strings will pass through.","usage":["items:list|set"],"tags":["filter","nil","undefined","remove","no_empties"]
},"each":{ "name":"each","fn_args":"(items property)","description":["=:+","Provided a list of items, provide a property name or ","a list of property names to be extracted and returned from the source array as a new list.","If property is an array, and contains values that are arrays, those arrays will be treated as a path."],"usage":["items:list","property:string|list|function|AsyncFunction"],"tags":["pluck","element","only","list","object","property"]
},"replace":{ "name":"replace","fn_args":"(\"&\" args)","description":["=:+","Given at least 3 arguments, finds the first  argument, and replaces with the second argument, operating on the third plus argument.  ","This function will act to replace and find values in strings, arrays and objects.  When replacing values in strings, be aware that ","only the first matching value will be replaced.  To replace ALL values in strings, use a RegExp with the `g flag set, such as ","(new RegExp \"Target String\" `g).  For example, the following replaces all target values in the target string:<br>","(replace (new RegExp \"Indiana\" `g) \"Illinois\" \"The address of the location in Indiana has now been changed to 123 Main Street, Townville, Indiana.\")"],"usage":["target:string|regexp","replacement:string|number","container:string|array|object"],"tags":["replace","find","change","edit","string","array","object"]
},"cl_encode_string":{ "name":"cl_encode_string","fn_args":"(text)"
},"path_to_js_syntax":{ "name":"path_to_js_syntax","fn_args":"(comps)","description":"Used by the compiler, converts an array containing the components of a path to Javascript syntax, which is then returned as a string.","usage":["comps:array"],"tags":["compiler","path","js","javascript"]
},"first_is_upper_case?":{ "name":"first_is_upper_case?","fn_args":"(str_val)","description":"Returns true if the first character of the provided string is an uppercase value in the range [A-Z]. ","tags":["string","case","uppercase","capitalized"]
},"safe_access_2":{ "name":"safe_access_2","fn_args":"(token ctx sanitizer_fn)"
},"safe_access":{ "name":"safe_access","fn_args":"(token ctx sanitizer_fn)"
},"compile_to_js":{ "eval_when":{ "compile_time":true
},"name":"compile_to_js","macro":true,"fn_args":"(quoted_form)","description":["=:+","Given a quoted form, returns an array with two elements, element 0 is the compilation metadata, ","and element 1 is the output Javascript as a string."],"usage":["quoted_form:*"],"tags":["compilation","source","javascript","environment"]
},"evaluate_compiled_source":{ "eval_when":{ "compile_time":true
},"name":"evaluate_compiled_source","macro":true,"fn_args":"(compiled_source)","description":["=:+","The macro evaluate_compiled_source takes the direct output of the compiler, ","which can be captured using the macro compile_to_js, and performs the ","evaluation of the compiled source, thereby handling the second half of the ","compile then evaluate cycle.  This call will return the results of ","the evaluation of the compiled code assembly."],"usage":["compiled_source:array"],"tags":["compilation","compile","eval","pre-compilation"]
},"form_structure":{ "name":"form_structure","fn_args":"(quoted_form max_depth)","description":["=:+","Given a form and an optional max_depth positive number, ","traverses the passed JSON form and produces a nested array structure that contains","the contents of the form classified as either a \"symbol\", \"number\", \"string\", \"boolean\", \"array\", \"object\", or the elem itself. ","The returned structure will mirror the passed structure in form, except with the leaf contents ","being replaced with generalized categorizations."],"tags":["validation","compilation","structure"],"usage":["quoted_form:*","max_depth:?number"]
},"validate_form_structure":{ "name":"validate_form_structure","fn_args":"(validation_rules quoted_form)","description":["=:+","Given a validation rule structure and a quoted form to analyze returns an object with ","two keys, valid and invalid, which are arrays containing the outcome of the rule ","evaluation, a rule_count key containing the total rules passed, and an all_passed key","which will be set to true if all rules passed, otherwise it will fail.","If the rule evaluates successfully, valid is populated with the rule path, ","otherwise the rule path is placed in the invalid array.<br><br>","Rule structure is as follows:<br><code>","[ [path [validation validation ...] \"rule_name\"] [path [validation ...] \"rule_name\"] ]<br>","</code>","where path is an array with the index path and ","validation is a single argument lambda (fn (v) v) that must either ","return true or false. If true, the validation is considered correct, ","false for incorrect.  The result of the rule application will be put in the valid array, ","otherwise the result will be put in invalid."],"tags":["validation","rules","form","structure"],"usage":["validation_rules:array","quoted_form:*"]
},"*compiler_syntax_rules*":{ "initializer":{ "compile_let":[[[0,1,"val"],["=:list","=:is_array?"],"let allocation section"],[[0,2],["=:list",["=:fn",["=:v"],["=:not",["=:==","=:v","=:undefined"]]]],"let missing block"]],"compile_cond":[[[0],["=:list",["=:fn",["=:v"],["=:==",["=:%",["=:length",["=:rest","=:v"]],2],0]]],"cond: odd number of arguments"]],"compile_assignment":[[[0,1],["=:list",["=:fn",["=:v"],["=:not",["=:==","=:v","=:undefined"]]]],"assignment is missing target and values"],[[0,2],["=:list",["=:fn",["=:v"],["=:not",["=:==","=:v","=:undefined"]]]],"assignment is missing value"]]
}
},"compiler_source_chain":{ "name":"compiler_source_chain","fn_args":"(cpath tree sources)"
},"compiler_syntax_validation":{ "name":"compiler_syntax_validation","fn_args":"(validator_key tokens errors ctx tree)"
},"symbols":{ "eval_when":{ "compile_time":true
},"name":"symbols","macro":true,"fn_args":"()","description":"Returns an array of all defined symbols in the current evironment.","usage":[],"tags":["symbol","env","environment","global","globals"]
},"describe_all":{ "name":"describe_all","fn_args":"()","description":"Returns an object with all defined symbols as the keys and their corresponding descriptions.","usage":[],"tags":["env","environment","symbol","symbols","global","globals"]
},"is_value?":{ "name":"is_value?","fn_args":"(val)","description":"Returns true for anything that is not nil or undefined or false.","usage":["val:*"],"tags":["if","value","truthy",false,true]
},"sort":{ "name":"sort","fn_args":"(elems options)","description":["=:+","Given an array of elements, and an optional options object, returns a new sorted array.","With no options provided, the elements are sorted in ascending order.  If the key ","reversed is set to true in options, then the elements are reverse sorted. ","<br>","An optional synchronous function can be provided (defined by the comparitor key) which is expected to take ","two values and return the difference between them as can be used by the sort method of ","JS Array.  Additionally a key value can be provided as either a string (separated by dots) or as an array ","which will be used to bind (destructure) the a and b values to be compared to nested values in the elements ","of the array.","<br>","<br>","Options:<br>","reversed:boolean:if true, the elements are reverse sorted.  Note that if a comparitor function is provided, then ","this key cannot be present, as the comparitor should deal with the sorting order.<br>","key:string|array:A path to the comparison values in the provided elements. If a string, it is provided as period ","separated values.  If it is an array, each component of the array is a successive path value in the element to be ","sorted. <br>","comparitor:function:A synchronous function that is to be provided for comparison of two elements.  It should take ","two arguments, and return the difference between the arguments, either a positive or negative."],"usage":["elements:array","options:object?"],"tags":["array","sorting","order","reverse","comparison","objects"]
},"and*":{ "name":"and*","fn_args":"(\"&\" vals)","description":["=:+","Similar to and, but unlike and, values that ","are \"\" (blank) or NaN are considered to be true.","Uses is_value? to determine if the value should be considered to be true.","Returns true if the given arguments all are considered a value, ","otherwise false.  If no arguments are provided, returns undefined."],"usage":["val0:*","val1:*","val2:*"],"tags":["truth","and","logic","truthy"]
},"or*":{ "name":"or*","fn_args":"(\"&\" vals)","description":["=:+","Similar to or, but unlike or, values that ","are \"\" (blank) or NaN are considered to be true.","Uses is_value? to determine if the value should be considered to be true.","Returns true if the given arguments all are considered a value, ","otherwise false.  If no arguments are provided, returns undefined."],"usage":["val0:*","val1:*","val2:*"],"tags":["truth","or","logic","truthy"]
},"either":{ "name":"either","fn_args":"(\"&\" args)","description":["=:+","Similar to or, but unlike or, returns the first non nil ","or undefined value in the argument list whereas or returns ","the first truthy value."],"usage":["values:*"],"tags":["nil","truthy","logic","or","undefined"]
},"is_symbol?":{ "eval_when":{ "compile_time":true
},"name":"is_symbol?","macro":true,"fn_args":"(symbol_to_find)","usage":["symbol:string|*"],"description":["=:+","If provided a quoted symbol, will return true if the symbol can be found ","in the local or global contexts."],"tags":["context","env","def"]
},"get_function_args":{ "name":"get_function_args","fn_args":"(f)","description":"Given a javascript function, return a list of arg names for that function","usage":["function:function"],"tags":["function","introspect","introspection","arguments"]
},"findpaths":{ "name":"findpaths","fn_args":"(value structure)"
},"warn":{ "description":"Prefixes a warning symbol prior to the arguments to the console.  Otherwise the same as console.log.","usage":["args0:*","argsN:*"],"tags":["log","warning","error","signal","output","notify","defclog"],"initializer":["=:defclog",{ "prefix":"⚠️  "
}]
},"success":{ "description":"Prefixes a green checkmark symbol prior to the arguments to the console.  Otherwise the same as console.log.","usage":["args0:*","argsN:*"],"tags":["log","warning","notify","signal","output","ok","success","defclog"],"initializer":["=:defclog",{ "color":"green","prefix":"✓  "
}]
},"in_background":{ "eval_when":{ "compile_time":true
},"name":"in_background","macro":true,"fn_args":"(\"&\" forms)","description":["=:+","Given a form or forms, evaluates the forms in the background, with ","the function returning true immediately prior to starting the forms."],"usage":["forms:*"],"tags":["eval","background","promise","evaluation"]
},"set_compiler":{ "name":"set_compiler","fn_args":"(compiler_function)","description":["=:+","Given a compiled compiler function, installs the provided function as the ","environment's compiler, and returns the compiler function."],"usage":["compiler_function:function"],"tags":["compilation","environment","compiler"]
},"show":{ "name":"show","fn_args":"(thing)","usage":["thing:function"],"description":"Given a name to a compiled function, returns the source of the compiled function.  Otherwise just returns the passed argument.","tags":["compile","source","javascript","js","display"]
},"export_symbols":{ "eval_when":{ "compile_time":true
},"name":"export_symbols","macro":true,"fn_args":"(\"&\" args)"
},"register_feature":{ "name":"register_feature","fn_args":"(feature)","description":"Adds the provided string to the *env_config* features.  Features are used to mark what functionality is present in the environment.","tags":["environment","modules","libraries","namespaces"],"usage":["feature:string"]
},"uniq":{ "name":"uniq","fn_args":"(values handle_complex_types)","description":["=:+","Given a list of values, returns a new list with unique, deduplicated values. ","If the values list contains complex types such as objects or arrays, set the ","handle_complex_types argument to true so they are handled appropriately. "],"usage":["values:list","handle_complex_types:boolean"],"tags":["list","dedup","duplicates","unique","values"]
},"time_in_millis":{ "eval_when":{ "compile_time":true
},"name":"time_in_millis","macro":true,"fn_args":"()","usage":[],"tags":["time","milliseconds","number","integer","date"],"description":"Returns the current time in milliseconds as an integer"
},"defns":{ "name":"defns","fn_args":"(name options)","usage":["name:string","options:object"],"description":["=:+","Given a name and an optional options object, creates a new namespace ","identified by the name argument.  If the options object is provided, the following keys are available:","<br>","ignore_if_exists:boolean:If set to true, if the namespace is already defined, do not return an error ","and instead just return with the name of the requested namespace. Any other options are ignored and ","the existing namespace isn't altered.","contained:boolean:If set to true, the newly defined namespace will not have visibility to other namespaces ","beyond 'core' and itself.  Any fully qualified symbols that reference other non-core namespaces will ","fail.","serialize_with_image:boolean:If set to false, if the environment is saved, the namespace will not be ","included in the saved image file.  Default is true."],"tags":["namespace","environment","define","scope","context"]
},"use_ns":{ "eval_when":{ "compile_time":true
},"name":"use_ns","macro":true,"fn_args":"(name)","usage":["name:symbol"],"description":"Sets the current namespace to the provided name.  Returns the name of the new namespace if succesful, otherwise an Eval error is thrown","tags":["namespace","environment","scope","change","set"]
},"bind_and_call":{ "name":"bind_and_call","fn_args":"(target_object this_object method \"&\" args)","usage":["target_object:object","this_object:object","method:string","args0:*","argsn:*"],"description":"Binds the provided method of the target object with the this_object context, and then calls the object method with the optional provided arguments.","tags":["bind","object","this","context","call"]
},"import":{ "eval_when":{ "compile_time":true
},"name":"import","macro":true,"fn_args":"(\"&\" args)","description":["=:+","Load the contents of the specified source file (including path) into the Lisp environment ","in the current namespace.<br>","If the file is a Lisp source, it will be evaluated as part of the load and the final result returned.","If the file is a JS source, it will be loaded into the environment and a handle returned.","When importing non-Lisp sources (javascript or typescript), import requires a binding symbol in an array ","as the first argument.<br","The allowed extensions are .lisp, .js, .json, .juno, and if the JS platform is Deno, ",".ts is allowed.  Otherwise an EvalError will be thrown due to a non-handled file type.","Examples:<br>","Lisp/JSON: (import \"tests/compiler_tests.lisp\")<br>","JS/TS: (import (logger) \"https://deno.land/std@0.148.0/log/mod.ts\""],"tags":["compile","read","io","file","get","fetch","load"],"usage":["binding_symbols:array","filename:string"]
},"system_date_format":{ "description":"The system date format structure that is used by the system_date_formatter.If modified, the system_date_formatter, which is a Intl.DateTimeFormat object should be reinitialized by calling (new Intl.DateTimeFormat [] system_date_format).","tags":["time","date","system"]
},"system_date_formatter":{ "initializer":["=:new","=:Intl.DateTimeFormat",[],{ "weekday":"long","year":"numeric","month":"2-digit","day":"2-digit","hour":"numeric","minute":"numeric","second":"numeric","fractionalSecondDigits":3,"hourCycle":"h24","hour12":false,"timeZoneName":"short"
}],"tags":["time","date","system"],"description":"The instantiation of the system_date_format.  See system_date_format for additional information."
},"tzoffset":{ "name":"tzoffset","fn_args":"()","description":"Returns the number of seconds the local timezone is offset from GMT","usage":[],"tags":["time","date","timezone"]
},"date_components":{ "name":"date_components","fn_args":"(date_value date_formatter)","usage":["date_value:Date","date_formatter:DateTimeFormat?"],"description":"Given a date value, returns an object containing a the current time information broken down by time component. Optionally pass a Intl.DateTimeFormat object as a second argument.","tags":["date","time","object","component"]
},"formatted_date":{ "name":"formatted_date","fn_args":"(dval date_formatter)","usage":["dval:Date","date_formatter:DateTimeFormat?"],"description":"Given a date object, return a formatted string in the form of: \"yyyy-MM-d HH:mm:ss\".  Optionally pass a Intl.DateTimeFormat object as a second argument.","tags":["date","format","time","string"]
},"dtext":{ "name":"dtext","fn_args":"(default_text)","usage":["text:string","key:string?"],"description":["=:+","Given a default text string and an optional key, if a key ","exists in the global object *LANGUAGE*, return the text associated with the key. ","If no key is provided, attempts to find the default text as a key in the *LANGUAGE* object. ","If that is a nil entry, returns the default text."],"tags":["text","multi-lingual","language","translation","translate"]
},"nth":{ "name":"nth","fn_args":"(idx collection)","description":["=:+","Based on the index or index list passed as the first argument, ","and a collection as a second argument, return the specified values ","from the collection. If an index value is negative, the value ","retrieved will be at the offset starting from the end of the array, ","i.e. -1 will return the last value in the array."],"tags":["filter","select","pluck","object","list","key","array"],"usage":["idx:string|number|array","collection:list|object"]
},"readline_mod":{ "initializer":["=:dynamic_import","https://deno.land/x/readline/mod.ts"]
},"streams":{ "initializer":["=:dynamic_import","https://deno.land/std/streams/conversion.ts"]
},"repl":{ "name":"repl","fn_args":"(instream outstream opts)"
},"path":{ "initializer":["=:dynamic_import","https://deno.land/std@0.110.0/path/mod.ts"]
},"read_text_file":{ "description":"Given an accessible filename including path with read permissions returns the file contents as a string.","usage":["filename:string","options:object"],"tags":["file","read","text","input","io"],"initializer":["=:bind","=:Deno.readTextFile","=:Deno"]
},"write_text_file":{ "description":"Given a string path to a filename, an argument containing the string of text to be written, and an optional options argument write the file to the filesystem.<br><br>.The WriteFileOptions corresponds to the Deno WriteFileOptions interface","usage":["filepath:string","textdata:string","options:WriteFileOptions"],"tags":["file","write","io","text","string"],"initializer":["=:bind","=:Deno.writeTextFile","=:Deno"]
},"load":{ "name":"load","fn_args":"(filename)","description":["=:+","Compile and load the contents of the specified lisp filename (including path) into the Lisp environment. ","The file contents are expected to be Lisp source code in text format."],"tags":["compile","read","io","file"],"usage":["filename:string"]
},"with_fs_events":{ "eval_when":{ "compile_time":true
},"name":"with_fs_events","macro":true,"fn_args":"((event_binding location) body)","description":["=:+","This function sets up a watcher scope for events on a filesystem. ","The symbol passed to the event_binding is bound to new events that occur ","at the provided location.  Once an event occurs, the body forms are executed."],"usage":["event_binding:symbol","location:string","body:array"],"tags":["file","filesystem","events","io","watch"]
},"compile_buffer":{ "name":"compile_buffer","fn_args":"(input_buffer export_function_name options)","description":["=:+","Given an input lisp file, and an optional initalizer function name and options ","object, compile the lisp file into a javascript file. The options object will ","allow the specification of an output path and filename, given by the key ","output_file.  If the initializer function isn't specified it is named ","initializer, which when used with load, will be automatically called ","one the file is loaded.  Otherwise the initializer function should be ","called when after dynamically importing, using dynamic_import. If the ","options object is to be used, with a default initializer, nil should be ","used as a placeholder for the initializer_function name.<br><br>","Options are as follows:<br><br>","js_headers: array: If provided, this is an array of strings that represent","lines to be inserted at the top of the file.","include_source: boolean: If provided will append the block forms and ","expressions within the text as comments.","output_file: string: If provided the path and filename of the compiled ","javascript file to be produced.","include_boilerplate: boolean: If set to false explicity, the boilerplate","code will be not be included in the build.","<br><br>","NOTE: this function's API is unstable and subject to change due to ","the early phase of this language."],"usage":["input_file:string","initializer_function:string?","options:object?"],"tags":["compile","environment","building","javascript","lisp","file","export"]
},"compile_file":{ "name":"compile_file","fn_args":"(lisp_file export_function_name options)"
},"rebuild_env":{ "name":"rebuild_env","fn_args":"(opts)","description":["=:+","Builds the lisp environment from the Lisp sources and produces the Javascript output files ","necessary for initializing the environment. Options: <br>","source_dir:string:The directory of the Lisp sources, the default is './src'.<br>","output_dir:string:The directory to where the output Javascript files are placed.  The default is './js'.<br>","include_source:boolean:If true, the compiler will include comments of the lisp source (not fully supported yet).<br>","version_tag:string:A string based label signifying the text to use as the version.  If not specified, the version ","tag uses the format year.month.day.hour.minute.<br>"],"usage":["options:object?"],"tags":["compile","export","build","environment","javascript"]
},"build_environment_macro":{ "name":"build_environment_macro","fn_args":"(opts)"
},"*initializer*":{ "name":"core/*initializer*","fn_args":"()"
}
},declarations:{
    safety:{
        level:2
    }
},symbols:await ( async function(){let __obj__1=new Object();__obj__1["MAX_SAFE_INTEGER"]=9007199254740991;__obj__1["LispSyntaxError"]=LispSyntaxError;__obj__1["sub_type"]=subtype;__obj__1["__VERBOSITY__"]=0;__obj__1["int"]=parseInt;__obj__1["float"]=parseFloat;__obj__1["values"]=function anonymous(...args
) {
{
                                let acc = [];
                                for (let _i in args) {
                                    let value = args[_i];
                                    let type = subtype(value);
                                    if (value instanceof Set)  {
                                        acc = acc.concat(Array.from(value));
                                    } else if (type==='array') {
                                        acc = acc.concat(value);
                                    } else if (type==='object') {
                                        acc = acc.concat(Object.values(value))
                                    } else {
                                        acc = acc.concat(value);
                                    }
                                }
                                return acc;
                            }
};__obj__1["pairs"]=function anonymous(obj
) {
{
                                    if (subtype(obj)==='array') {
                                        let rval = [];
                                        for (let i = 0; i < obj.length; i+=2) {
                                            rval.push([obj[i],obj[i+1]]);
                                        }
                                        return rval;
                                    } else {
                                        let keys = Object.keys(obj);
                                        let rval = keys.reduce(function(acc,x,i) {
                                            acc.push([x,obj[x]])
                                            return acc;
                                        },[]);
                                        return rval;
                                    }
                                }
};__obj__1["keys"]=function anonymous(obj
) {
{  return Object.keys(obj);  }
};__obj__1["take"]=function anonymous(place
) {
{ return place.shift() }
};__obj__1["prepend"]=function anonymous(place,thing
) {
{ return place.unshift(thing) }
};__obj__1["first"]=function anonymous(x
) {
{ return x[0] }
};__obj__1["last"]=function anonymous(x
) {
{ return x[x.length - 1] }
};__obj__1["length"]=function anonymous(obj
) {
{
                                if(obj instanceof Array) {
                                    return obj.length;
                                } else if (obj instanceof Set) {
                                    return obj.size;
                                } else if ((obj === undefined)||(obj===null)) {
                                    return 0;
                                } else if (typeof obj==='object') {
                                    return Object.keys(obj).length;
                                } else if (typeof obj==='string') {
                                    return obj.length;
                                } 
                                return 0;
                            }
};__obj__1["conj"]=function anonymous(...args
) {
{   let list = [];
                                if (args[0] instanceof Array) {
                                    list = args[0];
                                } else {
                                    list = [args[0]];
                                }
                                args.slice(1).map(function(x) {
                                    list = list.concat(x);
                                });
                                return list;
                            }
};__obj__1["reverse"]=function anonymous(container
) {
{ return container.slice(0).reverse }
};__obj__1["map"]=async function anonymous(lambda,array_values
) {
{ try {
                                        let rval = [],
                                                tl = array_values.length;
                                        for (let i = 0; i < array_values.length; i++) {
                                            rval.push(await lambda.apply(this,[array_values[i], i, tl]));
                                         }
                                        return rval;
                                    } catch (ex) {           
                                              if (lambda === undefined || lambda === null) {
                                                    throw new ReferenceError("map: lambda argument (position 0) is undefined or nil")
                                              } else if (array_values === undefined || array_values === null) {
                                                    throw new ReferenceError("map: container argument (position 1) is undefined or nil")
                                              } else if (!(lambda instanceof Function)) {
                                                    throw new ReferenceError("map: lambda argument must be a function: received: "+ typeof lambda)
                                              } else if (!(array_values instanceof Array)) {
                                                    throw new ReferenceError("map: invalid array argument, received: " + typeof array_values)
                                              } else {
                                                    // something else just pass on the error
                                                throw ex;
                                              }
                                    }
                              }
};__obj__1["bind"]=function anonymous(func,this_arg
) {
{ return func.bind(this_arg) }
};__obj__1["to_object"]=function anonymous(array_values
) {
{
                                      let obj={}
                                      array_values.forEach((pair)=>{
                                             obj[pair[0]]=pair[1]
                                      });
                                      return obj;
                                    }
};__obj__1["to_array"]=async function(container) {
                             return  await async function(){
                                if (check_true( (container instanceof Array))) {
                                     return container
                                } else if (check_true( await (await get_global("is_set?"))(container))) {
                                    let acc=[];
                                    ;
                                    await container["forEach"].call(container,async function(v) {
                                         return  (acc).push(v)
                                    });
                                     return  acc
                                } else if (check_true( (container instanceof String || typeof container==='string'))) {
                                     return (container).split("")
                                } else if (check_true( (container instanceof Object))) {
                                     return await pairs(container)
                                } else  {
                                     return await (async function(){
                                        let __array_op_rval__30=container;
                                         if (__array_op_rval__30 instanceof Function){
                                            return await __array_op_rval__30() 
                                        } else {
                                            return[__array_op_rval__30]
                                        }
                                    })()
                                }
                            } ()
                        };__obj__1["slice"]=function(target,from,to) {
                             return    (function(){
                                if (check_true(to)) {
                                     return  target["slice"].call(target,from,to)
                                } else if (check_true(from)) {
                                     return  target["slice"].call(target,from)
                                } else  {
                                     throw new SyntaxError("slice requires 2 or 3 arguments");
                                    
                                }
                            } )()
                        };__obj__1["rest"]=function(x) {
                             return    (function(){
                                if (check_true( (x instanceof Array))) {
                                     return  x["slice"].call(x,1)
                                } else if (check_true( (x instanceof String || typeof x==='string'))) {
                                     return  x["substr"].call(x,1)
                                } else  {
                                     return null
                                }
                            } )()
                        };__obj__1["second"]=function anonymous(x
) {
{ return x[1] }
};__obj__1["third"]=function anonymous(x
) {
{ return x[2] }
};__obj__1["chop"]=function anonymous(x
) {
{ if (x instanceof Array) { return x.slice(0, x.length-1) } else { return x.substr(0,x.length-1) } }
};__obj__1["chomp"]=function anonymous(x
) {
{ return x.substr(x.length-1) }
};__obj__1["not"]=function anonymous(x
) {
{ if (check_true(x)) { return false } else { return true } }
};__obj__1["push"]=function anonymous(place,thing
) {
{ return place.push(thing) }
};__obj__1["pop"]=function anonymous(place
) {
{ return place.pop() }
};__obj__1["list"]=async function(...args) {
                             return  args
                        };__obj__1["flatten"]=function anonymous(x
) {
{ return x.flat(999999999999) } 
};__obj__1["jslambda"]=function(...args) {
                             return   ( function(){
                                let __apply_args__44= flatten(args);
                                return ( Function).apply(this,__apply_args__44)
                            })()
                        };__obj__1["join"]=function(...args) {
                             return    (function(){
                                if (check_true( (args.length===1))) {
                                     return  args['0']["join"].call(args['0'],"")
                                } else  {
                                     return  args['1']["join"].call(args['1'],args['0'])
                                }
                            } )()
                        };__obj__1["lowercase"]=function(x) {
                             return   x["toLowerCase"]()
                        };__obj__1["uppercase"]=function(x) {
                             return   x["toUpperCase"]()
                        };__obj__1["log"]=function(...args) {
                             return   ( function(){
                                return ( console.log).apply(this,args)
                            })()
                        };__obj__1["split"]=function anonymous(container,token
) {
{ return container.split(token) }
};__obj__1["split_by"]=function anonymous(token,container
) {
{ return container.split(token) }
};__obj__1["is_object?"]=function anonymous(x
) {
{ return x instanceof Object }
};__obj__1["is_array?"]=function anonymous(x
) {
{ return x instanceof Array }
};__obj__1["is_number?"]=function(x) {
                             return  ( subtype(x)==="Number")
                        };__obj__1["is_function?"]=function(x) {
                             return  (x instanceof Function)
                        };__obj__1["is_set?"]=function anonymous(x
) {
{ return x instanceof Set }
};__obj__1["is_element?"]=function anonymous(x
) {
{ return x instanceof Element }
};__obj__1["is_string?"]=function(x) {
                             return  ((x instanceof String)||(typeof x==="string"))
                        };__obj__1["is_nil?"]=async function(value) {
     return  (null===value)
};__obj__1["is_regex?"]=async function(x) {
     return  (await (await Environment.get_global("sub_type"))(x)==="RegExp")
};__obj__1["is_date?"]=function(x) {
                             return  ( sub_type(x)==="Date")
                        };__obj__1["ends_with?"]=function anonymous(val,text
) {
{ if (text instanceof Array) { return text[text.length-1]===val } else if (subtype(text)=='String') { return text.endsWith(val) } else { return false }}
};__obj__1["starts_with?"]=function anonymous(val,text
) {
{ if (text instanceof Array) { return text[0]===val } else if (subtype(text)=='String') { return text.startsWith(val) } else { return false }}
};__obj__1["blank?"]=function(val) {
                             return  ((val==null)||((val instanceof String || typeof val==='string')&&(val==="")))
                        };__obj__1["contains?"]=function anonymous(value,container
) {
{ if (!value && !container) { return false }
                           else if (container === null) { throw new TypeError("contains?: passed nil/undefined container value"); }
                           else if ((container instanceof String) || typeof container === "string") {
                                if (subtype(value) === "Number") return container.indexOf(""+value)>-1;
                                else return container.indexOf(value)>-1;
                           }
                           else if (container instanceof Array) return container.includes(value);
                           else if (container instanceof Set) return container.has(value);
                           else throw new TypeError("contains?: passed invalid container type: "+subtype(container)) }
};__obj__1["make_set"]=function(vals) {
                            if (check_true ((vals instanceof Array))){
                                  return new Set(vals)
                            } else {
                                let vtype;
                                vtype= sub_type(vals);
                                 return    (function(){
                                    if (check_true( (vtype==="Set"))) {
                                         return new Set(vals)
                                    } else if (check_true( (vtype==="object"))) {
                                         return new Set( values(vals))
                                    }
                                } )()
                            }
                        };__obj__1["meta_for_symbol"]=async function(quoted_symbol,search_mode) {
                            if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){
                                let local_data=Environment.global_ctx.scope[quoted_symbol];
                                ;
                                if (check_true (search_mode)){
                                      return await async function(){
                                        if (check_true(local_data)) {
                                             return [await (await get_global("add"))({
                                                namespace:namespace,name:quoted_symbol,type:await subtype(local_data)
                                            },await (async function() {
                                                let it;
                                                it=Environment.definitions[quoted_symbol];
                                                if (check_true (it)){
                                                      return it
                                                } else {
                                                      return new Object()
                                                }
                                            } )())]
                                        } else if (check_true(parent_environment)) {
                                             return await (async function() {
                                                {
                                                     let __call_target__=await parent_environment["meta_for_symbol"].call(parent_environment,quoted_symbol,true), __call_method__="flat";
                                                    return await __call_target__[__call_method__].call(__call_target__,1)
                                                } 
                                            })()
                                        } else if (check_true( (await length(await keys(children))>0))) {
                                            let __collector;
                                            let __result;
                                            let __action;
                                            __collector=[];
                                            __result=null;
                                            __action=async function(details) {
                                                 return  details
                                            };
                                            ;
                                            await (async function() {
                                                let __for_body__84=async function(__item) {
                                                    __result=await __action(__item);
                                                    if (check_true (__result)){
                                                          return (__collector).push(__result)
                                                    }
                                                };
                                                let __array__85=[],__elements__83=await (async function() {
                                                    let __for_body__88=async function(child_data) {
                                                         return  await child_data['1']["meta_for_symbol"].call(child_data['1'],quoted_symbol)
                                                    };
                                                    let __array__89=[],__elements__87=await pairs(children);
                                                    let __BREAK__FLAG__=false;
                                                    for(let __iter__86 in __elements__87) {
                                                        __array__89.push(await __for_body__88(__elements__87[__iter__86]));
                                                        if(__BREAK__FLAG__) {
                                                             __array__89.pop();
                                                            break;
                                                            
                                                        }
                                                    }return __array__89;
                                                     
                                                })();
                                                let __BREAK__FLAG__=false;
                                                for(let __iter__82 in __elements__83) {
                                                    __array__85.push(await __for_body__84(__elements__83[__iter__82]));
                                                    if(__BREAK__FLAG__) {
                                                         __array__85.pop();
                                                        break;
                                                        
                                                    }
                                                }return __array__85;
                                                 
                                            })();
                                             return  __collector
                                        }
                                    } ()
                                } else {
                                    quoted_symbol=await (async function () {
                                         if (check_true (await (await get_global("starts_with?"))("=:",quoted_symbol))){
                                              return await quoted_symbol["substr"].call(quoted_symbol,2)
                                        } else {
                                              return quoted_symbol
                                        } 
                                    })();
                                    {
                                        let it;
                                        it=Environment.definitions[quoted_symbol];
                                        if (check_true (it)){
                                              return await (await get_global("add"))({
                                                namespace:namespace,type:await sub_type(local_data),name:quoted_symbol
                                            },it)
                                        } else {
                                              return 
                                        }
                                    }
                                }
                            }
                        };__obj__1["describe"]=async function(quoted_symbol,search_mode) {
                            {
                                let internal_results=await meta_for_symbol(quoted_symbol,true);
                                ;
                                if (check_true (((internal_results instanceof Array)&&internal_results['0']))){
                                     if (check_true (search_mode)){
                                          return internal_results
                                    } else {
                                          return await first(internal_results)
                                    }
                                } else {
                                    let external_results=await get_outside_global(quoted_symbol);
                                    ;
                                    if (check_true (external_results)){
                                          return {
                                            location:"external",type:await subtype(external_results)
                                        }
                                    } else {
                                          return null
                                    }
                                }
                            }
                        };__obj__1["undefine"]=function(quoted_symbol) {
                            if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){
                                let namespace_identity;
                                let parent_call;
                                let child_call;
                                let target_symbol;
                                namespace_identity=(quoted_symbol).split("/");
                                parent_call=null;
                                child_call=null;
                                target_symbol=null;
                                ;
                                 return    (function(){
                                    if (check_true( (((namespace_identity.length===1)&&Environment.global_ctx.scope[namespace_identity['0']])||((namespace_identity.length>1)&&(namespace_identity['0']===namespace))))) {
                                        target_symbol= ( function () {
                                             if (check_true ((namespace_identity.length>1))){
                                                  return namespace_identity['1']
                                            } else {
                                                  return namespace_identity['0']
                                            } 
                                        })();
                                         ( get_global("delete_prop"))(Environment.definitions,target_symbol);
                                        if (check_true (Environment.global_ctx.scope[target_symbol])){
                                              return  ( get_global("delete_prop"))(Environment.global_ctx.scope,target_symbol)
                                        } else {
                                              return false
                                        }
                                    } else if (check_true( ((namespace_identity.length>1)&&parent_environment))) {
                                        parent_call= parent_environment["get_global"].call(parent_environment,"undefine");
                                         return  (parent_call)(quoted_symbol)
                                    } else if (check_true( ((namespace_identity.length>1)&&children[namespace_identity['0']]))) {
                                        child_call= ( function() {
                                            {
                                                 let __call_target__=children[namespace_identity['0']], __call_method__="get_global";
                                                return  __call_target__[__call_method__].call(__call_target__,"undefine")
                                            } 
                                        })();
                                         return   child_call(quoted_symbol)
                                    } else  {
                                         return false
                                    }
                                } )()
                            } else throw new SyntaxError("undefine requires a quoted symbol");
                            
                        };__obj__1["eval_exp"]=async function(expression) {
                            await console.log("EVAL:",expression);
                             return  await (async function(){
                                let __array_op_rval__93=expression;
                                 if (__array_op_rval__93 instanceof Function){
                                    return await __array_op_rval__93() 
                                } else {
                                    return[__array_op_rval__93]
                                }
                            })()
                        };__obj__1["indirect_new"]=function anonymous(...args
) {
{
                                    let targetClass = args[0];
                                    if (subtype(targetClass)==="String") {
                                        let tmpf=new Function("{ return "+targetClass+" }");
                                        targetClass = tmpf();
                                    }
                                    if (args.length==1) {
                                        let f = function(Class) {
                                            return new (Function.prototype.bind.apply(Class, args));
                                        }
                                        let rval = f.apply(this,[targetClass]);
                                        return rval;
                                    } else {
                                        let f = function(Class) {
                                            return new (Function.prototype.bind.apply(Class, args));
                                        }
                                        let rval = f.apply(this,[targetClass].concat(args.slice(1)));
                                        return rval;
                                    }}
};__obj__1["range"]=function(...args) {
                            let from_to;
                            let step;
                            let idx;
                            let acc;
                            from_to= ( function () {
                                 if (check_true (args['1'])){
                                      return [parseInt(args['0']),parseInt(args['1'])]
                                } else {
                                      return [0,parseInt(args['0'])]
                                } 
                            })();
                            step= ( function () {
                                 if (check_true (args['2'])){
                                      return parseFloat(args['2'])
                                } else {
                                      return 1
                                } 
                            })();
                            idx=from_to['0'];
                            acc=[];
                             ( function(){
                                 let __test_condition__96=function() {
                                     return  (idx<from_to['1'])
                                };
                                let __body_ref__97=function() {
                                    (acc).push(idx);
                                     return  idx+=step
                                };
                                let __BREAK__FLAG__=false;
                                while( __test_condition__96()) {
                                     __body_ref__97();
                                     if(__BREAK__FLAG__) {
                                         break;
                                        
                                    }
                                } ;
                                
                            })();
                             return  acc
                        };__obj__1["add"]=function anonymous(...args
) {
{
                                let acc;
                                if (typeof args[0]==="number") {
                                    acc = 0;
                                } else if (args[0] instanceof Array) {
                                    return args[0].concat(args.slice(1));
                                } else if (typeof args[0]==='object') {
                                   let rval = {};
                                   for (let i in args) {
                                        if (typeof args[i] === 'object') {
                                            for (let k in args[i]) {
                                                rval[k] = args[i][k];
                                            }
                                        }
                                   }
                                   return rval;
                                } else {
                                    acc = "";
                                }
                                for (let i in args) {
                                    acc += args[i];
                                }
                                return acc;
                             }
};__obj__1["merge_objects"]=function anonymous(x
) {
{
                                    let rval = {};
                                    for (let i in x) {
                                        if (typeof i === 'object') {
                                            for (let k in x[i]) {
                                                rval[k] = x[i][k];
                                            }
                                        }
                                    }
                                    return rval;
                                 }
};__obj__1["index_of"]=function anonymous(value,container
) {
{ return container.indexOf(value) }
};__obj__1["resolve_path"]=function anonymous(path,obj
) {
{
                                        if (typeof path==='string') {
                                            path = path.split(".");
                                        }
                                        let s=obj;
                                        return path.reduce(function(prev, curr) {
                                            return prev ? prev[curr] : undefined
                                        }, obj || {})
                                    }
};__obj__1["delete_prop"]=function anonymous(obj,...args
) {
{
                                        if (args.length == 1) {
                                            return delete obj[args[0]];
                                        } else {
                                            while (args.length > 0) {
                                                let prop = args.shift();
                                                delete obj[prop];
                                            }
                                        }
                                        return obj;
                                    }
};__obj__1["min_value"]=function anonymous(elements
) {
{ return Math.min(...elements); }
};__obj__1["max_value"]=function anonymous(elements
) {
{ return Math.max(...elements); }
};__obj__1["interlace"]=async function(...args) {
                            let min_length;
                            let rlength_args;
                            let rval;
                            min_length=await min_value(await map(length,args));
                            rlength_args=await range(await length(args));
                            rval=[];
                            await (async function() {
                                let __for_body__108=async function(i) {
                                     return  await (async function() {
                                        let __for_body__112=async function(j) {
                                             return  (rval).push(await (async function(){
                                                let __targ__114=args[j];
                                                if (__targ__114){
                                                     return(__targ__114)[i]
                                                } 
                                            })())
                                        };
                                        let __array__113=[],__elements__111=rlength_args;
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__110 in __elements__111) {
                                            __array__113.push(await __for_body__112(__elements__111[__iter__110]));
                                            if(__BREAK__FLAG__) {
                                                 __array__113.pop();
                                                break;
                                                
                                            }
                                        }return __array__113;
                                         
                                    })()
                                };
                                let __array__109=[],__elements__107=await range(min_length);
                                let __BREAK__FLAG__=false;
                                for(let __iter__106 in __elements__107) {
                                    __array__109.push(await __for_body__108(__elements__107[__iter__106]));
                                    if(__BREAK__FLAG__) {
                                         __array__109.pop();
                                        break;
                                        
                                    }
                                }return __array__109;
                                 
                            })();
                             return  rval
                        };__obj__1["trim"]=function(x) {
                             return   x["trim"]()
                        };__obj__1["assert"]=async function(assertion_form,failure_message) {
    if (check_true (assertion_form)){
          return assertion_form
    } else throw new EvalError((failure_message||"assertion failure"));
    
};__obj__1["unquotify"]=async function(val) {
                            let dval;
                            dval=val;
                            if (check_true (await (await get_global("starts_with?"))("\"",dval))){
                                 dval=await dval["substr"].call(dval,1,(dval.length-2))
                            };
                            if (check_true (await (await get_global("starts_with?"))("=:",dval))){
                                 dval=await dval["substr"].call(dval,2)
                            };
                             return  dval
                        };__obj__1["or_args"]=async function(argset) {
                            let is_true;
                            is_true=false;
                            await (async function() {
                                let __for_body__124=async function(elem) {
                                    if (check_true (elem)){
                                        is_true=true;
                                        __BREAK__FLAG__=true;
                                        return
                                    }
                                };
                                let __array__125=[],__elements__123=argset;
                                let __BREAK__FLAG__=false;
                                for(let __iter__122 in __elements__123) {
                                    __array__125.push(await __for_body__124(__elements__123[__iter__122]));
                                    if(__BREAK__FLAG__) {
                                         __array__125.pop();
                                        break;
                                        
                                    }
                                }return __array__125;
                                 
                            })();
                             return  is_true
                        };__obj__1["special_operators"]=async function() {
                             return  await make_set(await compiler([],{
                                special_operators:true,env:Environment
                            }))
                        };__obj__1["defclog"]=async function(opts) {
                            let style;
                            style=("padding: 5px;"+await (async function () {
                                 if (check_true (opts.background)){
                                      return ("background: "+opts.background+";")
                                } else {
                                      return ""
                                } 
                            })()+await (async function () {
                                 if (check_true (opts.color)){
                                      return ("color: "+opts.color+";")
                                } 
                            })()+"");
                             return  async function(...args) {
                                 return  await (async function(){
                                    let __target_arg__130=[].concat(await conj(await (async function(){
                                        let __array_op_rval__131=style;
                                         if (__array_op_rval__131 instanceof Function){
                                            return await __array_op_rval__131() 
                                        } else {
                                            return[__array_op_rval__131]
                                        }
                                    })(),args));
                                    if(!__target_arg__130 instanceof Array){
                                        throw new TypeError("Invalid final argument to apply - an array is required")
                                    }let __pre_arg__132=("%c"+await (async function () {
                                         if (check_true (opts.prefix)){
                                              return opts.prefix
                                        } else {
                                              return (args).shift()
                                        } 
                                    })());
                                    __target_arg__130.unshift(__pre_arg__132);
                                    return (console.log).apply(this,__target_arg__130)
                                })()
                            }
                        };__obj__1["NOT_FOUND"]=new Object();__obj__1["check_external_env_default"]=true;__obj__1["*namespace*"]="core";__obj__1["set_global"]=function(refname,value,meta,is_constant,target_namespace,contained_req) {
                            {
                                  (function(){
                                    if (check_true(  not((typeof refname==="string")))) {
                                         throw new TypeError("reference name must be a string type");
                                        
                                    } else if (check_true( ((Environment===value)||(Environment.global_ctx===value)||(Environment.global_ctx.scope===value)))) {
                                        throw new EvalError("cannot set the environment scope as a global value");
                                        
                                    }
                                } )();
                                if (check_true ( resolve_path( ( function(){
                                    let __array_op_rval__137=refname;
                                     if (__array_op_rval__137 instanceof Function){
                                        return  __array_op_rval__137("constant") 
                                    } else {
                                        return[__array_op_rval__137,"constant"]
                                    }
                                })(),Environment.definitions))){
                                    throw new TypeError(("Assignment to constant variable "+refname));
                                    
                                };
                                let namespace_identity= ( function () {
                                     if (check_true (target_namespace)){
                                          return  ( function(){
                                            let __array_op_rval__138=target_namespace;
                                             if (__array_op_rval__138 instanceof Function){
                                                return  __array_op_rval__138(refname) 
                                            } else {
                                                return[__array_op_rval__138,refname]
                                            }
                                        })()
                                    } else {
                                          return (refname).split("/")
                                    } 
                                })();
                                ;
                                 return    (function(){
                                    if (check_true( (parent_environment&&(namespace_identity.length>1)&& not((namespace===namespace_identity['0']))))) {
                                         return  parent_environment["set_global"].call(parent_environment,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'],(contained||contained_req))
                                    } else if (check_true( ((namespace_identity.length>1)&& not((namespace_identity['0']===namespace))))) {
                                        if (check_true ((children[namespace_identity['0']]&& not(contained_req)))){
                                              return  ( function() {
                                                {
                                                     let __call_target__=children[namespace_identity['0']], __call_method__="set_global";
                                                    return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'])
                                                } 
                                            })()
                                        } else throw new EvalError(("namespace "+namespace_identity['0']+" doesn't exist"));
                                        
                                    } else  {
                                        let comps= get_object_path( ( function() {
                                             if (check_true ((1===namespace_identity.length))){
                                                  return namespace_identity['0']
                                            } else {
                                                  return namespace_identity['1']
                                            } 
                                        } )());
                                        ;
                                          (function(){
                                            Environment.global_ctx.scope[comps['0']]=value;
                                            return Environment.global_ctx.scope;
                                            
                                        })();
                                        if (check_true (((meta instanceof Object)&& not((meta instanceof Array))))){
                                            if (check_true (is_constant)){
                                                   (function(){
                                                    meta["constant"]=true;
                                                    return meta;
                                                    
                                                })()
                                            };
                                               (function(){
                                                Environment.definitions[comps['0']]=meta;
                                                return Environment.definitions;
                                                
                                            })()
                                        } else {
                                             if (check_true (is_constant)){
                                                   (function(){
                                                    Environment.definitions[comps['0']]={
                                                        constant:true
                                                    };
                                                    return Environment.definitions;
                                                    
                                                })()
                                            }
                                        };
                                         return  Environment.global_ctx.scope[comps['0']]
                                    }
                                } )()
                            }
                        };__obj__1["get_global"]=function(refname,value_if_not_found,suppress_check_external_env,target_namespace,path_comps,contained_req) {
                             return    (function(){
                                if (check_true(  not((typeof refname==="string")))) {
                                     throw new TypeError("reference name must be a string type");
                                    
                                } else if (check_true( (refname==="Environment"))) {
                                     return Environment
                                } else if (check_true(  compiler_operators["has"].call(compiler_operators,refname))) {
                                     return special_identity
                                } else  {
                                    let namespace_identity;
                                    let comps;
                                    let refval;
                                    let symbol_name;
                                    let check_external_env;
                                    namespace_identity= ( function () {
                                         if (check_true (target_namespace)){
                                              return  ( function(){
                                                let __array_op_rval__144=target_namespace;
                                                 if (__array_op_rval__144 instanceof Function){
                                                    return  __array_op_rval__144(refname) 
                                                } else {
                                                    return[__array_op_rval__144,refname]
                                                }
                                            })()
                                        } else {
                                              return (refname).split("/")
                                        } 
                                    })();
                                    comps=(path_comps|| get_object_path( ( function() {
                                         if (check_true ((1===namespace_identity.length))){
                                              return namespace_identity['0']
                                        } else {
                                              return namespace_identity['1']
                                        } 
                                    } )()));
                                    refval=null;
                                    symbol_name=null;
                                    check_external_env= ( function () {
                                         if (check_true (suppress_check_external_env)){
                                              return false
                                        } else {
                                              return check_external_env_default
                                        } 
                                    })();
                                     return    (function(){
                                        if (check_true( (parent_environment&&(namespace_identity.length>1)&& not((namespace_identity['0']===namespace))))) {
                                             return  parent_environment["get_global"].call(parent_environment,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps,(contained||contained_req))
                                        } else if (check_true( ((namespace_identity.length>1)&& not((namespace_identity['0']===namespace))))) {
                                            if (check_true ((children[namespace_identity['0']]&& not(contained_req)))){
                                                  return  ( function() {
                                                    {
                                                         let __call_target__=children[namespace_identity['0']], __call_method__="get_global";
                                                        return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps)
                                                    } 
                                                })()
                                            } else throw new EvalError(("namespace "+namespace_identity['0']+" doesn't exist"));
                                            
                                        } else  {
                                            refval=Environment.global_ctx.scope[comps['0']];
                                            if (check_true (((undefined===refval)&&(namespace_identity.length===1)&&parent_environment))){
                                                let rval= parent_environment["get_global"].call(parent_environment,refname,value_if_not_found,suppress_check_external_env,null,comps,(contained||contained_req));
                                                ;
                                                 return  rval
                                            } else {
                                                if (check_true (((undefined===refval)&&check_external_env))){
                                                     refval= ( function () {
                                                         if (check_true (check_external_env)){
                                                              return ( get_outside_global(comps['0'])||NOT_FOUND)
                                                        } else {
                                                              return NOT_FOUND
                                                        } 
                                                    })()
                                                };
                                                 return    (function(){
                                                    if (check_true( ((NOT_FOUND===refval)&&value_if_not_found))) {
                                                         return value_if_not_found
                                                    } else if (check_true( (NOT_FOUND===refval))) {
                                                        throw new ReferenceError(("symbol not found: "+ ( function () {
                                                             if (check_true ((namespace_identity.length>1))){
                                                                  return  add(namespace,"/",namespace_identity['1'])
                                                            } else {
                                                                  return  add(namespace,"/",namespace_identity['0'])
                                                            } 
                                                        })()));
                                                        
                                                    } else if (check_true( (comps.length===1))) {
                                                         return refval
                                                    } else if (check_true( (comps.length>1))) {
                                                         return   resolve_path( rest(comps),refval)
                                                    } else  {
                                                         console.warn("get_global: condition fall through: ",comps);
                                                         return  NOT_FOUND
                                                    }
                                                } )()
                                            }
                                        }
                                    } )()
                                }
                            } )()
                        };__obj__1["symbol_definition"]=async function(symname,target_namespace) {
                            let namespace_identity;
                            namespace_identity=await (async function () {
                                 if (check_true (target_namespace)){
                                      return await (async function(){
                                        let __array_op_rval__146=target_namespace;
                                         if (__array_op_rval__146 instanceof Function){
                                            return await __array_op_rval__146(symname) 
                                        } else {
                                            return[__array_op_rval__146,symname]
                                        }
                                    })()
                                } else {
                                     if (check_true ((await length(symname)>2))){
                                          return (symname).split("/")
                                    } else {
                                          return await (async function(){
                                            let __array_op_rval__147=symname;
                                             if (__array_op_rval__147 instanceof Function){
                                                return await __array_op_rval__147() 
                                            } else {
                                                return[__array_op_rval__147]
                                            }
                                        })()
                                    }
                                } 
                            })();
                             return  await async function(){
                                if (check_true( (namespace_identity.length===1))) {
                                    let it;
                                    it=Environment.definitions[symname];
                                    if (check_true (it)){
                                          return it
                                    } else {
                                         if (check_true (parent_environment)){
                                              return await parent_environment["symbol_definition"].call(parent_environment,symname)
                                        }
                                    }
                                } else if (check_true( (namespace_identity['0']===namespace))) {
                                     return Environment.definitions[symname]
                                } else if (check_true(parent_environment)) {
                                     return await parent_environment["symbol_definition"].call(parent_environment,namespace_identity['1'],namespace_identity['0'])
                                } else if (check_true( (namespace_identity.length===2))) {
                                     return await (async function() {
                                        {
                                             let __call_target__=children[namespace_identity['0']], __call_method__="symbol_definition";
                                            return await __call_target__[__call_method__].call(__call_target__,namespace_identity['1'])
                                        } 
                                    })()
                                } else  {
                                     return undefined
                                }
                            } ()
                        };__obj__1["compile"]=async function(json_expression,opts) {
                            let out;
                            opts=await add({
                                env:Environment
                            },opts,{
                                meta:await (async function() {
                                    if (check_true ((opts&&opts.meta))){
                                          return true
                                    } else {
                                          return false
                                    }
                                } )()
                            });
                            out=null;
                            out=await compiler(json_expression,opts);
                             return  await async function(){
                                if (check_true( ((out instanceof Array)&&out['0'].ctype&&(out['0'].ctype==="FAIL")))) {
                                     return out
                                } else if (check_true(opts.meta)) {
                                     return out
                                } else  {
                                     return out['1']
                                }
                            } ()
                        };__obj__1["env_log"]=async function(...args) {
                                 return  await (async function(){
                                    let __target_arg__130=[].concat(await conj(await (async function(){
                                        let __array_op_rval__131=style;
                                         if (__array_op_rval__131 instanceof Function){
                                            return await __array_op_rval__131() 
                                        } else {
                                            return[__array_op_rval__131]
                                        }
                                    })(),args));
                                    if(!__target_arg__130 instanceof Array){
                                        throw new TypeError("Invalid final argument to apply - an array is required")
                                    }let __pre_arg__132=("%c"+await (async function () {
                                         if (check_true (opts.prefix)){
                                              return opts.prefix
                                        } else {
                                              return (args).shift()
                                        } 
                                    })());
                                    __target_arg__130.unshift(__pre_arg__132);
                                    return (console.log).apply(this,__target_arg__130)
                                })()
                            };__obj__1["evaluate_local"]=async function(expression,ctx,opts) {
                            let compiled;
                            let error_data;
                            let result;
                            opts=(opts||new Object());
                            compiled=null;
                            error_data=null;
                            result=null;
                            if (check_true (opts.compiled_source)){
                                 compiled=expression
                            } else {
                                 await (async function(){
                                    try /* TRY SIMPLE */ {
                                          return compiled=await compiler(await (async function() {
                                             if (check_true (opts.json_in)){
                                                  return expression
                                            } else {
                                                  return await Environment["read_lisp"].call(Environment,expression,{
                                                    source_name:opts.source_name
                                                })
                                            } 
                                        } )(),{
                                            env:Environment,ctx:ctx,formatted_output:true,source_name:opts.source_name,throw_on_error:opts.throw_on_error,error_report:(opts.error_report||null),quiet_mode:(opts.quiet_mode||false)
                                        }) 
                                    } catch(__exception__153) {
                                          if (__exception__153 instanceof Error) {
                                             let e=__exception__153;
                                             {
                                                if (check_true (opts.throw_on_error)){
                                                    throw e;
                                                    
                                                };
                                                if (check_true ((e instanceof LispSyntaxError))){
                                                     await async function(){
                                                        e["message"]=await JSON.parse(e.message);
                                                        return e;
                                                        
                                                    }()
                                                };
                                                await async function(){
                                                    if (check_true( (e instanceof LispSyntaxError))) {
                                                         return error_data=await add({
                                                            error:"LispSyntaxError"
                                                        },e.message)
                                                    } else  {
                                                         return error_data={
                                                            error:await sub_type(e),message:e.message,stack:e.stack,form:await async function(){
                                                                if (check_true( ((expression instanceof String || typeof expression==='string')&&(expression.length>100)))) {
                                                                     return await add(await expression["substr"].call(expression,0,100),"...")
                                                                } else  {
                                                                     return await (await get_global("as_lisp"))(expression)
                                                                }
                                                            } (),parent_forms:[],source_name:opts.source_name,invalid:true
                                                        }
                                                    }
                                                } ();
                                                if (check_true (opts.error_report)){
                                                      return await (async function(){
                                                        let __array_op_rval__155=opts.error_report;
                                                         if (__array_op_rval__155 instanceof Function){
                                                            return await __array_op_rval__155(error_data) 
                                                        } else {
                                                            return[__array_op_rval__155,error_data]
                                                        }
                                                    })()
                                                } else {
                                                      return await console.error("Compilation Error: ",error_data)
                                                };
                                                 compiled=[{
                                                    error:true
                                                },null]
                                            }
                                        } 
                                    }
                                })()
                            };
                             return  await async function(){
                                if (check_true( (null==compiled))) {
                                     return null
                                } else if (check_true( (compiled['0'].namespace&&await not((compiled['0'].namespace===namespace))&&parent_environment))) {
                                     return await parent_environment["evaluate_local"].call(parent_environment,compiled,ctx,await add(new Object(),opts,{
                                        compiled_source:true
                                    }))
                                } else if (check_true( (compiled['0'].namespace&&await not((compiled['0'].namespace===namespace))))) {
                                     if (check_true (children[compiled['0'].namespace])){
                                          return await (async function() {
                                            {
                                                 let __call_target__=children[compiled['0'].namespace], __call_method__="evaluate_local";
                                                return await __call_target__[__call_method__].call(__call_target__,compiled,ctx,await add(new Object(),opts,{
                                                    compiled_source:true
                                                }))
                                            } 
                                        })()
                                    } else throw new EvalError(("unknown namespace "+compiled['0'].namespace+" assignment"));
                                    
                                } else  {
                                    if (check_true (opts.on_compilation_complete)){
                                         await (async function(){
                                            let __array_op_rval__156=opts.on_compilation_complete;
                                             if (__array_op_rval__156 instanceof Function){
                                                return await __array_op_rval__156(compiled) 
                                            } else {
                                                return[__array_op_rval__156,compiled]
                                            }
                                        })()
                                    };
                                    await (async function(){
                                        try /* TRY COMPLEX */ {
                                            if (check_true (((compiled instanceof Array)&&(compiled['0'] instanceof Object)&&compiled['0'].ctype&&await not((compiled['0'].ctype instanceof String || typeof compiled['0'].ctype==='string'))))){
                                                 await async function(){
                                                    compiled['0']["ctype"]=await subtype(compiled['0'].ctype);
                                                    return compiled['0'];
                                                    
                                                }()
                                            };
                                             return  result=await async function(){
                                                if (check_true(compiled.error)) {
                                                     throw new Error((await get_global("indirect_new"))(compiled.error,compiled.message));
                                                    
                                                } else if (check_true( (compiled['0'].ctype&&(await (await get_global("contains?"))("block",compiled['0'].ctype)||(compiled['0'].ctype==="assignment")||(compiled['0'].ctype==="__!NOT_FOUND!__"))))) {
                                                     if (check_true (await (async function(){
                                                        let __array_op_rval__159=compiled['0'].has_lisp_globals;
                                                         if (__array_op_rval__159 instanceof Function){
                                                            return await __array_op_rval__159() 
                                                        } else {
                                                            return[__array_op_rval__159]
                                                        }
                                                    })())){
                                                        await async function(){
                                                            compiled[1]=new AsyncFunction("Environment",("{ "+compiled['1']+"}"));
                                                            return compiled;
                                                            
                                                        }();
                                                         return  await (async function(){
                                                            let __array_op_rval__161=compiled['1'];
                                                             if (__array_op_rval__161 instanceof Function){
                                                                return await __array_op_rval__161(Environment) 
                                                            } else {
                                                                return[__array_op_rval__161,Environment]
                                                            }
                                                        })()
                                                    } else {
                                                        await async function(){
                                                            compiled[1]=new AsyncFunction(("{"+compiled['1']+"}"));
                                                            return compiled;
                                                            
                                                        }();
                                                         return  await (async function(){
                                                            let __array_op_rval__163=compiled['1'];
                                                             if (__array_op_rval__163 instanceof Function){
                                                                return await __array_op_rval__163() 
                                                            } else {
                                                                return[__array_op_rval__163]
                                                            }
                                                        })()
                                                    }
                                                } else if (check_true( (compiled['0'].ctype&&(("AsyncFunction"===compiled['0'].ctype)||("statement"===compiled['0'].ctype)||("objliteral"===compiled['0'].ctype))))) {
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__164=compiled['0'].has_lisp_globals;
                                                         if (__array_op_rval__164 instanceof Function){
                                                            return await __array_op_rval__164() 
                                                        } else {
                                                            return[__array_op_rval__164]
                                                        }
                                                    })())){
                                                        await async function(){
                                                            compiled[1]=new AsyncFunction("Environment",("{ return "+compiled['1']+"} "));
                                                            return compiled;
                                                            
                                                        }();
                                                         return  await (async function(){
                                                            let __array_op_rval__166=compiled['1'];
                                                             if (__array_op_rval__166 instanceof Function){
                                                                return await __array_op_rval__166(Environment) 
                                                            } else {
                                                                return[__array_op_rval__166,Environment]
                                                            }
                                                        })()
                                                    } else {
                                                        await async function(){
                                                            compiled[1]=new AsyncFunction(("{ return "+compiled['1']+"}"));
                                                            return compiled;
                                                            
                                                        }();
                                                         return  await (async function(){
                                                            let __array_op_rval__168=compiled['1'];
                                                             if (__array_op_rval__168 instanceof Function){
                                                                return await __array_op_rval__168() 
                                                            } else {
                                                                return[__array_op_rval__168]
                                                            }
                                                        })()
                                                    }
                                                } else if (check_true( (compiled['0'].ctype&&("Function"===compiled['0'].ctype)))) {
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__169=compiled['0'].has_lisp_globals;
                                                         if (__array_op_rval__169 instanceof Function){
                                                            return await __array_op_rval__169() 
                                                        } else {
                                                            return[__array_op_rval__169]
                                                        }
                                                    })())){
                                                        await async function(){
                                                            compiled[1]=new Function("Environment",("{ return "+compiled['1']+"} "));
                                                            return compiled;
                                                            
                                                        }();
                                                         return  await (async function(){
                                                            let __array_op_rval__171=compiled['1'];
                                                             if (__array_op_rval__171 instanceof Function){
                                                                return await __array_op_rval__171(Environment) 
                                                            } else {
                                                                return[__array_op_rval__171,Environment]
                                                            }
                                                        })()
                                                    } else {
                                                        await async function(){
                                                            compiled[1]=new Function(("{ return "+compiled['1']+"}"));
                                                            return compiled;
                                                            
                                                        }();
                                                         return  await (async function(){
                                                            let __array_op_rval__173=compiled['1'];
                                                             if (__array_op_rval__173 instanceof Function){
                                                                return await __array_op_rval__173() 
                                                            } else {
                                                                return[__array_op_rval__173]
                                                            }
                                                        })()
                                                    }
                                                } else  {
                                                     return compiled['1']
                                                }
                                            } ()
                                        }  catch(__exception__157) {
                                              if (__exception__157 instanceof Error) {
                                                 let e=__exception__157;
                                                 {
                                                    await env_log("caught error: ",e.name,e.message);
                                                    if (check_true (opts.error_report)){
                                                         await (async function(){
                                                            let __array_op_rval__174=opts.error_report;
                                                             if (__array_op_rval__174 instanceof Function){
                                                                return await __array_op_rval__174({
                                                                    error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack
                                                                }) 
                                                            } else {
                                                                return[__array_op_rval__174,{
                                                                    error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack
                                                                }]
                                                            }
                                                        })()
                                                    };
                                                    result=e;
                                                    if (check_true ((ctx&&ctx.in_try)))throw result;
                                                    
                                                }
                                            } 
                                        }
                                    })();
                                     return  result
                                }
                            } ()
                        };__obj__1["evaluate"]=async function(expression,ctx,opts) {
                            {
                                if (check_true ((namespace===active_namespace))){
                                      return await evaluate_local(expression,ctx,opts)
                                } else {
                                      return await (async function() {
                                        {
                                             let __call_target__=children[active_namespace], __call_method__="evaluate";
                                            return await __call_target__[__call_method__].call(__call_target__,expression,ctx,opts)
                                        } 
                                    })()
                                }
                            }
                        };__obj__1["eval_struct"]=async function(lisp_struct,ctx,opts) {
                            let rval;
                            rval=null;
                            if (check_true (lisp_struct instanceof Function)){
                                 rval=await (async function(){
                                    let __array_op_rval__177=lisp_struct;
                                     if (__array_op_rval__177 instanceof Function){
                                        return await __array_op_rval__177() 
                                    } else {
                                        return[__array_op_rval__177]
                                    }
                                })()
                            } else {
                                 rval=await evaluate(lisp_struct,ctx,await add({
                                    json_in:true
                                },(opts||new Object())))
                            };
                             return  rval
                        };__obj__1["built_ins"]=["MAX_SAFE_INTEGER","LispSyntaxError","sub_type","__VERBOSITY__","int","float","values","pairs","keys","take","prepend","first","last","length","conj","reverse","map","bind","to_object","to_array","slice","rest","second","third","chop","chomp","not","push","pop","list","flatten","jslambda","join","lowercase","uppercase","log","split","split_by","is_object?","is_array?","is_number?","is_function?","is_set?","is_element?","is_string?","is_nil?","is_regex?","is_date?","ends_with?","starts_with?","blank?","contains?","make_set","eval_exp","indirect_new","range","add","merge_objects","index_of","resolve_path","delete_prop","min_value","max_value","interlace","trim","assert","unquotify","or_args","special_operators","defclog","NOT_FOUND","check_external_env_default","built_ins"];__obj__1["set_compiler"]=async function(compiler_function) {
    {
        await Environment["set_compiler"].call(Environment,compiler_function);
         return  compiler_function
    }
};__obj__1["clone"]=async function(val) {
                                if (check_true ((val===Environment))){
                                      return Environment
                                } else {
                                      return await clone(val,0,Environment)
                                }
                            };__obj__1["*env_config*"]={export:{save_path:"js/juno.js",default_namespace:"user",include_source:false},features:["compiler","repl","io","Deno","*env_skeleton*"],imports:await ( async function(){let __obj__2=new Object();__obj__2["core/readline_mod"]={symbol:"readline_mod",namespace:"core",location:"https://deno.land/x/readline/mod.ts"};__obj__2["core/streams"]={symbol:"streams",namespace:"core",location:"https://deno.land/std/streams/conversion.ts"};__obj__2["core/path"]={symbol:"path",namespace:"core",location:"https://deno.land/std@0.110.0/path/mod.ts"};return __obj__2;})(),repl:new Object()};__obj__1["create_namespace"]=async function(name,options) {
                                 return  await async function(){
                                    if (check_true( await not((name instanceof String || typeof name==='string')))) {
                                         throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true( children[name])) {
                                         throw new EvalError("namespace already exists");
                                        
                                    } else  {
                                        let child_env;
                                        options=(options||new Object());
                                        child_env=await dlisp_env({
                                            parent_environment:Environment,namespace:name,contained:options.contained
                                        });
                                        if (check_true (child_env.evaluate)){
                                            await child_env["set_compiler"].call(child_env,compiler);
                                            await async function(){
                                                children[name]=child_env;
                                                return children;
                                                
                                            }();
                                            await async function(){
                                                children_declarations[name]=new Object();
                                                return children_declarations;
                                                
                                            }();
                                            await child_env["evaluate"].call(child_env,"(for_each (sym built_ins) (delete_prop Environment.context.scope sym))");
                                            if (check_true (options.contained)){
                                                 await async function(){
                                                    let __target_obj__188=children_declarations[name];
                                                    __target_obj__188["contained"]=true;
                                                    return __target_obj__188;
                                                    
                                                }()
                                            };
                                            await async function(){
                                                let __target_obj__189=children_declarations[name];
                                                __target_obj__189["serialize_with_image"]=await (async function () {
                                                     if (check_true ((false===options.serialize_with_image))){
                                                          return false
                                                    } else {
                                                          return true
                                                    } 
                                                })();
                                                return __target_obj__189;
                                                
                                            }();
                                             return  name
                                        } else {
                                            await console.error("ENV: couldn't create the child environment. Received: ",child_env);
                                            throw new EvalError(("unable to create namespace "+name));
                                            
                                        }
                                    }
                                } ()
                            };__obj__1["set_namespace"]=async function(name) {
                                 return  await async function(){
                                    if (check_true( await not((name instanceof String || typeof name==='string')))) {
                                         throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true( (await not(("core"===name))&&(null==children[name])))) {
                                         throw new EvalError(("namespace "+name+" doesn't exist"));
                                        
                                    } else  {
                                        if (check_true ((name==="core"))){
                                             active_namespace="core"
                                        } else {
                                             active_namespace=name
                                        };
                                         return  name
                                    }
                                } ()
                            };__obj__1["delete_namespace"]=async function(name) {
                                 return  await async function(){
                                    if (check_true( await not((name instanceof String || typeof name==='string')))) {
                                         throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true( ("core"===name))) {
                                         throw new EvalError("core namespace cannot be removed");
                                        
                                    } else if (check_true( (null==children[name]))) {
                                         throw new EvalError(("namespace "+name+"doesn't exist"));
                                        
                                    } else if (check_true( (name===await current_namespace()))) {
                                         throw new EvalError("namespace is the current namespace");
                                        
                                    } else  {
                                        await (await get_global("remove_prop"))(children,name);
                                        await (async function() {
                                            let __for_body__192=async function(k) {
                                                if (check_true (await (await get_global("starts_with?"))(k,name))){
                                                     return  await (await get_global("remove_prop"))(Environment.global_ctx._star_env_config_star_.imports,k)
                                                }
                                            };
                                            let __array__193=[],__elements__191=(await resolve_path(["global_ctx","scope","*env_config*","imports"],Environment)||[]);
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__190 in __elements__191) {
                                                __array__193.push(await __for_body__192(__elements__191[__iter__190]));
                                                if(__BREAK__FLAG__) {
                                                     __array__193.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__193;
                                             
                                        })();
                                         return  name
                                    }
                                } ()
                            };__obj__1["namespaces"]=function() {
                                     return   add( keys(children),"core")
                                };__obj__1["current_namespace"]=function() {
                                 return  active_namespace
                            };__obj__1["eval"]=async function(expression) {
                            await console.log("EVAL:",expression);
                             return  await (async function(){
                                let __array_op_rval__93=expression;
                                 if (__array_op_rval__93 instanceof Function){
                                    return await __array_op_rval__93() 
                                } else {
                                    return[__array_op_rval__93]
                                }
                            })()
                        };__obj__1["reader"]=async function(text,opts) {     return  await async function(){        if (check_true( (undefined==text))) {             throw new EvalError(("reader: received undefined, text must be a string."));                    } else if (check_true( await (await Environment.get_global("not"))((text instanceof String || typeof text==='string')))) {             throw new EvalError(("reader: received "+await (await Environment.get_global("sub_type"))(text)+": text must be a string."));                    } else  {            let output_structure;
            let idx;
            let line_number;
            let column_number;
            let source_name;
            let len;
            let debugmode;
            let in_buffer;
            let in_code;
            let in_quotes;
            let in_long_text;
            let in_comment;
            let in_single_quote;
            let reading_object;
            let mode;
            let local_text;
            let position;
            let read_table;
            let get_char;
            let error;
            let handle_escape_char;
            let process_word;
            let registered_stop_char;
            let handler_stack;
            let handler;
            let c;
            let next_c;
            let depth;
            let stop;
            let read_block;
            output_structure=[];
            idx=-1;
            line_number=1;
            column_number=0;
            source_name=await (async function () {
                 if (check_true ((opts && opts["source_name"]))){
                      return (opts && opts["source_name"])
                } else {
                      return "anonymous"
                } 
            })();
            opts=(opts||new Object());
            len=(await (await Environment.get_global("length"))(text)-1);
            debugmode=await async function(){
                if (check_true((opts && opts["verbose"]))) {
                     return true
                } else if (check_true( ((opts && opts["verbose"])===false))) {
                     return false
                } else if (check_true( ((await Environment.get_global("__VERBOSITY__"))>6))) {
                     return true
                } else  {
                     return false
                }
            } ();
            in_buffer=(text).split("");
            in_code=0;
            in_quotes=1;
            in_long_text=2;
            in_comment=3;
            in_single_quote=4;
            reading_object=false;
            mode=in_code;
            local_text=async function() {
                let start;
                let end;
                start=await Math.max(0,(idx-10));
                end=await Math.min(await (await Environment.get_global("length"))(in_buffer),(idx+10));
                 return  (await (await Environment.get_global("slice"))(in_buffer,start,end)).join("")
            };
            position=async function(offset) {
                 return  ("line: "+line_number+" column: "+await (async function () {
                     if (check_true (offset)){
                          return (column_number+offset)
                    } else {
                          return column_number
                    } 
                })())
            };
            read_table=await (await Environment.get_global("add"))(new Object(),await (async function() {
                 if (check_true ((opts && opts["read_table_entries"]))){
                      return (opts && opts["read_table_entries"])
                } else {
                      return new Object()
                } 
            } )(),await ( async function(){
                let __obj__1=new Object();
                __obj__1["("]=[")",async function(block) {
                     return  block
                }];
                __obj__1["["]=["]",async function(block) {
                     return  block
                }];
                __obj__1["{"]=["}",async function(block) {
                    let obj;
                    let __idx__2= async function(){
                        return -1
                    };
                    let key_mode;
                    let need_colon;
                    let value_mode;
                    let key;
                    let value;
                    let cpos;
                    let state;
                    let block_length;
                    {
                        obj=new Object();
                        let idx=await __idx__2();
                        ;
                        key_mode=0;
                        need_colon=1;
                        value_mode=2;
                        key=null;
                        value=null;
                        cpos=null;
                        state=key_mode;
                        block_length=(await (await Environment.get_global("length"))(block)-1);
                        reading_object=false;
                        await (async function(){
                             let __test_condition__3=async function() {
                                 return  (idx<block_length)
                            };
                            let __body_ref__4=async function() {
                                (idx=idx+1);
                                key=block[idx];
                                if (check_true (((key instanceof Array)&&((key && key.length)===2)&&((key && key["0"])==="=:quotem")&&((key && key["1"]) instanceof String || typeof (key && key["1"])==='string')))){
                                     key=(key && key["1"])
                                };
                                if (check_true (((key instanceof String || typeof key==='string')&&await (await Environment.get_global("starts_with?"))("=:",key)&&(await (await Environment.get_global("length"))(key)>2)))){
                                     key=await key["substr"].call(key,2)
                                };
                                 return  await async function(){
                                    if (check_true( await (await Environment.get_global("blank?"))(key))) {
                                         return await error("missing object key",("blank or nil key: "+block[idx]))
                                    } else if (check_true( await (await Environment.get_global("is_number?"))(key))) {
                                        (idx=idx+1);
                                         return  await async function(){
                                            obj[key]=block[idx];
                                            return obj;
                                            
                                        }()
                                    } else if (check_true( ((key instanceof String || typeof key==='string')&&await (await Environment.get_global("contains?"))(":",key)&&await (await Environment.get_global("not"))(await (await Environment.get_global("ends_with?"))(":",key))))) {
                                        cpos=await key["indexOf"].call(key,":");
                                        value=await key["substr"].call(key,(cpos+1));
                                        key=await key["substr"].call(key,0,cpos);
                                        value=await process_word((value).split(""),0);
                                         return  await async function(){
                                            obj[key]=value;
                                            return obj;
                                            
                                        }()
                                    } else  {
                                        (idx=idx+1);
                                        if (check_true (await (await Environment.get_global("ends_with?"))(":",key))){
                                             key=await (await Environment.get_global("chop"))(key)
                                        } else {
                                            if (check_true ((block[idx]===":"))){
                                                 (idx=idx+1)
                                            } else {
                                                 await error("missing colon",("expected colon for: "+key))
                                            }
                                        };
                                         return  await async function(){
                                            obj[key]=block[idx];
                                            return obj;
                                            
                                        }()
                                    }
                                } ()
                            };
                            let __BREAK__FLAG__=false;
                            while(await __test_condition__3()) {
                                await __body_ref__4();
                                 if(__BREAK__FLAG__) {
                                     break;
                                    
                                }
                            } ;
                            
                        })();
                         return  obj
                    }
                },async function() {
                     return  reading_object=true
                }];
                __obj__1["\""]=["\"",async function(block) {
                     return  ["quotes",block]
                }];
                return __obj__1;
                
            })());
            get_char=async function(pos) {
                 return  in_buffer[pos]
            };
            error=async function(type,message,offset) {
                throw new LispSyntaxError({
                    message:message,position:await position(offset),pos:{
                        line:line_number,column:(column_number+(offset||0))
                    },depth:depth,local_text:await local_text(),source_name:source_name,type:type
                });
                
            };
            handle_escape_char=async function(c) {
                let ccode;
                ccode=await c["charCodeAt"].call(c,0);
                 return  await async function(){
                    if (check_true( (ccode===34))) {
                         return c
                    } else if (check_true( (ccode===92))) {
                         return c
                    } else if (check_true( (c==="t"))) {
                         return await String.fromCharCode(9)
                    } else if (check_true( (c==="n"))) {
                         return await String.fromCharCode(10)
                    } else if (check_true( (c==="r"))) {
                         return await String.fromCharCode(13)
                    } else if (check_true( (c==="f"))) {
                         return c
                    } else if (check_true( (c==="b"))) {
                         return c
                    } else  {
                         return c
                    }
                } ()
            };
            process_word=async function(word_acc,backtick_mode) {
                let word;
                let word_as_number;
                word=(word_acc).join("");
                word_as_number=await Number(word);
                if (check_true (debugmode)){
                     console.log("process_word: ",word,word_as_number,backtick_mode)
                };
                 return  await async function(){
                    if (check_true( ("true"===word))) {
                         return true
                    } else if (check_true( ("false"===word))) {
                         return false
                    } else if (check_true( (":"===word))) {
                         return word
                    } else if (check_true( (",@"===word))) {
                         return "=$,@"
                    } else if (check_true( ((",#"===word)||("##"===word)))) {
                         return "=:##"
                    } else if (check_true( ("=$,@"===word))) {
                         return "=$,@"
                    } else if (check_true( ("=:##"===word))) {
                         return "=:##"
                    } else if (check_true( await isNaN(word_as_number))) {
                         return  await async function(){
                            if (check_true( (word==="=:"))) {
                                 return  "=:"
                            } else if (check_true( ((backtick_mode===0)&&await (await Environment.get_global("ends_with?"))(")",word)))) {
                                 return await error("trailing character","unexpected trailing parenthesis")
                            } else if (check_true( ((backtick_mode===0)&&await (await Environment.get_global("ends_with?"))("]",word)))) {
                                 return await error("trailing character","unexpected trailing bracket")
                            } else if (check_true( await (await Environment.get_global("contains?"))(word,["=:(","=:)","=:'"]))) {
                                 return  word
                            } else if (check_true( (backtick_mode===1))) {
                                 return word
                            } else  {
                                 return await (await Environment.get_global("add"))("=:",word)
                            }
                        } ()
                    } else if (check_true( await (await Environment.get_global("is_number?"))(word_as_number))) {
                         return word_as_number
                    } else  {
                        console.log("reader: ",await position()," what is this?",word,word_acc,await local_text());
                         return  word
                    }
                } ()
            };
            registered_stop_char=null;
            handler_stack=[];
            handler=null;
            c=null;
            next_c=null;
            depth=0;
            stop=false;
            read_block=async function(_depth,_prefix_op) {
                let acc;
                let word_acc;
                let backtick_mode;
                let escape_mode;
                let last_c;
                let block_return;
                acc=[];
                word_acc=[];
                backtick_mode=0;
                escape_mode=0;
                last_c=null;
                block_return=null;
                if (check_true (_prefix_op)){
                     (acc).push(_prefix_op)
                };
                depth=_depth;
                await (async function(){
                     let __test_condition__8=async function() {
                         return  (await (await Environment.get_global("not"))(stop)&&(idx<len))
                    };
                    let __body_ref__9=async function() {
                        idx+=1;
                        escape_mode=await Math.max(0,(escape_mode-1));
                        c=await get_char(idx);
                        next_c=await get_char((idx+1));
                        if (check_true ((c==="\n"))){
                            line_number+=1;
                             column_number=0
                        };
                        if (check_true (debugmode)){
                             await console.log(_depth,"C->",c,next_c,mode,escape_mode,await clone(acc),await clone(word_acc),(handler_stack && handler_stack.length))
                        };
                        await async function(){
                            if (check_true( ((next_c===undefined)&&await (await Environment.get_global("not"))((await (async function(){
                                let __targ__10=await (await Environment.get_global("last"))(handler_stack);
                                if (__targ__10){
                                     return(__targ__10)[0]
                                } 
                            })()===undefined))&&(await (await Environment.get_global("not"))((c===await (async function(){
                                let __targ__11=await (await Environment.get_global("last"))(handler_stack);
                                if (__targ__11){
                                     return(__targ__11)[0]
                                } 
                            })()))||((handler_stack && handler_stack.length)>1))))) {
                                 return await error("premature end",("premature end: expected: "+await (async function(){
                                    let __targ__12=await (await Environment.get_global("last"))(handler_stack);
                                    if (__targ__12){
                                         return(__targ__12)[0]
                                    } 
                                })()))
                            } else if (check_true( ((next_c===undefined)&&(mode===in_quotes)&&await (await Environment.get_global("not"))((await c["charCodeAt"]()===34))))) {
                                 return await error("premature end","premature end: expected: \"")
                            } else if (check_true( ((next_c===undefined)&&(mode===in_long_text)&&await (await Environment.get_global("not"))((c==="|"))))) {
                                 return await error("premature end","premature end: expected: |")
                            } else if (check_true( ((mode===in_code)&&(_depth===1)&&(next_c===")")&&(c===")")))) {
                                 return  await error("trailing character","unexpected trailing parenthesis")
                            }
                        } ();
                        await async function(){
                            if (check_true( ((c==="\n")&&(mode===in_comment)))) {
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((92===await c["charCodeAt"].call(c,0))&&(mode===in_long_text)))) {
                                (word_acc).push(c);
                                 return  (word_acc).push(c)
                            } else if (check_true( ((mode>0)&&(escape_mode===1)&&(92===await c["charCodeAt"].call(c,0))))) {
                                 return  (word_acc).push(c)
                            } else if (check_true( ((mode>0)&&(92===await c["charCodeAt"].call(c,0))))) {
                                 return  escape_mode=2
                            } else if (check_true( ((mode>0)&&(escape_mode===1)))) {
                                 return  (word_acc).push(await handle_escape_char(c))
                            } else if (check_true( ((mode===in_long_text)&&(escape_mode===0)&&(c==="|")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_quotes)&&(escape_mode===0)&&(c==="\"")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_single_quote)&&(escape_mode===0)&&(c==="'")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((c==="|")&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_long_text;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                    block_return=["=:quotem",block_return];
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( ((c==="\"")&&(escape_mode===0)&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_quotes;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( ((c==="'")&&(escape_mode===0)&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_single_quote;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( (mode===in_comment))) {
                                 return false
                            } else if (check_true( ((c===";")&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_comment;
                                 return  await read_block(await (await Environment.get_global("add"))(_depth,1))
                            } else if (check_true( ((mode===in_code)&&(await (await Environment.get_global("length"))(handler_stack)>0)&&(c===await (async function(){
                                let __targ__13=await (await Environment.get_global("last"))(handler_stack);
                                if (__targ__13){
                                     return(__targ__13)[0]
                                } 
                            })())))) {
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_code)&&read_table[c]&&await (await Environment.get_global("first"))(read_table[c])))) {
                                if (check_true (await (async function(){
                                    let __targ__14=read_table[c];
                                    if (__targ__14){
                                         return(__targ__14)[2]
                                    } 
                                })())){
                                    handler=await (async function(){
                                        let __targ__15=read_table[c];
                                        if (__targ__15){
                                             return(__targ__15)[2]
                                        } 
                                    })();
                                    await (async function(){
                                        let __array_op_rval__16=handler;
                                         if (__array_op_rval__16 instanceof Function){
                                            return await __array_op_rval__16() 
                                        } else {
                                            return[__array_op_rval__16]
                                        }
                                    })();
                                     handler=null
                                };
                                (handler_stack).push(read_table[c]);
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc,backtick_mode));
                                    backtick_mode=0;
                                     word_acc=[]
                                };
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                handler=await (async function(){
                                    let __targ__17=(handler_stack).pop();
                                    if (__targ__17){
                                         return(__targ__17)[1]
                                    } 
                                })();
                                block_return=await (async function(){
                                    let __array_op_rval__18=handler;
                                     if (__array_op_rval__18 instanceof Function){
                                        return await __array_op_rval__18(block_return) 
                                    } else {
                                        return[__array_op_rval__18,block_return]
                                    }
                                })();
                                if (check_true (await (await Environment.get_global("not"))((undefined===block_return)))){
                                    if (check_true ((backtick_mode===1))){
                                        block_return=["=:quotem",block_return];
                                         backtick_mode=0
                                    };
                                     return  (acc).push(block_return)
                                }
                            } else if (check_true( ((mode===in_code)&&(c==="`")))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                 return  backtick_mode=1
                            } else if (check_true( ((mode===in_code)&&(c===":")&&((word_acc && word_acc.length)===0)&&((acc && acc.length)>0)&&(await (await Environment.get_global("last"))(acc) instanceof String || typeof await (await Environment.get_global("last"))(acc)==='string')))) {
                                 return (acc).push(await (await Environment.get_global("add"))((acc).pop(),":"))
                            } else if (check_true( ((mode===in_code)&&(last_c===",")&&((c==="#")||(c==="@"))))) {
                                (word_acc).push(c);
                                (acc).push(await process_word(word_acc));
                                 return  word_acc=[]
                            } else if (check_true( ((mode===in_code)&&((c===" ")||(await c["charCodeAt"].call(c,0)===10)||(await c["charCodeAt"].call(c,0)===9)||((c===",")&&await (await Environment.get_global("not"))((next_c==="@"))&&await (await Environment.get_global("not"))((next_c==="#"))))))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    if (check_true ((backtick_mode===1))){
                                        (acc).push(await process_word(word_acc,backtick_mode));
                                         backtick_mode=0
                                    } else {
                                         (acc).push(await process_word(word_acc))
                                    };
                                     return  word_acc=[]
                                }
                            } else if (check_true( ((mode===in_code)&&(await c["charCodeAt"].call(c,0)===13)))) {
                                 return false
                            } else  {
                                 return  (word_acc).push(c)
                            }
                        } ();
                        column_number+=1;
                         return  last_c=c
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__8()) {
                        await __body_ref__9();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                if (check_true (((word_acc && word_acc.length)>0))){
                    (acc).push(await process_word(word_acc,backtick_mode));
                     word_acc=[]
                };
                 return  acc
            };
            if (check_true (debugmode)){
                 await console.log("read->",in_buffer)
            };
            output_structure=await read_block(0);
            if (check_true (debugmode)){
                 await console.log("read<-",await clone(output_structure))
            };
            if (check_true (((output_structure instanceof Array)&&(await (await Environment.get_global("length"))(output_structure)>1)))){
                (output_structure).unshift("=:iprogn");
                 return  await (await Environment.get_global("first"))(await (async function(){
                    let __array_op_rval__19=output_structure;
                     if (__array_op_rval__19 instanceof Function){
                        return await __array_op_rval__19() 
                    } else {
                        return[__array_op_rval__19]
                    }
                })())
            } else {
                  return await (await Environment.get_global("first"))(output_structure)
            }
        }
    } ()
};__obj__1["add_escape_encoding"]=async function(text) {        if (check_true ((text instanceof String || typeof text==='string'))){            let chars;            let acc;            chars=(text).split("");            acc=[];            await (async function() {                let __for_body__3=async function(c) {                     return  await async function(){                        if (check_true( ((await c["charCodeAt"].call(c,0)===34)))) {                            (acc).push(await String.fromCharCode(92));                             return  (acc).push(c)                        } else  {                             return (acc).push(c)                        }                    } ()                };                let __array__4=[],__elements__2=chars;                let __BREAK__FLAG__=false;                for(let __iter__1 in __elements__2) {                    __array__4.push(await __for_body__3(__elements__2[__iter__1]));                    if(__BREAK__FLAG__) {                         __array__4.pop();                        break;                                            }                }return __array__4;                             })();             return  (acc).join("")        } else {              return text        }    };__obj__1["get_outside_global"]=function get_outside_global(refname) {  try {    let tfn = new Function("{ if (typeof " + refname + " === 'undefined') { return undefined } else { return "+refname+" } }");    return tfn();  } catch (ex) {    return undefined;  }};__obj__1["as_lisp"]=lisp_writer;__obj__1["lisp_writer"]=lisp_writer;__obj__1["clone_to_new"]=async function(options) {
                            let new_env;
                            let my_children;
                            let my_children_declarations;
                            new_env=null;
                            my_children=null;
                            my_children_declarations=null;
                            await env_log(namespace,"cloning: # children: ",await length(children));
                            new_env=await dlisp_env({
                                env:await clone(Environment),children:await clone(children),children_declarations:await clone(children_declarations)
                            });
                            await env_log(namespace,"constructed: ",await new_env["id"]());
                             return  new_env
                        };__obj__1["save_env"]=async function(options) {
                            let new_env;
                            let my_children;
                            let env_constructor;
                            let dcomps;
                            let version_tag;
                            let build_time;
                            let build_headers;
                            let child_env;
                            let include_source;
                            let exports;
                            let src;
                            let target_insertion_path;
                            let output_path;
                            new_env=null;
                            my_children=null;
                            env_constructor=null;
                            dcomps=await (await get_global("date_components"))(new Date());
                            version_tag=await (async function () {
                                 if (check_true (await not(await (await get_global("blank?"))(opts.version_tag)))){
                                      return opts.version_tag
                                } else {
                                      return (await (async function(){
                                        let __array_op_rval__237=dcomps.year;
                                         if (__array_op_rval__237 instanceof Function){
                                            return await __array_op_rval__237(dcomps.month,dcomps.day,dcomps.hour,dcomps.minute) 
                                        } else {
                                            return[__array_op_rval__237,dcomps.month,dcomps.day,dcomps.hour,dcomps.minute]
                                        }
                                    })()).join(".")
                                } 
                            })();
                            build_time=await (await get_global("formatted_date"))(new Date());
                            build_headers=[];
                            child_env=null;
                            include_source=false;
                            exports=[];
                            src=await (async function () {
                                 if (check_true (Environment.global_ctx.scope["*env_skeleton*"])){
                                      return await clone(Environment.global_ctx.scope["*env_skeleton*"])
                                } else {
                                      return await (await get_global("reader"))(await (await get_global("read_text_file"))("./src/environment.lisp"))
                                } 
                            })();
                            target_insertion_path=null;
                            output_path=null;
                            if (check_true (Environment.global_ctx.scope["*env_skeleton*"])){
                                 await (await get_global("register_feature"))("*env_skeleton*")
                            };
                            target_insertion_path=await first(await (await get_global("findpaths"))("=:included_globals",src));
                            if (check_true (await not((target_insertion_path instanceof Array))))throw new EvalError("Unable to find the first included_globals symbol");
                            ;
                            target_insertion_path=await conj(await chop(target_insertion_path),[2]);
                            options=(options||new Object());
                            if (check_true (options.include_source)){
                                 include_source=true
                            };
                            await env_log(namespace,"cloning: # children: ",await length(children));
                            exports=await export_symbol_set();
                            my_children=await to_object(await (async function() {
                                let __collector;
                                let __result;
                                let __action;
                                __collector=[];
                                __result=null;
                                __action=async function(child) {
                                    if (check_true (await resolve_path(await (async function(){
                                        let __array_op_rval__238=child['0'];
                                         if (__array_op_rval__238 instanceof Function){
                                            return await __array_op_rval__238("serialize_with_image") 
                                        } else {
                                            return[__array_op_rval__238,"serialize_with_image"]
                                        }
                                    })(),children_declarations))){
                                        child_env=await child['1']["compile"].call(child['1'],await child['1']["export_symbol_set"].call(child['1'],{
                                            no_compiler:true
                                        }),{
                                            throw_on_error:true,meta:true
                                        });
                                         return  await (async function(){
                                            let __array_op_rval__239=child['0'];
                                             if (__array_op_rval__239 instanceof Function){
                                                return await __array_op_rval__239(["=:quote",["=:javascript",child_env['1']]]) 
                                            } else {
                                                return[__array_op_rval__239,["=:quote",["=:javascript",child_env['1']]]]
                                            }
                                        })()
                                    }
                                };
                                ;
                                await (async function() {
                                    let __for_body__242=async function(__item) {
                                        __result=await __action(__item);
                                        if (check_true (__result)){
                                              return (__collector).push(__result)
                                        }
                                    };
                                    let __array__243=[],__elements__241=await pairs(children);
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__240 in __elements__241) {
                                        __array__243.push(await __for_body__242(__elements__241[__iter__240]));
                                        if(__BREAK__FLAG__) {
                                             __array__243.pop();
                                            break;
                                            
                                        }
                                    }return __array__243;
                                     
                                })();
                                 return  __collector
                            } )());
                            await (await get_global("set_path"))(target_insertion_path,src,["=:fn",[],await (async function(){
                                 return await to_object([["definitions",["=:quote",await clone(Environment.definitions)]],["declarations",await clone(Environment.declarations)],["symbols",["=:javascript",await compile(await to_object(exports),{
                                    throw_on_error:true
                                })]],["children_declarations",["=:fn",[],await (async function(){
                                     return await clone(children_declarations) 
                                })()]],["children",my_children]]) 
                            })()]);
                            output_path=(options.save_as||await resolve_path(["*env_config*","export","save_path"],Environment.global_ctx.scope));
                            if (check_true (output_path instanceof Function)){
                                 output_path=await (async function(){
                                    let __array_op_rval__244=output_path;
                                     if (__array_op_rval__244 instanceof Function){
                                        return await __array_op_rval__244() 
                                    } else {
                                        return[__array_op_rval__244]
                                    }
                                })()
                            };
                            if (check_true ((await not((output_path instanceof String || typeof output_path==='string'))&&output_path)))throw new EvalError("invalid name for target for saving the environment.  Must be a string or function");
                            ;
                             return  await async function(){
                                if (check_true( (output_path&&await (await get_global("ends_with?"))(".js",output_path)))) {
                                    (build_headers).push(("// Build Time: "+build_time));
                                    (build_headers).push(("// Version: "+version_tag));
                                    (build_headers).push(("export const DLISP_ENV_VERSION='"+version_tag+"';"));
                                    await env_log("saving to: ",output_path);
                                     return  await (await get_global("compile_buffer"))(src,"init_dlisp",{
                                        namespace:namespace,toplevel:true,include_boilerplate:false,verbose:false,bundle:true,js_headers:[await (await get_global("show"))(check_true),await (await get_global("show"))(get_next_environment_id),await (await get_global("show"))(get_outside_global),await (await get_global("show"))(subtype),await (await get_global("show"))(lisp_writer),await (await get_global("show"))(clone),await (await get_global("show"))(LispSyntaxError)],bundle_options:{
                                            default_namespace:await resolve_path(["*env_config*","export","default_namespace"],Environment.global_ctx.scope)
                                        },output_file:output_path,include_source:(options.include_source||await resolve_path(["*env_config*","export","include_source"],Environment.global_ctx.scope)),build_headers:build_headers
                                    })
                                } else if (check_true( (output_path&&await (await get_global("ends_with?"))(".lisp",output_path)))) {
                                     return await (await get_global("write_text_file"))(output_path,await JSON.stringify(src,null,4))
                                } else  {
                                     return src
                                }
                            } ()
                        };__obj__1["null"]=null;__obj__1["defmacro"]=async function(name,lambda_list,...forms) {
    let macro_name;
    let macro_args;
    let macro_body;
    let final_form;
    let macro_meta;
    let complex_lambda_list;
    let source_details;
    macro_name=name;
    macro_args=lambda_list;
    macro_body=forms;
    final_form=await (await Environment.get_global("last"))(forms);
    macro_meta=await (async function () {
         if (check_true (((final_form instanceof Object)&&await (await Environment.get_global("not"))(await (await Environment.get_global("blank?"))((final_form && final_form["description"])))&&await (await Environment.get_global("not"))(await (await Environment.get_global("blank?"))((final_form && final_form["usage"])))))){
              return (forms).pop()
        } 
    })();
    complex_lambda_list=await (await Environment.get_global("or_args"))(await (async function() {
        let __for_body__54=async function(elem) {
             return  (await (await Environment.get_global("length"))(await (await Environment.get_global("flatten"))(await (await Environment.get_global("destructure_list"))(elem)))>0)
        };
        let __array__55=[],__elements__53=lambda_list;
        let __BREAK__FLAG__=false;
        for(let __iter__52 in __elements__53) {
            __array__55.push(await __for_body__54(__elements__53[__iter__52]));
            if(__BREAK__FLAG__) {
                 __array__55.pop();
                break;
                
            }
        }return __array__55;
         
    })());
    source_details=await (await Environment.get_global("add"))({
        eval_when:{
            compile_time:true
        },name:await (async function() {
            if (check_true (await (await Environment.get_global("starts_with?"))("=:",name))){
                  return await name["substr"].call(name,2)
            } else {
                  return name
            }
        } )(),macro:true,fn_args:await (await Environment.get_global("as_lisp"))(macro_args)
    },await (async function() {
         if (check_true (macro_meta)){
              return macro_meta
        } else {
              return new Object()
        } 
    } )());
    if (check_true (complex_lambda_list)){
          return ["=:defglobal",macro_name,["=:fn",["&","=:args"],["=:destructuring_bind",macro_args,"=:args",].concat(macro_body)],["=:quote",source_details]]
    } else {
          return ["=:defglobal",macro_name,["=:fn",macro_args,].concat(macro_body),["=:quote",source_details]]
    }
};__obj__1["read_lisp"]=async function(text,opts) {     return  await async function(){        if (check_true( (undefined==text))) {             throw new EvalError(("reader: received undefined, text must be a string."));                    } else if (check_true( await (await Environment.get_global("not"))((text instanceof String || typeof text==='string')))) {             throw new EvalError(("reader: received "+await (await Environment.get_global("sub_type"))(text)+": text must be a string."));                    } else  {            let output_structure;
            let idx;
            let line_number;
            let column_number;
            let source_name;
            let len;
            let debugmode;
            let in_buffer;
            let in_code;
            let in_quotes;
            let in_long_text;
            let in_comment;
            let in_single_quote;
            let reading_object;
            let mode;
            let local_text;
            let position;
            let read_table;
            let get_char;
            let error;
            let handle_escape_char;
            let process_word;
            let registered_stop_char;
            let handler_stack;
            let handler;
            let c;
            let next_c;
            let depth;
            let stop;
            let read_block;
            output_structure=[];
            idx=-1;
            line_number=1;
            column_number=0;
            source_name=await (async function () {
                 if (check_true ((opts && opts["source_name"]))){
                      return (opts && opts["source_name"])
                } else {
                      return "anonymous"
                } 
            })();
            opts=(opts||new Object());
            len=(await (await Environment.get_global("length"))(text)-1);
            debugmode=await async function(){
                if (check_true((opts && opts["verbose"]))) {
                     return true
                } else if (check_true( ((opts && opts["verbose"])===false))) {
                     return false
                } else if (check_true( ((await Environment.get_global("__VERBOSITY__"))>6))) {
                     return true
                } else  {
                     return false
                }
            } ();
            in_buffer=(text).split("");
            in_code=0;
            in_quotes=1;
            in_long_text=2;
            in_comment=3;
            in_single_quote=4;
            reading_object=false;
            mode=in_code;
            local_text=async function() {
                let start;
                let end;
                start=await Math.max(0,(idx-10));
                end=await Math.min(await (await Environment.get_global("length"))(in_buffer),(idx+10));
                 return  (await (await Environment.get_global("slice"))(in_buffer,start,end)).join("")
            };
            position=async function(offset) {
                 return  ("line: "+line_number+" column: "+await (async function () {
                     if (check_true (offset)){
                          return (column_number+offset)
                    } else {
                          return column_number
                    } 
                })())
            };
            read_table=await (await Environment.get_global("add"))(new Object(),await (async function() {
                 if (check_true ((opts && opts["read_table_entries"]))){
                      return (opts && opts["read_table_entries"])
                } else {
                      return new Object()
                } 
            } )(),await ( async function(){
                let __obj__1=new Object();
                __obj__1["("]=[")",async function(block) {
                     return  block
                }];
                __obj__1["["]=["]",async function(block) {
                     return  block
                }];
                __obj__1["{"]=["}",async function(block) {
                    let obj;
                    let __idx__2= async function(){
                        return -1
                    };
                    let key_mode;
                    let need_colon;
                    let value_mode;
                    let key;
                    let value;
                    let cpos;
                    let state;
                    let block_length;
                    {
                        obj=new Object();
                        let idx=await __idx__2();
                        ;
                        key_mode=0;
                        need_colon=1;
                        value_mode=2;
                        key=null;
                        value=null;
                        cpos=null;
                        state=key_mode;
                        block_length=(await (await Environment.get_global("length"))(block)-1);
                        reading_object=false;
                        await (async function(){
                             let __test_condition__3=async function() {
                                 return  (idx<block_length)
                            };
                            let __body_ref__4=async function() {
                                (idx=idx+1);
                                key=block[idx];
                                if (check_true (((key instanceof Array)&&((key && key.length)===2)&&((key && key["0"])==="=:quotem")&&((key && key["1"]) instanceof String || typeof (key && key["1"])==='string')))){
                                     key=(key && key["1"])
                                };
                                if (check_true (((key instanceof String || typeof key==='string')&&await (await Environment.get_global("starts_with?"))("=:",key)&&(await (await Environment.get_global("length"))(key)>2)))){
                                     key=await key["substr"].call(key,2)
                                };
                                 return  await async function(){
                                    if (check_true( await (await Environment.get_global("blank?"))(key))) {
                                         return await error("missing object key",("blank or nil key: "+block[idx]))
                                    } else if (check_true( await (await Environment.get_global("is_number?"))(key))) {
                                        (idx=idx+1);
                                         return  await async function(){
                                            obj[key]=block[idx];
                                            return obj;
                                            
                                        }()
                                    } else if (check_true( ((key instanceof String || typeof key==='string')&&await (await Environment.get_global("contains?"))(":",key)&&await (await Environment.get_global("not"))(await (await Environment.get_global("ends_with?"))(":",key))))) {
                                        cpos=await key["indexOf"].call(key,":");
                                        value=await key["substr"].call(key,(cpos+1));
                                        key=await key["substr"].call(key,0,cpos);
                                        value=await process_word((value).split(""),0);
                                         return  await async function(){
                                            obj[key]=value;
                                            return obj;
                                            
                                        }()
                                    } else  {
                                        (idx=idx+1);
                                        if (check_true (await (await Environment.get_global("ends_with?"))(":",key))){
                                             key=await (await Environment.get_global("chop"))(key)
                                        } else {
                                            if (check_true ((block[idx]===":"))){
                                                 (idx=idx+1)
                                            } else {
                                                 await error("missing colon",("expected colon for: "+key))
                                            }
                                        };
                                         return  await async function(){
                                            obj[key]=block[idx];
                                            return obj;
                                            
                                        }()
                                    }
                                } ()
                            };
                            let __BREAK__FLAG__=false;
                            while(await __test_condition__3()) {
                                await __body_ref__4();
                                 if(__BREAK__FLAG__) {
                                     break;
                                    
                                }
                            } ;
                            
                        })();
                         return  obj
                    }
                },async function() {
                     return  reading_object=true
                }];
                __obj__1["\""]=["\"",async function(block) {
                     return  ["quotes",block]
                }];
                return __obj__1;
                
            })());
            get_char=async function(pos) {
                 return  in_buffer[pos]
            };
            error=async function(type,message,offset) {
                throw new LispSyntaxError({
                    message:message,position:await position(offset),pos:{
                        line:line_number,column:(column_number+(offset||0))
                    },depth:depth,local_text:await local_text(),source_name:source_name,type:type
                });
                
            };
            handle_escape_char=async function(c) {
                let ccode;
                ccode=await c["charCodeAt"].call(c,0);
                 return  await async function(){
                    if (check_true( (ccode===34))) {
                         return c
                    } else if (check_true( (ccode===92))) {
                         return c
                    } else if (check_true( (c==="t"))) {
                         return await String.fromCharCode(9)
                    } else if (check_true( (c==="n"))) {
                         return await String.fromCharCode(10)
                    } else if (check_true( (c==="r"))) {
                         return await String.fromCharCode(13)
                    } else if (check_true( (c==="f"))) {
                         return c
                    } else if (check_true( (c==="b"))) {
                         return c
                    } else  {
                         return c
                    }
                } ()
            };
            process_word=async function(word_acc,backtick_mode) {
                let word;
                let word_as_number;
                word=(word_acc).join("");
                word_as_number=await Number(word);
                if (check_true (debugmode)){
                     console.log("process_word: ",word,word_as_number,backtick_mode)
                };
                 return  await async function(){
                    if (check_true( ("true"===word))) {
                         return true
                    } else if (check_true( ("false"===word))) {
                         return false
                    } else if (check_true( (":"===word))) {
                         return word
                    } else if (check_true( (",@"===word))) {
                         return "=$,@"
                    } else if (check_true( ((",#"===word)||("##"===word)))) {
                         return "=:##"
                    } else if (check_true( ("=$,@"===word))) {
                         return "=$,@"
                    } else if (check_true( ("=:##"===word))) {
                         return "=:##"
                    } else if (check_true( await isNaN(word_as_number))) {
                         return  await async function(){
                            if (check_true( (word==="=:"))) {
                                 return  "=:"
                            } else if (check_true( ((backtick_mode===0)&&await (await Environment.get_global("ends_with?"))(")",word)))) {
                                 return await error("trailing character","unexpected trailing parenthesis")
                            } else if (check_true( ((backtick_mode===0)&&await (await Environment.get_global("ends_with?"))("]",word)))) {
                                 return await error("trailing character","unexpected trailing bracket")
                            } else if (check_true( await (await Environment.get_global("contains?"))(word,["=:(","=:)","=:'"]))) {
                                 return  word
                            } else if (check_true( (backtick_mode===1))) {
                                 return word
                            } else  {
                                 return await (await Environment.get_global("add"))("=:",word)
                            }
                        } ()
                    } else if (check_true( await (await Environment.get_global("is_number?"))(word_as_number))) {
                         return word_as_number
                    } else  {
                        console.log("reader: ",await position()," what is this?",word,word_acc,await local_text());
                         return  word
                    }
                } ()
            };
            registered_stop_char=null;
            handler_stack=[];
            handler=null;
            c=null;
            next_c=null;
            depth=0;
            stop=false;
            read_block=async function(_depth,_prefix_op) {
                let acc;
                let word_acc;
                let backtick_mode;
                let escape_mode;
                let last_c;
                let block_return;
                acc=[];
                word_acc=[];
                backtick_mode=0;
                escape_mode=0;
                last_c=null;
                block_return=null;
                if (check_true (_prefix_op)){
                     (acc).push(_prefix_op)
                };
                depth=_depth;
                await (async function(){
                     let __test_condition__8=async function() {
                         return  (await (await Environment.get_global("not"))(stop)&&(idx<len))
                    };
                    let __body_ref__9=async function() {
                        idx+=1;
                        escape_mode=await Math.max(0,(escape_mode-1));
                        c=await get_char(idx);
                        next_c=await get_char((idx+1));
                        if (check_true ((c==="\n"))){
                            line_number+=1;
                             column_number=0
                        };
                        if (check_true (debugmode)){
                             await console.log(_depth,"C->",c,next_c,mode,escape_mode,await clone(acc),await clone(word_acc),(handler_stack && handler_stack.length))
                        };
                        await async function(){
                            if (check_true( ((next_c===undefined)&&await (await Environment.get_global("not"))((await (async function(){
                                let __targ__10=await (await Environment.get_global("last"))(handler_stack);
                                if (__targ__10){
                                     return(__targ__10)[0]
                                } 
                            })()===undefined))&&(await (await Environment.get_global("not"))((c===await (async function(){
                                let __targ__11=await (await Environment.get_global("last"))(handler_stack);
                                if (__targ__11){
                                     return(__targ__11)[0]
                                } 
                            })()))||((handler_stack && handler_stack.length)>1))))) {
                                 return await error("premature end",("premature end: expected: "+await (async function(){
                                    let __targ__12=await (await Environment.get_global("last"))(handler_stack);
                                    if (__targ__12){
                                         return(__targ__12)[0]
                                    } 
                                })()))
                            } else if (check_true( ((next_c===undefined)&&(mode===in_quotes)&&await (await Environment.get_global("not"))((await c["charCodeAt"]()===34))))) {
                                 return await error("premature end","premature end: expected: \"")
                            } else if (check_true( ((next_c===undefined)&&(mode===in_long_text)&&await (await Environment.get_global("not"))((c==="|"))))) {
                                 return await error("premature end","premature end: expected: |")
                            } else if (check_true( ((mode===in_code)&&(_depth===1)&&(next_c===")")&&(c===")")))) {
                                 return  await error("trailing character","unexpected trailing parenthesis")
                            }
                        } ();
                        await async function(){
                            if (check_true( ((c==="\n")&&(mode===in_comment)))) {
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((92===await c["charCodeAt"].call(c,0))&&(mode===in_long_text)))) {
                                (word_acc).push(c);
                                 return  (word_acc).push(c)
                            } else if (check_true( ((mode>0)&&(escape_mode===1)&&(92===await c["charCodeAt"].call(c,0))))) {
                                 return  (word_acc).push(c)
                            } else if (check_true( ((mode>0)&&(92===await c["charCodeAt"].call(c,0))))) {
                                 return  escape_mode=2
                            } else if (check_true( ((mode>0)&&(escape_mode===1)))) {
                                 return  (word_acc).push(await handle_escape_char(c))
                            } else if (check_true( ((mode===in_long_text)&&(escape_mode===0)&&(c==="|")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_quotes)&&(escape_mode===0)&&(c==="\"")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_single_quote)&&(escape_mode===0)&&(c==="'")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((c==="|")&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_long_text;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                    block_return=["=:quotem",block_return];
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( ((c==="\"")&&(escape_mode===0)&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_quotes;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( ((c==="'")&&(escape_mode===0)&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_single_quote;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( (mode===in_comment))) {
                                 return false
                            } else if (check_true( ((c===";")&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_comment;
                                 return  await read_block(await (await Environment.get_global("add"))(_depth,1))
                            } else if (check_true( ((mode===in_code)&&(await (await Environment.get_global("length"))(handler_stack)>0)&&(c===await (async function(){
                                let __targ__13=await (await Environment.get_global("last"))(handler_stack);
                                if (__targ__13){
                                     return(__targ__13)[0]
                                } 
                            })())))) {
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_code)&&read_table[c]&&await (await Environment.get_global("first"))(read_table[c])))) {
                                if (check_true (await (async function(){
                                    let __targ__14=read_table[c];
                                    if (__targ__14){
                                         return(__targ__14)[2]
                                    } 
                                })())){
                                    handler=await (async function(){
                                        let __targ__15=read_table[c];
                                        if (__targ__15){
                                             return(__targ__15)[2]
                                        } 
                                    })();
                                    await (async function(){
                                        let __array_op_rval__16=handler;
                                         if (__array_op_rval__16 instanceof Function){
                                            return await __array_op_rval__16() 
                                        } else {
                                            return[__array_op_rval__16]
                                        }
                                    })();
                                     handler=null
                                };
                                (handler_stack).push(read_table[c]);
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc,backtick_mode));
                                    backtick_mode=0;
                                     word_acc=[]
                                };
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                handler=await (async function(){
                                    let __targ__17=(handler_stack).pop();
                                    if (__targ__17){
                                         return(__targ__17)[1]
                                    } 
                                })();
                                block_return=await (async function(){
                                    let __array_op_rval__18=handler;
                                     if (__array_op_rval__18 instanceof Function){
                                        return await __array_op_rval__18(block_return) 
                                    } else {
                                        return[__array_op_rval__18,block_return]
                                    }
                                })();
                                if (check_true (await (await Environment.get_global("not"))((undefined===block_return)))){
                                    if (check_true ((backtick_mode===1))){
                                        block_return=["=:quotem",block_return];
                                         backtick_mode=0
                                    };
                                     return  (acc).push(block_return)
                                }
                            } else if (check_true( ((mode===in_code)&&(c==="`")))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                 return  backtick_mode=1
                            } else if (check_true( ((mode===in_code)&&(c===":")&&((word_acc && word_acc.length)===0)&&((acc && acc.length)>0)&&(await (await Environment.get_global("last"))(acc) instanceof String || typeof await (await Environment.get_global("last"))(acc)==='string')))) {
                                 return (acc).push(await (await Environment.get_global("add"))((acc).pop(),":"))
                            } else if (check_true( ((mode===in_code)&&(last_c===",")&&((c==="#")||(c==="@"))))) {
                                (word_acc).push(c);
                                (acc).push(await process_word(word_acc));
                                 return  word_acc=[]
                            } else if (check_true( ((mode===in_code)&&((c===" ")||(await c["charCodeAt"].call(c,0)===10)||(await c["charCodeAt"].call(c,0)===9)||((c===",")&&await (await Environment.get_global("not"))((next_c==="@"))&&await (await Environment.get_global("not"))((next_c==="#"))))))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    if (check_true ((backtick_mode===1))){
                                        (acc).push(await process_word(word_acc,backtick_mode));
                                         backtick_mode=0
                                    } else {
                                         (acc).push(await process_word(word_acc))
                                    };
                                     return  word_acc=[]
                                }
                            } else if (check_true( ((mode===in_code)&&(await c["charCodeAt"].call(c,0)===13)))) {
                                 return false
                            } else  {
                                 return  (word_acc).push(c)
                            }
                        } ();
                        column_number+=1;
                         return  last_c=c
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__8()) {
                        await __body_ref__9();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                if (check_true (((word_acc && word_acc.length)>0))){
                    (acc).push(await process_word(word_acc,backtick_mode));
                     word_acc=[]
                };
                 return  acc
            };
            if (check_true (debugmode)){
                 await console.log("read->",in_buffer)
            };
            output_structure=await read_block(0);
            if (check_true (debugmode)){
                 await console.log("read<-",await clone(output_structure))
            };
            if (check_true (((output_structure instanceof Array)&&(await (await Environment.get_global("length"))(output_structure)>1)))){
                (output_structure).unshift("=:iprogn");
                 return  await (await Environment.get_global("first"))(await (async function(){
                    let __array_op_rval__19=output_structure;
                     if (__array_op_rval__19 instanceof Function){
                        return await __array_op_rval__19() 
                    } else {
                        return[__array_op_rval__19]
                    }
                })())
            } else {
                  return await (await Environment.get_global("first"))(output_structure)
            }
        }
    } ()
};__obj__1["desym"]=async function(val) {
        let strip;
        strip=async function(v) {
             return  (""+await (await Environment.get_global("as_lisp"))(v))
        };
         return  await async function(){
            if (check_true( (val instanceof String || typeof val==='string'))) {
                 return await strip(val)
            } else if (check_true( (val instanceof Array))) {
                 return await (async function() {
                    let __for_body__3=async function(v) {
                         return  await strip(v)
                    };
                    let __array__4=[],__elements__2=val;
                    let __BREAK__FLAG__=false;
                    for(let __iter__1 in __elements__2) {
                        __array__4.push(await __for_body__3(__elements__2[__iter__1]));
                        if(__BREAK__FLAG__) {
                             __array__4.pop();
                            break;
                            
                        }
                    }return __array__4;
                     
                })()
            } else  {
                 return val
            }
        } ()
    };__obj__1["desym_ref"]=async function(val) {
     return  ["=:+","",["=:as_lisp",val]]
};__obj__1["deref"]=async function(val) {
     return  ["=:let",[["=:mval",val]],["=:if",["=:and",["=:is_string?","=:mval"],["=:starts_with?","=:","=:mval"]],["=:->","=:mval","substr",2],"=:mval"]]
};__obj__1["when"]=async function(condition,...mbody) {
     return  ["=:if",condition,["=:do",].concat(mbody)]
};__obj__1["if_compile_time_defined"]=async function(quoted_symbol,exists_form,not_exists_form) {
    if (check_true (await (await Environment.get_global("describe"))(quoted_symbol))){
          return exists_form
    } else {
          return (not_exists_form||[])
    }
};__obj__1["defexternal"]=async function(name,value,meta) {
     return  ["=:let",[["=:symname",["=:desym",].concat(name)]],["=:do",["=:set_prop","=:globalThis","=:symname",value],["=:prop","=:globalThis","=:symname"]]]
};__obj__1["defun"]=async function(name,lambda_list,body,meta) {
    let fn_name;
    let fn_args;
    let fn_body;
    let fn_meta;
    let complex_lambda_list;
    let source_details;
    fn_name=name;
    fn_args=lambda_list;
    fn_body=body;
    fn_meta=meta;
    complex_lambda_list=await (await Environment.get_global("or_args"))(await (async function() {
        let __for_body__58=async function(elem) {
             return  (await (await Environment.get_global("length"))(await (await Environment.get_global("flatten"))(await (await Environment.get_global("destructure_list"))(elem)))>0)
        };
        let __array__59=[],__elements__57=lambda_list;
        let __BREAK__FLAG__=false;
        for(let __iter__56 in __elements__57) {
            __array__59.push(await __for_body__58(__elements__57[__iter__56]));
            if(__BREAK__FLAG__) {
                 __array__59.pop();
                break;
                
            }
        }return __array__59;
         
    })());
    source_details=await (await Environment.get_global("add"))({
        name:await (await Environment.get_global("unquotify"))(name),fn_args:await (await Environment.get_global("as_lisp"))(fn_args)
    },await (async function() {
         if (check_true (fn_meta)){
            if (check_true ((fn_meta && fn_meta["description"]))){
                  return await async function(){
                    fn_meta["description"]=(fn_meta && fn_meta["description"]);
                    return fn_meta;
                    
                }()
            };
             fn_meta
        } else {
              return new Object()
        } 
    } )());
    if (check_true (complex_lambda_list)){
          return ["=:defglobal",fn_name,["=:fn",["&","=:args"],["=:destructuring_bind",fn_args,"=:args",fn_body]],["=:quote",source_details]]
    } else {
          return ["=:defglobal",fn_name,["=:fn",fn_args,fn_body],["=:quote",source_details]]
    }
};__obj__1["defun_sync"]=async function(name,args,body,meta) {
    let fn_name;
    let fn_args;
    let fn_body;
    let source_details;
    fn_name=name;
    fn_args=args;
    fn_body=body;
    source_details=await (await Environment.get_global("add"))({
        name:await (await Environment.get_global("unquotify"))(name),fn_args:await (await Environment.get_global("as_lisp"))(fn_args)
    },await (async function() {
         if (check_true (meta)){
              return meta
        } else {
              return new Object()
        } 
    } )());
     return  ["=:do",["=:defglobal",fn_name,["=:function",fn_args,fn_body],["=:quote",source_details]]]
};__obj__1["macroexpand"]=async function(quoted_form) {
    let macro_name;
    let macro_func;
    let expansion;
    macro_name=await (quoted_form && quoted_form["0"])["substr"].call((quoted_form && quoted_form["0"]),2);
    macro_func=await Environment["get_global"].call(Environment,macro_name);
    expansion=await (async function () {
         if (check_true ((macro_func instanceof Function&&await (await Environment.get_global("resolve_path"))(await (async function(){
            let __array_op_rval__5=macro_name;
             if (__array_op_rval__5 instanceof Function){
                return await __array_op_rval__5("eval_when","compile_time") 
            } else {
                return[__array_op_rval__5,"eval_when","compile_time"]
            }
        })(),Environment.definitions)))){
              return await (async function(){
                let __apply_args__6=await quoted_form["slice"].call(quoted_form,1);
                return ( macro_func).apply(this,__apply_args__6)
            })()
        } else {
              return quoted_form
        } 
    })();
     return  expansion
};__obj__1["macroexpand_nq"]=async function(form) {
    let macro_name;
    let macro_func;
    let expansion;
    macro_name=await (async function() {
        {
             let __call_target__=form[0], __call_method__="substr";
            return await __call_target__[__call_method__].call(__call_target__,2)
        } 
    })();
    macro_func=await Environment["get_global"].call(Environment,macro_name);
    expansion=await (async function () {
         if (check_true (macro_func instanceof Function)){
              return await (async function(){
                let __apply_args__8=await form["slice"].call(form,1);
                return ( macro_func).apply(this,__apply_args__8)
            })()
        } else {
              return form
        } 
    })();
     return  ["=:quote",expansion]
};__obj__1["check_type"]=async function(thing,type_name,error_string) {
    if (check_true (error_string)){
          return ["=:if",["=:not",["=:==",["=:sub_type",thing],type_name]],["=:throw","=:TypeError",error_string]]
    } else {
          return ["=:if",["=:not",["=:==",["=:sub_type",thing],type_name]],["=:throw","=:TypeError",["=:+","invalid type: required ",type_name," but got ",["=:sub_type",thing]]]]
    }
};__obj__1["get_object_path"]=function(refname) {
        if (check_true ((( refname["indexOf"].call(refname,".")>-1)||( refname["indexOf"].call(refname,"[")>-1)))){
            let chars;
            let comps;
            let mode;
            let name_acc;
            chars=(refname).split("");
            comps=[];
            mode=0;
            name_acc=[];
             ( function() {
                let __for_body__12=function(c) {
                     return    (function(){
                        if (check_true( ((c===".")&&(mode===0)))) {
                            (comps).push((name_acc).join(""));
                             return  name_acc=[]
                        } else if (check_true( ((mode===0)&&(c==="[")))) {
                            mode=1;
                            (comps).push((name_acc).join(""));
                             return  name_acc=[]
                        } else if (check_true( ((mode===1)&&(c==="]")))) {
                            mode=0;
                            (comps).push((name_acc).join(""));
                             return  name_acc=[]
                        } else  {
                             return (name_acc).push(c)
                        }
                    } )()
                };
                let __array__13=[],__elements__11=chars;
                let __BREAK__FLAG__=false;
                for(let __iter__10 in __elements__11) {
                    __array__13.push( __for_body__12(__elements__11[__iter__10]));
                    if(__BREAK__FLAG__) {
                         __array__13.pop();
                        break;
                        
                    }
                }return __array__13;
                 
            })();
            if (check_true (((name_acc && name_acc.length)>0))){
                 (comps).push((name_acc).join(""))
            };
             return  comps
        } else {
              return  ( function(){
                let __array_op_rval__14=refname;
                 if (__array_op_rval__14 instanceof Function){
                    return  __array_op_rval__14() 
                } else {
                    return[__array_op_rval__14]
                }
            })()
        }
    };__obj__1["do_deferred_splice"]=async function(tree) {
    let rval;
    let idx;
    let tval;
    let deferred_operator;
    rval=null;
    idx=0;
    tval=null;
    deferred_operator=(["=","$","&","!"]).join("");
     return  await async function(){
        if (check_true( (tree instanceof Array))) {
            rval=[];
            await (async function(){
                 let __test_condition__15=async function() {
                     return  (idx<(tree && tree.length))
                };
                let __body_ref__16=async function() {
                    tval=tree[idx];
                    if (check_true ((tval===deferred_operator))){
                        idx+=1;
                        tval=tree[idx];
                         rval=await rval["concat"].call(rval,await do_deferred_splice(tval))
                    } else {
                         (rval).push(await do_deferred_splice(tval))
                    };
                     return  idx+=1
                };
                let __BREAK__FLAG__=false;
                while(await __test_condition__15()) {
                    await __body_ref__16();
                     if(__BREAK__FLAG__) {
                         break;
                        
                    }
                } ;
                
            })();
             return  rval
        } else if (check_true( (tree instanceof Object))) {
            rval=new Object();
            await (async function() {
                let __for_body__19=async function(pset) {
                     return  await async function(){
                        rval[(pset && pset["0"])]=await do_deferred_splice((pset && pset["1"]));
                        return rval;
                        
                    }()
                };
                let __array__20=[],__elements__18=await (await Environment.get_global("pairs"))(tree);
                let __BREAK__FLAG__=false;
                for(let __iter__17 in __elements__18) {
                    __array__20.push(await __for_body__19(__elements__18[__iter__17]));
                    if(__BREAK__FLAG__) {
                         __array__20.pop();
                        break;
                        
                    }
                }return __array__20;
                 
            })();
             return  rval
        } else  {
             return tree
        }
    } ()
};__obj__1["define"]=async function(...defs) {
    let acc;
    let symname;
    acc=["=:progl"];
    symname=null;
    await (async function() {
        let __for_body__24=async function(defset) {
            (acc).push(["=:defvar",(defset && defset["0"]),(defset && defset["1"])]);
            symname=(defset && defset["0"]);
            (acc).push(["=:set_prop","=:Environment.global_ctx.scope",(""+await (await Environment.get_global("as_lisp"))(symname)),symname]);
            if (check_true (((defset && defset["2"]) instanceof Object))){
                 return  (acc).push([["=:set_prop","=:Environment.definitions",(""+await (await Environment.get_global("as_lisp"))(symname)+""),(defset && defset["2"])]])
            }
        };
        let __array__25=[],__elements__23=defs;
        let __BREAK__FLAG__=false;
        for(let __iter__22 in __elements__23) {
            __array__25.push(await __for_body__24(__elements__23[__iter__22]));
            if(__BREAK__FLAG__) {
                 __array__25.pop();
                break;
                
            }
        }return __array__25;
         
    })();
     return  acc
};__obj__1["defbinding"]=async function(...args) {
    let binding;
    let acc;
    binding=null;
    acc=["=:list"];
    await (async function() {
        let __for_body__28=async function(bind_set) {
             return  await async function(){
                if (check_true( ((bind_set instanceof Array)&&(((bind_set && bind_set.length)===2)||((bind_set && bind_set.length)===3))&&((bind_set && bind_set["1"]) instanceof Array)&&((bind_set && bind_set["1"] && bind_set["1"]["length"])===2)))) {
                    binding=["=:quote",["=:bind",(bind_set && bind_set["1"] && bind_set["1"]["0"]),(bind_set && bind_set["1"] && bind_set["1"]["1"])]];
                     return  (acc).push(await (async function ()  {
                        let __array_arg__30=(async function() {
                            if (check_true (((bind_set && bind_set["2"]) instanceof Object))){
                                  return await (await Environment.get_global("add"))(new Object(),(bind_set && bind_set["2"]),{
                                    initializer:binding
                                })
                            } else {
                                  return {
                                    initializer:binding
                                }
                            }
                        } );
                        return ["=:defglobal",((await Environment.get_global("*namespace*"))+"/"+await (async function ()  {
                            let mval;
                            mval=(bind_set && bind_set["0"]);
                            if (check_true (((mval instanceof String || typeof mval==='string')&&await (await Environment.get_global("starts_with?"))("=:",mval)))){
                                  return await mval["substr"].call(mval,2)
                            } else {
                                  return mval
                            }
                        } )()),["=:bind",(bind_set && bind_set["1"] && bind_set["1"]["0"]),(bind_set && bind_set["1"] && bind_set["1"]["1"])],await __array_arg__30()]
                    } )())
                } else  {
                     throw new SyntaxError("defbinding received malform arguments");
                    
                }
            } ()
        };
        let __array__29=[],__elements__27=args;
        let __BREAK__FLAG__=false;
        for(let __iter__26 in __elements__27) {
            __array__29.push(await __for_body__28(__elements__27[__iter__26]));
            if(__BREAK__FLAG__) {
                 __array__29.pop();
                break;
                
            }
        }return __array__29;
         
    })();
     return  acc
};__obj__1["define_env"]=async function(...defs) {
    let acc;
    let symname;
    acc=["=:progl"];
    symname=null;
    await (async function() {
        let __for_body__33=async function(defset) {
            (acc).push(["=:defvar",(defset && defset["0"]),(defset && defset["1"])]);
            symname=(defset && defset["0"]);
            (acc).push(["=:set_prop","=:Environment.global_ctx.scope",(""+await (await Environment.get_global("as_lisp"))(symname)),symname]);
            if (check_true (((defset && defset["2"]) instanceof Object))){
                 return  (acc).push([["=:set_prop","=:Environment.definitions",(""+await (await Environment.get_global("as_lisp"))(symname)+""),(defset && defset["2"])]])
            }
        };
        let __array__34=[],__elements__32=defs;
        let __BREAK__FLAG__=false;
        for(let __iter__31 in __elements__32) {
            __array__34.push(await __for_body__33(__elements__32[__iter__31]));
            if(__BREAK__FLAG__) {
                 __array__34.pop();
                break;
                
            }
        }return __array__34;
         
    })();
     return  acc
};__obj__1["define_env%"]=async function(source_env_ctx,...defs) {
    let acc;
    let symname;
    acc=["=:progl"];
    symname=null;
    console.log("define_env%: source_env? ",(source_env_ctx&&true),((source_env_ctx && source_env_ctx["scope"]) instanceof Object));
    await async function(){
        if (check_true( (false&&source_env_ctx&&((source_env_ctx && source_env_ctx["scope"]) instanceof Object)))) {
             return  await (async function() {
                let __for_body__37=async function(defset) {
                    (acc).push(["=:defvar",(defset && defset["0"]),(defset && defset["1"])]);
                     return  console.log("symbol included: ",(defset && defset["0"]))
                };
                let __array__38=[],__elements__36=await (await Environment.get_global("pairs"))((source_env_ctx && source_env_ctx["scope"]));
                let __BREAK__FLAG__=false;
                for(let __iter__35 in __elements__36) {
                    __array__38.push(await __for_body__37(__elements__36[__iter__35]));
                    if(__BREAK__FLAG__) {
                         __array__38.pop();
                        break;
                        
                    }
                }return __array__38;
                 
            })()
        } else  {
             return  await (async function() {
                let __for_body__41=async function(defset) {
                    (acc).push(["=:defvar",(defset && defset["0"]),(defset && defset["1"])]);
                    symname=(defset && defset["0"]);
                    (acc).push(["=:set_prop","=:Environment.global_ctx.scope",(""+await (await Environment.get_global("as_lisp"))(symname)),symname]);
                    if (check_true (((defset && defset["2"]) instanceof Object))){
                         return  (acc).push([["=:set_prop","=:Environment.definitions",(""+await (await Environment.get_global("as_lisp"))(symname)+""),(defset && defset["2"])]])
                    }
                };
                let __array__42=[],__elements__40=defs;
                let __BREAK__FLAG__=false;
                for(let __iter__39 in __elements__40) {
                    __array__42.push(await __for_body__41(__elements__40[__iter__39]));
                    if(__BREAK__FLAG__) {
                         __array__42.pop();
                        break;
                        
                    }
                }return __array__42;
                 
            })()
        }
    } ();
     return  acc
};__obj__1["type"]=async function(x) {
     return  await async function(){
        if (check_true( (null===x))) {
             return "null"
        } else if (check_true( (undefined===x))) {
             return "undefined"
        } else if (check_true( (x instanceof Array))) {
             return "array"
        } else  {
             return typeof x
        }
    } ()
};__obj__1["destructure_list"]=async function(elems) {
    let idx;
    let acc;
    let structure;
    let follow_tree;
    idx=0;
    acc=[];
    structure=elems;
    follow_tree=async function(elems,_path_prefix) {
         return  await async function(){
            if (check_true( (elems instanceof Array))) {
                 return await (await Environment.get_global("map"))(async function(elem,idx) {
                     return  await follow_tree(elem,await (await Environment.get_global("add"))(_path_prefix,idx))
                },elems)
            } else if (check_true( (elems instanceof Object))) {
                 return await (async function() {
                    let __for_body__45=async function(pset) {
                         return  await follow_tree((pset && pset["1"]),await (await Environment.get_global("add"))(_path_prefix,(pset && pset["0"])))
                    };
                    let __array__46=[],__elements__44=await (await Environment.get_global("pairs"))(elems);
                    let __BREAK__FLAG__=false;
                    for(let __iter__43 in __elements__44) {
                        __array__46.push(await __for_body__45(__elements__44[__iter__43]));
                        if(__BREAK__FLAG__) {
                             __array__46.pop();
                            break;
                            
                        }
                    }return __array__46;
                     
                })()
            } else  {
                 return (acc).push(_path_prefix)
            }
        } ()
    };
    await follow_tree(structure,[]);
     return  acc
};__obj__1["destructuring_bind"]=async function(bind_vars,expression,...forms) {
    let binding_vars;
    let paths;
    let bound_expression;
    let allocations;
    let acc;
    binding_vars=bind_vars;
    paths=await (await Environment.get_global("destructure_list"))(binding_vars);
    bound_expression=expression;
    allocations=[];
    acc=["=:let"];
    await (await Environment.get_global("assert"))(((bind_vars instanceof Array)&&await (await Environment.get_global("is_value?"))(expression)&&await (await Environment.get_global("is_value?"))(forms)),"destructuring_bind: requires 3 arguments");
    await (async function() {
        let __for_body__49=async function(idx) {
             return  (allocations).push([await (await Environment.get_global("resolve_path"))(paths[idx],binding_vars),await async function(){
                if (check_true( (expression instanceof Object))) {
                     return await (await Environment.get_global("resolve_path"))(paths[idx],expression)
                } else  {
                     return (await (await Environment.get_global("conj"))(await (async function(){
                        let __array_op_rval__51=expression;
                         if (__array_op_rval__51 instanceof Function){
                            return await __array_op_rval__51() 
                        } else {
                            return[__array_op_rval__51]
                        }
                    })(),paths[idx])).join(".")
                }
            } ()])
        };
        let __array__50=[],__elements__48=await (await Environment.get_global("range"))(await (await Environment.get_global("length"))(paths));
        let __BREAK__FLAG__=false;
        for(let __iter__47 in __elements__48) {
            __array__50.push(await __for_body__49(__elements__48[__iter__47]));
            if(__BREAK__FLAG__) {
                 __array__50.pop();
                break;
                
            }
        }return __array__50;
         
    })();
    (acc).push(allocations);
    acc=await (await Environment.get_global("conj"))(acc,forms);
     return  acc
};__obj__1["split_by_recurse"]=function(token,container) {
         return    (function(){
            if (check_true( (container instanceof String || typeof container==='string'))) {
                 return (container).split(token)
            } else if (check_true( (container instanceof Array))) {
                 return  ( Environment.get_global("map"))(async function(elem) {
                     return   ( Environment.get_global("split_by_recurse"))(token,elem)
                },container)
            }
        } )()
    };__obj__1["reduce"]=async function(...args) {
    let elem;
    let item_list;
    let form;
    elem=(args && args["0"] && args["0"]["0"]);
    item_list=(args && args["0"] && args["0"]["1"]);
    form=(args && args["1"]);
     return  ["=:let",[["=:__collector",[]],["=:__result","=:nil"],["=:__action",["=:fn",[].concat(elem),form]]],["=:declare",["=:function","=:__action"]],["=:for_each",["=:__item",item_list],["=:do",["=:=","=:__result",["=:__action","=:__item"]],["=:if","=:__result",["=:push","=:__collector","=:__result"]]]],"=:__collector"]
};__obj__1["bind_function"]=function anonymous(func,this_arg
) {
{ return func.bind(this_arg) }
};__obj__1["is_reference?"]=async function(val) {
     return  ["=:and",["=:is_string?",val],["=:>",["=:length",val],2],["=:starts_with?",["=:quote","=:"],val]]
};__obj__1["scan_str"]=async function(regex,search_string) {
    let result;
    let last_result;
    let totals;
    let strs;
    result=null;
    last_result=null;
    totals=[];
    strs=(""+search_string);
    if (check_true (await (await Environment.get_global("is_regex?"))(regex))){
        regex.lastIndex=0;
         await (async function(){
             let __test_condition__61=async function() {
                 return  (await (async function ()  {
                    result=await regex["exec"].call(regex,strs);
                     return  true
                } )()&&result&&await (async function () {
                     if (check_true (last_result)){
                          return await (await Environment.get_global("not"))(((result && result["0"])===(last_result && last_result["0"])))
                    } else {
                          return true
                    } 
                })())
            };
            let __body_ref__62=async function() {
                last_result=result;
                 return  (totals).push(await (await Environment.get_global("to_object"))(await (await Environment.get_global("map"))(async function(v) {
                     return  await (async function(){
                        let __array_op_rval__63=v;
                         if (__array_op_rval__63 instanceof Function){
                            return await __array_op_rval__63(result[v]) 
                        } else {
                            return[__array_op_rval__63,result[v]]
                        }
                    })()
                },await (await Environment.get_global("keys"))(result))))
            };
            let __BREAK__FLAG__=false;
            while(await __test_condition__61()) {
                await __body_ref__62();
                 if(__BREAK__FLAG__) {
                     break;
                    
                }
            } ;
            
        })()
    } else throw new Error(new ReferenceError(("scan_str: invalid RegExp provided: "+regex)));
    ;
     return  totals
};__obj__1["remove_prop"]=async function(obj,key) {
    if (check_true (await (await Environment.get_global("not"))((undefined===obj[key])))){
        {
            let val;
            val=obj[key];
            await (await Environment.get_global("delete_prop"))(obj,key);
             return  val
        }
    }
};__obj__1["object_methods"]=async function(obj) {
    let properties;
    let current_obj;
    properties=new Set();
    current_obj=obj;
    await (async function(){
         let __test_condition__278=async function() {
             return  current_obj
        };
        let __body_ref__279=async function() {
            await (await Environment.get_global("map"))(async function(item) {
                 return  await properties["add"].call(properties,item)
            },await Object.getOwnPropertyNames(current_obj));
             return  current_obj=await Object.getPrototypeOf(current_obj)
        };
        let __BREAK__FLAG__=false;
        while(await __test_condition__278()) {
            await __body_ref__279();
             if(__BREAK__FLAG__) {
                 break;
                
            }
        } ;
        
    })();
     return  await (async function() {
        {
             let __call_target__=await Array.from(await properties["keys"]()), __call_method__="filter";
            return await __call_target__[__call_method__].call(__call_target__,async function(item) {
                 return  item instanceof Function
            })
        } 
    })()
};__obj__1["expand_dot_accessor"]=async function(val,ctx) {
    let comps;
    let find_in_ctx;
    let reference;
    let val_type;
    comps=(val).split(".");
    find_in_ctx=async function(the_ctx) {
         return  await async function(){
            if (check_true( await (async function(){
                let __targ__66=(the_ctx && the_ctx["scope"]);
                if (__targ__66){
                     return(__targ__66)[reference]
                } 
            })())) {
                 return await (async function(){
                    let __targ__67=(the_ctx && the_ctx["scope"]);
                    if (__targ__67){
                         return(__targ__67)[reference]
                    } 
                })()
            } else if (check_true((the_ctx && the_ctx["parent"]))) {
                 return await find_in_ctx((the_ctx && the_ctx["parent"]))
            }
        } ()
    };
    reference=(comps).shift();
    val_type=await find_in_ctx(ctx);
     return  await async function(){
        if (check_true( (0===(comps && comps.length)))) {
             return reference
        } else if (check_true( ((val_type instanceof Object)&&await (await Environment.get_global("contains?"))((comps && comps["0"]),await (await Environment.get_global("object_methods"))(val_type))&&await (await Environment.get_global("not"))(await val_type["propertyIsEnumerable"].call(val_type,(comps && comps["0"])))))) {
             return val
        } else  {
             return (await (await Environment.get_global("conj"))(await (async function(){
                let __array_op_rval__68=reference;
                 if (__array_op_rval__68 instanceof Function){
                    return await __array_op_rval__68() 
                } else {
                    return[__array_op_rval__68]
                }
            })(),await (await Environment.get_global("flatten"))(await (async function() {
                let __for_body__71=async function(comp) {
                    if (check_true (await (await Environment.get_global("is_number?"))(comp))){
                          return ["[",comp,"]"]
                    } else {
                          return ["[\"",comp,"\"]"]
                    }
                };
                let __array__72=[],__elements__70=comps;
                let __BREAK__FLAG__=false;
                for(let __iter__69 in __elements__70) {
                    __array__72.push(await __for_body__71(__elements__70[__iter__69]));
                    if(__BREAK__FLAG__) {
                         __array__72.pop();
                        break;
                        
                    }
                }return __array__72;
                 
            })()))).join("")
        }
    } ()
};__obj__1["getf_ctx"]=async function(ctx,name,_value) {
    if (check_true ((ctx&&(name instanceof String || typeof name==='string')))){
          return await async function(){
            if (check_true( await (await Environment.get_global("not"))((undefined===await (async function(){
                let __targ__73=(ctx && ctx["scope"]);
                if (__targ__73){
                     return(__targ__73)[name]
                } 
            })())))) {
                 if (check_true (await (await Environment.get_global("not"))((_value===undefined)))){
                    await async function(){
                        let __target_obj__74=(ctx && ctx["scope"]);
                        __target_obj__74[name]=_value;
                        return __target_obj__74;
                        
                    }();
                     return  _value
                } else {
                      return await (async function(){
                        let __targ__75=(ctx && ctx["scope"]);
                        if (__targ__75){
                             return(__targ__75)[name]
                        } 
                    })()
                }
            } else if (check_true((ctx && ctx["parent"]))) {
                 return await (await Environment.get_global("getf_ctx"))((ctx && ctx["parent"]),name,_value)
            } else  {
                 return undefined
            }
        } ()
    } else throw new Error("invalid call to getf_ctx: missing argument/s");
    
};__obj__1["setf_ctx"]=async function(ctx,name,value) {
    let found_val;
    found_val=await (await Environment.get_global("getf_ctx"))(ctx,name,value);
    if (check_true ((found_val===undefined))){
         await async function(){
            let __target_obj__76=(ctx && ctx["scope"]);
            __target_obj__76[name]=value;
            return __target_obj__76;
            
        }()
    };
     return  value
};__obj__1["set_path"]=async function(path,obj,value) {
    let fpath;
    let idx;
    let rpath;
    let target_obj;
    fpath=await clone(path);
    idx=(fpath).pop();
    rpath=fpath;
    target_obj=null;
    target_obj=await (await Environment.get_global("resolve_path"))(rpath,obj);
    if (check_true (target_obj)){
         return  await async function(){
            target_obj[idx]=value;
            return target_obj;
            
        }()
    } else throw new RangeError(("set_path: invalid path: "+path));
    
};__obj__1["minmax"]=async function(container) {
    let value_found;
    let smallest;
    let biggest;
    value_found=false;
    smallest=(await Environment.get_global("MAX_SAFE_INTEGER"));
    biggest=(-1*(await Environment.get_global("MAX_SAFE_INTEGER")));
    if (check_true ((container&&(container instanceof Array)&&(await (await Environment.get_global("length"))(container)>0)))){
        await (async function() {
            let __for_body__80=async function(value) {
                 return  (await (await Environment.get_global("is_number?"))(value)&&await (async function ()  {
                    value_found=true;
                    smallest=await Math.min(value,smallest);
                     return  biggest=await Math.max(value,biggest)
                } )())
            };
            let __array__81=[],__elements__79=container;
            let __BREAK__FLAG__=false;
            for(let __iter__78 in __elements__79) {
                __array__81.push(await __for_body__80(__elements__79[__iter__78]));
                if(__BREAK__FLAG__) {
                     __array__81.pop();
                    break;
                    
                }
            }return __array__81;
             
        })();
        if (check_true (value_found)){
              return await (async function(){
                let __array_op_rval__82=smallest;
                 if (__array_op_rval__82 instanceof Function){
                    return await __array_op_rval__82(biggest) 
                } else {
                    return[__array_op_rval__82,biggest]
                }
            })()
        } else {
              return null
        }
    } else {
          return null
    }
};__obj__1["gen_multiples"]=async function(len,multiple_ques_) {
    let val;
    let acc;
    let mult;
    val=100;
    acc=await (async function(){
        let __array_op_rval__83=val;
         if (__array_op_rval__83 instanceof Function){
            return await __array_op_rval__83() 
        } else {
            return[__array_op_rval__83]
        }
    })();
    mult=(multiple_ques_||10);
    await (async function() {
        let __for_body__86=async function(r) {
             return  (acc).push(val=(val*mult))
        };
        let __array__87=[],__elements__85=await (await Environment.get_global("range"))(len);
        let __BREAK__FLAG__=false;
        for(let __iter__84 in __elements__85) {
            __array__87.push(await __for_body__86(__elements__85[__iter__84]));
            if(__BREAK__FLAG__) {
                 __array__87.pop();
                break;
                
            }
        }return __array__87;
         
    })();
     return  (acc).slice(0).reverse()
};__obj__1["path_multiply"]=async function(path,multiple_ques_) {
    let acc;
    let multiples;
    acc=0;
    multiples=await (await Environment.get_global("gen_multiples"))(await (await Environment.get_global("length"))(path),multiple_ques_);
    await (async function() {
        let __for_body__90=async function(pset) {
             return  acc=(acc+((pset && pset["0"])*(pset && pset["1"])))
        };
        let __array__91=[],__elements__89=await (await Environment.get_global("pairs"))(await (await Environment.get_global("interlace"))(path,multiples));
        let __BREAK__FLAG__=false;
        for(let __iter__88 in __elements__89) {
            __array__91.push(await __for_body__90(__elements__89[__iter__88]));
            if(__BREAK__FLAG__) {
                 __array__91.pop();
                break;
                
            }
        }return __array__91;
         
    })();
     return  acc
};__obj__1["splice_in_return_a"]=async function(js_tree,_ctx,_depth,_path) {
     return  await async function(){
        if (check_true( (js_tree instanceof Array))) {
            let idx;
            let ntree;
            let root;
            let if_links;
            let function_block_ques_;
            let last_path;
            let new_ctx;
            let splice_log;
            let next_val;
            idx=-1;
            ntree=[];
            _depth=(_depth||0);
            _path=(_path||[]);
            root=_path;
            if_links=new Object();
            function_block_ques_=await (async function () {
                 if (check_true ((_depth===0))){
                      return true
                } else {
                      return false
                } 
            })();
            last_path=null;
            new_ctx=async function(ctx) {
                 return  {
                    parent:ctx,scope:{
                        level:await (async function() {
                            if (check_true ((ctx && ctx["scope"] && ctx["scope"]["level"]))){
                                  return await (await Environment.get_global("add"))((ctx && ctx["scope"] && ctx["scope"]["level"]),1)
                            } else {
                                  return 0
                            }
                        } )(),viable_return_points:[],base_path:await clone(_path),potential_return_points:[],return_found:false,if_links:new Object()
                    }
                }
            };
            _ctx=(_ctx||await new_ctx(null));
            splice_log=await (await Environment.get_global("defclog"))({
                prefix:("splice_return ["+(_ctx && _ctx["scope"] && _ctx["scope"]["level"])+"]"),color:"black",background:"#20F0F0"
            });
            next_val=null;
            await (async function() {
                let __for_body__94=async function(comp) {
                    idx+=1;
                    last_path=await (await Environment.get_global("conj"))(_path,await (async function(){
                        let __array_op_rval__96=idx;
                         if (__array_op_rval__96 instanceof Function){
                            return await __array_op_rval__96() 
                        } else {
                            return[__array_op_rval__96]
                        }
                    })());
                     return  await async function(){
                        if (check_true( (comp instanceof Array))) {
                             return (ntree).push(await (await Environment.get_global("splice_in_return_a"))(comp,_ctx,await (await Environment.get_global("add"))(_depth,1),await (await Environment.get_global("conj"))(_path,await (async function(){
                                let __array_op_rval__97=idx;
                                 if (__array_op_rval__97 instanceof Function){
                                    return await __array_op_rval__97() 
                                } else {
                                    return[__array_op_rval__97]
                                }
                            })())))
                        } else if (check_true( ((comp instanceof String || typeof comp==='string')||await (await Environment.get_global("is_number?"))(comp)||comp instanceof Function))) {
                             return (ntree).push(comp)
                        } else if (check_true( (comp instanceof Object))) {
                             return await async function(){
                                if (check_true( (comp && comp["ctype"]) instanceof Function)) {
                                     return  (ntree).push(comp)
                                } else if (check_true( (((comp && comp["ctype"])==="AsyncFunction")||((comp && comp["ctype"])==="Function")))) {
                                    _path=[];
                                    _ctx=await new_ctx(_ctx);
                                    function_block_ques_=true;
                                     return  (ntree).push(comp)
                                } else if (check_true( ((comp && comp["mark"])==="rval"))) {
                                    (await (await Environment.get_global("getf_ctx"))(_ctx,"potential_return_points")).push({
                                        path:await (await Environment.get_global("conj"))(_path,await (async function(){
                                            let __array_op_rval__98=idx;
                                             if (__array_op_rval__98 instanceof Function){
                                                return await __array_op_rval__98() 
                                            } else {
                                                return[__array_op_rval__98]
                                            }
                                        })()),type:(comp && comp["mark"]),block_step:(comp && comp["block_step"]),if_id:(comp && comp["if_id"]),source:await JSON.stringify(await clone(await (await Environment.get_global("slice"))(js_tree,idx))),lambda_step:(comp && comp["lambda_step"])
                                    });
                                    if (check_true (((comp && comp["if_id"])&&(null==await (async function(){
                                        let __targ__99=await (await Environment.get_global("getf_ctx"))(_ctx,"if_links");
                                        if (__targ__99){
                                             return(__targ__99)[(comp && comp["if_id"])]
                                        } 
                                    })())))){
                                         await async function(){
                                            let __target_obj__100=await (await Environment.get_global("getf_ctx"))(_ctx,"if_links");
                                            __target_obj__100[(comp && comp["if_id"])]=[];
                                            return __target_obj__100;
                                            
                                        }()
                                    };
                                    if (check_true ((comp && comp["if_id"]))){
                                         (await (async function(){
                                            let __targ__101=await (await Environment.get_global("getf_ctx"))(_ctx,"if_links");
                                            if (__targ__101){
                                                 return(__targ__101)[(comp && comp["if_id"])]
                                            } 
                                        })()).push(await (await Environment.get_global("last"))(await (await Environment.get_global("getf_ctx"))(_ctx,"potential_return_points")))
                                    };
                                     return  (ntree).push(comp)
                                } else if (check_true( ((comp && comp["mark"])==="forced_return"))) {
                                    (await (await Environment.get_global("getf_ctx"))(_ctx,"viable_return_points")).push({
                                        path:await (await Environment.get_global("conj"))(_path,await (async function(){
                                            let __array_op_rval__102=idx;
                                             if (__array_op_rval__102 instanceof Function){
                                                return await __array_op_rval__102() 
                                            } else {
                                                return[__array_op_rval__102]
                                            }
                                        })()),if_id:(comp && comp["if_id"]),block_step:(comp && comp["block_step"]),lambda_step:(comp && comp["lambda_step"]),source:await JSON.stringify(await clone(await (await Environment.get_global("slice"))(js_tree,idx))),type:(comp && comp["mark"])
                                    });
                                    if (check_true (((comp && comp["if_id"])&&(null==await (async function(){
                                        let __targ__103=await (await Environment.get_global("getf_ctx"))(_ctx,"if_links");
                                        if (__targ__103){
                                             return(__targ__103)[(comp && comp["if_id"])]
                                        } 
                                    })())))){
                                         await async function(){
                                            let __target_obj__104=await (await Environment.get_global("getf_ctx"))(_ctx,"if_links");
                                            __target_obj__104[(comp && comp["if_id"])]=[];
                                            return __target_obj__104;
                                            
                                        }()
                                    };
                                    if (check_true ((comp && comp["if_id"]))){
                                         (await (async function(){
                                            let __targ__105=await (await Environment.get_global("getf_ctx"))(_ctx,"if_links");
                                            if (__targ__105){
                                                 return(__targ__105)[(comp && comp["if_id"])]
                                            } 
                                        })()).push(await (await Environment.get_global("last"))(await (await Environment.get_global("getf_ctx"))(_ctx,"viable_return_points")))
                                    };
                                     return  (ntree).push(comp)
                                } else if (check_true( ((comp && comp["mark"])==="final-return"))) {
                                    (await (await Environment.get_global("getf_ctx"))(_ctx,"viable_return_points")).push({
                                        path:await (await Environment.get_global("conj"))(_path,await (async function(){
                                            let __array_op_rval__106=idx;
                                             if (__array_op_rval__106 instanceof Function){
                                                return await __array_op_rval__106() 
                                            } else {
                                                return[__array_op_rval__106]
                                            }
                                        })()),type:(comp && comp["mark"]),lambda_step:(comp && comp["lambda_step"]),block_step:(comp && comp["block_step"]),source:await JSON.stringify(await clone(await (await Environment.get_global("slice"))(js_tree,idx))),if_id:(comp && comp["if_id"])
                                    });
                                    if (check_true (((comp && comp["if_id"])&&(null==await (async function(){
                                        let __targ__107=await (await Environment.get_global("getf_ctx"))(_ctx,"if_links");
                                        if (__targ__107){
                                             return(__targ__107)[(comp && comp["if_id"])]
                                        } 
                                    })())))){
                                         await async function(){
                                            let __target_obj__108=await (await Environment.get_global("getf_ctx"))(_ctx,"if_links");
                                            __target_obj__108[(comp && comp["if_id"])]=[];
                                            return __target_obj__108;
                                            
                                        }()
                                    };
                                    if (check_true ((comp && comp["if_id"]))){
                                        (await (async function(){
                                            let __targ__109=await (await Environment.get_global("getf_ctx"))(_ctx,"if_links");
                                            if (__targ__109){
                                                 return(__targ__109)[(comp && comp["if_id"])]
                                            } 
                                        })()).push(await (await Environment.get_global("last"))(await (await Environment.get_global("getf_ctx"))(_ctx,"viable_return_points")));
                                         (await (await Environment.get_global("getf_ctx"))(_ctx,"potential_return_points")).push({
                                            path:await (await Environment.get_global("conj"))(_path,await (async function(){
                                                let __array_op_rval__110=idx;
                                                 if (__array_op_rval__110 instanceof Function){
                                                    return await __array_op_rval__110() 
                                                } else {
                                                    return[__array_op_rval__110]
                                                }
                                            })()),type:(comp && comp["mark"]),lambda_step:(comp && comp["lambda_step"]),block_step:(comp && comp["block_step"]),source:await JSON.stringify(await clone(await (await Environment.get_global("slice"))(js_tree,idx))),if_id:(comp && comp["if_id"])
                                        })
                                    };
                                    await (await Environment.get_global("setf_ctx"))(_ctx,"return_found",true);
                                     return  (ntree).push(comp)
                                } else  {
                                     return (ntree).push(comp)
                                }
                            } ()
                        } else  {
                             return (ntree).push(comp)
                        }
                    } ()
                };
                let __array__95=[],__elements__93=js_tree;
                let __BREAK__FLAG__=false;
                for(let __iter__92 in __elements__93) {
                    __array__95.push(await __for_body__94(__elements__93[__iter__92]));
                    if(__BREAK__FLAG__) {
                         __array__95.pop();
                        break;
                        
                    }
                }return __array__95;
                 
            })();
            if (check_true (function_block_ques_)){
                {
                    let viables;
                    let potentials;
                    let base_path;
                    let base_addr;
                    let final_viable_path;
                    let max_viable;
                    let plength;
                    let if_paths;
                    let max_path_segment_length;
                    let final_return_found;
                    viables=((await (await Environment.get_global("getf_ctx"))(_ctx,"viable_return_points")||[])).slice(0).reverse();
                    potentials=((await (await Environment.get_global("getf_ctx"))(_ctx,"potential_return_points")||[])).slice(0).reverse();
                    base_path=await (await Environment.get_global("getf_ctx"))(_ctx,"base_path");
                    base_addr=null;
                    final_viable_path=(viables&&await (await Environment.get_global("first"))(viables)&&await (async function(){
                        let __targ__111=await (await Environment.get_global("first"))(viables);
                        if (__targ__111){
                             return(__targ__111)["path"]
                        } 
                    })());
                    max_viable=0;
                    plength=0;
                    if_paths=[];
                    max_path_segment_length=null;
                    final_return_found=await (await Environment.get_global("getf_ctx"))(_ctx,"return_found");
                    await (async function() {
                        let __for_body__114=async function(v) {
                             return  await (await Environment.get_global("set_path"))((v && v["path"]),ntree,{
                                mark:"return_point"
                            })
                        };
                        let __array__115=[],__elements__113=viables;
                        let __BREAK__FLAG__=false;
                        for(let __iter__112 in __elements__113) {
                            __array__115.push(await __for_body__114(__elements__113[__iter__112]));
                            if(__BREAK__FLAG__) {
                                 __array__115.pop();
                                break;
                                
                            }
                        }return __array__115;
                         
                    })();
                     await (async function() {
                        let __for_body__118=async function(p) {
                            plength=await Math.min(await (await Environment.get_global("length"))((p && p["path"])),await (await Environment.get_global("length"))(final_viable_path));
                            let ppath=await (await Environment.get_global("slice"))((p && p["path"]),0,plength);
                            ;
                            let vpath=await (async function () {
                                 if (check_true (final_viable_path)){
                                      return await (await Environment.get_global("slice"))(final_viable_path,0,plength)
                                } else {
                                      return []
                                } 
                            })();
                            ;
                            max_path_segment_length=await Math.max(8,(1+await (async function(){
                                let __targ__120=await (await Environment.get_global("minmax"))(ppath);
                                if (__targ__120){
                                     return(__targ__120)[1]
                                } 
                            })()),(1+await (async function(){
                                let __targ__121=await (await Environment.get_global("minmax"))(vpath);
                                if (__targ__121){
                                     return(__targ__121)[1]
                                } 
                            })()));
                            if (check_true (((await (await Environment.get_global("path_multiply"))(ppath,max_path_segment_length)>await (await Environment.get_global("path_multiply"))(vpath,max_path_segment_length))||(((p && p["block_step"])===0)&&((p && p["lambda_step"])===0))||(0===await (await Environment.get_global("length"))(viables))))){
                                await (await Environment.get_global("set_path"))((p && p["path"]),ntree,{
                                    mark:"return_point"
                                });
                                if (check_true (((p && p["if_id"])&&await (async function(){
                                    let __targ__122=await (await Environment.get_global("getf_ctx"))(_ctx,"if_links");
                                    if (__targ__122){
                                         return(__targ__122)[(p && p["if_id"])]
                                    } 
                                })()))){
                                     return  await (async function() {
                                        let __for_body__125=async function(pinfo) {
                                            if (check_true ((undefined===if_paths[await (await Environment.get_global("as_lisp"))((pinfo && pinfo["path"]))]))){
                                                await async function(){
                                                    if_paths[await (await Environment.get_global("as_lisp"))((pinfo && pinfo["path"]))]=true;
                                                    return if_paths;
                                                    
                                                }();
                                                 return  await (await Environment.get_global("set_path"))((pinfo && pinfo["path"]),ntree,{
                                                    mark:"return_point"
                                                })
                                            }
                                        };
                                        let __array__126=[],__elements__124=await (async function(){
                                            let __targ__128=await (await Environment.get_global("getf_ctx"))(_ctx,"if_links");
                                            if (__targ__128){
                                                 return(__targ__128)[(p && p["if_id"])]
                                            } 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__123 in __elements__124) {
                                            __array__126.push(await __for_body__125(__elements__124[__iter__123]));
                                            if(__BREAK__FLAG__) {
                                                 __array__126.pop();
                                                break;
                                                
                                            }
                                        }return __array__126;
                                         
                                    })()
                                }
                            } else {
                                if (check_true (((undefined===if_paths[await (await Environment.get_global("as_lisp"))((p && p["path"]))])&&await (await Environment.get_global("not"))(((p && p["type"])==="final-return"))))){
                                     return  await (await Environment.get_global("set_path"))((p && p["path"]),ntree,{
                                        mark:"ignore"
                                    })
                                }
                            }
                        };
                        let __array__119=[],__elements__117=potentials;
                        let __BREAK__FLAG__=false;
                        for(let __iter__116 in __elements__117) {
                            __array__119.push(await __for_body__118(__elements__117[__iter__116]));
                            if(__BREAK__FLAG__) {
                                 __array__119.pop();
                                break;
                                
                            }
                        }return __array__119;
                         
                    })()
                }
            };
             return  ntree
        } else  {
             return js_tree
        }
    } ()
};__obj__1["splice_in_return_b"]=async function(js_tree,_ctx,_depth) {
     return  await async function(){
        if (check_true( (js_tree instanceof Array))) {
            let idx;
            let ntree;
            let next_val;
            let flattened;
            idx=0;
            ntree=[];
            _ctx=(_ctx||new Object());
            next_val=null;
            flattened=await (await Environment.get_global("flatten"))(js_tree);
            await (async function() {
                let __for_body__131=async function(comp) {
                    next_val=flattened[(idx+1)];
                    await async function(){
                        if (check_true( (comp instanceof Array))) {
                             return (ntree).push(await (await Environment.get_global("splice_in_return_b"))(comp,_ctx,await (await Environment.get_global("add"))((_depth||0),1)))
                        } else if (check_true( ((comp instanceof Object)&&((comp && comp["mark"])==="return_point")&&(await (await Environment.get_global("not"))(("return"===next_val))&&await (await Environment.get_global("not"))(("throw"===next_val))&&await (await Environment.get_global("not"))(("yield"===next_val))&&await (await Environment.get_global("not"))(((next_val instanceof Object)&&((next_val && next_val["ctype"]) instanceof String || typeof (next_val && next_val["ctype"])==='string')&&await (await Environment.get_global("contains?"))("block",((next_val && next_val["ctype"])||"")))))))) {
                            (ntree).push(" ");
                            (ntree).push("return");
                             return  (ntree).push(" ")
                        } else  {
                             return (ntree).push(comp)
                        }
                    } ();
                     return  idx+=1
                };
                let __array__132=[],__elements__130=flattened;
                let __BREAK__FLAG__=false;
                for(let __iter__129 in __elements__130) {
                    __array__132.push(await __for_body__131(__elements__130[__iter__129]));
                    if(__BREAK__FLAG__) {
                         __array__132.pop();
                        break;
                        
                    }
                }return __array__132;
                 
            })();
             return  ntree
        } else  {
             return js_tree
        }
    } ()
};__obj__1["aif"]=async function(test_expr,eval_when_true,eval_when_false) {
     return  ["=:let",[["=:it",test_expr]],["=:if","=:it",eval_when_true,eval_when_false]]
};__obj__1["ifa"]=async function(test,thenclause,elseclause) {
     return  ["=:let",[["=:it",test]],["=:if","=:it",thenclause,elseclause]]
};__obj__1["map_range"]=async function(n,from_range,to_range) {
     return  await (await Environment.get_global("add"))((to_range && to_range["0"]),(((n-(from_range && from_range["0"]))/((from_range && from_range["1"])-(from_range && from_range["0"])))*((to_range && to_range["1"])-(to_range && to_range["0"]))))
};__obj__1["range_inc"]=async function(start,end,step) {
    if (check_true (end)){
          return await (await Environment.get_global("range"))(start,await (await Environment.get_global("add"))(end,1),step)
    } else {
          return await (await Environment.get_global("range"))(await (await Environment.get_global("add"))(start,1))
    }
};__obj__1["HSV_to_RGB"]=function anonymous(h, s, v
) {
{
        var r, g, b, i, f, p, q, t;
        if (arguments.length === 1) {
            s = h.s, v = h.v, h = h.h;
        }
        i = Math.floor(h * 6);
        f = h * 6 - i;
        p = v * (1 - s);
        q = v * (1 - f * s);
        t = v * (1 - (1 - f) * s);
        switch (i % 6) {
            case 0: r = v, g = t, b = p; break;
            case 1: r = q, g = v, b = p; break;
            case 2: r = p, g = v, b = t; break;
            case 3: r = p, g = q, b = v; break;
            case 4: r = t, g = p, b = v; break;
            case 5: r = v, g = p, b = q; break;
        }
        return {
            r: Math.round(r * 255),
            g: Math.round(g * 255),
            b: Math.round(b * 255)
        }
    }
};__obj__1["color_for_number"]=async function(num,saturation,brightness) {
    let h;
    let pos;
    let color_key;
    let rgb;
    let v;
    h=await Math.abs(await parseInt(num));
    pos=(8%h);
    color_key=[0,4,1,5,2,6,3,7];
    rgb=null;
    v=color_key[pos];
    ;
    h=await (await Environment.get_global("map_range"))((360%(28*h)),[0,360],[0,1]);
    v=await (await Environment.get_global("map_range"))([v,[0,7],[0.92,1]]);
    rgb=await (await Environment.get_global("HSV_to_RGB"))(h,saturation,brightness);
     return  ("#"+await (async function() {
        {
             let __call_target__=await (rgb && rgb["r"])["toString"].call((rgb && rgb["r"]),16), __call_method__="padStart";
            return await __call_target__[__call_method__].call(__call_target__,2,"0")
        } 
    })()+await (async function() {
        {
             let __call_target__=await (rgb && rgb["g"])["toString"].call((rgb && rgb["g"]),16), __call_method__="padStart";
            return await __call_target__[__call_method__].call(__call_target__,2,"0")
        } 
    })()+await (async function() {
        {
             let __call_target__=await (rgb && rgb["b"])["toString"].call((rgb && rgb["b"]),16), __call_method__="padStart";
            return await __call_target__[__call_method__].call(__call_target__,2,"0")
        } 
    })())
};__obj__1["flatten_ctx"]=async function(ctx,_var_table) {
    let var_table;
    let ctx_keys;
    var_table=(_var_table||new Object());
    ctx_keys=await (await Environment.get_global("keys"))(var_table);
    if (check_true ((ctx && ctx["scope"]))){
        await (async function() {
            let __for_body__135=async function(k) {
                if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("contains?"))(k,ctx_keys)))){
                     return  await async function(){
                        var_table[k]=await (async function(){
                            let __targ__138=(ctx && ctx["scope"]);
                            if (__targ__138){
                                 return(__targ__138)[k]
                            } 
                        })();
                        return var_table;
                        
                    }()
                }
            };
            let __array__136=[],__elements__134=await (await Environment.get_global("keys"))((ctx && ctx["scope"]));
            let __BREAK__FLAG__=false;
            for(let __iter__133 in __elements__134) {
                __array__136.push(await __for_body__135(__elements__134[__iter__133]));
                if(__BREAK__FLAG__) {
                     __array__136.pop();
                    break;
                    
                }
            }return __array__136;
             
        })();
        if (check_true ((ctx && ctx["parent"]))){
             await (await Environment.get_global("flatten_ctx"))((ctx && ctx["parent"]),var_table)
        };
         return  var_table
    }
};__obj__1["identify_symbols"]=async function(quoted_form,_state) {
    let acc;
    acc=[];
    _state=await (async function () {
         if (check_true (_state)){
              return _state
        } else {
              return new Object()
        } 
    })();
    debugger;
    ;
    await async function(){
        if (check_true( (quoted_form instanceof Array))) {
             return  await (async function() {
                let __for_body__141=async function(elem) {
                     return  (acc).push(await (await Environment.get_global("identify_symbols"))(elem,_state))
                };
                let __array__142=[],__elements__140=quoted_form;
                let __BREAK__FLAG__=false;
                for(let __iter__139 in __elements__140) {
                    __array__142.push(await __for_body__141(__elements__140[__iter__139]));
                    if(__BREAK__FLAG__) {
                         __array__142.pop();
                        break;
                        
                    }
                }return __array__142;
                 
            })()
        } else if (check_true( ((quoted_form instanceof String || typeof quoted_form==='string')&&await (await Environment.get_global("starts_with?"))("=:",quoted_form)))) {
             return (acc).push({
                name:await (await Environment.get_global("as_lisp"))(quoted_form),where:await (await Environment.get_global("describe"))(await (await Environment.get_global("as_lisp"))(quoted_form))
            })
        } else if (check_true( (quoted_form instanceof Object))) {
             return await (async function() {
                let __for_body__145=async function(elem) {
                     return  (acc).push(await (await Environment.get_global("identify_symbols"))(elem,_state))
                };
                let __array__146=[],__elements__144=await (await Environment.get_global("values"))(quoted_form);
                let __BREAK__FLAG__=false;
                for(let __iter__143 in __elements__144) {
                    __array__146.push(await __for_body__145(__elements__144[__iter__143]));
                    if(__BREAK__FLAG__) {
                         __array__146.pop();
                        break;
                        
                    }
                }return __array__146;
                 
            })()
        }
    } ();
     return  ["=:quote",acc]
};__obj__1["unless"]=async function(condition,...forms) {
     return  ["=:if",["=:not",condition],["=:do",].concat(forms)]
};__obj__1["use_quoted_initializer"]=async function(...forms) {
    let insert_initializer;
    insert_initializer=async function(form) {
        {
            let meta=form[3];
            ;
            if (check_true ((null==form[3]))){
                 meta=await async function(){
                    form[3]=new Object();
                    return form;
                    
                }()
            };
             return  await async function(){
                if (check_true( ((meta instanceof Array)&&(await (await Environment.get_global("resolve_path"))([3,1],form) instanceof Object)))) {
                    await (await Environment.get_global("set_path"))([3,1,"initializer"],form,["=:quote",(form && form["2"])]);
                     return  form
                } else if (check_true( (meta instanceof Object))) {
                    {
                        await async function(){
                            let __target_obj__148=(form && form["3"]);
                            __target_obj__148["initializer"]=["=:quote",(form && form["2"])];
                            return __target_obj__148;
                            
                        }();
                         return  form
                    }
                } else  {
                    await (await Environment.get_global("warn"))("use_quoted_initializer: cannot quote ",await (async function() {
                         if (check_true (((form && form["2"]) instanceof String || typeof (form && form["2"])==='string'))){
                              return (form && form["2"])
                        } else {
                              return form
                        } 
                    } )());
                     return  form
                }
            } ()
        }
    };
     return  await (async function() {
        let __for_body__151=async function(form) {
            form=await (await Environment.get_global("macroexpand"))(form);
            if (check_true (((form instanceof Array)&&((form && form["0"])==="=:defglobal")))){
                 return  await insert_initializer(form)
            } else {
                  return form
            }
        };
        let __array__152=[],__elements__150=forms;
        let __BREAK__FLAG__=false;
        for(let __iter__149 in __elements__150) {
            __array__152.push(await __for_body__151(__elements__150[__iter__149]));
            if(__BREAK__FLAG__) {
                 __array__152.pop();
                break;
                
            }
        }return __array__152;
         
    })()
};__obj__1["random_int"]=async function(...args) {
    let top;
    let bottom;
    top=0;
    bottom=0;
    if (check_true ((await (await Environment.get_global("length"))(args)>1))){
        top=await parseInt((args && args["1"]));
         bottom=await parseInt((args && args["0"]))
    } else {
         top=await parseInt((args && args["0"]))
    };
     return  await parseInt(await (await Environment.get_global("add"))((await Math.random()*(top-bottom)),bottom))
};__obj__1["resolve_multi_path"]=async function(path,obj,not_found) {
     return  await async function(){
        if (check_true( (obj instanceof Object))) {
             return await async function(){
                if (check_true( ((await (await Environment.get_global("length"))(path)===1)&&("*"===await (await Environment.get_global("first"))(path))))) {
                     return (obj||not_found)
                } else if (check_true( ((await (await Environment.get_global("length"))(path)===1)&&(obj[await (await Environment.get_global("first"))(path)] instanceof Object)))) {
                     return (obj[await (await Environment.get_global("first"))(path)]||not_found)
                } else if (check_true( ((await (await Environment.get_global("length"))(path)===1)&&await (await Environment.get_global("not"))((obj[await (await Environment.get_global("first"))(path)] instanceof Object))&&await (await Environment.get_global("not"))((null==obj[await (await Environment.get_global("first"))(path)]))))) {
                     return obj[await (await Environment.get_global("first"))(path)]
                } else if (check_true( ((obj instanceof Array)&&("*"===await (await Environment.get_global("first"))(path))))) {
                     return await (async function() {
                        let __for_body__155=async function(val) {
                             return  await (await Environment.get_global("resolve_multi_path"))(await (await Environment.get_global("rest"))(path),val,not_found)
                        };
                        let __array__156=[],__elements__154=obj;
                        let __BREAK__FLAG__=false;
                        for(let __iter__153 in __elements__154) {
                            __array__156.push(await __for_body__155(__elements__154[__iter__153]));
                            if(__BREAK__FLAG__) {
                                 __array__156.pop();
                                break;
                                
                            }
                        }return __array__156;
                         
                    })()
                } else if (check_true( ((obj instanceof Object)&&("*"===await (await Environment.get_global("first"))(path))))) {
                     return await (async function() {
                        let __for_body__159=async function(val) {
                             return  await (await Environment.get_global("resolve_multi_path"))(await (await Environment.get_global("rest"))(path),val,not_found)
                        };
                        let __array__160=[],__elements__158=await (await Environment.get_global("values"))(obj);
                        let __BREAK__FLAG__=false;
                        for(let __iter__157 in __elements__158) {
                            __array__160.push(await __for_body__159(__elements__158[__iter__157]));
                            if(__BREAK__FLAG__) {
                                 __array__160.pop();
                                break;
                                
                            }
                        }return __array__160;
                         
                    })()
                } else if (check_true( (await (await Environment.get_global("length"))(path)>1))) {
                     return await (await Environment.get_global("resolve_multi_path"))(await (await Environment.get_global("rest"))(path),obj[await (await Environment.get_global("first"))(path)],not_found)
                }
            } ()
        } else  {
             return not_found
        }
    } ()
};__obj__1["symbol_tree"]=async function(quoted_form,_state,_current_path) {
    let acc;
    let allocators;
    let uop;
    let get_allocations;
    let idx;
    let fval;
    let sym_paths;
    let is_root;
    acc=[];
    allocators={
        let:[[1,"*",0]],defun:[[1],[2,"*"]]
    };
    uop=null;
    get_allocations=async function() {
        sym_paths=allocators[await (await Environment.get_global("unquotify"))((quoted_form && quoted_form["0"]))];
        if (check_true (sym_paths)){
             return  await (async function() {
                let __for_body__163=async function(sym_path) {
                    fval=await (await Environment.get_global("resolve_multi_path"))(sym_path,quoted_form);
                    await console.log("Fval is: ",fval,"sym_path: ",sym_path,"current_path: ",_current_path," ",quoted_form);
                    uop=await (await Environment.get_global("unquotify"))((quoted_form && quoted_form["0"]));
                    if (check_true ((fval instanceof Array))){
                          return await (async function() {
                            let __for_body__167=async function(s) {
                                s=await (await Environment.get_global("unquotify"))(s);
                                if (check_true ((null==await (async function(){
                                    let __targ__169=(_state && _state["definitions"]);
                                    if (__targ__169){
                                         return(__targ__169)[fval]
                                    } 
                                })()))){
                                     await async function(){
                                        let __target_obj__170=(_state && _state["definitions"]);
                                        __target_obj__170[s]=[];
                                        return __target_obj__170;
                                        
                                    }()
                                };
                                 return  (await (async function(){
                                    let __targ__171=(_state && _state["definitions"]);
                                    if (__targ__171){
                                         return(__targ__171)[s]
                                    } 
                                })()).push({
                                    path:_current_path,op:uop
                                })
                            };
                            let __array__168=[],__elements__166=fval;
                            let __BREAK__FLAG__=false;
                            for(let __iter__165 in __elements__166) {
                                __array__168.push(await __for_body__167(__elements__166[__iter__165]));
                                if(__BREAK__FLAG__) {
                                     __array__168.pop();
                                    break;
                                    
                                }
                            }return __array__168;
                             
                        })()
                    } else {
                        if (check_true ((null==await (async function(){
                            let __targ__172=(_state && _state["definitions"]);
                            if (__targ__172){
                                 return(__targ__172)[fval]
                            } 
                        })()))){
                             await async function(){
                                let __target_obj__173=(_state && _state["definitions"]);
                                __target_obj__173[fval]=[];
                                return __target_obj__173;
                                
                            }()
                        };
                         return  (await (async function(){
                            let __targ__174=(_state && _state["definitions"]);
                            if (__targ__174){
                                 return(__targ__174)[fval]
                            } 
                        })()).push({
                            path:_current_path,op:uop
                        })
                    }
                };
                let __array__164=[],__elements__162=sym_paths;
                let __BREAK__FLAG__=false;
                for(let __iter__161 in __elements__162) {
                    __array__164.push(await __for_body__163(__elements__162[__iter__161]));
                    if(__BREAK__FLAG__) {
                         __array__164.pop();
                        break;
                        
                    }
                }return __array__164;
                 
            })()
        }
    };
    idx=-1;
    fval=null;
    sym_paths=null;
    is_root=await (async function () {
         if (check_true ((_state==undefined))){
              return true
        } else {
              return false
        } 
    })();
    _state=await (async function () {
         if (check_true (_state)){
              return _state
        } else {
              return {
                definitions:new Object()
            }
        } 
    })();
    _current_path=(_current_path||[]);
    ;
    await console.log("symbol_tree: quoted_form: ",quoted_form,_current_path);
    await get_allocations();
     return  await async function(){
        if (check_true( (quoted_form instanceof Array))) {
            await (await Environment.get_global("map"))(async function(elem,idx) {
                {
                    let it;
                    it=await (await Environment.get_global("symbol_tree"))(elem,_state,await (await Environment.get_global("conj"))(_current_path,idx));
                    if (check_true (it)){
                          return (acc).push(it)
                    } else {
                          return 
                    }
                }
            },quoted_form);
            if (check_true (is_root)){
                  return await (await Environment.get_global("add"))({
                    tree:acc
                },_state)
            } else {
                  return acc
            }
        } else if (check_true( ((quoted_form instanceof String || typeof quoted_form==='string')&&await (await Environment.get_global("starts_with?"))("=:",quoted_form)))) {
             return  await (await Environment.get_global("unquotify"))(quoted_form)
        } else if (check_true( (quoted_form instanceof Object))) {
            await (async function() {
                let __for_body__177=async function(pset) {
                    {
                        let it;
                        it=await (await Environment.get_global("symbol_tree"))((pset && pset["1"]),_state,await (await Environment.get_global("conj"))(_current_path,await (async function(){
                            let __array_op_rval__179=(pset && pset["1"]);
                             if (__array_op_rval__179 instanceof Function){
                                return await __array_op_rval__179() 
                            } else {
                                return[__array_op_rval__179]
                            }
                        })()));
                        if (check_true (it)){
                              return (acc).push(it)
                        } else {
                              return 
                        }
                    }
                };
                let __array__178=[],__elements__176=await (await Environment.get_global("pairs"))(quoted_form);
                let __BREAK__FLAG__=false;
                for(let __iter__175 in __elements__176) {
                    __array__178.push(await __for_body__177(__elements__176[__iter__175]));
                    if(__BREAK__FLAG__) {
                         __array__178.pop();
                        break;
                        
                    }
                }return __array__178;
                 
            })();
            if (check_true (is_root)){
                  return await (await Environment.get_global("add"))({
                    tree:acc
                },_state)
            } else {
                  return acc
            }
        }
    } ()
};__obj__1["except_nil"]=async function(items) {
    let acc=[];
    ;
    if (check_true (await (await Environment.get_global("not"))((await (await Environment.get_global("sub_type"))(items)=="array")))){
         items=[items]
    };
    await (async function() {
        let __for_body__182=async function(value) {
            if (check_true (await (await Environment.get_global("not"))((null==value)))){
                  return (acc).push(value)
            }
        };
        let __array__183=[],__elements__181=items;
        let __BREAK__FLAG__=false;
        for(let __iter__180 in __elements__181) {
            __array__183.push(await __for_body__182(__elements__181[__iter__180]));
            if(__BREAK__FLAG__) {
                 __array__183.pop();
                break;
                
            }
        }return __array__183;
         
    })();
     return  acc
};__obj__1["each"]=async function(items,property) {
     return  await async function(){
        if (check_true( ((property instanceof String || typeof property==='string')||await (await Environment.get_global("is_number?"))(property)))) {
             return await (await Environment.get_global("except_nil"))(await (async function() {
                let __for_body__186=async function(item) {
                    if (check_true (item)){
                         return  item[property]
                    }
                };
                let __array__187=[],__elements__185=(items||[]);
                let __BREAK__FLAG__=false;
                for(let __iter__184 in __elements__185) {
                    __array__187.push(await __for_body__186(__elements__185[__iter__184]));
                    if(__BREAK__FLAG__) {
                         __array__187.pop();
                        break;
                        
                    }
                }return __array__187;
                 
            })())
        } else if (check_true( (await (await Environment.get_global("sub_type"))(property)=="array"))) {
            let __collector;
            let __result;
            let __action;
            __collector=[];
            __result=null;
            __action=async function(item) {
                let nl=[];
                ;
                await (async function() {
                    let __for_body__190=async function(p) {
                         return  await async function(){
                            if (check_true( (p instanceof Array))) {
                                 return (nl).push(await (await Environment.get_global("resolve_path"))(p,item))
                            } else if (check_true( p instanceof Function)) {
                                 return (nl).push(await (async function(){
                                    let __array_op_rval__192=p;
                                     if (__array_op_rval__192 instanceof Function){
                                        return await __array_op_rval__192(item) 
                                    } else {
                                        return[__array_op_rval__192,item]
                                    }
                                })())
                            } else  {
                                 return (nl).push(item[p])
                            }
                        } ()
                    };
                    let __array__191=[],__elements__189=property;
                    let __BREAK__FLAG__=false;
                    for(let __iter__188 in __elements__189) {
                        __array__191.push(await __for_body__190(__elements__189[__iter__188]));
                        if(__BREAK__FLAG__) {
                             __array__191.pop();
                            break;
                            
                        }
                    }return __array__191;
                     
                })();
                 return  nl
            };
            ;
            await (async function() {
                let __for_body__195=async function(__item) {
                    __result=await __action(__item);
                    if (check_true (__result)){
                          return (__collector).push(__result)
                    }
                };
                let __array__196=[],__elements__194=items;
                let __BREAK__FLAG__=false;
                for(let __iter__193 in __elements__194) {
                    __array__196.push(await __for_body__195(__elements__194[__iter__193]));
                    if(__BREAK__FLAG__) {
                         __array__196.pop();
                        break;
                        
                    }
                }return __array__196;
                 
            })();
             return  __collector
        } else if (check_true( (await (await Environment.get_global("sub_type"))(property)=="AsyncFunction"))) {
            let __collector;
            let __result;
            let __action;
            __collector=[];
            __result=null;
            __action=async function(item) {
                 return  await (async function(){
                    let __array_op_rval__197=property;
                     if (__array_op_rval__197 instanceof Function){
                        return await __array_op_rval__197(item) 
                    } else {
                        return[__array_op_rval__197,item]
                    }
                })()
            };
            ;
            await (async function() {
                let __for_body__200=async function(__item) {
                    __result=await __action(__item);
                    if (check_true (__result)){
                          return (__collector).push(__result)
                    }
                };
                let __array__201=[],__elements__199=items;
                let __BREAK__FLAG__=false;
                for(let __iter__198 in __elements__199) {
                    __array__201.push(await __for_body__200(__elements__199[__iter__198]));
                    if(__BREAK__FLAG__) {
                         __array__201.pop();
                        break;
                        
                    }
                }return __array__201;
                 
            })();
             return  __collector
        } else if (check_true( (await (await Environment.get_global("sub_type"))(property)=="Function"))) {
            let __collector;
            let __result;
            let __action;
            __collector=[];
            __result=null;
            __action=async function(item) {
                 return  await (async function(){
                    let __array_op_rval__202=property;
                     if (__array_op_rval__202 instanceof Function){
                        return await __array_op_rval__202(item) 
                    } else {
                        return[__array_op_rval__202,item]
                    }
                })()
            };
            ;
            await (async function() {
                let __for_body__205=async function(__item) {
                    __result=await __action(__item);
                    if (check_true (__result)){
                          return (__collector).push(__result)
                    }
                };
                let __array__206=[],__elements__204=items;
                let __BREAK__FLAG__=false;
                for(let __iter__203 in __elements__204) {
                    __array__206.push(await __for_body__205(__elements__204[__iter__203]));
                    if(__BREAK__FLAG__) {
                         __array__206.pop();
                        break;
                        
                    }
                }return __array__206;
                 
            })();
             return  __collector
        } else  {
             throw new TypeError(("each: strings, arrays, and functions can be provided for the property name or names to extract - received: "+await (await Environment.get_global("sub_type"))(property)));
            
        }
    } ()
};__obj__1["replace"]=async function(...args) {
    if (check_true (((args && args.length)<3)))throw new SyntaxError("Invalid syntax for replace: requires at least three arguments, target value or regex, the replacement value, and at least one value (object list or string)");
     else {
          return await (async function(){
            try /* TRY SIMPLE */ {
                 {
                    let target;
                    let replacement;
                    let work_values;
                    let value_type;
                    let sr_val;
                    let arg_value_type;
                    let rval;
                    target=(args && args["0"]);
                    replacement=(args && args["1"]);
                    work_values=await (await Environment.get_global("slice"))(args,2);
                    value_type=null;
                    sr_val=null;
                    arg_value_type=await subtype((args && args["2"]));
                    rval=[];
                    await (async function() {
                        let __for_body__210=async function(value) {
                            value_type=await subtype(value);
                            if (check_true ((value_type==="Number"))){
                                value_type="String";
                                 value=(""+value)
                            };
                             return  await async function(){
                                if (check_true( (value_type==="String"))) {
                                     return (rval).push(await value["replace"].call(value,target,replacement))
                                } else if (check_true( (value_type==="array"))) {
                                     return await (async function() {
                                        let __for_body__214=async function(elem) {
                                             return  (rval).push(await (await Environment.get_global("replace"))(target,replacement,elem))
                                        };
                                        let __array__215=[],__elements__213=value;
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__212 in __elements__213) {
                                            __array__215.push(await __for_body__214(__elements__213[__iter__212]));
                                            if(__BREAK__FLAG__) {
                                                 __array__215.pop();
                                                break;
                                                
                                            }
                                        }return __array__215;
                                         
                                    })()
                                } else if (check_true( (value_type==="object"))) {
                                    sr_val=new Object();
                                    await (async function() {
                                        let __for_body__218=async function(k) {
                                            if (check_true (await value["hasOwnProperty"].call(value,k))){
                                                 return  await async function(){
                                                    sr_val[k]=await (await Environment.get_global("replace"))(target,replacement,value[k]);
                                                    return sr_val;
                                                    
                                                }()
                                            }
                                        };
                                        let __array__219=[],__elements__217=await (await Environment.get_global("keys"))(value);
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__216 in __elements__217) {
                                            __array__219.push(await __for_body__218(__elements__217[__iter__216]));
                                            if(__BREAK__FLAG__) {
                                                 __array__219.pop();
                                                break;
                                                
                                            }
                                        }return __array__219;
                                         
                                    })();
                                     return  rval=await rval["concat"].call(rval,sr_val)
                                }
                            } ()
                        };
                        let __array__211=[],__elements__209=work_values;
                        let __BREAK__FLAG__=false;
                        for(let __iter__208 in __elements__209) {
                            __array__211.push(await __for_body__210(__elements__209[__iter__208]));
                            if(__BREAK__FLAG__) {
                                 __array__211.pop();
                                break;
                                
                            }
                        }return __array__211;
                         
                    })();
                    if (check_true ((await (await Environment.get_global("not"))((arg_value_type==="array"))&&await (await Environment.get_global("not"))((arg_value_type==="object"))))){
                          return await (await Environment.get_global("first"))(rval)
                    } else {
                          return rval
                    }
                } 
            } catch(__exception__207) {
                  if (__exception__207 instanceof Error) {
                     let e=__exception__207;
                      return await console.error(("replace: "+e))
                } 
            }
        })()
    }
};__obj__1["cl_encode_string"]=async function(text) {
    if (check_true ((text instanceof String || typeof text==='string'))){
        let escaped;
        let nq;
        let step1;
        let snq;
        escaped=await (await Environment.get_global("replace"))(new RegExp("\n","g"),await (await Environment.get_global("add"))(await String.fromCharCode(92),"n"),text);
        escaped=await (await Environment.get_global("replace"))(new RegExp("\r","g"),await (await Environment.get_global("add"))(await String.fromCharCode(92),"r"),escaped);
        nq=(escaped).split(await String.fromCharCode(34));
        step1=(nq).join(await (await Environment.get_global("add"))(await String.fromCharCode(92),await String.fromCharCode(34)));
        snq=(step1).split(await String.fromCharCode(39));
         return  step1
    } else {
          return text
    }
};__obj__1["path_to_js_syntax"]=async function(comps) {
    if (check_true ((comps instanceof Array))){
         if (check_true (((comps && comps.length)>1))){
              return (await (await Environment.get_global("map"))(async function(comp,idx) {
                if (check_true ((idx===0))){
                      return comp
                } else {
                      return await async function(){
                        if (check_true( (await isNaN(parseInt(comp))&&await (await Environment.get_global("starts_with?"))("\"",comp)))) {
                             return ("["+comp+"]")
                        } else if (check_true( await isNaN(parseInt(comp)))) {
                             return ("."+comp)
                        } else  {
                             return ("["+"'"+comp+"'"+"]")
                        }
                    } ()
                }
            },comps)).join("")
        } else {
              return (comps && comps["0"])
        }
    } else throw new TypeError(("path_to_js_syntax: need array - given "+await (await Environment.get_global("sub_type"))(comps)));
    
};__obj__1["first_is_upper_case?"]=async function(str_val) {
    {
        let rval=await str_val["match"].call(str_val,new RegExp("^[A-Z]"));
        ;
        if (check_true ((rval&&(rval && rval["0"])))){
              return true
        } else {
              return false
        }
    }
};__obj__1["safe_access_2"]=async function(token,ctx,sanitizer_fn) {
    let comps;
    let acc;
    let acc_full;
    let pos;
    let rval;
    comps=null;
    acc=[];
    acc_full=[];
    pos=null;
    rval=null;
    comps=((token && token.name)).split(".");
    if (check_true (((comps && comps.length)===1))){
          return (token && token.name)
    } else {
        await async function(){
            comps[0]=await (async function(){
                let __array_op_rval__222=sanitizer_fn;
                 if (__array_op_rval__222 instanceof Function){
                    return await __array_op_rval__222((comps && comps["0"])) 
                } else {
                    return[__array_op_rval__222,(comps && comps["0"])]
                }
            })();
            return comps;
            
        }();
        await (async function(){
             let __test_condition__223=async function() {
                 return  ((comps && comps.length)>0)
            };
            let __body_ref__224=async function() {
                (acc).push((comps).shift());
                if (check_true (((comps && comps.length)>0))){
                      return (acc_full).push((["check_true(",await (await Environment.get_global("expand_dot_accessor"))((acc).join("."),ctx),")"]).join(""))
                } else {
                      return (acc_full).push(await (await Environment.get_global("expand_dot_accessor"))((acc).join("."),ctx))
                }
            };
            let __BREAK__FLAG__=false;
            while(await __test_condition__223()) {
                await __body_ref__224();
                 if(__BREAK__FLAG__) {
                     break;
                    
                }
            } ;
            
        })();
        rval=await (await Environment.get_global("flatten"))(["(",(acc_full).join(" && "),")"]);
         return  rval
    }
};__obj__1["safe_access"]=async function(token,ctx,sanitizer_fn) {
    let comps;
    let acc;
    let acc_full;
    let pos;
    let rval;
    comps=null;
    acc=[];
    acc_full=[];
    pos=null;
    rval=null;
    comps=((token && token.name)).split(".");
    if (check_true (((comps && comps.length)===1))){
          return (token && token.name)
    } else {
        await async function(){
            comps[0]=await (async function(){
                let __array_op_rval__226=sanitizer_fn;
                 if (__array_op_rval__226 instanceof Function){
                    return await __array_op_rval__226((comps && comps["0"])) 
                } else {
                    return[__array_op_rval__226,(comps && comps["0"])]
                }
            })();
            return comps;
            
        }();
        await (async function(){
             let __test_condition__227=async function() {
                 return  ((comps && comps.length)>0)
            };
            let __body_ref__228=async function() {
                (acc).push((comps).shift());
                 return  (acc_full).push(await (await Environment.get_global("expand_dot_accessor"))((acc).join("."),ctx))
            };
            let __BREAK__FLAG__=false;
            while(await __test_condition__227()) {
                await __body_ref__228();
                 if(__BREAK__FLAG__) {
                     break;
                    
                }
            } ;
            
        })();
        rval=await (await Environment.get_global("flatten"))(["(",(acc_full).join(" && "),")"]);
         return  rval
    }
};__obj__1["compile_to_js"]=async function(quoted_form) {
     return  ["=:->","=:Environment","compile",quoted_form]
};__obj__1["evaluate_compiled_source"]=async function(compiled_source) {
     return  ["=:->","=:Environment","evaluate",compiled_source,"=:nil",{ "compiled_source":true
}]
};__obj__1["form_structure"]=async function(quoted_form,max_depth) {
    let idx;
    let acc;
    let structure;
    let follow_tree;
    idx=0;
    acc=[];
    max_depth=(max_depth||(await Environment.get_global("MAX_SAFE_INTEGER")));
    structure=quoted_form;
    follow_tree=async function(elems,acc,_depth) {
         return  await async function(){
            if (check_true( (((elems instanceof Array)||(elems instanceof Object))&&(_depth>=max_depth)))) {
                 if (check_true ((elems instanceof Array))){
                      return "array"
                } else {
                      return "object"
                }
            } else if (check_true( (elems instanceof Array))) {
                 return await (await Environment.get_global("map"))(async function(elem,idx) {
                     return  await follow_tree(elem,[],await (await Environment.get_global("add"))(_depth,1))
                },elems)
            } else if (check_true( (elems instanceof Object))) {
                 return  await (async function() {
                    let __for_body__231=async function(pset) {
                         return  await follow_tree((pset && pset["1"]),[],await (await Environment.get_global("add"))(_depth,1))
                    };
                    let __array__232=[],__elements__230=await (await Environment.get_global("pairs"))(elems);
                    let __BREAK__FLAG__=false;
                    for(let __iter__229 in __elements__230) {
                        __array__232.push(await __for_body__231(__elements__230[__iter__229]));
                        if(__BREAK__FLAG__) {
                             __array__232.pop();
                            break;
                            
                        }
                    }return __array__232;
                     
                })()
            } else  {
                 return await async function(){
                    if (check_true( ((elems instanceof String || typeof elems==='string')&&await (await Environment.get_global("starts_with?"))("=:",elems)))) {
                         return "symbol"
                    } else if (check_true( await (await Environment.get_global("is_number?"))(elems))) {
                         return "number"
                    } else if (check_true( (elems instanceof String || typeof elems==='string'))) {
                         return "string"
                    } else if (check_true( ((elems===true)||(elems===false)))) {
                         return "boolean"
                    } else  {
                         return elems
                    }
                } ()
            }
        } ()
    };
     return  await follow_tree(structure,[],0)
};__obj__1["validate_form_structure"]=async function(validation_rules,quoted_form) {
    let results;
    let all_valid;
    let target;
    results={
        valid:[],invalid:[],rule_count:await (await Environment.get_global("length"))(validation_rules),all_passed:false
    };
    all_valid=null;
    target=null;
    await (async function() {
        let __for_body__235=async function(rule) {
            if (check_true (((rule instanceof Array)&&((rule && rule.length)>1)&&((rule && rule["0"]) instanceof Array)&&((rule && rule["1"]) instanceof Array)))){
                all_valid=true;
                target=await (await Environment.get_global("resolve_path"))((rule && rule["0"]),quoted_form);
                await (async function() {
                    let __for_body__239=async function(validation) {
                        if (check_true (await (await Environment.get_global("not"))(await (async function(){
                            let __array_op_rval__241=validation;
                             if (__array_op_rval__241 instanceof Function){
                                return await __array_op_rval__241(target) 
                            } else {
                                return[__array_op_rval__241,target]
                            }
                        })()))){
                            all_valid=false;
                            __BREAK__FLAG__=true;
                            return
                        }
                    };
                    let __array__240=[],__elements__238=(rule && rule["1"]);
                    let __BREAK__FLAG__=false;
                    for(let __iter__237 in __elements__238) {
                        __array__240.push(await __for_body__239(__elements__238[__iter__237]));
                        if(__BREAK__FLAG__) {
                             __array__240.pop();
                            break;
                            
                        }
                    }return __array__240;
                     
                })();
                if (check_true (all_valid)){
                      return ((results && results["valid"])).push(((rule && rule["2"])||(rule && rule["0"])))
                } else {
                      return ((results && results["invalid"])).push(((rule && rule["2"])||(rule && rule["0"])))
                }
            }
        };
        let __array__236=[],__elements__234=(validation_rules||[]);
        let __BREAK__FLAG__=false;
        for(let __iter__233 in __elements__234) {
            __array__236.push(await __for_body__235(__elements__234[__iter__233]));
            if(__BREAK__FLAG__) {
                 __array__236.pop();
                break;
                
            }
        }return __array__236;
         
    })();
    await async function(){
        results["all_passed"]=(await (await Environment.get_global("length"))((results && results["valid"]))===(results && results["rule_count"]));
        return results;
        
    }();
     return  results
};__obj__1["*compiler_syntax_rules*"]={compile_let:[[[0,1,"val"],[(await Environment.get_global("is_array?"))],"let allocation section"],[[0,2],[async function(v) { return  await (await Environment.get_global("not"))((v===undefined))}],"let missing block"]],compile_cond:[[[0],[async function(v) { return  ((await (await Environment.get_global("length"))(await (await Environment.get_global("rest"))(v))%2)===0)}],"cond: odd number of arguments"]],compile_assignment:[[[0,1],[async function(v) { return  await (await Environment.get_global("not"))((v===undefined))}],"assignment is missing target and values"],[[0,2],[async function(v) { return  await (await Environment.get_global("not"))((v===undefined))}],"assignment is missing value"]]};__obj__1["compiler_source_chain"]=async function(cpath,tree,sources) {
    if (check_true (((cpath instanceof Array)&&tree))){
        let source;
        sources=(sources||[]);
        source=null;
        cpath=await (await Environment.get_global("chop"))(cpath);
        source=await (await Environment.get_global("as_lisp"))(await (await Environment.get_global("resolve_path"))(cpath,tree));
        if (check_true (((source && source.length)>80))){
             source=await (await Environment.get_global("add"))(await source["substr"].call(source,0,80),"...")
        };
        if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("blank?"))(source)))){
             (sources).push(source)
        };
        if (check_true ((((cpath && cpath.length)>0)&&((sources && sources.length)<2)))){
             await (await Environment.get_global("compiler_source_chain"))(cpath,tree,sources)
        };
         return  sources
    }
};__obj__1["compiler_syntax_validation"]=async function(validator_key,tokens,errors,ctx,tree) {
    let validation_results;
    let syntax_error;
    let cpath;
    let rules;
    validation_results=null;
    syntax_error=null;
    cpath=null;
    rules=await (async function(){
        let __targ__244=(await Environment.get_global("*compiler_syntax_rules*"));
        if (__targ__244){
             return(__targ__244)[validator_key]
        } 
    })();
    if (check_true (rules)){
        validation_results=await (await Environment.get_global("validate_form_structure"))(rules,await (async function(){
            let __array_op_rval__245=tokens;
             if (__array_op_rval__245 instanceof Function){
                return await __array_op_rval__245() 
            } else {
                return[__array_op_rval__245]
            }
        })());
        cpath=await async function(){
            if (check_true( (tokens instanceof Array))) {
                 return await (await Environment.get_global("chop"))((tokens && tokens["0"] && tokens["0"]["path"]))
            } else if (check_true( (tokens instanceof Object))) {
                 return (tokens && tokens["path"])
            }
        } ();
        if (check_true (await (await Environment.get_global("not"))((validation_results && validation_results["all_passed"])))){
            await (async function() {
                let __for_body__248=async function(problem) {
                     return  (errors).push({
                        error:"SyntaxError",message:problem,source_name:await (await Environment.get_global("getf_ctx"))(ctx,"__SOURCE_NAME__"),form:await (await Environment.get_global("first"))(await (await Environment.get_global("compiler_source_chain"))(cpath,tree)),parent_forms:await (await Environment.get_global("rest"))(await (await Environment.get_global("compiler_source_chain"))(cpath,tree)),invalid:true
                    })
                };
                let __array__249=[],__elements__247=((validation_results && validation_results["invalid"])||[]);
                let __BREAK__FLAG__=false;
                for(let __iter__246 in __elements__247) {
                    __array__249.push(await __for_body__248(__elements__247[__iter__246]));
                    if(__BREAK__FLAG__) {
                         __array__249.pop();
                        break;
                        
                    }
                }return __array__249;
                 
            })();
            syntax_error=new SyntaxError("invalid syntax");
            await async function(){
                syntax_error["handled"]=true;
                return syntax_error;
                
            }();
            throw syntax_error;
            
        }
    } else {
         await console.log("compiler_syntax_validation: no rules for: ",validator_key," -> tokens: ",tokens,"tree: ",tree)
    };
     return  validation_results
};__obj__1["symbols"]=async function() {
     return  ["=:keys","=:Environment.context.scope"]
};__obj__1["describe_all"]=async function() {
     return  await (async function(){
        let __apply_args__251=await (async function() {
            let __for_body__255=async function(s) {
                 return  await (await Environment.get_global("to_object"))([await (async function(){
                    let __array_op_rval__257=s;
                     if (__array_op_rval__257 instanceof Function){
                        return await __array_op_rval__257(await (await Environment.get_global("describe"))(s)) 
                    } else {
                        return[__array_op_rval__257,await (await Environment.get_global("describe"))(s)]
                    }
                })()])
            };
            let __array__256=[],__elements__254=await (await Environment.get_global("keys"))(Environment.context.scope);
            let __BREAK__FLAG__=false;
            for(let __iter__253 in __elements__254) {
                __array__256.push(await __for_body__255(__elements__254[__iter__253]));
                if(__BREAK__FLAG__) {
                     __array__256.pop();
                    break;
                    
                }
            }return __array__256;
             
        })();
        return ( (await Environment.get_global("add"))).apply(this,__apply_args__251)
    })()
};__obj__1["is_value?"]=async function(val) {
    if (check_true ((val===""))){
          return true
    } else {
         if (check_true ((val===undefined))){
              return false
        } else {
             if (check_true (await isNaN(val))){
                  return true
            } else {
                 if (check_true (val)){
                      return true
                } else {
                      return false
                }
            }
        }
    }
};__obj__1["sort"]=async function(elems,options) {
    let opts;
    let sort_fn;
    let sort_fn_inner;
    let keyed;
    let reverser;
    let comparitor;
    let key_path_a;
    let key_path_b;
    opts=(((options instanceof Object)&&options)||new Object());
    sort_fn=null;
    sort_fn_inner=null;
    keyed=false;
    reverser=await (async function () {
         if (check_true ((opts && opts["reversed"]))){
              return -1
        } else {
              return 1
        } 
    })();
    comparitor=await async function(){
        if (check_true( (opts && opts["comparitor"]) instanceof Function)) {
             return (opts && opts["comparitor"])
        } else  {
             return function(a,b) {
                 return    (function(){
                    if (check_true( (a instanceof String || typeof a==='string'))) {
                         if (check_true ((b instanceof String || typeof b==='string'))){
                              return (reverser* a["localeCompare"].call(a,b))
                        } else {
                              return (reverser* a["localeCompare"].call(a,(""+b)))
                        }
                    } else if (check_true( (b instanceof String || typeof b==='string'))) {
                         return (reverser* ( function() {
                            {
                                 let __call_target__=(""+a), __call_method__="localeCompare";
                                return  __call_target__[__call_method__].call(__call_target__,b)
                            } 
                        })())
                    } else if (check_true((opts && opts["reversed"]))) {
                         return (b-a)
                    } else  {
                         return (a-b)
                    }
                } )()
            }
        }
    } ();
    key_path_a="aval";
    key_path_b="bval";
    await (await Environment.get_global("assert"))((elems instanceof Array),"sort: elements must be an array");
    await (await Environment.get_global("assert"))((await subtype(comparitor)==="Function"),("sort: invalid comparitor provided : "+await subtype(comparitor)+" - must be a synchronous function, or evaluate to a synchronous function."));
    await (await Environment.get_global("assert"))((((opts && opts["comparitor"])&&await (await Environment.get_global("not"))((opts && opts["reversed"])))||(await (await Environment.get_global("not"))((opts && opts["comparitor"]))&&(opts && opts["reversed"]))||(await (await Environment.get_global("not"))((opts && opts["comparitor"]))&&await (await Environment.get_global("not"))((opts && opts["reversed"])))),"sort: comparitor option cannot be combined with reversed option");
    await async function(){
        if (check_true( ((opts && opts["key"]) instanceof String || typeof (opts && opts["key"])==='string'))) {
            keyed=true;
            key_path_a=await (await Environment.get_global("path_to_js_syntax"))(await (await Environment.get_global("get_object_path"))(("aval."+(opts && opts["key"]))));
             return  key_path_b=await (await Environment.get_global("path_to_js_syntax"))(await (await Environment.get_global("get_object_path"))(("bval."+(opts && opts["key"]))))
        } else if (check_true( ((opts && opts["key"]) instanceof Array))) {
            keyed=true;
            key_path_a=await (await Environment.get_global("path_to_js_syntax"))(await (await Environment.get_global("conj"))(["aval"],(opts && opts["key"])));
             return  key_path_b=await (await Environment.get_global("path_to_js_syntax"))(await (await Environment.get_global("conj"))(["bval"],(opts && opts["key"])))
        }
    } ();
    sort_fn_inner=new Function("aval","bval","comparitor",("return comparitor( "+key_path_a+","+key_path_b+")"));
    sort_fn=function(aval,bval) {
         return   sort_fn_inner(aval,bval,comparitor)
    };
     return  await elems["sort"].call(elems,sort_fn)
};__obj__1["and*"]=async function(...vals) {
    if (check_true (((vals && vals.length)>0))){
        let rval=true;
        ;
        await (async function() {
            let __for_body__260=async function(v) {
                if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("is_value?"))(v)))){
                    rval=false;
                    __BREAK__FLAG__=true;
                    return
                }
            };
            let __array__261=[],__elements__259=vals;
            let __BREAK__FLAG__=false;
            for(let __iter__258 in __elements__259) {
                __array__261.push(await __for_body__260(__elements__259[__iter__258]));
                if(__BREAK__FLAG__) {
                     __array__261.pop();
                    break;
                    
                }
            }return __array__261;
             
        })();
         return  rval
    }
};__obj__1["or*"]=async function(...vals) {
    if (check_true (((vals && vals.length)>0))){
        let rval=false;
        ;
        await (async function() {
            let __for_body__264=async function(v) {
                if (check_true (await (await Environment.get_global("is_value?"))(v))){
                    rval=true;
                    __BREAK__FLAG__=true;
                    return
                }
            };
            let __array__265=[],__elements__263=vals;
            let __BREAK__FLAG__=false;
            for(let __iter__262 in __elements__263) {
                __array__265.push(await __for_body__264(__elements__263[__iter__262]));
                if(__BREAK__FLAG__) {
                     __array__265.pop();
                    break;
                    
                }
            }return __array__265;
             
        })();
         return  rval
    }
};__obj__1["either"]=async function(...args) {
    let rval;
    rval=null;
    await (async function() {
        let __for_body__268=async function(arg) {
            rval=arg;
            if (check_true ((await (await Environment.get_global("not"))((undefined===arg))&&await (await Environment.get_global("not"))((null===arg))))){
                __BREAK__FLAG__=true;
                return
            }
        };
        let __array__269=[],__elements__267=args;
        let __BREAK__FLAG__=false;
        for(let __iter__266 in __elements__267) {
            __array__269.push(await __for_body__268(__elements__267[__iter__266]));
            if(__BREAK__FLAG__) {
                 __array__269.pop();
                break;
                
            }
        }return __array__269;
         
    })();
     return  rval
};__obj__1["is_symbol?"]=async function(symbol_to_find) {
     return  ["=:not",["=:or",["=:==",["=:typeof",symbol_to_find],"undefined"],["=:instanceof",["=:->","=:Environment","get_global",symbol_to_find],"=:ReferenceError"]]]
};__obj__1["get_function_args"]=async function(f) {
    let r;
    let s;
    r=new RegExp("^[a-zA-Z_]+ [a-zA-Z ]*\\\\(([a-zA-Z 0-9_,\\\\.\\\\n]*)\\\\)","gm");
    s=await f["toString"]();
    r=await (await Environment.get_global("scan_str"))(r,s);
    if (check_true ((((r && r.length)>0)&&((r && r["0"]) instanceof Object)))){
         return  await (await Environment.get_global("map"))(async function(v) {
            if (check_true (await (await Environment.get_global("ends_with?"))("\n",v))){
                  return await (await Environment.get_global("chop"))(v)
            } else {
                  return v
            }
        },((await (await Environment.get_global("second"))((r && r["0"]))||"")).split(","))
    }
};__obj__1["findpaths"]=async function(value,structure) {
    let acc;
    let search;
    acc=[];
    search=async function(struct,_cpath) {
         return  await async function(){
            if (check_true( (struct instanceof Array))) {
                 return await (await Environment.get_global("map"))(async function(elem,idx) {
                     return  await async function(){
                        if (check_true( (elem instanceof Object))) {
                             return await search(elem,await (await Environment.get_global("conj"))(_cpath,await (async function(){
                                let __array_op_rval__270=idx;
                                 if (__array_op_rval__270 instanceof Function){
                                    return await __array_op_rval__270() 
                                } else {
                                    return[__array_op_rval__270]
                                }
                            })()))
                        } else if (check_true( (elem===value))) {
                             return (acc).push(await (await Environment.get_global("conj"))(_cpath,await (async function(){
                                let __array_op_rval__271=idx;
                                 if (__array_op_rval__271 instanceof Function){
                                    return await __array_op_rval__271() 
                                } else {
                                    return[__array_op_rval__271]
                                }
                            })()))
                        }
                    } ()
                },struct)
            } else if (check_true( (struct instanceof Object))) {
                 return await (await Environment.get_global("map"))(async function(pset) {
                     return  await async function(){
                        if (check_true( ((pset && pset["1"]) instanceof Object))) {
                             return await search((pset && pset["1"]),await (await Environment.get_global("conj"))(_cpath,await (async function(){
                                let __array_op_rval__272=(pset && pset["0"]);
                                 if (__array_op_rval__272 instanceof Function){
                                    return await __array_op_rval__272() 
                                } else {
                                    return[__array_op_rval__272]
                                }
                            })()))
                        } else if (check_true( ((pset && pset["1"])===value))) {
                             return (acc).push(await (await Environment.get_global("conj"))(_cpath,await (async function(){
                                let __array_op_rval__273=(pset && pset["1"]);
                                 if (__array_op_rval__273 instanceof Function){
                                    return await __array_op_rval__273() 
                                } else {
                                    return[__array_op_rval__273]
                                }
                            })()))
                        }
                    } ()
                },await (await Environment.get_global("pairs"))(struct))
            } else if (check_true( (struct===value))) {
                 return (acc).push(_cpath)
            }
        } ()
    };
    await search(structure,[]);
     return  acc
};__obj__1["warn"]=await (await Environment.get_global("defclog"))({prefix:"⚠️  "});__obj__1["success"]=await (await Environment.get_global("defclog"))({color:"green",prefix:"✓  "});__obj__1["in_background"]=async function(...forms) {
     return  ["=:new","=:Promise",["=:fn",["=:resolve","=:reject"],["=:progn",["=:resolve",true],].concat(forms)]]
};__obj__1["show"]=async function(thing) {
     return  await async function(){
        if (check_true( thing instanceof Function)) {
             return await thing["toString"]()
        } else  {
             return thing
        }
    } ()
};__obj__1["export_symbols"]=async function(...args) {
    let acc;
    let numargs;
    let idx;
    acc=["=:javascript","export","{"];
    numargs=await (await Environment.get_global("length"))(args);
    idx=0;
    await (async function() {
        let __for_body__276=async function(symname) {
            await async function(){
                if (check_true( ((symname instanceof Array)&&((symname && symname.length)===2)))) {
                    (acc).push(await (async function ()  {
                        let mval;
                        mval=(symname && symname["0"]);
                        if (check_true (((mval instanceof String || typeof mval==='string')&&await (await Environment.get_global("starts_with?"))("=:",mval)))){
                              return await mval["substr"].call(mval,2)
                        } else {
                              return mval
                        }
                    } )());
                    (acc).push(" as ");
                     return  (acc).push(await (async function ()  {
                        let mval;
                        mval=(symname && symname["1"]);
                        if (check_true (((mval instanceof String || typeof mval==='string')&&await (await Environment.get_global("starts_with?"))("=:",mval)))){
                              return await mval["substr"].call(mval,2)
                        } else {
                              return mval
                        }
                    } )())
                } else if (check_true( (symname instanceof String || typeof symname==='string'))) {
                     return (acc).push(await (async function ()  {
                        let mval;
                        mval=symname;
                        if (check_true (((mval instanceof String || typeof mval==='string')&&await (await Environment.get_global("starts_with?"))("=:",mval)))){
                              return await mval["substr"].call(mval,2)
                        } else {
                              return mval
                        }
                    } )())
                } else  {
                     throw new SyntaxError("Invalid argument for export");
                    
                }
            } ();
            idx+=1;
            if (check_true ((idx<numargs))){
                  return (acc).push(", ")
            }
        };
        let __array__277=[],__elements__275=args;
        let __BREAK__FLAG__=false;
        for(let __iter__274 in __elements__275) {
            __array__277.push(await __for_body__276(__elements__275[__iter__274]));
            if(__BREAK__FLAG__) {
                 __array__277.pop();
                break;
                
            }
        }return __array__277;
         
    })();
     return  (acc).push("}")
};__obj__1["register_feature"]=async function(feature) {
    if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("contains?"))(feature,(await Environment.get_global("*env_config*.features")))))){
        ((await Environment.get_global("*env_config*.features"))).push(feature);
         return  true
    } else {
          return false
    }
};__obj__1["uniq"]=async function(values,handle_complex_types) {
    let s;
    s=new Set();
    if (check_true (handle_complex_types)){
        await (await Environment.get_global("map"))(async function(x) {
             return  await s["add"].call(s,await JSON.stringify(x))
        },(values||[]));
         return  await (await Environment.get_global("map"))(async function(x) {
             return  await JSON.parse(x)
        },await (await Environment.get_global("to_array"))(s))
    } else {
        await (await Environment.get_global("map"))(async function(x) {
             return  await s["add"].call(s,x)
        },(values||[]));
         return  await (await Environment.get_global("to_array"))(s)
    }
};__obj__1["time_in_millis"]=async function() {
     return  ["=:Date.now"]
};__obj__1["defns"]=async function(name,options) {
    if (check_true ((options&&(options && options["ignore_if_exists"])&&(name instanceof String || typeof name==='string')&&await (await Environment.get_global("contains?"))(name,await (await Environment.get_global("namespaces"))())))){
          return name
    } else {
          return await (await Environment.get_global("create_namespace"))(name,options)
    }
};__obj__1["use_ns"]=async function(name) {
     return  ["=:set_namespace",["=:desym",name]]
};__obj__1["bind_and_call"]=async function(target_object,this_object,method,...args) {
    let boundf=await (await Environment.get_global("bind"))(target_object[method],this_object);
    ;
    if (check_true (boundf)){
          return await (async function(){
            return ( boundf).apply(this,args)
        })()
    } else throw new Error("unable to bind target_object");
    
};__obj__1["import"]=async function(...args) {
    let filespec;
    let is_url_ques_;
    let js_mode;
    let url_comps;
    let js_mod;
    let load_fn;
    let target_symbols;
    let target_path;
    let acc;
    filespec=await (await Environment.get_global("last"))(args);
    is_url_ques_=await (await Environment.get_global("contains?"))("://",filespec);
    js_mode=null;
    url_comps=null;
    js_mod=null;
    load_fn=null;
    target_symbols=await (async function () {
         if (check_true (((args && args.length)>1))){
              return (args && args["0"])
        } 
    })();
    target_path=null;
    acc=[];
    await async function(){
        if (check_true( (is_url_ques_||await (await Environment.get_global("not"))((null==location))))) {
            load_fn="fetch";
            url_comps=await async function(){
                if (check_true(is_url_ques_)) {
                     return new URL(filespec)
                } else if (check_true( await (await Environment.get_global("starts_with?"))("/",filespec))) {
                     return new URL((""+location["origin"]+filespec))
                } else  {
                     return new URL((""+location["href"]+"/"+filespec))
                }
            } ();
             return  target_path=(url_comps && url_comps["pathname"])
        } else if (check_true( await (await Environment.get_global("not"))(((typeof "read_text_file"==="undefined")||(await Environment["get_global"].call(Environment,"read_text_file") instanceof ReferenceError))))) {
            load_fn="read_text_file";
             return  target_path=filespec
        } else  {
             throw new EvalError(("unable to handle import of "+filespec));
            
        }
    } ();
     return  await async function(){
        if (check_true( (await (await Environment.get_global("ends_with?"))(".lisp",target_path)||await (await Environment.get_global("ends_with?"))(".juno",target_path)))) {
             return ["=:evaluate",[await (async function(){
                 return ("=:"+load_fn) 
            })(),filespec],"=:nil",["=:to_object",[["source_name",filespec],["throw_on_error",true]]]]
        } else if (check_true( await (await Environment.get_global("ends_with?"))(".json",target_path))) {
             return ["=:evaluate",["=:JSON.parse",[await (async function(){
                 return ("=:"+load_fn) 
            })(),filespec]],"=:nil",["=:to_object",[["json_in",true],["source_name",filespec],["throw_on_error",true]]]]
        } else if (check_true( (await (await Environment.get_global("ends_with?"))(".js",target_path)||(await (await Environment.get_global("not"))(((typeof "Deno"==="undefined")||(await Environment["get_global"].call(Environment,"Deno") instanceof ReferenceError)))&&await (await Environment.get_global("ends_with?"))(".ts",target_path))))) {
             return  await async function(){
                if (check_true( (await (await Environment.get_global("length"))(target_symbols)===0))) {
                     throw new SyntaxError("imports of javascript sources require binding symbols as the first argument");
                    
                } else if (check_true( (target_symbols instanceof Array))) {
                    (acc).push(["=:defglobal",(target_symbols && target_symbols["0"]),["=:dynamic_import",filespec]]);
                    (acc).push(["=:set_path",["imports",["=:+",(await Environment.get_global("*namespace*")),"/",["=:desym",(target_symbols && target_symbols["0"])]]],"=:*env_config*",["=:to_object",[["symbol",["=:desym",(target_symbols && target_symbols["0"])]],["namespace",(await Environment.get_global("*namespace*"))],["location",filespec]]]]);
                    (acc).push(["=:when",["=:prop",(target_symbols && target_symbols["0"]),"initializer"],["=:->",(target_symbols && target_symbols["0"]),"initializer","=:Environment"]]);
                    (acc).push((target_symbols && target_symbols["0"]));
                     return  ["=:iprogn",].concat(acc)
                }
            } ()
        } else  {
             throw new EvalError("invalid extension: needs to be .lisp, .js, .json or .juno");
            
        }
    } ()
};__obj__1["system_date_format"]={weekday:"long",year:"numeric",month:"2-digit",day:"2-digit",hour:"numeric",minute:"numeric",second:"numeric",fractionalSecondDigits:3,hourCycle:"h24",hour12:false,timeZoneName:"short"};__obj__1["system_date_formatter"]=new Intl.DateTimeFormat([],{weekday:"long",year:"numeric",month:"2-digit",day:"2-digit",hour:"numeric",minute:"numeric",second:"numeric",fractionalSecondDigits:3,hourCycle:"h24",hour12:false,timeZoneName:"short"});__obj__1["tzoffset"]=async function() {
     return  (60*await (async function() {
        {
             let __call_target__=new Date(), __call_method__="getTimezoneOffset";
            return await __call_target__[__call_method__]()
        } 
    })())
};__obj__1["date_components"]=async function(date_value,date_formatter) {
    if (check_true (await (await Environment.get_global("is_date?"))(date_value))){
          return await (await Environment.get_global("to_object"))(await (await Environment.get_global("map"))(async function(x) {
             return  await (async function(){
                let __array_op_rval__282=(x && x["type"]);
                 if (__array_op_rval__282 instanceof Function){
                    return await __array_op_rval__282((x && x["value"])) 
                } else {
                    return[__array_op_rval__282,(x && x["value"])]
                }
            })()
        },await (async function() {
             if (check_true (date_formatter)){
                  return await (await Environment.get_global("bind_and_call"))(date_formatter,date_formatter,"formatToParts",date_value)
            } else {
                  return await (await Environment.get_global("bind_and_call"))((await Environment.get_global("system_date_formatter")),(await Environment.get_global("system_date_formatter")),"formatToParts",date_value)
            } 
        } )()))
    } else {
          return null
    }
};__obj__1["formatted_date"]=async function(dval,date_formatter) {
    let comps;
    comps=await (await Environment.get_global("date_components"))(dval,date_formatter);
    if (check_true (comps)){
         if (check_true (date_formatter)){
              return (await (await Environment.get_global("values"))(comps)).join("")
        } else {
              return (""+(comps && comps["year"])+"-"+(comps && comps["month"])+"-"+(comps && comps["day"])+" "+(comps && comps["hour"])+":"+(comps && comps["minute"])+":"+(comps && comps["second"]))
        }
    } else {
          return null
    }
};__obj__1["*LANGUAGE*"]=new Object();__obj__1["dtext"]=async function(default_text) {
     return  (await (async function(){
        let __targ__283=(await Environment.get_global("*LANGUAGE*"));
        if (__targ__283){
             return(__targ__283)[default_text]
        } 
    })()||default_text)
};__obj__1["nth"]=async function(idx,collection) {
     return  await async function(){
        if (check_true( (idx instanceof Array))) {
             return await (await Environment.get_global("map"))(async function(v) {
                 return  await (await Environment.get_global("nth"))(v,collection)
            },idx)
        } else if (check_true( (await (await Environment.get_global("is_number?"))(idx)&&(idx<0)&&(await (await Environment.get_global("length"))(collection)>=(-1*idx))))) {
             return collection[await (await Environment.get_global("add"))(await (await Environment.get_global("length"))(collection),idx)]
        } else if (check_true( (await (await Environment.get_global("is_number?"))(idx)&&(idx<0)&&(await (await Environment.get_global("length"))(collection)<(-1*idx))))) {
             return undefined
        } else  {
             return collection[idx]
        }
    } ()
};__obj__1["compiler"]=async function(quoted_lisp,opts) {
    {
        let Environment=(opts && opts["env"]);
        ;
        let get_global=(opts && opts["env"] && opts["env"]["get_global"]);
        ;
        {
            let length=function anonymous(obj) {
{
                                if(obj instanceof Array) {
                                    return obj.length;
                                } else if (obj instanceof Set) {
                                    return obj.size;
                                } else if ((obj === undefined)||(obj===null)) {
                                    return 0;
                                } else if (typeof obj==='object') {
                                    return Object.keys(obj).length;
                                } else if (typeof obj==='string') {
                                    return obj.length;
                                } 
                                return 0;
                            }
};
            let first=function anonymous(x) {
{ return x[0] }
};
            let second=function anonymous(x) {
{ return x[1] }
};
            let map=async function anonymous(lambda,array_values) {
{ try {
                                        let rval = [],
                                                tl = array_values.length;
                                        for (let i = 0; i < array_values.length; i++) {
                                            rval.push(await lambda.apply(this,[array_values[i], i, tl]));
                                         }
                                        return rval;
                                    } catch (ex) {           
                                              if (lambda === undefined || lambda === null) {
                                                    throw new ReferenceError("map: lambda argument (position 0) is undefined or nil")
                                              } else if (array_values === undefined || array_values === null) {
                                                    throw new ReferenceError("map: container argument (position 1) is undefined or nil")
                                              } else if (!(lambda instanceof Function)) {
                                                    throw new ReferenceError("map: lambda argument must be a function: received: "+ typeof lambda)
                                              } else if (!(array_values instanceof Array)) {
                                                    throw new ReferenceError("map: invalid array argument, received: " + typeof array_values)
                                              } else {
                                                    // something else just pass on the error
                                                throw ex;
                                              }
                                    }
                              }
};
            let do_deferred_splice=async function(tree) {    let rval;
    let idx;
    let tval;
    let deferred_operator;
    rval=null;
    idx=0;
    tval=null;
    deferred_operator=(["=","$","&","!"]).join("");
     return  await async function(){
        if (check_true( (tree instanceof Array))) {
            rval=[];
            await (async function(){
                 let __test_condition__15=async function() {
                     return  (idx<(tree && tree.length))
                };
                let __body_ref__16=async function() {
                    tval=tree[idx];
                    if (check_true ((tval===deferred_operator))){
                        idx+=1;
                        tval=tree[idx];
                         rval=await rval["concat"].call(rval,await do_deferred_splice(tval))
                    } else {
                         (rval).push(await do_deferred_splice(tval))
                    };
                     return  idx+=1
                };
                let __BREAK__FLAG__=false;
                while(await __test_condition__15()) {
                    await __body_ref__16();
                     if(__BREAK__FLAG__) {
                         break;
                        
                    }
                } ;
                
            })();
             return  rval
        } else if (check_true( (tree instanceof Object))) {
            rval=new Object();
            await (async function() {
                let __for_body__19=async function(pset) {
                     return  await async function(){
                        rval[(pset && pset["0"])]=await do_deferred_splice((pset && pset["1"]));
                        return rval;
                        
                    }()
                };
                let __array__20=[],__elements__18=await (await Environment.get_global("pairs"))(tree);
                let __BREAK__FLAG__=false;
                for(let __iter__17 in __elements__18) {
                    __array__20.push(await __for_body__19(__elements__18[__iter__17]));
                    if(__BREAK__FLAG__) {
                         __array__20.pop();
                        break;
                        
                    }
                }return __array__20;
                 
            })();
             return  rval
        } else  {
             return tree
        }
    } ()
};
            let not=function anonymous(x) {
{ if (check_true(x)) { return false } else { return true } }
};
            let sub_type=function subtype(value) {  if (value === null) return "null";  else if (value === undefined) return "undefined";  else if (value instanceof Array) return "array";  else if (value.constructor && value.constructor!=null && value.constructor.name!=='Object') {    return value.constructor.name;  }  return typeof value;};
            let last=function anonymous(x) {
{ return x[x.length - 1] }
};
            let flatten=function anonymous(x) {
{ return x.flat(999999999999) } 
};
            let add=function anonymous(...args) {
{
                                let acc;
                                if (typeof args[0]==="number") {
                                    acc = 0;
                                } else if (args[0] instanceof Array) {
                                    return args[0].concat(args.slice(1));
                                } else if (typeof args[0]==='object') {
                                   let rval = {};
                                   for (let i in args) {
                                        if (typeof args[i] === 'object') {
                                            for (let k in args[i]) {
                                                rval[k] = args[i][k];
                                            }
                                        }
                                   }
                                   return rval;
                                } else {
                                    acc = "";
                                }
                                for (let i in args) {
                                    acc += args[i];
                                }
                                return acc;
                             }
};
            let subtype=function subtype(value) {  if (value === null) return "null";  else if (value === undefined) return "undefined";  else if (value instanceof Array) return "array";  else if (value.constructor && value.constructor!=null && value.constructor.name!=='Object') {    return value.constructor.name;  }  return typeof value;};
            let is_nil_ques_=async function(value) {     return  (null===value)
};
            let is_number_ques_=function(x) {                             return  ( subtype(x)==="Number")
                        };
            let starts_with_ques_=function anonymous(val,text) {
{ if (text instanceof Array) { return text[0]===val } else if (subtype(text)=='String') { return text.startsWith(val) } else { return false }}
};
            let cl_encode_string=async function(text) {    if (check_true ((text instanceof String || typeof text==='string'))){
        let escaped;
        let nq;
        let step1;
        let snq;
        escaped=await (await Environment.get_global("replace"))(new RegExp("\n","g"),await (await Environment.get_global("add"))(await String.fromCharCode(92),"n"),text);
        escaped=await (await Environment.get_global("replace"))(new RegExp("\r","g"),await (await Environment.get_global("add"))(await String.fromCharCode(92),"r"),escaped);
        nq=(escaped).split(await String.fromCharCode(34));
        step1=(nq).join(await (await Environment.get_global("add"))(await String.fromCharCode(92),await String.fromCharCode(34)));
        snq=(step1).split(await String.fromCharCode(39));
         return  step1
    } else {
          return text
    }
};
            let contains_ques_=function anonymous(value,container) {
{ if (!value && !container) { return false }
                           else if (container === null) { throw new TypeError("contains?: passed nil/undefined container value"); }
                           else if ((container instanceof String) || typeof container === "string") {
                                if (subtype(value) === "Number") return container.indexOf(""+value)>-1;
                                else return container.indexOf(value)>-1;
                           }
                           else if (container instanceof Array) return container.includes(value);
                           else if (container instanceof Set) return container.has(value);
                           else throw new TypeError("contains?: passed invalid container type: "+subtype(container)) }
};
            let tree;
            let expanded_tree;
            let op;
            let default_safety_level;
            let source_name;
            let build_environment_mode;
            let env_ref;
            let operator;
            let break_out;
            let tokens;
            let tokenized;
            let target_namespace;
            let errors;
            let external_dependencies;
            let first_level_setup;
            let needs_first_level;
            let signal_error;
            let warnings;
            let blk_counter;
            let ctx;
            let output;
            let __log__1= async function(){
                return await Environment.get_global("log")
            };
            let __defclog__2= async function(){
                return async function(opts) {
                    let style;
                    style=("padding: 5px;"+await (async function () {
                         if (check_true ((opts && opts["background"]))){
                              return ("background: "+(opts && opts["background"])+";")
                        } else {
                              return ""
                        } 
                    })()+await (async function () {
                         if (check_true ((opts && opts["color"]))){
                              return ("color: "+(opts && opts["color"])+";")
                        } 
                    })()+"");
                    ;
                     return  async function(...args) {
                         return  await (async function(){
                            let __target_arg__6=[].concat(await (await Environment.get_global("conj"))([style],args));
                            if(!__target_arg__6 instanceof Array){
                                throw new TypeError("Invalid final argument to apply - an array is required")
                            }let __pre_arg__7=("%c"+await (async function () {
                                 if (check_true ((opts && opts["prefix"]))){
                                      return (opts && opts["prefix"])
                                } else {
                                      return (args).shift()
                                } 
                            })());
                            __target_arg__6.unshift(__pre_arg__7);
                            return (console.log).apply(this,__target_arg__6)
                        })()
                    }
                }
            };
            let quiet_mode;
            let show_hints;
            let error_log;
            let assembly;
            let async_function_type_placeholder;
            let function_type_placeholder;
            let type_marker;
            let return_marker;
            let entry_signature;
            let temp_fn_asn_template;
            let anon_fn_template;
            let build_fn_with_assignment;
            let build_anon_fn;
            let referenced_global_symbols;
            let new_ctx;
            let set_ctx_log;
            let map_ctype_to_value;
            let map_value_to_ctype;
            let set_ctx;
            let get_ctx;
            let get_ctx_val;
            let get_declarations;
            let set_declaration;
            let is_ambiguous_ques_;
            let set_ambiguous;
            let unset_ambiguous;
            let invalid_js_ref_chars;
            let invalid_js_ref_chars_regex;
            let check_invalid_js_ref;
            let sanitize_js_ref_name;
            let find_in_context;
            let source_chain;
            let source_from_tokens;
            let source_comment;
            let NOT_FOUND;
            let THIS_REFERENCE;
            let NOT_FOUND_THING;
            let get_lisp_ctx_log;
            let get_lisp_ctx;
            let get_val;
            let has_lisp_globals;
            let root_ctx;
            let tokenize_object;
            let tokenize_quote;
            let tokenize;
            let comp_time_log;
            let compile_time_eval;
            let infix_ops;
            let compile_set_prop;
            let compile_prop;
            let compile_elem;
            let inline_log;
            let compile_inline;
            let compile_push;
            let compile_list;
            let compile_typeof;
            let compile_instanceof;
            let compile_compare;
            let compile_assignment;
            let needs_return_ques_;
            let top_level_log;
            let compile_toplevel;
            let compile_block;
            let Expression;
            let Statement;
            let NumberType;
            let StringType;
            let NilType;
            let UnknownType;
            let ArgumentType;
            let compile_defvar;
            let get_declaration_details;
            let wrap_assignment_value;
            let clean_quoted_reference;
            let compile_let;
            let in_sync_ques_;
            let await_ques_;
            let calling_preamble;
            let fn_log;
            let compile_fn;
            let compile_jslambda;
            let compile_yield;
            let var_counter;
            let gen_temp_name;
            let if_id;
            let cond_log;
            let compile_cond;
            let compile_cond_inner;
            let compile_if;
            let compile_wrapper_fn;
            let compile_block_to_anon_fn;
            let make_do_block;
            let push_as_arg_list;
            let compile_new;
            let compile_val_mod;
            let try_log;
            let compile_try;
            let compile_try_inner;
            let compile_throw;
            let compile_break;
            let compile_return;
            let apply_log;
            let compile_apply;
            let compile_call;
            let compile_call_inner;
            let check_needs_wrap;
            let compile_import;
            let compile_dynamic_import;
            let compile_javascript;
            let compile_set_global;
            let is_token_ques_;
            let compile_quote;
            let compile_quotel;
            let wrap_and_run;
            let quote_tree;
            let quotem_log;
            let compile_quotem;
            let compile_unquotem;
            let eval_log;
            let compile_eval;
            let compile_debug;
            let compile_for_each;
            let compile_for_each_inner;
            let compile_while;
            let compile_for_with;
            let compile_for_with_inner;
            let silence;
            let verbosity;
            let check_verbosity;
            let declare_log;
            let compile_declare;
            let safety_level;
            let get_scoped_type;
            let compile_scoped_reference;
            let compile_lisp_scoped_reference;
            let standard_types;
            let is_error;
            let is_block_ques_;
            let is_complex_ques_;
            let is_form_ques_;
            let op_lookup;
            let comp_log;
            let last_source;
            let compile_obj_literal;
            let is_literal_ques_;
            let comp_warn;
            let __compile__3= async function(){
                return async function(tokens,ctx,_cdepth) {
                    if (check_true (is_error)){
                          return is_error
                    } else {
                        let rval=await compile_inner(tokens,ctx,_cdepth);
                        ;
                        if (check_true (false)){
                             if (check_true (((rval instanceof Array)&&((rval && rval["0"]) instanceof Object)&&await (async function(){
                                let __targ__610=(rval && rval["0"]);
                                if (__targ__610){
                                     return(__targ__610)["ctype"]
                                } 
                            })()))){
                                 true
                            } else {
                                (comp_warn)("<-",(_cdepth||"-"),"unknown/undeclared type returned: ",await (await Environment.get_global("as_lisp"))(rval));
                                 (comp_warn)("  ",(_cdepth||"-"),"for given: ",await source_from_tokens(tokens,expanded_tree))
                            }
                        };
                         return  rval
                    }
                }
            };
            let compile_inner;
            let final_token_assembly;
            let main_log;
            let assemble_output;
            {
                tree=quoted_lisp;
                expanded_tree=await clone(tree);
                op=null;
                default_safety_level=((Environment && Environment["declarations"] && Environment["declarations"]["safety"] && Environment["declarations"]["safety"]["level"])||1);
                source_name=((opts && opts["source_name"])||"anonymous");
                build_environment_mode=((opts && opts["build_environment"])||false);
                env_ref=await (async function () {
                     if (check_true (build_environment_mode)){
                          return ""
                    } else {
                          return "Environment."
                    } 
                })();
                operator=null;
                break_out="__BREAK__FLAG__";
                tokens=[];
                tokenized=null;
                target_namespace=null;
                errors=[];
                external_dependencies=new Object();
                first_level_setup=[];
                needs_first_level=true;
                signal_error=async function(message) {
                     return  new LispSyntaxError(message)
                };
                warnings=[];
                blk_counter=0;
                ctx=null;
                output=null;
                let log=await __log__1();
                ;
                let defclog=await __defclog__2();
                ;
                quiet_mode=await (async function () {
                     if (check_true ((opts && opts["quiet_mode"]))){
                        log=console.log;
                         return  true
                    } else {
                          return false
                    } 
                })();
                show_hints=null;
                error_log=await defclog({
                    prefix:"Compile Error",background:"#CA3040",color:"white"
                });
                assembly=[];
                async_function_type_placeholder=async function() {
                     return  true
                };
                function_type_placeholder=function() {
                     return  true
                };
                type_marker=async function(type) {
                     return  await async function(){
                        let __target_obj__8=new Object();
                        __target_obj__8["ctype"]=type;
                        __target_obj__8["args"]=[];
                        return __target_obj__8;
                        
                    }()
                };
                return_marker=async function() {
                     return  {
                        mark:"rval"
                    }
                };
                entry_signature=null;
                temp_fn_asn_template=[{
                    type:"special",val:"=:defvar",ref:true,name:"defvar"
                },{
                    type:"literal",val:"\"\"",ref:false,name:""
                },{
                    type:"arr",val:[{
                        type:"special",val:"=:fn",ref:true,name:"fn"
                    },{
                        type:"arr",val:[],ref:false,name:null
                    },{
                        type:"arr",val:[],ref:false,name:null
                    }],ref:false,name:null
                }];
                anon_fn_template=await temp_fn_asn_template["slice"].call(temp_fn_asn_template,2);
                build_fn_with_assignment=async function(tmp_var_name,body,args,ctx) {
                    let tmp_template;
                    tmp_template=await clone(temp_fn_asn_template);
                    if (check_true (await (async function(){
                        let __array_op_rval__9=in_sync_ques_;
                         if (__array_op_rval__9 instanceof Function){
                            return await __array_op_rval__9(ctx) 
                        } else {
                            return[__array_op_rval__9,ctx]
                        }
                    })())){
                        await async function(){
                            let __target_obj__10=(tmp_template && tmp_template["2"] && tmp_template["2"]["val"] && tmp_template["2"]["val"]["0"]);
                            __target_obj__10["val"]="=:function";
                            return __target_obj__10;
                            
                        }();
                         await async function(){
                            let __target_obj__11=(tmp_template && tmp_template["2"] && tmp_template["2"]["val"] && tmp_template["2"]["val"]["0"]);
                            __target_obj__11["name"]="function";
                            return __target_obj__11;
                            
                        }()
                    };
                    await async function(){
                        let __target_obj__12=(tmp_template && tmp_template["1"]);
                        __target_obj__12["name"]=tmp_var_name;
                        __target_obj__12["val"]=tmp_var_name;
                        return __target_obj__12;
                        
                    }();
                    if (check_true ((args instanceof Array))){
                         await async function(){
                            let __target_obj__13=(tmp_template && tmp_template["2"] && tmp_template["2"]["val"] && tmp_template["2"]["val"]["1"]);
                            __target_obj__13["val"]=args;
                            return __target_obj__13;
                            
                        }()
                    };
                    await async function(){
                        let __target_obj__14=(tmp_template && tmp_template["2"] && tmp_template["2"]["val"] && tmp_template["2"]["val"]["2"]);
                        __target_obj__14["val"]=body;
                        return __target_obj__14;
                        
                    }();
                     return  tmp_template
                };
                build_anon_fn=async function(body,args) {
                    let tmp_template;
                    tmp_template=await clone(anon_fn_template);
                    if (check_true (await verbosity(ctx))){
                        await console.log("build_anon_function: -> body: ",body);
                         await console.log("build_anon_function: -> args: ",args)
                    };
                    if (check_true ((args instanceof Array))){
                         await async function(){
                            let __target_obj__15=(tmp_template && tmp_template["0"] && tmp_template["0"]["val"] && tmp_template["0"]["val"]["1"]);
                            __target_obj__15["val"]=args;
                            return __target_obj__15;
                            
                        }()
                    };
                    await async function(){
                        let __target_obj__16=(tmp_template && tmp_template["0"] && tmp_template["0"]["val"] && tmp_template["0"]["val"]["2"]);
                        __target_obj__16["val"]=body;
                        return __target_obj__16;
                        
                    }();
                     return  tmp_template
                };
                referenced_global_symbols=new Object();
                new_ctx=async function(parent) {
                    let ctx_obj;
                    ctx_obj=new Object();
                    await async function(){
                        ctx_obj["scope"]=new Object();
                        ctx_obj["source"]="";
                        ctx_obj["parent"]=parent;
                        ctx_obj["ambiguous"]=new Object();
                        ctx_obj["declared_types"]=new Object();
                        ctx_obj["defs"]=[];
                        return ctx_obj;
                        
                    }();
                    if (check_true (parent)){
                        await async function(){
                            let __target_obj__18=(ctx_obj && ctx_obj["scope"]);
                            __target_obj__18["namespace"]=(parent && parent["scope"] && parent["scope"]["namespace"]);
                            return __target_obj__18;
                            
                        }();
                        if (check_true ((parent && parent["defvar_eval"]))){
                             await async function(){
                                ctx_obj["defvar_eval"]=true;
                                return ctx_obj;
                                
                            }()
                        };
                        if (check_true ((parent && parent["has_first_level"]))){
                             await async function(){
                                ctx_obj["has_first_level"]=true;
                                return ctx_obj;
                                
                            }()
                        };
                        if (check_true ((parent && parent["block_step"]))){
                             await async function(){
                                ctx_obj["block_step"]=(parent && parent["block_step"]);
                                return ctx_obj;
                                
                            }()
                        };
                        if (check_true ((parent && parent["block_id"]))){
                             await async function(){
                                ctx_obj["block_id"]=(parent && parent["block_id"]);
                                return ctx_obj;
                                
                            }()
                        };
                        if (check_true ((parent && parent["suppress_return"]))){
                             await async function(){
                                ctx_obj["suppress_return"]=(parent && parent["suppress_return"]);
                                return ctx_obj;
                                
                            }()
                        };
                        if (check_true ((parent && parent["in_try"]))){
                             await async function(){
                                ctx_obj["in_try"]=parent["in_try"];
                                return ctx_obj;
                                
                            }()
                        };
                        if (check_true ((parent && parent["return_point"]))){
                             await async function(){
                                ctx_obj["return_point"]=await add((parent && parent["return_point"]),1);
                                return ctx_obj;
                                
                            }()
                        }
                    };
                     return  ctx_obj
                };
                set_ctx_log=await (async function () {
                     if (check_true ((opts && opts["quiet_mode"]))){
                          return log
                    } else {
                          return await defclog({
                            prefix:"set_ctx",background:"darkgreen",color:"white"
                        })
                    } 
                })();
                map_ctype_to_value=async function(ctype,value) {
                     return  await async function(){
                        if (check_true( (ctype==="Function"))) {
                             return Function
                        } else if (check_true( (ctype==="AsyncFunction"))) {
                             return AsyncFunction
                        } else if (check_true( (ctype==="expression"))) {
                             return Expression
                        } else if (check_true( ((ctype instanceof String || typeof ctype==='string')&&await contains_ques_("block",ctype)))) {
                             return UnknownType
                        } else if (check_true( (ctype==="array"))) {
                             return Array
                        } else if (check_true( (ctype==="nil"))) {
                             return NilType
                        } else if (check_true( ctype instanceof Function)) {
                             return ctype
                        } else  {
                             return value
                        }
                    } ()
                };
                map_value_to_ctype=async function(value) {
                     return  await async function(){
                        if (check_true( (Function===value))) {
                             return "Function"
                        } else if (check_true( (AsyncFunction===value))) {
                             return "AsyncFunction"
                        } else if (check_true( (NumberType===value))) {
                             return "NumberType"
                        } else if (check_true( (Expression===value))) {
                             return "Expression"
                        } else if (check_true( (Array===value))) {
                             return "array"
                        } else if (check_true( (Boolean===value))) {
                             return "Boolean"
                        } else if (check_true( (NilType===value))) {
                             return "nil"
                        } else if (check_true( (Object===value))) {
                             return "Object"
                        } else  {
                             return value
                        }
                    } ()
                };
                set_ctx=async function(ctx,name,value) {
                    let sanitized_name=await sanitize_js_ref_name(name);
                    ;
                    if (check_true (((value instanceof Array)&&(value && value["0"] && value["0"]["ctype"])))){
                          return await async function(){
                            let __target_obj__26=(ctx && ctx["scope"]);
                            __target_obj__26[sanitized_name]=await async function(){
                                if (check_true( ((value && value["0"] && value["0"]["ctype"])==="Function"))) {
                                     return Function
                                } else if (check_true( ((value && value["0"] && value["0"]["ctype"])==="AsyncFunction"))) {
                                     return AsyncFunction
                                } else if (check_true( ((value && value["0"] && value["0"]["ctype"])==="expression"))) {
                                     return Expression
                                } else  {
                                     return value
                                }
                            } ();
                            return __target_obj__26;
                            
                        }()
                    } else {
                          return await async function(){
                            let __target_obj__27=(ctx && ctx["scope"]);
                            __target_obj__27[sanitized_name]=value;
                            return __target_obj__27;
                            
                        }()
                    }
                };
                get_ctx=async function(ctx,name) {
                    let ref_name;
                    ref_name=null;
                     return  await async function(){
                        if (check_true( await is_nil_ques_(name))) {
                             throw new SyntaxError(("get_ctx: nil identifier passed: "+await sub_type(name)));
                            
                        } else if (check_true( await is_number_ques_(name))) {
                             return name
                        } else if (check_true( name instanceof Function)) {
                             throw new SyntaxError(("get_ctx: invalid identifier passed: "+await sub_type(name)));
                            
                        } else  {
                            ref_name=await first(await (await Environment.get_global("get_object_path"))(name));
                             return  await async function(){
                                if (check_true( await not((undefined===await (async function(){
                                    let __targ__28=(ctx && ctx["scope"]);
                                    if (__targ__28){
                                         return(__targ__28)[ref_name]
                                    } 
                                })())))) {
                                     return await (async function(){
                                        let __targ__29=(ctx && ctx["scope"]);
                                        if (__targ__29){
                                             return(__targ__29)[ref_name]
                                        } 
                                    })()
                                } else if (check_true((ctx && ctx["parent"]))) {
                                     return await get_ctx((ctx && ctx["parent"]),ref_name)
                                }
                            } ()
                        }
                    } ()
                };
                get_ctx_val=async function(ctx,name) {
                    let ref_name;
                    let declared_type_value;
                    ref_name=null;
                    declared_type_value=null;
                    if (check_true ((null==ctx))){
                         await console.error("get_ctx_val: undefined/nil ctx passed.")
                    };
                     return  await async function(){
                        if (check_true( await is_nil_ques_(name))) {
                             throw new TypeError(("get_ctx_val: nil identifier passed: "+await sub_type(name)));
                            
                        } else if (check_true( await is_number_ques_(name))) {
                             return name
                        } else if (check_true( name instanceof Function)) {
                             throw new Error(("get_ctx_val: invalid identifier passed: "+await sub_type(name)));
                            
                        } else  {
                            if (check_true (await starts_with_ques_("=:",name))){
                                 ref_name=await name["substr"].call(name,2)
                            } else {
                                 ref_name=name
                            };
                            ref_name=await sanitize_js_ref_name(name);
                            declared_type_value=await get_declarations(ctx,ref_name);
                            if (check_true ((declared_type_value && declared_type_value["type"]))){
                                  return (declared_type_value && declared_type_value["type"])
                            } else {
                                ref_name=await first(await (await Environment.get_global("get_object_path"))(ref_name));
                                 return  await async function(){
                                    if (check_true( op_lookup[ref_name])) {
                                         return AsyncFunction
                                    } else if (check_true( await not((undefined===await (async function(){
                                        let __targ__30=(ctx && ctx["scope"]);
                                        if (__targ__30){
                                             return(__targ__30)[ref_name]
                                        } 
                                    })())))) {
                                         return await (async function(){
                                            let __targ__31=(ctx && ctx["scope"]);
                                            if (__targ__31){
                                                 return(__targ__31)[ref_name]
                                            } 
                                        })()
                                    } else if (check_true((ctx && ctx["parent"]))) {
                                         return await get_ctx((ctx && ctx["parent"]),ref_name)
                                    }
                                } ()
                            }
                        }
                    } ()
                };
                get_declarations=async function(ctx,name,_tagged) {
                    let ref_name;
                    let oname;
                    ref_name=null;
                    oname=name;
                    name=await (async function () {
                         if (check_true (_tagged)){
                              return name
                        } else {
                              return await sanitize_js_ref_name(name)
                        } 
                    })();
                     return  await async function(){
                        if (check_true( await not((ctx instanceof Object)))) {
                             throw new TypeError(("get_declarations: invalid ctx passed"));
                            
                        } else if (check_true( await is_nil_ques_(name))) {
                             throw new TypeError(("get_declarations: nil identifier passed: "+await sub_type(oname)));
                            
                        } else if (check_true( await is_number_ques_(name))) {
                             return name
                        } else if (check_true( name instanceof Function)) {
                             throw new Error(("get_declarations: invalid identifier passed: "+await sub_type(oname)));
                            
                        } else  {
                             if (check_true ((name instanceof String || typeof name==='string'))){
                                if (check_true (await starts_with_ques_("=:",name))){
                                     ref_name=await name["substr"].call(name,2)
                                } else {
                                     ref_name=name
                                };
                                 return  await async function(){
                                    if (check_true( op_lookup[ref_name])) {
                                         return null
                                    } else if (check_true( await not((undefined===await (async function(){
                                        let __targ__32=(ctx && ctx["declared_types"]);
                                        if (__targ__32){
                                             return(__targ__32)[ref_name]
                                        } 
                                    })())))) {
                                         return await (async function(){
                                            let __targ__33=(ctx && ctx["declared_types"]);
                                            if (__targ__33){
                                                 return(__targ__33)[ref_name]
                                            } 
                                        })()
                                    } else if (check_true((ctx && ctx["parent"]))) {
                                         return await get_declarations((ctx && ctx["parent"]),ref_name,true)
                                    }
                                } ()
                            }
                        }
                    } ()
                };
                set_declaration=async function(ctx,name,declaration_type,value) {
                    let sname;
                    let dec_struct;
                    sname=await sanitize_js_ref_name(name);
                    dec_struct=await get_declarations(ctx,sname);
                    if (check_true (await (await Environment.get_global("blank?"))(dec_struct))){
                         dec_struct={
                            type:undefined,inlined:false
                        }
                    };
                    await async function(){
                        dec_struct[declaration_type]=value;
                        return dec_struct;
                        
                    }();
                    await async function(){
                        let __target_obj__35=(ctx && ctx["declared_types"]);
                        __target_obj__35[sname]=dec_struct;
                        return __target_obj__35;
                        
                    }();
                     return  await (async function(){
                        let __targ__36=(ctx && ctx["declared_types"]);
                        if (__targ__36){
                             return(__targ__36)[sname]
                        } 
                    })()
                };
                is_ambiguous_ques_=async function(ctx,name) {
                    let ref_name;
                    ref_name=null;
                     return  await async function(){
                        if (check_true( await is_nil_ques_(ctx))) {
                             throw new TypeError(("is_ambiguous?: nil ctx passed"));
                            
                        } else if (check_true( await is_nil_ques_(name))) {
                             throw new TypeError(("is_ambiguous?: nil reference name passed"));
                            
                        } else if (check_true( await not((name instanceof String || typeof name==='string')))) {
                             throw new TypeError(("is_ambiguous?: reference name given is a "+await sub_type(name)+", requires a string"));
                            
                        } else  {
                            if (check_true (await starts_with_ques_("=:",name))){
                                 ref_name=await name["substr"].call(name,2)
                            } else {
                                 ref_name=name
                            };
                            ref_name=await first(await (await Environment.get_global("get_object_path"))(ref_name));
                             return  await async function(){
                                if (check_true( await (async function(){
                                    let __targ__37=(ctx && ctx["ambiguous"]);
                                    if (__targ__37){
                                         return(__targ__37)[ref_name]
                                    } 
                                })())) {
                                     return true
                                } else if (check_true((ctx && ctx["parent"]))) {
                                     return await (async function(){
                                        let __array_op_rval__38=is_ambiguous_ques_;
                                         if (__array_op_rval__38 instanceof Function){
                                            return await __array_op_rval__38((ctx && ctx["parent"]),ref_name) 
                                        } else {
                                            return[__array_op_rval__38,(ctx && ctx["parent"]),ref_name]
                                        }
                                    })()
                                }
                            } ()
                        }
                    } ()
                };
                set_ambiguous=async function(ctx,name) {
                     return  await async function(){
                        let __target_obj__39=(ctx && ctx["ambiguous"]);
                        __target_obj__39[name]=true;
                        return __target_obj__39;
                        
                    }()
                };
                unset_ambiguous=async function(ctx,name) {
                     return  await (await Environment.get_global("delete_prop"))((ctx && ctx["ambiguous"]),name)
                };
                invalid_js_ref_chars="+?-%&^#!*[]~{}/|";
                invalid_js_ref_chars_regex=new RegExp("[/\%\+\[\>\?\<\\}\{&\#\^\=\~\*\!\)\(\-]+","g");
                check_invalid_js_ref=async function(symname) {
                     return  await async function(){
                        if (check_true( await not((symname instanceof String || typeof symname==='string')))) {
                             return false
                        } else if (check_true( ((symname instanceof String || typeof symname==='string')&&(await length(symname)>2)&&await starts_with_ques_("=:",symname)))) {
                             return (await length(await (await Environment.get_global("scan_str"))(invalid_js_ref_chars_regex,await symname["substr"].call(symname,2)))>0)
                        } else  {
                             return (await length(await (await Environment.get_global("scan_str"))(invalid_js_ref_chars_regex,symname))>0)
                        }
                    } ()
                };
                sanitize_js_ref_name=async function(symname) {
                     return  await async function(){
                        if (check_true( await not((symname instanceof String || typeof symname==='string')))) {
                             return symname
                        } else  {
                            let text_chars;
                            let acc;
                            text_chars=(symname).split("");
                            acc=[];
                            await (async function() {
                                let __for_body__42=async function(t) {
                                     return  await async function(){
                                        if (check_true( (t==="+"))) {
                                             return (acc).push("_plus_")
                                        } else if (check_true( (t==="?"))) {
                                             return (acc).push("_ques_")
                                        } else if (check_true( (t==="-"))) {
                                             return (acc).push("_")
                                        } else if (check_true( (t==="&"))) {
                                             return (acc).push("_amper_")
                                        } else if (check_true( (t==="^"))) {
                                             return (acc).push("_carot_")
                                        } else if (check_true( (t==="#"))) {
                                             return (acc).push("_hash_")
                                        } else if (check_true( (t==="!"))) {
                                             return (acc).push("_exclaim_")
                                        } else if (check_true( (t==="*"))) {
                                             return (acc).push("_star_")
                                        } else if (check_true( (t==="~"))) {
                                             return (acc).push("_tilde_")
                                        } else if (check_true( (t==="~"))) {
                                             return (acc).push("_percent_")
                                        } else if (check_true( (t==="|"))) {
                                             return (acc).push("_pipe_")
                                        } else if (check_true( await contains_ques_(t,"(){}"))) {
                                             throw new SyntaxError(("Invalid character in symbol: "+symname));
                                            
                                        } else  {
                                             return (acc).push(t)
                                        }
                                    } ()
                                };
                                let __array__43=[],__elements__41=text_chars;
                                let __BREAK__FLAG__=false;
                                for(let __iter__40 in __elements__41) {
                                    __array__43.push(await __for_body__42(__elements__41[__iter__40]));
                                    if(__BREAK__FLAG__) {
                                         __array__43.pop();
                                        break;
                                        
                                    }
                                }return __array__43;
                                 
                            })();
                             return  (acc).join("")
                        }
                    } ()
                };
                find_in_context=async function(ctx,name) {
                    let symname;
                    let ref;
                    let __is_literal_ques___44= async function(){
                        return (await is_number_ques_(name)||(await not(ref)&&(name instanceof String || typeof name==='string'))||("nil"===symname)||("null"===symname)||(ref&&("undefined"===symname))||(ref&&("else"===symname))||(ref&&("catch"===symname))||(true===name)||(false===name))
                    };
                    let special;
                    let local;
                    let global;
                    let val;
                    {
                        symname=await async function(){
                            if (check_true( ((name instanceof String || typeof name==='string')&&(await length(name)>2)&&await starts_with_ques_("=:",name)))) {
                                 return await name["substr"].call(name,2)
                            } else if (check_true( (name instanceof String || typeof name==='string'))) {
                                 return name
                            } else  {
                                if (check_true ((name===null))){
                                     name="=:nil"
                                };
                                 return  "null"
                            }
                        } ();
                        ref=(symname&&((name instanceof String || typeof name==='string')&&(await length(name)>2)&&await starts_with_ques_("=:",name)));
                        let is_literal_ques_=await __is_literal_ques___44();
                        ;
                        special=(ref&&symname&&await contains_ques_(symname,await (await Environment.get_global("conj"))(["unquotem","quotem"],await (await Environment.get_global("keys"))(op_lookup))));
                        local=(await not(special)&&await not(is_literal_ques_)&&symname&&ref&&await get_ctx_val(ctx,symname));
                        global=(await not(special)&&await not(is_literal_ques_)&&ref&&symname&&await get_lisp_ctx(symname));
                        val=await async function(){
                            if (check_true(is_literal_ques_)) {
                                 return name
                            } else if (check_true( (name instanceof Array))) {
                                 return name
                            } else if (check_true( (name instanceof Object))) {
                                 return name
                            } else if (check_true(special)) {
                                 return name
                            } else if (check_true(local)) {
                                 return local
                            } else if (check_true( (await not((global===undefined))&&await not((global===NOT_FOUND))))) {
                                 return global
                            } else if (check_true( (symname===name))) {
                                 return name
                            }
                        } ();
                         return  {
                            type:await async function(){
                                if (check_true( (name instanceof Array))) {
                                     return "arr"
                                } else if (check_true( (name instanceof Object))) {
                                     return await sub_type(name)
                                } else if (check_true(special)) {
                                     return "special"
                                } else if (check_true(is_literal_ques_)) {
                                     return "literal"
                                } else if (check_true(local)) {
                                     return await sub_type(local)
                                } else if (check_true( await not((undefined==global)))) {
                                     return await sub_type(global)
                                } else if (check_true( (ref&&symname))) {
                                     return "unbound"
                                } else if (check_true( (name===undefined))) {
                                     return "literal"
                                } else  {
                                    (error_log)("find_in_context: unknown type: ",name);
                                    debugger;
                                    ;
                                     return  "??"
                                }
                            } (),name:await async function(){
                                if (check_true( (symname&&ref))) {
                                     return await sanitize_js_ref_name(symname)
                                } else if (check_true( (false&&is_literal_ques_&&(val instanceof String || typeof val==='string')))) {
                                     return await sanitize_js_ref_name(name)
                                } else if (check_true(is_literal_ques_)) {
                                     if (check_true (ref)){
                                          return await sanitize_js_ref_name(name)
                                    } else {
                                          return name
                                    }
                                } else  {
                                     return null
                                }
                            } (),val:await (async function() {
                                if (check_true ((val===undefined))){
                                      return undefined
                                } else {
                                      return val
                                }
                            } )(),ref:await (async function() {
                                if (check_true (ref)){
                                      return true
                                } else {
                                      return false
                                }
                            } )(),local:(local||null),global:((global&&await not((NOT_FOUND===global)))||null)
                        }
                    }
                };
                source_chain=async function(cpath,tree,sources) {
                    if (check_true (((cpath instanceof Array)&&tree))){
                        let source;
                        sources=(sources||[]);
                        source=null;
                        cpath=await (await Environment.get_global("chop"))(cpath);
                        source=await (await Environment.get_global("as_lisp"))(await (await Environment.get_global("resolve_path"))(cpath,tree));
                        if (check_true (((source && source.length)>80))){
                             source=await add(await source["substr"].call(source,0,80),"...")
                        };
                        if (check_true (await not(await (await Environment.get_global("blank?"))(source)))){
                             (sources).push(source)
                        };
                        if (check_true ((((cpath && cpath.length)>0)&&((sources && sources.length)<4)))){
                             await source_chain(cpath,tree,sources)
                        };
                         return  sources
                    }
                };
                source_from_tokens=async function(tokens,tree,collect_parents_ques_) {
                     return  await async function(){
                        if (check_true( ((tokens && tokens["path"])&&collect_parents_ques_))) {
                             return await source_chain((tokens && tokens["path"]),tree)
                        } else if (check_true( (tree instanceof String || typeof tree==='string'))) {
                             return await (await Environment.get_global("as_lisp"))(tree)
                        } else if (check_true((tokens && tokens["path"]))) {
                             return await (await Environment.get_global("as_lisp"))(await (await Environment.get_global("resolve_path"))((tokens && tokens["path"]),tree))
                        } else if (check_true( ((tokens instanceof Array)&&(tokens && tokens["0"] && tokens["0"]["path"])&&collect_parents_ques_))) {
                             return await source_chain((tokens && tokens["0"] && tokens["0"]["path"]),tree)
                        } else if (check_true( ((tokens instanceof Array)&&(tokens && tokens["0"] && tokens["0"]["path"])))) {
                             return await (await Environment.get_global("as_lisp"))(await (await Environment.get_global("resolve_path"))(await (await Environment.get_global("chop"))((tokens && tokens["0"] && tokens["0"]["path"])),tree))
                        } else if (check_true( ((undefined===tokens)&&await not((undefined===tree))))) {
                             return await (await Environment.get_global("as_lisp"))(tree)
                        } else  {
                            if (check_true (await verbosity(ctx))){
                                 await console.warn("source_from_tokens: unable to determine source path from: ",await clone(tokens))
                            };
                             return  ""
                        }
                    } ()
                };
                source_comment=async function(tokens) {
                     return  {
                        comment:await source_from_tokens(tokens,expanded_tree)
                    }
                };
                NOT_FOUND="__!NOT_FOUND!__";
                THIS_REFERENCE=async function() {
                     return  "this"
                };
                NOT_FOUND_THING=async function() {
                     return  true
                };
                get_lisp_ctx_log=await (async function () {
                     if (check_true ((opts && opts["quiet_mode"]))){
                          return log
                    } else {
                          return await defclog({
                            prefix:"get_lisp_ctx",color:"darkgreen",background:"#A0A0A0"
                        })
                    } 
                })();
                get_lisp_ctx=async function(name) {
                    if (check_true (await not((name instanceof String || typeof name==='string'))))throw new Error("Compiler Error: get_lisp_ctx passed a non string identifier");
                     else {
                        let comps;
                        let cannot_be_js_global;
                        let ref_name;
                        let ref_type;
                        comps=await (await Environment.get_global("get_object_path"))(name);
                        cannot_be_js_global=await check_invalid_js_ref((comps && comps["0"]));
                        ref_name=(comps).shift();
                        ref_type=await (async function () {
                             if (check_true ((ref_name==="this"))){
                                  return THIS_REFERENCE
                            } else {
                                let global_ref=await (async function(){
                                    let __targ__45=(root_ctx && root_ctx["defined_lisp_globals"]);
                                    if (__targ__45){
                                         return(__targ__45)[ref_name]
                                    } 
                                })();
                                ;
                                if (check_true (((undefined==global_ref)||(global_ref==="statement")))){
                                      return await Environment["get_global"].call(Environment,ref_name,NOT_FOUND_THING,cannot_be_js_global)
                                } else {
                                      return global_ref
                                }
                            } 
                        })();
                        if (check_true ((await not((NOT_FOUND_THING===ref_type))&&await not(await contains_ques_(ref_name,standard_types))&&await async function(){
                            referenced_global_symbols[ref_name]=ref_type;
                            return referenced_global_symbols;
                            
                        }()))){
                            
                        };
                         return  await async function(){
                            if (check_true( (NOT_FOUND_THING===ref_type))) {
                                 return undefined
                            } else if (check_true( (ref_type===THIS_REFERENCE))) {
                                 return ref_type
                            } else if (check_true( ((comps && comps.length)===0))) {
                                 return ref_type
                            } else if (check_true( (((comps && comps.length)===1)&&(ref_type instanceof Object)&&await contains_ques_((comps && comps["0"]),await (await Environment.get_global("object_methods"))(ref_type))))) {
                                 return ref_type[(comps && comps["0"])]
                            } else if (check_true( (ref_type instanceof Object))) {
                                 return await (await Environment.get_global("resolve_path"))(comps,ref_type)
                            } else if (check_true( ((typeof ref_type==="object")&&await contains_ques_((comps && comps["0"]),await Object["keys"].call(Object,ref_type))))) {
                                await (async function(){
                                     let __test_condition__47=async function() {
                                         return  ((ref_type==undefined)||((comps && comps.length)>0))
                                    };
                                    let __body_ref__48=async function() {
                                         return  ref_type=ref_type[(comps).shift()]
                                    };
                                    let __BREAK__FLAG__=false;
                                    while(await __test_condition__47()) {
                                        await __body_ref__48();
                                         if(__BREAK__FLAG__) {
                                             break;
                                            
                                        }
                                    } ;
                                    
                                })();
                                 return  ref_type
                            } else  {
                                await (async function(){
                                    let __array_op_rval__49=get_lisp_ctx_log;
                                     if (__array_op_rval__49 instanceof Function){
                                        return await __array_op_rval__49("symbol not found: ",name,ref_name,ref_type,cannot_be_js_global) 
                                    } else {
                                        return[__array_op_rval__49,"symbol not found: ",name,ref_name,ref_type,cannot_be_js_global]
                                    }
                                })();
                                 return  undefined
                            }
                        } ()
                    }
                };
                get_val=async function(token,ctx) {
                     return  await async function(){
                        if (check_true((token && token["ref"]))) {
                            let comps=((token && token.name)).split(".");
                            ;
                            if (check_true (await verbosity(ctx))){
                                 console.log("get_val: reference: ",await (await Environment.get_global("safe_access"))(token,ctx,sanitize_js_ref_name))
                            };
                            let ref_name=await (async function () {
                                 if (check_true (((await safety_level(ctx)>1)&&((comps && comps.length)>1)))){
                                      return await (await Environment.get_global("safe_access"))(token,ctx,sanitize_js_ref_name)
                                } else {
                                      return await sanitize_js_ref_name(await (await Environment.get_global("expand_dot_accessor"))((token && token.name),ctx))
                                } 
                            })();
                            ;
                             return  await async function(){
                                if (check_true( (await get_ctx(ctx,"__IN_QUOTEM__")&&await not(await get_ctx(ctx,"__IN_LAMBDA__"))))) {
                                     return await get_ctx(ctx,ref_name)
                                } else if (check_true( (false&&await get_ctx(ctx,"__IN_QUOTEM__")&&await get_ctx(ctx,"__IN_LAMBDA__")))) {
                                     return ("await ctx_access(\""+ref_name+"\")")
                                } else  {
                                     return ref_name
                                }
                            } ()
                        } else  {
                             return (token && token["val"])
                        }
                    } ()
                };
                has_lisp_globals=false;
                root_ctx=await new_ctx(((opts && opts["ctx"])));
                tokenize_object=async function(obj,ctx,_path) {
                    _path=(_path||[]);
                    if (check_true ((await JSON.stringify(obj)==="{}"))){
                         return  {
                            type:"object",ref:false,val:"{}",name:"{}",__token__:true,path:_path
                        }
                    } else {
                          return await (async function() {
                            let __for_body__52=async function(pset) {
                                 return  {
                                    type:"keyval",val:await tokenize(pset,ctx,"path:",await add(_path,(pset && pset["0"]))),ref:false,name:(""+await (await Environment.get_global("as_lisp"))((pset && pset["0"]))),__token__:true
                                }
                            };
                            let __array__53=[],__elements__51=await (await Environment.get_global("pairs"))(obj);
                            let __BREAK__FLAG__=false;
                            for(let __iter__50 in __elements__51) {
                                __array__53.push(await __for_body__52(__elements__51[__iter__50]));
                                if(__BREAK__FLAG__) {
                                     __array__53.pop();
                                    break;
                                    
                                }
                            }return __array__53;
                             
                        })()
                    }
                };
                tokenize_quote=async function(args,_path) {
                     return  await async function(){
                        if (check_true( ((args && args["0"])==="=:quote"))) {
                             return {
                                type:"arr",__token__:true,source:await (await Environment.get_global("as_lisp"))(args),val:await (await Environment.get_global("conj"))([{
                                    type:"special",val:"=:quote",ref:true,name:"quote",__token__:true
                                }],await args["slice"].call(args,1)),ref:((args instanceof String || typeof args==='string')&&(await length(args)>2)&&await starts_with_ques_("=:",args)),name:null,path:_path
                            }
                        } else if (check_true( ((args && args["0"])==="=:quotem"))) {
                             return {
                                type:"arr",__token__:true,source:await (await Environment.get_global("as_lisp"))(args),val:await (await Environment.get_global("conj"))([{
                                    type:"special",path:await (await Environment.get_global("conj"))(_path,[0]),val:"=:quotem",ref:true,name:"quotem",__token__:true
                                }],await args["slice"].call(args,1)),ref:((args instanceof String || typeof args==='string')&&(await length(args)>2)&&await starts_with_ques_("=:",args)),name:null,path:_path
                            }
                        } else  {
                             return {
                                type:"arr",__token__:true,source:await (await Environment.get_global("as_lisp"))(args),val:await (await Environment.get_global("conj"))([{
                                    type:"special",val:"=:quotel",ref:true,name:"quotel",__token__:true
                                }],await args["slice"].call(args,1)),ref:((args instanceof String || typeof args==='string')&&(await length(args)>2)&&await starts_with_ques_("=:",args)),name:null,path:_path
                            }
                        }
                    } ()
                };
                tokenize=async function(args,ctx,_path,_suppress_comptime_eval) {
                    let argtype;
                    let rval;
                    let qval;
                    let idx;
                    let tobject;
                    let argdetails;
                    let argvalue;
                    let is_ref;
                    argtype=null;
                    rval=null;
                    ctx=ctx;
                    _path=(_path||[]);
                    qval=null;
                    idx=-1;
                    tobject=null;
                    argdetails=null;
                    argvalue=null;
                    is_ref=null;
                    ;
                    if (check_true ((null==ctx))){
                        await console.error("tokenize: nil ctx passed: ",await clone(args));
                        throw new ReferenceError("nil/undefined ctx passed to tokenize");
                        
                    };
                    if (check_true (((args instanceof Array)&&await not(_suppress_comptime_eval)))){
                        args=await compile_time_eval(ctx,args,_path);
                         await async function(){
                            if (check_true( ((_path && _path.length)>1))) {
                                tobject=await (await Environment.get_global("resolve_path"))(await (await Environment.get_global("chop"))(_path),expanded_tree);
                                if (check_true (tobject)){
                                     await async function(){
                                        tobject[await last(_path)]=args;
                                        return tobject;
                                        
                                    }()
                                }
                            } else if (check_true( ((_path && _path.length)===1))) {
                                 await async function(){
                                    expanded_tree[await first(_path)]=args;
                                    return expanded_tree;
                                    
                                }()
                            } else  {
                                 return expanded_tree=args
                            }
                        } ()
                    };
                     return  await async function(){
                        if (check_true( ((args instanceof String || typeof args==='string')||await is_number_ques_(args)||((args===true)||(args===false))))) {
                             return await first(await tokenize([args],ctx,_path,true))
                        } else if (check_true( ((args instanceof Array)&&(((args && args["0"])==="=:quotem")||((args && args["0"])==="=:quote")||((args && args["0"])==="=:quotel"))))) {
                            rval=await tokenize_quote(args,_path);
                             return  rval
                        } else if (check_true( ((args instanceof Array)&&await not(await get_ctx_val(ctx,"__IN_LAMBDA__"))&&((args && args["0"])==="=:iprogn")))) {
                            rval=await compile_toplevel(args,ctx);
                             return  await tokenize(rval,ctx,_path)
                        } else if (check_true( (await not((args instanceof Array))&&(args instanceof Object)))) {
                             return await first(await tokenize([args],ctx,await add(_path,0)))
                        } else  {
                            if (check_true ((((args && args["0"])==="=:fn")||((args && args["0"])==="=:function")||((args && args["0"])==="=:=>")))){
                                ctx=await new_ctx(ctx);
                                 await set_ctx(ctx,"__IN_LAMBDA__",true)
                            };
                             return  await (async function() {
                                let __for_body__58=async function(arg) {
                                    idx+=1;
                                    argdetails=await find_in_context(ctx,arg);
                                    argvalue=(argdetails && argdetails["val"]);
                                    argtype=(argdetails && argdetails["type"]);
                                    is_ref=(argdetails && argdetails["ref"]);
                                     return  await async function(){
                                        if (check_true( (await sub_type(arg)==="array"))) {
                                             return {
                                                type:"arr",__token__:true,val:await tokenize(arg,ctx,await add(_path,idx)),ref:is_ref,name:null,path:await add(_path,idx)
                                            }
                                        } else if (check_true( (argtype==="Function"))) {
                                             return {
                                                type:"fun",__token__:true,val:arg,ref:is_ref,name:(""+await (await Environment.get_global("as_lisp"))(arg)),path:await add(_path,idx)
                                            }
                                        } else if (check_true( (argtype==="AsyncFunction"))) {
                                             return {
                                                type:"asf",__token__:true,val:arg,ref:is_ref,name:(""+await (await Environment.get_global("as_lisp"))(arg)),path:await add(_path,idx)
                                            }
                                        } else if (check_true( (argtype==="array"))) {
                                             return {
                                                type:"array",__token__:true,val:arg,ref:is_ref,name:(""+await (await Environment.get_global("as_lisp"))(arg)),path:await add(_path,idx)
                                            }
                                        } else if (check_true( (argtype==="Number"))) {
                                             return {
                                                type:"num",__token__:true,val:argvalue,ref:is_ref,name:(""+await (await Environment.get_global("as_lisp"))(arg)),path:await add(_path,idx)
                                            }
                                        } else if (check_true( ((argtype==="String")&&is_ref))) {
                                             return {
                                                type:"arg",__token__:true,val:argvalue,ref:is_ref,name:await clean_quoted_reference((""+await (await Environment.get_global("as_lisp"))(arg))),global:(argdetails && argdetails["global"]),local:(argdetails && argdetails["local"]),path:await add(_path,idx)
                                            }
                                        } else if (check_true( (argtype==="String"))) {
                                             return {
                                                type:"literal",__token__:true,val:argvalue,ref:is_ref,name:await clean_quoted_reference((""+await (await Environment.get_global("as_lisp"))(arg))),global:(argdetails && argdetails["global"]),path:await add(_path,idx)
                                            }
                                        } else if (check_true( (arg instanceof Object))) {
                                             return  {
                                                type:"objlit",__token__:true,val:await tokenize_object(arg,ctx,await add(_path,idx)),ref:is_ref,name:null,path:await add(_path,idx)
                                            }
                                        } else if (check_true( ((argtype==="literal")&&is_ref&&((""+await (await Environment.get_global("as_lisp"))(arg))==="nil")))) {
                                             return {
                                                type:"null",__token__:true,val:null,ref:true,name:"null",path:await add(_path,idx)
                                            }
                                        } else if (check_true( ((argtype==="unbound")&&is_ref&&(null==argvalue)))) {
                                             return {
                                                type:"arg",__token__:true,val:arg,ref:true,name:await clean_quoted_reference((""+await (await Environment.get_global("as_lisp"))(arg))),path:await add(_path,idx)
                                            }
                                        } else if (check_true( ((argtype==="unbound")&&is_ref))) {
                                             return {
                                                type:await sub_type(argvalue),__token__:true,val:argvalue,ref:true,name:await clean_quoted_reference(await sanitize_js_ref_name((""+await (await Environment.get_global("as_lisp"))(arg)))),path:await add(_path,idx)
                                            }
                                        } else  {
                                             return {
                                                type:argtype,__token__:true,val:argvalue,ref:is_ref,name:await clean_quoted_reference((""+await (await Environment.get_global("as_lisp"))(arg))),global:(argdetails && argdetails["global"]),local:(argdetails && argdetails["local"]),path:await add(_path,idx)
                                            }
                                        }
                                    } ()
                                };
                                let __array__59=[],__elements__57=args;
                                let __BREAK__FLAG__=false;
                                for(let __iter__56 in __elements__57) {
                                    __array__59.push(await __for_body__58(__elements__57[__iter__56]));
                                    if(__BREAK__FLAG__) {
                                         __array__59.pop();
                                        break;
                                        
                                    }
                                }return __array__59;
                                 
                            })()
                        }
                    } ()
                };
                comp_time_log=await defclog({
                    prefix:"compile_time_eval",background:"#C0C0C0",color:"darkblue"
                });
                compile_time_eval=async function(ctx,lisp_tree,path) {
                    if (check_true (((lisp_tree instanceof Array)&&(((lisp_tree && lisp_tree["0"]) instanceof String || typeof (lisp_tree && lisp_tree["0"])==='string')&&(await length((lisp_tree && lisp_tree["0"]))>2)&&await starts_with_ques_("=:",(lisp_tree && lisp_tree["0"])))&&await (async function ()  {
                        let it;
                        it=await Environment["symbol_definition"].call(Environment,await (lisp_tree && lisp_tree["0"])["substr"].call((lisp_tree && lisp_tree["0"]),2));
                        if (check_true (it)){
                              return await (await Environment.get_global("resolve_path"))(["eval_when","compile_time"],it)
                        } else {
                              return 
                        }
                    } )()))){
                        let ntree;
                        let precompile_function;
                        ntree=null;
                        precompile_function=await Environment["get_global"].call(Environment,await (lisp_tree && lisp_tree["0"])["substr"].call((lisp_tree && lisp_tree["0"]),2));
                        if (check_true (await verbosity(ctx))){
                             (comp_time_log)(path,"->",await (lisp_tree && lisp_tree["0"])["substr"].call((lisp_tree && lisp_tree["0"]),2),lisp_tree,"to function: ",await lisp_tree["slice"].call(lisp_tree,1))
                        };
                        await (async function(){
                            try /* TRY SIMPLE */ {
                                  return ntree=await (async function(){
                                    let __apply_args__61=await lisp_tree["slice"].call(lisp_tree,1);
                                    return ( precompile_function).apply(this,__apply_args__61)
                                })() 
                            } catch(__exception__60) {
                                  if (__exception__60 instanceof Error) {
                                     let e=__exception__60;
                                     {
                                        await async function(){
                                            e["handled"]=true;
                                            return e;
                                            
                                        }();
                                        (errors).push({
                                            error:(e && e.name),message:(e && e.message),source_name:source_name,precompilation:true,form:lisp_tree,parent_forms:[],invalid:true,stack:(e && e.stack)
                                        });
                                        throw e;
                                        
                                    }
                                } 
                            }
                        })();
                        if (check_true ((null==ntree))){
                             (warnings).push(("compile time function "+await (lisp_tree && lisp_tree["0"])["substr"].call((lisp_tree && lisp_tree["0"]),2)+" returned nil"))
                        } else {
                            ntree=await do_deferred_splice(ntree);
                            if (check_true (await not((await JSON.stringify(ntree)===await JSON.stringify(lisp_tree))))){
                                 ntree=await compile_time_eval(ctx,ntree,path)
                            };
                            if (check_true (await verbosity(ctx))){
                                 (comp_time_log)(await (lisp_tree && lisp_tree["0"])["substr"].call((lisp_tree && lisp_tree["0"]),2),"<- lisp: ",await (await Environment.get_global("as_lisp"))(ntree))
                            }
                        };
                         return  ntree
                    } else {
                          return lisp_tree
                    }
                };
                infix_ops=async function(tokens,ctx,opts) {
                    let op_translation;
                    let math_op_a;
                    let math_op;
                    let idx;
                    let stmts;
                    let declaration;
                    let symbol_ctx_val;
                    let is_overloaded;
                    let token;
                    let add_operand;
                    let acc;
                    op_translation={
                        or:"||",and:"&&"
                    };
                    ctx=await new_ctx(ctx);
                    math_op_a=await (async function(){
                        let __targ__64=await first(tokens);
                        if (__targ__64){
                             return(__targ__64)["name"]
                        } 
                    })();
                    math_op=(op_translation[math_op_a]||math_op_a);
                    idx=0;
                    stmts=null;
                    declaration=await (async function () {
                         if (check_true (((tokens && tokens["1"] && tokens["1"]["name"]) instanceof String || typeof (tokens && tokens["1"] && tokens["1"]["name"])==='string'))){
                              return await get_declarations(ctx,(tokens && tokens["1"] && tokens["1"]["name"]),await not((tokens && tokens["1"] && tokens["1"]["ref"])))
                        } else {
                              return null
                        } 
                    })();
                    symbol_ctx_val=await (async function () {
                         if (check_true (((tokens && tokens["1"] && tokens["1"]["ref"])&&((tokens && tokens["1"] && tokens["1"]["name"]) instanceof String || typeof (tokens && tokens["1"] && tokens["1"]["name"])==='string')))){
                              return await get_ctx_val(ctx,(tokens && tokens["1"] && tokens["1"]["name"]))
                        } 
                    })();
                    is_overloaded=false;
                    token=null;
                    add_operand=async function() {
                        if (check_true (((idx>1)&&(idx<((tokens && tokens.length)-0))))){
                             return  (acc).push(math_op)
                        }
                    };
                    acc=[{
                        ctype:"expression"
                    }];
                    await set_ctx(ctx,"__COMP_INFIX_OPS__",true);
                    if (check_true (((symbol_ctx_val instanceof Array)&&(symbol_ctx_val && symbol_ctx_val["0"] && symbol_ctx_val["0"]["ctype"])))){
                         symbol_ctx_val=(symbol_ctx_val && symbol_ctx_val["0"] && symbol_ctx_val["0"]["ctype"])
                    };
                    if (check_true (((((declaration && declaration["type"])===Array)||((declaration && declaration["type"])===Object)||(symbol_ctx_val==="objliteral")||(symbol_ctx_val===Expression)||(symbol_ctx_val===ArgumentType)||((tokens && tokens["1"] && tokens["1"]["type"])==="objlit")||((tokens && tokens["1"] && tokens["1"]["type"])==="arr"))&&(math_op==="+")))){
                         is_overloaded=true
                    };
                    if (check_true (is_overloaded)){
                        await async function(){
                            tokens[0]={
                                type:"function",val:await add("=:","add"),name:"add",ref:true
                            };
                            return tokens;
                            
                        }();
                        stmts=await compile(tokens,ctx);
                        stmts=await wrap_assignment_value(stmts,ctx);
                         return  stmts
                    } else {
                        (acc).push("(");
                        await (async function(){
                             let __test_condition__66=async function() {
                                 return  (idx<((tokens && tokens.length)-1))
                            };
                            let __body_ref__67=async function() {
                                idx+=1;
                                token=tokens[idx];
                                await add_operand();
                                 return  (acc).push(await wrap_assignment_value(await compile(token,ctx),ctx))
                            };
                            let __BREAK__FLAG__=false;
                            while(await __test_condition__66()) {
                                await __body_ref__67();
                                 if(__BREAK__FLAG__) {
                                     break;
                                    
                                }
                            } ;
                            
                        })();
                        (acc).push(")");
                         return  acc
                    }
                };
                compile_set_prop=async function(tokens,ctx) {
                    let acc;
                    let wrapper;
                    let stmt;
                    let preamble;
                    let token;
                    let complicated;
                    let target;
                    let target_reference;
                    let idx;
                    acc=[];
                    wrapper=[];
                    stmt=null;
                    preamble=await calling_preamble(ctx);
                    token=await second(tokens);
                    complicated=await (async function(){
                        let __array_op_rval__68=is_complex_ques_;
                         if (__array_op_rval__68 instanceof Function){
                            return await __array_op_rval__68((token && token["val"])) 
                        } else {
                            return[__array_op_rval__68,(token && token["val"])]
                        }
                    })();
                    target=await (async function () {
                         if (check_true (complicated)){
                              return await compile_wrapper_fn((token && token["val"]),ctx)
                        } else {
                              return await compile(token,ctx)
                        } 
                    })();
                    target_reference=await gen_temp_name("target_obj");
                    idx=1;
                    ;
                    await (async function() {
                        let __for_body__71=async function(t) {
                             return  (wrapper).push(t)
                        };
                        let __array__72=[],__elements__70=[(preamble && preamble["0"])," ",(preamble && preamble["1"])," ",(preamble && preamble["3"]),"function","()","{"];
                        let __BREAK__FLAG__=false;
                        for(let __iter__69 in __elements__70) {
                            __array__72.push(await __for_body__71(__elements__70[__iter__69]));
                            if(__BREAK__FLAG__) {
                                 __array__72.pop();
                                break;
                                
                            }
                        }return __array__72;
                         
                    })();
                    if (check_true (await not((target instanceof String || typeof target==='string')))){
                         await (async function() {
                            let __for_body__75=async function(t) {
                                 return  (wrapper).push(t)
                            };
                            let __array__76=[],__elements__74=["let"," ",target_reference,"=",target,";"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__73 in __elements__74) {
                                __array__76.push(await __for_body__75(__elements__74[__iter__73]));
                                if(__BREAK__FLAG__) {
                                     __array__76.pop();
                                    break;
                                    
                                }
                            }return __array__76;
                             
                        })()
                    } else {
                         target_reference=target
                    };
                    await (async function(){
                         let __test_condition__77=async function() {
                             return  (idx<((tokens && tokens.length)-1))
                        };
                        let __body_ref__78=async function() {
                            idx+=1;
                            (acc).push(target_reference);
                            token=tokens[idx];
                            (acc).push("[");
                            stmt=await wrap_assignment_value(await compile(token,ctx),ctx);
                            (acc).push(stmt);
                            (acc).push("]");
                            idx+=1;
                            (acc).push("=");
                            token=tokens[idx];
                            if (check_true ((null==token)))throw new SyntaxError("set_prop: odd number of arguments");
                            ;
                            stmt=await wrap_assignment_value(await compile(token,ctx),ctx);
                            (acc).push(stmt);
                             return  (acc).push(";")
                        };
                        let __BREAK__FLAG__=false;
                        while(await __test_condition__77()) {
                            await __body_ref__78();
                             if(__BREAK__FLAG__) {
                                 break;
                                
                            }
                        } ;
                        
                    })();
                    (wrapper).push(acc);
                    (wrapper).push("return");
                    (wrapper).push(" ");
                    (wrapper).push(target_reference);
                    (wrapper).push(";");
                    (wrapper).push("}");
                    (wrapper).push((preamble && preamble["4"]));
                    (wrapper).push("()");
                     return  wrapper
                };
                compile_prop=async function(tokens,ctx) {
                    if (check_true (await not(((tokens && tokens.length)===3)))){
                        throw new SyntaxError("prop requires exactly 2 arguments");
                        
                    } else {
                        let acc;
                        let target;
                        let target_val;
                        let preamble;
                        let idx_key;
                        acc=[];
                        target=await wrap_assignment_value(await compile(await second(tokens),ctx),ctx);
                        target_val=null;
                        preamble=await calling_preamble(ctx);
                        idx_key=await wrap_assignment_value(await compile(tokens[2],ctx),ctx);
                        ;
                        if (check_true ((await safety_level(ctx)>1))){
                              return await async function(){
                                if (check_true( (target instanceof String || typeof target==='string'))) {
                                     return  await (async function(){
                                        let __array_op_rval__79=target;
                                         if (__array_op_rval__79 instanceof Function){
                                            return await __array_op_rval__79("[",idx_key,"]") 
                                        } else {
                                            return[__array_op_rval__79,"[",idx_key,"]"]
                                        }
                                    })()
                                } else  {
                                    target_val=await gen_temp_name("targ");
                                     return  [(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()","{","let"," ",target_val,"=",target,";","if"," ","(",target_val,")","{"," ","return","(",target_val,")","[",idx_key,"]","}"," ","}",")","()"]
                                }
                            } ()
                        } else {
                              return ["(",target,")","[",idx_key,"]"]
                        }
                    }
                };
                compile_elem=async function(token,ctx) {
                    let rval;
                    let __check_needs_wrap__80= async function(){
                        return async function(stmts) {
                            let fst;
                            fst=(((stmts instanceof Array)&&await first(stmts)&&(await first(stmts) instanceof Object)&&await (async function(){
                                let __targ__81=await first(stmts);
                                if (__targ__81){
                                     return(__targ__81)["ctype"]
                                } 
                            })()&&await async function(){
                                if (check_true( (await (async function(){
                                    let __targ__82=await first(stmts);
                                    if (__targ__82){
                                         return(__targ__82)["ctype"]
                                    } 
                                })() instanceof String || typeof await (async function(){
                                    let __targ__82=await first(stmts);
                                    if (__targ__82){
                                         return(__targ__82)["ctype"]
                                    } 
                                })()==='string'))) {
                                     return await (async function(){
                                        let __targ__83=await first(stmts);
                                        if (__targ__83){
                                             return(__targ__83)["ctype"]
                                        } 
                                    })()
                                } else  {
                                     return await sub_type(await (async function(){
                                        let __targ__84=await first(stmts);
                                        if (__targ__84){
                                             return(__targ__84)["ctype"]
                                        } 
                                    })())
                                }
                            } ()));
                             return  await async function(){
                                if (check_true( await contains_ques_("block",fst))) {
                                     return true
                                } else  {
                                     return false
                                }
                            } ()
                        }
                    };
                    {
                        rval=null;
                        let check_needs_wrap=await __check_needs_wrap__80();
                        ;
                        if (check_true (await (async function(){
                            let __array_op_rval__85=is_complex_ques_;
                             if (__array_op_rval__85 instanceof Function){
                                return await __array_op_rval__85((token && token["val"])) 
                            } else {
                                return[__array_op_rval__85,(token && token["val"])]
                            }
                        })())){
                             rval=await compile_wrapper_fn(token,ctx)
                        } else {
                             rval=await compile(token,ctx)
                        };
                        if (check_true (await not((rval instanceof Array)))){
                             rval=await (async function(){
                                let __array_op_rval__86=rval;
                                 if (__array_op_rval__86 instanceof Function){
                                    return await __array_op_rval__86() 
                                } else {
                                    return[__array_op_rval__86]
                                }
                            })()
                        };
                         return  rval
                    }
                };
                inline_log=await (async function () {
                     if (check_true ((opts && opts["quiet_mode"]))){
                          return log
                    } else {
                          return await defclog({
                            prefix:"compile_inline:",background:"#404880",color:"white"
                        })
                    } 
                })();
                compile_inline=async function(tokens,ctx) {
                    let rval;
                    let stmt;
                    let inline_fn;
                    let has_literal_ques_;
                    let wrap_style;
                    let args;
                    rval=null;
                    stmt=null;
                    inline_fn=null;
                    has_literal_ques_=false;
                    wrap_style=0;
                    args=[];
                    await (async function() {
                        let __for_body__89=async function(token) {
                            stmt=await wrap_assignment_value(await compile(token,ctx),ctx);
                             return  (args).push(stmt)
                        };
                        let __array__90=[],__elements__88=await tokens["slice"].call(tokens,1);
                        let __BREAK__FLAG__=false;
                        for(let __iter__87 in __elements__88) {
                            __array__90.push(await __for_body__89(__elements__88[__iter__87]));
                            if(__BREAK__FLAG__) {
                                 __array__90.pop();
                                break;
                                
                            }
                        }return __array__90;
                         
                    })();
                    if (check_true (await verbosity())){
                         (inline_log)("args: ",args)
                    };
                    if (check_true (await (async function(){
                        let __targ__91=(Environment && Environment["inlines"]);
                        if (__targ__91){
                             return(__targ__91)[(tokens && tokens["0"] && tokens["0"]["name"])]
                        } 
                    })())){
                        inline_fn=await (async function(){
                            let __targ__92=(Environment && Environment["inlines"]);
                            if (__targ__92){
                                 return(__targ__92)[(tokens && tokens["0"] && tokens["0"]["name"])]
                            } 
                        })();
                         rval=await (async function(){
                            let __array_op_rval__93=inline_fn;
                             if (__array_op_rval__93 instanceof Function){
                                return await __array_op_rval__93(args,ctx) 
                            } else {
                                return[__array_op_rval__93,args,ctx]
                            }
                        })()
                    } else throw new ReferenceError(("no source for named lib function "+(tokens && tokens["0"] && tokens["0"]["name"])));
                    ;
                     return  rval
                };
                compile_push=async function(tokens,ctx) {
                    let acc;
                    let place;
                    let thing;
                    acc=[];
                    place=await compile_elem((tokens && tokens["1"]),ctx);
                    thing=await compile_elem((tokens && tokens["2"]),ctx);
                     return  await (async function(){
                        let __array_op_rval__94=place;
                         if (__array_op_rval__94 instanceof Function){
                            return await __array_op_rval__94(".push","(",thing,")") 
                        } else {
                            return[__array_op_rval__94,".push","(",thing,")"]
                        }
                    })()
                };
                compile_list=async function(tokens,ctx) {
                    let acc;
                    let compiled_values;
                    acc=["["];
                    compiled_values=[];
                    await (async function() {
                        let __for_body__97=async function(t) {
                             return  (compiled_values).push(await wrap_assignment_value(await compile(t,ctx),ctx))
                        };
                        let __array__98=[],__elements__96=await tokens["slice"].call(tokens,1);
                        let __BREAK__FLAG__=false;
                        for(let __iter__95 in __elements__96) {
                            __array__98.push(await __for_body__97(__elements__96[__iter__95]));
                            if(__BREAK__FLAG__) {
                                 __array__98.pop();
                                break;
                                
                            }
                        }return __array__98;
                         
                    })();
                    await push_as_arg_list(acc,compiled_values);
                    (acc).push("]");
                     return  acc
                };
                compile_typeof=async function(tokens,ctx) {
                    let local_details=await (async function () {
                         if (check_true ((tokens && tokens["1"] && tokens["1"]["ref"]))){
                              return await get_ctx_val(ctx,(tokens && tokens["1"] && tokens["1"]["name"]))
                        } else {
                              return null
                        } 
                    })();
                    ;
                    if (check_true (((tokens && tokens["1"] && tokens["1"]["ref"])&&local_details))){
                          return ["typeof"," ",await compile((tokens && tokens["1"]),ctx)]
                    } else {
                          return ["typeof"," ",await compile_elem((tokens && tokens["1"]),ctx)]
                    }
                };
                compile_instanceof=async function(tokens,ctx) {
                    let acc;
                    acc=[];
                    if (check_true (((tokens instanceof Array)&&((tokens && tokens.length)===3)))){
                        let __array_arg__101=(async function() {
                            if (check_true (await (async function(){
                                let __array_op_rval__99=is_complex_ques_;
                                 if (__array_op_rval__99 instanceof Function){
                                    return await __array_op_rval__99((tokens && tokens["1"])) 
                                } else {
                                    return[__array_op_rval__99,(tokens && tokens["1"])]
                                }
                            })())){
                                  return await compile_wrapper_fn((tokens && tokens["1"]),ctx)
                            } else {
                                  return await compile((tokens && tokens["1"]),ctx)
                            }
                        } );
                        let __array_arg__102=(async function() {
                            if (check_true (await (async function(){
                                let __array_op_rval__100=is_complex_ques_;
                                 if (__array_op_rval__100 instanceof Function){
                                    return await __array_op_rval__100((tokens && tokens["1"])) 
                                } else {
                                    return[__array_op_rval__100,(tokens && tokens["1"])]
                                }
                            })())){
                                  return await compile_wrapper_fn((tokens && tokens["2"]),ctx)
                            } else {
                                  return await compile((tokens && tokens["2"]),ctx)
                            }
                        } );
                        return ["(",await __array_arg__101()," ","instanceof"," ",await __array_arg__102(),")"]
                    } else throw new SyntaxError("instanceof requires 2 arguments");
                    
                };
                compile_compare=async function(tokens,ctx) {
                    let acc;
                    let ops;
                    let __operator__103= async function(){
                        return ops[await (async function(){
                            let __targ__105=await first(tokens);
                            if (__targ__105){
                                 return(__targ__105)["name"]
                            } 
                        })()]
                    };
                    let left;
                    let right;
                    {
                        acc=[{
                            ctype:"expression"
                        }];
                        ctx=await new_ctx(ctx);
                        ops=await ( async function(){
                            let __obj__104=new Object();
                            __obj__104["eq"]="==";
                            __obj__104["=="]="===";
                            __obj__104["<"]="<";
                            __obj__104[">"]=">";
                            __obj__104["gt"]=">";
                            __obj__104["lt"]="<";
                            __obj__104["<="]="<=";
                            __obj__104[">="]=">=";
                            return __obj__104;
                            
                        })();
                        let operator=await __operator__103();
                        ;
                        left=tokens[1];
                        right=tokens[2];
                        await set_ctx(ctx,"__COMP_INFIX_OPS__",true);
                        (acc).push("(");
                        (acc).push(await compile(left,ctx));
                        (acc).push(operator);
                        (acc).push(await compile(right,ctx));
                        (acc).push(")");
                         return  acc
                    }
                };
                compile_assignment=async function(tokens,ctx) {
                    let acc;
                    let assignment_operator;
                    let token;
                    let assignment_value;
                    let assignment_type;
                    let wrap_as_function_ques_;
                    let preamble;
                    let target;
                    let target_details;
                    let target_location_compile_time;
                    acc=[];
                    assignment_operator=await (async function(){
                        let __targ__106=await first(tokens);
                        if (__targ__106){
                             return(__targ__106)["name"]
                        } 
                    })();
                    token=await second(tokens);
                    assignment_value=null;
                    assignment_type=null;
                    wrap_as_function_ques_=null;
                    preamble=await calling_preamble(ctx);
                    target=await sanitize_js_ref_name(await async function(){
                        if (check_true((token && token["ref"]))) {
                             return (token && token["name"])
                        } else  {
                             throw new SyntaxError(("assignment: invalid target: "+(token && token["name"])));
                            
                        }
                    } ());
                    target_details=await get_declaration_details(ctx,target);
                    target_location_compile_time=await async function(){
                        if (check_true((target_details && target_details["is_argument"]))) {
                             return "local"
                        } else if (check_true((target_details && target_details["declared_global"]))) {
                             return "global"
                        } else  {
                             return "local"
                        }
                    } ();
                    ;
                    await (await Environment.get_global("compiler_syntax_validation"))("compile_assignment",tokens,errors,ctx,expanded_tree);
                    await unset_ambiguous(ctx,target);
                    await async function(){
                        ctx["in_assignment"]=true;
                        return ctx;
                        
                    }();
                    assignment_value=await compile((tokens && tokens["2"]),ctx);
                    if (check_true (((assignment_value instanceof Array)&&((assignment_value && assignment_value["0"]) instanceof Object)&&(assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])))){
                         assignment_type=await map_ctype_to_value((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"]),assignment_value)
                    } else {
                        await set_ambiguous(ctx,target);
                         assignment_type=UnknownType
                    };
                    assignment_value=await wrap_assignment_value(assignment_value,ctx);
                    if (check_true ((target_location_compile_time==="local"))){
                        await set_ctx(ctx,target,assignment_type);
                        (acc).push(target);
                        (acc).push("=");
                         (acc).push(assignment_value)
                    } else {
                         await (async function() {
                            let __for_body__110=async function(t) {
                                 return  (acc).push(t)
                            };
                            let __array__111=[],__elements__109=[{
                                ctype:"statement"
                            },(preamble && preamble["0"])," ","Environment",".","set_global","(","\"",target,"\"",",",assignment_value,")"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__108 in __elements__109) {
                                __array__111.push(await __for_body__110(__elements__109[__iter__108]));
                                if(__BREAK__FLAG__) {
                                     __array__111.pop();
                                    break;
                                    
                                }
                            }return __array__111;
                             
                        })()
                    };
                    await async function(){
                        ctx["in_assignment"]=false;
                        return ctx;
                        
                    }();
                    if (check_true ((target_location_compile_time==="local"))){
                         await set_ctx(ctx,target,assignment_type)
                    };
                     return  acc
                };
                needs_return_ques_=async function(stmts,ctx) {
                    if (check_true ((await length(stmts)>0))){
                        let final_stmt;
                        let inst;
                        let clog;
                        let flattened;
                        final_stmt=await last(stmts);
                        inst=null;
                        clog=await (async function () {
                             if (check_true ((opts && opts["quiet_mode"]))){
                                  return log
                            } else {
                                  return await defclog({
                                    prefix:("needs_return ("+(ctx && ctx["block_id"])+")"),background:"#C0C0C0",color:"darkgreen"
                                })
                            } 
                        })();
                        flattened=null;
                         return  await async function(){
                            if (check_true( (null==final_stmt))) {
                                 return  false
                            } else if (check_true( (await not((final_stmt instanceof Array))&&await not(("}"===final_stmt))))) {
                                 return true
                            } else  {
                                flattened=await flatten(final_stmt);
                                await async function(){
                                    if (check_true( ((await first(flattened) instanceof Object)&&await (async function(){
                                        let __targ__113=await first(flattened);
                                        if (__targ__113){
                                             return(__targ__113)["ctype"]
                                        } 
                                    })()))) {
                                         return inst=await first(flattened)
                                    } else if (check_true( ((await first(flattened) instanceof String || typeof await first(flattened)==='string')&&await starts_with_ques_("/*",await first(flattened))&&(await second(flattened) instanceof Object)&&await (async function(){
                                        let __targ__114=await second(flattened);
                                        if (__targ__114){
                                             return(__targ__114)["ctype"]
                                        } 
                                    })()))) {
                                         return inst=await second(flattened)
                                    }
                                } ();
                                 return  await async function(){
                                    if (check_true( (inst&&((inst && inst["ctype"])==="objliteral")))) {
                                         return true
                                    } else if (check_true( (inst&&(((inst && inst["ctype"])==="ifblock")||((inst && inst["ctype"])==="letblock")||((inst && inst["ctype"])==="block")||((inst && inst["ctype"])==="assignment")||((inst && inst["ctype"])==="return"))))) {
                                         return false
                                    } else if (check_true( ((await first(flattened)==="{")))) {
                                         return false
                                    } else if (check_true( await contains_ques_(await first(flattened),["__BREAK__FLAG__","let","if","return","throw"]))) {
                                         return false
                                    } else if (check_true( (null==await first(flattened)))) {
                                         return false
                                    } else  {
                                         return  true
                                    }
                                } ()
                            }
                        } ()
                    } else {
                          return false
                    }
                };
                top_level_log=await defclog({
                    prefix:"top-level",color:"darkgreen",background:"#300010"
                });
                compile_toplevel=async function(lisp_tree,ctx,block_options) {
                    if (check_true (await get_ctx_val(ctx,"__IN_LAMBDA__")))throw new EvalError("Compiler attempt to compile top-level in lambda (most likely a bug)");
                     else {
                        {
                            let idx;
                            let rval;
                            let __tokens__115= async function(){
                                return null
                            };
                            let stmt;
                            let num_non_return_statements;
                            {
                                idx=0;
                                rval=null;
                                let tokens=await __tokens__115();
                                ;
                                stmt=null;
                                num_non_return_statements=(await length(lisp_tree)-2);
                                ctx=await (async function () {
                                     if (check_true ((block_options && block_options["no_scope_boundary"]))){
                                          return ctx
                                    } else {
                                          return await new_ctx(ctx)
                                    } 
                                })();
                                await (async function(){
                                     let __test_condition__116=async function() {
                                         return  (idx<num_non_return_statements)
                                    };
                                    let __body_ref__117=async function() {
                                        idx+=1;
                                        await set_ctx(ctx,"__TOP_LEVEL__",true);
                                        if (check_true (await verbosity(ctx))){
                                            await console.log("");
                                             (top_level_log)((""+idx+"/"+num_non_return_statements),"->",await (await Environment.get_global("as_lisp"))(lisp_tree[idx]))
                                        };
                                        tokens=await tokenize(lisp_tree[idx],ctx);
                                        stmt=await compile(tokens,ctx);
                                        rval=await wrap_and_run(stmt,ctx,{
                                            bind_mode:true
                                        });
                                        if (check_true (await verbosity(ctx))){
                                            (top_level_log)((""+idx+"/"+num_non_return_statements),"compiled <- ",await (await Environment.get_global("as_lisp"))(stmt));
                                             return  (top_level_log)((""+idx+"/"+num_non_return_statements),"<-",await (await Environment.get_global("as_lisp"))(rval))
                                        }
                                    };
                                    let __BREAK__FLAG__=false;
                                    while(await __test_condition__116()) {
                                        await __body_ref__117();
                                         if(__BREAK__FLAG__) {
                                             break;
                                            
                                        }
                                    } ;
                                    
                                })();
                                 return  lisp_tree[(idx+1)]
                            }
                        }
                    }
                };
                compile_block=async function(tokens,ctx,block_options) {
                    let acc;
                    let block_id;
                    let clog;
                    let token;
                    let last_stmt;
                    let is_first_level;
                    let return_last;
                    let stmt;
                    let stmt_ctype;
                    let lambda_block;
                    let stmts;
                    let idx;
                    acc=[];
                    block_id=(((block_options && block_options.name)&&await add((block_options && block_options.name),(blk_counter=blk_counter+1)))||(blk_counter=blk_counter+1));
                    clog=await (async function () {
                         if (check_true (quiet_mode)){
                              return log
                        } else {
                              return await defclog({
                                prefix:("compile_block ("+block_id+"):"),background:"#404080",color:"white"
                            })
                        } 
                    })();
                    ctx=await (async function () {
                         if (check_true ((block_options && block_options["no_scope_boundary"]))){
                              return ctx
                        } else {
                              return await new_ctx(ctx)
                        } 
                    })();
                    token=null;
                    last_stmt=null;
                    is_first_level=false;
                    return_last=(ctx && ctx["return_last_value"]);
                    stmt=null;
                    stmt_ctype=null;
                    lambda_block=false;
                    stmts=[];
                    idx=0;
                    if (check_true ((null==ctx))){
                        throw new ReferenceError("undefined ctx passed to compile block");
                        
                    };
                    if (check_true (needs_first_level)){
                        is_first_level=true;
                        await set_ctx(ctx,"has_first_level",true);
                         needs_first_level=false
                    };
                    if (check_true ((opts && opts["include_source"]))){
                        if (check_true (((tokens && tokens["path"])&&((tokens && tokens["path"] && tokens["path"]["length"])>0)))){
                             (acc).push(await source_comment(tokens))
                        }
                    };
                    await async function(){
                        ctx["block_id"]=block_id;
                        return ctx;
                        
                    }();
                    if (check_true ((await get_ctx_val(ctx,"__LAMBDA_STEP__")===-1))){
                        lambda_block=true;
                         await (await Environment.get_global("setf_ctx"))(ctx,"__LAMBDA_STEP__",((tokens && tokens.length)-1))
                    };
                    if (check_true (await not((block_options && block_options["no_scope_boundary"])))){
                         (acc).push("{")
                    };
                    if (check_true (is_first_level)){
                         (acc).push(first_level_setup)
                    };
                    await (async function(){
                         let __test_condition__119=async function() {
                             return  (idx<((tokens && tokens.length)-1))
                        };
                        let __body_ref__120=async function() {
                            idx+=1;
                            token=tokens[idx];
                            if (check_true ((idx===((tokens && tokens.length)-1)))){
                                 await async function(){
                                    ctx["final_block_statement"]=true;
                                    return ctx;
                                    
                                }()
                            };
                            await async function(){
                                ctx["block_step"]=((tokens && tokens.length)-1-idx);
                                return ctx;
                                
                            }();
                            if (check_true (lambda_block)){
                                 await set_ctx(ctx,"__LAMBDA_STEP__",((tokens && tokens.length)-1-idx))
                            };
                            if (check_true ((((token && token["type"])==="arr")&&((token && token["val"] && token["val"]["0"] && token["val"]["0"]["name"])==="return")))){
                                (stmts).push(await compile_return((token && token["val"]),ctx));
                                 stmt=[]
                            } else {
                                if (check_true ((((token && token["val"] && token["val"]["0"] && token["val"]["0"]["name"])==="declare")&&(block_options && block_options["ignore_declarations"])))){
                                     stmt={
                                        ignored:"declare"
                                    }
                                } else {
                                     stmt=await compile(token,ctx)
                                }
                            };
                            await async function(){
                                if (check_true( (((stmt && stmt["0"])===break_out)&&((stmt && stmt["1"])==="=")&&((stmt && stmt["2"])==="true")))) {
                                     return  true
                                } else  {
                                     return true
                                }
                            } ();
                            await (await Environment.get_global("assert"))(await not((stmt===undefined)),"compile_block: returned stmt is undefined");
                            stmt_ctype=(((ctx && ctx["block_step"])>0)&&(await first(stmt) instanceof Object)&&await (async function(){
                                let __targ__123=await first(stmt);
                                if (__targ__123){
                                     return(__targ__123)["ctype"]
                                } 
                            })());
                            await async function(){
                                if (check_true( (stmt_ctype==="no_return"))) {
                                     return (stmts).push(stmt)
                                } else if (check_true( (stmt_ctype==="AsyncFunction"))) {
                                    (stmts).push({
                                        mark:"block<-async"
                                    });
                                     return  (stmts).push(stmt)
                                } else if (check_true( (stmt_ctype==="block"))) {
                                     return  (stmts).push(await wrap_assignment_value(stmt,ctx))
                                } else  {
                                    (stmts).push({
                                        mark:"standard"
                                    });
                                     return  (stmts).push(stmt)
                                }
                            } ();
                            if (check_true ((idx<((tokens && tokens.length)-1)))){
                                 return  (stmts).push(";")
                            }
                        };
                        let __BREAK__FLAG__=false;
                        while(await __test_condition__119()) {
                            await __body_ref__120();
                             if(__BREAK__FLAG__) {
                                 break;
                                
                            }
                        } ;
                        
                    })();
                    await async function(){
                        if (check_true( (await not((block_options && block_options["suppress_return"]))&&await not((ctx && ctx["suppress_return"]))&&(await (async function(){
                            let __array_op_rval__124=needs_return_ques_;
                             if (__array_op_rval__124 instanceof Function){
                                return await __array_op_rval__124(stmts,ctx) 
                            } else {
                                return[__array_op_rval__124,stmts,ctx]
                            }
                        })()||((idx>1)&&await (async function(){
                            let __array_op_rval__125=needs_return_ques_;
                             if (__array_op_rval__125 instanceof Function){
                                return await __array_op_rval__125(stmts,ctx) 
                            } else {
                                return[__array_op_rval__125,stmts,ctx]
                            }
                        })()))))) {
                            last_stmt=(stmts).pop();
                            if (check_true (await not(((last_stmt && last_stmt["0"] && last_stmt["0"]["mark"])==="no_return")))){
                                (stmts).push({
                                    mark:"final-return",if_id:await get_ctx_val(ctx,"__IF_BLOCK__"),block_step:(ctx && ctx["block_step"]),lambda_step:await get_ctx_val(ctx,"__LAMBDA_STEP__")
                                });
                                 (stmts).push(" ")
                            };
                             return  (stmts).push(last_stmt)
                        } else if (check_true( (await (async function(){
                            let __array_op_rval__126=needs_return_ques_;
                             if (__array_op_rval__126 instanceof Function){
                                return await __array_op_rval__126(stmts,ctx) 
                            } else {
                                return[__array_op_rval__126,stmts,ctx]
                            }
                        })()||((idx>1)&&await (async function(){
                            let __array_op_rval__127=needs_return_ques_;
                             if (__array_op_rval__127 instanceof Function){
                                return await __array_op_rval__127(stmts,ctx) 
                            } else {
                                return[__array_op_rval__127,stmts,ctx]
                            }
                        })())))) {
                            last_stmt=(stmts).pop();
                            (stmts).push({
                                mark:"block-end",if_id:await get_ctx_val(ctx,"__IF_BLOCK__"),block_step:(ctx && ctx["block_step"]),lambda_step:await get_ctx_val(ctx,"__LAMBDA_STEP__")
                            });
                            (stmts).push(" ");
                             return  (stmts).push(last_stmt)
                        }
                    } ();
                    (acc).push(stmts);
                    if (check_true (await not((block_options && block_options["no_scope_boundary"])))){
                         (acc).push("}")
                    };
                    (acc).unshift({
                        ctype:"block"
                    });
                     return  acc
                };
                Expression=new Function("","{ return \"expression\" }");
                Statement=new Function("","{ return \"statement\" }");
                NumberType=new Function("","{ return \"number\" }");
                StringType=new Function("","{ return \"string\" }");
                NilType=new Function("","{ return \"nil\" }");
                UnknownType=new Function(""," { return \"unknown\"} ");
                ArgumentType=new Function(""," { return \"argument\" }");
                compile_defvar=async function(tokens,ctx,opts) {
                    let target;
                    let wrap_as_function_ques_;
                    let ctx_details;
                    let allocation_type;
                    let assignment_type;
                    let __check_needs_wrap__128= async function(){
                        return async function(stmts) {
                            let fst;
                            fst=(((stmts instanceof Array)&&await first(stmts)&&(await first(stmts) instanceof Object)&&await (async function(){
                                let __targ__129=await first(stmts);
                                if (__targ__129){
                                     return(__targ__129)["ctype"]
                                } 
                            })()&&await async function(){
                                if (check_true( (await (async function(){
                                    let __targ__130=await first(stmts);
                                    if (__targ__130){
                                         return(__targ__130)["ctype"]
                                    } 
                                })() instanceof String || typeof await (async function(){
                                    let __targ__130=await first(stmts);
                                    if (__targ__130){
                                         return(__targ__130)["ctype"]
                                    } 
                                })()==='string'))) {
                                     return await (async function(){
                                        let __targ__131=await first(stmts);
                                        if (__targ__131){
                                             return(__targ__131)["ctype"]
                                        } 
                                    })()
                                } else  {
                                     return await sub_type(await (async function(){
                                        let __targ__132=await first(stmts);
                                        if (__targ__132){
                                             return(__targ__132)["ctype"]
                                        } 
                                    })())
                                }
                            } ())||"");
                             return  await async function(){
                                if (check_true( await contains_ques_("block",fst))) {
                                     return true
                                } else  {
                                     return false
                                }
                            } ()
                        }
                    };
                    let assignment_value;
                    {
                        target=await clean_quoted_reference(await sanitize_js_ref_name((tokens && tokens["1"] && tokens["1"]["name"])));
                        wrap_as_function_ques_=null;
                        ctx_details=null;
                        allocation_type=await (async function () {
                             if (check_true ((opts && opts["constant"]))){
                                  return "const"
                            } else {
                                  return "let"
                            } 
                        })();
                        assignment_type=null;
                        let check_needs_wrap=await __check_needs_wrap__128();
                        ;
                        assignment_value=null;
                        assignment_value=await (async function ()  {
                             return  await compile((tokens && tokens["2"]),ctx)
                        } )();
                        ctx_details=await get_declaration_details(ctx,target);
                        assignment_type=await add(new Object(),ctx_details,await get_declarations(ctx,target));
                        await async function(){
                            if (check_true( ((assignment_value instanceof Array)&&((assignment_value && assignment_value["0"]) instanceof Object)&&(assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])))) {
                                await set_ctx(ctx,target,await map_ctype_to_value((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"]),assignment_value));
                                 return  assignment_value=await wrap_assignment_value(assignment_value,ctx)
                            } else if (check_true( (assignment_type && assignment_type["value"]) instanceof Function)) {
                                 return await set_ctx(ctx,target,(assignment_type && assignment_type["value"]))
                            } else  {
                                 return await set_ctx(ctx,target,assignment_value)
                            }
                        } ();
                        if (check_true ((ctx && ctx["defvar_eval"]))){
                            await (await Environment.get_global("delete_prop"))(ctx,"defvar_eval");
                             return  [{
                                ctype:"assignment"
                            },allocation_type," ",target,"=",assignment_value,"()",";"]
                        } else {
                            let __array_arg__133=(async function() {
                                if (check_true (((ctx_details && ctx_details["is_argument"])&&((ctx_details && ctx_details["levels_up"])===1)))){
                                      return ""
                                } else {
                                      return (allocation_type+" ")
                                }
                            } );
                            return [{
                                ctype:"assignment"
                            },await __array_arg__133(),"",target,"=",[assignment_value],";"]
                        }
                    }
                };
                get_declaration_details=async function(ctx,symname,_levels_up) {
                     return  await async function(){
                        if (check_true( (await (async function(){
                            let __targ__134=(ctx && ctx["scope"]);
                            if (__targ__134){
                                 return(__targ__134)[symname]
                            } 
                        })()&&ctx["lambda_scope"]))) {
                             return {
                                name:symname,is_argument:true,levels_up:(_levels_up||0),value:await (async function(){
                                    let __targ__135=(ctx && ctx["scope"]);
                                    if (__targ__135){
                                         return(__targ__135)[symname]
                                    } 
                                })(),declared_global:await (async function() {
                                    if (check_true (await (async function(){
                                        let __targ__136=(root_ctx && root_ctx["defined_lisp_globals"]);
                                        if (__targ__136){
                                             return(__targ__136)[symname]
                                        } 
                                    })())){
                                          return true
                                    } else {
                                          return false
                                    }
                                } )()
                            }
                        } else if (check_true( await (async function(){
                            let __targ__137=(ctx && ctx["scope"]);
                            if (__targ__137){
                                 return(__targ__137)[symname]
                            } 
                        })())) {
                             return {
                                name:symname,is_argument:false,levels_up:(_levels_up||0),value:await (async function(){
                                    let __targ__138=(ctx && ctx["scope"]);
                                    if (__targ__138){
                                         return(__targ__138)[symname]
                                    } 
                                })(),declarations:await get_declarations(ctx,symname),declared_global:await (async function() {
                                    if (check_true (await (async function(){
                                        let __targ__139=(root_ctx && root_ctx["defined_lisp_globals"]);
                                        if (__targ__139){
                                             return(__targ__139)[symname]
                                        } 
                                    })())){
                                          return true
                                    } else {
                                          return false
                                    }
                                } )()
                            }
                        } else if (check_true( ((ctx["parent"]==null)&&await (async function(){
                            let __targ__140=(root_ctx && root_ctx["defined_lisp_globals"]);
                            if (__targ__140){
                                 return(__targ__140)[symname]
                            } 
                        })()))) {
                             return {
                                name:symname,is_argument:false,levels_up:(_levels_up||0),value:await (async function(){
                                    let __targ__141=(ctx && ctx["scope"]);
                                    if (__targ__141){
                                         return(__targ__141)[symname]
                                    } 
                                })(),declarations:await get_declarations(ctx,symname),declared_global:true
                            }
                        } else if (check_true((ctx && ctx["parent"]))) {
                             return await get_declaration_details((ctx && ctx["parent"]),symname,((_levels_up&&await add(_levels_up,1))||1))
                        } else if (check_true( await not((NOT_FOUND_THING===await Environment["get_global"].call(Environment,symname,NOT_FOUND_THING))))) {
                             return {
                                name:symname,is_argument:false,levels_up:(_levels_up||0),value:await Environment["get_global"].call(Environment,symname),declared_global:true
                            }
                        }
                    } ()
                };
                wrap_assignment_value=async function(stmts,ctx) {
                    let fst;
                    let preamble;
                    fst=(""+(((stmts instanceof Array)&&await first(stmts)&&(await first(stmts) instanceof Object)&&await (async function(){
                        let __targ__142=await first(stmts);
                        if (__targ__142){
                             return(__targ__142)["ctype"]
                        } 
                    })()&&await async function(){
                        if (check_true( (await (async function(){
                            let __targ__143=await first(stmts);
                            if (__targ__143){
                                 return(__targ__143)["ctype"]
                            } 
                        })() instanceof String || typeof await (async function(){
                            let __targ__143=await first(stmts);
                            if (__targ__143){
                                 return(__targ__143)["ctype"]
                            } 
                        })()==='string'))) {
                             return await (async function(){
                                let __targ__144=await first(stmts);
                                if (__targ__144){
                                     return(__targ__144)["ctype"]
                                } 
                            })()
                        } else  {
                             return await sub_type(await (async function(){
                                let __targ__145=await first(stmts);
                                if (__targ__145){
                                     return(__targ__145)["ctype"]
                                } 
                            })())
                        }
                    } ())||""));
                    preamble=await calling_preamble(ctx);
                    ;
                     return  await async function(){
                        if (check_true( ("ifblock"===fst))) {
                             return [(preamble && preamble["2"]),{
                                mark:"wrap_assignment_value"
                            },(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function"," ","()"," ","{"," ",stmts," ","}",")","()"]
                        } else if (check_true( await contains_ques_("block",fst))) {
                             return [(preamble && preamble["2"]),{
                                mark:"wrap_assignment_value"
                            },(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function"," ","()"," "," ",stmts," ",")","()"]
                        } else  {
                             return stmts
                        }
                    } ()
                };
                clean_quoted_reference=async function(name) {
                     return  await async function(){
                        if (check_true( ((name instanceof String || typeof name==='string')&&await starts_with_ques_("\"",name)&&await (await Environment.get_global("ends_with?"))("\"",name)))) {
                             return await (async function() {
                                {
                                     let __call_target__=await name["substr"].call(name,1), __call_method__="substr";
                                    return await __call_target__[__call_method__].call(__call_target__,0,(await length(name)-2))
                                } 
                            })()
                        } else  {
                             return name
                        }
                    } ()
                };
                compile_let=async function(tokens,ctx) {
                    let acc;
                    let clog;
                    let token;
                    let declarations_handled;
                    let assignment_value;
                    let block_declarations;
                    let my_tokens;
                    let assignment_type;
                    let stmt;
                    let def_idx;
                    let redefinitions;
                    let need_sub_block;
                    let assignments;
                    let reference_name;
                    let shadowed_globals;
                    let alloc_set;
                    let is_first_level;
                    let sub_block_count;
                    let ctx_details;
                    let preamble;
                    let structure_validation_rules;
                    let validation_results;
                    let allocations;
                    let block;
                    let syntax_error;
                    let idx;
                    acc=[];
                    ctx=await new_ctx(ctx);
                    clog=await (async function () {
                         if (check_true (quiet_mode)){
                              return log
                        } else {
                              return await defclog({
                                prefix:("compile_let: "+((ctx && ctx["block_id"])||"")),background:"#B0A0F0",color:"black"
                            })
                        } 
                    })();
                    token=null;
                    declarations_handled=false;
                    assignment_value=null;
                    block_declarations=new Object();
                    my_tokens=tokens;
                    assignment_type=null;
                    stmt=null;
                    def_idx=null;
                    redefinitions=new Object();
                    need_sub_block=false;
                    assignments=new Object();
                    reference_name=null;
                    shadowed_globals=new Object();
                    alloc_set=null;
                    is_first_level=false;
                    sub_block_count=0;
                    ctx_details=null;
                    preamble=await calling_preamble(ctx);
                    structure_validation_rules=[[[1,"val"],[(await Environment.get_global("is_array?"))],"allocation section"],[[2],[async function(v) {
                         return  await not((v===undefined))
                    }],"block"]];
                    validation_results=null;
                    allocations=(tokens && tokens["1"] && tokens["1"]["val"]);
                    block=await tokens["slice"].call(tokens,2);
                    syntax_error=null;
                    idx=-1;
                    ;
                    await (await Environment.get_global("compiler_syntax_validation"))("compile_let",tokens,errors,ctx,expanded_tree);
                    await async function(){
                        ctx["return_last_value"]=true;
                        return ctx;
                        
                    }();
                    await set_ctx(ctx,"local_scope",true);
                    (acc).push("{");
                    sub_block_count+=1;
                    if (check_true (((block && block["0"] && block["0"]["val"] && block["0"]["val"]["0"] && block["0"]["val"]["0"]["name"])==="declare"))){
                        declarations_handled=true;
                         (acc).push(await compile_declare((block && block["0"] && block["0"]["val"]),ctx))
                    };
                    if (check_true (needs_first_level)){
                        is_first_level=true;
                        await set_ctx(ctx,"has_first_level",true);
                        needs_first_level=false;
                        if (check_true (is_first_level)){
                             (acc).push(first_level_setup)
                        }
                    };
                    await (async function(){
                         let __test_condition__147=async function() {
                             return  (idx<((allocations && allocations.length)-1))
                        };
                        let __body_ref__148=async function() {
                            idx+=1;
                            alloc_set=await (async function(){
                                let __targ__149=allocations[idx];
                                if (__targ__149){
                                     return(__targ__149)["val"]
                                } 
                            })();
                            reference_name=await clean_quoted_reference(await sanitize_js_ref_name((alloc_set && alloc_set["0"] && alloc_set["0"]["name"])));
                            ctx_details=await get_declaration_details(ctx,reference_name);
                            if (check_true (ctx_details)){
                                if (check_true ((await not((ctx_details && ctx_details["is_argument"]))&&((ctx_details && ctx_details["levels_up"])>1)))){
                                    need_sub_block=true;
                                    if (check_true (redefinitions[reference_name])){
                                         (redefinitions[reference_name]).push(await gen_temp_name(reference_name))
                                    } else {
                                         await async function(){
                                            redefinitions[reference_name]=[0,await gen_temp_name(reference_name)];
                                            return redefinitions;
                                            
                                        }()
                                    };
                                    if (check_true (((ctx_details && ctx_details["declared_global"])&&await not((ctx_details && ctx_details["is_argument"]))))){
                                         await async function(){
                                            shadowed_globals[(alloc_set && alloc_set["0"] && alloc_set["0"]["name"])]=true;
                                            return shadowed_globals;
                                            
                                        }()
                                    }
                                }
                            };
                            if (check_true (await not((ctx_details && ctx_details["is_argument"])))){
                                 return  await set_ctx(ctx,reference_name,AsyncFunction)
                            }
                        };
                        let __BREAK__FLAG__=false;
                        while(await __test_condition__147()) {
                            await __body_ref__148();
                             if(__BREAK__FLAG__) {
                                 break;
                                
                            }
                        } ;
                        
                    })();
                    idx=-1;
                    await (async function(){
                         let __test_condition__152=async function() {
                             return  (idx<((allocations && allocations.length)-1))
                        };
                        let __body_ref__153=async function() {
                            idx+=1;
                            stmt=[];
                            alloc_set=await (async function(){
                                let __targ__154=allocations[idx];
                                if (__targ__154){
                                     return(__targ__154)["val"]
                                } 
                            })();
                            reference_name=await clean_quoted_reference(await sanitize_js_ref_name((alloc_set && alloc_set["0"] && alloc_set["0"]["name"])));
                            if (check_true (("check_external_env"===reference_name))){
                                 debugger;
                                
                            };
                            ctx_details=await get_declaration_details(ctx,reference_name);
                            await async function(){
                                if (check_true( ((alloc_set && alloc_set["1"] && alloc_set["1"]["val"]) instanceof Array))) {
                                    await async function(){
                                        ctx["in_assignment"]=true;
                                        return ctx;
                                        
                                    }();
                                    assignment_value=await compile((alloc_set && alloc_set["1"]),ctx);
                                     return  await async function(){
                                        ctx["in_assignment"]=false;
                                        return ctx;
                                        
                                    }()
                                } else if (check_true( (((alloc_set && alloc_set["1"] && alloc_set["1"]["name"]) instanceof String || typeof (alloc_set && alloc_set["1"] && alloc_set["1"]["name"])==='string')&&await not((ctx_details && ctx_details["is_argument"]))&&(alloc_set && alloc_set["1"] && alloc_set["1"]["ref"])&&await not((await Environment["get_global"].call(Environment,(alloc_set && alloc_set["1"] && alloc_set["1"]["name"]),NOT_FOUND_THING)===NOT_FOUND_THING))&&shadowed_globals[(alloc_set && alloc_set["0"] && alloc_set["0"]["name"])]))) {
                                     return  assignment_value=[{
                                        ctype:(ctx_details && ctx_details["value"])
                                    },"await"," ",env_ref,"get_global","(","\"",(alloc_set && alloc_set["0"] && alloc_set["0"]["name"]),"\"",")"]
                                } else  {
                                    assignment_value=await compile((alloc_set && alloc_set["1"]),ctx);
                                    if (check_true (await verbosity(ctx))){
                                         return  (clog)("setting simple assignment value for",reference_name,": <- ",await clone(assignment_value))
                                    }
                                }
                            } ();
                            await async function(){
                                if (check_true( ((assignment_value instanceof Array)&&((assignment_value && assignment_value["0"]) instanceof Object)&&(assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])))) {
                                     return  await set_ctx(ctx,reference_name,await map_ctype_to_value((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"]),assignment_value))
                                } else if (check_true( ((assignment_value instanceof Array)&&((assignment_value && assignment_value["0"]) instanceof Array)&&(assignment_value && assignment_value["0"] && assignment_value["0"]["0"] && assignment_value["0"]["0"]["ctype"])))) {
                                     return  await set_ctx(ctx,reference_name,await map_ctype_to_value((assignment_value && assignment_value["0"] && assignment_value["0"]["0"] && assignment_value["0"]["0"]["ctype"]),assignment_value))
                                } else  {
                                     return  await set_ctx(ctx,reference_name,assignment_value)
                                }
                            } ();
                            assignment_value=await wrap_assignment_value(assignment_value,ctx);
                            if (check_true ((ctx_details && ctx_details["is_argument"]))){
                                 await async function(){
                                    block_declarations[reference_name]=true;
                                    return block_declarations;
                                    
                                }()
                            };
                            def_idx=null;
                            await async function(){
                                if (check_true( (redefinitions[reference_name]&&await first(redefinitions[reference_name])))) {
                                    def_idx=await first(redefinitions[reference_name]);
                                    def_idx+=1;
                                    await async function(){
                                        let __target_obj__158=redefinitions[reference_name];
                                        __target_obj__158[0]=def_idx;
                                        return __target_obj__158;
                                        
                                    }();
                                     return  await (async function() {
                                        let __for_body__161=async function(t) {
                                             return  (acc).push(t)
                                        };
                                        let __array__162=[],__elements__160=["let"," ",await (async function(){
                                            let __targ__163=redefinitions[reference_name];
                                            if (__targ__163){
                                                 return(__targ__163)[def_idx]
                                            } 
                                        })(),"="," ",(preamble && preamble["1"])," ","function","()","{","return"," ",assignment_value,"}",";"];
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__159 in __elements__160) {
                                            __array__162.push(await __for_body__161(__elements__160[__iter__159]));
                                            if(__BREAK__FLAG__) {
                                                 __array__162.pop();
                                                break;
                                                
                                            }
                                        }return __array__162;
                                         
                                    })()
                                } else if (check_true( await not(block_declarations[reference_name]))) {
                                    await (async function() {
                                        let __for_body__166=async function(t) {
                                             return  (acc).push(t)
                                        };
                                        let __array__167=[],__elements__165=["let"," ",reference_name,";"];
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__164 in __elements__165) {
                                            __array__167.push(await __for_body__166(__elements__165[__iter__164]));
                                            if(__BREAK__FLAG__) {
                                                 __array__167.pop();
                                                break;
                                                
                                            }
                                        }return __array__167;
                                         
                                    })();
                                     return  await async function(){
                                        block_declarations[reference_name]=true;
                                        return block_declarations;
                                        
                                    }()
                                }
                            } ();
                            if (check_true (await not(assignments[reference_name]))){
                                 await async function(){
                                    assignments[reference_name]=[];
                                    return assignments;
                                    
                                }()
                            };
                             return  (assignments[reference_name]).push(await (async function () {
                                 if (check_true (def_idx)){
                                      return [(preamble && preamble["0"])," ",await (async function(){
                                        let __targ__170=redefinitions[reference_name];
                                        if (__targ__170){
                                             return(__targ__170)[def_idx]
                                        } 
                                    })(),"()",";"]
                                } else {
                                      return assignment_value
                                } 
                            })())
                        };
                        let __BREAK__FLAG__=false;
                        while(await __test_condition__152()) {
                            await __body_ref__153();
                             if(__BREAK__FLAG__) {
                                 break;
                                
                            }
                        } ;
                        
                    })();
                    if (check_true (need_sub_block)){
                         await (async function() {
                            let __for_body__173=async function(pset) {
                                 return  await (async function() {
                                    let __for_body__177=async function(redef) {
                                         return  (redefinitions[(pset && pset["0"])]).shift()
                                    };
                                    let __array__178=[],__elements__176=(pset && pset["1"]);
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__175 in __elements__176) {
                                        __array__178.push(await __for_body__177(__elements__176[__iter__175]));
                                        if(__BREAK__FLAG__) {
                                             __array__178.pop();
                                            break;
                                            
                                        }
                                    }return __array__178;
                                     
                                })()
                            };
                            let __array__174=[],__elements__172=await (await Environment.get_global("pairs"))(redefinitions);
                            let __BREAK__FLAG__=false;
                            for(let __iter__171 in __elements__172) {
                                __array__174.push(await __for_body__173(__elements__172[__iter__171]));
                                if(__BREAK__FLAG__) {
                                     __array__174.pop();
                                    break;
                                    
                                }
                            }return __array__174;
                             
                        })()
                    };
                    if (check_true (need_sub_block)){
                        (acc).push("{");
                         sub_block_count+=1
                    };
                    idx=-1;
                    await (async function(){
                         let __test_condition__179=async function() {
                             return  (idx<((allocations && allocations.length)-1))
                        };
                        let __body_ref__180=async function() {
                            idx+=1;
                            def_idx=null;
                            stmt=[];
                            alloc_set=await (async function(){
                                let __targ__181=allocations[idx];
                                if (__targ__181){
                                     return(__targ__181)["val"]
                                } 
                            })();
                            reference_name=await clean_quoted_reference(await sanitize_js_ref_name((alloc_set && alloc_set["0"] && alloc_set["0"]["name"])));
                            ctx_details=await get_declaration_details(ctx,reference_name);
                            assignment_value=(assignments[reference_name]).shift();
                            await async function(){
                                if (check_true( block_declarations[reference_name])) {
                                     return true
                                } else  {
                                    (stmt).push("let");
                                     return  (stmt).push(" ")
                                }
                            } ();
                            (stmt).push(reference_name);
                            await async function(){
                                block_declarations[reference_name]=true;
                                return block_declarations;
                                
                            }();
                            (stmt).push("=");
                            (stmt).push(assignment_value);
                            (stmt).push(";");
                             return  (acc).push(stmt)
                        };
                        let __BREAK__FLAG__=false;
                        while(await __test_condition__179()) {
                            await __body_ref__180();
                             if(__BREAK__FLAG__) {
                                 break;
                                
                            }
                        } ;
                        
                    })();
                    (acc).push(await compile_block(await (await Environment.get_global("conj"))(["PLACEHOLDER"],block),ctx,{
                        no_scope_boundary:true,ignore_declarations:declarations_handled
                    }));
                    await (async function() {
                        let __for_body__185=async function(i) {
                             return  (acc).push("}")
                        };
                        let __array__186=[],__elements__184=await (await Environment.get_global("range"))(sub_block_count);
                        let __BREAK__FLAG__=false;
                        for(let __iter__183 in __elements__184) {
                            __array__186.push(await __for_body__185(__elements__184[__iter__183]));
                            if(__BREAK__FLAG__) {
                                 __array__186.pop();
                                break;
                                
                            }
                        }return __array__186;
                         
                    })();
                    if (check_true (((ctx && ctx["return_point"])===1))){
                          return acc
                    } else {
                        (acc).unshift({
                            ctype:"letblock"
                        });
                         return  acc
                    }
                };
                in_sync_ques_=async function(ctx) {
                     return  await get_ctx(ctx,"__SYNCF__")
                };
                await_ques_=async function(ctx) {
                    if (check_true (await (async function(){
                        let __array_op_rval__187=in_sync_ques_;
                         if (__array_op_rval__187 instanceof Function){
                            return await __array_op_rval__187(ctx) 
                        } else {
                            return[__array_op_rval__187,ctx]
                        }
                    })())){
                          return ""
                    } else {
                          return "await"
                    }
                };
                calling_preamble=async function(ctx) {
                    if (check_true (await (async function(){
                        let __array_op_rval__188=in_sync_ques_;
                         if (__array_op_rval__188 instanceof Function){
                            return await __array_op_rval__188(ctx) 
                        } else {
                            return[__array_op_rval__188,ctx]
                        }
                    })())){
                          return ["","",{
                            ctype:"Function"
                        },"(",")"]
                    } else {
                          return ["await","async",{
                            ctype:"AsyncFunction"
                        },"",""]
                    }
                };
                fn_log=await defclog({
                    prefix:"compile_fn",background:"black",color:"lightblue"
                });
                compile_fn=async function(tokens,ctx,fn_opts) {
                    let acc;
                    let idx;
                    let arg;
                    let fn_args;
                    let body;
                    let external_declarations;
                    let type_mark;
                    let nbody;
                    acc=[];
                    idx=-1;
                    arg=null;
                    ctx=await new_ctx(ctx);
                    fn_args=(tokens && tokens["1"] && tokens["1"]["val"]);
                    body=(tokens && tokens["2"]);
                    external_declarations=(tokens && tokens["3"]);
                    type_mark=null;
                    nbody=null;
                    await async function(){
                        ctx["return_last_value"]=true;
                        return ctx;
                        
                    }();
                    await async function(){
                        ctx["return_point"]=0;
                        return ctx;
                        
                    }();
                    await set_ctx(ctx,"__IN_LAMBDA__",true);
                    await set_ctx(ctx,"__LAMBDA_STEP__",-1);
                    await async function(){
                        ctx["lambda_scope"]=true;
                        return ctx;
                        
                    }();
                    await async function(){
                        ctx["suppress_return"]=false;
                        return ctx;
                        
                    }();
                    await async function(){
                        if (check_true((fn_opts && fn_opts["synchronous"]))) {
                            type_mark=await type_marker("Function");
                            await set_ctx(ctx,"__SYNCF__",true);
                             return  (acc).push(type_mark)
                        } else if (check_true((fn_opts && fn_opts["arrow"]))) {
                            type_mark=await type_marker("Function");
                             return  (acc).push(type_mark)
                        } else if (check_true((fn_opts && fn_opts["generator"]))) {
                            type_mark=await type_marker("GeneratorFunction");
                            (acc).push(type_mark);
                            (acc).push("async");
                             return  (acc).push(" ")
                        } else  {
                            type_mark=await type_marker("AsyncFunction");
                            (acc).push(type_mark);
                            (acc).push("async");
                             return  (acc).push(" ")
                        }
                    } ();
                    await async function(){
                        type_mark["args"]=[];
                        return type_mark;
                        
                    }();
                    await async function(){
                        if (check_true((fn_opts && fn_opts["arrow"]))) {
                             return false
                        } else if (check_true((fn_opts && fn_opts["generator"]))) {
                             return (acc).push("function*")
                        } else  {
                             return (acc).push("function")
                        }
                    } ();
                    (acc).push("(");
                    await (async function(){
                         let __test_condition__194=async function() {
                             return  (idx<((fn_args && fn_args.length)-1))
                        };
                        let __body_ref__195=async function() {
                            idx+=1;
                            arg=fn_args[idx];
                            if (check_true (((arg && arg.name)==="&"))){
                                idx+=1;
                                arg=fn_args[idx];
                                if (check_true ((null==arg))){
                                    throw new SyntaxError("Missing argument symbol after &");
                                    
                                };
                                await set_ctx(ctx,(arg && arg.name),ArgumentType);
                                 await async function(){
                                    arg["name"]=("..."+(arg && arg.name));
                                    return arg;
                                    
                                }()
                            } else {
                                 await set_ctx(ctx,(arg && arg.name),ArgumentType)
                            };
                            (acc).push(await sanitize_js_ref_name((arg && arg.name)));
                            ((type_mark && type_mark["args"])).push(await sanitize_js_ref_name((arg && arg.name)));
                            if (check_true ((idx<((fn_args && fn_args.length)-1)))){
                                 return  (acc).push(",")
                            }
                        };
                        let __BREAK__FLAG__=false;
                        while(await __test_condition__194()) {
                            await __body_ref__195();
                             if(__BREAK__FLAG__) {
                                 break;
                                
                            }
                        } ;
                        
                    })();
                    (acc).push(")");
                    (acc).push(" ");
                    if (check_true ((fn_opts && fn_opts["arrow"]))){
                         (acc).push("=>")
                    };
                    if (check_true ((fn_opts && fn_opts["generator"]))){
                         await async function(){
                            ctx["return_last_value"]=false;
                            return ctx;
                            
                        }()
                    } else {
                         await async function(){
                            ctx["return_last_value"]=true;
                            return ctx;
                            
                        }()
                    };
                    await async function(){
                        if (check_true( ((body && body["val"] && body["val"]["0"] && body["val"]["0"]["name"])==="let"))) {
                             return  (acc).push(await compile((body && body["val"]),ctx))
                        } else if (check_true( ((body && body["val"] && body["val"]["0"] && body["val"]["0"]["name"])==="do"))) {
                             return  (acc).push(await compile_block((body && body["val"]),ctx))
                        } else  {
                            nbody=[{
                                type:"special",val:"=:do",ref:true,name:"do"
                            },body];
                            await async function(){
                                ctx["return_last_value"]=true;
                                return ctx;
                                
                            }();
                            (acc).push({
                                mark:"nbody"
                            });
                             return  (acc).push(await compile_block(nbody,ctx))
                        }
                    } ();
                     return  acc
                };
                compile_jslambda=async function(tokens,ctx) {
                    let acc;
                    let fn_args;
                    let body;
                    let idx;
                    let quoted_body;
                    let arg;
                    let type_mark;
                    acc=[];
                    fn_args=(tokens && tokens["1"] && tokens["1"]["val"]);
                    body=(tokens && tokens["2"] && tokens["2"]["val"]);
                    idx=-1;
                    quoted_body=[];
                    arg=null;
                    type_mark=await type_marker("Function");
                    (acc).push(type_mark);
                    await (async function() {
                        let __for_body__202=async function(t) {
                             return  (acc).push(t)
                        };
                        let __array__203=[],__elements__201=["new"," ","Function","("];
                        let __BREAK__FLAG__=false;
                        for(let __iter__200 in __elements__201) {
                            __array__203.push(await __for_body__202(__elements__201[__iter__200]));
                            if(__BREAK__FLAG__) {
                                 __array__203.pop();
                                break;
                                
                            }
                        }return __array__203;
                         
                    })();
                    await (async function(){
                         let __test_condition__204=async function() {
                             return  (idx<((fn_args && fn_args.length)-1))
                        };
                        let __body_ref__205=async function() {
                            idx+=1;
                            arg=fn_args[idx];
                            await set_ctx(ctx,(arg && arg.name),ArgumentType);
                            (acc).push(("\""+(arg && arg.name)+"\""));
                            ((type_mark && type_mark["args"])).push((arg && arg.name));
                             return  (acc).push(",")
                        };
                        let __BREAK__FLAG__=false;
                        while(await __test_condition__204()) {
                            await __body_ref__205();
                             if(__BREAK__FLAG__) {
                                 break;
                                
                            }
                        } ;
                        
                    })();
                    (acc).push("\"");
                    await (async function() {
                        let __for_body__208=async function(c) {
                            if (check_true (await not((c==="\n"),(c==="\r")))){
                                if (check_true ((c==="\""))){
                                     (quoted_body).push(await String.fromCharCode(92))
                                };
                                 return  (quoted_body).push(c)
                            }
                        };
                        let __array__209=[],__elements__207=(body).split("");
                        let __BREAK__FLAG__=false;
                        for(let __iter__206 in __elements__207) {
                            __array__209.push(await __for_body__208(__elements__207[__iter__206]));
                            if(__BREAK__FLAG__) {
                                 __array__209.pop();
                                break;
                                
                            }
                        }return __array__209;
                         
                    })();
                    (acc).push((await flatten(quoted_body)).join(""));
                    (acc).push("\"");
                    (acc).push(")");
                     return  acc
                };
                compile_yield=async function(tokens,ctx) {
                    let acc;
                    let expr;
                    acc=[{
                        mark:"no_return"
                    }];
                    expr=null;
                    (acc).push("yield");
                    (acc).push(" ");
                    expr=await (async function ()  {
                         return  await compile((tokens && tokens["1"]),ctx)
                    } )();
                    (acc).push(await wrap_assignment_value(expr,ctx));
                    (acc).push(";");
                     return  acc
                };
                var_counter=0;
                gen_temp_name=async function(arg) {
                     return  ("__"+(arg||"")+"__"+(var_counter=var_counter+1))
                };
                if_id=0;
                cond_log=await (async function () {
                     if (check_true ((opts && opts["quiet_mode"]))){
                          return log
                    } else {
                          return await defclog({
                            prefix:"compile_cond",color:"white",background:"darkblue"
                        })
                    } 
                })();
                compile_cond=async function(tokens,ctx) {
                    let preamble;
                    preamble=await calling_preamble(ctx);
                    ;
                     return  [(preamble && preamble["2"]),(preamble && preamble["0"])," ",(preamble && preamble["1"])," ",(preamble && preamble["3"]),"function","()","{",await compile_cond_inner(tokens,ctx),"} ",(preamble && preamble["4"]),"()"]
                };
                compile_cond_inner=async function(tokens,ctx) {
                    let acc;
                    let prebuild;
                    let conditions;
                    let stmts;
                    let fst;
                    let inject_return;
                    let block_stmts;
                    let needs_braces_ques_;
                    let check_needs_return;
                    let idx;
                    let condition;
                    let condition_block;
                    let condition_tokens;
                    acc=[];
                    prebuild=[];
                    conditions=[];
                    stmts=null;
                    fst=null;
                    ctx=await new_ctx(ctx);
                    inject_return=false;
                    block_stmts=null;
                    needs_braces_ques_=false;
                    check_needs_return=async function(stmts) {
                        fst=(""+(((stmts instanceof Array)&&await first(stmts)&&(await first(stmts) instanceof Object)&&await (async function(){
                            let __targ__210=await first(stmts);
                            if (__targ__210){
                                 return(__targ__210)["ctype"]
                            } 
                        })()&&await async function(){
                            if (check_true( (await (async function(){
                                let __targ__211=await first(stmts);
                                if (__targ__211){
                                     return(__targ__211)["ctype"]
                                } 
                            })() instanceof String || typeof await (async function(){
                                let __targ__211=await first(stmts);
                                if (__targ__211){
                                     return(__targ__211)["ctype"]
                                } 
                            })()==='string'))) {
                                 return await (async function(){
                                    let __targ__212=await first(stmts);
                                    if (__targ__212){
                                         return(__targ__212)["ctype"]
                                    } 
                                })()
                            } else  {
                                 return await sub_type(await (async function(){
                                    let __targ__213=await first(stmts);
                                    if (__targ__213){
                                         return(__targ__213)["ctype"]
                                    } 
                                })())
                            }
                        } ())||""));
                         return  await async function(){
                            if (check_true( (fst==="ifblock"))) {
                                needs_braces_ques_=true;
                                 return  false
                            } else if (check_true( await contains_ques_("block",fst))) {
                                if (check_true ((fst==="ifblock"))){
                                     needs_braces_ques_=true
                                } else {
                                     needs_braces_ques_=false
                                };
                                 return  false
                            } else if (check_true( (await first(stmts)==="throw"))) {
                                needs_braces_ques_=true;
                                 return  false
                            } else  {
                                needs_braces_ques_=true;
                                 return  true
                            }
                        } ()
                    };
                    idx=0;
                    condition=null;
                    condition_block=null;
                    condition_tokens=await tokens["slice"].call(tokens,1);
                    ;
                    await (await Environment.get_global("compiler_syntax_validation"))("compile_cond",tokens,errors,ctx,expanded_tree);
                    await async function(){
                        if (check_true( await not((((condition_tokens && condition_tokens.length)%2)===0)))) {
                             throw new SyntaxError("cond: Invalid syntax: missing condition block");
                            
                        } else if (check_true( ((condition_tokens && condition_tokens.length)===0))) {
                             throw new SyntaxError("cond: Invalid syntax: no conditions provided");
                            
                        }
                    } ();
                    await set_ctx(ctx,"__LAMBDA_STEP__",-1);
                    await (async function(){
                         let __test_condition__214=async function() {
                             return  (idx<(condition_tokens && condition_tokens.length))
                        };
                        let __body_ref__215=async function() {
                            inject_return=false;
                            condition=condition_tokens[idx];
                            idx+=1;
                            condition_block=condition_tokens[idx];
                            if (check_true ((idx>2))){
                                (acc).push(" ");
                                (acc).push("else");
                                 (acc).push(" ")
                            };
                            if (check_true (await not(((condition && condition.name)==="else")))){
                                (acc).push({
                                    ctype:"ifblock",stype:"cond"
                                });
                                (acc).push("if");
                                (acc).push(" ");
                                 (acc).push("(")
                            };
                            await async function(){
                                if (check_true( await (async function(){
                                    let __array_op_rval__216=is_form_ques_;
                                     if (__array_op_rval__216 instanceof Function){
                                        return await __array_op_rval__216(condition) 
                                    } else {
                                        return[__array_op_rval__216,condition]
                                    }
                                })())) {
                                    stmts=await compile(condition,ctx);
                                    (acc).push("check_true");
                                    (acc).push("(");
                                    (acc).push(" ");
                                    (acc).push(stmts);
                                     return  (acc).push(")")
                                } else if (check_true( ((condition && condition.name)==="else"))) {
                                     return true
                                } else  {
                                    stmts=await compile(condition,ctx);
                                    (acc).push("check_true");
                                    (acc).push("(");
                                    (acc).push(stmts);
                                     return  (acc).push(")")
                                }
                            } ();
                            if (check_true (await not(((condition && condition.name)==="else")))){
                                 (acc).push(")")
                            };
                            (acc).push(" ");
                            stmts=await compile(condition_block,ctx);
                            if (check_true (await check_needs_return(stmts))){
                                 inject_return=true
                            };
                            if (check_true (needs_braces_ques_)){
                                (acc).push("{");
                                 (acc).push(" ")
                            };
                            if (check_true (inject_return)){
                                (acc).push("return");
                                 (acc).push(" ")
                            };
                            if (check_true (((condition_block && condition_block["type"])==="arr"))){
                                 (acc).push(stmts)
                            } else {
                                 (acc).push(stmts)
                            };
                            if (check_true (needs_braces_ques_)){
                                 (acc).push("}")
                            };
                             return  idx+=1
                        };
                        let __BREAK__FLAG__=false;
                        while(await __test_condition__214()) {
                            await __body_ref__215();
                             if(__BREAK__FLAG__) {
                                 break;
                                
                            }
                        } ;
                        
                    })();
                     return  acc
                };
                compile_if=async function(tokens,ctx) {
                    let acc;
                    let stmts;
                    let fst;
                    let __if_id__217= async function(){
                        return if_id+=1
                    };
                    let inject_return;
                    let block_stmts;
                    let in_suppress_ques_;
                    let test_form;
                    let if_true;
                    let compiled_test;
                    let compiled_true;
                    let compiled_false;
                    let if_false;
                    let preamble;
                    let needs_braces_ques_;
                    let check_needs_return;
                    {
                        acc=[];
                        stmts=null;
                        fst=null;
                        let if_id=await __if_id__217();
                        ;
                        inject_return=false;
                        block_stmts=null;
                        in_suppress_ques_=(ctx && ctx["suppress_return"]);
                        test_form=(tokens && tokens["1"]);
                        if_true=(tokens && tokens["2"]);
                        compiled_test=null;
                        compiled_true=null;
                        compiled_false=null;
                        if_false=(tokens && tokens["3"]);
                        preamble=await calling_preamble(ctx);
                        needs_braces_ques_=false;
                        check_needs_return=async function(stmts) {
                            fst=(""+(((stmts instanceof Array)&&await first(stmts)&&(await first(stmts) instanceof Object)&&await (async function(){
                                let __targ__218=await first(stmts);
                                if (__targ__218){
                                     return(__targ__218)["ctype"]
                                } 
                            })()&&await async function(){
                                if (check_true( (await (async function(){
                                    let __targ__219=await first(stmts);
                                    if (__targ__219){
                                         return(__targ__219)["ctype"]
                                    } 
                                })() instanceof String || typeof await (async function(){
                                    let __targ__219=await first(stmts);
                                    if (__targ__219){
                                         return(__targ__219)["ctype"]
                                    } 
                                })()==='string'))) {
                                     return await (async function(){
                                        let __targ__220=await first(stmts);
                                        if (__targ__220){
                                             return(__targ__220)["ctype"]
                                        } 
                                    })()
                                } else  {
                                     return await sub_type(await (async function(){
                                        let __targ__221=await first(stmts);
                                        if (__targ__221){
                                             return(__targ__221)["ctype"]
                                        } 
                                    })())
                                }
                            } ())||""));
                             return  await async function(){
                                if (check_true( await contains_ques_("block",fst))) {
                                    if (check_true ((fst==="ifblock"))){
                                         needs_braces_ques_=true
                                    } else {
                                         needs_braces_ques_=false
                                    };
                                     return  false
                                } else if (check_true( (await first(stmts)==="throw"))) {
                                    needs_braces_ques_=false;
                                     return  false
                                } else if (check_true( (((ctx && ctx["block_step"])===0)&&((ctx && ctx["return_point"])<3)))) {
                                    needs_braces_ques_=true;
                                     return  false
                                } else if (check_true( (((ctx && ctx["block_step"])===0)&&((ctx && ctx["return_point"])>2)))) {
                                    needs_braces_ques_=true;
                                     return  false
                                } else if (check_true( ((ctx && ctx["block_step"])>0))) {
                                    needs_braces_ques_=true;
                                     return  false
                                } else  {
                                    needs_braces_ques_=true;
                                     return  false
                                }
                            } ()
                        };
                        ;
                        if (check_true (((ctx && ctx["block_step"])===undefined))){
                             await async function(){
                                ctx["block_step"]=0;
                                return ctx;
                                
                            }()
                        };
                        if (check_true ((null==ctx))){
                            throw new ReferenceError("undefined/nil ctx passed to compile_if");
                            
                        };
                        (acc).push({
                            ctype:"ifblock"
                        });
                        compiled_test=await compile_elem(test_form,ctx);
                        await set_ctx(ctx,"__IF_BLOCK__",if_id);
                        if (check_true (((ctx && ctx["block_step"])>0))){
                             await async function(){
                                ctx["suppress_return"]=true;
                                return ctx;
                                
                            }()
                        };
                        if (check_true (((await first(compiled_test) instanceof Object)&&await (async function(){
                            let __targ__224=await first(compiled_test);
                            if (__targ__224){
                                 return(__targ__224)["ctype"]
                            } 
                        })()&&(await (async function(){
                            let __targ__225=await first(compiled_test);
                            if (__targ__225){
                                 return(__targ__225)["ctype"]
                            } 
                        })() instanceof String || typeof await (async function(){
                            let __targ__225=await first(compiled_test);
                            if (__targ__225){
                                 return(__targ__225)["ctype"]
                            } 
                        })()==='string')&&await contains_ques_("unction",await (async function(){
                            let __targ__226=await first(compiled_test);
                            if (__targ__226){
                                 return(__targ__226)["ctype"]
                            } 
                        })())))){
                             await (async function() {
                                let __for_body__229=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__230=[],__elements__228=["if"," ","(check_true (",(preamble && preamble["0"])," ",compiled_test,"()","))"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__227 in __elements__228) {
                                    __array__230.push(await __for_body__229(__elements__228[__iter__227]));
                                    if(__BREAK__FLAG__) {
                                         __array__230.pop();
                                        break;
                                        
                                    }
                                }return __array__230;
                                 
                            })()
                        } else {
                             await (async function() {
                                let __for_body__233=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__234=[],__elements__232=["if"," ","(check_true (",compiled_test,"))"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__231 in __elements__232) {
                                    __array__234.push(await __for_body__233(__elements__232[__iter__231]));
                                    if(__BREAK__FLAG__) {
                                         __array__234.pop();
                                        break;
                                        
                                    }
                                }return __array__234;
                                 
                            })()
                        };
                        compiled_true=await compile(if_true,ctx);
                        inject_return=await check_needs_return(compiled_true);
                        if (check_true (needs_braces_ques_)){
                            (acc).push("{");
                             (acc).push(" ")
                        };
                        (acc).push(await (async function () {
                             if (check_true ((false&&(await get_ctx_val(ctx,"__LAMBDA_STEP__")===0)&&((ctx && ctx["block_step"])===0)))){
                                  return {
                                    mark:"final-return",if_id:if_id
                                }
                            } else {
                                  return {
                                    mark:"rval",if_id:if_id,block_step:(ctx && ctx["block_step"]),lambda_step:await Math.max(0,await get_ctx_val(ctx,"__LAMBDA_STEP__"))
                                }
                            } 
                        })());
                        if (check_true (inject_return)){
                            (acc).push("return");
                             (acc).push(" ")
                        };
                        (acc).push(compiled_true);
                        if (check_true (needs_braces_ques_)){
                             (acc).push("}")
                        };
                        if (check_true (if_false)){
                            compiled_false=await compile(if_false,ctx);
                            inject_return=await check_needs_return(compiled_false);
                            (acc).push(" ");
                            (acc).push("else");
                            (acc).push(" ");
                            if (check_true (needs_braces_ques_)){
                                (acc).push("{");
                                 (acc).push(" ")
                            };
                            (acc).push(await (async function () {
                                 if (check_true ((false&&(await get_ctx_val(ctx,"__LAMBDA_STEP__")===0)))){
                                      return {
                                        mark:"final-return"
                                    }
                                } else {
                                      return {
                                        mark:"rval",if_id:if_id,block_step:(ctx && ctx["block_step"]),lambda_step:await Math.max(0,await get_ctx_val(ctx,"__LAMBDA_STEP__"))
                                    }
                                } 
                            })());
                            if (check_true (inject_return)){
                                (acc).push("return");
                                 (acc).push(" ")
                            };
                            (acc).push(compiled_false);
                            if (check_true (needs_braces_ques_)){
                                 (acc).push("}")
                            }
                        };
                        await set_ctx(ctx,"__IF_BLOCK__",undefined);
                        await async function(){
                            ctx["suppress_return"]=in_suppress_ques_;
                            return ctx;
                            
                        }();
                         return  acc
                    }
                };
                compile_wrapper_fn=async function(tokens,ctx,opts) {
                    let acc;
                    let preamble;
                    let needs_await;
                    acc=[];
                    ctx=ctx;
                    preamble=await calling_preamble(ctx);
                    needs_await=true;
                    ;
                    await async function(){
                        if (check_true( ((tokens instanceof Object)&&await not((tokens instanceof Array))&&await not(((tokens && tokens["type"])==="arr"))))) {
                            needs_await=false;
                             return  acc=[await compile(tokens,ctx)]
                        } else if (check_true( await (async function(){
                            let __array_op_rval__236=is_block_ques_;
                             if (__array_op_rval__236 instanceof Function){
                                return await __array_op_rval__236(tokens) 
                            } else {
                                return[__array_op_rval__236,tokens]
                            }
                        })())) {
                            ctx=await new_ctx(ctx);
                            await async function(){
                                ctx["return_point"]=1;
                                return ctx;
                                
                            }();
                             return  acc=["(",(preamble && preamble["1"])," ","function","()","{",await compile(tokens,ctx),"}",")","()"]
                        } else if (check_true( ((tokens instanceof Object)&&((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["name"])==="if")))) {
                            ctx=await new_ctx(ctx);
                            await async function(){
                                ctx["return_point"]=1;
                                return ctx;
                                
                            }();
                             return  await (async function() {
                                let __for_body__241=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__242=[],__elements__240=["(",(preamble && preamble["1"])," ","function","()","{",await compile_if((tokens && tokens["val"]),ctx),"}",")","()"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__239 in __elements__240) {
                                    __array__242.push(await __for_body__241(__elements__240[__iter__239]));
                                    if(__BREAK__FLAG__) {
                                         __array__242.pop();
                                        break;
                                        
                                    }
                                }return __array__242;
                                 
                            })()
                        } else if (check_true( (tokens instanceof Array))) {
                             return  acc=await compile_block_to_anon_fn(tokens,ctx)
                        } else if (check_true( ((tokens instanceof Object)&&(tokens && tokens["val"])&&((tokens && tokens["type"])==="arr")))) {
                             return  acc=await compile_block_to_anon_fn((tokens && tokens["val"]),ctx)
                        }
                    } ();
                    if (check_true (needs_await)){
                          return [(preamble && preamble["0"])," ",acc]
                    } else {
                          return await (async function(){
                            let __array_op_rval__243=acc;
                             if (__array_op_rval__243 instanceof Function){
                                return await __array_op_rval__243() 
                            } else {
                                return[__array_op_rval__243]
                            }
                        })()
                    }
                };
                compile_block_to_anon_fn=async function(tokens,ctx,opts) {
                    let acc;
                    let preamble;
                    acc=[];
                    preamble=await calling_preamble(ctx);
                    ctx=await new_ctx(ctx);
                    await async function(){
                        ctx["return_point"]=0;
                        return ctx;
                        
                    }();
                    await async function(){
                        if (check_true( await (async function(){
                            let __array_op_rval__245=is_block_ques_;
                             if (__array_op_rval__245 instanceof Function){
                                return await __array_op_rval__245(tokens) 
                            } else {
                                return[__array_op_rval__245,tokens]
                            }
                        })())) {
                            await async function(){
                                ctx["return_last_value"]=true;
                                return ctx;
                                
                            }();
                            await async function(){
                                ctx["return_point"]=0;
                                return ctx;
                                
                            }();
                             return  await (async function() {
                                let __for_body__250=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__251=[],__elements__249=["(",(preamble && preamble["1"])," ","function","()",await compile_block(tokens,ctx),")","()"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__248 in __elements__249) {
                                    __array__251.push(await __for_body__250(__elements__249[__iter__248]));
                                    if(__BREAK__FLAG__) {
                                         __array__251.pop();
                                        break;
                                        
                                    }
                                }return __array__251;
                                 
                            })()
                        } else if (check_true( ((tokens && tokens["0"] && tokens["0"]["name"])==="let"))) {
                            await async function(){
                                ctx["return_last_value"]=true;
                                return ctx;
                                
                            }();
                            await async function(){
                                ctx["return_point"]=0;
                                return ctx;
                                
                            }();
                             return  await (async function() {
                                let __for_body__256=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__257=[],__elements__255=["(",(preamble && preamble["1"])," ","function","()",await compile(tokens,ctx),")","()"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__254 in __elements__255) {
                                    __array__257.push(await __for_body__256(__elements__255[__iter__254]));
                                    if(__BREAK__FLAG__) {
                                         __array__257.pop();
                                        break;
                                        
                                    }
                                }return __array__257;
                                 
                            })()
                        } else  {
                            await async function(){
                                ctx["return_last_value"]=true;
                                return ctx;
                                
                            }();
                            await async function(){
                                ctx["return_point"]=0;
                                return ctx;
                                
                            }();
                             return  await (async function() {
                                let __for_body__262=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__263=[],__elements__261=["(",(preamble && preamble["1"])," ","function","()","{"," ","return"," ",await compile(tokens,ctx)," ","}",")","()"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__260 in __elements__261) {
                                    __array__263.push(await __for_body__262(__elements__261[__iter__260]));
                                    if(__BREAK__FLAG__) {
                                         __array__263.pop();
                                        break;
                                        
                                    }
                                }return __array__263;
                                 
                            })()
                        }
                    } ();
                     return  acc
                };
                make_do_block=async function(tokens) {
                    let preamble;
                    let place;
                    preamble=await clone({
                        type:"arr",ref:false,name:null,val:[]
                    });
                    place=(preamble && preamble["val"]);
                    (place).push({
                        type:"special",val:"=:do",ref:true,name:"do"
                    });
                    await async function(){
                        if (check_true( (tokens instanceof Array))) {
                             return await (async function() {
                                let __for_body__266=async function(token) {
                                     return  (place).push(token)
                                };
                                let __array__267=[],__elements__265=tokens;
                                let __BREAK__FLAG__=false;
                                for(let __iter__264 in __elements__265) {
                                    __array__267.push(await __for_body__266(__elements__265[__iter__264]));
                                    if(__BREAK__FLAG__) {
                                         __array__267.pop();
                                        break;
                                        
                                    }
                                }return __array__267;
                                 
                            })()
                        } else  {
                             return await (async function() {
                                let __for_body__270=async function(token) {
                                     return  (place).push(token)
                                };
                                let __array__271=[],__elements__269=await (async function(){
                                    let __array_op_rval__272=tokens;
                                     if (__array_op_rval__272 instanceof Function){
                                        return await __array_op_rval__272() 
                                    } else {
                                        return[__array_op_rval__272]
                                    }
                                })();
                                let __BREAK__FLAG__=false;
                                for(let __iter__268 in __elements__269) {
                                    __array__271.push(await __for_body__270(__elements__269[__iter__268]));
                                    if(__BREAK__FLAG__) {
                                         __array__271.pop();
                                        break;
                                        
                                    }
                                }return __array__271;
                                 
                            })()
                        }
                    } ();
                     return  preamble
                };
                push_as_arg_list=async function(place,args) {
                    await map(async function(v,i,t) {
                        (place).push(v);
                        if (check_true ((i<=(t-2)))){
                             return  (place).push(",")
                        }
                    },args);
                     return  place
                };
                compile_new=async function(tokens,ctx) {
                    let acc;
                    let prebuild;
                    let target_type;
                    let comps;
                    let type_details;
                    let root_type_details;
                    let target_return_type;
                    let new_arg_name;
                    let args;
                    let preamble;
                    let new_opts;
                    acc=[];
                    prebuild=[];
                    target_type=await clean_quoted_reference(await sanitize_js_ref_name((tokens && tokens["1"] && tokens["1"]["name"])));
                    comps=await (await Environment.get_global("get_object_path"))(target_type);
                    type_details=await get_declaration_details(ctx,target_type);
                    root_type_details=await (async function () {
                         if (check_true (((comps && comps.length)>1))){
                              return await get_declaration_details(ctx,(comps && comps["0"]))
                        } else {
                              return null
                        } 
                    })();
                    target_return_type=null;
                    new_arg_name=null;
                    args=[];
                    ctx=await new_ctx(ctx);
                    preamble=await calling_preamble(ctx);
                    new_opts=await tokens["slice"].call(tokens,2);
                    if (check_true (((comps && comps.length)>1))){
                         target_type=await (await Environment.get_global("path_to_js_syntax"))(comps)
                    };
                    await (async function() {
                        let __for_body__275=async function(opt_token) {
                             return  (args).push(await wrap_assignment_value(await compile(opt_token,ctx),ctx))
                        };
                        let __array__276=[],__elements__274=(new_opts||[]);
                        let __BREAK__FLAG__=false;
                        for(let __iter__273 in __elements__274) {
                            __array__276.push(await __for_body__275(__elements__274[__iter__273]));
                            if(__BREAK__FLAG__) {
                                 __array__276.pop();
                                break;
                                
                            }
                        }return __array__276;
                         
                    })();
                    await async function(){
                        if (check_true( (await not((null==(type_details && type_details["value"])))&&(type_details && type_details["declared_global"])))) {
                            await (async function() {
                                let __for_body__279=async function(arg) {
                                     return  (acc).push(arg)
                                };
                                let __array__280=[],__elements__278=["new"," ",await compile((tokens && tokens["1"]),ctx),"("];
                                let __BREAK__FLAG__=false;
                                for(let __iter__277 in __elements__278) {
                                    __array__280.push(await __for_body__279(__elements__278[__iter__277]));
                                    if(__BREAK__FLAG__) {
                                         __array__280.pop();
                                        break;
                                        
                                    }
                                }return __array__280;
                                 
                            })();
                            await push_as_arg_list(acc,args);
                             return  (acc).push(")")
                        } else if (check_true( (await not((null==(type_details && type_details["value"])))&&(type_details && type_details["value"]) instanceof Function))) {
                            await (async function() {
                                let __for_body__283=async function(arg) {
                                     return  (acc).push(arg)
                                };
                                let __array__284=[],__elements__282=["new"," ",target_type,"("];
                                let __BREAK__FLAG__=false;
                                for(let __iter__281 in __elements__282) {
                                    __array__284.push(await __for_body__283(__elements__282[__iter__281]));
                                    if(__BREAK__FLAG__) {
                                         __array__284.pop();
                                        break;
                                        
                                    }
                                }return __array__284;
                                 
                            })();
                            await push_as_arg_list(acc,args);
                             return  (acc).push(")")
                        } else if (check_true( ((null==(type_details && type_details["value"]))&&await not((null==(root_type_details && root_type_details["value"])))))) {
                            await (async function() {
                                let __for_body__287=async function(arg) {
                                     return  (acc).push(arg)
                                };
                                let __array__288=[],__elements__286=["(",(preamble && preamble["0"])," ",env_ref,"get_global","(","\"","indirect_new","\"",")",")","(",target_type];
                                let __BREAK__FLAG__=false;
                                for(let __iter__285 in __elements__286) {
                                    __array__288.push(await __for_body__287(__elements__286[__iter__285]));
                                    if(__BREAK__FLAG__) {
                                         __array__288.pop();
                                        break;
                                        
                                    }
                                }return __array__288;
                                 
                            })();
                            if (check_true (((args && args.length)>0))){
                                (acc).push(",");
                                 await push_as_arg_list(acc,args)
                            };
                             return  (acc).push(")")
                        }
                    } ();
                    target_return_type=(await get_ctx_val(ctx,target_type)||await (async function(){
                        let __targ__289=(await get_declarations(ctx,target_type)||new Object());
                        if (__targ__289){
                             return(__targ__289)["type"]
                        } 
                    })()||await (await Environment.get_global("get_outside_global"))(target_type)||UnknownType);
                    (acc).unshift({
                        ctype:target_return_type
                    });
                     return  acc
                };
                compile_val_mod=async function(tokens,ctx) {
                    let target_location;
                    let target;
                    let in_infix;
                    let operation;
                    let mod_source;
                    let how_much;
                    target_location=await async function(){
                        if (check_true( await get_ctx(ctx,(tokens && tokens["1"] && tokens["1"]["name"])))) {
                             return "local"
                        } else if (check_true( await get_lisp_ctx((tokens && tokens["1"] && tokens["1"]["name"])))) {
                             return "global"
                        }
                    } ();
                    target=(tokens && tokens["1"] && tokens["1"]["name"]);
                    in_infix=await get_ctx_val(ctx,"__COMP_INFIX_OPS__");
                    operation=await (async function () {
                         if (check_true (in_infix)){
                              return await async function(){
                                if (check_true( ((tokens && tokens["0"] && tokens["0"]["name"])==="inc"))) {
                                     return "+"
                                } else if (check_true( ((tokens && tokens["0"] && tokens["0"]["name"])==="dec"))) {
                                     return "-"
                                } else  {
                                     throw new Error(("Invalid value modification operator: "+(tokens && tokens["0"] && tokens["0"]["name"])));
                                    
                                }
                            } ()
                        } else {
                              return await async function(){
                                if (check_true( ((target_location==="local")&&((tokens && tokens["0"] && tokens["0"]["name"])==="inc")))) {
                                     return "+="
                                } else if (check_true( ((target_location==="local")&&((tokens && tokens["0"] && tokens["0"]["name"])==="dec")))) {
                                     return "-="
                                } else if (check_true( ((tokens && tokens["0"] && tokens["0"]["name"])==="inc"))) {
                                     return "+"
                                } else  {
                                     return "-"
                                }
                            } ()
                        } 
                    })();
                    mod_source=null;
                    how_much=(((tokens && tokens["2"])&&await compile((tokens && tokens["2"]),ctx))||1);
                     return  await async function(){
                        if (check_true( (target_location==="global"))) {
                            has_lisp_globals=true;
                             return  ["(","await"," ",env_ref,"set_global(\"",target,"\",","await"," ",env_ref,"get_global(\"",target,"\")"," ",operation," ",how_much,"))"]
                        } else if (check_true(in_infix)) {
                             return  ["(",target,"=",target,operation,how_much,")"]
                        } else  {
                             return await (async function(){
                                let __array_op_rval__290=target;
                                 if (__array_op_rval__290 instanceof Function){
                                    return await __array_op_rval__290(operation,how_much) 
                                } else {
                                    return[__array_op_rval__290,operation,how_much]
                                }
                            })()
                        }
                    } ()
                };
                try_log=await (async function () {
                     if (check_true ((opts && opts["quiet_mode"]))){
                          return log
                    } else {
                          return await defclog({
                            prefix:"compile_try",background:"violet",color:"black"
                        })
                    } 
                })();
                compile_try=async function(tokens,ctx) {
                    let preamble;
                    preamble=await calling_preamble(ctx);
                    ;
                     return  [(preamble && preamble["2"]),(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()","{",await compile_try_inner(tokens,ctx),"}",")","()"]
                };
                compile_try_inner=async function(tokens,ctx) {
                    let acc;
                    let try_block;
                    let catch_block;
                    let the_exception_ref;
                    let exception_ref;
                    let orig_ctx;
                    let fst;
                    let needs_braces_ques_;
                    let check_needs_return;
                    let insert_catch_block;
                    let insert_return_ques_;
                    let complete_ques_;
                    let stmts;
                    let idx;
                    let base_error_caught;
                    let catches;
                    acc=[];
                    try_block=(tokens && tokens["1"] && tokens["1"]["val"]);
                    catch_block=null;
                    the_exception_ref=await gen_temp_name("exception");
                    exception_ref=null;
                    orig_ctx=ctx;
                    fst=null;
                    needs_braces_ques_=false;
                    check_needs_return=async function(stmts) {
                        fst=(""+(((stmts instanceof Array)&&await first(stmts)&&(await first(stmts) instanceof Object)&&await (async function(){
                            let __targ__291=await first(stmts);
                            if (__targ__291){
                                 return(__targ__291)["ctype"]
                            } 
                        })()&&await async function(){
                            if (check_true( (await (async function(){
                                let __targ__292=await first(stmts);
                                if (__targ__292){
                                     return(__targ__292)["ctype"]
                                } 
                            })() instanceof String || typeof await (async function(){
                                let __targ__292=await first(stmts);
                                if (__targ__292){
                                     return(__targ__292)["ctype"]
                                } 
                            })()==='string'))) {
                                 return await (async function(){
                                    let __targ__293=await first(stmts);
                                    if (__targ__293){
                                         return(__targ__293)["ctype"]
                                    } 
                                })()
                            } else  {
                                 return await sub_type(await (async function(){
                                    let __targ__294=await first(stmts);
                                    if (__targ__294){
                                         return(__targ__294)["ctype"]
                                    } 
                                })())
                            }
                        } ())||""));
                         return  await async function(){
                            if (check_true( await contains_ques_("block",fst))) {
                                if (check_true ((fst==="ifblock"))){
                                     needs_braces_ques_=true
                                };
                                 return  false
                            } else  {
                                needs_braces_ques_=true;
                                 return  true
                            }
                        } ()
                    };
                    insert_catch_block=async function(err_data,stmts) {
                        let complete;
                        complete=false;
                        if (check_true (((err_data && err_data["idx"])===0))){
                             await (async function() {
                                let __for_body__297=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__298=[],__elements__296=[" ","catch","(",the_exception_ref,")"," ","{"," "];
                                let __BREAK__FLAG__=false;
                                for(let __iter__295 in __elements__296) {
                                    __array__298.push(await __for_body__297(__elements__296[__iter__295]));
                                    if(__BREAK__FLAG__) {
                                         __array__298.pop();
                                        break;
                                        
                                    }
                                }return __array__298;
                                 
                            })()
                        };
                        if (check_true (((err_data && err_data["error_type"])==="Error"))){
                             base_error_caught=true
                        };
                        if (check_true ((((err_data && err_data["error_type"])==="Error")||((err_data && err_data["idx"])===((err_data && err_data["total_catches"])-1))))){
                             complete=true
                        };
                        if (check_true (((err_data && err_data["idx"])>0))){
                             await (async function() {
                                let __for_body__301=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__302=[],__elements__300=[" ","else"," "];
                                let __BREAK__FLAG__=false;
                                for(let __iter__299 in __elements__300) {
                                    __array__302.push(await __for_body__301(__elements__300[__iter__299]));
                                    if(__BREAK__FLAG__) {
                                         __array__302.pop();
                                        break;
                                        
                                    }
                                }return __array__302;
                                 
                            })()
                        };
                        await (async function() {
                            let __for_body__305=async function(t) {
                                 return  (acc).push(t)
                            };
                            let __array__306=[],__elements__304=[" ","if"," ","(",the_exception_ref," ","instanceof"," ",(err_data && err_data["error_type"]),")"," ","{"," ","let"," ",(err_data && err_data["error_ref"]),"=",the_exception_ref,";"," "];
                            let __BREAK__FLAG__=false;
                            for(let __iter__303 in __elements__304) {
                                __array__306.push(await __for_body__305(__elements__304[__iter__303]));
                                if(__BREAK__FLAG__) {
                                     __array__306.pop();
                                    break;
                                    
                                }
                            }return __array__306;
                             
                        })();
                        if (check_true ((err_data && err_data["insert_return"]))){
                            (acc).push(" ");
                            (acc).push("return");
                             (acc).push(" ")
                        };
                        (acc).push(stmts);
                        (acc).push("}");
                        if (check_true ((((err_data && err_data["idx"])===((err_data && err_data["total_catches"])-1))&&await not(base_error_caught)))){
                             await (async function() {
                                let __for_body__309=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__310=[],__elements__308=[" ","else"," ","throw"," ",the_exception_ref,";"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__307 in __elements__308) {
                                    __array__310.push(await __for_body__309(__elements__308[__iter__307]));
                                    if(__BREAK__FLAG__) {
                                         __array__310.pop();
                                        break;
                                        
                                    }
                                }return __array__310;
                                 
                            })()
                        };
                        if (check_true (complete)){
                             await (async function() {
                                let __for_body__313=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__314=[],__elements__312=[" ","}"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__311 in __elements__312) {
                                    __array__314.push(await __for_body__313(__elements__312[__iter__311]));
                                    if(__BREAK__FLAG__) {
                                         __array__314.pop();
                                        break;
                                        
                                    }
                                }return __array__314;
                                 
                            })()
                        };
                         return  complete
                    };
                    insert_return_ques_=false;
                    complete_ques_=false;
                    ctx=await new_ctx(ctx);
                    stmts=null;
                    idx=0;
                    base_error_caught=false;
                    catches=await tokens["slice"].call(tokens,2);
                    if (check_true ((await length(catches)===0))){
                        throw new SyntaxError("try: missing catch form");
                        
                    };
                    await async function(){
                        ctx["return_last_value"]=true;
                        return ctx;
                        
                    }();
                    await async function(){
                        ctx["in_try"]=true;
                        return ctx;
                        
                    }();
                    stmts=await compile(try_block,ctx);
                    if (check_true (((stmts && stmts["0"] && stmts["0"]["ctype"])&&(((stmts && stmts["0"] && stmts["0"]["ctype"])===AsyncFunction)||((stmts && stmts["0"] && stmts["0"]["ctype"])===Function))))){
                         (stmts).unshift("await")
                    };
                    if (check_true (await (async function(){
                        let __array_op_rval__317=is_complex_ques_;
                         if (__array_op_rval__317 instanceof Function){
                            return await __array_op_rval__317(try_block) 
                        } else {
                            return[__array_op_rval__317,try_block]
                        }
                    })())){
                         await (async function() {
                            let __for_body__320=async function(t) {
                                 return  (acc).push(t)
                            };
                            let __array__321=[],__elements__319=["try"," ","/* TRY COMPLEX */ ",stmts," "];
                            let __BREAK__FLAG__=false;
                            for(let __iter__318 in __elements__319) {
                                __array__321.push(await __for_body__320(__elements__319[__iter__318]));
                                if(__BREAK__FLAG__) {
                                     __array__321.pop();
                                    break;
                                    
                                }
                            }return __array__321;
                             
                        })()
                    } else {
                         await (async function() {
                            let __for_body__324=async function(t) {
                                 return  (acc).push(t)
                            };
                            let __array__325=[],__elements__323=await (async function ()  {
                                let __array_arg__326=(async function() {
                                    if (check_true ((await get_ctx_val(ctx,"__LAMBDA_STEP__")===0))){
                                          return {
                                            mark:"final-return"
                                        }
                                    } else {
                                          return {
                                            mark:"rval"
                                        }
                                    }
                                } );
                                return ["try"," ","/* TRY SIMPLE */ ","{"," ",await __array_arg__326(),stmts," ","}"]
                            } )();
                            let __BREAK__FLAG__=false;
                            for(let __iter__322 in __elements__323) {
                                __array__325.push(await __for_body__324(__elements__323[__iter__322]));
                                if(__BREAK__FLAG__) {
                                     __array__325.pop();
                                    break;
                                    
                                }
                            }return __array__325;
                             
                        })()
                    };
                    await (async function(){
                         let __test_condition__327=async function() {
                             return  (idx<(catches && catches.length))
                        };
                        let __body_ref__328=async function() {
                            catch_block=await (async function(){
                                let __targ__329=catches[idx];
                                if (__targ__329){
                                     return(__targ__329)["val"]
                                } 
                            })();
                            await set_ctx(ctx,(catch_block && catch_block["2"] && catch_block["2"]["val"] && catch_block["2"]["val"]["0"] && catch_block["2"]["val"]["0"]["name"]),(await Environment.get_global("indirect_new"))(catch_block['1'].name));
                            stmts=await compile((catch_block && catch_block["3"]),ctx);
                            insert_return_ques_=await check_needs_return(stmts);
                            complete_ques_=await insert_catch_block({
                                insert_return:insert_return_ques_,needs_braces:needs_braces_ques_,error_type:(catch_block && catch_block["1"] && catch_block["1"]["name"]),error_ref:(catch_block && catch_block["2"] && catch_block["2"]["val"] && catch_block["2"]["val"]["0"] && catch_block["2"]["val"]["0"]["name"]),idx:idx,total_catches:(catches && catches.length)
                            },stmts);
                            if (check_true (complete_ques_)){
                                 (idx===(catches && catches.length))
                            };
                             return  idx+=1
                        };
                        let __BREAK__FLAG__=false;
                        while(await __test_condition__327()) {
                            await __body_ref__328();
                             if(__BREAK__FLAG__) {
                                 break;
                                
                            }
                        } ;
                        
                    })();
                     return  acc
                };
                compile_throw=async function(tokens,ctx) {
                    let acc;
                    let error_message;
                    let mode;
                    let error_instance;
                    acc=[];
                    error_message=null;
                    mode=1;
                    error_instance=null;
                    await async function(){
                        if (check_true( ((tokens instanceof Array)&&((tokens && tokens.length)===2)&&(tokens && tokens["1"] && tokens["1"]["ref"])))) {
                            mode=0;
                             return  error_instance=await compile((tokens && tokens["1"]),ctx)
                        } else if (check_true( ((tokens instanceof Array)&&((tokens && tokens.length)===3)))) {
                            error_instance=await compile((tokens && tokens["1"]),ctx);
                             return  error_message=await compile((tokens && tokens["2"]),ctx)
                        } else if (check_true( ((tokens instanceof Array)&&((tokens && tokens.length)===2)))) {
                            error_message=await compile((tokens && tokens["1"]),ctx);
                             return  error_instance="Error"
                        } else  {
                             throw new SyntaxError("Invalid Throw Syntax");
                            
                        }
                    } ();
                    if (check_true ((mode===0))){
                         await (async function() {
                            let __for_body__332=async function(t) {
                                 return  (acc).push(t)
                            };
                            let __array__333=[],__elements__331=["throw"," ",error_instance,";"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__330 in __elements__331) {
                                __array__333.push(await __for_body__332(__elements__331[__iter__330]));
                                if(__BREAK__FLAG__) {
                                     __array__333.pop();
                                    break;
                                    
                                }
                            }return __array__333;
                             
                        })()
                    } else {
                         await (async function() {
                            let __for_body__336=async function(t) {
                                 return  (acc).push(t)
                            };
                            let __array__337=[],__elements__335=["throw"," ","new"," ",error_instance,"(",error_message,")",";"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__334 in __elements__335) {
                                __array__337.push(await __for_body__336(__elements__335[__iter__334]));
                                if(__BREAK__FLAG__) {
                                     __array__337.pop();
                                    break;
                                    
                                }
                            }return __array__337;
                             
                        })()
                    };
                     return  acc
                };
                compile_break=async function(tokens,ctx) {
                     return  await (async function(){
                        let __array_op_rval__338=break_out;
                         if (__array_op_rval__338 instanceof Function){
                            return await __array_op_rval__338("=","true",";","return") 
                        } else {
                            return[__array_op_rval__338,"=","true",";","return"]
                        }
                    })()
                };
                compile_return=async function(tokens,ctx) {
                    let acc;
                    let return_val_reference;
                    let return_value;
                    acc=[];
                    return_val_reference=await gen_temp_name("return");
                    return_value=null;
                    (acc).push({
                        mark:"forced_return"
                    });
                    if (check_true (await (async function(){
                        let __array_op_rval__339=is_block_ques_;
                         if (__array_op_rval__339 instanceof Function){
                            return await __array_op_rval__339((tokens && tokens["1"] && tokens["1"]["val"])) 
                        } else {
                            return[__array_op_rval__339,(tokens && tokens["1"] && tokens["1"]["val"])]
                        }
                    })())){
                         await (async function() {
                            let __for_body__342=async function(t) {
                                 return  (acc).push(t)
                            };
                            let __array__343=[],__elements__341=["let"," ",return_val_reference,"=",await compile((tokens && tokens["1"] && tokens["1"]["val"]),ctx),";","return"," ",return_val_reference,";"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__340 in __elements__341) {
                                __array__343.push(await __for_body__342(__elements__341[__iter__340]));
                                if(__BREAK__FLAG__) {
                                     __array__343.pop();
                                    break;
                                    
                                }
                            }return __array__343;
                             
                        })()
                    } else {
                         await (async function() {
                            let __for_body__346=async function(t) {
                                 return  (acc).push(t)
                            };
                            let __array__347=[],__elements__345=["return"," ",await compile((tokens && tokens["1"]),ctx),";"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__344 in __elements__345) {
                                __array__347.push(await __for_body__346(__elements__345[__iter__344]));
                                if(__BREAK__FLAG__) {
                                     __array__347.pop();
                                    break;
                                    
                                }
                            }return __array__347;
                             
                        })()
                    };
                     return  acc
                };
                apply_log=await (async function () {
                     if (check_true ((opts && opts["quiet_mode"]))){
                          return log
                    } else {
                          return await defclog({
                            prefix:"compile_apply",background:"sienna",color:"white"
                        })
                    } 
                })();
                compile_apply=async function(tokens,ctx) {
                    let acc;
                    let fn_ref;
                    let complex_ques_;
                    let args_ref;
                    let function_ref;
                    let target_argument_ref;
                    let target_arg;
                    let ctype;
                    let preceding_arg_ref;
                    let preamble;
                    let requires_await;
                    let compiled_fun_resolver;
                    let args;
                    acc=[];
                    fn_ref=(tokens && tokens["1"]);
                    complex_ques_=false;
                    args_ref=await gen_temp_name("apply_args");
                    function_ref=await gen_temp_name("apply_fn");
                    target_argument_ref=null;
                    target_arg=null;
                    ctype=null;
                    preceding_arg_ref=null;
                    preamble=await calling_preamble(ctx);
                    requires_await=false;
                    compiled_fun_resolver=null;
                    args=await tokens["slice"].call(tokens,2);
                    ;
                    if (check_true ((args&&((args && args.length)===1)))){
                         args=await first(args)
                    };
                    function_ref=await compile(fn_ref,ctx);
                    if (check_true ((fn_ref && fn_ref["ref"]))){
                         ctype=await get_declaration_details(ctx,(fn_ref && fn_ref["name"]))
                    };
                    if (check_true ((ctype && ctype["value"]) instanceof Function)){
                         requires_await=true
                    };
                    function_ref=await wrap_assignment_value(function_ref,ctx);
                    if (check_true ((args instanceof Array))){
                        target_argument_ref=await gen_temp_name("target_arg");
                        target_arg=(args).pop();
                        await (async function() {
                            let __for_body__350=async function(t) {
                                 return  (acc).push(t)
                            };
                            let __array__351=[],__elements__349=["let"," ",target_argument_ref,"=","[]",".concat","(",await compile(target_arg,ctx),")",";"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__348 in __elements__349) {
                                __array__351.push(await __for_body__350(__elements__349[__iter__348]));
                                if(__BREAK__FLAG__) {
                                     __array__351.pop();
                                    break;
                                    
                                }
                            }return __array__351;
                             
                        })();
                        await (async function() {
                            let __for_body__354=async function(t) {
                                 return  (acc).push(t)
                            };
                            let __array__355=[],__elements__353=["if","(","!",target_argument_ref," ","instanceof"," ","Array",")","{","throw"," ","new"," ","TypeError","(","\"Invalid final argument to apply - an array is required\"",")","}"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__352 in __elements__353) {
                                __array__355.push(await __for_body__354(__elements__353[__iter__352]));
                                if(__BREAK__FLAG__) {
                                     __array__355.pop();
                                    break;
                                    
                                }
                            }return __array__355;
                             
                        })();
                        await (async function() {
                            let __for_body__358=async function(token) {
                                preceding_arg_ref=await gen_temp_name("pre_arg");
                                if (check_true (await (async function(){
                                    let __array_op_rval__360=is_form_ques_;
                                     if (__array_op_rval__360 instanceof Function){
                                        return await __array_op_rval__360(token) 
                                    } else {
                                        return[__array_op_rval__360,token]
                                    }
                                })())){
                                     await (async function() {
                                        let __for_body__363=async function(t) {
                                             return  (acc).push(t)
                                        };
                                        let __array__364=[],__elements__362=["let"," ",preceding_arg_ref,"=",await wrap_assignment_value(await compile((token && token["val"]),ctx),ctx),";"];
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__361 in __elements__362) {
                                            __array__364.push(await __for_body__363(__elements__362[__iter__361]));
                                            if(__BREAK__FLAG__) {
                                                 __array__364.pop();
                                                break;
                                                
                                            }
                                        }return __array__364;
                                         
                                    })()
                                } else {
                                     preceding_arg_ref=await wrap_assignment_value(await compile(token,ctx))
                                };
                                 return  (acc).push(await (async function(){
                                    let __array_op_rval__365=target_argument_ref;
                                     if (__array_op_rval__365 instanceof Function){
                                        return await __array_op_rval__365(".unshift","(",preceding_arg_ref,")",";") 
                                    } else {
                                        return[__array_op_rval__365,".unshift","(",preceding_arg_ref,")",";"]
                                    }
                                })())
                            };
                            let __array__359=[],__elements__357=args;
                            let __BREAK__FLAG__=false;
                            for(let __iter__356 in __elements__357) {
                                __array__359.push(await __for_body__358(__elements__357[__iter__356]));
                                if(__BREAK__FLAG__) {
                                     __array__359.pop();
                                    break;
                                    
                                }
                            }return __array__359;
                             
                        })();
                         await (async function() {
                            let __for_body__368=async function(t) {
                                 return  (acc).push(t)
                            };
                            let __array__369=[],__elements__367=["return"," ","(",function_ref,")",".","apply","(","this",",",target_argument_ref,")"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__366 in __elements__367) {
                                __array__369.push(await __for_body__368(__elements__367[__iter__366]));
                                if(__BREAK__FLAG__) {
                                     __array__369.pop();
                                    break;
                                    
                                }
                            }return __array__369;
                             
                        })()
                    } else {
                        if (check_true (await (async function(){
                            let __array_op_rval__370=is_form_ques_;
                             if (__array_op_rval__370 instanceof Function){
                                return await __array_op_rval__370(args) 
                            } else {
                                return[__array_op_rval__370,args]
                            }
                        })())){
                            await (async function() {
                                let __for_body__373=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__374=[],__elements__372=["let"," ",args_ref,"=",await wrap_assignment_value(await compile((args && args["val"]),ctx),ctx),";"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__371 in __elements__372) {
                                    __array__374.push(await __for_body__373(__elements__372[__iter__371]));
                                    if(__BREAK__FLAG__) {
                                         __array__374.pop();
                                        break;
                                        
                                    }
                                }return __array__374;
                                 
                            })();
                             complex_ques_=true
                        };
                        await (async function() {
                            let __for_body__377=async function(t) {
                                 return  (acc).push(t)
                            };
                            let __array__378=[],__elements__376=["return"," ","("," ",function_ref,")",".","apply","(","this"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__375 in __elements__376) {
                                __array__378.push(await __for_body__377(__elements__376[__iter__375]));
                                if(__BREAK__FLAG__) {
                                     __array__378.pop();
                                    break;
                                    
                                }
                            }return __array__378;
                             
                        })();
                        if (check_true (args)){
                            (acc).push(",");
                            if (check_true (complex_ques_)){
                                 (acc).push(args_ref)
                            } else {
                                 (acc).push(await wrap_assignment_value(await compile(args,ctx),ctx))
                            }
                        };
                         (acc).push(")")
                    };
                     return  [(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()","{",acc,"}",")","()"]
                };
                compile_call=async function(tokens,ctx) {
                    let preamble;
                    let simple_target_ques_;
                    let simple_method_ques_;
                    preamble=await calling_preamble(ctx);
                    simple_target_ques_=await (async function () {
                         if (check_true (((tokens && tokens["1"] && tokens["1"]["ref"])===true))){
                              return true
                        } else {
                              return false
                        } 
                    })();
                    simple_method_ques_=await (async function () {
                         if (check_true (((tokens && tokens["2"] && tokens["2"]["type"])==="literal"))){
                              return true
                        } else {
                              return false
                        } 
                    })();
                    ;
                     return  await async function(){
                        if (check_true( (simple_target_ques_&&simple_method_ques_))) {
                             return await compile_call_inner(tokens,ctx,{
                                type:0,preamble:preamble
                            })
                        } else if (check_true(simple_target_ques_)) {
                             return await compile_call_inner(tokens,ctx,{
                                type:0,preamble:preamble
                            })
                        } else  {
                             return [(preamble && preamble["2"]),(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{",await compile_call_inner(tokens,ctx,{
                                type:2,preamble:preamble
                            })," ","}",")","()"]
                        }
                    } ()
                };
                compile_call_inner=async function(tokens,ctx,opts) {
                    let acc;
                    let target;
                    let idx;
                    let preamble;
                    let add_args;
                    let method;
                    acc=[];
                    target=null;
                    idx=-1;
                    preamble=(opts && opts["preamble"]);
                    add_args=async function() {
                         return  await (async function() {
                            let __for_body__381=async function(token) {
                                (acc).push(",");
                                 return  (acc).push(await wrap_assignment_value(await compile(token,ctx),ctx))
                            };
                            let __array__382=[],__elements__380=await tokens["slice"].call(tokens,3);
                            let __BREAK__FLAG__=false;
                            for(let __iter__379 in __elements__380) {
                                __array__382.push(await __for_body__381(__elements__380[__iter__379]));
                                if(__BREAK__FLAG__) {
                                     __array__382.pop();
                                    break;
                                    
                                }
                            }return __array__382;
                             
                        })()
                    };
                    method=null;
                    if (check_true (((tokens && tokens.length)<3))){
                        throw new SyntaxError(("call: missing arguments, requires at least 2"));
                        
                    };
                    target=await wrap_assignment_value(await compile((tokens && tokens["1"]),ctx),ctx);
                    method=await wrap_assignment_value(await compile((tokens && tokens["2"]),ctx),ctx);
                    await async function(){
                        if (check_true( (((opts && opts["type"])===0)||((opts && opts["type"])===1)))) {
                             return  await async function(){
                                if (check_true( ((tokens && tokens.length)===3))) {
                                     return await (async function() {
                                        let __for_body__385=async function(t) {
                                             return  (acc).push(t)
                                        };
                                        let __array__386=[],__elements__384=await (async function(){
                                            let __array_op_rval__387=(preamble && preamble["0"]);
                                             if (__array_op_rval__387 instanceof Function){
                                                return await __array_op_rval__387(" ",target,"[",method,"]","()") 
                                            } else {
                                                return[__array_op_rval__387," ",target,"[",method,"]","()"]
                                            }
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__383 in __elements__384) {
                                            __array__386.push(await __for_body__385(__elements__384[__iter__383]));
                                            if(__BREAK__FLAG__) {
                                                 __array__386.pop();
                                                break;
                                                
                                            }
                                        }return __array__386;
                                         
                                    })()
                                } else  {
                                    await (async function() {
                                        let __for_body__390=async function(t) {
                                             return  (acc).push(t)
                                        };
                                        let __array__391=[],__elements__389=await (async function(){
                                            let __array_op_rval__392=(preamble && preamble["0"]);
                                             if (__array_op_rval__392 instanceof Function){
                                                return await __array_op_rval__392(" ",target,"[",method,"]",".call","(",target) 
                                            } else {
                                                return[__array_op_rval__392," ",target,"[",method,"]",".call","(",target]
                                            }
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__388 in __elements__389) {
                                            __array__391.push(await __for_body__390(__elements__389[__iter__388]));
                                            if(__BREAK__FLAG__) {
                                                 __array__391.pop();
                                                break;
                                                
                                            }
                                        }return __array__391;
                                         
                                    })();
                                    await add_args();
                                     return  (acc).push(")")
                                }
                            } ()
                        } else if (check_true( ((opts && opts["type"])===2))) {
                            await (async function() {
                                let __for_body__395=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__396=[],__elements__394=["{"," ","let"," ","__call_target__","=",target,","," ","__call_method__","=",method,";"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__393 in __elements__394) {
                                    __array__396.push(await __for_body__395(__elements__394[__iter__393]));
                                    if(__BREAK__FLAG__) {
                                         __array__396.pop();
                                        break;
                                        
                                    }
                                }return __array__396;
                                 
                            })();
                            await async function(){
                                if (check_true( ((tokens && tokens.length)===3))) {
                                     return await (async function() {
                                        let __for_body__399=async function(t) {
                                             return  (acc).push(t)
                                        };
                                        let __array__400=[],__elements__398=["return"," ",(preamble && preamble["0"])," ","__call_target__","[","__call_method__","]","()"];
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__397 in __elements__398) {
                                            __array__400.push(await __for_body__399(__elements__398[__iter__397]));
                                            if(__BREAK__FLAG__) {
                                                 __array__400.pop();
                                                break;
                                                
                                            }
                                        }return __array__400;
                                         
                                    })()
                                } else  {
                                    await (async function() {
                                        let __for_body__403=async function(t) {
                                             return  (acc).push(t)
                                        };
                                        let __array__404=[],__elements__402=["return"," ",(preamble && preamble["0"])," ","__call_target__","[","__call_method__","]",".","call","(","__call_target__"];
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__401 in __elements__402) {
                                            __array__404.push(await __for_body__403(__elements__402[__iter__401]));
                                            if(__BREAK__FLAG__) {
                                                 __array__404.pop();
                                                break;
                                                
                                            }
                                        }return __array__404;
                                         
                                    })();
                                    await add_args();
                                     return  (acc).push(")")
                                }
                            } ();
                             return  (acc).push("}")
                        }
                    } ();
                     return  acc
                };
                check_needs_wrap=async function(stmts) {
                    let fst;
                    fst=(((stmts instanceof Array)&&await first(stmts)&&(await first(stmts) instanceof Object)&&await not(await (async function(){
                        let __targ__405=await first(stmts);
                        if (__targ__405){
                             return(__targ__405)["ctype"]
                        } 
                    })() instanceof Function)&&await (async function(){
                        let __targ__406=await first(stmts);
                        if (__targ__406){
                             return(__targ__406)["ctype"]
                        } 
                    })()&&await async function(){
                        if (check_true( (await (async function(){
                            let __targ__407=await first(stmts);
                            if (__targ__407){
                                 return(__targ__407)["ctype"]
                            } 
                        })() instanceof String || typeof await (async function(){
                            let __targ__407=await first(stmts);
                            if (__targ__407){
                                 return(__targ__407)["ctype"]
                            } 
                        })()==='string'))) {
                             return await (async function(){
                                let __targ__408=await first(stmts);
                                if (__targ__408){
                                     return(__targ__408)["ctype"]
                                } 
                            })()
                        } else  {
                             return await sub_type(await (async function(){
                                let __targ__409=await first(stmts);
                                if (__targ__409){
                                     return(__targ__409)["ctype"]
                                } 
                            })())
                        }
                    } ())||"");
                     return  await async function(){
                        if (check_true( await contains_ques_("block",fst))) {
                             return true
                        } else  {
                             return false
                        }
                    } ()
                };
                compile_import=async function(tokens,ctx) {
                    let symbol_tokens;
                    let __symbols__410= async function(){
                        return []
                    };
                    let from_tokens;
                    let from_place;
                    let acc;
                    {
                        symbol_tokens=(tokens && tokens["1"]);
                        let symbols=await __symbols__410();
                        ;
                        from_tokens=null;
                        from_place=null;
                        acc=[];
                        if (check_true (((tokens && tokens.length)<3)))throw new SyntaxError("import requires exactly three arguments");
                        ;
                        symbol_tokens=(tokens && tokens["1"]);
                        from_tokens=(tokens && tokens["2"]);
                        from_place=await compile(from_tokens,ctx);
                        (acc).push({
                            ctype:"statement",meta:{
                                imported_from:from_place
                            }
                        });
                        (acc).push("import");
                        (acc).push(" ");
                        await async function(){
                            if (check_true( ((symbol_tokens && symbol_tokens["val"]) instanceof Array))) {
                                await (async function() {
                                    let __for_body__413=async function(s) {
                                         return  (symbols).push((s && s.name))
                                    };
                                    let __array__414=[],__elements__412=(symbol_tokens && symbol_tokens["val"]);
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__411 in __elements__412) {
                                        __array__414.push(await __for_body__413(__elements__412[__iter__411]));
                                        if(__BREAK__FLAG__) {
                                             __array__414.pop();
                                            break;
                                            
                                        }
                                    }return __array__414;
                                     
                                })();
                                 return  await (async function() {
                                    let __for_body__417=async function(t) {
                                         return  (acc).push(t)
                                    };
                                    let __array__418=[],__elements__416=await flatten(["{"," ",symbols," ","}"," ","from"," ",from_place]);
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__415 in __elements__416) {
                                        __array__418.push(await __for_body__417(__elements__416[__iter__415]));
                                        if(__BREAK__FLAG__) {
                                             __array__418.pop();
                                            break;
                                            
                                        }
                                    }return __array__418;
                                     
                                })()
                            } else  {
                                 throw new SyntaxError("import requires an array of imported symbols as a second argument");
                                
                            }
                        } ();
                         return  acc
                    }
                };
                compile_dynamic_import=async function(tokens,ctx) {
                    let from_tokens;
                    let preamble;
                    let from_place;
                    let can_be_static;
                    let imported_from;
                    let acc;
                    from_tokens=null;
                    preamble=await calling_preamble(ctx);
                    from_place=null;
                    can_be_static=false;
                    imported_from=null;
                    acc=[];
                    ;
                    from_tokens=(tokens && tokens["1"]);
                    from_place=await compile(from_tokens,ctx);
                    imported_from=await (async function () {
                         if (check_true ((from_place instanceof Array))){
                              return (from_place && from_place["1"])
                        } else {
                              return from_place
                        } 
                    })();
                    if (check_true (((imported_from instanceof String || typeof imported_from==='string')&&await starts_with_ques_("\"",imported_from)&&await (await Environment.get_global("ends_with?"))("\"",imported_from)))){
                        can_be_static=true;
                         imported_from=await imported_from["substr"].call(imported_from,1,((imported_from && imported_from.length)-2))
                    };
                    await async function(){
                        external_dependencies[imported_from]=true;
                        return external_dependencies;
                        
                    }();
                    (acc).push({
                        ctype:"statement",meta:await (async function() {
                            if (check_true (can_be_static)){
                                  return {
                                    initializer:["=:dynamic_import",imported_from]
                                }
                            } else {
                                  return new Object()
                            }
                        } )()
                    });
                    await (async function() {
                        let __for_body__422=async function(t) {
                             return  (acc).push(t)
                        };
                        let __array__423=[],__elements__421=await flatten([(preamble && preamble["0"])," ","import"," ","(",from_place,")"]);
                        let __BREAK__FLAG__=false;
                        for(let __iter__420 in __elements__421) {
                            __array__423.push(await __for_body__422(__elements__421[__iter__420]));
                            if(__BREAK__FLAG__) {
                                 __array__423.pop();
                                break;
                                
                            }
                        }return __array__423;
                         
                    })();
                     return  acc
                };
                compile_javascript=async function(tokens,ctx) {
                    let acc;
                    let text;
                    acc=[];
                    text=null;
                    await (async function() {
                        let __for_body__426=async function(t) {
                             return  await async function(){
                                if (check_true((t && t["ref"]))) {
                                     return (acc).push((t && t.name))
                                } else if (check_true( ((t && t["val"]) instanceof Array))) {
                                     return (acc).push(await compile(t,ctx))
                                } else  {
                                     return (acc).push((t && t["val"]))
                                }
                            } ()
                        };
                        let __array__427=[],__elements__425=(await (await Environment.get_global("rest"))(tokens)||[]);
                        let __BREAK__FLAG__=false;
                        for(let __iter__424 in __elements__425) {
                            __array__427.push(await __for_body__426(__elements__425[__iter__424]));
                            if(__BREAK__FLAG__) {
                                 __array__427.pop();
                                break;
                                
                            }
                        }return __array__427;
                         
                    })();
                     return  acc
                };
                compile_set_global=async function(tokens,ctx,opts) {
                    let target;
                    let wrap_as_function_ques_;
                    let preamble;
                    let acc;
                    let clog;
                    let metavalue;
                    let assignment_value;
                    target=(tokens && tokens["1"] && tokens["1"]["name"]);
                    wrap_as_function_ques_=null;
                    preamble=await calling_preamble(ctx);
                    acc=null;
                    clog=await (async function () {
                         if (check_true ((opts && opts["quiet_mode"]))){
                              return log
                        } else {
                              return await defclog({
                                prefix:"compile_set_global",color:"blue",background:"#205020"
                            })
                        } 
                    })();
                    metavalue=null;
                    assignment_value=null;
                    ;
                    has_lisp_globals=true;
                    await async function(){
                        let __target_obj__428=(root_ctx && root_ctx["defined_lisp_globals"]);
                        __target_obj__428[target]=AsyncFunction;
                        return __target_obj__428;
                        
                    }();
                    if (check_true ((tokens && tokens["3"]))){
                         metavalue=await (async function () {
                             if (check_true (await (async function(){
                                let __array_op_rval__429=is_complex_ques_;
                                 if (__array_op_rval__429 instanceof Function){
                                    return await __array_op_rval__429((tokens && tokens["3"])) 
                                } else {
                                    return[__array_op_rval__429,(tokens && tokens["3"])]
                                }
                            })())){
                                  return await compile_wrapper_fn((tokens && tokens["3"]),ctx)
                            } else {
                                  return await compile((tokens && tokens["3"]),ctx)
                            } 
                        })()
                    };
                    assignment_value=await (async function ()  {
                         return  await compile((tokens && tokens["2"]),ctx)
                    } )();
                    wrap_as_function_ques_=await check_needs_wrap(assignment_value);
                    await async function(){
                        if (check_true( (((assignment_value && assignment_value["0"]) instanceof Object)&&(assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])))) {
                            if (check_true ((assignment_value && assignment_value["0"] && assignment_value["0"]["meta"]))){
                                if (check_true (await not(metavalue))){
                                     metavalue=await quote_tree((assignment_value && assignment_value["0"] && assignment_value["0"]["meta"]),ctx)
                                }
                            };
                            await async function(){
                                let __target_obj__430=(root_ctx && root_ctx["defined_lisp_globals"]);
                                __target_obj__430[target]=await async function(){
                                    if (check_true( ((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])==="Function"))) {
                                         return Function
                                    } else if (check_true( ((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])==="AsyncFunction"))) {
                                         return AsyncFunction
                                    } else if (check_true( ((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])==="Number"))) {
                                         return NumberType
                                    } else if (check_true( ((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])==="expression"))) {
                                         return Expression
                                    } else  {
                                         return (assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])
                                    }
                                } ();
                                return __target_obj__430;
                                
                            }();
                            if (check_true (wrap_as_function_ques_)){
                                 return  assignment_value=[(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function"," ","()",assignment_value,")","()"]
                            }
                        } else  {
                            if (check_true (((assignment_value instanceof Array)&&((assignment_value && assignment_value["0"])==="await")))){
                                  return await async function(){
                                    let __target_obj__431=(root_ctx && root_ctx["defined_lisp_globals"]);
                                    __target_obj__431[target]=AsyncFunction;
                                    return __target_obj__431;
                                    
                                }()
                            } else {
                                  return await async function(){
                                    let __target_obj__432=(root_ctx && root_ctx["defined_lisp_globals"]);
                                    __target_obj__432[target]=assignment_value;
                                    return __target_obj__432;
                                    
                                }()
                            }
                        }
                    } ();
                    if (check_true (await verbosity(ctx))){
                        (clog)("target: ",await (await Environment.get_global("as_lisp"))(target));
                         (clog)("assignment_value: ",await (await Environment.get_global("as_lisp"))(assignment_value))
                    };
                    acc=await (async function ()  {
                        let __array_arg__435=(async function() {
                            if (check_true (((Function===await (async function(){
                                let __targ__433=(root_ctx && root_ctx["defined_lisp_globals"]);
                                if (__targ__433){
                                     return(__targ__433)[target]
                                } 
                            })())||await (async function(){
                                let __array_op_rval__434=in_sync_ques_;
                                 if (__array_op_rval__434 instanceof Function){
                                    return await __array_op_rval__434(ctx) 
                                } else {
                                    return[__array_op_rval__434,ctx]
                                }
                            })()))){
                                  return ""
                            } else {
                                  return "await"
                            }
                        } );
                        let __array_arg__436=(async function() {
                            if (check_true ((metavalue||(opts && opts["constant"])))){
                                  return ","
                            } else {
                                  return ""
                            }
                        } );
                        let __array_arg__437=(async function() {
                            if (check_true (metavalue)){
                                  return metavalue
                            } else {
                                 if (check_true ((opts && opts["constant"]))){
                                      return "null"
                                } else {
                                      return ""
                                }
                            }
                        } );
                        let __array_arg__438=(async function() {
                            if (check_true ((opts && opts["constant"]))){
                                  return ","
                            } else {
                                  return ""
                            }
                        } );
                        let __array_arg__439=(async function() {
                            if (check_true ((opts && opts["constant"]))){
                                  return "true"
                            } else {
                                  return ""
                            }
                        } );
                        return [{
                            ctype:"statement"
                        },await __array_arg__435()," ","Environment",".","set_global","(","","\"",(tokens && tokens["1"] && tokens["1"]["name"]),"\"",",",assignment_value,await __array_arg__436(),await __array_arg__437(),await __array_arg__438(),await __array_arg__439(),")"]
                    } )();
                     return  acc
                };
                is_token_ques_=async function(t) {
                     return  (((t instanceof Object)&&(t && t["__token__"]))||((t instanceof Array)&&((t && t["0"]) instanceof Object)&&(t && t["0"] && t["0"]["__token__"])))
                };
                compile_quote=async function(lisp_struct,ctx) {
                    let acc;
                    acc=[];
                    ctx=await new_ctx(ctx);
                    acc=await compile_quotem(lisp_struct,ctx);
                     return  acc
                };
                compile_quotel=async function(lisp_struct,ctx) {
                    let acc;
                    acc=[];
                    acc=await JSON.stringify((lisp_struct && lisp_struct["1"]));
                     return  await (async function(){
                        let __array_op_rval__440=acc;
                         if (__array_op_rval__440 instanceof Function){
                            return await __array_op_rval__440() 
                        } else {
                            return[__array_op_rval__440]
                        }
                    })()
                };
                wrap_and_run=async function(js_code,ctx,run_opts) {
                    let __assembly__441= async function(){
                        return null
                    };
                    let result;
                    let fst;
                    let ctype;
                    let comp_meta;
                    let needs_braces_ques_;
                    let in_quotem;
                    let run_log;
                    let __needs_return_ques___442= async function(){
                        return await (async function ()  {
                            ctype=await (async function () {
                                 if (check_true (((js_code instanceof Array)&&await first(js_code)&&(await first(js_code) instanceof Object)&&await (async function(){
                                    let __targ__443=await first(js_code);
                                    if (__targ__443){
                                         return(__targ__443)["ctype"]
                                    } 
                                })()))){
                                      return await (async function(){
                                        let __targ__444=await first(js_code);
                                        if (__targ__444){
                                             return(__targ__444)["ctype"]
                                        } 
                                    })()
                                } 
                            })();
                            if (check_true (((typeof ctype==="object")&&await not((ctype instanceof Object))))){
                                 fst=""
                            } else {
                                 fst=(""+(ctype||""))
                            };
                            if (check_true (fst instanceof Function)){
                                 fst=await sub_type(fst)
                            };
                             return  await async function(){
                                if (check_true( await contains_ques_("block",fst))) {
                                    if (check_true ((fst==="ifblock"))){
                                         needs_braces_ques_=true
                                    } else {
                                         needs_braces_ques_=false
                                    };
                                     return  false
                                } else if (check_true( (await first(js_code)==="throw"))) {
                                    needs_braces_ques_=false;
                                     return  false
                                } else  {
                                    needs_braces_ques_=true;
                                     return  true
                                }
                            } ()
                        } )()
                    };
                    let assembled;
                    {
                        let assembly=await __assembly__441();
                        ;
                        result=null;
                        fst=null;
                        ctype=null;
                        comp_meta=null;
                        needs_braces_ques_=false;
                        in_quotem=await get_ctx(ctx,"__IN_QUOTEM__");
                        run_log=await (async function () {
                             if (check_true ((opts && opts["quiet_mode"]))){
                                  return log
                            } else {
                                  return await defclog({
                                    prefix:"wrap_and_run",background:"#703030",color:"white"
                                })
                            } 
                        })();
                        let needs_return_ques_=await __needs_return_ques___442();
                        ;
                        assembled=null;
                        ;
                        if (check_true ((false&&await not((opts && opts["root_environment"]))&&((first_level_setup && first_level_setup.length)===0)&&has_lisp_globals))){
                             (first_level_setup).push(["const __GG__=",env_ref,"get_global",";"])
                        };
                        assembled=await (await Environment.get_global("splice_in_return_b"))(await (await Environment.get_global("splice_in_return_a"))(js_code));
                        if (check_true ((target_namespace&&((assembled && assembled["0"]) instanceof Object)&&await not((target_namespace===(Environment && Environment["namespace"])))))){
                            comp_meta=await first(assembled);
                            await async function(){
                                comp_meta["namespace"]=target_namespace;
                                return comp_meta;
                                
                            }();
                            if (check_true ((await verbosity(ctx)&&(comp_meta && comp_meta["namespace"])))){
                                 (run_log)("specified namespace: ",(comp_meta && comp_meta["namespace"]))
                            };
                            result=await Environment["evaluate_local"].call(Environment,await (async function(){
                                let __array_op_rval__446=comp_meta;
                                 if (__array_op_rval__446 instanceof Function){
                                    return await __array_op_rval__446(await assemble_output(assembled)) 
                                } else {
                                    return[__array_op_rval__446,await assemble_output(assembled)]
                                }
                            })(),ctx,{
                                compiled_source:true
                            });
                            if (check_true (await verbosity(ctx))){
                                 (run_log)("<- ",result)
                            };
                             return  result
                        } else {
                            assembled=await assemble_output(assembled);
                            assembled=await add(await (async function() {
                                 if (check_true (needs_braces_ques_)){
                                      return "{"
                                } else {
                                      return ""
                                } 
                            } )(),await (async function() {
                                 if (check_true (needs_return_ques_)){
                                      return " return "
                                } else {
                                      return ""
                                } 
                            } )(),assembled,await (async function() {
                                 if (check_true (needs_braces_ques_)){
                                      return "}"
                                } else {
                                      return ""
                                } 
                            } )());
                            if (check_true (await verbosity(ctx))){
                                 (run_log)("assembled: ",assembled)
                            };
                            assembly=new AsyncFunction("Environment",assembled);
                            if (check_true ((run_opts && run_opts["bind_mode"]))){
                                 assembly=await (await Environment.get_global("bind_function"))(assembly,Environment)
                            };
                            result=await assembly(Environment);
                            if (check_true (await verbosity(ctx))){
                                 (run_log)("<- ",result)
                            };
                             return  result
                        }
                    }
                };
                quote_tree=async function(lisp_tree,ctx,_acc) {
                    let acc;
                    let mode;
                    let in_concat;
                    let in_lambda_ques_;
                    acc=(_acc||[]);
                    mode=0;
                    in_concat=false;
                    in_lambda_ques_=false;
                    await async function(){
                        if (check_true( (lisp_tree instanceof Array))) {
                            (acc).push("[");
                            await map(async function(elem,i,t) {
                                if (check_true ((mode===1))){
                                     return  mode=0
                                } else {
                                    await async function(){
                                        if (check_true( (("=:##"===elem)||("=:unquotem"===elem)))) {
                                            if (check_true (in_concat)){
                                                 (acc).push(await compile_wrapper_fn(await tokenize([lisp_tree[await add(i,1)]],ctx),ctx))
                                            } else {
                                                 (acc).push(await compile_wrapper_fn(await tokenize(lisp_tree[await add(i,1)],ctx),ctx))
                                            };
                                             return  mode=1
                                        } else if (check_true( ("=$,@"===elem))) {
                                            if (check_true (await not(in_concat))){
                                                 (acc).push("].concat(")
                                            };
                                            (acc).push(await compile_wrapper_fn(await tokenize(lisp_tree[await add(i,1)],ctx),ctx));
                                            in_concat=true;
                                             return  mode=1
                                        } else  {
                                            if (check_true (in_concat)){
                                                  return await quote_tree(await (async function(){
                                                    let __array_op_rval__447=elem;
                                                     if (__array_op_rval__447 instanceof Function){
                                                        return await __array_op_rval__447() 
                                                    } else {
                                                        return[__array_op_rval__447]
                                                    }
                                                })(),ctx,acc)
                                            } else {
                                                  return await quote_tree(elem,ctx,acc)
                                            }
                                        }
                                    } ();
                                    if (check_true ((i<(t-1)))){
                                          return (acc).push(",")
                                    }
                                }
                            },lisp_tree);
                            if (check_true ((","===await last(acc)))){
                                 (acc).pop()
                            };
                            if (check_true (in_concat)){
                                  return (acc).push(")")
                            } else {
                                  return (acc).push("]")
                            }
                        } else if (check_true( (lisp_tree instanceof Object))) {
                            (acc).push("{ ");
                            await map(async function(k,i,t) {
                                (acc).push(await JSON.stringify(k));
                                (acc).push(":");
                                await quote_tree(lisp_tree[k],ctx,acc);
                                if (check_true ((i<(t-1)))){
                                      return (acc).push(",")
                                }
                            },await (await Environment.get_global("keys"))(lisp_tree));
                             return  (acc).push("}")
                        } else if (check_true( (lisp_tree instanceof String || typeof lisp_tree==='string'))) {
                             return (acc).push(await JSON.stringify(lisp_tree))
                        } else  {
                             return (acc).push(lisp_tree)
                        }
                    } ();
                     return  acc
                };
                quotem_log=await (async function () {
                     if (check_true ((opts && opts["quiet_mode"]))){
                          return log
                    } else {
                          return await defclog({
                            prefix:"compile_quotem",background:"#503090",color:"white"
                        })
                    } 
                })();
                compile_quotem=async function(lisp_struct,ctx) {
                    let acc;
                    let quoted_js;
                    acc=[];
                    ctx=await new_ctx(ctx);
                    quoted_js=null;
                    await set_ctx(ctx,"__IN_QUOTEM__",true);
                    if (check_true (await verbosity(ctx))){
                        {
                            let __array_arg__448=(async function() {
                                if (check_true (await get_ctx(ctx,"__IN_LAMBDA__"))){
                                      return "[IN LAMBDA]"
                                } else {
                                      return ""
                                }
                            } );
                            (quotem_log)("->",await __array_arg__448(),await JSON.stringify((lisp_struct && lisp_struct["1"])))
                        }
                    };
                    if (check_true (await get_ctx(ctx,"__IN_LAMBDA__"))){
                         quoted_js=await quote_tree((lisp_struct && lisp_struct["1"]),ctx)
                    } else {
                         quoted_js=await quote_tree((lisp_struct && lisp_struct["1"]),ctx)
                    };
                    if (check_true (await verbosity(ctx))){
                         (quotem_log)("<-",await (await Environment.get_global("as_lisp"))(quoted_js))
                    };
                     return  quoted_js
                };
                compile_unquotem=async function(lisp_struct,ctx) {
                    let acc;
                    acc=[];
                    (acc).push(await compile((lisp_struct && lisp_struct["1"]),ctx));
                     return  acc
                };
                eval_log=await (async function () {
                     if (check_true ((opts && opts["quiet_mode"]))){
                          return log
                    } else {
                          return await defclog({
                            prefix:"compile_eval",background:"#705030",color:"white"
                        })
                    } 
                })();
                compile_eval=async function(tokens,ctx) {
                    let __assembly__449= async function(){
                        return null
                    };
                    let type_mark;
                    let acc;
                    let preamble;
                    let result;
                    {
                        let assembly=await __assembly__449();
                        ;
                        type_mark=null;
                        acc=[];
                        preamble=await calling_preamble(ctx);
                        result=null;
                        assembly=await compile((tokens && tokens["1"]),ctx);
                        if (check_true (await verbosity(ctx))){
                             (eval_log)("assembly:",await clone(assembly))
                        };
                        has_lisp_globals=true;
                        result=["Environment",".","eval","(",(preamble && preamble["0"])," ",(preamble && preamble["1"])," ","function","()",["{","return"," ",assembly,"}","()",")"]];
                         return  result
                    }
                };
                compile_debug=async function(tokens,ctx) {
                     return  [{
                        ctype:"statement"
                    },"debugger",";"]
                };
                compile_for_each=async function(tokens,ctx) {
                    let preamble;
                    preamble=await calling_preamble(ctx);
                    ;
                     return  await (async function(){
                        let __array_op_rval__450=(preamble && preamble["2"]);
                         if (__array_op_rval__450 instanceof Function){
                            return await __array_op_rval__450((preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{",await compile_for_each_inner(tokens,ctx,preamble)," ","}",")","()") 
                        } else {
                            return[__array_op_rval__450,(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{",await compile_for_each_inner(tokens,ctx,preamble)," ","}",")","()"]
                        }
                    })()
                };
                compile_for_each_inner=async function(tokens,ctx,preamble) {
                    let acc;
                    let idx;
                    let stmts;
                    let idx_iter;
                    let idx_iters;
                    let element_list;
                    let body_function_ref;
                    let collector_ref;
                    let prebuild;
                    let for_args;
                    let iterator_ref;
                    let elements;
                    let iter_count;
                    let for_body;
                    let body_is_block_ques_;
                    acc=[];
                    idx=0;
                    stmts=[];
                    ctx=await new_ctx(ctx);
                    idx_iter=await gen_temp_name("iter");
                    idx_iters=[];
                    element_list=await gen_temp_name("elements");
                    body_function_ref=await gen_temp_name("for_body");
                    collector_ref=await gen_temp_name("array");
                    prebuild=[];
                    for_args=(tokens && tokens["1"] && tokens["1"]["val"]);
                    iterator_ref=(for_args && for_args["0"]);
                    elements=await last(for_args);
                    iter_count=await (async function () {
                         if (check_true (for_args)){
                              return ((for_args && for_args.length)-1)
                        } else {
                              return 0
                        } 
                    })();
                    for_body=(tokens && tokens["2"]);
                    body_is_block_ques_=await (async function(){
                        let __array_op_rval__451=is_block_ques_;
                         if (__array_op_rval__451 instanceof Function){
                            return await __array_op_rval__451((for_body && for_body["val"])) 
                        } else {
                            return[__array_op_rval__451,(for_body && for_body["val"])]
                        }
                    })();
                    if (check_true ((iter_count<1))){
                        throw new SyntaxError("Invalid for_each arguments");
                        
                    };
                    await (async function() {
                        let __for_body__454=async function(iter_idx) {
                            (idx_iters).push(for_args[iter_idx]);
                             return  await set_ctx(ctx,await clean_quoted_reference(await (async function(){
                                let __targ__456=await last(idx_iters);
                                if (__targ__456){
                                     return(__targ__456)["name"]
                                } 
                            })()),ArgumentType)
                        };
                        let __array__455=[],__elements__453=await (await Environment.get_global("range"))(iter_count);
                        let __BREAK__FLAG__=false;
                        for(let __iter__452 in __elements__453) {
                            __array__455.push(await __for_body__454(__elements__453[__iter__452]));
                            if(__BREAK__FLAG__) {
                                 __array__455.pop();
                                break;
                                
                            }
                        }return __array__455;
                         
                    })();
                    await set_ctx(ctx,collector_ref,ArgumentType);
                    await set_ctx(ctx,element_list,"arg");
                    if (check_true (await not(body_is_block_ques_))){
                         for_body=await make_do_block(for_body)
                    };
                    prebuild=await build_fn_with_assignment(body_function_ref,(for_body && for_body["val"]),idx_iters,ctx);
                    await async function(){
                        ctx["return_last_value"]=true;
                        return ctx;
                        
                    }();
                    (acc).push(await compile(prebuild,ctx));
                    await (async function() {
                        let __for_body__460=async function(t) {
                             return  (acc).push(t)
                        };
                        let __array__461=[],__elements__459=["let"," ",collector_ref,"=","[]",",",element_list,"=",await wrap_assignment_value(await compile(elements,ctx),ctx),";"];
                        let __BREAK__FLAG__=false;
                        for(let __iter__458 in __elements__459) {
                            __array__461.push(await __for_body__460(__elements__459[__iter__458]));
                            if(__BREAK__FLAG__) {
                                 __array__461.pop();
                                break;
                                
                            }
                        }return __array__461;
                         
                    })();
                    await (async function() {
                        let __for_body__464=async function(t) {
                             return  (acc).push(t)
                        };
                        let __array__465=[],__elements__463=["let"," ",break_out,"=","false",";"];
                        let __BREAK__FLAG__=false;
                        for(let __iter__462 in __elements__463) {
                            __array__465.push(await __for_body__464(__elements__463[__iter__462]));
                            if(__BREAK__FLAG__) {
                                 __array__465.pop();
                                break;
                                
                            }
                        }return __array__465;
                         
                    })();
                    if (check_true (await (await Environment.get_global("blank?"))((preamble && preamble["0"])))){
                         await set_ctx(ctx,body_function_ref,Function)
                    } else {
                         await set_ctx(ctx,body_function_ref,AsyncFunction)
                    };
                    await async function(){
                        if (check_true( (((for_args && for_args.length)===2)&&await not(((for_args && for_args["1"]) instanceof Array))))) {
                            await set_ctx(ctx,idx_iter,NumberType);
                            await (async function() {
                                let __for_body__468=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__469=[],__elements__467=["for","(","let"," ",idx_iter," ","in"," ",element_list,")"," ","{"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__466 in __elements__467) {
                                    __array__469.push(await __for_body__468(__elements__467[__iter__466]));
                                    if(__BREAK__FLAG__) {
                                         __array__469.pop();
                                        break;
                                        
                                    }
                                }return __array__469;
                                 
                            })();
                            await (async function() {
                                let __for_body__472=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__473=[],__elements__471=await (async function(){
                                    let __array_op_rval__474=collector_ref;
                                     if (__array_op_rval__474 instanceof Function){
                                        return await __array_op_rval__474(".","push","(",(preamble && preamble["0"])," ",body_function_ref,"(",element_list,"[",idx_iter,"]",")",")",";") 
                                    } else {
                                        return[__array_op_rval__474,".","push","(",(preamble && preamble["0"])," ",body_function_ref,"(",element_list,"[",idx_iter,"]",")",")",";"]
                                    }
                                })();
                                let __BREAK__FLAG__=false;
                                for(let __iter__470 in __elements__471) {
                                    __array__473.push(await __for_body__472(__elements__471[__iter__470]));
                                    if(__BREAK__FLAG__) {
                                         __array__473.pop();
                                        break;
                                        
                                    }
                                }return __array__473;
                                 
                            })();
                            await (async function() {
                                let __for_body__477=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__478=[],__elements__476=["if","(",break_out,")"," ","{"," ",collector_ref,".","pop","()",";","break",";","}"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__475 in __elements__476) {
                                    __array__478.push(await __for_body__477(__elements__476[__iter__475]));
                                    if(__BREAK__FLAG__) {
                                         __array__478.pop();
                                        break;
                                        
                                    }
                                }return __array__478;
                                 
                            })();
                             return  (acc).push("}")
                        }
                    } ();
                    (acc).push("return");
                    (acc).push(" ");
                    (acc).push(collector_ref);
                    (acc).push(";");
                     return  acc
                };
                compile_while=async function(tokens,ctx) {
                    let acc;
                    let idx;
                    let preamble;
                    let test_condition;
                    let test_condition_ref;
                    let body;
                    let body_ref;
                    let prebuild;
                    acc=[];
                    idx=0;
                    ctx=await new_ctx(ctx);
                    preamble=await calling_preamble(ctx);
                    test_condition=(tokens && tokens["1"]);
                    test_condition_ref=await gen_temp_name("test_condition");
                    body=(tokens && tokens["2"]);
                    body_ref=await gen_temp_name("body_ref");
                    prebuild=[];
                    ;
                    await set_ctx(ctx,break_out,true);
                    if (check_true ((test_condition && test_condition["ref"]))){
                         (prebuild).push(await compile(await build_fn_with_assignment(test_condition_ref,(test_condition && test_condition["name"]),null,ctx),ctx))
                    } else {
                         (prebuild).push(await compile(await build_fn_with_assignment(test_condition_ref,(test_condition && test_condition["val"]),null,ctx),ctx))
                    };
                    (prebuild).push(await compile(await build_fn_with_assignment(body_ref,(body && body["val"]),null,ctx),ctx));
                    await (async function() {
                        let __for_body__481=async function(t) {
                             return  (prebuild).push(t)
                        };
                        let __array__482=[],__elements__480=["let"," ",break_out,"=","false",";"];
                        let __BREAK__FLAG__=false;
                        for(let __iter__479 in __elements__480) {
                            __array__482.push(await __for_body__481(__elements__480[__iter__479]));
                            if(__BREAK__FLAG__) {
                                 __array__482.pop();
                                break;
                                
                            }
                        }return __array__482;
                         
                    })();
                    await (async function() {
                        let __for_body__485=async function(t) {
                             return  (prebuild).push(t)
                        };
                        let __array__486=[],__elements__484=["while","(",(preamble && preamble["0"])," ",test_condition_ref,"()",")"," ","{",(preamble && preamble["0"])," ",body_ref,"()",";"," ","if","(",break_out,")"," ","{"," ","break",";","}","}"," ","",";"];
                        let __BREAK__FLAG__=false;
                        for(let __iter__483 in __elements__484) {
                            __array__486.push(await __for_body__485(__elements__484[__iter__483]));
                            if(__BREAK__FLAG__) {
                                 __array__486.pop();
                                break;
                                
                            }
                        }return __array__486;
                         
                    })();
                    await (async function() {
                        let __for_body__489=async function(t) {
                             return  (acc).push(t)
                        };
                        let __array__490=[],__elements__488=[(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()","{"," ",prebuild,"}",")","()"];
                        let __BREAK__FLAG__=false;
                        for(let __iter__487 in __elements__488) {
                            __array__490.push(await __for_body__489(__elements__488[__iter__487]));
                            if(__BREAK__FLAG__) {
                                 __array__490.pop();
                                break;
                                
                            }
                        }return __array__490;
                         
                    })();
                     return  acc
                };
                compile_for_with=async function(tokens,ctx,preamble) {
                    preamble=await calling_preamble(ctx);
                    ;
                     return  [(preamble && preamble["2"]),(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{",await compile_for_with_inner(tokens,ctx,preamble)," ","}",")","()"]
                };
                compile_for_with_inner=async function(tokens,ctx,preamble) {
                    let acc;
                    let idx;
                    let stmts;
                    let iter_ref;
                    let idx_iters;
                    let generator_expression;
                    let body_function_ref;
                    let prebuild;
                    let for_args;
                    let iterator_ref;
                    let elements;
                    let iter_count;
                    let for_body;
                    let body_is_block_ques_;
                    acc=[];
                    idx=0;
                    stmts=[];
                    ctx=await new_ctx(ctx);
                    iter_ref=await gen_temp_name("iter");
                    idx_iters=[];
                    generator_expression=await gen_temp_name("elements");
                    body_function_ref=await gen_temp_name("for_body");
                    prebuild=[];
                    for_args=(tokens && tokens["1"] && tokens["1"]["val"]);
                    iterator_ref=(for_args && for_args["0"]);
                    elements=await last(for_args);
                    iter_count=await (async function () {
                         if (check_true (for_args)){
                              return ((for_args && for_args.length)-1)
                        } else {
                              return 0
                        } 
                    })();
                    for_body=(tokens && tokens["2"]);
                    body_is_block_ques_=await (async function(){
                        let __array_op_rval__491=is_block_ques_;
                         if (__array_op_rval__491 instanceof Function){
                            return await __array_op_rval__491((for_body && for_body["val"])) 
                        } else {
                            return[__array_op_rval__491,(for_body && for_body["val"])]
                        }
                    })();
                    if (check_true ((iter_count<1))){
                        throw new SyntaxError("Invalid for_each arguments");
                        
                    };
                    await (async function() {
                        let __for_body__494=async function(iter_ref) {
                            (idx_iters).push(for_args[iter_ref]);
                             return  await set_ctx(ctx,await clean_quoted_reference(await (async function(){
                                let __targ__496=await last(idx_iters);
                                if (__targ__496){
                                     return(__targ__496)["name"]
                                } 
                            })()),ArgumentType)
                        };
                        let __array__495=[],__elements__493=await (await Environment.get_global("range"))(iter_count);
                        let __BREAK__FLAG__=false;
                        for(let __iter__492 in __elements__493) {
                            __array__495.push(await __for_body__494(__elements__493[__iter__492]));
                            if(__BREAK__FLAG__) {
                                 __array__495.pop();
                                break;
                                
                            }
                        }return __array__495;
                         
                    })();
                    await set_ctx(ctx,generator_expression,"arg");
                    if (check_true (await not(body_is_block_ques_))){
                         for_body=await make_do_block(for_body)
                    };
                    prebuild=await build_fn_with_assignment(body_function_ref,(for_body && for_body["val"]),idx_iters,ctx);
                    await async function(){
                        ctx["return_last_value"]=true;
                        return ctx;
                        
                    }();
                    (acc).push(await compile(prebuild,ctx));
                    await (async function() {
                        let __for_body__500=async function(t) {
                             return  (acc).push(t)
                        };
                        let __array__501=[],__elements__499=["let"," ",break_out,"=","false",";"];
                        let __BREAK__FLAG__=false;
                        for(let __iter__498 in __elements__499) {
                            __array__501.push(await __for_body__500(__elements__499[__iter__498]));
                            if(__BREAK__FLAG__) {
                                 __array__501.pop();
                                break;
                                
                            }
                        }return __array__501;
                         
                    })();
                    await set_ctx(ctx,body_function_ref,AsyncFunction);
                    await async function(){
                        if (check_true( (((for_args && for_args.length)===2)&&await not(((for_args && for_args["1"]) instanceof Array))))) {
                            await (async function() {
                                let __for_body__504=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__505=[],__elements__503=["for"," ",(preamble && preamble["0"])," ","(","const"," ",iter_ref," ","of"," ",await wrap_assignment_value(await compile(elements,ctx),ctx),")"," ","{"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__502 in __elements__503) {
                                    __array__505.push(await __for_body__504(__elements__503[__iter__502]));
                                    if(__BREAK__FLAG__) {
                                         __array__505.pop();
                                        break;
                                        
                                    }
                                }return __array__505;
                                 
                            })();
                            await (async function() {
                                let __for_body__508=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__509=[],__elements__507=await (async function(){
                                    let __array_op_rval__510=(preamble && preamble["0"]);
                                     if (__array_op_rval__510 instanceof Function){
                                        return await __array_op_rval__510(" ",body_function_ref,"(",iter_ref,")",";") 
                                    } else {
                                        return[__array_op_rval__510," ",body_function_ref,"(",iter_ref,")",";"]
                                    }
                                })();
                                let __BREAK__FLAG__=false;
                                for(let __iter__506 in __elements__507) {
                                    __array__509.push(await __for_body__508(__elements__507[__iter__506]));
                                    if(__BREAK__FLAG__) {
                                         __array__509.pop();
                                        break;
                                        
                                    }
                                }return __array__509;
                                 
                            })();
                            await (async function() {
                                let __for_body__513=async function(t) {
                                     return  (acc).push(t)
                                };
                                let __array__514=[],__elements__512=["if","(",break_out,")"," ","break",";"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__511 in __elements__512) {
                                    __array__514.push(await __for_body__513(__elements__512[__iter__511]));
                                    if(__BREAK__FLAG__) {
                                         __array__514.pop();
                                        break;
                                        
                                    }
                                }return __array__514;
                                 
                            })();
                             return  (acc).push("}")
                        }
                    } ();
                     return  acc
                };
                silence=async function() {
                     return  false
                };
                verbosity=silence;
                check_verbosity=async function(ctx) {
                     return  (await get_ctx(ctx,"__VERBOSITY__")||await Environment["get_global"].call(Environment,"__VERBOSITY__"))
                };
                declare_log=await (async function () {
                     if (check_true ((opts && opts["quiet_mode"]))){
                          return log
                    } else {
                          return await defclog({
                            prefix:"DECLARE",color:"white",background:"black"
                        })
                    } 
                })();
                compile_declare=async function(tokens,ctx) {
                    let expressions;
                    let targeted;
                    let acc;
                    let source;
                    let details;
                    let sanitized_name;
                    let declaration;
                    let dec_struct;
                    expressions=await (await Environment.get_global("rest"))(tokens);
                    targeted=null;
                    acc=[];
                    source=null;
                    details=null;
                    sanitized_name=null;
                    declaration=null;
                    dec_struct=null;
                    await (async function() {
                        let __for_body__517=async function(exp) {
                            declaration=(exp && exp["val"] && exp["val"]["0"] && exp["val"]["0"]["name"]);
                            targeted=await (await Environment.get_global("rest"))((exp && exp["val"]));
                            if (check_true (await (async function(){
                                let __array_op_rval__519=verbosity;
                                 if (__array_op_rval__519 instanceof Function){
                                    return await __array_op_rval__519(ctx) 
                                } else {
                                    return[__array_op_rval__519,ctx]
                                }
                            })())){
                                 (declare_log)("declaration: ",declaration,"targeted: ",await (await Environment.get_global("each"))(targeted,"name"),targeted)
                            };
                             return  await async function(){
                                if (check_true( (declaration==="toplevel"))) {
                                    await async function(){
                                        opts["root_environment"]=(targeted && targeted["0"]);
                                        return opts;
                                        
                                    }();
                                    if (check_true ((opts && opts["root_environment"]))){
                                          return env_ref=""
                                    } else {
                                          return env_ref="Environment."
                                    }
                                } else if (check_true( (declaration==="include"))) {
                                     return  await (async function() {
                                        let __for_body__523=async function(name) {
                                            sanitized_name=await sanitize_js_ref_name(name);
                                            dec_struct=await get_declaration_details(ctx,name);
                                            if (check_true (dec_struct)){
                                                await (async function() {
                                                    let __for_body__527=async function(t) {
                                                         return  (acc).push(t)
                                                    };
                                                    let __array__528=[],__elements__526=["let"," ",sanitized_name,"="];
                                                    let __BREAK__FLAG__=false;
                                                    for(let __iter__525 in __elements__526) {
                                                        __array__528.push(await __for_body__527(__elements__526[__iter__525]));
                                                        if(__BREAK__FLAG__) {
                                                             __array__528.pop();
                                                            break;
                                                            
                                                        }
                                                    }return __array__528;
                                                     
                                                })();
                                                await async function(){
                                                    if (check_true( ((dec_struct && dec_struct["value"]) instanceof Function&&await (async function(){
                                                        let __targ__530=await (async function(){
                                                            let __targ__529=(Environment && Environment["definitions"]);
                                                            if (__targ__529){
                                                                 return(__targ__529)[name]
                                                            } 
                                                        })();
                                                        if (__targ__530){
                                                             return(__targ__530)["fn_body"]
                                                        } 
                                                    })()))) {
                                                        details=await (async function(){
                                                            let __targ__531=(Environment && Environment["definitions"]);
                                                            if (__targ__531){
                                                                 return(__targ__531)[name]
                                                            } 
                                                        })();
                                                        source=("(fn "+(details && details["fn_args"])+" "+(details && details["fn_body"])+")");
                                                        source=await compile(await tokenize(await (await Environment.get_global("read_lisp"))(source),ctx),ctx,1000);
                                                        (acc).push(source);
                                                         await set_ctx(ctx,name,AsyncFunction)
                                                    } else if (check_true( (dec_struct && dec_struct["value"]) instanceof Function)) {
                                                        (acc).push(await (async function() {
                                                            {
                                                                 let __call_target__=await (dec_struct && dec_struct["value"])["toString"](), __call_method__="replace";
                                                                return await __call_target__[__call_method__].call(__call_target__,"\n","")
                                                            } 
                                                        })());
                                                         await set_ctx(ctx,name,AsyncFunction)
                                                    } else  {
                                                        (acc).push(await (dec_struct && dec_struct["value"])["toString"]());
                                                         await set_ctx(ctx,name,ArgumentType)
                                                    }
                                                } ();
                                                 (acc).push(";")
                                            };
                                            await set_declaration(ctx,name,"inlined",true);
                                            if (check_true ((("undefined"===await (async function(){
                                                let __targ__532=await get_declarations(ctx,name);
                                                if (__targ__532){
                                                     return(__targ__532)["type"]
                                                } 
                                            })())&&(dec_struct && dec_struct["value"]) instanceof Function))){
                                                  return await set_declaration(ctx,name,"type",Function)
                                            }
                                        };
                                        let __array__524=[],__elements__522=await (await Environment.get_global("each"))(targeted,"name");
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__521 in __elements__522) {
                                            __array__524.push(await __for_body__523(__elements__522[__iter__521]));
                                            if(__BREAK__FLAG__) {
                                                 __array__524.pop();
                                                break;
                                                
                                            }
                                        }return __array__524;
                                         
                                    })()
                                } else if (check_true( (declaration==="verbose"))) {
                                    let verbosity_level=await parseInt(await first(await (await Environment.get_global("each"))(targeted,"name")));
                                    ;
                                    if (check_true (await not(await isNaN(verbosity_level)))){
                                        if (check_true ((verbosity_level>0))){
                                             await set_ctx(ctx,"__VERBOSITY__",verbosity_level)
                                        } else {
                                            (declare_log)("verbosity: turned off");
                                            verbosity=silence;
                                             await set_ctx(ctx,"__VERBOSITY__",null)
                                        };
                                        verbosity=check_verbosity;
                                         return  (declare_log)("compiler: verbosity set: ",await (async function(){
                                            let __array_op_rval__533=verbosity;
                                             if (__array_op_rval__533 instanceof Function){
                                                return await __array_op_rval__533(ctx) 
                                            } else {
                                                return[__array_op_rval__533,ctx]
                                            }
                                        })())
                                    } else {
                                         (warnings).push("invalid verbosity declaration, expected number, received ")
                                    }
                                } else if (check_true( (declaration==="local"))) {
                                     return await (async function() {
                                        let __for_body__536=async function(name) {
                                            dec_struct=await get_declaration_details(ctx,name);
                                             return  await set_ctx(ctx,name,(dec_struct && dec_struct["value"]))
                                        };
                                        let __array__537=[],__elements__535=await (await Environment.get_global("each"))(targeted,"name");
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__534 in __elements__535) {
                                            __array__537.push(await __for_body__536(__elements__535[__iter__534]));
                                            if(__BREAK__FLAG__) {
                                                 __array__537.pop();
                                                break;
                                                
                                            }
                                        }return __array__537;
                                         
                                    })()
                                } else if (check_true( (declaration==="function"))) {
                                     return  await (async function() {
                                        let __for_body__540=async function(name) {
                                             return  await set_declaration(ctx,name,"type",Function)
                                        };
                                        let __array__541=[],__elements__539=await (await Environment.get_global("each"))(targeted,"name");
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__538 in __elements__539) {
                                            __array__541.push(await __for_body__540(__elements__539[__iter__538]));
                                            if(__BREAK__FLAG__) {
                                                 __array__541.pop();
                                                break;
                                                
                                            }
                                        }return __array__541;
                                         
                                    })()
                                } else if (check_true( (declaration==="fn"))) {
                                     return  await (async function() {
                                        let __for_body__544=async function(name) {
                                             return  await set_declaration(ctx,name,"type",AsyncFunction)
                                        };
                                        let __array__545=[],__elements__543=await (await Environment.get_global("each"))(targeted,"name");
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__542 in __elements__543) {
                                            __array__545.push(await __for_body__544(__elements__543[__iter__542]));
                                            if(__BREAK__FLAG__) {
                                                 __array__545.pop();
                                                break;
                                                
                                            }
                                        }return __array__545;
                                         
                                    })()
                                } else if (check_true( (declaration==="array"))) {
                                     return  await (async function() {
                                        let __for_body__548=async function(name) {
                                             return  await set_declaration(ctx,name,"type",Array)
                                        };
                                        let __array__549=[],__elements__547=await (await Environment.get_global("each"))(targeted,"name");
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__546 in __elements__547) {
                                            __array__549.push(await __for_body__548(__elements__547[__iter__546]));
                                            if(__BREAK__FLAG__) {
                                                 __array__549.pop();
                                                break;
                                                
                                            }
                                        }return __array__549;
                                         
                                    })()
                                } else if (check_true( (declaration==="number"))) {
                                     return  await (async function() {
                                        let __for_body__552=async function(name) {
                                             return  await set_declaration(ctx,name,"type",NumberType)
                                        };
                                        let __array__553=[],__elements__551=await (await Environment.get_global("each"))(targeted,"name");
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__550 in __elements__551) {
                                            __array__553.push(await __for_body__552(__elements__551[__iter__550]));
                                            if(__BREAK__FLAG__) {
                                                 __array__553.pop();
                                                break;
                                                
                                            }
                                        }return __array__553;
                                         
                                    })()
                                } else if (check_true( (declaration==="string"))) {
                                     return  await (async function() {
                                        let __for_body__556=async function(name) {
                                             return  await set_declaration(ctx,name,"type",StringType)
                                        };
                                        let __array__557=[],__elements__555=await (await Environment.get_global("each"))(targeted,"name");
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__554 in __elements__555) {
                                            __array__557.push(await __for_body__556(__elements__555[__iter__554]));
                                            if(__BREAK__FLAG__) {
                                                 __array__557.pop();
                                                break;
                                                
                                            }
                                        }return __array__557;
                                         
                                    })()
                                } else if (check_true( (declaration==="boolean"))) {
                                     return  await (async function() {
                                        let __for_body__560=async function(name) {
                                             return  await set_declaration(ctx,name,"type",Boolean)
                                        };
                                        let __array__561=[],__elements__559=await (await Environment.get_global("each"))(targeted,"name");
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__558 in __elements__559) {
                                            __array__561.push(await __for_body__560(__elements__559[__iter__558]));
                                            if(__BREAK__FLAG__) {
                                                 __array__561.pop();
                                                break;
                                                
                                            }
                                        }return __array__561;
                                         
                                    })()
                                } else if (check_true( (declaration==="regexp"))) {
                                     return  await (async function() {
                                        let __for_body__564=async function(name) {
                                             return  await set_declaration(ctx,name,"type",RegExp)
                                        };
                                        let __array__565=[],__elements__563=await (await Environment.get_global("each"))(targeted,"name");
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__562 in __elements__563) {
                                            __array__565.push(await __for_body__564(__elements__563[__iter__562]));
                                            if(__BREAK__FLAG__) {
                                                 __array__565.pop();
                                                break;
                                                
                                            }
                                        }return __array__565;
                                         
                                    })()
                                } else if (check_true( (declaration==="object"))) {
                                     return  await (async function() {
                                        let __for_body__568=async function(name) {
                                             return  await set_declaration(ctx,name,"type",Object)
                                        };
                                        let __array__569=[],__elements__567=await (await Environment.get_global("each"))(targeted,"name");
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__566 in __elements__567) {
                                            __array__569.push(await __for_body__568(__elements__567[__iter__566]));
                                            if(__BREAK__FLAG__) {
                                                 __array__569.pop();
                                                break;
                                                
                                            }
                                        }return __array__569;
                                         
                                    })()
                                } else if (check_true( (declaration==="optimize"))) {
                                     return  await (async function() {
                                        let __for_body__572=async function(factor) {
                                            factor=await (await Environment.get_global("each"))(factor,"name");
                                             return  await async function(){
                                                if (check_true( ((factor && factor["0"])==="safety"))) {
                                                     return await set_declaration(ctx,"__SAFETY__","level",(factor && factor["1"]))
                                                }
                                            } ()
                                        };
                                        let __array__573=[],__elements__571=await (await Environment.get_global("each"))(targeted,"val");
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__570 in __elements__571) {
                                            __array__573.push(await __for_body__572(__elements__571[__iter__570]));
                                            if(__BREAK__FLAG__) {
                                                 __array__573.pop();
                                                break;
                                                
                                            }
                                        }return __array__573;
                                         
                                    })()
                                } else if (check_true( (declaration==="namespace"))) {
                                    if (check_true (await not(((targeted && targeted.length)===1)))){
                                        throw new SyntaxError("namespace declaration requires exactly 1 value");
                                        
                                    };
                                    if (check_true (await get_ctx(ctx,"__IN_LAMBDA__"))){
                                        throw new SyntaxError("namespace compiler declaration must be toplevel");
                                        
                                    };
                                     return  target_namespace=(targeted && targeted["0"] && targeted["0"]["name"])
                                } else  {
                                    (warnings).push(("unknown declaration directive: "+declaration));
                                     return  await (await Environment.get_global("warn"))(("compiler: unknown declaration directive: "+declaration))
                                }
                            } ()
                        };
                        let __array__518=[],__elements__516=expressions;
                        let __BREAK__FLAG__=false;
                        for(let __iter__515 in __elements__516) {
                            __array__518.push(await __for_body__517(__elements__516[__iter__515]));
                            if(__BREAK__FLAG__) {
                                 __array__518.pop();
                                break;
                                
                            }
                        }return __array__518;
                         
                    })();
                     return  acc
                };
                safety_level=async function(ctx) {
                    if (check_true (ctx)){
                        let safety=await get_declarations(ctx,"__SAFETY__");
                        ;
                        if (check_true (safety)){
                              return (safety && safety["level"])
                        } else {
                              return default_safety_level
                        }
                    }
                };
                get_scoped_type=async function(name) {
                    let rtype;
                    rtype=await get_ctx(ctx,name);
                    if (check_true ((undefined===rtype))){
                          return await sub_type(await get_lisp_ctx(name))
                    } else {
                          return await sub_type(rtype)
                    }
                };
                compile_scoped_reference=async function(tokens,ctx) {
                    let acc;
                    let idx;
                    let ref_type;
                    let rval;
                    let stmt;
                    let preamble;
                    let sr_log;
                    let val;
                    let call_type;
                    let check_statement;
                    let token;
                    acc=[];
                    idx=0;
                    ref_type=null;
                    rval=null;
                    stmt=null;
                    preamble=await calling_preamble(ctx);
                    sr_log=await defclog({
                        prefix:("compile_scoped_reference ("+((ctx && ctx["block_id"])||"-")+"):"),background:"steelblue",color:"white"
                    });
                    val=null;
                    call_type=await async function(){
                        if (check_true( await not((tokens && tokens["0"] && tokens["0"]["ref"])))) {
                             return "literal"
                        } else if (check_true( await get_ctx(ctx,(tokens && tokens["0"] && tokens["0"]["name"])))) {
                             return "local"
                        } else if (check_true( await get_lisp_ctx((tokens && tokens["0"] && tokens["0"]["name"])))) {
                             return "lisp"
                        }
                    } ();
                    check_statement=async function(stmt) {
                        if (check_true (await check_needs_wrap(stmt))){
                            if (check_true (((stmt && stmt["0"] && stmt["0"]["ctype"])==="ifblock"))){
                                  return [(preamble && preamble["2"]),(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{"," ",stmt," ","}"," ",")","()"]
                            } else {
                                  return [(preamble && preamble["2"]),(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ",stmt," ",")","()"]
                            }
                        } else {
                              return stmt
                        }
                    };
                    token=null;
                    ;
                    await async function(){
                        if (check_true( (call_type==="lisp"))) {
                             return ref_type=await get_lisp_ctx((tokens && tokens["0"] && tokens["0"]["name"]))
                        } else if (check_true( (call_type==="local"))) {
                             return ref_type=await get_ctx(ctx,(tokens && tokens["0"] && tokens["0"]["name"]))
                        } else  {
                             return ref_type=ArgumentType
                        }
                    } ();
                    if (check_true (await (async function(){
                        let __array_op_rval__574=verbosity;
                         if (__array_op_rval__574 instanceof Function){
                            return await __array_op_rval__574(ctx) 
                        } else {
                            return[__array_op_rval__574,ctx]
                        }
                    })())){
                        (sr_log)("where/what->",call_type,"/",ref_type,"for symbol: ",(tokens && tokens["0"] && tokens["0"]["name"]));
                        if (check_true (await get_ctx(ctx,"__IN_QUOTEM__"))){
                             (sr_log)("in quotem")
                        }
                    };
                    await async function(){
                        if (check_true( (ref_type===AsyncFunction))) {
                             return ref_type="AsyncFunction"
                        } else if (check_true( (ref_type===Expression))) {
                             return ref_type=ArgumentType
                        } else if (check_true( (ref_type===Function))) {
                             return ref_type="Function"
                        } else if (check_true( (ref_type===Array))) {
                             return ref_type="Array"
                        } else if (check_true( (ref_type===NilType))) {
                             return ref_type="nil"
                        } else if (check_true( (ref_type===NumberType))) {
                             return ref_type=ArgumentType
                        } else if (check_true( (ref_type===StringType))) {
                             return ref_type="StringType"
                        } else if (check_true( (ref_type===ArgumentType))) {
                             return true
                        } else  {
                             return ref_type=await sub_type(ref_type)
                        }
                    } ();
                    rval=await async function(){
                        if (check_true( (ref_type==="AsyncFunction"))) {
                            (acc).push((preamble && preamble["0"]));
                            (acc).push(" ");
                            (acc).push(await (async function () {
                                 if (check_true ((call_type==="lisp"))){
                                      return await compile_lisp_scoped_reference((tokens && tokens["0"] && tokens["0"]["name"]),ctx)
                                } else {
                                      return (tokens && tokens["0"] && tokens["0"]["name"])
                                } 
                            })());
                            (acc).push("(");
                            await (async function(){
                                 let __test_condition__575=async function() {
                                     return  (idx<((tokens && tokens.length)-1))
                                };
                                let __body_ref__576=async function() {
                                    idx+=1;
                                    token=tokens[idx];
                                    stmt=await compile(token,ctx);
                                    stmt=await check_statement(stmt);
                                    (acc).push(stmt);
                                    if (check_true ((idx<((tokens && tokens.length)-1)))){
                                         return  (acc).push(",")
                                    }
                                };
                                let __BREAK__FLAG__=false;
                                while(await __test_condition__575()) {
                                    await __body_ref__576();
                                     if(__BREAK__FLAG__) {
                                         break;
                                        
                                    }
                                } ;
                                
                            })();
                            (acc).push(")");
                             return  acc
                        } else if (check_true( (ref_type==="Function"))) {
                            (acc).push((preamble && preamble["0"]));
                            (acc).push(" ");
                            (acc).push(await (async function () {
                                 if (check_true ((call_type==="lisp"))){
                                      return await compile_lisp_scoped_reference((tokens && tokens["0"] && tokens["0"]["name"]),ctx)
                                } else {
                                      return (tokens && tokens["0"] && tokens["0"]["name"])
                                } 
                            })());
                            (acc).push("(");
                            await (async function(){
                                 let __test_condition__577=async function() {
                                     return  (idx<((tokens && tokens.length)-1))
                                };
                                let __body_ref__578=async function() {
                                    idx+=1;
                                    token=tokens[idx];
                                    stmt=await compile(token,ctx);
                                    stmt=await check_statement(stmt);
                                    (acc).push(stmt);
                                    if (check_true ((idx<((tokens && tokens.length)-1)))){
                                         return  (acc).push(",")
                                    }
                                };
                                let __BREAK__FLAG__=false;
                                while(await __test_condition__577()) {
                                    await __body_ref__578();
                                     if(__BREAK__FLAG__) {
                                         break;
                                        
                                    }
                                } ;
                                
                            })();
                            (acc).push(")");
                             return  acc
                        } else if (check_true( ((call_type==="local")&&((ref_type==="NumberType")||(ref_type==="StringType")||(ref_type==="Boolean"))))) {
                            (acc).push((tokens && tokens["0"] && tokens["0"]["name"]));
                             return  acc
                        } else if (check_true( ((call_type==="local")&&await not((ref_type===ArgumentType))&&(tokens instanceof Array)))) {
                            val=await get_ctx_val(ctx,(tokens && tokens["0"] && tokens["0"]["name"]));
                            (acc).push(val);
                             return  acc
                        } else if (check_true( ((ref_type===ArgumentType)&&(tokens instanceof Array)))) {
                            (acc).push("[");
                            await (async function(){
                                 let __test_condition__579=async function() {
                                     return  (idx<(tokens && tokens.length))
                                };
                                let __body_ref__580=async function() {
                                    token=tokens[idx];
                                    (acc).push(await compile(token,ctx));
                                    if (check_true ((idx<((tokens && tokens.length)-1)))){
                                         (acc).push(",")
                                    };
                                     return  idx+=1
                                };
                                let __BREAK__FLAG__=false;
                                while(await __test_condition__579()) {
                                    await __body_ref__580();
                                     if(__BREAK__FLAG__) {
                                         break;
                                        
                                    }
                                } ;
                                
                            })();
                            (acc).push("]");
                             return  acc
                        } else if (check_true( (ref_type===ArgumentType))) {
                            (acc).push((tokens && tokens["0"] && tokens["0"]["name"]));
                             return  acc
                        } else if (check_true( (ref_type==="undefined"))) {
                            throw new ReferenceError(("unknown reference: "+(tokens && tokens["0"] && tokens["0"]["name"])));
                            
                        } else if (check_true( (call_type==="lisp"))) {
                             return  await compile_lisp_scoped_reference((tokens && tokens["0"] && tokens["0"]["name"]),ctx)
                        } else  {
                            (acc).push((tokens && tokens["0"] && tokens["0"]["name"]));
                             return  acc
                        }
                    } ();
                    if (check_true (false)){
                         await async function(){
                            if (check_true( ((ref_type==="AsyncFunction")||(ref_type==="Function")))) {
                                 return (acc).unshift({
                                    ctype:ref_type
                                })
                            }
                        } ()
                    };
                     return  acc
                };
                compile_lisp_scoped_reference=async function(refname,ctx) {
                    let refval;
                    let reftype;
                    let declarations;
                    let preamble;
                    let basename;
                    refval=await get_lisp_ctx(refname);
                    reftype=await sub_type(refval);
                    declarations=null;
                    preamble=await calling_preamble(ctx);
                    basename=await (await Environment.get_global("get_object_path"))(refname);
                    ;
                    declarations=await add(new Object(),await get_declarations(ctx,refname),await get_declaration_details(ctx,refname));
                    if (check_true ((declarations && declarations["inlined"]))){
                         refname=await sanitize_js_ref_name(refname)
                    };
                    if (check_true (((reftype==="StringType")&&await not((refval===undefined))))){
                         refval="text"
                    };
                     return  await async function(){
                        if (check_true( await contains_ques_((basename && basename["0"]),standard_types))) {
                             return refname
                        } else if (check_true((declarations && declarations["inlined"]))) {
                             return refname
                        } else if (check_true( await not((refval===undefined)))) {
                            has_lisp_globals=true;
                            if (check_true (await (async function(){
                                let __array_op_rval__581=verbosity;
                                 if (__array_op_rval__581 instanceof Function){
                                    return await __array_op_rval__581(ctx) 
                                } else {
                                    return[__array_op_rval__581,ctx]
                                }
                            })())){
                                 await console.log("compile_lisp_scoped_reference: has_first_level? ",await get_ctx(ctx,"has_first_level"),": ",refname)
                            };
                            if (check_true ((false&&await get_ctx(ctx,"has_first_level")&&await not((opts && opts["root_environment"]))))){
                                  return [{
                                    ctype:await (async function() {
                                        if (check_true ((await not(refval instanceof Function)&&(refval instanceof Object)))){
                                              return "object"
                                        } else {
                                              return refval
                                        }
                                    } )()
                                },"(",(preamble && preamble["0"])," ","__GG__","(\"",refname,"\")",")"]
                            } else {
                                  return [{
                                    ctype:await (async function() {
                                        if (check_true ((await not(refval instanceof Function)&&(refval instanceof Object)))){
                                              return "object"
                                        } else {
                                              return refval
                                        }
                                    } )()
                                },"(",(preamble && preamble["0"])," ",env_ref,"get_global","(\"",refname,"\")",")"]
                            }
                        } else  {
                            throw new ReferenceError(("unknown lisp reference: "+refname));
                            
                        }
                    } ()
                };
                standard_types=await (await Environment.get_global("uniq"))(await (await Environment.get_global("conj"))(["AsyncFunction","check_true","LispSyntaxError","dlisp_environment_count","clone","Environment","Expression","get_next_environment_id","subtype","lisp_writer","do_deferred_splice"],await (await Environment.get_global("object_methods"))(globalThis)));
                is_error=null;
                is_block_ques_=async function(tokens) {
                     return  (await contains_ques_((tokens && tokens["0"] && tokens["0"]["name"]),["do","progn"]))
                };
                is_complex_ques_=async function(tokens) {
                    let rval;
                    rval=(await (async function(){
                        let __array_op_rval__582=is_block_ques_;
                         if (__array_op_rval__582 instanceof Function){
                            return await __array_op_rval__582(tokens) 
                        } else {
                            return[__array_op_rval__582,tokens]
                        }
                    })()||(((tokens && tokens["type"])==="arr")&&await (async function(){
                        let __array_op_rval__583=is_block_ques_;
                         if (__array_op_rval__583 instanceof Function){
                            return await __array_op_rval__583((tokens && tokens["val"])) 
                        } else {
                            return[__array_op_rval__583,(tokens && tokens["val"])]
                        }
                    })())||((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["name"])==="if")||((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["name"])==="let"));
                     return  rval
                };
                is_form_ques_=async function(token) {
                     return  (((token && token["val"]) instanceof Array)||await (async function(){
                        let __array_op_rval__584=is_block_ques_;
                         if (__array_op_rval__584 instanceof Function){
                            return await __array_op_rval__584((token && token["val"])) 
                        } else {
                            return[__array_op_rval__584,(token && token["val"])]
                        }
                    })())
                };
                op_lookup=await ( async function(){
                    let __obj__585=new Object();
                    __obj__585["+"]=infix_ops;
                    __obj__585["*"]=infix_ops;
                    __obj__585["/"]=infix_ops;
                    __obj__585["-"]=infix_ops;
                    __obj__585["**"]=infix_ops;
                    __obj__585["%"]=infix_ops;
                    __obj__585["<<"]=infix_ops;
                    __obj__585[">>"]=infix_ops;
                    __obj__585["and"]=infix_ops;
                    __obj__585["or"]=infix_ops;
                    __obj__585["apply"]=compile_apply;
                    __obj__585["call"]=compile_call;
                    __obj__585["->"]=compile_call;
                    __obj__585["set_prop"]=compile_set_prop;
                    __obj__585["prop"]=compile_prop;
                    __obj__585["="]=compile_assignment;
                    __obj__585["setq"]=compile_assignment;
                    __obj__585["=="]=compile_compare;
                    __obj__585["eq"]=compile_compare;
                    __obj__585[">"]=compile_compare;
                    __obj__585["<"]=compile_compare;
                    __obj__585["<="]=compile_compare;
                    __obj__585[">="]=compile_compare;
                    __obj__585["return"]=compile_return;
                    __obj__585["new"]=compile_new;
                    __obj__585["do"]=compile_block;
                    __obj__585["progn"]=compile_block;
                    __obj__585["progl"]=async function(tokens,ctx) {
                         return  await compile_block(tokens,ctx,{
                            no_scope_boundary:true,suppress_return:true
                        })
                    };
                    __obj__585["break"]=compile_break;
                    __obj__585["inc"]=compile_val_mod;
                    __obj__585["dec"]=compile_val_mod;
                    __obj__585["try"]=compile_try;
                    __obj__585["throw"]=compile_throw;
                    __obj__585["let"]=compile_let;
                    __obj__585["defvar"]=compile_defvar;
                    __obj__585["defconst"]=async function(tokens,ctx) {
                        if (check_true (await get_ctx(ctx,"local_scope"))){
                              return await compile_defvar(tokens,ctx,{
                                constant:true
                            })
                        } else {
                              return await compile_set_global(tokens,ctx,{
                                constant:true
                            })
                        }
                    };
                    __obj__585["while"]=compile_while;
                    __obj__585["for_each"]=compile_for_each;
                    __obj__585["if"]=compile_if;
                    __obj__585["cond"]=compile_cond;
                    __obj__585["fn"]=compile_fn;
                    __obj__585["lambda"]=compile_fn;
                    __obj__585["function*"]=async function(tokens,ctx) {
                         return  await compile_fn(tokens,ctx,{
                            generator:true
                        })
                    };
                    __obj__585["defglobal"]=compile_set_global;
                    __obj__585["list"]=compile_list;
                    __obj__585["function"]=async function(tokens,ctx) {
                         return  await compile_fn(tokens,ctx,{
                            synchronous:true
                        })
                    };
                    __obj__585["=>"]=async function(tokens,ctx) {
                         return  await compile_fn(tokens,ctx,{
                            arrow:true
                        })
                    };
                    __obj__585["yield"]=compile_yield;
                    __obj__585["for_with"]=compile_for_with;
                    __obj__585["quotem"]=compile_quotem;
                    __obj__585["quote"]=compile_quote;
                    __obj__585["quotel"]=compile_quotel;
                    __obj__585["eval"]=compile_eval;
                    __obj__585["jslambda"]=compile_jslambda;
                    __obj__585["javascript"]=compile_javascript;
                    __obj__585["instanceof"]=compile_instanceof;
                    __obj__585["typeof"]=compile_typeof;
                    __obj__585["unquotem"]=compile_unquotem;
                    __obj__585["debug"]=compile_debug;
                    __obj__585["declare"]=compile_declare;
                    __obj__585["static_import"]=compile_import;
                    __obj__585["dynamic_import"]=compile_dynamic_import;
                    return __obj__585;
                    
                })();
                comp_log=await (async function () {
                     if (check_true (quiet_mode)){
                          return log
                    } else {
                          return await defclog({
                            background:"LightSkyblue",color:"#000000"
                        })
                    } 
                })();
                last_source=null;
                compile_obj_literal=async function(tokens,ctx) {
                    let acc;
                    let idx;
                    let stmt;
                    let has_valid_key_literals;
                    let token;
                    let preamble;
                    let key;
                    let tmp_name;
                    let check_statement;
                    let kvpair;
                    let total_length;
                    acc=[];
                    idx=-1;
                    stmt=null;
                    has_valid_key_literals=true;
                    token=null;
                    preamble=await calling_preamble(ctx);
                    key=null;
                    tmp_name=null;
                    ctx=await new_ctx(ctx);
                    check_statement=async function(stmt) {
                        if (check_true (await check_needs_wrap(stmt))){
                            if (check_true (((stmt && stmt["0"] && stmt["0"]["ctype"])==="ifblock"))){
                                  return [await add(new Object(),(preamble && preamble["2"]),{
                                    marker:"ifblock"
                                }),(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{",stmt,"}"," ",")","()"]
                            } else {
                                  return [(preamble && preamble["2"]),(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ",stmt," ",")","()"]
                            }
                        } else {
                              return stmt
                        }
                    };
                    kvpair=null;
                    total_length=((tokens && tokens["val"] && tokens["val"]["length"])-1);
                    ;
                    await async function(){
                        ctx["in_obj_literal"]=true;
                        return ctx;
                        
                    }();
                    await (async function() {
                        let __for_body__589=async function(token) {
                            if (check_true ((((token && token["type"])==="keyval")&&await check_invalid_js_ref((token && token.name))))){
                                has_valid_key_literals=false;
                                __BREAK__FLAG__=true;
                                return
                            }
                        };
                        let __array__590=[],__elements__588=((tokens && tokens["val"])||[]);
                        let __BREAK__FLAG__=false;
                        for(let __iter__587 in __elements__588) {
                            __array__590.push(await __for_body__589(__elements__588[__iter__587]));
                            if(__BREAK__FLAG__) {
                                 __array__590.pop();
                                break;
                                
                            }
                        }return __array__590;
                         
                    })();
                    if (check_true (has_valid_key_literals)){
                         if (check_true (((tokens && tokens["val"] && tokens["val"]["name"])==="{}"))){
                              return [{
                                ctype:"objliteral"
                            },"new Object()"]
                        } else {
                            (acc).push("{");
                            await (async function(){
                                 let __test_condition__591=async function() {
                                     return  (idx<total_length)
                                };
                                let __body_ref__592=async function() {
                                    idx+=1;
                                    kvpair=await (async function(){
                                        let __targ__593=(tokens && tokens["val"]);
                                        if (__targ__593){
                                             return(__targ__593)[idx]
                                        } 
                                    })();
                                    key=await get_val((kvpair && kvpair["val"] && kvpair["val"]["0"]),ctx);
                                    if (check_true ((((key && key.length)===1)&&(await key["charCodeAt"]()===34)))){
                                         key="'\"'"
                                    };
                                    (acc).push(key);
                                    (acc).push(":");
                                    await set_ctx(ctx,"__LAMBDA_STEP__",-1);
                                    stmt=await compile_elem((kvpair && kvpair["val"] && kvpair["val"]["1"]),ctx);
                                    stmt=await check_statement(stmt);
                                    (acc).push(stmt);
                                    if (check_true ((idx<total_length))){
                                         return  (acc).push(",")
                                    }
                                };
                                let __BREAK__FLAG__=false;
                                while(await __test_condition__591()) {
                                    await __body_ref__592();
                                     if(__BREAK__FLAG__) {
                                         break;
                                        
                                    }
                                } ;
                                
                            })();
                            (acc).push("}");
                             return  [{
                                ctype:"objliteral"
                            },acc]
                        }
                    } else {
                        tmp_name=await gen_temp_name("obj");
                        await (async function() {
                            let __for_body__596=async function(t) {
                                 return  (acc).push(t)
                            };
                            let __array__597=[],__elements__595=[{
                                ctype:"statement"
                            },(preamble && preamble["0"])," ","("," ",(preamble && preamble["1"])," ","function","()","{","let"," ",tmp_name,"=","new"," ","Object","()",";"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__594 in __elements__595) {
                                __array__597.push(await __for_body__596(__elements__595[__iter__594]));
                                if(__BREAK__FLAG__) {
                                     __array__597.pop();
                                    break;
                                    
                                }
                            }return __array__597;
                             
                        })();
                        await (async function(){
                             let __test_condition__598=async function() {
                                 return  (idx<total_length)
                            };
                            let __body_ref__599=async function() {
                                idx+=1;
                                kvpair=await (async function(){
                                    let __targ__600=(tokens && tokens["val"]);
                                    if (__targ__600){
                                         return(__targ__600)[idx]
                                    } 
                                })();
                                 return  await (async function() {
                                    let __for_body__603=async function(t) {
                                         return  (acc).push(t)
                                    };
                                    let __array__604=[],__elements__602=await (async function(){
                                        let __array_op_rval__605=tmp_name;
                                         if (__array_op_rval__605 instanceof Function){
                                            return await __array_op_rval__605("[","\"",await cl_encode_string(await get_val((kvpair && kvpair["val"] && kvpair["val"]["0"]),ctx)),"\"","]","=",await compile_elem((kvpair && kvpair["val"] && kvpair["val"]["1"]),ctx),";") 
                                        } else {
                                            return[__array_op_rval__605,"[","\"",await cl_encode_string(await get_val((kvpair && kvpair["val"] && kvpair["val"]["0"]),ctx)),"\"","]","=",await compile_elem((kvpair && kvpair["val"] && kvpair["val"]["1"]),ctx),";"]
                                        }
                                    })();
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__601 in __elements__602) {
                                        __array__604.push(await __for_body__603(__elements__602[__iter__601]));
                                        if(__BREAK__FLAG__) {
                                             __array__604.pop();
                                            break;
                                            
                                        }
                                    }return __array__604;
                                     
                                })()
                            };
                            let __BREAK__FLAG__=false;
                            while(await __test_condition__598()) {
                                await __body_ref__599();
                                 if(__BREAK__FLAG__) {
                                     break;
                                    
                                }
                            } ;
                            
                        })();
                        await (async function() {
                            let __for_body__608=async function(t) {
                                 return  (acc).push(t)
                            };
                            let __array__609=[],__elements__607=["return"," ",tmp_name,";","}",")","()"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__606 in __elements__607) {
                                __array__609.push(await __for_body__608(__elements__607[__iter__606]));
                                if(__BREAK__FLAG__) {
                                     __array__609.pop();
                                    break;
                                    
                                }
                            }return __array__609;
                             
                        })();
                         return  acc
                    }
                };
                is_literal_ques_=async function(val) {
                     return  (await is_number_ques_(val)||(val instanceof String || typeof val==='string')||(false===val)||(true===val))
                };
                comp_warn=await defclog({
                    prefix:"compile: [warn]:",background:"#fcffc8",color:"brown"
                });
                let compile=await __compile__3();
                ;
                compile_inner=async function(tokens,ctx,_cdepth) {
                    let operator_type;
                    let op_token;
                    let rcv;
                    let __op__611= async function(){
                        return null
                    };
                    let acc;
                    let preamble;
                    let tmp_name;
                    let refval;
                    let check_statement;
                    let ref;
                    {
                        operator_type=null;
                        op_token=null;
                        rcv=null;
                        let op=await __op__611();
                        ;
                        _cdepth=(_cdepth||100);
                        acc=[];
                        preamble=await calling_preamble(ctx);
                        tmp_name=null;
                        refval=null;
                        check_statement=async function(stmt) {
                            if (check_true (await check_needs_wrap(stmt))){
                                if (check_true (((stmt && stmt["0"] && stmt["0"]["ctype"])==="ifblock"))){
                                      return [await add(new Object(),(preamble && preamble["2"]),{
                                        marker:"ifblock"
                                    }),(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{",stmt,"}"," ",")","()"]
                                } else {
                                      return [(preamble && preamble["2"]),(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ",stmt," ",")","()"]
                                }
                            } else {
                                  return stmt
                            }
                        };
                        ref=null;
                        ;
                         return  await (async function(){
                            try /* TRY SIMPLE */ {
                                 if (check_true ((null==ctx))){
                                    (error_log)("compile: nil ctx: ",tokens);
                                    throw new Error("compile: nil ctx");
                                    
                                } else {
                                      return await async function(){
                                        if (check_true( (await is_number_ques_(tokens)||(tokens instanceof String || typeof tokens==='string')||(await sub_type(tokens)==="Boolean")))) {
                                             return tokens
                                        } else if (check_true( ((tokens instanceof Array)&&(tokens && tokens["0"] && tokens["0"]["ref"])&&await not((await get_ctx(ctx,(tokens && tokens["0"] && tokens["0"]["name"]))===UnknownType))&&(op_lookup[(tokens && tokens["0"] && tokens["0"]["name"])]||(Function===await get_ctx(ctx,(tokens && tokens["0"] && tokens["0"]["name"])))||(AsyncFunction===await get_ctx(ctx,(tokens && tokens["0"] && tokens["0"]["name"])))||("function"===typeof await (async function(){
                                            let __targ__613=(root_ctx && root_ctx["defined_lisp_globals"]);
                                            if (__targ__613){
                                                 return(__targ__613)[(tokens && tokens["0"] && tokens["0"]["name"])]
                                            } 
                                        })())||await get_lisp_ctx((tokens && tokens["0"] && tokens["0"]["name"])) instanceof Function)))) {
                                            op_token=await first(tokens);
                                            operator=op_token["name"];
                                            operator_type=op_token["val"];
                                            ref=op_token["ref"];
                                            op=op_lookup[operator];
                                             return  await async function(){
                                                if (check_true(op)) {
                                                     return (op)(tokens,ctx)
                                                } else if (check_true( await (async function(){
                                                    let __targ__614=(Environment && Environment["inlines"]);
                                                    if (__targ__614){
                                                         return(__targ__614)[operator]
                                                    } 
                                                })())) {
                                                     return await compile_inline(tokens,ctx)
                                                } else  {
                                                     return await compile_scoped_reference(tokens,ctx)
                                                }
                                            } ()
                                        } else if (check_true( ((tokens instanceof Object)&&((tokens && tokens["type"])==="objlit")))) {
                                             return  await compile_obj_literal(tokens,ctx)
                                        } else if (check_true( (tokens instanceof Array))) {
                                             return  await async function(){
                                                if (check_true( ((tokens && tokens.length)===0))) {
                                                     return [{
                                                        ctype:"array",is_literal:true
                                                    },"[]"]
                                                } else  {
                                                    let is_operation;
                                                    let declared_type;
                                                    let nctx;
                                                    let symbolic_replacements;
                                                    let compiled_values;
                                                    is_operation=false;
                                                    declared_type=null;
                                                    nctx=null;
                                                    symbolic_replacements=[];
                                                    compiled_values=[];
                                                    rcv=await compile((tokens && tokens["0"]),ctx,await add(_cdepth,1));
                                                    if (check_true (((tokens && tokens["0"] && tokens["0"]["ref"])&&((tokens && tokens["0"] && tokens["0"]["val"]) instanceof String || typeof (tokens && tokens["0"] && tokens["0"]["val"])==='string')))){
                                                         declared_type=await get_declarations(ctx,(tokens && tokens["0"] && tokens["0"]["name"]))
                                                    };
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__615=verbosity;
                                                         if (__array_op_rval__615 instanceof Function){
                                                            return await __array_op_rval__615(ctx) 
                                                        } else {
                                                            return[__array_op_rval__615,ctx]
                                                        }
                                                    })())){
                                                         (comp_log)(("compile: "+_cdepth+" array: "),"potential operator: ",(tokens && tokens["0"] && tokens["0"]["name"]),"declarations: ",declared_type)
                                                    };
                                                    await (async function() {
                                                        let __for_body__618=async function(t) {
                                                            if (check_true (await not(await get_ctx_val(ctx,"__IN_LAMBDA__")))){
                                                                 await set_ctx(ctx,"__LAMBDA_STEP__",0)
                                                            };
                                                             return  (compiled_values).push(await compile(t,ctx,await add(_cdepth,1)))
                                                        };
                                                        let __array__619=[],__elements__617=await (await Environment.get_global("rest"))(tokens);
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__616 in __elements__617) {
                                                            __array__619.push(await __for_body__618(__elements__617[__iter__616]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__619.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__619;
                                                         
                                                    })();
                                                    await map(async function(compiled_element,idx) {
                                                        let inst;
                                                        inst=await (async function () {
                                                             if (check_true ((((compiled_element && compiled_element["0"]) instanceof Object)&&await (async function(){
                                                                let __targ__620=(compiled_element && compiled_element["0"]);
                                                                if (__targ__620){
                                                                     return(__targ__620)["ctype"]
                                                                } 
                                                            })()))){
                                                                  return await (async function(){
                                                                    let __targ__621=(compiled_element && compiled_element["0"]);
                                                                    if (__targ__621){
                                                                         return(__targ__621)["ctype"]
                                                                    } 
                                                                })()
                                                            } else {
                                                                  return null
                                                            } 
                                                        })();
                                                         return  await async function(){
                                                            if (check_true( ((inst==="block")||(inst==="letblock")))) {
                                                                 return  (symbolic_replacements).push(await (async function(){
                                                                    let __array_op_rval__622=idx;
                                                                     if (__array_op_rval__622 instanceof Function){
                                                                        return await __array_op_rval__622(await gen_temp_name("array_arg"),[(preamble && preamble["2"]),"(",(preamble && preamble["1"])," ","function","()"," ",compiled_element," ",")"]) 
                                                                    } else {
                                                                        return[__array_op_rval__622,await gen_temp_name("array_arg"),[(preamble && preamble["2"]),"(",(preamble && preamble["1"])," ","function","()"," ",compiled_element," ",")"]]
                                                                    }
                                                                })())
                                                            } else if (check_true( (inst==="ifblock"))) {
                                                                 return  (symbolic_replacements).push(await (async function(){
                                                                    let __array_op_rval__623=idx;
                                                                     if (__array_op_rval__623 instanceof Function){
                                                                        return await __array_op_rval__623(await gen_temp_name("array_arg"),[(preamble && preamble["2"]),"(",(preamble && preamble["1"])," ","function","()"," ","{",compiled_element,"}"," ",")"]) 
                                                                    } else {
                                                                        return[__array_op_rval__623,await gen_temp_name("array_arg"),[(preamble && preamble["2"]),"(",(preamble && preamble["1"])," ","function","()"," ","{",compiled_element,"}"," ",")"]]
                                                                    }
                                                                })())
                                                            }
                                                        } ()
                                                    },compiled_values);
                                                    await (async function() {
                                                        let __for_body__626=async function(elem) {
                                                            await (async function() {
                                                                let __for_body__630=async function(t) {
                                                                     return  (acc).push(t)
                                                                };
                                                                let __array__631=[],__elements__629=["let"," ",(elem && elem["1"]),"=",(elem && elem["2"]),";"];
                                                                let __BREAK__FLAG__=false;
                                                                for(let __iter__628 in __elements__629) {
                                                                    __array__631.push(await __for_body__630(__elements__629[__iter__628]));
                                                                    if(__BREAK__FLAG__) {
                                                                         __array__631.pop();
                                                                        break;
                                                                        
                                                                    }
                                                                }return __array__631;
                                                                 
                                                            })();
                                                             return  await compiled_values["splice"].call(compiled_values,(elem && elem["0"]),1,[(preamble && preamble["0"])," ",(elem && elem["1"]),"()"])
                                                        };
                                                        let __array__627=[],__elements__625=symbolic_replacements;
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__624 in __elements__625) {
                                                            __array__627.push(await __for_body__626(__elements__625[__iter__624]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__627.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__627;
                                                         
                                                    })();
                                                    if (check_true (((symbolic_replacements && symbolic_replacements.length)>0))){
                                                        (acc).unshift("{");
                                                         (acc).unshift({
                                                            ctype:"block"
                                                        })
                                                    };
                                                    await async function(){
                                                        if (check_true( (((declared_type && declared_type["type"])===Function)||((declared_type && declared_type["type"])===AsyncFunction)||(((rcv && rcv["0"]) instanceof Object)&&(rcv && rcv["0"] && rcv["0"]["ctype"]) instanceof Function)||(((rcv && rcv["0"]) instanceof Object)&&await not(((rcv && rcv["0"]) instanceof Array))&&((rcv && rcv["0"] && rcv["0"]["ctype"]) instanceof String || typeof (rcv && rcv["0"] && rcv["0"]["ctype"])==='string')&&await contains_ques_("unction",(rcv && rcv["0"] && rcv["0"]["ctype"])))))) {
                                                            is_operation=true;
                                                            await (async function() {
                                                                let __for_body__634=async function(t) {
                                                                     return  (acc).push(t)
                                                                };
                                                                let __array__635=[],__elements__633=["(",rcv,")","("];
                                                                let __BREAK__FLAG__=false;
                                                                for(let __iter__632 in __elements__633) {
                                                                    __array__635.push(await __for_body__634(__elements__633[__iter__632]));
                                                                    if(__BREAK__FLAG__) {
                                                                         __array__635.pop();
                                                                        break;
                                                                        
                                                                    }
                                                                }return __array__635;
                                                                 
                                                            })();
                                                            await push_as_arg_list(acc,compiled_values);
                                                             return  (acc).push(")")
                                                        } else if (check_true( ((null==(declared_type && declared_type["type"]))&&(((tokens && tokens["0"] && tokens["0"]["type"])==="arg")||((rcv instanceof String || typeof rcv==='string')&&await get_declaration_details(ctx,rcv))||((rcv instanceof Array)&&((rcv && rcv["0"]) instanceof Object)&&((rcv && rcv["0"] && rcv["0"]["ctype"]) instanceof String || typeof (rcv && rcv["0"] && rcv["0"]["ctype"])==='string')&&((rcv && rcv["0"] && rcv["0"]["ctype"])&&(await not(await contains_ques_("unction",(rcv && rcv["0"] && rcv["0"]["ctype"])))&&await not(("string"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&&await not(("StringType"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&&await not(("nil"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&&await not(("NumberType"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&&await not(("undefined"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&&await not(("objliteral"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&&await not(("Boolean"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&&await not(("array"===(rcv && rcv["0"] && rcv["0"]["ctype"])))))))))) {
                                                            if (check_true (show_hints)){
                                                                 (comp_warn)("value ambiguity - use declare to clarify: ",await source_from_tokens(tokens,expanded_tree,true)," ",await (await Environment.get_global("as_lisp"))(rcv))
                                                            };
                                                            tmp_name=await gen_temp_name("array_op_rval");
                                                            if (check_true ((((rcv && rcv["0"]) instanceof Object)&&((rcv && rcv["0"] && rcv["0"]["ctype"]) instanceof String || typeof (rcv && rcv["0"] && rcv["0"]["ctype"])==='string')&&await contains_ques_("block",((rcv && rcv["0"] && rcv["0"]["ctype"])||""))))){
                                                                 rcv=await check_statement(rcv)
                                                            };
                                                            if (check_true (((symbolic_replacements && symbolic_replacements.length)>0))){
                                                                (acc).push({
                                                                    ctype:"block"
                                                                });
                                                                (acc).push("return");
                                                                 (acc).push(" ")
                                                            };
                                                            await (async function() {
                                                                let __for_body__638=async function(t) {
                                                                     return  (acc).push(t)
                                                                };
                                                                let __array__639=[],__elements__637=[(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()","{","let"," ",tmp_name,"=",rcv,";"," ","if"," ","(",tmp_name," ","instanceof"," ","Function",")","{","return"," ",(preamble && preamble["0"])," ",tmp_name,"("];
                                                                let __BREAK__FLAG__=false;
                                                                for(let __iter__636 in __elements__637) {
                                                                    __array__639.push(await __for_body__638(__elements__637[__iter__636]));
                                                                    if(__BREAK__FLAG__) {
                                                                         __array__639.pop();
                                                                        break;
                                                                        
                                                                    }
                                                                }return __array__639;
                                                                 
                                                            })();
                                                            await push_as_arg_list(acc,compiled_values);
                                                            await (async function() {
                                                                let __for_body__642=async function(t) {
                                                                     return  (acc).push(t)
                                                                };
                                                                let __array__643=[],__elements__641=[")"," ","}"," ","else"," ","{","return","[",tmp_name];
                                                                let __BREAK__FLAG__=false;
                                                                for(let __iter__640 in __elements__641) {
                                                                    __array__643.push(await __for_body__642(__elements__641[__iter__640]));
                                                                    if(__BREAK__FLAG__) {
                                                                         __array__643.pop();
                                                                        break;
                                                                        
                                                                    }
                                                                }return __array__643;
                                                                 
                                                            })();
                                                            if (check_true ((await length(await (await Environment.get_global("rest"))(tokens))>0))){
                                                                (acc).push(",");
                                                                 await push_as_arg_list(acc,compiled_values)
                                                            };
                                                             return  await (async function() {
                                                                let __for_body__646=async function(t) {
                                                                     return  (acc).push(t)
                                                                };
                                                                let __array__647=[],__elements__645=["]","}","}",")","()"];
                                                                let __BREAK__FLAG__=false;
                                                                for(let __iter__644 in __elements__645) {
                                                                    __array__647.push(await __for_body__646(__elements__645[__iter__644]));
                                                                    if(__BREAK__FLAG__) {
                                                                         __array__647.pop();
                                                                        break;
                                                                        
                                                                    }
                                                                }return __array__647;
                                                                 
                                                            })()
                                                        } else  {
                                                            let __array_arg__648=(async function() {
                                                                if (check_true ((await length(await (await Environment.get_global("rest"))(tokens))>0))){
                                                                    (acc).push(",");
                                                                     await push_as_arg_list(acc,compiled_values)
                                                                }
                                                            } );
                                                            return await (async function(){
                                                                let __array_op_rval__649=await (async function() {
                                                                    if (check_true (((symbolic_replacements && symbolic_replacements.length)>0))){
                                                                        (acc).push("return");
                                                                         (acc).push(" ")
                                                                    }
                                                                } )();
                                                                 if (__array_op_rval__649 instanceof Function){
                                                                    return await __array_op_rval__649((acc).push("["),rcv=await check_statement(rcv),(acc).push(rcv),await __array_arg__648(),(acc).push("]")) 
                                                                } else {
                                                                    return[__array_op_rval__649,(acc).push("["),rcv=await check_statement(rcv),(acc).push(rcv),await __array_arg__648(),(acc).push("]")]
                                                                }
                                                            })()
                                                        }
                                                    } ();
                                                    if (check_true (((symbolic_replacements && symbolic_replacements.length)>0))){
                                                         (acc).push("}")
                                                    };
                                                     return  acc
                                                }
                                            } ()
                                        } else if (check_true( ((tokens instanceof Object)&&((tokens && tokens["val"]) instanceof Array)&&(tokens && tokens["type"])))) {
                                            await async function(){
                                                ctx["source"]=(tokens && tokens["source"]);
                                                return ctx;
                                                
                                            }();
                                            rcv=await compile((tokens && tokens["val"]),ctx,await add(_cdepth,1));
                                             return  rcv
                                        } else if (check_true( (((tokens instanceof Object)&&await not((undefined===(tokens && tokens["val"])))&&(tokens && tokens["type"]))||((tokens && tokens["type"])==="literal")||((tokens && tokens["type"])==="arg")||((tokens && tokens["type"])==="null")))) {
                                            if (check_true (await (async function(){
                                                let __array_op_rval__651=verbosity;
                                                 if (__array_op_rval__651 instanceof Function){
                                                    return await __array_op_rval__651(ctx) 
                                                } else {
                                                    return[__array_op_rval__651,ctx]
                                                }
                                            })())){
                                                (comp_log)(("compile: "+_cdepth+" singleton: "),tokens);
                                                if (check_true (await get_ctx(ctx,"__IN_QUOTEM__"))){
                                                     (comp_log)(("compile: "+_cdepth+" singleton: "),"in quotem")
                                                }
                                            };
                                            let snt_name=null;
                                            ;
                                            let snt_value=null;
                                            ;
                                             return  await async function(){
                                                if (check_true( (await not((tokens && tokens["ref"]))&&((tokens && tokens["type"])==="arr")))) {
                                                     return await compile((tokens && tokens["val"]),ctx,await add(_cdepth,1))
                                                } else if (check_true( (((tokens && tokens["type"])==="null")||(((tokens && tokens["type"])==="literal")&&((tokens && tokens.name)==="null")&&(tokens && tokens["ref"]))))) {
                                                     return [{
                                                        ctype:"nil"
                                                    },"null"]
                                                } else if (check_true( (((tokens && tokens["type"])==="literal")&&((tokens && tokens.name)==="undefined")&&(tokens && tokens["ref"])))) {
                                                     return [{
                                                        ctype:"undefined"
                                                    },"undefined"]
                                                } else if (check_true( await not((tokens && tokens["ref"])))) {
                                                     if (check_true ((((tokens && tokens["type"])==="literal")&&((tokens && tokens["val"]) instanceof String || typeof (tokens && tokens["val"])==='string')))){
                                                          return [{
                                                            ctype:"string"
                                                        },("\""+await cl_encode_string((tokens && tokens["val"]))+"\"")]
                                                    } else {
                                                         if (check_true (await is_number_ques_((tokens && tokens["val"])))){
                                                              return [{
                                                                ctype:"NumberType"
                                                            },(tokens && tokens["val"])]
                                                        } else {
                                                              return [{
                                                                ctype:await sub_type((tokens && tokens["val"]))
                                                            },(tokens && tokens["val"])]
                                                        }
                                                    }
                                                } else if (check_true( ((tokens && tokens["ref"])&&(opts && opts["root_environment"])))) {
                                                     return  await (await Environment.get_global("path_to_js_syntax"))((await sanitize_js_ref_name((tokens && tokens.name))).split("."))
                                                } else if (check_true( ((tokens && tokens["ref"])&&op_lookup[(tokens && tokens.name)]))) {
                                                     return (tokens && tokens.name)
                                                } else if (check_true( ((tokens && tokens["ref"])&&await (async function ()  {
                                                    snt_name=await sanitize_js_ref_name((tokens && tokens.name));
                                                    snt_value=await get_ctx(ctx,snt_name);
                                                     return  (snt_value||(0===snt_value)||(false===snt_value))
                                                } )()))) {
                                                    refval=snt_value;
                                                    if (check_true ((refval===ArgumentType))){
                                                         refval=snt_name
                                                    };
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__652=verbosity;
                                                         if (__array_op_rval__652 instanceof Function){
                                                            return await __array_op_rval__652(ctx) 
                                                        } else {
                                                            return[__array_op_rval__652,ctx]
                                                        }
                                                    })())){
                                                         (comp_log)("compile: singleton: found local context: ",refval,"literal?",await (async function(){
                                                            let __array_op_rval__653=is_literal_ques_;
                                                             if (__array_op_rval__653 instanceof Function){
                                                                return await __array_op_rval__653(refval) 
                                                            } else {
                                                                return[__array_op_rval__653,refval]
                                                            }
                                                        })())
                                                    };
                                                     return  await async function(){
                                                        if (check_true( ((tokens && tokens["type"])==="literal"))) {
                                                             return refval
                                                        } else  {
                                                             return await get_val(tokens,ctx)
                                                        }
                                                    } ()
                                                } else if (check_true( await contains_ques_((tokens && tokens.name),standard_types))) {
                                                     return (tokens && tokens.name)
                                                } else if (check_true( await not((undefined===await get_lisp_ctx((tokens && tokens.name)))))) {
                                                     return await compile_lisp_scoped_reference((tokens && tokens.name),ctx)
                                                } else  {
                                                    throw new ReferenceError(("compile: unknown reference: "+(tokens && tokens.name)));
                                                    
                                                }
                                            } ()
                                        } else  {
                                            throw new SyntaxError("compile passed invalid compilation structure");
                                            
                                        }
                                    } ()
                                } 
                            } catch(__exception__612) {
                                  if (__exception__612 instanceof Error) {
                                     let e=__exception__612;
                                     {
                                        is_error={
                                            error:(e && e.name),source_name:source_name,message:(e && e.message),form:await source_from_tokens(tokens,expanded_tree),parent_forms:await source_from_tokens(tokens,expanded_tree,true),invalid:true
                                        };
                                        if (check_true ((opts && opts["throw_on_error"])))throw is_error;
                                        ;
                                        if (check_true (await not((e && e["handled"])))){
                                              return (errors).push(is_error)
                                        }
                                    }
                                } 
                            }
                        })()
                    }
                };
                final_token_assembly=null;
                main_log=await (async function () {
                     if (check_true ((opts && opts["quiet_mode"]))){
                          return log
                    } else {
                          return await defclog({
                            prefix:"compiler:",background:"green",color:"black"
                        })
                    } 
                })();
                assemble_output=async function(js_tree,suppress_join) {
                    let text;
                    let in_quotes;
                    let escaped;
                    let escape_char;
                    let format_depth;
                    let last_t;
                    let insert_indent;
                    let process_output_token;
                    let assemble;
                    text=[];
                    in_quotes=false;
                    escaped=0;
                    escape_char=await String.fromCharCode(92);
                    format_depth=[];
                    last_t=null;
                    insert_indent=async function() {
                        (text).push("\n");
                         return  await (async function() {
                            let __for_body__656=async function(spacer) {
                                 return  (text).push(spacer)
                            };
                            let __array__657=[],__elements__655=format_depth;
                            let __BREAK__FLAG__=false;
                            for(let __iter__654 in __elements__655) {
                                __array__657.push(await __for_body__656(__elements__655[__iter__654]));
                                if(__BREAK__FLAG__) {
                                     __array__657.pop();
                                    break;
                                    
                                }
                            }return __array__657;
                             
                        })()
                    };
                    process_output_token=async function(t) {
                        escaped=await Math.max(0,(escaped-1));
                         return  await async function(){
                            if (check_true( ((t==="\"")&&(escaped===0)&&in_quotes))) {
                                in_quotes=false;
                                 return  (text).push(t)
                            } else if (check_true( ((t==="\"")&&(escaped===0)))) {
                                in_quotes=true;
                                 return  (text).push(t)
                            } else if (check_true( (t===escape_char))) {
                                (escaped===2);
                                 return  (text).push(t)
                            } else if (check_true( (await not(in_quotes)&&(t==="{")))) {
                                (text).push(t);
                                (format_depth).push("    ");
                                 return  await insert_indent()
                            } else if (check_true( (await not(in_quotes)&&await starts_with_ques_("}",t)))) {
                                (format_depth).pop();
                                await insert_indent();
                                 return  (text).push(t)
                            } else if (check_true( (await not(in_quotes)&&(t===";")))) {
                                (text).push(t);
                                 return  await insert_indent()
                            } else if (check_true( (false&&await not(in_quotes)&&await starts_with_ques_("/*",t)))) {
                                (text).push(t);
                                 return  await insert_indent()
                            } else  {
                                 return  (text).push(t)
                            }
                        } ()
                    };
                    assemble=async function(js_tokens) {
                         return  await (async function() {
                            let __for_body__660=async function(t) {
                                 return  await async function(){
                                    if (check_true( (t instanceof Array))) {
                                         return  await assemble(t)
                                    } else if (check_true( ("object"===typeof t))) {
                                        if (check_true (((t && t["comment"])&&(opts && opts["include_source"])))){
                                            (text).push(("/* "+(t && t["comment"])+" */"));
                                             return  await insert_indent()
                                        }
                                    } else if (check_true( t instanceof Function)) {
                                         return  await async function(){
                                            if (check_true( ((t && t.name)&&await contains_ques_((t && t.name),standard_types)))) {
                                                 return (text).push((t && t.name))
                                            } else if (check_true( await (await Environment.get_global("ends_with?"))("{ [native code] }",await t["toString"]()))) {
                                                throw new ReferenceError(("cannot capture source of: "+(t && t.name)));
                                                
                                            } else  {
                                                 return (text).push(t)
                                            }
                                        } ()
                                    } else  {
                                        if (check_true ((opts && opts["formatted_output"]))){
                                              return await process_output_token(t)
                                        } else {
                                              return (text).push(t)
                                        }
                                    }
                                } ()
                            };
                            let __array__661=[],__elements__659=js_tokens;
                            let __BREAK__FLAG__=false;
                            for(let __iter__658 in __elements__659) {
                                __array__661.push(await __for_body__660(__elements__659[__iter__658]));
                                if(__BREAK__FLAG__) {
                                     __array__661.pop();
                                    break;
                                    
                                }
                            }return __array__661;
                             
                        })()
                    };
                    {
                        await assemble(await flatten(await (async function(){
                            let __array_op_rval__662=js_tree;
                             if (__array_op_rval__662 instanceof Function){
                                return await __array_op_rval__662() 
                            } else {
                                return[__array_op_rval__662]
                            }
                        })()));
                        if (check_true (suppress_join)){
                              return text
                        } else {
                              return (text).join("")
                        }
                    }
                };
                ;
                if (check_true ((null==Environment)))throw new EvalError("Compiler: No environment passed in options.");
                ;
                if (check_true ((opts && opts["show_hints"]))){
                     show_hints=true
                };
                if (check_true (await Environment["get_global"].call(Environment,"__VERBOSITY__"))){
                    {
                        let verbosity_level;
                        verbosity_level=await Environment["get_global"].call(Environment,"__VERBOSITY__");
                         await async function(){
                            if (check_true( (verbosity_level>4))) {
                                verbosity=check_verbosity;
                                 show_hints=true
                            } else if (check_true( (verbosity_level>3))) {
                                 return show_hints=true
                            }
                        } ()
                    }
                };
                if (check_true (await (async function(){
                    let __array_op_rval__663=verbosity;
                     if (__array_op_rval__663 instanceof Function){
                        return await __array_op_rval__663(ctx) 
                    } else {
                        return[__array_op_rval__663,ctx]
                    }
                })())){
                    await (async function(){
                        let __array_op_rval__664=main_log;
                         if (__array_op_rval__664 instanceof Function){
                            return await __array_op_rval__664("namespace set to: ",(Environment && Environment["namespace"])) 
                        } else {
                            return[__array_op_rval__664,"namespace set to: ",(Environment && Environment["namespace"])]
                        }
                    })();
                    if (check_true ((opts && opts["fully_qualified_globals"]))){
                         await (async function(){
                            let __array_op_rval__665=main_log;
                             if (__array_op_rval__665 instanceof Function){
                                return await __array_op_rval__665("fully qualified globals") 
                            } else {
                                return[__array_op_rval__665,"fully qualified globals"]
                            }
                        })()
                    }
                };
                await set_ctx(root_ctx,break_out,false);
                await async function(){
                    root_ctx["defined_lisp_globals"]=new Object();
                    return root_ctx;
                    
                }();
                await set_ctx(root_ctx,"__SOURCE_NAME__",source_name);
                await set_ctx(root_ctx,"__LAMBDA_STEP__",-1);
                output=await async function(){
                    if (check_true((opts && opts["special_operators"]))) {
                         return await (await Environment.get_global("make_set"))(await (await Environment.get_global("keys"))(op_lookup))
                    } else if (check_true((opts && opts["only_tokens"]))) {
                         return await tokenize(tree,root_ctx)
                    } else if (check_true(is_error)) {
                         return [{
                            ctype:"CompileError"
                        },is_error]
                    } else  {
                        await (async function(){
                            try /* TRY COMPLEX */ {
                                 return  final_token_assembly=await tokenize(tree,root_ctx)
                            }  catch(__exception__667) {
                                  if (__exception__667 instanceof Error) {
                                     let e=__exception__667;
                                      return is_error=e
                                } 
                            }
                        })();
                        await async function(){
                            if (check_true( (is_error&&(opts && opts["throw_on_error"])))) {
                                 throw is_error;
                                
                            } else if (check_true( (is_error instanceof SyntaxError))) {
                                (errors).push(is_error);
                                 return  is_error
                            } else if (check_true(is_error)) {
                                (errors).push(is_error);
                                 return  is_error
                            } else if (check_true( (null==final_token_assembly))) {
                                is_error=new EvalError("Pre-Compilation Error");
                                 return  (errors).push(is_error)
                            } else  {
                                assembly=await compile(final_token_assembly,root_ctx,0);
                                if (check_true ((false&&await not((opts && opts["root_environment"]))&&((first_level_setup && first_level_setup.length)===0)&&has_lisp_globals))){
                                     (first_level_setup).push(["const __GG__=",env_ref,"get_global",";"])
                                };
                                assembly=await (await Environment.get_global("splice_in_return_a"))(assembly);
                                 return  assembly=await (await Environment.get_global("splice_in_return_b"))(assembly)
                            }
                        } ();
                        if (check_true ((opts && opts["root_environment"]))){
                             has_lisp_globals=false
                        };
                        if (check_true (((assembly && assembly["0"] && assembly["0"]["ctype"])&&(assembly && assembly["0"] && assembly["0"]["ctype"]) instanceof Function))){
                             await async function(){
                                let __target_obj__668=(assembly && assembly["0"]);
                                __target_obj__668["ctype"]=await map_value_to_ctype((assembly && assembly["0"] && assembly["0"]["ctype"]));
                                return __target_obj__668;
                                
                            }()
                        };
                        await async function(){
                            if (check_true( (await not(is_error)&&assembly&&(await first(assembly) instanceof Object)&&await (async function(){
                                let __targ__669=await first(assembly);
                                if (__targ__669){
                                     return(__targ__669)["ctype"]
                                } 
                            })()&&(await not((await (async function(){
                                let __targ__670=await first(assembly);
                                if (__targ__670){
                                     return(__targ__670)["ctype"]
                                } 
                            })() instanceof String || typeof await (async function(){
                                let __targ__670=await first(assembly);
                                if (__targ__670){
                                     return(__targ__670)["ctype"]
                                } 
                            })()==='string'))||await (async function ()  {
                                let val;
                                val=await (async function(){
                                    let __targ__671=await first(assembly);
                                    if (__targ__671){
                                         return(__targ__671)["ctype"]
                                    } 
                                })();
                                 return  (await not((val==="assignment"))&&await not(await contains_ques_("block",val))&&await not(await contains_ques_("unction",val)))
                            } )())))) {
                                 return await async function(){
                                    let __target_obj__672=(assembly && assembly["0"]);
                                    __target_obj__672["ctype"]="statement";
                                    return __target_obj__672;
                                    
                                }()
                            } else if (check_true( (assembly&&(await first(assembly) instanceof String || typeof await first(assembly)==='string')&&(await first(assembly)==="throw")))) {
                                 return assembly=[{
                                    ctype:"block"
                                },assembly]
                            } else if (check_true( (await not(is_error)&&assembly&&(await not((await first(assembly) instanceof Object))||await not(await (async function(){
                                let __targ__673=await first(assembly);
                                if (__targ__673){
                                     return(__targ__673)["ctype"]
                                } 
                            })()))))) {
                                 return assembly=[{
                                    ctype:"statement"
                                },assembly]
                            } else if (check_true(is_error)) {
                                 return is_error
                            } else if (check_true( (null==assembly))) {
                                 return assembly=[]
                            }
                        } ();
                        if (check_true (is_error)){
                             return  [{
                                ctype:"FAIL"
                            },errors]
                        } else {
                             if (check_true ((await first(assembly) instanceof Object))){
                                  return [await add({
                                    has_lisp_globals:has_lisp_globals
                                },(assembly).shift()),await assemble_output(assembly)]
                            } else {
                                  return [{
                                    has_lisp_globals:has_lisp_globals
                                },await assemble_output(assembly)]
                            }
                        }
                    }
                } ();
                if (check_true (((await first(output) instanceof Object)&&target_namespace))){
                     await async function(){
                        let __target_obj__674=await first(output);
                        __target_obj__674["namespace"]=target_namespace;
                        return __target_obj__674;
                        
                    }()
                };
                if (check_true ((opts && opts["error_report"]))){
                     ((opts && opts["error_report"]))({
                        errors:errors,warnings:warnings
                    })
                };
                 return  output
            }
        }
    }
};__obj__1["read_text_file"]=await (await Environment.get_global("bind"))(Deno.readTextFile,Deno);__obj__1["readline_mod"]=await import ("https://deno.land/x/readline/mod.ts");__obj__1["streams"]=await import ("https://deno.land/std/streams/conversion.ts");__obj__1["repl"]=async function(instream,outstream,opts) {
    let not=function anonymous(x) {
{ if (check_true(x)) { return false } else { return true } }
};
    let buffer;
    let lines;
    let raw_mode;
    let use_console;
    let generator;
    let td;
    let te;
    let prompt_text;
    let __prompt__3= async function(){
        return async function() {
             return  await te["encode"].call(te,await prompt_text())
        }
    };
    let last_exception;
    let subprompt_text;
    let subprompt;
    let sigint_message;
    let write;
    let sigint_handler;
    let output_processor;
    let return_stack;
    {
        buffer=null;
        lines=[];
        raw_mode=await (await Environment.get_global("either"))((opts && opts["raw"]),await (await Environment.get_global("resolve_path"))(["repl","raw_mode"],(await Environment.get_global("*env_config*"))),false);
        use_console=((opts && opts["use_console"])||false);
        generator=(await Environment.get_global("readline_mod.readline"));
        instream=(instream||Deno.stdin);
        outstream=(outstream||Deno.stdout);
        td=new TextDecoder();
        te=new TextEncoder();
        prompt_text=await async function(){
            if (check_true( (opts && opts["prompt"]) instanceof Function)) {
                 return (opts && opts["prompt"])
            } else if (check_true( ((opts && opts["prompt"]) instanceof String || typeof (opts && opts["prompt"])==='string'))) {
                 return function() {
                     return  (opts && opts["prompt"])
                }
            } else  {
                 return function() {
                     return  ("["+ ( Environment.get_global("current_namespace"))()+"] λ-> ")
                }
            }
        } ();
        let prompt=await __prompt__3();
        ;
        last_exception=null;
        subprompt_text=await async function(){
            if (check_true( (opts && opts["subprompt"]) instanceof Function)) {
                 return (opts && opts["subprompt"])
            } else if (check_true( ((opts && opts["prompt"]) instanceof String || typeof (opts && opts["prompt"])==='string'))) {
                 return function() {
                     return  (opts && opts["prompt"])
                }
            } else  {
                 return async function() {
                     return  ("     "+(await (await Environment.get_global("map"))(async function(v) {
                         return  " "
                    },await (await Environment.get_global("range"))((2+await (await Environment.get_global("length"))(await (await Environment.get_global("current_namespace"))()))))).join("")+(await (await Environment.get_global("map"))(async function(v) {
                         return  " "
                    },await (await Environment.get_global("range_inc"))(((last_exception && last_exception["depth"])||1)))).join(""))
                }
            }
        } ();
        subprompt=async function() {
             return  await te["encode"].call(te,await subprompt_text())
        };
        sigint_message=await te["encode"].call(te,await (await Environment.get_global("either"))((opts && opts["sigint_message"]),"\nsigint: input canceled. type ctrl-d to exit.\n"));
        write=(await Environment.get_global("streams.writeAllSync"));
        sigint_handler=function() {
            {
                (write)(outstream,sigint_message);
                lines=[];
                 return  (write)(outstream,prompt)
            }
        };
        output_processor=await async function(){
            if (check_true( (opts&&(opts && opts["output_processor"])&&(opts && opts["output_processor"]) instanceof Function))) {
                 return (opts && opts["output_processor"])
            } else if (check_true( await (await Environment.get_global("resolve_path"))(["repl","output_processor"],(await Environment.get_global("*env_config*"))))) {
                 return await (await Environment.get_global("resolve_path"))(["repl","output_processor"],(await Environment.get_global("*env_config*")))
            } else  {
                 return async function(value) {
                     return  await JSON.stringify(value,null,2)
                }
            }
        } ();
        return_stack=[];
        ;
        await Environment.set_global("$",null);
        await Environment.set_global("$$",null);
        await Environment.set_global("$$$",null);
        if (check_true ((outstream===Deno.stdout))){
             await console.log("\nJuno",Environment.version," (c) 2022, Kina, LLC")
        };
        await (async function(){
            try /* TRY SIMPLE */ {
                  return await Deno.addSignalListener("SIGINT",sigint_handler) 
            } catch(__exception__4) {
                  if (__exception__4 instanceof Error) {
                     let e=__exception__4;
                      return await (await Environment.get_global("warn"))("Unable to install sigint handler.")
                } 
            }
        })();
        if (check_true (await not(raw_mode))){
             (write)(outstream,await prompt())
        };
         return  await (async function(){
            try /* TRY SIMPLE */ {
                  return await (async function() {
                    let __for_body__8=async function(l) {
                        {
                            l=await td["decode"].call(td,l);
                             return  await (async function(){
                                try /* TRY COMPLEX */ {
                                    await (await Environment.get_global("reader"))((await (await Environment.get_global("add"))(lines,l)).join("\n"),{
                                        verbose:false
                                    });
                                    buffer=(await (await Environment.get_global("add"))(lines,l)).join("\n");
                                    (return_stack).unshift(await Environment["evaluate"].call(Environment,buffer));
                                    if (check_true (use_console)){
                                         await console.log(await (await Environment.get_global("first"))(return_stack))
                                    } else {
                                        (write)(outstream,await te["encode"].call(te,await output_processor(await (await Environment.get_global("first"))(return_stack))));
                                         (write)(outstream,await te["encode"].call(te,"\n"))
                                    };
                                    if (check_true (await not(raw_mode))){
                                         (write)(outstream,await prompt())
                                    };
                                    lines=[];
                                    if (check_true (((return_stack && return_stack.length)>3))){
                                         (return_stack).pop()
                                    };
                                    if (check_true (((await (await Environment.get_global("first"))(return_stack)===Environment)||(await (await Environment.get_global("first"))(return_stack)===Environment.global_ctx)||(await (await Environment.get_global("first"))(return_stack)===Environment.global_ctx[(await Environment.get_global("*namespace*"))])||(await (await Environment.get_global("first"))(return_stack)===await (async function(){
                                        let __targ__10=Environment.global_ctx[(await Environment.get_global("*namespace*"))];
                                        if (__targ__10){
                                             return(__targ__10)["scope"]
                                        } 
                                    })())))){
                                         await async function(){
                                            return_stack[0]=null;
                                            return return_stack;
                                            
                                        }()
                                    };
                                    await Environment.set_global("$",await (await Environment.get_global("first"))(return_stack));
                                    await Environment.set_global("$$",await (await Environment.get_global("second"))(return_stack));
                                     return  await Environment.set_global("$$$",(return_stack && return_stack["2"]))
                                }  catch(__exception__9) {
                                      if (__exception__9 instanceof LispSyntaxError) {
                                         let e=__exception__9;
                                         {
                                            last_exception=await JSON.parse((e && e.message));
                                            await Environment.set_global("*last_exception*",last_exception);
                                             return  await async function(){
                                                if (check_true( await not(((last_exception && last_exception["type"])==="premature end")))) {
                                                    await (await Environment.get_global("warn"))(((last_exception && last_exception["message"])+", position: "+(last_exception && last_exception["position"])+"\n    -->"+(last_exception && last_exception["local_text"])+"<--"));
                                                    lines=[];
                                                    if (check_true (await not(raw_mode))){
                                                         return  (write)(outstream,await prompt())
                                                    }
                                                } else  {
                                                    (lines).push(l);
                                                    if (check_true (await not(raw_mode))){
                                                         return  (write)(outstream,await subprompt())
                                                    }
                                                }
                                            } ()
                                        }
                                    } else  if (__exception__9 instanceof Error) {
                                         let e=__exception__9;
                                          return await console.error("ERROR: ",e)
                                    } 
                                }
                            })()
                        }
                    };
                    let __BREAK__FLAG__=false;
                    for await (const __iter__6 of await (async function(){
                        let __array_op_rval__12=generator;
                         if (__array_op_rval__12 instanceof Function){
                            return await __array_op_rval__12(instream) 
                        } else {
                            return[__array_op_rval__12,instream]
                        }
                    })()) {
                        await __for_body__8(__iter__6);
                        if(__BREAK__FLAG__) break;
                        
                    } 
                })() 
            } catch(__exception__5) {
                  if (__exception__5 instanceof Error) {
                     let e=__exception__5;
                      return await console.error("REPL: ",e)
                } 
            }
        })()
    }
};__obj__1["path"]=await import ("https://deno.land/std@0.110.0/path/mod.ts");__obj__1["write_text_file"]=await (await Environment.get_global("bind"))(Deno.writeTextFile,Deno);__obj__1["load"]=async function(filename) {
    let fname;
    let js_mod;
    let comps;
    fname=filename;
    js_mod=null;
    comps=await (await Environment.get_global("path.parse"))(fname);
     return  await async function(){
        if (check_true( ((comps && comps["ext"])===".lisp"))) {
             return await (await Environment.get_global("evaluate"))(await (await Environment.get_global("read_text_file"))(fname),null,{
                source_name:fname
            })
        } else if (check_true( ((comps && comps["ext"])===".js"))) {
            js_mod=await import (fname);
            if (check_true ((js_mod && js_mod["initializer"]))){
                  return await (async function(){
                    let __array_op_rval__2=(js_mod && js_mod["initializer"]);
                     if (__array_op_rval__2 instanceof Function){
                        return await __array_op_rval__2(Environment) 
                    } else {
                        return[__array_op_rval__2,Environment]
                    }
                })()
            } else throw new EvalError("load: unable to find function named initializer in export, use dynamic_import for this.");
            
        } else if (check_true( ((comps && comps["ext"])===".json"))) {
             return await (await Environment.get_global("evaluate"))(await JSON.parse(await (await Environment.get_global("read_text_file"))(fname)),null,{
                json_in:true
            })
        }
    } ()
};__obj__1["with_fs_events"]=async function(...args) {
    let event_binding;
    let location;
    let body;
    event_binding=(args && args["0"] && args["0"]["0"]);
    location=(args && args["0"] && args["0"]["1"]);
    body=(args && args["1"]);
     return  ["=:let",[["=:watcher",["=:->","=:Deno","watchFs",location]]],["=:declare",["=:object","=:watcher"]],["=:for_with",[event_binding,"=:watcher"],["=:progn",body]]]
};__obj__1["compile_buffer"]=async function(input_buffer,export_function_name,options) {
    let output_filename;
    let opts;
    let segments;
    let export_segment;
    let include_boilerplate;
    let start_time;
    let compile_time;
    let write_file;
    let include_source;
    let compiled;
    let invalid_js_ref_chars;
    let invalid_js_ref_chars_regex;
    let boilerplate;
    let compiled_js;
    output_filename=((options && options["output_file"])||await (async function ()  {
        throw new EvalError("compile_buffer requires output_file be set in the options");
        
    } )());
    opts=(options||new Object());
    export_function_name=(export_function_name||"initializer");
    segments=[];
    export_segment=[];
    include_boilerplate=await (async function () {
         if (check_true ((false===(opts && opts["include_boilerplate"])))){
              return false
        } else {
              return true
        } 
    })();
    start_time=await Date.now();
    compile_time=null;
    write_file=true;
    include_source=await (async function () {
         if (check_true ((opts && opts["include_source"]))){
              return true
        } else {
              return false
        } 
    })();
    compiled=null;
    invalid_js_ref_chars="+?-%&^#!*[]~{}|";
    invalid_js_ref_chars_regex=new RegExp("[\%\+\[\>\?\<\\}\{&\#\^\=\~\*\!\)\(\-]+");
    boilerplate="var { get_next_environment_id, check_true, get_outside_global, subtype, lisp_writer, clone, LispSyntaxError } = await import(\"./lisp_writer.js\");";
    compiled_js=null;
    if (check_true ((await (await Environment.get_global("length"))(await (await Environment.get_global("scan_str"))(invalid_js_ref_chars_regex,export_function_name))>0))){
        throw new SyntaxError(("export function name contains an invalid JS character: "+export_function_name+", cannot contain: "+invalid_js_ref_chars));
        
    };
    (segments).push(("// Source: "+(options && options["input_filename"])+"  "));
    if (check_true (((opts && opts["build_headers"]) instanceof Array))){
        await (async function() {
            let __for_body__5=async function(header) {
                 return  (segments).push(header)
            };
            let __array__6=[],__elements__4=(opts && opts["build_headers"]);
            let __BREAK__FLAG__=false;
            for(let __iter__3 in __elements__4) {
                __array__6.push(await __for_body__5(__elements__4[__iter__3]));
                if(__BREAK__FLAG__) {
                     __array__6.pop();
                    break;
                    
                }
            }return __array__6;
             
        })();
         (segments).push("\n")
    };
    (segments).push("\n");
    if (check_true (include_boilerplate)){
         (segments).push(boilerplate)
    };
    if (check_true (((opts && opts["js_headers"]) instanceof Array))){
        await (async function() {
            let __for_body__9=async function(header) {
                 return  (segments).push(header)
            };
            let __array__10=[],__elements__8=(opts && opts["js_headers"]);
            let __BREAK__FLAG__=false;
            for(let __iter__7 in __elements__8) {
                __array__10.push(await __for_body__9(__elements__8[__iter__7]));
                if(__BREAK__FLAG__) {
                     __array__10.pop();
                    break;
                    
                }
            }return __array__10;
             
        })();
         (segments).push("\n")
    };
    if (check_true (((export_function_name==="init_dlisp")||(opts && opts["toplevel"])))){
         (segments).push("if (typeof AsyncFunction === \"undefined\") {\n  globalThis.AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n}")
    };
    if (check_true (((input_buffer instanceof Array)&&((input_buffer && input_buffer["0"])==="=:iprogn")))){
         await async function(){
            input_buffer[0]="=:progn";
            return input_buffer;
            
        }()
    };
    if (check_true ((opts && opts["verbose"]))){
         await console.log("input_buffer: ",input_buffer)
    };
    compiled=await (await Environment.get_global("compiler"))(input_buffer,await (await Environment.get_global("add"))({
        env:Environment,formatted_output:true,include_source:include_source,source_name:((opts && opts["input_filename"])||"anonymous")
    },opts));
    compile_time=await (await Environment.get_global("add"))(await (async function() {
        {
             let __call_target__=((await Date.now()-start_time)/1000), __call_method__="toFixed";
            return await __call_target__[__call_method__].call(__call_target__,3)
        } 
    })(),"s");
    await async function(){
        if (check_true((compiled && compiled["error"]))) {
             throw new Error((await Environment.get_global("indirect_new"))(compiled.error,(compiled && compiled["message"])));
            
        } else if (check_true( ((compiled && compiled["0"] && compiled["0"]["ctype"])&&((compiled && compiled["0"] && compiled["0"]["ctype"])==="FAIL")))) {
            write_file=false;
             return  await (await Environment.get_global("warn"))((compiled && compiled["1"]))
        } else if (check_true( ((compiled && compiled["0"] && compiled["0"]["ctype"])&&(await (await Environment.get_global("contains?"))("block",(compiled && compiled["0"] && compiled["0"]["ctype"]))||((compiled && compiled["0"] && compiled["0"]["ctype"])==="assignment")||((compiled && compiled["0"] && compiled["0"]["ctype"])==="__!NOT_FOUND!__"))))) {
             if (check_true (await (async function(){
                let __array_op_rval__12=(compiled && compiled["0"] && compiled["0"]["has_lisp_globals"]);
                 if (__array_op_rval__12 instanceof Function){
                    return await __array_op_rval__12() 
                } else {
                    return[__array_op_rval__12]
                }
            })())){
                (segments).push(("export async function "+export_function_name+"(Environment)  {"));
                (segments).push((compiled && compiled["1"]));
                 (segments).push("}")
            } else {
                (segments).push(("export async function "+export_function_name+"() {"));
                (segments).push((compiled && compiled["1"]));
                 (segments).push("}")
            }
        } else if (check_true( ((compiled && compiled["0"] && compiled["0"]["ctype"])&&(("AsyncFunction"===(compiled && compiled["0"] && compiled["0"]["ctype"]))||("statement"===(compiled && compiled["0"] && compiled["0"]["ctype"]))||("objliteral"===(compiled && compiled["0"] && compiled["0"]["ctype"])))))) {
            if (check_true (await (async function(){
                let __array_op_rval__13=(compiled && compiled["0"] && compiled["0"]["has_lisp_globals"]);
                 if (__array_op_rval__13 instanceof Function){
                    return await __array_op_rval__13() 
                } else {
                    return[__array_op_rval__13]
                }
            })())){
                (segments).push(("export async function "+export_function_name+"(Environment) {"));
                 return  (segments).push(("  return "+(compiled && compiled["1"])+"} "))
            } else {
                (segments).push(("export async function "+export_function_name+"() {"));
                 return  (segments).push(("  return "+(compiled && compiled["1"])+"} "))
            }
        } else if (check_true( ((compiled && compiled["0"] && compiled["0"]["ctype"])&&("Function"===(compiled && compiled["0"] && compiled["0"]["ctype"]))))) {
            if (check_true (await (async function(){
                let __array_op_rval__14=(compiled && compiled["0"] && compiled["0"]["has_lisp_globals"]);
                 if (__array_op_rval__14 instanceof Function){
                    return await __array_op_rval__14() 
                } else {
                    return[__array_op_rval__14]
                }
            })())){
                (segments).push(("export function "+export_function_name+"(Environment) {"));
                 return  (segments).push(("  return "+(compiled && compiled["1"])+"}"))
            } else {
                (segments).push(("export function "+export_function_name+"() {"));
                 return  (segments).push(("  return "+(compiled && compiled["1"])+" } "))
            }
        } else  {
            await console.log("warning: unhandled return: ",compiled);
             return  write_file=false
        }
    } ();
    if (check_true ((opts && opts["bundle"]))){
        (segments).push(("await init_dlisp();"));
         (segments).push(("let env = await dlisp_env("+await (async function () {
             if (check_true ((opts && opts["bundle_options"]))){
                  return await JSON.stringify((opts && opts["bundle_options"]))
            } else {
                  return ""
            } 
        })()+");"))
    };
    if (check_true (((opts && opts["exports"]) instanceof Array))){
        (export_segment).push("export { ");
        await (await Environment.get_global("map"))(async function(exp,i,len) {
            {
                await async function(){
                    if (check_true( ((exp instanceof Array)&&((exp && exp.length)===2)))) {
                        (export_segment).push((exp && exp["0"]));
                        (export_segment).push(" as ");
                         return  (export_segment).push((exp && exp["1"]))
                    } else if (check_true( (exp instanceof String || typeof exp==='string'))) {
                         return (export_segment).push(exp)
                    } else  {
                         throw new SyntaxError(("Invalid export format: "+exp));
                        
                    }
                } ();
                if (check_true ((i<(len-1)))){
                     return  (export_segment).push(",")
                }
            }
        },(opts && opts["exports"]));
         (segments).push((export_segment).join(""))
    };
    if (check_true (write_file)){
        await (await Environment.get_global("write_text_file"))(output_filename,(segments).join("\n"));
        await (await Environment.get_global("success"))(("["+compile_time+"] compiled: "),((opts && opts["input_filename"])||(opts && opts["namespace"])||"anonymous"),"->",output_filename);
         return  output_filename
    } else {
        await (await Environment.get_global("warn"))("cannot compile: ",((opts && opts["input_filename"])||(opts && opts["namespace"])||"anonymous"));
         return  null
    }
};__obj__1["compile_file"]=async function(lisp_file,export_function_name,options) {
    let input_components;
    let input_filename;
    let input_buffer;
    input_components=await (await Environment.get_global("path.parse"))(lisp_file);
    input_filename=await (await Environment.get_global("path.basename"))(lisp_file);
    input_buffer=null;
    input_buffer=await (await Environment.get_global("read_text_file"))(lisp_file);
    if (check_true (((input_components && input_components["ext"])===".lisp"))){
         input_buffer=await (await Environment.get_global("read_lisp"))(input_buffer,{
            implicit_progn:false,source_name:input_filename
        })
    };
     return  await (await Environment.get_global("compile_buffer"))(input_buffer,export_function_name,await (await Environment.get_global("add"))(new Object(),{
        input_filename:input_filename
    },await (async function() {
         if (check_true (options)){
              return options
        } else {
              return new Object()
        } 
    } )()))
};__obj__1["rebuild_env"]=async function(opts) {
    let issues;
    let source_dir;
    let output_dir;
    let dcomps;
    let version_tag;
    let build_time;
    let build_headers;
    let include_source;
    let source_path;
    let output_path;
    issues=[];
    source_dir=((opts && opts["source_dir"])||"./src");
    output_dir=((opts && opts["output_dir"])||"./js");
    dcomps=await (await Environment.get_global("date_components"))(new Date());
    version_tag=await (async function () {
         if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("blank?"))((opts && opts["version_tag"]))))){
              return (opts && opts["version_tag"])
        } else {
              return (await (async function(){
                let __array_op_rval__15=(dcomps && dcomps["year"]);
                 if (__array_op_rval__15 instanceof Function){
                    return await __array_op_rval__15((dcomps && dcomps["month"]),(dcomps && dcomps["day"]),(dcomps && dcomps["hour"]),(dcomps && dcomps["minute"])) 
                } else {
                    return[__array_op_rval__15,(dcomps && dcomps["month"]),(dcomps && dcomps["day"]),(dcomps && dcomps["hour"]),(dcomps && dcomps["minute"])]
                }
            })()).join(".")
        } 
    })();
    build_time=await (await Environment.get_global("formatted_date"))(new Date());
    build_headers=[];
    include_source=((opts && opts["include_source"])||false);
    source_path=async function(filename) {
         return  (await (async function(){
            let __array_op_rval__16=source_dir;
             if (__array_op_rval__16 instanceof Function){
                return await __array_op_rval__16(filename) 
            } else {
                return[__array_op_rval__16,filename]
            }
        })()).join((await Environment.get_global("path.sep")))
    };
    output_path=async function(filename) {
         return  (await (async function(){
            let __array_op_rval__17=output_dir;
             if (__array_op_rval__17 instanceof Function){
                return await __array_op_rval__17(filename) 
            } else {
                return[__array_op_rval__17,filename]
            }
        })()).join((await Environment.get_global("path.sep")))
    };
    await console.log("Environment Build Time: ",build_time);
    await console.log("Version Tag: ",version_tag);
    await console.log("Source Directory: ",source_dir);
    await console.log("Output Directory: ",output_dir);
    (build_headers).push(("// Build Time: "+build_time));
    (build_headers).push(("// Version: "+version_tag));
    (build_headers).push(("export const DLISP_ENV_VERSION='"+version_tag+"';"));
    await (await Environment.get_global("load"))(await source_path("reader.lisp"));
    await (await Environment.get_global("success"))("reloaded reader");
    await (await Environment.get_global("compile_file"))(await source_path("compiler.lisp"),"init_compiler",{
        output_file:await output_path("compiler.js"),include_source:include_source,build_headers:build_headers
    });
    await (await Environment.get_global("compile_file"))(await source_path("reader.lisp"),null,{
        output_file:await output_path("reader.js"),include_source:include_source,build_headers:build_headers
    });
    await (await Environment.get_global("compile_file"))(await source_path("environment.lisp"),"init_dlisp",{
        output_file:await output_path("environment.js"),include_source:include_source,toplevel:true,build_headers:build_headers
    });
    await (await Environment.get_global("compile_file"))(await source_path("compiler-boot-library.lisp"),"environment_boot",{
        output_file:await output_path("environment_boot.js"),include_source:include_source,build_headers:build_headers
    });
    await (await Environment.get_global("compile_file"))(await source_path("core.lisp"),"load_core",{
        output_file:await output_path("core.js"),include_source:include_source,build_headers:build_headers
    });
    await (await Environment.get_global("compile_file"))(await source_path("io.lisp"),null,{
        output_file:await output_path("io.js"),include_source:include_source,build_headers:build_headers
    });
    await (await Environment.get_global("success"))("complete");
     return  true
};__obj__1["build_environment_macro"]=async function(opts) {
    let source_dir;
    let idx;
    let pos_of_define_env;
    let src;
    source_dir=((opts && opts["source_dir"])||"./src");
    idx=-1;
    pos_of_define_env=null;
    src=await (await Environment.get_global("resolve_path"))([2],await (await Environment.get_global("last"))(await (await Environment.get_global("reader"))(await (await Environment.get_global("read_text_file"))(await (await Environment.get_global("add"))(source_dir,"/environment.lisp")))));
    (await (await Environment.get_global("resolve_path"))([1],src)).pop();
    if (check_true (await (await Environment.get_global("not"))(((src && src["0"])==="=:fn"))))throw new SyntaxError("Invalid environment.js source file.  The last form in the file must be a (defexternal dlisp_env (fn (opts) ...");
    ;
     return  await Environment.set_global("construct_environment",async function(options) {
         return  ["=:fn",[],["=:let",[["=:opts",options]],src]]
    },{ "eval_when":{ "compile_time":true
},"name":"construct_environment","macro":true,"fn_args":"(options)"
})
};__obj__1["*env_skeleton*"]=["=:iprogn",["=:set_prop","=:globalThis","subtype","=:subtype","check_true","=:check_true","clone","=:clone","lisp_writer","=:lisp_writer","LispSyntaxError","=:LispSyntaxError"],["=:if",["=:==","undefined",["=:typeof","=:dlisp_environment_count"]],["=:set_prop","=:globalThis","dlisp_environment_count",0]],["=:defexternal","=:dlisp_env",["=:fn",["=:opts"],["=:progn",["=:declare",["=:toplevel",true],["=:include","=:subtype","=:get_object_path","=:get_outside_global"],["=:local","=:clone","=:get_next_environment_id","=:check_true"]],["=:=","=:opts",["=:if",["=:==","=:opts","=:undefined"],{},"=:opts"]],["=:defvar","=:namespace",["=:or","=:opts.namespace","core"]],["=:defvar","=:parent_environment",["=:if",["=:==","=:namespace","core"],"=:nil","=:opts.parent_environment"]],["=:defvar","=:active_namespace","=:namespace"],["=:defvar","=:contained",["=:or","=:opts.contained",false]],["=:defvar","=:Environment",{"global_ctx":{"scope":{},"name":"=:namespace"},"version":["=:javascript","=:DLISP_ENV_VERSION"],"definitions":["=:or","=:opts.definitions",{}],"declarations":["=:or","=:opts.declarations",{"safety":{"level":2}}]}],["=:defvar","=:id",["=:get_next_environment_id"]],["=:set_prop","=:Environment","context","=:Environment.global_ctx"],["=:defvar","=:unset_compiler",["=:fn",[],["=:throw","=:EvalError",["=:+","compiler must be set for ","=:namespace"]]]],["=:defvar","=:compiler","=:unset_compiler"],["=:defvar","=:compiler_operators",["=:new","=:Set"]],["=:defvar","=:special_identity",["=:fn",["=:v"],"=:v"]],["=:define_env",["=:MAX_SAFE_INTEGER",9007199254740991],["=:LispSyntaxError","=:globalThis.LispSyntaxError"],["=:sub_type","=:subtype"],["=:__VERBOSITY__",0,{"description":"Set __VERBOSITY__ to a positive integer for verbose console output of system activity.","tags":["debug","compiler","environment","global"]}],["=:int","=:parseInt",{"usage":"value:string|number","description":"Convenience method for parseInt, should be used in map vs. directly calling parseInt, which will not work directly","tags":["conversion","number"]}],["=:float","=:parseFloat",{"usage":"value:string|number","description":"Convenience method for parseFloat, should be used in map vs. directly calling parseFloat, which will not work directly","tags":["conversion","number"]}],["=:values",["=:new","=:Function","...args","{\n                                let acc = [];\n                                for (let _i in args) {\n                                    let value = args[_i];\n                                    let type = subtype(value);\n                                    if (value instanceof Set)  {\n                                        acc = acc.concat(Array.from(value));\n                                    } else if (type==='array') {\n                                        acc = acc.concat(value);\n                                    } else if (type==='object') {\n                                        acc = acc.concat(Object.values(value))\n                                    } else {\n                                        acc = acc.concat(value);\n                                    }\n                                }\n                                return acc;\n                            }"]],["=:pairs",["=:new","=:Function","obj","{\n                                    if (subtype(obj)==='array') {\n                                        let rval = [];\n                                        for (let i = 0; i < obj.length; i+=2) {\n                                            rval.push([obj[i],obj[i+1]]);\n                                        }\n                                        return rval;\n                                    } else {\n                                        let keys = Object.keys(obj);\n                                        let rval = keys.reduce(function(acc,x,i) {\n                                            acc.push([x,obj[x]])\n                                            return acc;\n                                        },[]);\n                                        return rval;\n                                    }\n                                }"]],["=:keys",["=:new","=:Function","obj","{  return Object.keys(obj);  }"]],["=:take",["=:new","=:Function","place","{ return place.shift() }"]],["=:prepend",["=:new","=:Function","place","thing","{ return place.unshift(thing) }"]],["=:first",["=:new","=:Function","x","{ return x[0] }"]],["=:last",["=:new","=:Function","x","{ return x[x.length - 1] }"]],["=:length",["=:new","=:Function","obj","{\n                                if(obj instanceof Array) {\n                                    return obj.length;\n                                } else if (obj instanceof Set) {\n                                    return obj.size;\n                                } else if ((obj === undefined)||(obj===null)) {\n                                    return 0;\n                                } else if (typeof obj==='object') {\n                                    return Object.keys(obj).length;\n                                } else if (typeof obj==='string') {\n                                    return obj.length;\n                                } \n                                return 0;\n                            }"]],["=:conj",["=:new","=:Function","...args","{   let list = [];\n                                if (args[0] instanceof Array) {\n                                    list = args[0];\n                                } else {\n                                    list = [args[0]];\n                                }\n                                args.slice(1).map(function(x) {\n                                    list = list.concat(x);\n                                });\n                                return list;\n                            }"]],["=:reverse",["=:new","=:Function","container","{ return container.slice(0).reverse }"],{"usage":["container:list"],"description":"Returns a copy of the passed list as reversed.  The original is not changed.","tags":["list","sort","order"]}],["=:map",["=:new","=:AsyncFunction","lambda","array_values","{ try {\n                                        let rval = [],\n                                                tl = array_values.length;\n                                        for (let i = 0; i < array_values.length; i++) {\n                                            rval.push(await lambda.apply(this,[array_values[i], i, tl]));\n                                         }\n                                        return rval;\n                                    } catch (ex) {           \n                                              if (lambda === undefined || lambda === null) {\n                                                    throw new ReferenceError(\"map: lambda argument (position 0) is undefined or nil\")\n                                              } else if (array_values === undefined || array_values === null) {\n                                                    throw new ReferenceError(\"map: container argument (position 1) is undefined or nil\")\n                                              } else if (!(lambda instanceof Function)) {\n                                                    throw new ReferenceError(\"map: lambda argument must be a function: received: \"+ typeof lambda)\n                                              } else if (!(array_values instanceof Array)) {\n                                                    throw new ReferenceError(\"map: invalid array argument, received: \" + typeof array_values)\n                                              } else {\n                                                    // something else just pass on the error\n                                                throw ex;\n                                              }\n                                    }\n                              }"]],["=:bind",["=:new","=:Function","func,this_arg","{ return func.bind(this_arg) }"]],["=:to_object",["=:new","=:Function","array_values","{\n                                      let obj={}\n                                      array_values.forEach((pair)=>{\n                                             obj[pair[0]]=pair[1]\n                                      });\n                                      return obj;\n                                    }"],{"description":["=:+","Given an array of pairs in the form of [[key value] [key value] ...], constructs an ","object with the first array element of the pair as the key and the second ","element as the value. A single object is returned."],"usage":["paired_array:array"],"tags":["conversion","object","array","list","pairs"]}],["=:to_array",["=:fn",["=:container"],["=:cond",["=:is_array?","=:container"],"=:container",["=:is_set?","=:container"],["=:do",["=:defvar","=:acc",[]],["=:->","=:container","forEach",["=:fn",["=:v"],["=:push","=:acc","=:v"]]],"=:acc"],["=:is_string?","=:container"],["=:split_by","","=:container"],["=:is_object?","=:container"],["=:pairs","=:container"],"=:else",["=:container"]]],{"description":["=:+","Given a container of type Array, Set, Object, or a string, ","it will convert the members of the container to an array form, ","and return a new array with the values of the provided container. ","In the case of an object, the keys and values will be contained in ","paired arrays in the returned array.  A string will be split into ","individual characters. If provided a different ","type other than the listed values above, the value will be placed ","in an array as a single element."],"usage":["container:*"],"tags":["list","array","conversion","set","object","string","pairs"]}],["=:slice",["=:function",["=:target","=:from","=:to"],["=:cond","=:to",["=:->","=:target","slice","=:from","=:to"],"=:from",["=:->","=:target","slice","=:from"],"=:else",["=:throw","=:SyntaxError","slice requires 2 or 3 arguments"]]]],["=:rest",["=:function",["=:x"],["=:cond",["=:instanceof","=:x","=:Array"],["=:->","=:x","slice",1],["=:is_string?","=:x"],["=:->","=:x","substr",1],"=:else","=:nil"]]],["=:second",["=:new","=:Function","x","{ return x[1] }"]],["=:third",["=:new","=:Function","x","{ return x[2] }"]],["=:chop",["=:new","=:Function","x","{ if (x instanceof Array) { return x.slice(0, x.length-1) } else { return x.substr(0,x.length-1) } }"]],["=:chomp",["=:new","=:Function","x","{ return x.substr(x.length-1) }"]],["=:not",["=:new","=:Function","x","{ if (check_true(x)) { return false } else { return true } }"]],["=:push",["=:new","=:Function","place","thing","{ return place.push(thing) }"]],["=:pop",["=:new","=:Function","place","{ return place.pop() }"]],["=:list",["=:fn",["&","=:args"],"=:args"]],["=:flatten",["=:new","=:Function","x","{ return x.flat(999999999999) } "]],["=:jslambda",["=:function",["&","=:args"],["=:apply","=:Function",["=:flatten","=:args"]]]],["=:join",["=:function",["&","=:args"],["=:cond",["=:==","=:args.length",1],["=:->","=:args.0","join",""],"=:else",["=:->","=:args.1","join","=:args.0"]]]],["=:lowercase",["=:function",["=:x"],["=:->","=:x","toLowerCase"]]],["=:uppercase",["=:function",["=:x"],["=:->","=:x","toUpperCase"]]],["=:log",["=:function",["&","=:args"],["=:apply","=:console.log","=:args"]]],["=:split",["=:new","=:Function","container","token","{ return container.split(token) }"]],["=:split_by",["=:new","=:Function","token","container","{ return container.split(token) }"]],["=:is_object?",["=:new","=:Function","x","{ return x instanceof Object }"],{"description":"for the given value x, returns true if x is an Javascript object type.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:is_array?",["=:new","=:Function","x","{ return x instanceof Array }"],{"description":"for the given value x, returns true if x is an array.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:is_number?",["=:function",["=:x"],["=:==",["=:subtype","=:x"],"Number"]],{"description":"for the given value x, returns true if x is a number.","usage":["arg:value"],"tags":["type","condition","subtype","value","what","function"]}],["=:is_function?",["=:function",["=:x"],["=:instanceof","=:x","=:Function"]],{"description":"for the given value x, returns true if x is a function.","usage":["arg:value"],"tags":["type","condition","subtype","value","what","function"]}],["=:is_set?",["=:new","=:Function","x","{ return x instanceof Set }"],{"description":"for the given value x, returns true if x is a set.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:is_element?",["=:new","=:Function","x","{ return x instanceof Element }"],{"description":"for the given value x, returns true if x is an Element object","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:is_string?",["=:function",["=:x"],["=:or",["=:instanceof","=:x","=:String"],["=:==",["=:typeof","=:x"],"string"]]],{"description":"for the given value x, returns true if x is a String object","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:is_nil?",["=:function",["=:x"],["=:==","=:x","=:nil"]],{"description":"for the given value x, returns true if x is exactly equal to nil.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:is_regex?",["=:function",["=:x"],["=:==",["=:sub_type","=:x"],"RegExp"]],{"description":"for the given value x, returns true if x is a Javascript regex object","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:is_date?",["=:function",["=:x"],["=:==",["=:sub_type","=:x"],"Date"]],{"description":"for the given value x, returns true if x is a Date object.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:ends_with?",["=:new","=:Function","val","text","{ if (text instanceof Array) { return text[text.length-1]===val } else if (subtype(text)=='String') { return text.endsWith(val) } else { return false }}"],{"description":"for a given string or array, checks to see if it ends with the given start_value.  Non string args return false.","usage":["end_value:value","collection:array|string"],"tags":["string","text","list","array","filter","reduce"]}],["=:starts_with?",["=:new","=:Function","val","text","{ if (text instanceof Array) { return text[0]===val } else if (subtype(text)=='String') { return text.startsWith(val) } else { return false }}"],{"description":"for a given string or array, checks to see if it starts with the given start_value.  Non string args return false.","usage":["start_value:value","collection:array|string"],"tags":["string","text","list","array","filter","reduce","begin"]}],["=:blank?",["=:function",["=:val"],["=:or",["=:eq","=:val","=:nil"],["=:and",["=:is_string?","=:val"],["=:==","=:val",""]]]]],["=:contains?",["=:new","=:Function","value","container","{ if (!value && !container) { return false }\n                           else if (container === null) { throw new TypeError(\"contains?: passed nil/undefined container value\"); }\n                           else if ((container instanceof String) || typeof container === \"string\") {\n                                if (subtype(value) === \"Number\") return container.indexOf(\"\"+value)>-1;\n                                else return container.indexOf(value)>-1;\n                           }\n                           else if (container instanceof Array) return container.includes(value);\n                           else if (container instanceof Set) return container.has(value);\n                           else throw new TypeError(\"contains?: passed invalid container type: \"+subtype(container)) }"]],["=:make_set",["=:function",["=:vals"],["=:if",["=:instanceof","=:vals","=:Array"],["=:new","=:Set","=:vals"],["=:let",[["vtype",["=:sub_type","=:vals"]]],["=:cond",["=:==","=:vtype","Set"],["=:new","=:Set","=:vals"],["=:==","=:vtype","object"],["=:new","=:Set",["=:values","=:vals"]]]]]]],["=:meta_for_symbol",["=:fn",["=:quoted_symbol","=:search_mode"],["=:when",["=:is_string?","=:quoted_symbol"],["=:defvar","=:local_data",["=:prop","=:Environment.global_ctx.scope","=:quoted_symbol"]],["=:if","=:search_mode",["=:cond","=:local_data",[["=:+",{"namespace":"=:namespace","name":"=:quoted_symbol","type":["=:subtype","=:local_data"]},["=:aif",["=:prop","=:Environment.definitions","=:quoted_symbol"],"=:it",{}]]],"=:parent_environment",["=:->",["=:->","=:parent_environment","meta_for_symbol","=:quoted_symbol",true],"flat",1],["=:>",["=:length",["=:keys","=:children"]],0],["=:reduce",["details",["=:for_each",["child_data",["=:pairs","=:children"]],["=:->","=:child_data.1","meta_for_symbol","=:quoted_symbol"]]],"=:details"]],["=:do",["=:=","=:quoted_symbol",["=:if",["=:starts_with?",["=:quote","=:"],"=:quoted_symbol"],["=:->","=:quoted_symbol","substr",2],"=:quoted_symbol"]],["=:aif",["=:prop","=:Environment.definitions","=:quoted_symbol"],["=:+",{"namespace":"=:namespace","type":["=:sub_type","=:local_data"],"name":"=:quoted_symbol"},"=:it"]]]]]]],["=:describe",["=:fn",["=:quoted_symbol","=:search_mode"],["=:progn",["=:defvar","=:internal_results",["=:meta_for_symbol","=:quoted_symbol",true]],["=:if",["=:and",["=:is_array?","=:internal_results"],"=:internal_results.0"],["=:if","=:search_mode","=:internal_results",["=:first","=:internal_results"]],["=:do",["=:defvar","=:external_results",["=:get_outside_global","=:quoted_symbol"]],["=:if","=:external_results",{"location":"external","type":["=:subtype","=:external_results"]},"=:nil"]]]]]],["=:undefine",["=:function",["=:quoted_symbol"],["=:if",["=:is_string?","=:quoted_symbol"],["=:let",[["namespace_identity",["=:split_by","/","=:quoted_symbol"]],["parent_call","=:nil"],["child_call","=:nil"],["target_symbol","=:nil"]],["=:declare",["=:function","=:parent_call"]],["=:cond",["=:or",["=:and",["=:==","=:namespace_identity.length",1],["=:prop","=:Environment.global_ctx.scope","=:namespace_identity.0"]],["=:and",["=:>","=:namespace_identity.length",1],["=:==","=:namespace_identity.0","=:namespace"]]],["=:progn",["=:=","=:target_symbol",["=:if",["=:>","=:namespace_identity.length",1],"=:namespace_identity.1","=:namespace_identity.0"]],["=:delete_prop","=:Environment.definitions","=:target_symbol"],["=:if",["=:prop","=:Environment.global_ctx.scope","=:target_symbol"],["=:delete_prop","=:Environment.global_ctx.scope","=:target_symbol"],false]],["=:and",["=:>","=:namespace_identity.length",1],"=:parent_environment"],["=:progn",["=:setq","=:parent_call",["=:->","=:parent_environment","get_global","undefine"]],["=:parent_call","=:quoted_symbol"]],["=:and",["=:>","=:namespace_identity.length",1],["=:prop","=:children","=:namespace_identity.0"]],["=:progn",["=:setq","=:child_call",["=:->",["=:prop","=:children","=:namespace_identity.0"],"get_global","undefine"]],["=:child_call","=:quoted_symbol"]],"=:else",false]],["=:throw","=:SyntaxError","undefine requires a quoted symbol"]]]],["=:eval_exp",["=:fn",["=:expression"],["=:do",["=:console.log","EVAL:","=:expression"],["=:expression"]]]],["=:indirect_new",["=:new","=:Function","...args","{\n                                    let targetClass = args[0];\n                                    if (subtype(targetClass)===\"String\") {\n                                        let tmpf=new Function(\"{ return \"+targetClass+\" }\");\n                                        targetClass = tmpf();\n                                    }\n                                    if (args.length==1) {\n                                        let f = function(Class) {\n                                            return new (Function.prototype.bind.apply(Class, args));\n                                        }\n                                        let rval = f.apply(this,[targetClass]);\n                                        return rval;\n                                    } else {\n                                        let f = function(Class) {\n                                            return new (Function.prototype.bind.apply(Class, args));\n                                        }\n                                        let rval = f.apply(this,[targetClass].concat(args.slice(1)));\n                                        return rval;\n                                    }}"]],["=:range",["=:function",["&","=:args"],["=:let",[["from_to",["=:if","=:args.1",[["=:int","=:args.0"],["=:int","=:args.1"]],[0,["=:int","=:args.0"]]]],["step",["=:if","=:args.2",["=:float","=:args.2"],1]],["idx","=:from_to.0"],["acc",[]]],["=:while",["=:<","=:idx","=:from_to.1"],["=:do",["=:push","=:acc","=:idx"],["=:inc","=:idx","=:step"]]],"=:acc"]]],["=:add",["=:new","=:Function","...args","{\n                                let acc;\n                                if (typeof args[0]===\"number\") {\n                                    acc = 0;\n                                } else if (args[0] instanceof Array) {\n                                    return args[0].concat(args.slice(1));\n                                } else if (typeof args[0]==='object') {\n                                   let rval = {};\n                                   for (let i in args) {\n                                        if (typeof args[i] === 'object') {\n                                            for (let k in args[i]) {\n                                                rval[k] = args[i][k];\n                                            }\n                                        }\n                                   }\n                                   return rval;\n                                } else {\n                                    acc = \"\";\n                                }\n                                for (let i in args) {\n                                    acc += args[i];\n                                }\n                                return acc;\n                             }"]],["=:merge_objects",["=:new","=:Function","x","{\n                                    let rval = {};\n                                    for (let i in x) {\n                                        if (typeof i === 'object') {\n                                            for (let k in x[i]) {\n                                                rval[k] = x[i][k];\n                                            }\n                                        }\n                                    }\n                                    return rval;\n                                 }"]],["=:index_of",["=:new","=:Function","value","container",["=:+","{ return container.indexOf(value) }"]]],["=:resolve_path",["=:new","=:Function","path,obj","{\n                                        if (typeof path==='string') {\n                                            path = path.split(\".\");\n                                        }\n                                        let s=obj;\n                                        return path.reduce(function(prev, curr) {\n                                            return prev ? prev[curr] : undefined\n                                        }, obj || {})\n                                    }"]],["=:delete_prop",["=:new","=:Function","obj","...args","{\n                                        if (args.length == 1) {\n                                            return delete obj[args[0]];\n                                        } else {\n                                            while (args.length > 0) {\n                                                let prop = args.shift();\n                                                delete obj[prop];\n                                            }\n                                        }\n                                        return obj;\n                                    }"]],["=:min_value",["=:new","=:Function","elements","{ return Math.min(...elements); }"]],["=:max_value",["=:new","=:Function","elements","{ return Math.max(...elements); }"]],["=:interlace",["=:fn",["&","=:args"],["=:let",[["=:min_length",["=:min_value",["=:map","=:length","=:args"]]],["=:rlength_args",["=:range",["=:length","=:args"]]],["=:rval",[]]],["=:for_each",["i",["=:range","=:min_length"]],["=:for_each",["j","=:rlength_args"],["=:push","=:rval",["=:prop",["=:prop","=:args","=:j"],"=:i"]]]],"=:rval"]],{"usage":["list0:array","list1:array","listn?:array"],"description":"Returns a list containing a consecutive values from each list, in argument order.  I.e. list0.0 list1.0 listn.0 list0.1 list1.1 listn.1 ...","tags":["list","array","join","merge"]}],["=:trim",["=:function",["=:x"],["=:->","=:x","trim"]]],["=:assert",["=:function",["=:assertion_form","=:failure_message"],["=:if","=:assertion_form","=:assertion_form",["=:throw","=:EvalError",["=:or","=:failure_message","assertion failure"]]]],{"description":"If the evaluated assertion form is true, the result is returned, otherwise an EvalError is thrown with the optionally provided failure message.","usage":["form:*","failure_message:string?"],"tags":["true","error","check","debug","valid","assertion"]}],["=:unquotify",["=:fn",["=:val"],["=:let",[["=:dval","=:val"]],["=:if",["=:starts_with?","\"","=:dval"],["=:=","=:dval",["=:->","=:dval","substr",1,["=:-","=:dval.length",2]]]],["=:if",["=:starts_with?","=:","=:dval"],["=:=","=:dval",["=:->","=:dval","substr",2]]],"=:dval"]],{"description":"Removes binding symbols and quotes from a supplied value.  For use in compile time function such as macros.","usage":["val:string"],"tags":["macro","quote","quotes","desym"]}],["=:or_args",["=:fn",["=:argset"],["=:let",[["=:is_true",false]],["=:for_each",["elem","=:argset"],["=:if","=:elem",["=:do",["=:=","=:is_true",true],["=:break"]]]],"=:is_true"]]],["=:special_operators",["=:fn",[],["=:make_set",["=:compiler",[],{"special_operators":true,"env":"=:Environment"}]]]],["=:defclog",["=:fn",["=:opts"],["=:let",[["style",["=:+","padding: 5px;",["=:if","=:opts.background",["=:+","background: ","=:opts.background",";"],""],["=:if","=:opts.color",["=:+","color: ","=:opts.color",";"]],""]]],["=:fn",["&","=:args"],["=:apply","=:console.log",["=:+","%c",["=:if","=:opts.prefix","=:opts.prefix",["=:take","=:args"]]],["=:conj",["=:style"],"=:args"]]]]]],["=:NOT_FOUND",["=:new","=:ReferenceError","not found"]],["=:check_external_env_default",["=:if",["=:==","=:namespace","core"],true,false]],["=:*namespace*","=:namespace"],["=:set_global",["=:function",["=:refname","=:value","=:meta","=:is_constant","=:target_namespace","=:contained_req"],["=:progn",["=:cond",["=:not",["=:==",["=:typeof","=:refname"],"string"]],["=:throw","=:TypeError","reference name must be a string type"],["=:or",["=:==","=:Environment","=:value"],["=:==","=:Environment.global_ctx","=:value"],["=:==","=:Environment.global_ctx.scope","=:value"]],["=:do",["=:throw","=:EvalError","cannot set the environment scope as a global value"]]],["=:when",["=:resolve_path",["=:refname","constant"],"=:Environment.definitions"],["=:throw","=:TypeError",["=:+","Assignment to constant variable ","=:refname"]]],["=:defvar","=:namespace_identity",["=:if","=:target_namespace",["=:target_namespace","=:refname"],["=:split_by","/","=:refname"]]],["=:cond",["=:and","=:parent_environment",["=:>","=:namespace_identity.length",1],["=:not",["=:==","=:namespace","=:namespace_identity.0"]]],["=:->","=:parent_environment","set_global","=:namespace_identity.1","=:value","=:meta","=:is_constant","=:namespace_identity.0",["=:or","=:contained","=:contained_req"]],["=:and",["=:>","=:namespace_identity.length",1],["=:not",["=:==","=:namespace_identity.0","=:namespace"]]],["=:do",["=:if",["=:and",["=:prop","=:children","=:namespace_identity.0"],["=:not","=:contained_req"]],["=:->",["=:prop","=:children","=:namespace_identity.0"],"set_global","=:namespace_identity.1","=:value","=:meta","=:is_constant","=:namespace_identity.0"],["=:throw","=:EvalError",["=:+","namespace ","=:namespace_identity.0"," doesn't exist"]]]],"=:else",["=:do",["=:defvar","=:comps",["=:get_object_path",["=:if",["=:==",1,"=:namespace_identity.length"],"=:namespace_identity.0","=:namespace_identity.1"]]],["=:set_prop","=:Environment.global_ctx.scope","=:comps.0","=:value"],["=:if",["=:and",["=:is_object?","=:meta"],["=:not",["=:is_array?","=:meta"]]],["=:do",["=:when","=:is_constant",["=:set_prop","=:meta","constant",true]],["=:set_prop","=:Environment.definitions","=:comps.0","=:meta"]],["=:when","=:is_constant",["=:set_prop","=:Environment.definitions","=:comps.0",{"constant":true}]]],["=:prop","=:Environment.global_ctx.scope","=:comps.0"]]]]]],["=:get_global",["=:function",["=:refname","=:value_if_not_found","=:suppress_check_external_env","=:target_namespace","=:path_comps","=:contained_req"],["=:cond",["=:not",["=:==",["=:typeof","=:refname"],"string"]],["=:throw","=:TypeError","reference name must be a string type"],["=:==","=:refname","Environment"],"=:Environment",["=:->","=:compiler_operators","has","=:refname"],"=:special_identity","=:else",["=:let",[["namespace_identity",["=:if","=:target_namespace",["=:target_namespace","=:refname"],["=:split_by","/","=:refname"]]],["comps",["=:or","=:path_comps",["=:get_object_path",["=:if",["=:==",1,"=:namespace_identity.length"],"=:namespace_identity.0","=:namespace_identity.1"]]]],["refval","=:nil"],["symbol_name","=:nil"],["check_external_env",["=:if","=:suppress_check_external_env",false,"=:check_external_env_default"]]],["=:cond",["=:and","=:parent_environment",["=:>","=:namespace_identity.length",1],["=:not",["=:==","=:namespace_identity.0","=:namespace"]]],["=:->","=:parent_environment","get_global","=:namespace_identity.1","=:value_if_not_found","=:suppress_check_external_env","=:namespace_identity.0","=:comps",["=:or","=:contained","=:contained_req"]],["=:and",["=:>","=:namespace_identity.length",1],["=:not",["=:==","=:namespace_identity.0","=:namespace"]]],["=:do",["=:if",["=:and",["=:prop","=:children","=:namespace_identity.0"],["=:not","=:contained_req"]],["=:->",["=:prop","=:children","=:namespace_identity.0"],"get_global","=:namespace_identity.1","=:value_if_not_found","=:suppress_check_external_env","=:namespace_identity.0","=:comps"],["=:throw","=:EvalError",["=:+","namespace ","=:namespace_identity.0"," doesn't exist"]]]],"=:else",["=:do",["=:=","=:refval",["=:prop","=:Environment.global_ctx.scope","=:comps.0"]],["=:if",["=:and",["=:==","=:undefined","=:refval"],["=:==","=:namespace_identity.length",1],"=:parent_environment"],["=:do",["=:defvar","=:rval",["=:->","=:parent_environment","get_global","=:refname","=:value_if_not_found","=:suppress_check_external_env","=:nil","=:comps",["=:or","=:contained","=:contained_req"]]],"=:rval"],["=:do",["=:if",["=:and",["=:==","=:undefined","=:refval"],"=:check_external_env"],["=:=","=:refval",["=:if","=:check_external_env",["=:or",["=:get_outside_global","=:comps.0"],"=:NOT_FOUND"],"=:NOT_FOUND"]]],["=:cond",["=:and",["=:==","=:NOT_FOUND","=:refval"],"=:value_if_not_found"],"=:value_if_not_found",["=:==","=:NOT_FOUND","=:refval"],["=:do",["=:throw","=:ReferenceError",["=:+","symbol not found: ",["=:if",["=:>","=:namespace_identity.length",1],["=:+","=:namespace","/","=:namespace_identity.1"],["=:+","=:namespace","/","=:namespace_identity.0"]]]]],["=:==","=:comps.length",1],"=:refval",["=:>","=:comps.length",1],["=:do",["=:resolve_path",["=:rest","=:comps"],"=:refval"]],"=:else",["=:do",["=:console.warn","get_global: condition fall through: ","=:comps"],"=:NOT_FOUND"]]]]]]]]]],["=:symbol_definition",["=:fn",["=:symname","=:target_namespace"],["=:let",[["=:namespace_identity",["=:if","=:target_namespace",["=:target_namespace","=:symname"],["=:if",["=:>",["=:length","=:symname"],2],["=:split_by","/","=:symname"],["=:symname"]]]]],["=:cond",["=:==","=:namespace_identity.length",1],["=:aif",["=:prop","=:Environment.definitions","=:symname"],"=:it",["=:if","=:parent_environment",["=:->","=:parent_environment","symbol_definition","=:symname"]]],["=:==","=:namespace_identity.0","=:namespace"],["=:prop","=:Environment.definitions","=:symname"],"=:parent_environment",["=:->","=:parent_environment","symbol_definition","=:namespace_identity.1","=:namespace_identity.0"],["=:==","=:namespace_identity.length",2],["=:->",["=:prop","=:children","=:namespace_identity.0"],"symbol_definition","=:namespace_identity.1"],"=:else","=:undefined"]]],{"description":["=:+","Given a symbol name and an optional namespace, either as a fully qualified path ","or via the target_namespace argument, returns definition information about the ","retquested symbol.  ","Used primarily by the compiler to find metadata for a specific symbol during compilation."],"usage":["symname:string","namespace:string"],"tags":["compiler","symbols","namespace","search","context","environment"]}],["=:compile",["=:fn",["=:json_expression","=:opts"],["=:let",[["=:opts",["=:+",{"env":"=:Environment"},"=:opts",{"meta":["=:if",["=:and","=:opts","=:opts.meta"],true,false]}]],["=:out","=:nil"]],["=:=","=:out",["=:compiler","=:json_expression","=:opts"]],["=:cond",["=:and",["=:is_array?","=:out"],"=:out.0.ctype",["=:==","=:out.0.ctype","FAIL"]],"=:out","=:opts.meta","=:out","=:else","=:out.1"]]],{"description":["=:+","Compiles the given JSON or quoted lisp and returns a string containing ","the lisp form or expression as javascript.<br>","If passed the option { meta: true } , an array is returned containing compilation metadata ","in element 0 and the compiled code in element 1."],"usage":["json_expression:*","opts:object"],"tags":["macro","quote","quotes","desym"]}],["=:env_log",["=:defclog",{"prefix":["=:+","env","=:id"],"background":"#B0F0C0"}]],["=:evaluate_local",["=:fn",["=:expression","=:ctx","=:opts"],["=:let",[["=:opts",["=:or","=:opts",{}]],["=:compiled","=:nil"],["=:error_data","=:nil"],["=:result","=:nil"]],["=:if","=:opts.compiled_source",["=:=","=:compiled","=:expression"],["=:try",["=:=","=:compiled",["=:compiler",["=:if","=:opts.json_in","=:expression",["=:->","=:Environment","read_lisp","=:expression",{"source_name":"=:opts.source_name"}]],{"env":"=:Environment","ctx":"=:ctx","formatted_output":true,"source_name":"=:opts.source_name","throw_on_error":"=:opts.throw_on_error","error_report":["=:or","=:opts.error_report","=:nil"],"quiet_mode":["=:or","=:opts.quiet_mode",false]}]],["=:catch","=:Error",["e"],["=:do",["=:when","=:opts.throw_on_error",["=:throw","=:e"]],["=:when",["=:instanceof","=:e","=:LispSyntaxError"],["=:set_prop","=:e","message",["=:JSON.parse","=:e.message"]]],["=:cond",["=:instanceof","=:e","=:LispSyntaxError"],["=:=","=:error_data",["=:+",{"error":"LispSyntaxError"},"=:e.message"]],"=:else",["=:=","=:error_data",{"error":["=:sub_type","=:e"],"message":"=:e.message","stack":"=:e.stack","form":["=:cond",["=:and",["=:is_string?","=:expression"],["=:>","=:expression.length",100]],["=:+",["=:->","=:expression","substr",0,100],"..."],"=:else",["=:as_lisp","=:expression"]],"parent_forms":[],"source_name":"=:opts.source_name","invalid":true}]],["=:if","=:opts.error_report",["=:opts.error_report","=:error_data"],["=:console.error","Compilation Error: ","=:error_data"]],["=:=","=:compiled",[{"error":true},"=:nil"]]]]]],["=:cond",["=:eq","=:nil","=:compiled"],"=:nil",["=:and","=:compiled.0.namespace",["=:not",["=:==","=:compiled.0.namespace","=:namespace"]],"=:parent_environment"],["=:->","=:parent_environment","evaluate_local","=:compiled","=:ctx",["=:+",{},"=:opts",{"compiled_source":true}]],["=:and","=:compiled.0.namespace",["=:not",["=:==","=:compiled.0.namespace","=:namespace"]]],["=:if",["=:prop","=:children","=:compiled.0.namespace"],["=:->",["=:prop","=:children","=:compiled.0.namespace"],"evaluate_local","=:compiled","=:ctx",["=:+",{},"=:opts",{"compiled_source":true}]],["=:throw","=:EvalError",["=:+","unknown namespace ","=:compiled.0.namespace"," assignment"]]],"=:else",["=:do",["=:if","=:opts.on_compilation_complete",["=:opts.on_compilation_complete","=:compiled"]],["=:try",["=:do",["=:when",["=:and",["=:is_array?","=:compiled"],["=:is_object?","=:compiled.0"],"=:compiled.0.ctype",["=:not",["=:is_string?","=:compiled.0.ctype"]]],["=:set_prop","=:compiled.0","ctype",["=:subtype","=:compiled.0.ctype"]]],["=:=","=:result",["=:cond","=:compiled.error",["=:throw",["=:new","=:compiled.error","=:compiled.message"]],["=:and","=:compiled.0.ctype",["=:or",["=:contains?","block","=:compiled.0.ctype"],["=:==","=:compiled.0.ctype","assignment"],["=:==","=:compiled.0.ctype","__!NOT_FOUND!__"]]],["=:if",["=:compiled.0.has_lisp_globals"],["=:do",["=:set_prop","=:compiled",1,["=:new","=:AsyncFunction","Environment",["=:+","{ ","=:compiled.1","}"]]],["=:compiled.1","=:Environment"]],["=:do",["=:set_prop","=:compiled",1,["=:new","=:AsyncFunction",["=:+","{","=:compiled.1","}"]]],["=:compiled.1"]]],["=:and","=:compiled.0.ctype",["=:or",["=:==","AsyncFunction","=:compiled.0.ctype"],["=:==","statement","=:compiled.0.ctype"],["=:==","objliteral","=:compiled.0.ctype"]]],["=:do",["=:if",["=:compiled.0.has_lisp_globals"],["=:do",["=:set_prop","=:compiled",1,["=:new","=:AsyncFunction","Environment",["=:+","{ return ","=:compiled.1","} "]]],["=:compiled.1","=:Environment"]],["=:do",["=:set_prop","=:compiled",1,["=:new","=:AsyncFunction",["=:+","{ return ","=:compiled.1","}"]]],["=:compiled.1"]]]],["=:and","=:compiled.0.ctype",["=:==","Function","=:compiled.0.ctype"]],["=:do",["=:if",["=:compiled.0.has_lisp_globals"],["=:do",["=:set_prop","=:compiled",1,["=:new","=:Function","Environment",["=:+","{ return ","=:compiled.1","} "]]],["=:compiled.1","=:Environment"]],["=:do",["=:set_prop","=:compiled",1,["=:new","=:Function",["=:+","{ return ","=:compiled.1","}"]]],["=:compiled.1"]]]],"=:else","=:compiled.1"]]],["=:catch","=:Error",["=:e"],["=:do",["=:env_log","caught error: ","=:e.name","=:e.message"],["=:when","=:opts.error_report",["=:opts.error_report",{"error":"=:e.name","message":"=:e.message","form":"=:nil","parent_forms":"=:nil","invalid":true,"text":"=:e.stack"}]],["=:=","=:result","=:e"],["=:if",["=:and","=:ctx","=:ctx.in_try"],["=:throw","=:result"]]]]],"=:result"]]]]],["=:evaluate",["=:fn",["=:expression","=:ctx","=:opts"],["=:progn",["=:if",["=:==","=:namespace","=:active_namespace"],["=:evaluate_local","=:expression","=:ctx","=:opts"],["=:->",["=:prop","=:children","=:active_namespace"],"evaluate","=:expression","=:ctx","=:opts"]]]]],["=:eval_struct",["=:fn",["=:lisp_struct","=:ctx","=:opts"],["=:let",[["=:rval","=:nil"]],["=:if",["=:is_function?","=:lisp_struct"],["=:=","=:rval",["=:lisp_struct"]],["=:=","=:rval",["=:evaluate","=:lisp_struct","=:ctx",["=:+",{"json_in":true},["=:or","=:opts",{}]]]]],"=:rval"]]]],["=:defvar","=:built_ins",["MAX_SAFE_INTEGER","LispSyntaxError","sub_type","__VERBOSITY__","int","float","values","pairs","keys","take","prepend","first","last","length","conj","reverse","map","bind","to_object","to_array","slice","rest","second","third","chop","chomp","not","push","pop","list","flatten","jslambda","join","lowercase","uppercase","log","split","split_by","is_object?","is_array?","is_number?","is_function?","is_set?","is_element?","is_string?","is_nil?","is_regex?","is_date?","ends_with?","starts_with?","blank?","contains?","make_set","eval_exp","indirect_new","range","add","merge_objects","index_of","resolve_path","delete_prop","min_value","max_value","interlace","trim","assert","unquotify","or_args","special_operators","defclog","NOT_FOUND","check_external_env_default","built_ins"]],["=:set_prop","=:Environment.global_ctx.scope","built_ins","=:built_ins"],["=:defvar","=:set_compiler",["=:fn",["=:compiler_function"],["=:do",["=:=","=:compiler","=:compiler_function"],["=:=","=:compiler_operators",["=:compiler",[],{"special_operators":true,"env":"=:Environment"}]],["=:set_prop","=:Environment.global_ctx.scope","compiler","=:compiler"],["=:register_feature","compiler"],"=:compiler"]]],["=:set_prop","=:Environment.global_ctx.scope","set_compiler","=:set_compiler"],["=:set_prop","=:Environment.global_ctx.scope","clone",["=:fn",["=:val"],["=:if",["=:==","=:val","=:Environment"],"=:Environment",["=:clone","=:val",0,"=:Environment"]]]],["=:set_prop","=:Environment","get_global","=:get_global","set_global","=:set_global","symbol_definition","=:symbol_definition","namespace","=:namespace"],["=:defvar","=:children",["=:or","=:opts.children",{}]],["=:defvar","=:children_declarations",["=:or","=:opts.children_declarations",{}]],["=:when",["=:==","=:namespace","core"],["=:when",["=:not",["=:prop","=:Environment.global_ctx.scope","*env_config*"]],["=:set_prop","=:Environment.global_ctx.scope","*env_config*",{"export":{"save_path":"js/juno.js","default_namespace":"core","include_source":false},"features":[],"imports":{}}]],["=:defvar","=:current_namespace",["=:function",[],"=:active_namespace"]],["=:defvar","=:create_namespace",["=:fn",["=:name","=:options"],["=:cond",["=:not",["=:is_string?","=:name"]],["=:throw","=:TypeError","namespace name must be a string"],["=:prop","=:children","=:name"],["=:throw","=:EvalError","namespace already exists"],"=:else",["=:let",[["=:options",["=:or","=:options",{}]],["=:child_env",["=:dlisp_env",{"parent_environment":"=:Environment","namespace":"=:name","contained":"=:options.contained"}]]],["=:if","=:child_env.evaluate",["=:do",["=:->","=:child_env","set_compiler","=:compiler"],["=:set_prop","=:children","=:name","=:child_env"],["=:set_prop","=:children_declarations","=:name",{}],["=:->","=:child_env","evaluate","(for_each (sym built_ins) (delete_prop Environment.context.scope sym))"],["=:if","=:options.contained",["=:set_prop",["=:prop","=:children_declarations","=:name"],"contained",true]],["=:set_prop",["=:prop","=:children_declarations","=:name"],"serialize_with_image",["=:if",["=:==",false,"=:options.serialize_with_image"],false,true]],"=:name"],["=:do",["=:console.error","ENV: couldn't create the child environment. Received: ","=:child_env"],["=:throw","=:EvalError",["=:+","unable to create namespace ","=:name"]]]]]]]],["=:defvar","=:set_namespace",["=:fn",["=:name"],["=:cond",["=:not",["=:is_string?","=:name"]],["=:throw","=:TypeError","namespace name must be a string"],["=:and",["=:not",["=:==","core","=:name"]],["=:eq","=:nil",["=:prop","=:children","=:name"]]],["=:throw","=:EvalError",["=:+","namespace ","=:name"," doesn't exist"]],"=:else",["=:do",["=:if",["=:==","=:name","core"],["=:do",["=:=","=:active_namespace","core"]],["=:do",["=:=","=:active_namespace","=:name"]]],"=:name"]]]],["=:defvar","=:delete_namespace",["=:fn",["=:name"],["=:cond",["=:not",["=:is_string?","=:name"]],["=:throw","=:TypeError","namespace name must be a string"],["=:==","core","=:name"],["=:throw","=:EvalError","core namespace cannot be removed"],["=:eq","=:nil",["=:prop","=:children","=:name"]],["=:throw","=:EvalError",["=:+","namespace ","=:name","doesn't exist"]],["=:==","=:name",["=:current_namespace"]],["=:throw","=:EvalError","namespace is the current namespace"],"=:else",["=:do",["=:remove_prop","=:children","=:name"],["=:for_each",["k",["=:or",["=:resolve_path",["global_ctx","scope","*env_config*","imports"],"=:Environment"],[]]],["=:when",["=:starts_with?","=:k","=:name"],["=:remove_prop","=:Environment.global_ctx.*env_config*.imports","=:k"]]],"=:name"]]]],["=:set_prop","=:Environment.global_ctx.scope","create_namespace","=:create_namespace","set_namespace","=:set_namespace","delete_namespace","=:delete_namespace","namespaces",["=:function",[],["=:+",["=:keys","=:children"],"core"]],"current_namespace","=:current_namespace"]],["=:defvar","=:included_globals","=:nil"],["=:when",["=:and","=:included_globals",["=:==","=:namespace","core"]],["=:=","=:included_globals",["=:included_globals"]],["=:when",["=:is_object?",["=:prop","=:included_globals","symbols"]],["=:for_each",["=:symset",["=:pairs","=:included_globals.symbols"]],["=:when",["=:or",["=:eq","=:nil",["=:prop","=:Environment.global_ctx.scope","=:symset.0"]],["=:==","=:symset.0","*env_config*"]],["=:set_prop","=:Environment.global_ctx.scope","=:symset.0","=:symset.1"]]]],["=:when",["=:is_object?",["=:prop","=:included_globals","definitions"]],["=:for_each",["=:symset",["=:pairs","=:included_globals.definitions"]],["=:when",["=:eq","=:nil",["=:prop","=:Environment.definitions","=:symset.0"]],["=:set_prop","=:Environment.definitions","=:symset.0","=:symset.1"]]]],["=:when",["=:is_object?",["=:prop","=:included_globals","declarations"]],["=:for_each",["=:symset",["=:pairs","=:included_globals.declarations"]],["=:when",["=:eq","=:nil",["=:prop","=:Environment.declarations","=:symset.0"]],["=:set_prop","=:Environment.declarations","=:symset.0",["=:quotel","=:symset.1"]]]]],["=:when",["=:prop","=:Environment.global_ctx.scope","compiler"],["=:set_compiler",["=:prop","=:Environment.global_ctx.scope","compiler"]]],["=:when",["=:is_object?",["=:prop","=:included_globals","children"]],["=:for_each",["=:childset",["=:pairs","=:included_globals.children"]],["=:do",["=:create_namespace","=:childset.0",["=:if",["=:prop","=:included_globals.children_declarations","=:childset.0"],["=:prop","=:included_globals.children_declarations","=:childset.0"],{}]]]],["=:for_each",["=:childset",["=:pairs","=:included_globals.children"]],["=:do",["=:defvar","=:childenv",["=:prop","=:children","=:childset.0"]],["=:set_prop","=:childset",1,["=:->","=:childenv","eval","=:childset.1"]],["=:for_each",["=:symset","=:childset.1"],["=:when",["=:eq","=:nil",["=:resolve_path",["=:childset.0","context","scope","=:symset.0"],"=:children"]],["=:set_path",["=:childset.0","context","scope","=:symset.0"],"=:children","=:symset.1"]]]]]]],["=:defvar","=:clone_to_new",["=:fn",["=:options"],["=:let",[["=:new_env","=:nil"],["=:my_children","=:nil"],["=:my_children_declarations","=:nil"]],["=:env_log","=:namespace","cloning: # children: ",["=:length","=:children"]],["=:=","=:new_env",["=:dlisp_env",{"env":["=:clone","=:Environment"],"children":["=:clone","=:children"],"children_declarations":["=:clone","=:children_declarations"]}]],["=:env_log","=:namespace","constructed: ",["=:->","=:new_env","id"]],"=:new_env"]]],["=:defvar","=:export_symbol_set",["=:fn",["=:options"],["=:reduce",["=:symset",["=:pairs",["=:clone","=:Environment.global_ctx.scope"]]],["=:do",["=:cond",["=:and","=:options","=:options.no_compiler",["=:==","=:symset.0","compiler"]],"=:nil",["=:starts_with?","$","=:symset.0"],"=:nil",["=:==","=:symset.0","*env_skeleton*"],["=:symset.0",[["=:quote","=:quotel"],["=:prop","=:Environment.global_ctx.scope","*env_skeleton*"]]],["=:resolve_path",["=:symset.0","initializer"],"=:Environment.definitions"],["=:symset.0",["=:resolve_path",["=:symset.0","initializer"],"=:Environment.definitions"]],["=:==","=:nil","=:symset.1"],["=:symset.0",["=:quote","=:nil"]],["=:==","=:undefined","=:symset.1"],["=:symset.0",["=:quote","=:undefined"]],"=:else",["=:symset.0","=:symset.1"]]]]]],["=:defvar","=:save_env",["=:fn",["=:options"],["=:let",[["=:new_env","=:nil"],["=:my_children","=:nil"],["=:env_constructor","=:nil"],["=:dcomps",["=:date_components",["=:new","=:Date"]]],["=:version_tag",["=:if",["=:not",["=:blank?","=:opts.version_tag"]],"=:opts.version_tag",["=:join",".",["=:dcomps.year","=:dcomps.month","=:dcomps.day","=:dcomps.hour","=:dcomps.minute"]]]],["=:build_time",["=:formatted_date",["=:new","=:Date"]]],["=:build_headers",[]],["=:child_env","=:nil"],["=:include_source",false],["=:exports",[]],["=:src",["=:if",["=:prop","=:Environment.global_ctx.scope","*env_skeleton*"],["=:clone",["=:prop","=:Environment.global_ctx.scope","*env_skeleton*"]],["=:reader",["=:read_text_file","./src/environment.lisp"]]]],["=:target_insertion_path","=:nil"],["=:output_path","=:nil"]],["=:when",["=:prop","=:Environment.global_ctx.scope","*env_skeleton*"],["=:register_feature","*env_skeleton*"]],["=:=","=:target_insertion_path",["=:first",["=:findpaths",["=:quote","=:included_globals"],"=:src"]]],["=:if",["=:not",["=:is_array?","=:target_insertion_path"]],["=:throw","=:EvalError","Unable to find the first included_globals symbol"]],["=:=","=:target_insertion_path",["=:conj",["=:chop","=:target_insertion_path"],[2]]],["=:=","=:options",["=:or","=:options",{}]],["=:when","=:options.include_source",["=:=","=:include_source",true]],["=:env_log","=:namespace","cloning: # children: ",["=:length","=:children"]],["=:=","=:exports",["=:export_symbol_set"]],["=:=","=:my_children",["=:to_object",["=:reduce",["=:child",["=:pairs","=:children"]],["=:if",["=:resolve_path",["=:child.0","serialize_with_image"],"=:children_declarations"],["=:progn",["=:=","=:child_env",["=:->","=:child.1","compile",["=:->","=:child.1","export_symbol_set",{"no_compiler":true}],{"throw_on_error":true,"meta":true}]],["=:child.0",["=:quotem",["=:quote",["=:javascript","=:##","=:child_env.1"]]]]]]]]],["=:set_path","=:target_insertion_path","=:src",["=:quotem",["=:fn",[],"=:##",["=:to_object",[["definitions",[["=:quotel","=:quote"],["=:clone","=:Environment.definitions"]]],["declarations",["=:clone","=:Environment.declarations"]],["symbols",[["=:quote","=:javascript"],["=:compile",["=:to_object","=:exports"],{"throw_on_error":true}]]],["children_declarations",["=:quotem",["=:fn",[],"=:##",["=:clone","=:children_declarations"]]]],["children","=:my_children"]]]]]],["=:=","=:output_path",["=:or","=:options.save_as",["=:resolve_path",["*env_config*","export","save_path"],"=:Environment.global_ctx.scope"]]],["=:if",["=:is_function?","=:output_path"],["=:=","=:output_path",["=:output_path"]]],["=:if",["=:and",["=:not",["=:is_string?","=:output_path"]],"=:output_path"],["=:throw","=:EvalError","invalid name for target for saving the environment.  Must be a string or function"]],["=:cond",["=:and","=:output_path",["=:ends_with?",".js","=:output_path"]],["=:do",["=:push","=:build_headers",["=:+","// Build Time: ","=:build_time"]],["=:push","=:build_headers",["=:+","// Version: ","=:version_tag"]],["=:push","=:build_headers",["=:+","export const DLISP_ENV_VERSION='","=:version_tag","';"]],["=:env_log","saving to: ","=:output_path"],["=:compile_buffer","=:src","init_dlisp",{"namespace":"=:namespace","toplevel":true,"include_boilerplate":false,"verbose":false,"bundle":true,"js_headers":[["=:show","=:check_true"],["=:show","=:get_next_environment_id"],["=:show","=:get_outside_global"],["=:show","=:subtype"],["=:show","=:lisp_writer"],["=:show","=:clone"],["=:show","=:LispSyntaxError"]],"bundle_options":{"default_namespace":["=:resolve_path",["*env_config*","export","default_namespace"],"=:Environment.global_ctx.scope"]},"output_file":"=:output_path","include_source":["=:or","=:options.include_source",["=:resolve_path",["*env_config*","export","include_source"],"=:Environment.global_ctx.scope"]],"build_headers":"=:build_headers"}]],["=:and","=:output_path",["=:ends_with?",".lisp","=:output_path"]],["=:write_text_file","=:output_path",["=:JSON.stringify","=:src","=:nil",4]],"=:else","=:src"]]]],["=:declare",["=:local","=:lisp_writer"],["=:include","=:reader","=:add_escape_encoding","=:do_deferred_splice","=:safe_access","=:embed_compiled_quote"]],["=:defvar","=:as_lisp","=:lisp_writer"],["=:defvar","=:read_lisp","=:reader"],["=:set_prop","=:Environment.global_ctx.scope","eval","=:eval_exp","reader","=:reader","add_escape_encoding","=:add_escape_encoding","get_outside_global","=:get_outside_global","as_lisp","=:lisp_writer","lisp_writer","=:lisp_writer","clone_to_new","=:clone_to_new","save_env","=:save_env","null","=:null"],["=:defvar","=:inlines",["=:if","=:parent_environment",["=:+",{},"=:parent_environment.inlines",["=:if","=:opts.inlines","=:opts.inlines",{}]],["=:+",{},["=:if","=:opts.inlines","=:opts.inlines",{}],{"pop":["=:fn",["=:args"],["(","=:args.0",")",".","pop()"]],"push":["=:fn",["=:args"],["(","=:args.0",")",".push","(","=:args.1",")"]],"chomp":["=:fn",["=:args"],["(","=:args.0",")",".substr","(",0,",","(","=:args.0",".length","-",1,")",")"]],"join":["=:fn",["=:args"],["=:if",["=:==","=:args.length",1],["(","=:args.0",")",".join","('')"],["(","=:args.1",")",".join","(","=:args.0",")"]]],"take":["=:fn",["=:args"],["(","=:args.0",")",".shift","()"]],"prepend":["=:fn",["=:args"],["(","=:args.0",")",".unshift","(","=:args.1",")"]],"trim":["=:fn",["=:args"],["(","=:args.0",")",".trim()"]],"lowercase":["=:fn",["=:args"],["(","=:args.0",")",".toLowerCase()"]],"uppercase":["=:fn",["=:args"],["(","=:args.0",")",".toUpperCase()"]],"islice":["=:fn",["=:args"],["=:cond",["=:==","=:args.length",3],["(","=:args.0",")",".slice(","=:args.1",",","=:args.2",")"],["=:==","=:args.length",2],["(","=:args.0",")",".slice(","=:args.1",")"],"=:else",["=:throw","=:SyntaxError","slice requires 2 or 3 arguments"]]],"split_by":["=:fn",["=:args"],["(","=:args.1",")",".split","(","=:args.0",")"]],"bindf":["=:fn",["=:args"],["=:args.0",".bind(","=:args.1",")"]],"is_array?":["=:fn",["=:args"],["(","=:args.0"," instanceof Array",")"]],"is_object?":["=:fn",["=:args"],["(","=:args.0"," instanceof Object",")"]],"is_string?":["=:fn",["=:args"],["(","=:args.0"," instanceof String || typeof ","=:args.0","===","'string'",")"]],"is_function?":["=:fn",["=:args"],["=:args.0"," instanceof Function"]],"is_element?":["=:fn",["=:args"],["=:args.0"," instanceof Element"]],"log":["=:fn",["=:args"],["console.log","(",["=:map",["=:fn",["=:val","=:idx","=:tl"],["=:if",["=:<","=:idx",["=:-","=:tl",1]],["=:val",","],["=:val"]]],"=:args"],")"]],"reverse":["=:fn",["=:args"],["(","=:args.0",")",".slice(0).reverse()"]],"int":["=:fn",["=:args"],["=:cond",["=:==","=:args.length",1],["parseInt(","=:args.0",")"],["=:==","=:args.length",2],["parseInt(","=:args.0",",","=:args.1",")"],"=:else",["=:throw","SyntaxError",["=:+","invalid number of arguments to int: received ","=:args.length"]]]],"float":["=:fn",["=:args"],["parseFloat(","=:args.0",")"]]}]]],["=:set_prop","=:Environment","eval","=:eval_struct","identify","=:subtype","meta_for_symbol","=:meta_for_symbol","set_compiler","=:set_compiler","read_lisp","=:reader","as_lisp","=:as_lisp","inlines","=:inlines","clone_to_new","=:clone_to_new","export_symbol_set","=:export_symbol_set","save_env","=:save_env","special_operators","=:special_operators","definitions","=:Environment.definitions","declarations","=:Environment.declarations","compile","=:compile","evaluate","=:evaluate","evaluate_local","=:evaluate_local","do_deferred_splice","=:do_deferred_splice","id",["=:fn",[],"=:id"],"set_check_external_env",["=:fn",["=:state"],["=:do",["=:=","=:check_external_env_default","=:state"],"=:check_external_env_default"]],"check_external_env",["=:fn",[],"=:check_external_env_default"]],["=:defvar","=:init",["=:prop","=:Environment.global_ctx.scope","*initializer*"]],["=:when",["=:and","=:opts.default_namespace",["=:not",["=:==","=:compiler","=:unset_compiler"]],["=:prop","=:children","=:opts.default_namespace"]],["=:set_namespace","=:opts.default_namespace"]],["=:when","=:init",["=:eval","=:init"]],"=:Environment"]]]];__obj__1["*initializer*"]=async function() {
    {
         return  await (await Environment.get_global("repl"))(null,null,{
            use_console:true
        })
    }
};return __obj__1;})(),children_declarations:async function() {
     return  {
        user:{
            serialize_with_image:true
        }
    }
},children:{
    user:["=:javascript","[[\"meta_for_symbol\",async function(quoted_symbol,search_mode) {\n                            if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){\n                                let local_data=Environment.global_ctx.scope[quoted_symbol];\n                                ;\n                                if (check_true (search_mode)){\n                                      return await async function(){\n                                        if (check_true(local_data)) {\n                                             return [await (await get_global(\"add\"))({\n                                                namespace:namespace,name:quoted_symbol,type:await subtype(local_data)\n                                            },await (async function() {\n                                                let it;\n                                                it=Environment.definitions[quoted_symbol];\n                                                if (check_true (it)){\n                                                      return it\n                                                } else {\n                                                      return new Object()\n                                                }\n                                            } )())]\n                                        } else if (check_true(parent_environment)) {\n                                             return await (async function() {\n                                                {\n                                                     let __call_target__=await parent_environment[\"meta_for_symbol\"].call(parent_environment,quoted_symbol,true), __call_method__=\"flat\";\n                                                    return await __call_target__[__call_method__].call(__call_target__,1)\n                                                } \n                                            })()\n                                        } else if (check_true( (await length(await keys(children))>0))) {\n                                            let __collector;\n                                            let __result;\n                                            let __action;\n                                            __collector=[];\n                                            __result=null;\n                                            __action=async function(details) {\n                                                 return  details\n                                            };\n                                            ;\n                                            await (async function() {\n                                                let __for_body__84=async function(__item) {\n                                                    __result=await __action(__item);\n                                                    if (check_true (__result)){\n                                                          return (__collector).push(__result)\n                                                    }\n                                                };\n                                                let __array__85=[],__elements__83=await (async function() {\n                                                    let __for_body__88=async function(child_data) {\n                                                         return  await child_data['1'][\"meta_for_symbol\"].call(child_data['1'],quoted_symbol)\n                                                    };\n                                                    let __array__89=[],__elements__87=await pairs(children);\n                                                    let __BREAK__FLAG__=false;\n                                                    for(let __iter__86 in __elements__87) {\n                                                        __array__89.push(await __for_body__88(__elements__87[__iter__86]));\n                                                        if(__BREAK__FLAG__) {\n                                                             __array__89.pop();\n                                                            break;\n                                                            \n                                                        }\n                                                    }return __array__89;\n                                                     \n                                                })();\n                                                let __BREAK__FLAG__=false;\n                                                for(let __iter__82 in __elements__83) {\n                                                    __array__85.push(await __for_body__84(__elements__83[__iter__82]));\n                                                    if(__BREAK__FLAG__) {\n                                                         __array__85.pop();\n                                                        break;\n                                                        \n                                                    }\n                                                }return __array__85;\n                                                 \n                                            })();\n                                             return  __collector\n                                        }\n                                    } ()\n                                } else {\n                                    quoted_symbol=await (async function () {\n                                         if (check_true (await (await get_global(\"starts_with?\"))(\"=:\",quoted_symbol))){\n                                              return await quoted_symbol[\"substr\"].call(quoted_symbol,2)\n                                        } else {\n                                              return quoted_symbol\n                                        } \n                                    })();\n                                    {\n                                        let it;\n                                        it=Environment.definitions[quoted_symbol];\n                                        if (check_true (it)){\n                                              return await (await get_global(\"add\"))({\n                                                namespace:namespace,type:await sub_type(local_data),name:quoted_symbol\n                                            },it)\n                                        } else {\n                                              return \n                                        }\n                                    }\n                                }\n                            }\n                        }],[\"describe\",async function(quoted_symbol,search_mode) {\n                            {\n                                let internal_results=await meta_for_symbol(quoted_symbol,true);\n                                ;\n                                if (check_true (((internal_results instanceof Array)&&internal_results['0']))){\n                                     if (check_true (search_mode)){\n                                          return internal_results\n                                    } else {\n                                          return await first(internal_results)\n                                    }\n                                } else {\n                                    let external_results=await get_outside_global(quoted_symbol);\n                                    ;\n                                    if (check_true (external_results)){\n                                          return {\n                                            location:\"external\",type:await subtype(external_results)\n                                        }\n                                    } else {\n                                          return null\n                                    }\n                                }\n                            }\n                        }],[\"undefine\",function(quoted_symbol) {\n                            if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){\n                                let namespace_identity;\n                                let parent_call;\n                                let child_call;\n                                let target_symbol;\n                                namespace_identity=(quoted_symbol).split(\"/\");\n                                parent_call=null;\n                                child_call=null;\n                                target_symbol=null;\n                                ;\n                                 return    (function(){\n                                    if (check_true( (((namespace_identity.length===1)&&Environment.global_ctx.scope[namespace_identity['0']])||((namespace_identity.length>1)&&(namespace_identity['0']===namespace))))) {\n                                        target_symbol= ( function () {\n                                             if (check_true ((namespace_identity.length>1))){\n                                                  return namespace_identity['1']\n                                            } else {\n                                                  return namespace_identity['0']\n                                            } \n                                        })();\n                                         ( get_global(\"delete_prop\"))(Environment.definitions,target_symbol);\n                                        if (check_true (Environment.global_ctx.scope[target_symbol])){\n                                              return  ( get_global(\"delete_prop\"))(Environment.global_ctx.scope,target_symbol)\n                                        } else {\n                                              return false\n                                        }\n                                    } else if (check_true( ((namespace_identity.length>1)&&parent_environment))) {\n                                        parent_call= parent_environment[\"get_global\"].call(parent_environment,\"undefine\");\n                                         return  (parent_call)(quoted_symbol)\n                                    } else if (check_true( ((namespace_identity.length>1)&&children[namespace_identity['0']]))) {\n                                        child_call= ( function() {\n                                            {\n                                                 let __call_target__=children[namespace_identity['0']], __call_method__=\"get_global\";\n                                                return  __call_target__[__call_method__].call(__call_target__,\"undefine\")\n                                            } \n                                        })();\n                                         return   child_call(quoted_symbol)\n                                    } else  {\n                                         return false\n                                    }\n                                } )()\n                            } else throw new SyntaxError(\"undefine requires a quoted symbol\");\n                            \n                        }],[\"*namespace*\",\"user\"],[\"set_global\",function(refname,value,meta,is_constant,target_namespace,contained_req) {\n                            {\n                                  (function(){\n                                    if (check_true(  not((typeof refname===\"string\")))) {\n                                         throw new TypeError(\"reference name must be a string type\");\n                                        \n                                    } else if (check_true( ((Environment===value)||(Environment.global_ctx===value)||(Environment.global_ctx.scope===value)))) {\n                                        throw new EvalError(\"cannot set the environment scope as a global value\");\n                                        \n                                    }\n                                } )();\n                                if (check_true ( resolve_path( ( function(){\n                                    let __array_op_rval__137=refname;\n                                     if (__array_op_rval__137 instanceof Function){\n                                        return  __array_op_rval__137(\"constant\") \n                                    } else {\n                                        return[__array_op_rval__137,\"constant\"]\n                                    }\n                                })(),Environment.definitions))){\n                                    throw new TypeError((\"Assignment to constant variable \"+refname));\n                                    \n                                };\n                                let namespace_identity= ( function () {\n                                     if (check_true (target_namespace)){\n                                          return  ( function(){\n                                            let __array_op_rval__138=target_namespace;\n                                             if (__array_op_rval__138 instanceof Function){\n                                                return  __array_op_rval__138(refname) \n                                            } else {\n                                                return[__array_op_rval__138,refname]\n                                            }\n                                        })()\n                                    } else {\n                                          return (refname).split(\"/\")\n                                    } \n                                })();\n                                ;\n                                 return    (function(){\n                                    if (check_true( (parent_environment&&(namespace_identity.length>1)&& not((namespace===namespace_identity['0']))))) {\n                                         return  parent_environment[\"set_global\"].call(parent_environment,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'],(contained||contained_req))\n                                    } else if (check_true( ((namespace_identity.length>1)&& not((namespace_identity['0']===namespace))))) {\n                                        if (check_true ((children[namespace_identity['0']]&& not(contained_req)))){\n                                              return  ( function() {\n                                                {\n                                                     let __call_target__=children[namespace_identity['0']], __call_method__=\"set_global\";\n                                                    return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'])\n                                                } \n                                            })()\n                                        } else throw new EvalError((\"namespace \"+namespace_identity['0']+\" doesn't exist\"));\n                                        \n                                    } else  {\n                                        let comps= get_object_path( ( function() {\n                                             if (check_true ((1===namespace_identity.length))){\n                                                  return namespace_identity['0']\n                                            } else {\n                                                  return namespace_identity['1']\n                                            } \n                                        } )());\n                                        ;\n                                          (function(){\n                                            Environment.global_ctx.scope[comps['0']]=value;\n                                            return Environment.global_ctx.scope;\n                                            \n                                        })();\n                                        if (check_true (((meta instanceof Object)&& not((meta instanceof Array))))){\n                                            if (check_true (is_constant)){\n                                                   (function(){\n                                                    meta[\"constant\"]=true;\n                                                    return meta;\n                                                    \n                                                })()\n                                            };\n                                               (function(){\n                                                Environment.definitions[comps['0']]=meta;\n                                                return Environment.definitions;\n                                                \n                                            })()\n                                        } else {\n                                             if (check_true (is_constant)){\n                                                   (function(){\n                                                    Environment.definitions[comps['0']]={\n                                                        constant:true\n                                                    };\n                                                    return Environment.definitions;\n                                                    \n                                                })()\n                                            }\n                                        };\n                                         return  Environment.global_ctx.scope[comps['0']]\n                                    }\n                                } )()\n                            }\n                        }],[\"get_global\",function(refname,value_if_not_found,suppress_check_external_env,target_namespace,path_comps,contained_req) {\n                             return    (function(){\n                                if (check_true(  not((typeof refname===\"string\")))) {\n                                     throw new TypeError(\"reference name must be a string type\");\n                                    \n                                } else if (check_true( (refname===\"Environment\"))) {\n                                     return Environment\n                                } else if (check_true(  compiler_operators[\"has\"].call(compiler_operators,refname))) {\n                                     return special_identity\n                                } else  {\n                                    let namespace_identity;\n                                    let comps;\n                                    let refval;\n                                    let symbol_name;\n                                    let check_external_env;\n                                    namespace_identity= ( function () {\n                                         if (check_true (target_namespace)){\n                                              return  ( function(){\n                                                let __array_op_rval__144=target_namespace;\n                                                 if (__array_op_rval__144 instanceof Function){\n                                                    return  __array_op_rval__144(refname) \n                                                } else {\n                                                    return[__array_op_rval__144,refname]\n                                                }\n                                            })()\n                                        } else {\n                                              return (refname).split(\"/\")\n                                        } \n                                    })();\n                                    comps=(path_comps|| get_object_path( ( function() {\n                                         if (check_true ((1===namespace_identity.length))){\n                                              return namespace_identity['0']\n                                        } else {\n                                              return namespace_identity['1']\n                                        } \n                                    } )()));\n                                    refval=null;\n                                    symbol_name=null;\n                                    check_external_env= ( function () {\n                                         if (check_true (suppress_check_external_env)){\n                                              return false\n                                        } else {\n                                              return check_external_env_default\n                                        } \n                                    })();\n                                     return    (function(){\n                                        if (check_true( (parent_environment&&(namespace_identity.length>1)&& not((namespace_identity['0']===namespace))))) {\n                                             return  parent_environment[\"get_global\"].call(parent_environment,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps,(contained||contained_req))\n                                        } else if (check_true( ((namespace_identity.length>1)&& not((namespace_identity['0']===namespace))))) {\n                                            if (check_true ((children[namespace_identity['0']]&& not(contained_req)))){\n                                                  return  ( function() {\n                                                    {\n                                                         let __call_target__=children[namespace_identity['0']], __call_method__=\"get_global\";\n                                                        return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps)\n                                                    } \n                                                })()\n                                            } else throw new EvalError((\"namespace \"+namespace_identity['0']+\" doesn't exist\"));\n                                            \n                                        } else  {\n                                            refval=Environment.global_ctx.scope[comps['0']];\n                                            if (check_true (((undefined===refval)&&(namespace_identity.length===1)&&parent_environment))){\n                                                let rval= parent_environment[\"get_global\"].call(parent_environment,refname,value_if_not_found,suppress_check_external_env,null,comps,(contained||contained_req));\n                                                ;\n                                                 return  rval\n                                            } else {\n                                                if (check_true (((undefined===refval)&&check_external_env))){\n                                                     refval= ( function () {\n                                                         if (check_true (check_external_env)){\n                                                              return ( get_outside_global(comps['0'])||NOT_FOUND)\n                                                        } else {\n                                                              return NOT_FOUND\n                                                        } \n                                                    })()\n                                                };\n                                                 return    (function(){\n                                                    if (check_true( ((NOT_FOUND===refval)&&value_if_not_found))) {\n                                                         return value_if_not_found\n                                                    } else if (check_true( (NOT_FOUND===refval))) {\n                                                        throw new ReferenceError((\"symbol not found: \"+ ( function () {\n                                                             if (check_true ((namespace_identity.length>1))){\n                                                                  return  add(namespace,\"/\",namespace_identity['1'])\n                                                            } else {\n                                                                  return  add(namespace,\"/\",namespace_identity['0'])\n                                                            } \n                                                        })()));\n                                                        \n                                                    } else if (check_true( (comps.length===1))) {\n                                                         return refval\n                                                    } else if (check_true( (comps.length>1))) {\n                                                         return   resolve_path( rest(comps),refval)\n                                                    } else  {\n                                                         console.warn(\"get_global: condition fall through: \",comps);\n                                                         return  NOT_FOUND\n                                                    }\n                                                } )()\n                                            }\n                                        }\n                                    } )()\n                                }\n                            } )()\n                        }],[\"symbol_definition\",async function(symname,target_namespace) {\n                            let namespace_identity;\n                            namespace_identity=await (async function () {\n                                 if (check_true (target_namespace)){\n                                      return await (async function(){\n                                        let __array_op_rval__146=target_namespace;\n                                         if (__array_op_rval__146 instanceof Function){\n                                            return await __array_op_rval__146(symname) \n                                        } else {\n                                            return[__array_op_rval__146,symname]\n                                        }\n                                    })()\n                                } else {\n                                     if (check_true ((await length(symname)>2))){\n                                          return (symname).split(\"/\")\n                                    } else {\n                                          return await (async function(){\n                                            let __array_op_rval__147=symname;\n                                             if (__array_op_rval__147 instanceof Function){\n                                                return await __array_op_rval__147() \n                                            } else {\n                                                return[__array_op_rval__147]\n                                            }\n                                        })()\n                                    }\n                                } \n                            })();\n                             return  await async function(){\n                                if (check_true( (namespace_identity.length===1))) {\n                                    let it;\n                                    it=Environment.definitions[symname];\n                                    if (check_true (it)){\n                                          return it\n                                    } else {\n                                         if (check_true (parent_environment)){\n                                              return await parent_environment[\"symbol_definition\"].call(parent_environment,symname)\n                                        }\n                                    }\n                                } else if (check_true( (namespace_identity['0']===namespace))) {\n                                     return Environment.definitions[symname]\n                                } else if (check_true(parent_environment)) {\n                                     return await parent_environment[\"symbol_definition\"].call(parent_environment,namespace_identity['1'],namespace_identity['0'])\n                                } else if (check_true( (namespace_identity.length===2))) {\n                                     return await (async function() {\n                                        {\n                                             let __call_target__=children[namespace_identity['0']], __call_method__=\"symbol_definition\";\n                                            return await __call_target__[__call_method__].call(__call_target__,namespace_identity['1'])\n                                        } \n                                    })()\n                                } else  {\n                                     return undefined\n                                }\n                            } ()\n                        }],[\"compile\",async function(json_expression,opts) {\n                            let out;\n                            opts=await add({\n                                env:Environment\n                            },opts,{\n                                meta:await (async function() {\n                                    if (check_true ((opts&&opts.meta))){\n                                          return true\n                                    } else {\n                                          return false\n                                    }\n                                } )()\n                            });\n                            out=null;\n                            out=await compiler(json_expression,opts);\n                             return  await async function(){\n                                if (check_true( ((out instanceof Array)&&out['0'].ctype&&(out['0'].ctype===\"FAIL\")))) {\n                                     return out\n                                } else if (check_true(opts.meta)) {\n                                     return out\n                                } else  {\n                                     return out['1']\n                                }\n                            } ()\n                        }],[\"env_log\",async function(...args) {\n                                 return  await (async function(){\n                                    let __target_arg__130=[].concat(await conj(await (async function(){\n                                        let __array_op_rval__131=style;\n                                         if (__array_op_rval__131 instanceof Function){\n                                            return await __array_op_rval__131() \n                                        } else {\n                                            return[__array_op_rval__131]\n                                        }\n                                    })(),args));\n                                    if(!__target_arg__130 instanceof Array){\n                                        throw new TypeError(\"Invalid final argument to apply - an array is required\")\n                                    }let __pre_arg__132=(\"%c\"+await (async function () {\n                                         if (check_true (opts.prefix)){\n                                              return opts.prefix\n                                        } else {\n                                              return (args).shift()\n                                        } \n                                    })());\n                                    __target_arg__130.unshift(__pre_arg__132);\n                                    return (console.log).apply(this,__target_arg__130)\n                                })()\n                            }],[\"evaluate_local\",async function(expression,ctx,opts) {\n                            let compiled;\n                            let error_data;\n                            let result;\n                            opts=(opts||new Object());\n                            compiled=null;\n                            error_data=null;\n                            result=null;\n                            if (check_true (opts.compiled_source)){\n                                 compiled=expression\n                            } else {\n                                 await (async function(){\n                                    try /* TRY SIMPLE */ {\n                                          return compiled=await compiler(await (async function() {\n                                             if (check_true (opts.json_in)){\n                                                  return expression\n                                            } else {\n                                                  return await Environment[\"read_lisp\"].call(Environment,expression,{\n                                                    source_name:opts.source_name\n                                                })\n                                            } \n                                        } )(),{\n                                            env:Environment,ctx:ctx,formatted_output:true,source_name:opts.source_name,throw_on_error:opts.throw_on_error,error_report:(opts.error_report||null),quiet_mode:(opts.quiet_mode||false)\n                                        }) \n                                    } catch(__exception__153) {\n                                          if (__exception__153 instanceof Error) {\n                                             let e=__exception__153;\n                                             {\n                                                if (check_true (opts.throw_on_error)){\n                                                    throw e;\n                                                    \n                                                };\n                                                if (check_true ((e instanceof LispSyntaxError))){\n                                                     await async function(){\n                                                        e[\"message\"]=await JSON.parse(e.message);\n                                                        return e;\n                                                        \n                                                    }()\n                                                };\n                                                await async function(){\n                                                    if (check_true( (e instanceof LispSyntaxError))) {\n                                                         return error_data=await add({\n                                                            error:\"LispSyntaxError\"\n                                                        },e.message)\n                                                    } else  {\n                                                         return error_data={\n                                                            error:await sub_type(e),message:e.message,stack:e.stack,form:await async function(){\n                                                                if (check_true( ((expression instanceof String || typeof expression==='string')&&(expression.length>100)))) {\n                                                                     return await add(await expression[\"substr\"].call(expression,0,100),\"...\")\n                                                                } else  {\n                                                                     return await (await get_global(\"as_lisp\"))(expression)\n                                                                }\n                                                            } (),parent_forms:[],source_name:opts.source_name,invalid:true\n                                                        }\n                                                    }\n                                                } ();\n                                                if (check_true (opts.error_report)){\n                                                      return await (async function(){\n                                                        let __array_op_rval__155=opts.error_report;\n                                                         if (__array_op_rval__155 instanceof Function){\n                                                            return await __array_op_rval__155(error_data) \n                                                        } else {\n                                                            return[__array_op_rval__155,error_data]\n                                                        }\n                                                    })()\n                                                } else {\n                                                      return await console.error(\"Compilation Error: \",error_data)\n                                                };\n                                                 compiled=[{\n                                                    error:true\n                                                },null]\n                                            }\n                                        } \n                                    }\n                                })()\n                            };\n                             return  await async function(){\n                                if (check_true( (null==compiled))) {\n                                     return null\n                                } else if (check_true( (compiled['0'].namespace&&await not((compiled['0'].namespace===namespace))&&parent_environment))) {\n                                     return await parent_environment[\"evaluate_local\"].call(parent_environment,compiled,ctx,await add(new Object(),opts,{\n                                        compiled_source:true\n                                    }))\n                                } else if (check_true( (compiled['0'].namespace&&await not((compiled['0'].namespace===namespace))))) {\n                                     if (check_true (children[compiled['0'].namespace])){\n                                          return await (async function() {\n                                            {\n                                                 let __call_target__=children[compiled['0'].namespace], __call_method__=\"evaluate_local\";\n                                                return await __call_target__[__call_method__].call(__call_target__,compiled,ctx,await add(new Object(),opts,{\n                                                    compiled_source:true\n                                                }))\n                                            } \n                                        })()\n                                    } else throw new EvalError((\"unknown namespace \"+compiled['0'].namespace+\" assignment\"));\n                                    \n                                } else  {\n                                    if (check_true (opts.on_compilation_complete)){\n                                         await (async function(){\n                                            let __array_op_rval__156=opts.on_compilation_complete;\n                                             if (__array_op_rval__156 instanceof Function){\n                                                return await __array_op_rval__156(compiled) \n                                            } else {\n                                                return[__array_op_rval__156,compiled]\n                                            }\n                                        })()\n                                    };\n                                    await (async function(){\n                                        try /* TRY COMPLEX */ {\n                                            if (check_true (((compiled instanceof Array)&&(compiled['0'] instanceof Object)&&compiled['0'].ctype&&await not((compiled['0'].ctype instanceof String || typeof compiled['0'].ctype==='string'))))){\n                                                 await async function(){\n                                                    compiled['0'][\"ctype\"]=await subtype(compiled['0'].ctype);\n                                                    return compiled['0'];\n                                                    \n                                                }()\n                                            };\n                                             return  result=await async function(){\n                                                if (check_true(compiled.error)) {\n                                                     throw new Error((await get_global(\"indirect_new\"))(compiled.error,compiled.message));\n                                                    \n                                                } else if (check_true( (compiled['0'].ctype&&(await (await get_global(\"contains?\"))(\"block\",compiled['0'].ctype)||(compiled['0'].ctype===\"assignment\")||(compiled['0'].ctype===\"__!NOT_FOUND!__\"))))) {\n                                                     if (check_true (await (async function(){\n                                                        let __array_op_rval__159=compiled['0'].has_lisp_globals;\n                                                         if (__array_op_rval__159 instanceof Function){\n                                                            return await __array_op_rval__159() \n                                                        } else {\n                                                            return[__array_op_rval__159]\n                                                        }\n                                                    })())){\n                                                        await async function(){\n                                                            compiled[1]=new AsyncFunction(\"Environment\",(\"{ \"+compiled['1']+\"}\"));\n                                                            return compiled;\n                                                            \n                                                        }();\n                                                         return  await (async function(){\n                                                            let __array_op_rval__161=compiled['1'];\n                                                             if (__array_op_rval__161 instanceof Function){\n                                                                return await __array_op_rval__161(Environment) \n                                                            } else {\n                                                                return[__array_op_rval__161,Environment]\n                                                            }\n                                                        })()\n                                                    } else {\n                                                        await async function(){\n                                                            compiled[1]=new AsyncFunction((\"{\"+compiled['1']+\"}\"));\n                                                            return compiled;\n                                                            \n                                                        }();\n                                                         return  await (async function(){\n                                                            let __array_op_rval__163=compiled['1'];\n                                                             if (__array_op_rval__163 instanceof Function){\n                                                                return await __array_op_rval__163() \n                                                            } else {\n                                                                return[__array_op_rval__163]\n                                                            }\n                                                        })()\n                                                    }\n                                                } else if (check_true( (compiled['0'].ctype&&((\"AsyncFunction\"===compiled['0'].ctype)||(\"statement\"===compiled['0'].ctype)||(\"objliteral\"===compiled['0'].ctype))))) {\n                                                    if (check_true (await (async function(){\n                                                        let __array_op_rval__164=compiled['0'].has_lisp_globals;\n                                                         if (__array_op_rval__164 instanceof Function){\n                                                            return await __array_op_rval__164() \n                                                        } else {\n                                                            return[__array_op_rval__164]\n                                                        }\n                                                    })())){\n                                                        await async function(){\n                                                            compiled[1]=new AsyncFunction(\"Environment\",(\"{ return \"+compiled['1']+\"} \"));\n                                                            return compiled;\n                                                            \n                                                        }();\n                                                         return  await (async function(){\n                                                            let __array_op_rval__166=compiled['1'];\n                                                             if (__array_op_rval__166 instanceof Function){\n                                                                return await __array_op_rval__166(Environment) \n                                                            } else {\n                                                                return[__array_op_rval__166,Environment]\n                                                            }\n                                                        })()\n                                                    } else {\n                                                        await async function(){\n                                                            compiled[1]=new AsyncFunction((\"{ return \"+compiled['1']+\"}\"));\n                                                            return compiled;\n                                                            \n                                                        }();\n                                                         return  await (async function(){\n                                                            let __array_op_rval__168=compiled['1'];\n                                                             if (__array_op_rval__168 instanceof Function){\n                                                                return await __array_op_rval__168() \n                                                            } else {\n                                                                return[__array_op_rval__168]\n                                                            }\n                                                        })()\n                                                    }\n                                                } else if (check_true( (compiled['0'].ctype&&(\"Function\"===compiled['0'].ctype)))) {\n                                                    if (check_true (await (async function(){\n                                                        let __array_op_rval__169=compiled['0'].has_lisp_globals;\n                                                         if (__array_op_rval__169 instanceof Function){\n                                                            return await __array_op_rval__169() \n                                                        } else {\n                                                            return[__array_op_rval__169]\n                                                        }\n                                                    })())){\n                                                        await async function(){\n                                                            compiled[1]=new Function(\"Environment\",(\"{ return \"+compiled['1']+\"} \"));\n                                                            return compiled;\n                                                            \n                                                        }();\n                                                         return  await (async function(){\n                                                            let __array_op_rval__171=compiled['1'];\n                                                             if (__array_op_rval__171 instanceof Function){\n                                                                return await __array_op_rval__171(Environment) \n                                                            } else {\n                                                                return[__array_op_rval__171,Environment]\n                                                            }\n                                                        })()\n                                                    } else {\n                                                        await async function(){\n                                                            compiled[1]=new Function((\"{ return \"+compiled['1']+\"}\"));\n                                                            return compiled;\n                                                            \n                                                        }();\n                                                         return  await (async function(){\n                                                            let __array_op_rval__173=compiled['1'];\n                                                             if (__array_op_rval__173 instanceof Function){\n                                                                return await __array_op_rval__173() \n                                                            } else {\n                                                                return[__array_op_rval__173]\n                                                            }\n                                                        })()\n                                                    }\n                                                } else  {\n                                                     return compiled['1']\n                                                }\n                                            } ()\n                                        }  catch(__exception__157) {\n                                              if (__exception__157 instanceof Error) {\n                                                 let e=__exception__157;\n                                                 {\n                                                    await env_log(\"caught error: \",e.name,e.message);\n                                                    if (check_true (opts.error_report)){\n                                                         await (async function(){\n                                                            let __array_op_rval__174=opts.error_report;\n                                                             if (__array_op_rval__174 instanceof Function){\n                                                                return await __array_op_rval__174({\n                                                                    error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack\n                                                                }) \n                                                            } else {\n                                                                return[__array_op_rval__174,{\n                                                                    error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack\n                                                                }]\n                                                            }\n                                                        })()\n                                                    };\n                                                    result=e;\n                                                    if (check_true ((ctx&&ctx.in_try)))throw result;\n                                                    \n                                                }\n                                            } \n                                        }\n                                    })();\n                                     return  result\n                                }\n                            } ()\n                        }],[\"evaluate\",async function(expression,ctx,opts) {\n                            {\n                                if (check_true ((namespace===active_namespace))){\n                                      return await evaluate_local(expression,ctx,opts)\n                                } else {\n                                      return await (async function() {\n                                        {\n                                             let __call_target__=children[active_namespace], __call_method__=\"evaluate\";\n                                            return await __call_target__[__call_method__].call(__call_target__,expression,ctx,opts)\n                                        } \n                                    })()\n                                }\n                            }\n                        }],[\"eval_struct\",async function(lisp_struct,ctx,opts) {\n                            let rval;\n                            rval=null;\n                            if (check_true (lisp_struct instanceof Function)){\n                                 rval=await (async function(){\n                                    let __array_op_rval__177=lisp_struct;\n                                     if (__array_op_rval__177 instanceof Function){\n                                        return await __array_op_rval__177() \n                                    } else {\n                                        return[__array_op_rval__177]\n                                    }\n                                })()\n                            } else {\n                                 rval=await evaluate(lisp_struct,ctx,await add({\n                                    json_in:true\n                                },(opts||new Object())))\n                            };\n                             return  rval\n                        }],[\"set_compiler\",async function(compiler_function) {\n                            compiler=compiler_function;\n                            compiler_operators=await (async function(){\n                                let __array_op_rval__180=compiler;\n                                 if (__array_op_rval__180 instanceof Function){\n                                    return await __array_op_rval__180([],{\n                                        special_operators:true,env:Environment\n                                    }) \n                                } else {\n                                    return[__array_op_rval__180,[],{\n                                        special_operators:true,env:Environment\n                                    }]\n                                }\n                            })();\n                            await async function(){\n                                Environment.global_ctx.scope[\"compiler\"]=compiler;\n                                return Environment.global_ctx.scope;\n                                \n                            }();\n                            await (await get_global(\"register_feature\"))(\"compiler\");\n                             return  compiler\n                        }],[\"clone\",async function(val) {\n                                if (check_true ((val===Environment))){\n                                      return Environment\n                                } else {\n                                      return await clone(val,0,Environment)\n                                }\n                            }],[\"eval\",async function(expression) {\n                            await console.log(\"EVAL:\",expression);\n                             return  await (async function(){\n                                let __array_op_rval__93=expression;\n                                 if (__array_op_rval__93 instanceof Function){\n                                    return await __array_op_rval__93() \n                                } else {\n                                    return[__array_op_rval__93]\n                                }\n                            })()\n                        }],[\"reader\",async function(text,opts) {     return  await async function(){        if (check_true( (undefined==text))) {             throw new EvalError((\"reader: received undefined, text must be a string.\"));                    } else if (check_true( await (await Environment.get_global(\"not\"))((text instanceof String || typeof text==='string')))) {             throw new EvalError((\"reader: received \"+await (await Environment.get_global(\"sub_type\"))(text)+\": text must be a string.\"));                    } else  {            let output_structure;\n            let idx;\n            let line_number;\n            let column_number;\n            let source_name;\n            let len;\n            let debugmode;\n            let in_buffer;\n            let in_code;\n            let in_quotes;\n            let in_long_text;\n            let in_comment;\n            let in_single_quote;\n            let reading_object;\n            let mode;\n            let local_text;\n            let position;\n            let read_table;\n            let get_char;\n            let error;\n            let handle_escape_char;\n            let process_word;\n            let registered_stop_char;\n            let handler_stack;\n            let handler;\n            let c;\n            let next_c;\n            let depth;\n            let stop;\n            let read_block;\n            output_structure=[];\n            idx=-1;\n            line_number=1;\n            column_number=0;\n            source_name=await (async function () {\n                 if (check_true ((opts && opts[\"source_name\"]))){\n                      return (opts && opts[\"source_name\"])\n                } else {\n                      return \"anonymous\"\n                } \n            })();\n            opts=(opts||new Object());\n            len=(await (await Environment.get_global(\"length\"))(text)-1);\n            debugmode=await async function(){\n                if (check_true((opts && opts[\"verbose\"]))) {\n                     return true\n                } else if (check_true( ((opts && opts[\"verbose\"])===false))) {\n                     return false\n                } else if (check_true( ((await Environment.get_global(\"__VERBOSITY__\"))>6))) {\n                     return true\n                } else  {\n                     return false\n                }\n            } ();\n            in_buffer=(text).split(\"\");\n            in_code=0;\n            in_quotes=1;\n            in_long_text=2;\n            in_comment=3;\n            in_single_quote=4;\n            reading_object=false;\n            mode=in_code;\n            local_text=async function() {\n                let start;\n                let end;\n                start=await Math.max(0,(idx-10));\n                end=await Math.min(await (await Environment.get_global(\"length\"))(in_buffer),(idx+10));\n                 return  (await (await Environment.get_global(\"slice\"))(in_buffer,start,end)).join(\"\")\n            };\n            position=async function(offset) {\n                 return  (\"line: \"+line_number+\" column: \"+await (async function () {\n                     if (check_true (offset)){\n                          return (column_number+offset)\n                    } else {\n                          return column_number\n                    } \n                })())\n            };\n            read_table=await (await Environment.get_global(\"add\"))(new Object(),await (async function() {\n                 if (check_true ((opts && opts[\"read_table_entries\"]))){\n                      return (opts && opts[\"read_table_entries\"])\n                } else {\n                      return new Object()\n                } \n            } )(),await ( async function(){\n                let __obj__1=new Object();\n                __obj__1[\"(\"]=[\")\",async function(block) {\n                     return  block\n                }];\n                __obj__1[\"[\"]=[\"]\",async function(block) {\n                     return  block\n                }];\n                __obj__1[\"{\"]=[\"}\",async function(block) {\n                    let obj;\n                    let __idx__2= async function(){\n                        return -1\n                    };\n                    let key_mode;\n                    let need_colon;\n                    let value_mode;\n                    let key;\n                    let value;\n                    let cpos;\n                    let state;\n                    let block_length;\n                    {\n                        obj=new Object();\n                        let idx=await __idx__2();\n                        ;\n                        key_mode=0;\n                        need_colon=1;\n                        value_mode=2;\n                        key=null;\n                        value=null;\n                        cpos=null;\n                        state=key_mode;\n                        block_length=(await (await Environment.get_global(\"length\"))(block)-1);\n                        reading_object=false;\n                        await (async function(){\n                             let __test_condition__3=async function() {\n                                 return  (idx<block_length)\n                            };\n                            let __body_ref__4=async function() {\n                                (idx=idx+1);\n                                key=block[idx];\n                                if (check_true (((key instanceof Array)&&((key && key.length)===2)&&((key && key[\"0\"])===\"=:quotem\")&&((key && key[\"1\"]) instanceof String || typeof (key && key[\"1\"])==='string')))){\n                                     key=(key && key[\"1\"])\n                                };\n                                if (check_true (((key instanceof String || typeof key==='string')&&await (await Environment.get_global(\"starts_with?\"))(\"=:\",key)&&(await (await Environment.get_global(\"length\"))(key)>2)))){\n                                     key=await key[\"substr\"].call(key,2)\n                                };\n                                 return  await async function(){\n                                    if (check_true( await (await Environment.get_global(\"blank?\"))(key))) {\n                                         return await error(\"missing object key\",(\"blank or nil key: \"+block[idx]))\n                                    } else if (check_true( await (await Environment.get_global(\"is_number?\"))(key))) {\n                                        (idx=idx+1);\n                                         return  await async function(){\n                                            obj[key]=block[idx];\n                                            return obj;\n                                            \n                                        }()\n                                    } else if (check_true( ((key instanceof String || typeof key==='string')&&await (await Environment.get_global(\"contains?\"))(\":\",key)&&await (await Environment.get_global(\"not\"))(await (await Environment.get_global(\"ends_with?\"))(\":\",key))))) {\n                                        cpos=await key[\"indexOf\"].call(key,\":\");\n                                        value=await key[\"substr\"].call(key,(cpos+1));\n                                        key=await key[\"substr\"].call(key,0,cpos);\n                                        value=await process_word((value).split(\"\"),0);\n                                         return  await async function(){\n                                            obj[key]=value;\n                                            return obj;\n                                            \n                                        }()\n                                    } else  {\n                                        (idx=idx+1);\n                                        if (check_true (await (await Environment.get_global(\"ends_with?\"))(\":\",key))){\n                                             key=await (await Environment.get_global(\"chop\"))(key)\n                                        } else {\n                                            if (check_true ((block[idx]===\":\"))){\n                                                 (idx=idx+1)\n                                            } else {\n                                                 await error(\"missing colon\",(\"expected colon for: \"+key))\n                                            }\n                                        };\n                                         return  await async function(){\n                                            obj[key]=block[idx];\n                                            return obj;\n                                            \n                                        }()\n                                    }\n                                } ()\n                            };\n                            let __BREAK__FLAG__=false;\n                            while(await __test_condition__3()) {\n                                await __body_ref__4();\n                                 if(__BREAK__FLAG__) {\n                                     break;\n                                    \n                                }\n                            } ;\n                            \n                        })();\n                         return  obj\n                    }\n                },async function() {\n                     return  reading_object=true\n                }];\n                __obj__1[\"\\\"\"]=[\"\\\"\",async function(block) {\n                     return  [\"quotes\",block]\n                }];\n                return __obj__1;\n                \n            })());\n            get_char=async function(pos) {\n                 return  in_buffer[pos]\n            };\n            error=async function(type,message,offset) {\n                throw new LispSyntaxError({\n                    message:message,position:await position(offset),pos:{\n                        line:line_number,column:(column_number+(offset||0))\n                    },depth:depth,local_text:await local_text(),source_name:source_name,type:type\n                });\n                \n            };\n            handle_escape_char=async function(c) {\n                let ccode;\n                ccode=await c[\"charCodeAt\"].call(c,0);\n                 return  await async function(){\n                    if (check_true( (ccode===34))) {\n                         return c\n                    } else if (check_true( (ccode===92))) {\n                         return c\n                    } else if (check_true( (c===\"t\"))) {\n                         return await String.fromCharCode(9)\n                    } else if (check_true( (c===\"n\"))) {\n                         return await String.fromCharCode(10)\n                    } else if (check_true( (c===\"r\"))) {\n                         return await String.fromCharCode(13)\n                    } else if (check_true( (c===\"f\"))) {\n                         return c\n                    } else if (check_true( (c===\"b\"))) {\n                         return c\n                    } else  {\n                         return c\n                    }\n                } ()\n            };\n            process_word=async function(word_acc,backtick_mode) {\n                let word;\n                let word_as_number;\n                word=(word_acc).join(\"\");\n                word_as_number=await Number(word);\n                if (check_true (debugmode)){\n                     console.log(\"process_word: \",word,word_as_number,backtick_mode)\n                };\n                 return  await async function(){\n                    if (check_true( (\"true\"===word))) {\n                         return true\n                    } else if (check_true( (\"false\"===word))) {\n                         return false\n                    } else if (check_true( (\":\"===word))) {\n                         return word\n                    } else if (check_true( (\",@\"===word))) {\n                         return \"=$,@\"\n                    } else if (check_true( ((\",#\"===word)||(\"##\"===word)))) {\n                         return \"=:##\"\n                    } else if (check_true( (\"=$,@\"===word))) {\n                         return \"=$,@\"\n                    } else if (check_true( (\"=:##\"===word))) {\n                         return \"=:##\"\n                    } else if (check_true( await isNaN(word_as_number))) {\n                         return  await async function(){\n                            if (check_true( (word===\"=:\"))) {\n                                 return  \"=:\"\n                            } else if (check_true( ((backtick_mode===0)&&await (await Environment.get_global(\"ends_with?\"))(\")\",word)))) {\n                                 return await error(\"trailing character\",\"unexpected trailing parenthesis\")\n                            } else if (check_true( ((backtick_mode===0)&&await (await Environment.get_global(\"ends_with?\"))(\"]\",word)))) {\n                                 return await error(\"trailing character\",\"unexpected trailing bracket\")\n                            } else if (check_true( await (await Environment.get_global(\"contains?\"))(word,[\"=:(\",\"=:)\",\"=:'\"]))) {\n                                 return  word\n                            } else if (check_true( (backtick_mode===1))) {\n                                 return word\n                            } else  {\n                                 return await (await Environment.get_global(\"add\"))(\"=:\",word)\n                            }\n                        } ()\n                    } else if (check_true( await (await Environment.get_global(\"is_number?\"))(word_as_number))) {\n                         return word_as_number\n                    } else  {\n                        console.log(\"reader: \",await position(),\" what is this?\",word,word_acc,await local_text());\n                         return  word\n                    }\n                } ()\n            };\n            registered_stop_char=null;\n            handler_stack=[];\n            handler=null;\n            c=null;\n            next_c=null;\n            depth=0;\n            stop=false;\n            read_block=async function(_depth,_prefix_op) {\n                let acc;\n                let word_acc;\n                let backtick_mode;\n                let escape_mode;\n                let last_c;\n                let block_return;\n                acc=[];\n                word_acc=[];\n                backtick_mode=0;\n                escape_mode=0;\n                last_c=null;\n                block_return=null;\n                if (check_true (_prefix_op)){\n                     (acc).push(_prefix_op)\n                };\n                depth=_depth;\n                await (async function(){\n                     let __test_condition__8=async function() {\n                         return  (await (await Environment.get_global(\"not\"))(stop)&&(idx<len))\n                    };\n                    let __body_ref__9=async function() {\n                        idx+=1;\n                        escape_mode=await Math.max(0,(escape_mode-1));\n                        c=await get_char(idx);\n                        next_c=await get_char((idx+1));\n                        if (check_true ((c===\"\\n\"))){\n                            line_number+=1;\n                             column_number=0\n                        };\n                        if (check_true (debugmode)){\n                             await console.log(_depth,\"C->\",c,next_c,mode,escape_mode,await clone(acc),await clone(word_acc),(handler_stack && handler_stack.length))\n                        };\n                        await async function(){\n                            if (check_true( ((next_c===undefined)&&await (await Environment.get_global(\"not\"))((await (async function(){\n                                let __targ__10=await (await Environment.get_global(\"last\"))(handler_stack);\n                                if (__targ__10){\n                                     return(__targ__10)[0]\n                                } \n                            })()===undefined))&&(await (await Environment.get_global(\"not\"))((c===await (async function(){\n                                let __targ__11=await (await Environment.get_global(\"last\"))(handler_stack);\n                                if (__targ__11){\n                                     return(__targ__11)[0]\n                                } \n                            })()))||((handler_stack && handler_stack.length)>1))))) {\n                                 return await error(\"premature end\",(\"premature end: expected: \"+await (async function(){\n                                    let __targ__12=await (await Environment.get_global(\"last\"))(handler_stack);\n                                    if (__targ__12){\n                                         return(__targ__12)[0]\n                                    } \n                                })()))\n                            } else if (check_true( ((next_c===undefined)&&(mode===in_quotes)&&await (await Environment.get_global(\"not\"))((await c[\"charCodeAt\"]()===34))))) {\n                                 return await error(\"premature end\",\"premature end: expected: \\\"\")\n                            } else if (check_true( ((next_c===undefined)&&(mode===in_long_text)&&await (await Environment.get_global(\"not\"))((c===\"|\"))))) {\n                                 return await error(\"premature end\",\"premature end: expected: |\")\n                            } else if (check_true( ((mode===in_code)&&(_depth===1)&&(next_c===\")\")&&(c===\")\")))) {\n                                 return  await error(\"trailing character\",\"unexpected trailing parenthesis\")\n                            }\n                        } ();\n                        await async function(){\n                            if (check_true( ((c===\"\\n\")&&(mode===in_comment)))) {\n                                mode=in_code;\n                                __BREAK__FLAG__=true;\n                                return\n                            } else if (check_true( ((92===await c[\"charCodeAt\"].call(c,0))&&(mode===in_long_text)))) {\n                                (word_acc).push(c);\n                                 return  (word_acc).push(c)\n                            } else if (check_true( ((mode>0)&&(escape_mode===1)&&(92===await c[\"charCodeAt\"].call(c,0))))) {\n                                 return  (word_acc).push(c)\n                            } else if (check_true( ((mode>0)&&(92===await c[\"charCodeAt\"].call(c,0))))) {\n                                 return  escape_mode=2\n                            } else if (check_true( ((mode>0)&&(escape_mode===1)))) {\n                                 return  (word_acc).push(await handle_escape_char(c))\n                            } else if (check_true( ((mode===in_long_text)&&(escape_mode===0)&&(c===\"|\")))) {\n                                acc=await (await Environment.get_global(\"add\"))((word_acc).join(\"\"));\n                                word_acc=[];\n                                mode=in_code;\n                                __BREAK__FLAG__=true;\n                                return\n                            } else if (check_true( ((mode===in_quotes)&&(escape_mode===0)&&(c===\"\\\"\")))) {\n                                acc=await (await Environment.get_global(\"add\"))((word_acc).join(\"\"));\n                                word_acc=[];\n                                mode=in_code;\n                                __BREAK__FLAG__=true;\n                                return\n                            } else if (check_true( ((mode===in_single_quote)&&(escape_mode===0)&&(c===\"'\")))) {\n                                acc=await (await Environment.get_global(\"add\"))((word_acc).join(\"\"));\n                                word_acc=[];\n                                mode=in_code;\n                                __BREAK__FLAG__=true;\n                                return\n                            } else if (check_true( ((c===\"|\")&&(mode===in_code)))) {\n                                if (check_true (((word_acc && word_acc.length)>0))){\n                                    (acc).push(await process_word(word_acc));\n                                     word_acc=[]\n                                };\n                                mode=in_long_text;\n                                block_return=await read_block(await (await Environment.get_global(\"add\"))(_depth,1));\n                                if (check_true ((backtick_mode===1))){\n                                    block_return=[\"=:quotem\",block_return];\n                                     backtick_mode=0\n                                };\n                                 return  (acc).push(block_return)\n                            } else if (check_true( ((c===\"\\\"\")&&(escape_mode===0)&&(mode===in_code)))) {\n                                if (check_true (((word_acc && word_acc.length)>0))){\n                                    (acc).push(await process_word(word_acc));\n                                     word_acc=[]\n                                };\n                                mode=in_quotes;\n                                block_return=await read_block(await (await Environment.get_global(\"add\"))(_depth,1));\n                                if (check_true ((backtick_mode===1))){\n                                     backtick_mode=0\n                                };\n                                 return  (acc).push(block_return)\n                            } else if (check_true( ((c===\"'\")&&(escape_mode===0)&&(mode===in_code)))) {\n                                if (check_true (((word_acc && word_acc.length)>0))){\n                                    (acc).push(await process_word(word_acc));\n                                     word_acc=[]\n                                };\n                                mode=in_single_quote;\n                                block_return=await read_block(await (await Environment.get_global(\"add\"))(_depth,1));\n                                if (check_true ((backtick_mode===1))){\n                                     backtick_mode=0\n                                };\n                                 return  (acc).push(block_return)\n                            } else if (check_true( (mode===in_comment))) {\n                                 return false\n                            } else if (check_true( ((c===\";\")&&(mode===in_code)))) {\n                                if (check_true (((word_acc && word_acc.length)>0))){\n                                    (acc).push(await process_word(word_acc));\n                                     word_acc=[]\n                                };\n                                mode=in_comment;\n                                 return  await read_block(await (await Environment.get_global(\"add\"))(_depth,1))\n                            } else if (check_true( ((mode===in_code)&&(await (await Environment.get_global(\"length\"))(handler_stack)>0)&&(c===await (async function(){\n                                let __targ__13=await (await Environment.get_global(\"last\"))(handler_stack);\n                                if (__targ__13){\n                                     return(__targ__13)[0]\n                                } \n                            })())))) {\n                                __BREAK__FLAG__=true;\n                                return\n                            } else if (check_true( ((mode===in_code)&&read_table[c]&&await (await Environment.get_global(\"first\"))(read_table[c])))) {\n                                if (check_true (await (async function(){\n                                    let __targ__14=read_table[c];\n                                    if (__targ__14){\n                                         return(__targ__14)[2]\n                                    } \n                                })())){\n                                    handler=await (async function(){\n                                        let __targ__15=read_table[c];\n                                        if (__targ__15){\n                                             return(__targ__15)[2]\n                                        } \n                                    })();\n                                    await (async function(){\n                                        let __array_op_rval__16=handler;\n                                         if (__array_op_rval__16 instanceof Function){\n                                            return await __array_op_rval__16() \n                                        } else {\n                                            return[__array_op_rval__16]\n                                        }\n                                    })();\n                                     handler=null\n                                };\n                                (handler_stack).push(read_table[c]);\n                                if (check_true (((word_acc && word_acc.length)>0))){\n                                    (acc).push(await process_word(word_acc,backtick_mode));\n                                    backtick_mode=0;\n                                     word_acc=[]\n                                };\n                                block_return=await read_block(await (await Environment.get_global(\"add\"))(_depth,1));\n                                handler=await (async function(){\n                                    let __targ__17=(handler_stack).pop();\n                                    if (__targ__17){\n                                         return(__targ__17)[1]\n                                    } \n                                })();\n                                block_return=await (async function(){\n                                    let __array_op_rval__18=handler;\n                                     if (__array_op_rval__18 instanceof Function){\n                                        return await __array_op_rval__18(block_return) \n                                    } else {\n                                        return[__array_op_rval__18,block_return]\n                                    }\n                                })();\n                                if (check_true (await (await Environment.get_global(\"not\"))((undefined===block_return)))){\n                                    if (check_true ((backtick_mode===1))){\n                                        block_return=[\"=:quotem\",block_return];\n                                         backtick_mode=0\n                                    };\n                                     return  (acc).push(block_return)\n                                }\n                            } else if (check_true( ((mode===in_code)&&(c===\"`\")))) {\n                                if (check_true (((word_acc && word_acc.length)>0))){\n                                    (acc).push(await process_word(word_acc));\n                                     word_acc=[]\n                                };\n                                 return  backtick_mode=1\n                            } else if (check_true( ((mode===in_code)&&(c===\":\")&&((word_acc && word_acc.length)===0)&&((acc && acc.length)>0)&&(await (await Environment.get_global(\"last\"))(acc) instanceof String || typeof await (await Environment.get_global(\"last\"))(acc)==='string')))) {\n                                 return (acc).push(await (await Environment.get_global(\"add\"))((acc).pop(),\":\"))\n                            } else if (check_true( ((mode===in_code)&&(last_c===\",\")&&((c===\"#\")||(c===\"@\"))))) {\n                                (word_acc).push(c);\n                                (acc).push(await process_word(word_acc));\n                                 return  word_acc=[]\n                            } else if (check_true( ((mode===in_code)&&((c===\" \")||(await c[\"charCodeAt\"].call(c,0)===10)||(await c[\"charCodeAt\"].call(c,0)===9)||((c===\",\")&&await (await Environment.get_global(\"not\"))((next_c===\"@\"))&&await (await Environment.get_global(\"not\"))((next_c===\"#\"))))))) {\n                                if (check_true (((word_acc && word_acc.length)>0))){\n                                    if (check_true ((backtick_mode===1))){\n                                        (acc).push(await process_word(word_acc,backtick_mode));\n                                         backtick_mode=0\n                                    } else {\n                                         (acc).push(await process_word(word_acc))\n                                    };\n                                     return  word_acc=[]\n                                }\n                            } else if (check_true( ((mode===in_code)&&(await c[\"charCodeAt\"].call(c,0)===13)))) {\n                                 return false\n                            } else  {\n                                 return  (word_acc).push(c)\n                            }\n                        } ();\n                        column_number+=1;\n                         return  last_c=c\n                    };\n                    let __BREAK__FLAG__=false;\n                    while(await __test_condition__8()) {\n                        await __body_ref__9();\n                         if(__BREAK__FLAG__) {\n                             break;\n                            \n                        }\n                    } ;\n                    \n                })();\n                if (check_true (((word_acc && word_acc.length)>0))){\n                    (acc).push(await process_word(word_acc,backtick_mode));\n                     word_acc=[]\n                };\n                 return  acc\n            };\n            if (check_true (debugmode)){\n                 await console.log(\"read->\",in_buffer)\n            };\n            output_structure=await read_block(0);\n            if (check_true (debugmode)){\n                 await console.log(\"read<-\",await clone(output_structure))\n            };\n            if (check_true (((output_structure instanceof Array)&&(await (await Environment.get_global(\"length\"))(output_structure)>1)))){\n                (output_structure).unshift(\"=:iprogn\");\n                 return  await (await Environment.get_global(\"first\"))(await (async function(){\n                    let __array_op_rval__19=output_structure;\n                     if (__array_op_rval__19 instanceof Function){\n                        return await __array_op_rval__19() \n                    } else {\n                        return[__array_op_rval__19]\n                    }\n                })())\n            } else {\n                  return await (await Environment.get_global(\"first\"))(output_structure)\n            }\n        }\n    } ()\n}],[\"add_escape_encoding\",async function(text) {        if (check_true ((text instanceof String || typeof text==='string'))){            let chars;            let acc;            chars=(text).split(\"\");            acc=[];            await (async function() {                let __for_body__3=async function(c) {                     return  await async function(){                        if (check_true( ((await c[\"charCodeAt\"].call(c,0)===34)))) {                            (acc).push(await String.fromCharCode(92));                             return  (acc).push(c)                        } else  {                             return (acc).push(c)                        }                    } ()                };                let __array__4=[],__elements__2=chars;                let __BREAK__FLAG__=false;                for(let __iter__1 in __elements__2) {                    __array__4.push(await __for_body__3(__elements__2[__iter__1]));                    if(__BREAK__FLAG__) {                         __array__4.pop();                        break;                                            }                }return __array__4;                             })();             return  (acc).join(\"\")        } else {              return text        }    }],[\"get_outside_global\",function get_outside_global(refname) {  try {    let tfn = new Function(\"{ if (typeof \" + refname + \" === 'undefined') { return undefined } else { return \"+refname+\" } }\");    return tfn();  } catch (ex) {    return undefined;  }}],[\"as_lisp\",lisp_writer],[\"lisp_writer\",lisp_writer],[\"clone_to_new\",async function(options) {\n                            let new_env;\n                            let my_children;\n                            let my_children_declarations;\n                            new_env=null;\n                            my_children=null;\n                            my_children_declarations=null;\n                            await env_log(namespace,\"cloning: # children: \",await length(children));\n                            new_env=await dlisp_env({\n                                env:await clone(Environment),children:await clone(children),children_declarations:await clone(children_declarations)\n                            });\n                            await env_log(namespace,\"constructed: \",await new_env[\"id\"]());\n                             return  new_env\n                        }],[\"save_env\",async function(options) {\n                            let new_env;\n                            let my_children;\n                            let env_constructor;\n                            let dcomps;\n                            let version_tag;\n                            let build_time;\n                            let build_headers;\n                            let child_env;\n                            let include_source;\n                            let exports;\n                            let src;\n                            let target_insertion_path;\n                            let output_path;\n                            new_env=null;\n                            my_children=null;\n                            env_constructor=null;\n                            dcomps=await (await get_global(\"date_components\"))(new Date());\n                            version_tag=await (async function () {\n                                 if (check_true (await not(await (await get_global(\"blank?\"))(opts.version_tag)))){\n                                      return opts.version_tag\n                                } else {\n                                      return (await (async function(){\n                                        let __array_op_rval__237=dcomps.year;\n                                         if (__array_op_rval__237 instanceof Function){\n                                            return await __array_op_rval__237(dcomps.month,dcomps.day,dcomps.hour,dcomps.minute) \n                                        } else {\n                                            return[__array_op_rval__237,dcomps.month,dcomps.day,dcomps.hour,dcomps.minute]\n                                        }\n                                    })()).join(\".\")\n                                } \n                            })();\n                            build_time=await (await get_global(\"formatted_date\"))(new Date());\n                            build_headers=[];\n                            child_env=null;\n                            include_source=false;\n                            exports=[];\n                            src=await (async function () {\n                                 if (check_true (Environment.global_ctx.scope[\"*env_skeleton*\"])){\n                                      return await clone(Environment.global_ctx.scope[\"*env_skeleton*\"])\n                                } else {\n                                      return await (await get_global(\"reader\"))(await (await get_global(\"read_text_file\"))(\"./src/environment.lisp\"))\n                                } \n                            })();\n                            target_insertion_path=null;\n                            output_path=null;\n                            if (check_true (Environment.global_ctx.scope[\"*env_skeleton*\"])){\n                                 await (await get_global(\"register_feature\"))(\"*env_skeleton*\")\n                            };\n                            target_insertion_path=await first(await (await get_global(\"findpaths\"))(\"=:included_globals\",src));\n                            if (check_true (await not((target_insertion_path instanceof Array))))throw new EvalError(\"Unable to find the first included_globals symbol\");\n                            ;\n                            target_insertion_path=await conj(await chop(target_insertion_path),[2]);\n                            options=(options||new Object());\n                            if (check_true (options.include_source)){\n                                 include_source=true\n                            };\n                            await env_log(namespace,\"cloning: # children: \",await length(children));\n                            exports=await export_symbol_set();\n                            my_children=await to_object(await (async function() {\n                                let __collector;\n                                let __result;\n                                let __action;\n                                __collector=[];\n                                __result=null;\n                                __action=async function(child) {\n                                    if (check_true (await resolve_path(await (async function(){\n                                        let __array_op_rval__238=child['0'];\n                                         if (__array_op_rval__238 instanceof Function){\n                                            return await __array_op_rval__238(\"serialize_with_image\") \n                                        } else {\n                                            return[__array_op_rval__238,\"serialize_with_image\"]\n                                        }\n                                    })(),children_declarations))){\n                                        child_env=await child['1'][\"compile\"].call(child['1'],await child['1'][\"export_symbol_set\"].call(child['1'],{\n                                            no_compiler:true\n                                        }),{\n                                            throw_on_error:true,meta:true\n                                        });\n                                         return  await (async function(){\n                                            let __array_op_rval__239=child['0'];\n                                             if (__array_op_rval__239 instanceof Function){\n                                                return await __array_op_rval__239([\"=:quote\",[\"=:javascript\",child_env['1']]]) \n                                            } else {\n                                                return[__array_op_rval__239,[\"=:quote\",[\"=:javascript\",child_env['1']]]]\n                                            }\n                                        })()\n                                    }\n                                };\n                                ;\n                                await (async function() {\n                                    let __for_body__242=async function(__item) {\n                                        __result=await __action(__item);\n                                        if (check_true (__result)){\n                                              return (__collector).push(__result)\n                                        }\n                                    };\n                                    let __array__243=[],__elements__241=await pairs(children);\n                                    let __BREAK__FLAG__=false;\n                                    for(let __iter__240 in __elements__241) {\n                                        __array__243.push(await __for_body__242(__elements__241[__iter__240]));\n                                        if(__BREAK__FLAG__) {\n                                             __array__243.pop();\n                                            break;\n                                            \n                                        }\n                                    }return __array__243;\n                                     \n                                })();\n                                 return  __collector\n                            } )());\n                            await (await get_global(\"set_path\"))(target_insertion_path,src,[\"=:fn\",[],await (async function(){\n                                 return await to_object([[\"definitions\",[\"=:quote\",await clone(Environment.definitions)]],[\"declarations\",await clone(Environment.declarations)],[\"symbols\",[\"=:javascript\",await compile(await to_object(exports),{\n                                    throw_on_error:true\n                                })]],[\"children_declarations\",[\"=:fn\",[],await (async function(){\n                                     return await clone(children_declarations) \n                                })()]],[\"children\",my_children]]) \n                            })()]);\n                            output_path=(options.save_as||await resolve_path([\"*env_config*\",\"export\",\"save_path\"],Environment.global_ctx.scope));\n                            if (check_true (output_path instanceof Function)){\n                                 output_path=await (async function(){\n                                    let __array_op_rval__244=output_path;\n                                     if (__array_op_rval__244 instanceof Function){\n                                        return await __array_op_rval__244() \n                                    } else {\n                                        return[__array_op_rval__244]\n                                    }\n                                })()\n                            };\n                            if (check_true ((await not((output_path instanceof String || typeof output_path==='string'))&&output_path)))throw new EvalError(\"invalid name for target for saving the environment.  Must be a string or function\");\n                            ;\n                             return  await async function(){\n                                if (check_true( (output_path&&await (await get_global(\"ends_with?\"))(\".js\",output_path)))) {\n                                    (build_headers).push((\"// Build Time: \"+build_time));\n                                    (build_headers).push((\"// Version: \"+version_tag));\n                                    (build_headers).push((\"export const DLISP_ENV_VERSION='\"+version_tag+\"';\"));\n                                    await env_log(\"saving to: \",output_path);\n                                     return  await (await get_global(\"compile_buffer\"))(src,\"init_dlisp\",{\n                                        namespace:namespace,toplevel:true,include_boilerplate:false,verbose:false,bundle:true,js_headers:[await (await get_global(\"show\"))(check_true),await (await get_global(\"show\"))(get_next_environment_id),await (await get_global(\"show\"))(get_outside_global),await (await get_global(\"show\"))(subtype),await (await get_global(\"show\"))(lisp_writer),await (await get_global(\"show\"))(clone),await (await get_global(\"show\"))(LispSyntaxError)],bundle_options:{\n                                            default_namespace:await resolve_path([\"*env_config*\",\"export\",\"default_namespace\"],Environment.global_ctx.scope)\n                                        },output_file:output_path,include_source:(options.include_source||await resolve_path([\"*env_config*\",\"export\",\"include_source\"],Environment.global_ctx.scope)),build_headers:build_headers\n                                    })\n                                } else if (check_true( (output_path&&await (await get_global(\"ends_with?\"))(\".lisp\",output_path)))) {\n                                     return await (await get_global(\"write_text_file\"))(output_path,await JSON.stringify(src,null,4))\n                                } else  {\n                                     return src\n                                }\n                            } ()\n                        }],[\"null\",null]]"]
}
}
};
;
if (check_true ((included_globals&&(namespace==="core")))){
    included_globals=await included_globals();
    if (check_true ((included_globals["symbols"] instanceof Object))){
         await (async function() {
            let __for_body__197=async function(symset) {
                if (check_true (((null==Environment.global_ctx.scope[symset['0']])||(symset['0']==="*env_config*")))){
                     return  await async function(){
                        Environment.global_ctx.scope[symset['0']]=symset['1'];
                        return Environment.global_ctx.scope;
                        
                    }()
                }
            };
            let __array__198=[],__elements__196=await pairs(included_globals.symbols);
            let __BREAK__FLAG__=false;
            for(let __iter__195 in __elements__196) {
                __array__198.push(await __for_body__197(__elements__196[__iter__195]));
                if(__BREAK__FLAG__) {
                     __array__198.pop();
                    break;
                    
                }
            }return __array__198;
             
        })()
    };
    if (check_true ((included_globals["definitions"] instanceof Object))){
         await (async function() {
            let __for_body__202=async function(symset) {
                if (check_true ((null==Environment.definitions[symset['0']]))){
                     return  await async function(){
                        Environment.definitions[symset['0']]=symset['1'];
                        return Environment.definitions;
                        
                    }()
                }
            };
            let __array__203=[],__elements__201=await pairs(included_globals.definitions);
            let __BREAK__FLAG__=false;
            for(let __iter__200 in __elements__201) {
                __array__203.push(await __for_body__202(__elements__201[__iter__200]));
                if(__BREAK__FLAG__) {
                     __array__203.pop();
                    break;
                    
                }
            }return __array__203;
             
        })()
    };
    if (check_true ((included_globals["declarations"] instanceof Object))){
         await (async function() {
            let __for_body__207=async function(symset) {
                if (check_true ((null==Environment.declarations[symset['0']]))){
                     return  await async function(){
                        Environment.declarations[symset['0']]="=:symset.1";
                        return Environment.declarations;
                        
                    }()
                }
            };
            let __array__208=[],__elements__206=await pairs(included_globals.declarations);
            let __BREAK__FLAG__=false;
            for(let __iter__205 in __elements__206) {
                __array__208.push(await __for_body__207(__elements__206[__iter__205]));
                if(__BREAK__FLAG__) {
                     __array__208.pop();
                    break;
                    
                }
            }return __array__208;
             
        })()
    };
    if (check_true (Environment.global_ctx.scope["compiler"])){
         await set_compiler(Environment.global_ctx.scope["compiler"])
    };
    if (check_true ((included_globals["children"] instanceof Object))){
        await (async function() {
            let __for_body__212=async function(childset) {
                 return  await (await get_global("create_namespace"))(childset['0'],await (async function() {
                     if (check_true (included_globals.children_declarations[childset['0']])){
                          return included_globals.children_declarations[childset['0']]
                    } else {
                          return new Object()
                    } 
                } )())
            };
            let __array__213=[],__elements__211=await pairs(included_globals.children);
            let __BREAK__FLAG__=false;
            for(let __iter__210 in __elements__211) {
                __array__213.push(await __for_body__212(__elements__211[__iter__210]));
                if(__BREAK__FLAG__) {
                     __array__213.pop();
                    break;
                    
                }
            }return __array__213;
             
        })();
         await (async function() {
            let __for_body__216=async function(childset) {
                let childenv=children[childset['0']];
                ;
                await async function(){
                    childset[1]=await childenv["eval"].call(childenv,childset['1']);
                    return childset;
                    
                }();
                 return  await (async function() {
                    let __for_body__221=async function(symset) {
                        if (check_true ((null==await resolve_path(await (async function(){
                            let __array_op_rval__223=childset['0'];
                             if (__array_op_rval__223 instanceof Function){
                                return await __array_op_rval__223("context","scope",symset['0']) 
                            } else {
                                return[__array_op_rval__223,"context","scope",symset['0']]
                            }
                        })(),children)))){
                             return  await (await get_global("set_path"))(await (async function(){
                                let __array_op_rval__224=childset['0'];
                                 if (__array_op_rval__224 instanceof Function){
                                    return await __array_op_rval__224("context","scope",symset['0']) 
                                } else {
                                    return[__array_op_rval__224,"context","scope",symset['0']]
                                }
                            })(),children,symset['1'])
                        }
                    };
                    let __array__222=[],__elements__220=childset['1'];
                    let __BREAK__FLAG__=false;
                    for(let __iter__219 in __elements__220) {
                        __array__222.push(await __for_body__221(__elements__220[__iter__219]));
                        if(__BREAK__FLAG__) {
                             __array__222.pop();
                            break;
                            
                        }
                    }return __array__222;
                     
                })()
            };
            let __array__217=[],__elements__215=await pairs(included_globals.children);
            let __BREAK__FLAG__=false;
            for(let __iter__214 in __elements__215) {
                __array__217.push(await __for_body__216(__elements__215[__iter__214]));
                if(__BREAK__FLAG__) {
                     __array__217.pop();
                    break;
                    
                }
            }return __array__217;
             
        })()
    }
};
let clone_to_new=async function(options) {
    let new_env;
    let my_children;
    let my_children_declarations;
    new_env=null;
    my_children=null;
    my_children_declarations=null;
    await env_log(namespace,"cloning: # children: ",await length(children));
    new_env=await dlisp_env({
        env:await clone(Environment),children:await clone(children),children_declarations:await clone(children_declarations)
    });
    await env_log(namespace,"constructed: ",await new_env["id"]());
     return  new_env
};
;
let export_symbol_set=async function(options) {
    let __collector;
    let __result;
    let __action;
    __collector=[];
    __result=null;
    __action=async function(symset) {
         return  await async function(){
            if (check_true( (options&&options.no_compiler&&(symset['0']==="compiler")))) {
                 return null
            } else if (check_true( await (await get_global("starts_with?"))("$",symset['0']))) {
                 return null
            } else if (check_true( (symset['0']==="*env_skeleton*"))) {
                 return await (async function(){
                    let __array_op_rval__225=symset['0'];
                     if (__array_op_rval__225 instanceof Function){
                        return await __array_op_rval__225(["=:quotel",Environment.global_ctx.scope["*env_skeleton*"]]) 
                    } else {
                        return[__array_op_rval__225,["=:quotel",Environment.global_ctx.scope["*env_skeleton*"]]]
                    }
                })()
            } else if (check_true( await resolve_path(await (async function(){
                let __array_op_rval__226=symset['0'];
                 if (__array_op_rval__226 instanceof Function){
                    return await __array_op_rval__226("initializer") 
                } else {
                    return[__array_op_rval__226,"initializer"]
                }
            })(),Environment.definitions))) {
                 return await (async function(){
                    let __array_op_rval__228=symset['0'];
                     if (__array_op_rval__228 instanceof Function){
                        return await __array_op_rval__228(await resolve_path(await (async function(){
                            let __array_op_rval__227=symset['0'];
                             if (__array_op_rval__227 instanceof Function){
                                return await __array_op_rval__227("initializer") 
                            } else {
                                return[__array_op_rval__227,"initializer"]
                            }
                        })(),Environment.definitions)) 
                    } else {
                        return[__array_op_rval__228,await resolve_path(await (async function(){
                            let __array_op_rval__227=symset['0'];
                             if (__array_op_rval__227 instanceof Function){
                                return await __array_op_rval__227("initializer") 
                            } else {
                                return[__array_op_rval__227,"initializer"]
                            }
                        })(),Environment.definitions)]
                    }
                })()
            } else if (check_true( (null===symset['1']))) {
                 return await (async function(){
                    let __array_op_rval__229=symset['0'];
                     if (__array_op_rval__229 instanceof Function){
                        return await __array_op_rval__229("=:nil") 
                    } else {
                        return[__array_op_rval__229,"=:nil"]
                    }
                })()
            } else if (check_true( (undefined===symset['1']))) {
                 return await (async function(){
                    let __array_op_rval__230=symset['0'];
                     if (__array_op_rval__230 instanceof Function){
                        return await __array_op_rval__230("=:undefined") 
                    } else {
                        return[__array_op_rval__230,"=:undefined"]
                    }
                })()
            } else  {
                 return await (async function(){
                    let __array_op_rval__231=symset['0'];
                     if (__array_op_rval__231 instanceof Function){
                        return await __array_op_rval__231(symset['1']) 
                    } else {
                        return[__array_op_rval__231,symset['1']]
                    }
                })()
            }
        } ()
    };
    ;
    await (async function() {
        let __for_body__234=async function(__item) {
            __result=await __action(__item);
            if (check_true (__result)){
                  return (__collector).push(__result)
            }
        };
        let __array__235=[],__elements__233=await pairs(await clone(Environment.global_ctx.scope));
        let __BREAK__FLAG__=false;
        for(let __iter__232 in __elements__233) {
            __array__235.push(await __for_body__234(__elements__233[__iter__232]));
            if(__BREAK__FLAG__) {
                 __array__235.pop();
                break;
                
            }
        }return __array__235;
         
    })();
     return  __collector
};
;
let save_env=async function(options) {
    let new_env;
    let my_children;
    let env_constructor;
    let dcomps;
    let version_tag;
    let build_time;
    let build_headers;
    let child_env;
    let include_source;
    let exports;
    let src;
    let target_insertion_path;
    let output_path;
    new_env=null;
    my_children=null;
    env_constructor=null;
    dcomps=await (await get_global("date_components"))(new Date());
    version_tag=await (async function () {
         if (check_true (await not(await (await get_global("blank?"))(opts.version_tag)))){
              return opts.version_tag
        } else {
              return (await (async function(){
                let __array_op_rval__236=dcomps.year;
                 if (__array_op_rval__236 instanceof Function){
                    return await __array_op_rval__236(dcomps.month,dcomps.day,dcomps.hour,dcomps.minute) 
                } else {
                    return[__array_op_rval__236,dcomps.month,dcomps.day,dcomps.hour,dcomps.minute]
                }
            })()).join(".")
        } 
    })();
    build_time=await (await get_global("formatted_date"))(new Date());
    build_headers=[];
    child_env=null;
    include_source=false;
    exports=[];
    src=await (async function () {
         if (check_true (Environment.global_ctx.scope["*env_skeleton*"])){
              return await clone(Environment.global_ctx.scope["*env_skeleton*"])
        } else {
              return await (await get_global("reader"))(await (await get_global("read_text_file"))("./src/environment.lisp"))
        } 
    })();
    target_insertion_path=null;
    output_path=null;
    if (check_true (Environment.global_ctx.scope["*env_skeleton*"])){
         await (await get_global("register_feature"))("*env_skeleton*")
    };
    target_insertion_path=await first(await (await get_global("findpaths"))("=:included_globals",src));
    if (check_true (await not((target_insertion_path instanceof Array))))throw new EvalError("Unable to find the first included_globals symbol");
    ;
    target_insertion_path=await conj(await chop(target_insertion_path),[2]);
    options=(options||new Object());
    if (check_true (options.include_source)){
         include_source=true
    };
    await env_log(namespace,"cloning: # children: ",await length(children));
    exports=await export_symbol_set();
    my_children=await to_object(await (async function() {
        let __collector;
        let __result;
        let __action;
        __collector=[];
        __result=null;
        __action=async function(child) {
            if (check_true (await resolve_path(await (async function(){
                let __array_op_rval__237=child['0'];
                 if (__array_op_rval__237 instanceof Function){
                    return await __array_op_rval__237("serialize_with_image") 
                } else {
                    return[__array_op_rval__237,"serialize_with_image"]
                }
            })(),children_declarations))){
                child_env=await child['1']["compile"].call(child['1'],await child['1']["export_symbol_set"].call(child['1'],{
                    no_compiler:true
                }),{
                    throw_on_error:true,meta:true
                });
                 return  await (async function(){
                    let __array_op_rval__238=child['0'];
                     if (__array_op_rval__238 instanceof Function){
                        return await __array_op_rval__238(["=:quote",["=:javascript",child_env['1']]]) 
                    } else {
                        return[__array_op_rval__238,["=:quote",["=:javascript",child_env['1']]]]
                    }
                })()
            }
        };
        ;
        await (async function() {
            let __for_body__241=async function(__item) {
                __result=await __action(__item);
                if (check_true (__result)){
                      return (__collector).push(__result)
                }
            };
            let __array__242=[],__elements__240=await pairs(children);
            let __BREAK__FLAG__=false;
            for(let __iter__239 in __elements__240) {
                __array__242.push(await __for_body__241(__elements__240[__iter__239]));
                if(__BREAK__FLAG__) {
                     __array__242.pop();
                    break;
                    
                }
            }return __array__242;
             
        })();
         return  __collector
    } )());
    await (await get_global("set_path"))(target_insertion_path,src,["=:fn",[],await (async function(){
         return await to_object([["definitions",["=:quote",await clone(Environment.definitions)]],["declarations",await clone(Environment.declarations)],["symbols",["=:javascript",await compile(await to_object(exports),{
            throw_on_error:true
        })]],["children_declarations",["=:fn",[],await (async function(){
             return await clone(children_declarations) 
        })()]],["children",my_children]]) 
    })()]);
    output_path=(options.save_as||await resolve_path(["*env_config*","export","save_path"],Environment.global_ctx.scope));
    if (check_true (output_path instanceof Function)){
         output_path=await (async function(){
            let __array_op_rval__243=output_path;
             if (__array_op_rval__243 instanceof Function){
                return await __array_op_rval__243() 
            } else {
                return[__array_op_rval__243]
            }
        })()
    };
    if (check_true ((await not((output_path instanceof String || typeof output_path==='string'))&&output_path)))throw new EvalError("invalid name for target for saving the environment.  Must be a string or function");
    ;
     return  await async function(){
        if (check_true( (output_path&&await (await get_global("ends_with?"))(".js",output_path)))) {
            (build_headers).push(("// Build Time: "+build_time));
            (build_headers).push(("// Version: "+version_tag));
            (build_headers).push(("export const DLISP_ENV_VERSION='"+version_tag+"';"));
            await env_log("saving to: ",output_path);
             return  await (await get_global("compile_buffer"))(src,"init_dlisp",{
                namespace:namespace,toplevel:true,include_boilerplate:false,verbose:false,bundle:true,js_headers:[await (await get_global("show"))(check_true),await (await get_global("show"))(get_next_environment_id),await (await get_global("show"))(get_outside_global),await (await get_global("show"))(subtype),await (await get_global("show"))(lisp_writer),await (await get_global("show"))(clone),await (await get_global("show"))(LispSyntaxError)],bundle_options:{
                    default_namespace:await resolve_path(["*env_config*","export","default_namespace"],Environment.global_ctx.scope)
                },output_file:output_path,include_source:(options.include_source||await resolve_path(["*env_config*","export","include_source"],Environment.global_ctx.scope)),build_headers:build_headers
            })
        } else if (check_true( (output_path&&await (await get_global("ends_with?"))(".lisp",output_path)))) {
             return await (await get_global("write_text_file"))(output_path,await JSON.stringify(src,null,4))
        } else  {
             return src
        }
    } ()
};
;
let reader=async function(text,opts) {     return  await async function(){        if (check_true( (undefined==text))) {             throw new EvalError(("reader: received undefined, text must be a string."));                    } else if (check_true( await (await Environment.get_global("not"))((text instanceof String || typeof text==='string')))) {             throw new EvalError(("reader: received "+await (await Environment.get_global("sub_type"))(text)+": text must be a string."));                    } else  {            let output_structure;            let idx;
            let line_number;
            let column_number;
            let source_name;
            let len;
            let debugmode;
            let in_buffer;
            let in_code;
            let in_quotes;
            let in_long_text;
            let in_comment;
            let in_single_quote;
            let reading_object;
            let mode;
            let local_text;
            let position;
            let read_table;
            let get_char;
            let error;
            let handle_escape_char;
            let process_word;
            let registered_stop_char;
            let handler_stack;
            let handler;
            let c;
            let next_c;
            let depth;
            let stop;
            let read_block;
            output_structure=[];
            idx=-1;
            line_number=1;
            column_number=0;
            source_name=await (async function () {
                 if (check_true ((opts && opts["source_name"]))){
                      return (opts && opts["source_name"])
                } else {
                      return "anonymous"
                } 
            })();
            opts=(opts||new Object());
            len=(await (await Environment.get_global("length"))(text)-1);
            debugmode=await async function(){
                if (check_true((opts && opts["verbose"]))) {
                     return true
                } else if (check_true( ((opts && opts["verbose"])===false))) {
                     return false
                } else if (check_true( ((await Environment.get_global("__VERBOSITY__"))>6))) {
                     return true
                } else  {
                     return false
                }
            } ();
            in_buffer=(text).split("");
            in_code=0;
            in_quotes=1;
            in_long_text=2;
            in_comment=3;
            in_single_quote=4;
            reading_object=false;
            mode=in_code;
            local_text=async function() {
                let start;
                let end;
                start=await Math.max(0,(idx-10));
                end=await Math.min(await (await Environment.get_global("length"))(in_buffer),(idx+10));
                 return  (await (await Environment.get_global("slice"))(in_buffer,start,end)).join("")
            };
            position=async function(offset) {
                 return  ("line: "+line_number+" column: "+await (async function () {
                     if (check_true (offset)){
                          return (column_number+offset)
                    } else {
                          return column_number
                    } 
                })())
            };
            read_table=await (await Environment.get_global("add"))(new Object(),await (async function() {
                 if (check_true ((opts && opts["read_table_entries"]))){
                      return (opts && opts["read_table_entries"])
                } else {
                      return new Object()
                } 
            } )(),await ( async function(){
                let __obj__1=new Object();
                __obj__1["("]=[")",async function(block) {
                     return  block
                }];
                __obj__1["["]=["]",async function(block) {
                     return  block
                }];
                __obj__1["{"]=["}",async function(block) {
                    let obj;
                    let __idx__2= async function(){
                        return -1
                    };
                    let key_mode;
                    let need_colon;
                    let value_mode;
                    let key;
                    let value;
                    let cpos;
                    let state;
                    let block_length;
                    {
                        obj=new Object();
                        let idx=await __idx__2();
                        ;
                        key_mode=0;
                        need_colon=1;
                        value_mode=2;
                        key=null;
                        value=null;
                        cpos=null;
                        state=key_mode;
                        block_length=(await (await Environment.get_global("length"))(block)-1);
                        reading_object=false;
                        await (async function(){
                             let __test_condition__3=async function() {
                                 return  (idx<block_length)
                            };
                            let __body_ref__4=async function() {
                                (idx=idx+1);
                                key=block[idx];
                                if (check_true (((key instanceof Array)&&((key && key.length)===2)&&((key && key["0"])==="=:quotem")&&((key && key["1"]) instanceof String || typeof (key && key["1"])==='string')))){
                                     key=(key && key["1"])
                                };
                                if (check_true (((key instanceof String || typeof key==='string')&&await (await Environment.get_global("starts_with?"))("=:",key)&&(await (await Environment.get_global("length"))(key)>2)))){
                                     key=await key["substr"].call(key,2)
                                };
                                 return  await async function(){
                                    if (check_true( await (await Environment.get_global("blank?"))(key))) {
                                         return await error("missing object key",("blank or nil key: "+block[idx]))
                                    } else if (check_true( await (await Environment.get_global("is_number?"))(key))) {
                                        (idx=idx+1);
                                         return  await async function(){
                                            obj[key]=block[idx];
                                            return obj;
                                            
                                        }()
                                    } else if (check_true( ((key instanceof String || typeof key==='string')&&await (await Environment.get_global("contains?"))(":",key)&&await (await Environment.get_global("not"))(await (await Environment.get_global("ends_with?"))(":",key))))) {
                                        cpos=await key["indexOf"].call(key,":");
                                        value=await key["substr"].call(key,(cpos+1));
                                        key=await key["substr"].call(key,0,cpos);
                                        value=await process_word((value).split(""),0);
                                         return  await async function(){
                                            obj[key]=value;
                                            return obj;
                                            
                                        }()
                                    } else  {
                                        (idx=idx+1);
                                        if (check_true (await (await Environment.get_global("ends_with?"))(":",key))){
                                             key=await (await Environment.get_global("chop"))(key)
                                        } else {
                                            if (check_true ((block[idx]===":"))){
                                                 (idx=idx+1)
                                            } else {
                                                 await error("missing colon",("expected colon for: "+key))
                                            }
                                        };
                                         return  await async function(){
                                            obj[key]=block[idx];
                                            return obj;
                                            
                                        }()
                                    }
                                } ()
                            };
                            let __BREAK__FLAG__=false;
                            while(await __test_condition__3()) {
                                await __body_ref__4();
                                 if(__BREAK__FLAG__) {
                                     break;
                                    
                                }
                            } ;
                            
                        })();
                         return  obj
                    }
                },async function() {
                     return  reading_object=true
                }];
                __obj__1["\""]=["\"",async function(block) {
                     return  ["quotes",block]
                }];
                return __obj__1;
                
            })());
            get_char=async function(pos) {
                 return  in_buffer[pos]
            };
            error=async function(type,message,offset) {
                throw new LispSyntaxError({
                    message:message,position:await position(offset),pos:{
                        line:line_number,column:(column_number+(offset||0))
                    },depth:depth,local_text:await local_text(),source_name:source_name,type:type
                });
                
            };
            handle_escape_char=async function(c) {
                let ccode;
                ccode=await c["charCodeAt"].call(c,0);
                 return  await async function(){
                    if (check_true( (ccode===34))) {
                         return c
                    } else if (check_true( (ccode===92))) {
                         return c
                    } else if (check_true( (c==="t"))) {
                         return await String.fromCharCode(9)
                    } else if (check_true( (c==="n"))) {
                         return await String.fromCharCode(10)
                    } else if (check_true( (c==="r"))) {
                         return await String.fromCharCode(13)
                    } else if (check_true( (c==="f"))) {
                         return c
                    } else if (check_true( (c==="b"))) {
                         return c
                    } else  {
                         return c
                    }
                } ()
            };
            process_word=async function(word_acc,backtick_mode) {
                let word;
                let word_as_number;
                word=(word_acc).join("");
                word_as_number=await Number(word);
                if (check_true (debugmode)){
                     console.log("process_word: ",word,word_as_number,backtick_mode)
                };
                 return  await async function(){
                    if (check_true( ("true"===word))) {
                         return true
                    } else if (check_true( ("false"===word))) {
                         return false
                    } else if (check_true( (":"===word))) {
                         return word
                    } else if (check_true( (",@"===word))) {
                         return "=$,@"
                    } else if (check_true( ((",#"===word)||("##"===word)))) {
                         return "=:##"
                    } else if (check_true( ("=$,@"===word))) {
                         return "=$,@"
                    } else if (check_true( ("=:##"===word))) {
                         return "=:##"
                    } else if (check_true( await isNaN(word_as_number))) {
                         return  await async function(){
                            if (check_true( (word==="=:"))) {
                                 return  "=:"
                            } else if (check_true( ((backtick_mode===0)&&await (await Environment.get_global("ends_with?"))(")",word)))) {
                                 return await error("trailing character","unexpected trailing parenthesis")
                            } else if (check_true( ((backtick_mode===0)&&await (await Environment.get_global("ends_with?"))("]",word)))) {
                                 return await error("trailing character","unexpected trailing bracket")
                            } else if (check_true( await (await Environment.get_global("contains?"))(word,["=:(","=:)","=:'"]))) {
                                 return  word
                            } else if (check_true( (backtick_mode===1))) {
                                 return word
                            } else  {
                                 return await (await Environment.get_global("add"))("=:",word)
                            }
                        } ()
                    } else if (check_true( await (await Environment.get_global("is_number?"))(word_as_number))) {
                         return word_as_number
                    } else  {
                        console.log("reader: ",await position()," what is this?",word,word_acc,await local_text());
                         return  word
                    }
                } ()
            };
            registered_stop_char=null;
            handler_stack=[];
            handler=null;
            c=null;
            next_c=null;
            depth=0;
            stop=false;
            read_block=async function(_depth,_prefix_op) {
                let acc;
                let word_acc;
                let backtick_mode;
                let escape_mode;
                let last_c;
                let block_return;
                acc=[];
                word_acc=[];
                backtick_mode=0;
                escape_mode=0;
                last_c=null;
                block_return=null;
                if (check_true (_prefix_op)){
                     (acc).push(_prefix_op)
                };
                depth=_depth;
                await (async function(){
                     let __test_condition__8=async function() {
                         return  (await (await Environment.get_global("not"))(stop)&&(idx<len))
                    };
                    let __body_ref__9=async function() {
                        idx+=1;
                        escape_mode=await Math.max(0,(escape_mode-1));
                        c=await get_char(idx);
                        next_c=await get_char((idx+1));
                        if (check_true ((c==="\n"))){
                            line_number+=1;
                             column_number=0
                        };
                        if (check_true (debugmode)){
                             await console.log(_depth,"C->",c,next_c,mode,escape_mode,await clone(acc),await clone(word_acc),(handler_stack && handler_stack.length))
                        };
                        await async function(){
                            if (check_true( ((next_c===undefined)&&await (await Environment.get_global("not"))((await (async function(){
                                let __targ__10=await (await Environment.get_global("last"))(handler_stack);
                                if (__targ__10){
                                     return(__targ__10)[0]
                                } 
                            })()===undefined))&&(await (await Environment.get_global("not"))((c===await (async function(){
                                let __targ__11=await (await Environment.get_global("last"))(handler_stack);
                                if (__targ__11){
                                     return(__targ__11)[0]
                                } 
                            })()))||((handler_stack && handler_stack.length)>1))))) {
                                 return await error("premature end",("premature end: expected: "+await (async function(){
                                    let __targ__12=await (await Environment.get_global("last"))(handler_stack);
                                    if (__targ__12){
                                         return(__targ__12)[0]
                                    } 
                                })()))
                            } else if (check_true( ((next_c===undefined)&&(mode===in_quotes)&&await (await Environment.get_global("not"))((await c["charCodeAt"]()===34))))) {
                                 return await error("premature end","premature end: expected: \"")
                            } else if (check_true( ((next_c===undefined)&&(mode===in_long_text)&&await (await Environment.get_global("not"))((c==="|"))))) {
                                 return await error("premature end","premature end: expected: |")
                            } else if (check_true( ((mode===in_code)&&(_depth===1)&&(next_c===")")&&(c===")")))) {
                                 return  await error("trailing character","unexpected trailing parenthesis")
                            }
                        } ();
                        await async function(){
                            if (check_true( ((c==="\n")&&(mode===in_comment)))) {
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((92===await c["charCodeAt"].call(c,0))&&(mode===in_long_text)))) {
                                (word_acc).push(c);
                                 return  (word_acc).push(c)
                            } else if (check_true( ((mode>0)&&(escape_mode===1)&&(92===await c["charCodeAt"].call(c,0))))) {
                                 return  (word_acc).push(c)
                            } else if (check_true( ((mode>0)&&(92===await c["charCodeAt"].call(c,0))))) {
                                 return  escape_mode=2
                            } else if (check_true( ((mode>0)&&(escape_mode===1)))) {
                                 return  (word_acc).push(await handle_escape_char(c))
                            } else if (check_true( ((mode===in_long_text)&&(escape_mode===0)&&(c==="|")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_quotes)&&(escape_mode===0)&&(c==="\"")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_single_quote)&&(escape_mode===0)&&(c==="'")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((c==="|")&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_long_text;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                    block_return=["=:quotem",block_return];
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( ((c==="\"")&&(escape_mode===0)&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_quotes;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( ((c==="'")&&(escape_mode===0)&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_single_quote;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( (mode===in_comment))) {
                                 return false
                            } else if (check_true( ((c===";")&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_comment;
                                 return  await read_block(await (await Environment.get_global("add"))(_depth,1))
                            } else if (check_true( ((mode===in_code)&&(await (await Environment.get_global("length"))(handler_stack)>0)&&(c===await (async function(){
                                let __targ__13=await (await Environment.get_global("last"))(handler_stack);
                                if (__targ__13){
                                     return(__targ__13)[0]
                                } 
                            })())))) {
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_code)&&read_table[c]&&await (await Environment.get_global("first"))(read_table[c])))) {
                                if (check_true (await (async function(){
                                    let __targ__14=read_table[c];
                                    if (__targ__14){
                                         return(__targ__14)[2]
                                    } 
                                })())){
                                    handler=await (async function(){
                                        let __targ__15=read_table[c];
                                        if (__targ__15){
                                             return(__targ__15)[2]
                                        } 
                                    })();
                                    await (async function(){
                                        let __array_op_rval__16=handler;
                                         if (__array_op_rval__16 instanceof Function){
                                            return await __array_op_rval__16() 
                                        } else {
                                            return[__array_op_rval__16]
                                        }
                                    })();
                                     handler=null
                                };
                                (handler_stack).push(read_table[c]);
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc,backtick_mode));
                                    backtick_mode=0;
                                     word_acc=[]
                                };
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                handler=await (async function(){
                                    let __targ__17=(handler_stack).pop();
                                    if (__targ__17){
                                         return(__targ__17)[1]
                                    } 
                                })();
                                block_return=await (async function(){
                                    let __array_op_rval__18=handler;
                                     if (__array_op_rval__18 instanceof Function){
                                        return await __array_op_rval__18(block_return) 
                                    } else {
                                        return[__array_op_rval__18,block_return]
                                    }
                                })();
                                if (check_true (await (await Environment.get_global("not"))((undefined===block_return)))){
                                    if (check_true ((backtick_mode===1))){
                                        block_return=["=:quotem",block_return];
                                         backtick_mode=0
                                    };
                                     return  (acc).push(block_return)
                                }
                            } else if (check_true( ((mode===in_code)&&(c==="`")))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                 return  backtick_mode=1
                            } else if (check_true( ((mode===in_code)&&(c===":")&&((word_acc && word_acc.length)===0)&&((acc && acc.length)>0)&&(await (await Environment.get_global("last"))(acc) instanceof String || typeof await (await Environment.get_global("last"))(acc)==='string')))) {
                                 return (acc).push(await (await Environment.get_global("add"))((acc).pop(),":"))
                            } else if (check_true( ((mode===in_code)&&(last_c===",")&&((c==="#")||(c==="@"))))) {
                                (word_acc).push(c);
                                (acc).push(await process_word(word_acc));
                                 return  word_acc=[]
                            } else if (check_true( ((mode===in_code)&&((c===" ")||(await c["charCodeAt"].call(c,0)===10)||(await c["charCodeAt"].call(c,0)===9)||((c===",")&&await (await Environment.get_global("not"))((next_c==="@"))&&await (await Environment.get_global("not"))((next_c==="#"))))))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    if (check_true ((backtick_mode===1))){
                                        (acc).push(await process_word(word_acc,backtick_mode));
                                         backtick_mode=0
                                    } else {
                                         (acc).push(await process_word(word_acc))
                                    };
                                     return  word_acc=[]
                                }
                            } else if (check_true( ((mode===in_code)&&(await c["charCodeAt"].call(c,0)===13)))) {
                                 return false
                            } else  {
                                 return  (word_acc).push(c)
                            }
                        } ();
                        column_number+=1;
                         return  last_c=c
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__8()) {
                        await __body_ref__9();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                if (check_true (((word_acc && word_acc.length)>0))){
                    (acc).push(await process_word(word_acc,backtick_mode));
                     word_acc=[]
                };
                 return  acc
            };
            if (check_true (debugmode)){
                 await console.log("read->",in_buffer)
            };
            output_structure=await read_block(0);
            if (check_true (debugmode)){
                 await console.log("read<-",await clone(output_structure))
            };
            if (check_true (((output_structure instanceof Array)&&(await (await Environment.get_global("length"))(output_structure)>1)))){
                (output_structure).unshift("=:iprogn");
                 return  await (await Environment.get_global("first"))(await (async function(){
                    let __array_op_rval__19=output_structure;
                     if (__array_op_rval__19 instanceof Function){
                        return await __array_op_rval__19() 
                    } else {
                        return[__array_op_rval__19]
                    }
                })())
            } else {
                  return await (await Environment.get_global("first"))(output_structure)
            }
        }
    } ()
};
let add_escape_encoding=async function(text) {        if (check_true ((text instanceof String || typeof text==='string'))){            let chars;            let acc;            chars=(text).split("");            acc=[];            await (async function() {                let __for_body__3=async function(c) {                     return  await async function(){                        if (check_true( ((await c["charCodeAt"].call(c,0)===34)))) {                            (acc).push(await String.fromCharCode(92));                             return  (acc).push(c)                        } else  {                             return (acc).push(c)                        }                    } ()                };                let __array__4=[],__elements__2=chars;                let __BREAK__FLAG__=false;                for(let __iter__1 in __elements__2) {                    __array__4.push(await __for_body__3(__elements__2[__iter__1]));                    if(__BREAK__FLAG__) {                         __array__4.pop();                        break;                                            }                }return __array__4;                             })();             return  (acc).join("")        } else {              return text        }    };
let do_deferred_splice=async function(tree) {    let rval;
    let idx;
    let tval;
    let deferred_operator;
    rval=null;
    idx=0;
    tval=null;
    deferred_operator=(["=","$","&","!"]).join("");
     return  await async function(){
        if (check_true( (tree instanceof Array))) {
            rval=[];
            await (async function(){
                 let __test_condition__15=async function() {
                     return  (idx<(tree && tree.length))
                };
                let __body_ref__16=async function() {
                    tval=tree[idx];
                    if (check_true ((tval===deferred_operator))){
                        idx+=1;
                        tval=tree[idx];
                         rval=await rval["concat"].call(rval,await do_deferred_splice(tval))
                    } else {
                         (rval).push(await do_deferred_splice(tval))
                    };
                     return  idx+=1
                };
                let __BREAK__FLAG__=false;
                while(await __test_condition__15()) {
                    await __body_ref__16();
                     if(__BREAK__FLAG__) {
                         break;
                        
                    }
                } ;
                
            })();
             return  rval
        } else if (check_true( (tree instanceof Object))) {
            rval=new Object();
            await (async function() {
                let __for_body__19=async function(pset) {
                     return  await async function(){
                        rval[(pset && pset["0"])]=await do_deferred_splice((pset && pset["1"]));
                        return rval;
                        
                    }()
                };
                let __array__20=[],__elements__18=await (await Environment.get_global("pairs"))(tree);
                let __BREAK__FLAG__=false;
                for(let __iter__17 in __elements__18) {
                    __array__20.push(await __for_body__19(__elements__18[__iter__17]));
                    if(__BREAK__FLAG__) {
                         __array__20.pop();
                        break;
                        
                    }
                }return __array__20;
                 
            })();
             return  rval
        } else  {
             return tree
        }
    } ()
};
let safe_access=async function(token,ctx,sanitizer_fn) {    let comps;
    let acc;
    let acc_full;
    let pos;
    let rval;
    comps=null;
    acc=[];
    acc_full=[];
    pos=null;
    rval=null;
    comps=((token && token.name)).split(".");
    if (check_true (((comps && comps.length)===1))){
          return (token && token.name)
    } else {
        await async function(){
            comps[0]=await (async function(){
                let __array_op_rval__226=sanitizer_fn;
                 if (__array_op_rval__226 instanceof Function){
                    return await __array_op_rval__226((comps && comps["0"])) 
                } else {
                    return[__array_op_rval__226,(comps && comps["0"])]
                }
            })();
            return comps;
            
        }();
        await (async function(){
             let __test_condition__227=async function() {
                 return  ((comps && comps.length)>0)
            };
            let __body_ref__228=async function() {
                (acc).push((comps).shift());
                 return  (acc_full).push(await (await Environment.get_global("expand_dot_accessor"))((acc).join("."),ctx))
            };
            let __BREAK__FLAG__=false;
            while(await __test_condition__227()) {
                await __body_ref__228();
                 if(__BREAK__FLAG__) {
                     break;
                    
                }
            } ;
            
        })();
        rval=await (await Environment.get_global("flatten"))(["(",(acc_full).join(" && "),")"]);
         return  rval
    }
};
;
let as_lisp=lisp_writer;
;
let read_lisp=reader;
;
await async function(){
    Environment.global_ctx.scope["eval"]=eval_exp;
    Environment.global_ctx.scope["reader"]=reader;
    Environment.global_ctx.scope["add_escape_encoding"]=add_escape_encoding;
    Environment.global_ctx.scope["get_outside_global"]=get_outside_global;
    Environment.global_ctx.scope["as_lisp"]=lisp_writer;
    Environment.global_ctx.scope["lisp_writer"]=lisp_writer;
    Environment.global_ctx.scope["clone_to_new"]=clone_to_new;
    Environment.global_ctx.scope["save_env"]=save_env;
    Environment.global_ctx.scope["null"]=null;
    return Environment.global_ctx.scope;
    
}();
let inlines=await (async function () {
     if (check_true (parent_environment)){
          return await add(new Object(),parent_environment.inlines,await (async function() {
             if (check_true (opts.inlines)){
                  return opts.inlines
            } else {
                  return new Object()
            } 
        } )())
    } else {
          return await add(new Object(),await (async function() {
             if (check_true (opts.inlines)){
                  return opts.inlines
            } else {
                  return new Object()
            } 
        } )(),await ( async function(){
            let __obj__245=new Object();
            __obj__245["pop"]=async function(args) {
                 return  ["(",args['0'],")",".","pop()"]
            };
            __obj__245["push"]=async function(args) {
                 return  ["(",args['0'],")",".push","(",args['1'],")"]
            };
            __obj__245["chomp"]=async function(args) {
                 return  ["(",args['0'],")",".substr","(",0,",","(",args['0'],".length","-",1,")",")"]
            };
            __obj__245["join"]=async function(args) {
                if (check_true ((args.length===1))){
                      return ["(",args['0'],")",".join","('')"]
                } else {
                      return ["(",args['1'],")",".join","(",args['0'],")"]
                }
            };
            __obj__245["take"]=async function(args) {
                 return  ["(",args['0'],")",".shift","()"]
            };
            __obj__245["prepend"]=async function(args) {
                 return  ["(",args['0'],")",".unshift","(",args['1'],")"]
            };
            __obj__245["trim"]=async function(args) {
                 return  ["(",args['0'],")",".trim()"]
            };
            __obj__245["lowercase"]=async function(args) {
                 return  ["(",args['0'],")",".toLowerCase()"]
            };
            __obj__245["uppercase"]=async function(args) {
                 return  ["(",args['0'],")",".toUpperCase()"]
            };
            __obj__245["islice"]=async function(args) {
                 return  await async function(){
                    if (check_true( (args.length===3))) {
                         return ["(",args['0'],")",".slice(",args['1'],",",args['2'],")"]
                    } else if (check_true( (args.length===2))) {
                         return ["(",args['0'],")",".slice(",args['1'],")"]
                    } else  {
                         throw new SyntaxError("slice requires 2 or 3 arguments");
                        
                    }
                } ()
            };
            __obj__245["split_by"]=async function(args) {
                 return  ["(",args['1'],")",".split","(",args['0'],")"]
            };
            __obj__245["bindf"]=async function(args) {
                 return  await (async function(){
                    let __array_op_rval__246=args['0'];
                     if (__array_op_rval__246 instanceof Function){
                        return await __array_op_rval__246(".bind(",args['1'],")") 
                    } else {
                        return[__array_op_rval__246,".bind(",args['1'],")"]
                    }
                })()
            };
            __obj__245["is_array?"]=async function(args) {
                 return  ["(",args['0']," instanceof Array",")"]
            };
            __obj__245["is_object?"]=async function(args) {
                 return  ["(",args['0']," instanceof Object",")"]
            };
            __obj__245["is_string?"]=async function(args) {
                 return  ["(",args['0']," instanceof String || typeof ",args['0'],"===","'string'",")"]
            };
            __obj__245["is_function?"]=async function(args) {
                 return  await (async function(){
                    let __array_op_rval__247=args['0'];
                     if (__array_op_rval__247 instanceof Function){
                        return await __array_op_rval__247(" instanceof Function") 
                    } else {
                        return[__array_op_rval__247," instanceof Function"]
                    }
                })()
            };
            __obj__245["is_element?"]=async function(args) {
                 return  await (async function(){
                    let __array_op_rval__248=args['0'];
                     if (__array_op_rval__248 instanceof Function){
                        return await __array_op_rval__248(" instanceof Element") 
                    } else {
                        return[__array_op_rval__248," instanceof Element"]
                    }
                })()
            };
            __obj__245["log"]=async function(args) {
                 return  ["console.log","(",await map(async function(val,idx,tl) {
                    if (check_true ((idx<(tl-1)))){
                          return await (async function(){
                            let __array_op_rval__249=val;
                             if (__array_op_rval__249 instanceof Function){
                                return await __array_op_rval__249(",") 
                            } else {
                                return[__array_op_rval__249,","]
                            }
                        })()
                    } else {
                          return await (async function(){
                            let __array_op_rval__250=val;
                             if (__array_op_rval__250 instanceof Function){
                                return await __array_op_rval__250() 
                            } else {
                                return[__array_op_rval__250]
                            }
                        })()
                    }
                },args),")"]
            };
            __obj__245["reverse"]=async function(args) {
                 return  ["(",args['0'],")",".slice(0).reverse()"]
            };
            __obj__245["int"]=async function(args) {
                 return  await async function(){
                    if (check_true( (args.length===1))) {
                         return ["parseInt(",args['0'],")"]
                    } else if (check_true( (args.length===2))) {
                         return ["parseInt(",args['0'],",",args['1'],")"]
                    } else  {
                         throw new "SyntaxError"(("invalid number of arguments to int: received "+args.length));
                        
                    }
                } ()
            };
            __obj__245["float"]=async function(args) {
                 return  ["parseFloat(",args['0'],")"]
            };
            return __obj__245;
            
        })())
    } 
})();
;
await async function(){
    Environment["eval"]=eval_struct;
    Environment["identify"]=subtype;
    Environment["meta_for_symbol"]=meta_for_symbol;
    Environment["set_compiler"]=set_compiler;
    Environment["read_lisp"]=reader;
    Environment["as_lisp"]=as_lisp;
    Environment["inlines"]=inlines;
    Environment["clone_to_new"]=clone_to_new;
    Environment["export_symbol_set"]=export_symbol_set;
    Environment["save_env"]=save_env;
    Environment["special_operators"]=special_operators;
    Environment["definitions"]=Environment.definitions;
    Environment["declarations"]=Environment.declarations;
    Environment["compile"]=compile;
    Environment["evaluate"]=evaluate;
    Environment["evaluate_local"]=evaluate_local;
    Environment["do_deferred_splice"]=do_deferred_splice;
    Environment["id"]=async function() {
         return  id
    };
    Environment["set_check_external_env"]=async function(state) {
        check_external_env_default=state;
         return  check_external_env_default
    };
    Environment["check_external_env"]=async function() {
         return  check_external_env_default
    };
    return Environment;
    
}();
let init=Environment.global_ctx.scope["*initializer*"];
;
if (check_true ((opts.default_namespace&&await not((compiler===unset_compiler))&&children[opts.default_namespace]))){
     await (await get_global("set_namespace"))(opts.default_namespace)
};
if (check_true (init)){
     Environment.eval(await async function(){
        return init
    }())
};
 return  Environment
}
};
return globalThis;

}();
 return  globalThis[symname]
}
}
}
}
await init_dlisp();
let env = await dlisp_env({"default_namespace":"user"});