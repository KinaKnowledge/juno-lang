// Source: undefined  
import * as readline_mod_module from 'https://deno.land/x/readline/mod.ts'
export const readline_mod=readline_mod_module;
import * as streams_module from 'https://deno.land/std/streams/conversion.ts'
export const streams=streams_module;
import * as path_module from 'https://deno.land/std@0.110.0/path/mod.ts'
export const path=path_module;


// Build Time: 2022-10-20 12:02:20
// Version: 2022.10.20.12.02
export const DLISP_ENV_VERSION='2022.10.20.12.02';




function check_true(val) {
  return val||0===val
}
function get_next_environment_id() {
    globalThis.dlisp_environment_count++;
    return globalThis.dlisp_environment_count;
}
function get_outside_global(refname) {  try {    let tfn = new Function("{ if (typeof " + refname + " === 'undefined') { return undefined } else { return "+refname+" } }");    return tfn();  } catch (ex) {    return undefined;  }}
function subtype(value) {  if (value === null) return "null";
  else if (value === undefined) return "undefined";
  else if (value instanceof Array) return "array";
  else if (value.constructor && value.constructor!=null && value.constructor.name!=='Object') {
    return value.constructor.name;
  }
  return typeof value;
}
function lisp_writer(obj,depth,max_depth) {
  if (depth===undefined) depth=0;
  if (max_depth===undefined) max_depth=1502;
  const bracketStyles=['(',')','(',')','{','}'];
  let bracketStyle=0;
  let text='';
  let type = subtype(obj);
  //if (depth === 0) console.log("lisp_writer:->",obj);
  if (type === undefined) {
    type = "UNKNOWN"
  }
  if (max_depth && (depth > max_depth)) {
    return "...";
  }
  if (depth > 500) {
    console.warn("lisp_writer: depth bomb: object: ",type);
    throw new Error("recursion too deep");
  }
 
  if (obj===undefined) return 'undefined';
  if (obj===null) return 'null';
  if (typeof obj==='number') return obj;
  if (typeof obj==='function') {
    //if (depth === 0) console.log("lisp_writer: <- [ function ]",obj.toString());
    //if (obj.name) { return obj.name }    
    return "(javascript "+JSON.stringify(obj.toString())+")";
  } // technically this shouldn't be a JSON object but this is a convenience for us..
  if (obj instanceof Array) {
    if (obj.length > 0 && obj[0] instanceof String && obj[0].startsWith("=:")) {
      bracketStyle = 2;
    }
    text += bracketStyles[bracketStyle];
    // determine if we have any objects or arrays in the list
    for (let i in obj) {
      if (i > 0) text += ' ';
      
      text += lisp_writer(obj[i],depth+4,max_depth);
    }
    text += bracketStyles[bracketStyle+1];
    //if (depth === 0) console.log("lisp_writer: <- [ array ]",text);
    return text;
  } else if (typeof obj ==='object') {
    // object {}
    if (obj.constructor && obj.constructor.name !== "Object") {
      if (typeof Element != 'undefined') {
        if (obj instanceof Element) {
          let clist = Array.from(obj.classList).join(" ");
          if (obj.id) {
            return obj.constructor.name+"/"+obj.tagName.toLowerCase()+"#"+obj.id;
          } else {
            return obj.constructor.name+"/"+obj.tagName.toLowerCase()+"."+clist;
          }
        } else {
          return "" + obj.constructor.name + "";
        }
      } else {
        return "" + obj.constructor.name + "";
      }
    }
    bracketStyle=4;
    text+=bracketStyles[bracketStyle];
    let keys = Object.keys(obj);
    for (let i in keys) {
      if (i > 0) text+= ' ';
      if (typeof obj[keys[i]]=="symbol") {
	text+=lisp_writer(keys[i],depth+4)+": \"<symbol>\"";
      } else {
	text+=lisp_writer(keys[i],depth+4)+":"+lisp_writer(obj[keys[i]],depth+4, max_depth)
      }
    }
    text += bracketStyles[bracketStyle+1];
    //if (depth === 0) console.log("lisp_writer: <- [ object ]",text);
    return text;
  } else if (typeof obj === 'string') {
    // string    
    if (obj==="=:") return obj;
    else if (obj==="=:##") return ",#";
    else if (obj==="=$,@") return "=$,@";
    else if (obj.startsWith("=:")) return obj.substr(2);
    
    obj = obj.replaceAll("\"","\\\"");        
    obj = obj.replaceAll("'","\\'");        
    obj = obj.replaceAll("\n",'\\n');
    obj = obj.replaceAll("\r",'\\r');
    obj = obj.replaceAll("\f",'\\f');
    obj = obj.replaceAll("\b",'\\b');			         
    //obj = JSON.stringify(obj);  // encode with JSON semantics
    
    //if (depth == 0) console.log("lisp_writer: <-",'"'+obj+'"');
    
    return '"'+obj+'"';
    
    
  } else {
    //if (depth === 0) console.log("lisp_writer: <- [ other ]",obj);
    return obj; // numbers and booleans
  }
}
function clone(src,depth) {
        if (src===null) {
            return null;
        }
        depth = depth || 0;
        if (depth >= 500) {
          throw new EvalError("too deep");
        }
        if (src===undefined) {
            return undefined;
        } else if (src === null) {
	    return null;
	} else if (src instanceof Function ) {
            return src; 
        } else if (src==this) {
          return this;	
        } else if (src.constructor===String) {	  
	  return src.toString();
	} else if (src.constructor===Number) {
	  return src;
	} else if (src.constructor===Boolean) {
	  return src;
	} else if ((src.constructor===Array)||(src.constructor===Object)) {
	  let obj;
	  if (src.constructor===Array) {
	    obj=[];
	  } else {
	    obj={}
	  }
          for (let idx in src) {
	    obj[idx]=clone(src[idx],depth+1);
	  }
	  return obj;
	} else {
	  return src;
	}
}
class LispSyntaxError extends SyntaxError {
  constructor(json_structure) {
    super(JSON.stringify(json_structure));
    this.name = 'LispSyntaxError';
  }
}


if (typeof AsyncFunction === "undefined") {
  globalThis.AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;
}
export async function init_dlisp(Environment)  {
{
    await async function(){
        globalThis["subtype"]=subtype;
        globalThis["check_true"]=check_true;
        globalThis["clone"]=clone;
        globalThis["lisp_writer"]=lisp_writer;
        globalThis["LispSyntaxError"]=LispSyntaxError;
        return globalThis;
        
    }();
    if (check_true (("undefined"===typeof dlisp_environment_count))){
        await async function(){
            globalThis["dlisp_environment_count"]=0;
            return globalThis;
            
        }()
    };
    {
        let symname;
        symname=await (async function(){
             return "dlisp_env" 
        })();
        {
            await async function(){
                globalThis[symname]=async function(opts) {
                    let subtype=function subtype(value) {  if (value === null) return "null";
  else if (value === undefined) return "undefined";
  else if (value instanceof Array) return "array";
  else if (value.constructor && value.constructor!=null && value.constructor.name!=='Object') {
    return value.constructor.name;
  }
  return typeof value;
};
                    let get_object_path=function(refname) {        if (check_true ((( refname["indexOf"].call(refname,".")>-1)|| ( refname["indexOf"].call(refname,"[")>-1)))){
            {
                let chars;
                let comps;
                let mode;
                let name_acc;
                chars=(refname).split("");
                comps=[];
                mode=0;
                name_acc=[];
                 ( function() {
                    let __for_body__12=function(c) {
                        return   (function(){
                            if (check_true (((c===".")&& (mode===0)))) {
                                {
                                    if (check_true (((name_acc && name_acc.length)>0))){
                                        {
                                            (comps).push((name_acc).join(""))
                                        }
                                    };
                                    return name_acc=[]
                                }
                            } else if (check_true (((mode===0)&& (c==="[")))) {
                                {
                                    mode=1;
                                    if (check_true (((name_acc && name_acc.length)>0))){
                                        {
                                            (comps).push((name_acc).join(""))
                                        }
                                    };
                                    return name_acc=[]
                                }
                            } else if (check_true (((mode===1)&& (c==="]")))) {
                                {
                                    mode=0;
                                    (comps).push((name_acc).join(""));
                                    return name_acc=[]
                                }
                            } else {
                                return (name_acc).push(c)
                            }
                        } )()
                    };
                    let __array__13=[],__elements__11=chars;
                    let __BREAK__FLAG__=false;
                    for(let __iter__10 in __elements__11) {
                        __array__13.push( __for_body__12(__elements__11[__iter__10]));
                        if(__BREAK__FLAG__) {
                             __array__13.pop();
                            break;
                            
                        }
                    }return __array__13;
                     
                })();
                if (check_true (((name_acc && name_acc.length)>0))){
                    (comps).push((name_acc).join(""))
                };
                return comps
            }
        } else {
            return  ( function(){
                let __array_op_rval__14=refname;
                 if (__array_op_rval__14 instanceof Function){
                    return  __array_op_rval__14() 
                } else {
                    return [__array_op_rval__14]
                }
            })()
        }
    };
                    let get_outside_global=function get_outside_global(refname) {  try {    let tfn = new Function("{ if (typeof " + refname + " === 'undefined') { return undefined } else { return "+refname+" } }");    return tfn();  } catch (ex) {    return undefined;  }};
                    ;
                    opts=await (async function(){
                        if (check_true ((opts===undefined))){
                            return new Object()
                        } else {
                            return opts
                        }
                    })();
                    let namespace=(opts.namespace|| "core");
                    ;
                    let in_boot=true;
                    ;
                    let pending_loads=new Object();
                    ;
                    let parent_environment=await (async function(){
                        if (check_true ((namespace==="core"))){
                            return null
                        } else {
                            return opts.parent_environment
                        }
                    })();
                    ;
                    let active_namespace=namespace;
                    ;
                    let contained=(opts.contained|| false);
                    ;
                    let Environment={
                        global_ctx:{
                            scope:new Object(),name:namespace
                        },build_version:DLISP_ENV_VERSION,definitions:(opts.definitions|| new Object()),declarations:(opts.declarations|| {
                            safety:{
                                level:2
                            }
                        })
                    };
                    ;
                    if (check_true (("undefined"===typeof Element))){
                        await async function(){
                            globalThis["Element"]=function() {
                                return false
                            };
                            return globalThis;
                            
                        }()
                    };
                    let id=await (async function(){
                        let __array_op_rval__5=get_next_environment_id;
                         if (__array_op_rval__5 instanceof Function){
                            return await __array_op_rval__5() 
                        } else {
                            return [__array_op_rval__5]
                        }
                    })();
                    ;
                    await async function(){
                        Environment["context"]=Environment.global_ctx;
                        return Environment;
                        
                    }();
                    let unset_compiler=async function() {
                        throw new EvalError(("compiler must be set for "+ namespace));
                        
                    };
                    ;
                    let compiler=unset_compiler;
                    ;
                    let compiler_operators=new Set();
                    ;
                    let special_identity=async function(v) {
                        return v
                    };
                    ;
                    let MAX_SAFE_INTEGER=9007199254740991;
                    ;
                    await async function(){
                        Environment.global_ctx.scope["MAX_SAFE_INTEGER"]=MAX_SAFE_INTEGER;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["MAX_SAFE_INTEGER"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let LispSyntaxError=globalThis.LispSyntaxError;
                    ;
                    await async function(){
                        Environment.global_ctx.scope["LispSyntaxError"]=LispSyntaxError;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["LispSyntaxError"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let sub_type=subtype;
                    ;
                    await async function(){
                        Environment.global_ctx.scope["sub_type"]=sub_type;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["sub_type"]={
                            core_lang:true,description:"Returns a string the determined actual type of the provided value.",usage:["value:*"],tags:["type","class","prototype","typeof","instanceof"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let __VERBOSITY__=0;
                    ;
                    await async function(){
                        Environment.global_ctx.scope["__VERBOSITY__"]=__VERBOSITY__;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["__VERBOSITY__"]={
                            core_lang:true,description:"Set __VERBOSITY__ to a positive integer for verbose console output of system activity.",tags:["debug","compiler","environment","global"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let int=parseInt;
                    ;
                    await async function(){
                        Environment.global_ctx.scope["int"]=int;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["int"]={
                            core_lang:true,usage:"value:string|number",description:"Convenience method for parseInt, should be used in map vs. directly calling parseInt, which will not work directly",tags:["conversion","number"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let float=parseFloat;
                    ;
                    await async function(){
                        Environment.global_ctx.scope["float"]=float;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["float"]={
                            core_lang:true,usage:"value:string|number",description:"Convenience method for parseFloat, should be used in map vs. directly calling parseFloat, which will not work directly",tags:["conversion","number"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let values=new Function("...args","{\n                                let acc = [];\n                                for (let _i in args) {\n                                    let value = args[_i];\n                                    let type = subtype(value);\n                                    if (value instanceof Set)  {\n                                        acc = acc.concat(Array.from(value));\n                                    } else if (type==='array') {\n                                        acc = acc.concat(value);\n                                    } else if (type==='object') {\n                                        acc = acc.concat(Object.values(value))\n                                    } else {\n                                        acc = acc.concat(value);\n                                    }\n                                }\n                                return acc;\n                            }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["values"]=values;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["values"]={
                            core_lang:true,description:("Given a container, returns a list containing the values of each supplied argument. Note that for objects, only the values are returned, not the keys. "+ "If given multiple values, the returned value is a concatentation of all containers provided in the arguments."),usage:["arg0:*","argn:*"],tags:["array","container","object","keys","elements"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let pairs=new Function("obj","{\n                                    if (subtype(obj)==='array') {\n                                        let rval = [];\n                                        for (let i = 0; i < obj.length; i+=2) {\n                                            rval.push([obj[i],obj[i+1]]);\n                                        }\n                                        return rval;\n                                    } else {\n                                        let keys = Object.keys(obj);\n                                        let rval = keys.reduce(function(acc,x,i) {\n                                            acc.push([x,obj[x]])\n                                            return acc;\n                                        },[]);\n                                        return rval;\n                                    }\n                                }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["pairs"]=pairs;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["pairs"]={
                            core_lang:true,description:"Given a passed object or array, returns a list containing a 2 element list for each key/value pair of the supplied object.",tags:["array","container","object"],usage:["obj:object"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let keys=new Function("obj","{  return Object.keys(obj);  }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["keys"]=keys;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["keys"]={
                            core_lang:true,description:"Given an object, returns the keys of the object.",tags:["object","values","keys","indexes","container"],usage:["obj:object"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let take=new Function("place","{ return place.shift() }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["take"]=take;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["take"]={
                            core_lang:true,description:"Takes the first value off the list, and returns the value.",tags:["array","container","mutate","first"],usage:["place:container"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let prepend=new Function("place","thing","{ return place.unshift(thing) }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["prepend"]=prepend;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["prepend"]={
                            core_lang:true,description:"Places the value argument onto the first of the list (unshift) and returns the list.",tags:["array","mutate","container"],usage:["place:array","thing:*"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let first=new Function("x","{ return x[0] }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["first"]=first;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["first"]={
                            core_lang:true,description:"Given an array, returns the first element in the array.",usage:["x:array"],tags:["array","container","elements"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let last=new Function("x","{ return x[x.length - 1] }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["last"]=last;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["last"]={
                            core_lang:true,description:"Given an array, returns the last element in the array.",usage:["x:array"],tags:["array","container","elements","end"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let length=new Function("obj","{\n                                if(obj instanceof Array) {\n                                    return obj.length;\n                                } else if (obj instanceof Set) {\n                                    return obj.size;\n                                } else if ((obj === undefined)||(obj===null)) {\n                                    return 0;\n                                } else if (typeof obj==='object') {\n                                    return Object.keys(obj).length;\n                                } else if (typeof obj==='string') {\n                                    return obj.length;\n                                } \n                                return 0;\n                            }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["length"]=length;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["length"]={
                            core_lang:true,description:("Returns the length of the supplied type (array, object, set, string, number). "+ "If the supplied value is nil or a non-container type, returns 0."),tags:["size","elements","container","dimension","array","set","string","number"],usage:["thing:container"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let conj=new Function("...args","{   let list = [];\n                                if (args[0] instanceof Array) {\n                                    list = args[0];\n                                } else {\n                                    list = [args[0]];\n                                }\n                                args.slice(1).map(function(x) {\n                                    list = list.concat(x);\n                                });\n                                return list;\n                            }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["conj"]=conj;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["conj"]={
                            core_lang:true,description:("Conjoins or concatenates things (typically arrays) together and returns an array. "+ "Examples:<br>"+ "(conj [ 1 2 ] [ 3 4 ]) => [ 1 2 3 4 ]<br>"+ "(conj [ 1 2 ] 3 4 ) => [ 1 2 3 4 ]<br>"+ "(conj 1 2 [ 3 4 ]) => [ 1 2 3 4 ]<br>"+ "(conj { `abc: 123 } [ 2 3]) => [ { abc: 123 }, 2, 3 ]<br>"+ "(conj [ 1 2 3 [ 4 ]] [ 5 6 [ 7 ]]) => [ 1 2 3 [ 4 ] 5 6 [ 7 ] ]"),tags:["elements","concat","array","conjoin","append"],usage:["arg0:*","argN:*"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let reverse=new Function("container","{ return container.slice(0).reverse }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["reverse"]=reverse;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["reverse"]={
                            core_lang:true,usage:["container:list"],description:"Returns a copy of the passed list as reversed.  The original is not changed.",tags:["list","sort","order"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let map=new AsyncFunction("lambda","array_values","{ try {\n                                        let rval = [],\n                                                tl = array_values.length;\n                                        for (let i = 0; i < array_values.length; i++) {\n                                            rval.push(await lambda.apply(this,[array_values[i], i, tl]));\n                                         }\n                                        return rval;\n                                    } catch (ex) {           \n                                              if (lambda === undefined || lambda === null) {\n                                                    throw new ReferenceError(\"map: lambda argument (position 0) is undefined or nil\")\n                                              } else if (array_values === undefined || array_values === null) {\n                                                    throw new ReferenceError(\"map: container argument (position 1) is undefined or nil\")\n                                              } else if (!(lambda instanceof Function)) {\n                                                    throw new ReferenceError(\"map: lambda argument must be a function: received: \"+ typeof lambda)\n                                              } else if (!(array_values instanceof Array)) {\n                                                    throw new ReferenceError(\"map: invalid array argument, received: \" + typeof array_values)\n                                              } else {\n                                                    // something else just pass on the error\n                                                throw ex;\n                                              }\n                                    }\n                              }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["map"]=map;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["map"]={
                            core_lang:true,description:("Provided a function as a first argument, map calls the function "+ "(item, current_index, total_length) with each element from the second argument, which should be a list. Returns a new list containing the return values resulting from evaluating."),tags:["array","container","elements","iteration"],usage:["lambda:function","elements:array"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let bind=new Function("func,this_arg","{ return func.bind(this_arg) }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["bind"]=bind;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["bind"]={
                            core_lang:true,description:"Given a function and a this value, the bind function returns a new function that has its this keyword set to the provided value in this_arg.",usage:["func:function","this_arg:*"],tags:["bind","this","function"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let to_object=new Function("array_values","{\n                                      let obj={}\n                                      array_values.forEach((pair)=>{\n                                             obj[pair[0]]=pair[1]\n                                      });\n                                      return obj;\n                                    }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["to_object"]=to_object;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["to_object"]={
                            core_lang:true,description:("Given an array of pairs in the form of [[key value] [key value] ...], constructs an "+ "object with the first array element of the pair as the key and the second "+ "element as the value. A single object is returned."),usage:["paired_array:array"],tags:["conversion","object","array","list","pairs"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let to_array=async function(container) {
                        return await async function(){
                            if (check_true ((container instanceof Array))) {
                                return container
                            } else if (check_true (await (await get_global("is_set?"))(container))) {
                                {
                                    let acc=[];
                                    ;
                                    await container["forEach"].call(container,async function(v) {
                                        return (acc).push(v)
                                    });
                                    return acc
                                }
                            } else if (check_true ((container instanceof String || typeof container==='string'))) {
                                return (container).split("")
                            } else if (check_true ((container instanceof Object))) {
                                return await pairs(container)
                            } else {
                                return await (async function(){
                                    let __array_op_rval__45=container;
                                     if (__array_op_rval__45 instanceof Function){
                                        return await __array_op_rval__45() 
                                    } else {
                                        return [__array_op_rval__45]
                                    }
                                })()
                            }
                        } ()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["to_array"]=to_array;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["to_array"]={
                            core_lang:true,description:("Given a container of type Array, Set, Object, or a string, "+ "it will convert the members of the container to an array form, "+ "and return a new array with the values of the provided container. "+ "In the case of an object, the keys and values will be contained in "+ "paired arrays in the returned array.  A string will be split into "+ "individual characters. If provided a different "+ "type other than the listed values above, the value will be placed "+ "in an array as a single element."),usage:["container:*"],tags:["array","conversion","set","object","string","pairs"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let slice=function(target,from,to) {
                        return   (function(){
                            if (check_true (to)) {
                                return  target["slice"].call(target,from,to)
                            } else if (check_true (from)) {
                                return  target["slice"].call(target,from)
                            } else {
                                throw new SyntaxError("slice requires 2 or 3 arguments");
                                
                            }
                        } )()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["slice"]=slice;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["slice"]={
                            core_lang:true,description:"Given an array, with a starting index and an optional ending index, slice returns a new array containing the elements in the range of provided indices.",usage:["target:array","from:number","to:number"],tags:["array","slicing","dimensions","subset"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let rest=function(x) {
                        return   (function(){
                            if (check_true ((x instanceof Array))) {
                                return  x["slice"].call(x,1)
                            } else if (check_true ((x instanceof String || typeof x==='string'))) {
                                return  x["substr"].call(x,1)
                            } else {
                                return null
                            }
                        } )()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["rest"]=rest;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["rest"]={
                            core_lang:true,description:"Returns a new array containing the elements in the 2nd through last position (the tail) of the provided array.",usage:["x:array"],tags:["array","subset","slice","tail","end"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let second=new Function("x","{ return x[1] }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["second"]=second;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["second"]={
                            core_lang:true,description:"Returns the second element in the provided array (the element at index 1)",tags:["array","subset","element","first"],usage:["x:array"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let third=new Function("x","{ return x[2] }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["third"]=third;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["third"]={
                            core_lang:true,description:"Returns the third element in the provided array (the element at index 2)",tags:["array","subset","element","first"],usage:["x:array"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let chop=new Function("x","{ if (x instanceof Array) { return x.slice(0, x.length-1) } else { return x.substr(0,x.length-1) } }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["chop"]=chop;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["chop"]={
                            core_lang:true,description:"Returns a new container containing all items except the last item.  This function takes either an array or a string.",usage:["container:array|string"],tags:["array","slice","subset","first","string"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let chomp=new Function("x","{ return x.substr(x.length-1) }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["chomp"]=chomp;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["chomp"]={
                            core_lang:true,description:"Given a string returns a new string containing all characters except the last character.",usage:["x:string"],tags:["slice","subset","string"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let not=new Function("x","{ if (check_true(x)) { return false } else { return true } }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["not"]=not;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["not"]={
                            core_lang:true,description:"Returns the logical opposite of the given value.  If given a truthy value, a false is returned.  If given a falsey value, true is returned.",usage:["x:*"],tags:["logic","not","inverse"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let push=new Function("place","thing","{ return place.push(thing) }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["push"]=push;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["push"]={
                            core_lang:true,description:"Given an array as a place, and an arbitrary value, appends (pushes) the value to the end of the array.",usage:["place:array","thing:*"],tags:["array","mutate","append","concat","pop"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let pop=new Function("place","{ return place.pop() }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["pop"]=pop;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["pop"]={
                            core_lang:true,description:"Given an array as an arguments, removes the last value from the given array and returns it.",usage:["place:array"],tags:["array","mutate","take","remove","push"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let list=async function(...args) {
                        return args
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["list"]=list;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["list"]={
                            core_lang:true,description:"Given a set of arbitrary arguments, returns an array containing the provided arguments. If no arguments are provided, returns an empty array.",usage:["arg0:*","argN:*"],tags:["array","container","elements"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let flatten=new Function("x","{ return x.flat(999999999999) } ");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["flatten"]=flatten;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["flatten"]={
                            core_lang:true,description:"Given a nested array structure, returns a flattened version of the array",usage:["x:array"],tags:["array","container","flat","tree"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let jslambda=function(...args) {
                        return  ( function(){
                            let __apply_args__70= flatten(args);
                            return ( Function).apply(this,__apply_args__70)
                        })()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["jslambda"]=jslambda;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["jslambda"]={
                            core_lang:true,description:("Proxy for Javascript Function.  Given a set of string based arguments, all but the last are considered arguments to the "+ "function to be defined.  The last argument is considered the body of the function and should be provided as a string of "+ "javascript. Returns a javascript function. <br>"+ "(jslambda (`a `b) \"{ return a+b }\")<br>"+ "(jslambda () \"{ return new Date() }\")"),usage:["argument_list:array","argn:string"],tags:["javascript","embed","function"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let join=function(...args) {
                        return   (function(){
                            if (check_true ((args.length===1))) {
                                return  args['0']["join"].call(args['0'],"")
                            } else {
                                return  args['1']["join"].call(args['1'],args['0'])
                            }
                        } )()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["join"]=join;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["join"]={
                            core_lang:true,description:("Given an optional joining string and an array of strings, returns a string containing the "+ "elements of the array interlaced with the optional joining string.<br>"+ "(join \",\" [ \"red\" \"fox\" ]) -> \"red,fox\"<br>"+ "(join [\"red\" \"fox\"]) -> redfox"),tags:["array","combine","split","string","text"],usage:["joining_string?:string","container:array"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let lowercase=function(x) {
                        return  x["toLowerCase"]()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["lowercase"]=lowercase;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["lowercase"]={
                            core_lang:true,description:"Given a string, converts all capital characters to lowercase characters.",tags:["string","text","uppercase","case","convert"],usage:["text:string"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let uppercase=function(x) {
                        return  x["toUpperCase"]()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["uppercase"]=uppercase;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["uppercase"]={
                            core_lang:true,description:"Given a string, converts all capital characters to uppercase characters.",tags:["string","text","lowercase","case","convert"],usage:["text:string"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let log=function(...args) {
                        return  ( function(){
                            return ( console.log).apply(this,args)
                        })()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["log"]=log;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["log"]={
                            core_lang:true,description:("log is a shorthand call for console.log by default, and serves to provide a base "+ "abstraction for logging.  Log behavior can be changed by redefining log to "+ "better suit the environmental context.  For example, writing log output to a file "+ "or HTML container."),usage:["args0:*","argsN:*"],tags:["logging","console","output"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let split=new Function("container","token","{ return container.split(token) }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["split"]=split;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["split"]={
                            core_lang:true,description:("Given a string to partition and a string for a splitting token, return an array whose elements "+ "are the text found between each splitting token. <br>"+ "(split \"red,fox\" \",\") => [ \"red\" \"fox\" ]"),tags:["partition","join","separate","string","array"],usage:["string_to_split:string","split_token:string"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let split_by=new Function("token","container","{ return container.split(token) }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["split_by"]=split_by;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["split_by"]={
                            core_lang:true,description:("Given a string for a splitting token and a string to partition, return an array whose elements "+ "are the text found between each splitting token. <br>"+ "(split_by \",\" \"red,fox\") => [ \"red\" \"fox\" ]"),tags:["partition","join","separate","string","array"],usage:["split_token:string","string_to_split:string"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_object_ques_=new Function("x","{ return x instanceof Object }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_object?"]=is_object_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_object?"]={
                            core_lang:true,description:"for the given value x, returns true if x is an Javascript object type.",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_array_ques_=new Function("x","{ return x instanceof Array }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_array?"]=is_array_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_array?"]={
                            core_lang:true,description:"for the given value x, returns true if x is an array.",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_number_ques_=function(x) {
                        return ( subtype(x)==="Number")
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_number?"]=is_number_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_number?"]={
                            core_lang:true,description:"for the given value x, returns true if x is a number.",usage:["arg:value"],tags:["type","condition","subtype","value","what","function"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_function_ques_=function(x) {
                        return (x instanceof Function)
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_function?"]=is_function_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_function?"]={
                            core_lang:true,description:"for the given value x, returns true if x is a function.",usage:["arg:value"],tags:["type","condition","subtype","value","what","function"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_set_ques_=new Function("x","{ return x instanceof Set }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_set?"]=is_set_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_set?"]={
                            core_lang:true,description:"for the given value x, returns true if x is a set.",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_element_ques_=new Function("x","{ return x instanceof Element }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_element?"]=is_element_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_element?"]={
                            core_lang:true,description:"for the given value x, returns true if x is an Element object",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_string_ques_=function(x) {
                        return ((x instanceof String)|| (typeof x==="string"))
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_string?"]=is_string_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_string?"]={
                            core_lang:true,description:"for the given value x, returns true if x is a String object",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_nil_ques_=function(x) {
                        return (x===null)
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_nil?"]=is_nil_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_nil?"]={
                            core_lang:true,description:"for the given value x, returns true if x is exactly equal to nil.",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_regex_ques_=function(x) {
                        return ( sub_type(x)==="RegExp")
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_regex?"]=is_regex_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_regex?"]={
                            core_lang:true,description:"for the given value x, returns true if x is a Javascript regex object",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_date_ques_=function(x) {
                        return ( sub_type(x)==="Date")
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_date?"]=is_date_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_date?"]={
                            core_lang:true,description:"for the given value x, returns true if x is a Date object.",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let ends_with_ques_=new Function("val","text","{ if (text instanceof Array) { return text[text.length-1]===val } else if (subtype(text)=='String') { return text.endsWith(val) } else { return false }}");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["ends_with?"]=ends_with_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["ends_with?"]={
                            core_lang:true,description:"for a given string or array, checks to see if it ends with the given start_value.  Non string args return false.",usage:["end_value:value","collection:array|string"],tags:["string","text","list","array","filter","reduce"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let starts_with_ques_=new Function("val","text","{ if (text instanceof Array) { return text[0]===val } else if (subtype(text)=='String') { return text.startsWith(val) } else { return false }}");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["starts_with?"]=starts_with_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["starts_with?"]={
                            core_lang:true,description:"for a given string or array, checks to see if it starts with the given start_value.  Non string args return false.",usage:["start_value:value","collection:array|string"],tags:["string","text","list","array","filter","reduce","begin"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let delete_prop=new Function("obj","...args","{\n                                        if (args.length == 1) {\n                                            return delete obj[args[0]];\n                                        } else {\n                                            while (args.length > 0) {\n                                                let prop = args.shift();\n                                                delete obj[prop];\n                                            }\n                                        }\n                                        return obj;\n                                    }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["delete_prop"]=delete_prop;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["delete_prop"]={
                            core_lang:true,description:("Removes the key or keys of the provided object, and returns the modified object.<br>Example:<br>"+ "(defglobal foo { abc: 123 def: 456 ghi: 789 })<br>"+ "(delete_prop foo `abc `def) => { ghi: 789 }<br>"),usage:["obj:objects","key0:string","keyN?:string"],tags:["delete","keys","object","remove","remove_prop","mutate"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let blank_ques_=function(val) {
                        return ((val==null)|| ((val instanceof String || typeof val==='string')&& (val==="")))
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["blank?"]=blank_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["blank?"]={
                            core_lang:true,description:"Given a value, if it is equal (via eq) to nil or to \"\" (an empty string), returns true, otherwise false.",usage:["val:*"],tags:["string","empty","text"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let contains_ques_=new Function("value","container","{ if (!value && !container) { return false }\n                           else if (container === null) { throw new TypeError(\"contains?: passed nil/undefined container value\"); }\n                           else if (container instanceof Array) return container.includes(value);\n                           else if (container instanceof Set) return container.has(value);\n                           else if ((container instanceof String) || typeof container === \"string\") {\n                                if (subtype(value) === \"Number\") return container.indexOf(\"\"+value)>-1;\n                                else return container.indexOf(value)>-1;\n                           }                                                      \n                           else throw new TypeError(\"contains?: passed invalid container type: \"+subtype(container)) }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["contains?"]=contains_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["contains?"]={
                            core_lang:true,description:("Given a target value and container value (array, set, or string), checks if the container has the value. "+ "If it is found, true is returned, otherwise false if returned.  "),tags:["string","array","set","has","includes","indexOf"],usage:["value:*","container:array|set|string"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let make_set=function(vals) {
                        if (check_true ((vals instanceof Array))){
                            return new Set(vals)
                        } else {
                            {
                                let vtype;
                                vtype= sub_type(vals);
                                return   (function(){
                                    if (check_true ((vtype==="Set"))) {
                                        return new Set(vals)
                                    } else if (check_true ((vtype==="object"))) {
                                        return new Set( values(vals))
                                    }
                                } )()
                            }
                        }
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["make_set"]=make_set;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["make_set"]={
                            core_lang:true,description:("If given an array, a new Set is returned containing the elements of the array. "+ "If given an object, a new Set is returned containing the values of the object, and the keys are discarded. "+ "If given a set, new Set is created and returend  from the values of the old set."),usage:["vals:array|object|set"],tags:["array","set","object","values","convert"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let meta_for_symbol=function(quoted_symbol,search_mode) {
                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){
                            {
                                let local_data=Environment.global_ctx.scope[quoted_symbol];
                                ;
                                let acc=[];
                                ;
                                if (check_true (search_mode)){
                                    {
                                        if (check_true (local_data)){
                                            {
                                                (acc).push( ( get_global("add"))({
                                                    namespace:namespace,name:quoted_symbol,type: subtype(local_data)
                                                }, ( function(){
                                                    let it;
                                                    it=Environment.definitions[quoted_symbol];
                                                    if (check_true (it)){
                                                        return it
                                                    } else {
                                                        return new Object()
                                                    }
                                                })()))
                                            }
                                        };
                                        if (check_true (parent_environment)){
                                            {
                                                {
                                                    let __collector;
                                                    let __result;
                                                    let __action;
                                                    __collector=[];
                                                    __result=null;
                                                    __action=function(info) {
                                                        return (acc).push(info)
                                                    };
                                                    ;
                                                     ( function() {
                                                        let __for_body__122=function(__item) {
                                                            __result= __action(__item);
                                                            if (check_true (__result)){
                                                                return (__collector).push(__result)
                                                            }
                                                        };
                                                        let __array__123=[],__elements__121= ( function() {
                                                            {
                                                                 let __call_target__= parent_environment["meta_for_symbol"].call(parent_environment,quoted_symbol,true), __call_method__="flat";
                                                                return  __call_target__[__call_method__].call(__call_target__,1)
                                                            } 
                                                        })();
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__120 in __elements__121) {
                                                            __array__123.push( __for_body__122(__elements__121[__iter__120]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__123.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__123;
                                                         
                                                    })();
                                                    __collector
                                                }
                                            }
                                        };
                                        if (check_true (( length( keys(children))>0))){
                                            {
                                                {
                                                    let __collector;
                                                    let __result;
                                                    let __action;
                                                    __collector=[];
                                                    __result=null;
                                                    __action=function(details) {
                                                        return (acc).push(details)
                                                    };
                                                    ;
                                                     ( function() {
                                                        let __for_body__126=function(__item) {
                                                            __result= __action(__item);
                                                            if (check_true (__result)){
                                                                return (__collector).push(__result)
                                                            }
                                                        };
                                                        let __array__127=[],__elements__125= ( function(){
                                                            let ____collector__128=  function(){
                                                                return []
                                                            };
                                                            let ____result__129=  function(){
                                                                return null
                                                            };
                                                            let ____action__130=  function(){
                                                                return function(child_data) {
                                                                    if (check_true ( not((child_data['0']=== ( get_global("current_namespace"))())))){
                                                                        {
                                                                            return  child_data['1']["meta_for_symbol"].call(child_data['1'],quoted_symbol)
                                                                        }
                                                                    }
                                                                }
                                                            };
                                                            {
                                                                let __collector= ____collector__128();
                                                                ;
                                                                let __result= ____result__129();
                                                                ;
                                                                let __action= ____action__130();
                                                                ;
                                                                ;
                                                                 ( function() {
                                                                    let __for_body__133=function(__item) {
                                                                        __result= __action(__item);
                                                                        if (check_true (__result)){
                                                                            return (__collector).push(__result)
                                                                        }
                                                                    };
                                                                    let __array__134=[],__elements__132= pairs(children);
                                                                    let __BREAK__FLAG__=false;
                                                                    for(let __iter__131 in __elements__132) {
                                                                        __array__134.push( __for_body__133(__elements__132[__iter__131]));
                                                                        if(__BREAK__FLAG__) {
                                                                             __array__134.pop();
                                                                            break;
                                                                            
                                                                        }
                                                                    }return __array__134;
                                                                     
                                                                })();
                                                                return __collector
                                                            }
                                                        })();
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__124 in __elements__125) {
                                                            __array__127.push( __for_body__126(__elements__125[__iter__124]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__127.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__127;
                                                         
                                                    })();
                                                    __collector
                                                }
                                            }
                                        };
                                        return acc
                                    }
                                } else {
                                    {
                                        quoted_symbol= ( function(){
                                            if (check_true ( starts_with_ques_( ( function(){
                                                 return "=:" 
                                            })(),quoted_symbol))){
                                                return  quoted_symbol["substr"].call(quoted_symbol,2)
                                            } else {
                                                return quoted_symbol
                                            }
                                        })();
                                        {
                                            let it;
                                            it=Environment.definitions[quoted_symbol];
                                            if (check_true (it)){
                                                return  ( get_global("add"))({
                                                    namespace:namespace,type: sub_type(local_data),name:quoted_symbol
                                                },it)
                                            } else {
                                                return null
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["meta_for_symbol"]=meta_for_symbol;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["meta_for_symbol"]={
                            core_lang:true,description:("Given a quoted symbol and a boolean indicating whether or not all namespaces should be searched, returns "+ "the meta data associated with the symbol for each environment.  If search mode is requested, the value returned "+ "is an array, since there can be symbols with the same name in different environments. If no values are found "+ "an empty array is returned.  If not in search mode, meta_for_symbol searches the current namespace "+ "only, and if a matching symbol is found, returns an object with all found metadata, otherwise nil is returned."),usage:["quoted_symbol:string","search_mode:boolean"],tags:["describe","meta","help","definition","symbol","metadata"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let describe=async function(quoted_symbol,search_mode) {
                        let internal_results=await meta_for_symbol(quoted_symbol,true);
                        ;
                        if (check_true (((internal_results instanceof Array)&& internal_results['0']))){
                            if (check_true (search_mode)){
                                return internal_results
                            } else {
                                return await first(internal_results)
                            }
                        } else {
                            {
                                let external_results=await get_outside_global(quoted_symbol);
                                ;
                                if (check_true (external_results)){
                                    return {
                                        location:"external",type:await subtype(external_results)
                                    }
                                } else {
                                    return null
                                }
                            }
                        }
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["describe"]=describe;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["describe"]={
                            core_lang:true,description:"Given a quoted symbol returns the relevant metadata pertinent to the current namespace context.",usage:["quoted_symbol:string","search_mode:boolean"],tags:["meta","help","definition","symbol","metadata","info","meta_for_symbol"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let undefine=function(quoted_symbol) {
                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){
                            {
                                let namespace_identity;
                                let parent_call;
                                let child_call;
                                let target_symbol;
                                namespace_identity=(quoted_symbol).split("/");
                                parent_call=null;
                                child_call=null;
                                target_symbol=null;
                                ;
                                return   (function(){
                                    if (check_true ((((namespace_identity.length===1)&& Environment.global_ctx.scope[namespace_identity['0']])|| ((namespace_identity.length>1)&& (namespace_identity['0']===namespace))))) {
                                        {
                                            target_symbol= ( function(){
                                                if (check_true ((namespace_identity.length>1))){
                                                    return namespace_identity['1']
                                                } else {
                                                    return namespace_identity['0']
                                                }
                                            })();
                                             delete_prop(Environment.definitions,target_symbol);
                                            if (check_true (Environment.global_ctx.scope[target_symbol])){
                                                return  delete_prop(Environment.global_ctx.scope,target_symbol)
                                            } else {
                                                return false
                                            }
                                        }
                                    } else if (check_true (((namespace_identity.length>1)&& parent_environment))) {
                                        {
                                            parent_call= parent_environment["get_global"].call(parent_environment,"undefine");
                                            return (parent_call)(quoted_symbol)
                                        }
                                    } else if (check_true (((namespace_identity.length>1)&& children[namespace_identity['0']]))) {
                                        {
                                            child_call= ( function() {
                                                {
                                                     let __call_target__=children[namespace_identity['0']], __call_method__="get_global";
                                                    return  __call_target__[__call_method__].call(__call_target__,"undefine")
                                                } 
                                            })();
                                            return  child_call(quoted_symbol)
                                        }
                                    } else {
                                        return false
                                    }
                                } )()
                            }
                        } else {
                            throw new SyntaxError("undefine requires a quoted symbol");
                            
                        }
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["undefine"]=undefine;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["undefine"]={
                            core_lang:true,description:("Given a quoted symbol removes the symbol and any definition information from the namespace. "+ "If the namespace is fully-qualified, then the symbol will be removed from the specified namespace "+ "instead of the currently active namespace. If the symbol is successfully removed, the function "+ "will return true, otherwise if it is not found, false will be returned.  Note that if the "+ "specified symbol is non-qualified, but exists in a different, accessible namespace, but the "+ "symbol isn't present in the current namespace, the symbol will not be deleted.  The environment "+ "is not searched and therefore symbols have to be explicitly fully-qualified for any effect "+ "of this function outside the current namespace."),usage:["quoted_symbol:string"],tags:["symbol","delete","remove","unintern","reference","value"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let eval_exp=async function(expression) {
                        return await (async function(){
                            let __array_op_rval__141=expression;
                             if (__array_op_rval__141 instanceof Function){
                                return await __array_op_rval__141() 
                            } else {
                                return [__array_op_rval__141]
                            }
                        })()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["eval_exp"]=eval_exp;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["eval_exp"]={
                            core_lang:true,description:("Evaluates the given expression and returns the value."),usage:["expression:*"],tags:["eval","evaluation","expression"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let indirect_new=new Function("...args","{\n                                    let targetClass = args[0];\n                                    if (subtype(targetClass)===\"String\") {\n                                        let tmpf=new Function(\"{ return \"+targetClass+\" }\");\n                                        targetClass = tmpf();\n                                    }\n                                    if (args.length==1) {\n                                        let f = function(Class) {\n                                            return new (Function.prototype.bind.apply(Class, args));\n                                        }\n                                        let rval = f.apply(this,[targetClass]);\n                                        return rval;\n                                    } else {\n                                        let f = function(Class) {\n                                            return new (Function.prototype.bind.apply(Class, args));\n                                        }\n                                        let rval = f.apply(this,[targetClass].concat(args.slice(1)));\n                                        return rval;\n                                    }}");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["indirect_new"]=indirect_new;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["indirect_new"]={
                            core_lang:true,description:("Used by the compiler for implementation of the new operator and shouldn't be directly called by "+ "user programs.  The new operator should be called instead."),usage:["arg0:*","argsN:*"],tags:["system","compiler","internal"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let range=function(...args) {
                        let from_to;
                        let step;
                        let idx;
                        let acc;
                        from_to= ( function(){
                            if (check_true (args['1'])){
                                return [parseInt(args['0']),parseInt(args['1'])]
                            } else {
                                return [0,parseInt(args['0'])]
                            }
                        })();
                        step= ( function(){
                            if (check_true (args['2'])){
                                return parseFloat(args['2'])
                            } else {
                                return 1
                            }
                        })();
                        idx=from_to['0'];
                        acc=[];
                         ( get_global("assert"))((step>0),"range: step must be > 0");
                         ( get_global("assert"))((from_to['1']>=from_to['0']),"range: lower bound must be greater or equal than upper bound");
                         ( function(){
                             let __test_condition__146=function() {
                                return (idx<from_to['1'])
                            };
                            let __body_ref__147=function() {
                                (acc).push(idx);
                                return idx+=step
                            };
                            let __BREAK__FLAG__=false;
                            while( __test_condition__146()) {
                                 __body_ref__147();
                                 if(__BREAK__FLAG__) {
                                     break;
                                    
                                }
                            } ;
                            
                        })();
                        return acc
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["range"]=range;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["range"]={
                            core_lang:true,usage:["start_or_end:number","end:number","step:number"],description:("Range has a variable form depending on the amount of arguments provided to the function when "+ "calling it. If provided one argument, range will produce an array from 0 up to, but not including "+ "the provided value. If given two arguments, the first argument will be the starging value and "+ "the last value will be used as the upper bounding value, returning an array with elements starting "+ "at the start value and up to, but not including the bounding value. If given a third value, the "+ "value will be interpreted as the step value, and the returned array will contain values that "+ "increment by the step amount.  Range will throw an error if a negative range is specified. "+ "For negative ranges see neg_range."+ "<br><br>Examples:<br>"+ "(range 5) -> [ 0 1 2 3 4 ]<br>"+ "(range 10 15) -> [ 10 11 12 13 14 ]<br>"+ "(range 10 20) -> [ 10 12 14 16 18 ]<br>"+ "(range -5 0) -> [ -5 -4 -3 -2 -1 ]<br>"+ "(range -3 3) -> [ -3, -2, -1, 0, 1, 2 ]<br>")
                        };
                        return Environment.definitions;
                        
                    }()];
                    let add=new Function("...args","{\n                                let acc;\n                                if (typeof args[0]===\"number\") {\n                                    acc = 0;\n                                } else if (args[0] instanceof Array) {\n                                    return args[0].concat(args.slice(1));\n                                } else if (typeof args[0]==='object') {\n                                   let rval = {};\n                                   for (let i in args) {\n                                        if (typeof args[i] === 'object') {\n                                            for (let k in args[i]) {\n                                                rval[k] = args[i][k];\n                                            }\n                                        }\n                                   }\n                                   return rval;\n                                } else {\n                                    acc = \"\";\n                                }\n                                for (let i in args) {\n                                    acc += args[i];\n                                }\n                                return acc;\n                             }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["add"]=add;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["add"]={
                            core_lang:true,description:("Add is an overloaded function that, based on the first argument provided, determines how to 'add' the arguments. "+ "If provided a number as a first argument, then it will assume the rest of the arguments are numbers and add them "+ "to the first, returning the numerical sum of the arguments. If an object, it will merge the keys of the provided "+ "arguments, returning a combined object.  Be aware that if merging objects, if arguments that have the same keys "+ "the argument who appears last with the key will prevail.  If called with an array as a first argument, the "+ "subsequent arguments will be added to the first via 'concat'.  If strings, the strings will be joined into a "+ "single string and returned.<br>"+ "(add 1 2 3) => 6<br>"+ "(add { `abc: 123 `def: 345 } { `def: 456 }) => { abc: 123, def: 456 }"+ "(add [ 1 2 3 ] [ 4 5 6] 7) => [ 1, 2, 3, [ 4, 5, 6 ], 7 ]<br>"+ "(add \"abc\" \"def\") => \"abcdef\"<br><br>"+ "Note that add doesn't typically need to explicily called.  The compiler will try and determine the best "+ "way to handle adding based on the arguments to be added, so the + operator should be used instead, since "+ "it gives the compiler an opportunity to inline if possible."),usage:["arg0:*","argN:*"],tags:["add","+","sum","number","addition","merge","join","concat"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let merge_objects=new Function("x","{\n                                    let rval = {};\n                                    for (let i in x) {\n                                        if (typeof i === 'object') {\n                                            for (let k in x[i]) {\n                                                rval[k] = x[i][k];\n                                            }\n                                        }\n                                    }\n                                    return rval;\n                                 }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["merge_objects"]=merge_objects;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["merge_objects"]={
                            core_lang:true,description:("Merge objects takes an array of objects and returns an object whose keys and values are "+ "the sum of the provided objects (same behavior as add with objects).  If objects have the "+ "same keys, the last element in the array with the duplicate key will be used to provide the "+ "value for that key."),usage:["objects:array"],tags:["add","merge","keys","values","objects","value"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let index_of=new Function("value","container",("{ return container.indexOf(value) }"));
                    ;
                    await async function(){
                        Environment.global_ctx.scope["index_of"]=index_of;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["index_of"]={
                            core_lang:true,description:"Given a value and an array container, returns the index of the value in the array, or -1 if not found.",usage:["value:number|string|boolean","container:array"],tags:["find","position","index","array","contains"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let resolve_path=new Function("path,obj","{\n                                        if (typeof path==='string') {\n                                            path = path.split(\".\");\n                                        }\n                                        let s=obj;\n                                        return path.reduce(function(prev, curr) {\n                                            return prev ? prev[curr] : undefined\n                                        }, obj || {})\n                                    }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["resolve_path"]=resolve_path;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["resolve_path"]={
                            core_lang:true,description:("Given a path and a tree structure, which can be either an array or an object, "+ "traverse the tree structure and return the value at the path if it exists, otherwise "+ "undefined is returned.<br>"+ "(resolve_path [ 2 1 ] [ 1 2 [ 3 4 5 ] 6 7]) => 4)"),usage:["path:array","tree_structure:array|object"],tags:["find","position","index","path","array","tree","contains","set_path"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let min_value=new Function("elements","{ return Math.min(...elements); }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["min_value"]=min_value;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["min_value"]={
                            core_lang:true,description:"Returns the minimum value in the provided array of numbers.",usage:["elements:array"],tags:["min","max_value","array","elements","minimum","number"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let max_value=new Function("elements","{ return Math.max(...elements); }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["max_value"]=max_value;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["max_value"]={
                            core_lang:true,description:"Returns the maximum value in the provided array of numbers.",usage:["elements:array"],tags:["min","max_value","array","elements","minimum","number"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let interlace=async function(...args) {
                        let min_length;
                        let rlength_args;
                        let rval;
                        min_length=await min_value(await (async function(){
                             return await map(length,args) 
                        })());
                        rlength_args=await range(await length(args));
                        rval=[];
                        await (async function() {
                            let __for_body__164=async function(i) {
                                return await (async function() {
                                    let __for_body__168=async function(j) {
                                        return (rval).push(await (async function(){
                                            let __targ__170=args[j];
                                            if (__targ__170){
                                                 return(__targ__170)[i]
                                            } 
                                        })())
                                    };
                                    let __array__169=[],__elements__167=rlength_args;
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__166 in __elements__167) {
                                        __array__169.push(await __for_body__168(__elements__167[__iter__166]));
                                        if(__BREAK__FLAG__) {
                                             __array__169.pop();
                                            break;
                                            
                                        }
                                    }return __array__169;
                                     
                                })()
                            };
                            let __array__165=[],__elements__163=await range(min_length);
                            let __BREAK__FLAG__=false;
                            for(let __iter__162 in __elements__163) {
                                __array__165.push(await __for_body__164(__elements__163[__iter__162]));
                                if(__BREAK__FLAG__) {
                                     __array__165.pop();
                                    break;
                                    
                                }
                            }return __array__165;
                             
                        })();
                        return rval
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["interlace"]=interlace;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["interlace"]={
                            core_lang:true,usage:["list0:array","list1:array","listn?:array"],description:"Returns a list containing a consecutive values from each list, in argument order.  I.e. list0.0 list1.0 listn.0 list0.1 list1.1 listn.1 ...",tags:["list","array","join","merge"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let trim=function(x) {
                        return  x["trim"]()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["trim"]=trim;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["trim"]={
                            core_lang:true,description:"Removes leading and trailing spaces from the provided string value.",usage:["value:string"],tags:["string","spaces","clean","squeeze","leading","trailing","space"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let assert=function(assertion_form,failure_message) {
                        if (check_true (assertion_form)){
                            return assertion_form
                        } else {
                            throw new EvalError((failure_message|| "assertion failure"));
                            
                        }
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["assert"]=assert;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["assert"]={
                            core_lang:true,description:"If the evaluated assertion form is true, the result is returned, otherwise an EvalError is thrown with the optionally provided failure message.",usage:["form:*","failure_message:string?"],tags:["true","error","check","debug","valid","assertion"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let unquotify=async function(val) {
                        let dval;
                        dval=val;
                        if (check_true (await starts_with_ques_("\"",dval))){
                            dval=await dval["substr"].call(dval,1,(dval.length- 2))
                        };
                        if (check_true (await starts_with_ques_("=:",dval))){
                            dval=await dval["substr"].call(dval,2)
                        };
                        return dval
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["unquotify"]=unquotify;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["unquotify"]={
                            core_lang:true,description:"Removes binding symbols and quotes from a supplied value.  For use in compile time function such as macros.",usage:["val:string"],tags:["macro","quote","quotes","desym"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let or_args=async function(argset) {
                        let is_true;
                        is_true=false;
                        await (async function() {
                            let __for_body__181=async function(elem) {
                                if (check_true (elem)){
                                    {
                                        is_true=true;
                                        return __BREAK__FLAG__=true;
                                        return
                                    }
                                }
                            };
                            let __array__182=[],__elements__180=argset;
                            let __BREAK__FLAG__=false;
                            for(let __iter__179 in __elements__180) {
                                __array__182.push(await __for_body__181(__elements__180[__iter__179]));
                                if(__BREAK__FLAG__) {
                                     __array__182.pop();
                                    break;
                                    
                                }
                            }return __array__182;
                             
                        })();
                        return is_true
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["or_args"]=or_args;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["or_args"]={
                            core_lang:true,description:"Provided an array of values, returns true if any of the values are true, otherwise will return false.",usage:["argset:array"],tags:["or","true","false","array","logic"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let special_operators=async function() {
                        return await make_set(await (async function(){
                             return await compiler([],{
                                special_operators:true,env:Environment
                            }) 
                        })())
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["special_operators"]=special_operators;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["special_operators"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let defclog=async function(opts) {
                        let style;
                        style=("padding: 5px;"+ await (async function(){
                            if (check_true (opts.background)){
                                return ("background: "+ opts.background+ ";")
                            } else {
                                return ""
                            }
                        })()+ await (async function(){
                            if (check_true (opts.color)){
                                return ("color: "+ opts.color+ ";")
                            }
                        })()+ "");
                        return async function(...args) {
                            return await (async function(){
                                let __target_arg__189=[].concat(await conj(await (async function(){
                                    let __array_op_rval__190=style;
                                     if (__array_op_rval__190 instanceof Function){
                                        return await __array_op_rval__190() 
                                    } else {
                                        return [__array_op_rval__190]
                                    }
                                })(),args));
                                if(!__target_arg__189 instanceof Array){
                                    throw new TypeError("Invalid final argument to apply - an array is required")
                                }let __pre_arg__191=("%c"+ await (async function(){
                                    if (check_true (opts.prefix)){
                                        return opts.prefix
                                    } else {
                                        return (args).shift()
                                    }
                                })());
                                __target_arg__189.unshift(__pre_arg__191);
                                return (console.log).apply(this,__target_arg__189)
                            })()
                        }
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["defclog"]=defclog;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["defclog"]={
                            core_lang:true,description:("Given a description object, containing specific keys, returns a customized console logging "+ "function implements the given requested properties.<br>Options<br>"+ "prefix:string:The prefix to log prior to any supplied user arguments.<br>"+ "color:string:The text color to use on the prefix (or initial argument if no prefix)<br>"+ "background:string:The background coloe to use on the prefix (or initial argument if no prefix)<br>"),usage:["options:object"],tags:["log","logging","console","utility"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let NOT_FOUND=new ReferenceError("not found");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["NOT_FOUND"]=NOT_FOUND;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["NOT_FOUND"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let check_external_env_default=await (async function(){
                        if (check_true ((namespace==="core"))){
                            return true
                        } else {
                            return false
                        }
                    })();
                    ;
                    await async function(){
                        Environment.global_ctx.scope["check_external_env_default"]=check_external_env_default;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["check_external_env_default"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let _star_namespace_star_=namespace;
                    ;
                    await async function(){
                        Environment.global_ctx.scope["*namespace*"]=_star_namespace_star_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["*namespace*"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let pending_ns_loads=new Object();
                    ;
                    await async function(){
                        Environment.global_ctx.scope["pending_ns_loads"]=pending_ns_loads;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["pending_ns_loads"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let pend_load=async function(from_namespace,target_namespace,symbol,initializer) {
                        if (check_true ((null==pending_ns_loads[from_namespace]))){
                            {
                                await async function(){
                                    pending_ns_loads[from_namespace]=[];
                                    return pending_ns_loads;
                                    
                                }()
                            }
                        };
                        (pending_ns_loads[from_namespace]).push({
                            symbol:symbol,source_ns:from_namespace,target_ns:target_namespace,initializer:await (async function(){
                                 return ["=:quote",initializer] 
                            })()
                        });
                        return initializer
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["pend_load"]=pend_load;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["pend_load"]={
                            core_lang:true,description:("When used as an initializer wrapper via the use_symbols macro, the wrapped "+ "initializer will not be loaded until the from_namespace is loaded to ensure "+ "that the wrapped initializer won't fail due to not yet loaded dependencies."),usage:["from_namespace:string","target_namespace:string","symbol:string","initializer:array"],tags:["symbol","definitions","namespace","scope","dependency","dependencies","require"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let load_pends=async function(from_namespace) {
                        if (check_true (pending_ns_loads[from_namespace])){
                            {
                                let acc=[];
                                ;
                                acc=await (async function() {
                                    let __for_body__207=async function(load_instruction) {
                                        return ["=:use_symbols",load_instruction.source_ns,[load_instruction.symbol],load_instruction.target_ns]
                                    };
                                    let __array__208=[],__elements__206=pending_ns_loads[from_namespace];
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__205 in __elements__206) {
                                        __array__208.push(await __for_body__207(__elements__206[__iter__205]));
                                        if(__BREAK__FLAG__) {
                                             __array__208.pop();
                                            break;
                                            
                                        }
                                    }return __array__208;
                                     
                                })();
                                await console.log("load_pends: ",from_namespace,"->",acc);
                                (await Environment.eval(await async function(){
                                    return acc
                                }()));
                                return true
                            }
                        }
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["load_pends"]=load_pends;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["load_pends"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let symbols=async function(opts) {
                        return await async function(){
                            if (check_true ((null==opts))) {
                                return await keys(Environment.global_ctx.scope)
                            } else if (check_true (opts.unique)) {
                                {
                                    let no_includes=await make_set(await conj(["meta_for_symbol","describe","undefine","*namespace*","pend_load","symbols","set_global","get_global","symbol_definition","compile","env_log","evaluate_local","evaluate","eval_struct","set_compiler","clone","eval","add_escape_encoding","get_outside_global","as_lisp","lisp_writer","clone_to_new","save_env","null","compiler"],built_ins));
                                    ;
                                    {
                                        let __collector;
                                        let __result;
                                        let __action;
                                        __collector=[];
                                        __result=null;
                                        __action=async function(sym) {
                                            if (check_true (await no_includes["has"].call(no_includes,sym))){
                                                return null
                                            } else {
                                                return sym
                                            }
                                        };
                                        ;
                                        await (async function() {
                                            let __for_body__213=async function(__item) {
                                                __result=await __action(__item);
                                                if (check_true (__result)){
                                                    return (__collector).push(__result)
                                                }
                                            };
                                            let __array__214=[],__elements__212=await keys(Environment.global_ctx.scope);
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__211 in __elements__212) {
                                                __array__214.push(await __for_body__213(__elements__212[__iter__211]));
                                                if(__BREAK__FLAG__) {
                                                     __array__214.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__214;
                                             
                                        })();
                                        return __collector
                                    }
                                }
                            }
                        } ()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["symbols"]=symbols;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["symbols"]={
                            core_lang:true,description:("Returns an array of the defined global symbols for the local environment.  "+ "If opts.unique is true, only symbols that are not part of the built ins are "+ "included."),usage:["opts:object"],tags:["symbol","names","definitions","values","scope"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let set_global=function(refname,value,meta,is_constant,target_namespace,contained_req) {
                          (function(){
                            if (check_true ( not((typeof refname==="string")))) {
                                throw new TypeError("reference name must be a string type");
                                
                            } else if (check_true (((Environment===value)|| (Environment.global_ctx===value)|| (Environment.global_ctx.scope===value)))) {
                                {
                                    throw new EvalError("cannot set the environment scope as a global value");
                                    
                                }
                            }
                        } )();
                        if (check_true ( resolve_path( ( function(){
                            let __array_op_rval__217=refname;
                             if (__array_op_rval__217 instanceof Function){
                                return  __array_op_rval__217("constant") 
                            } else {
                                return [__array_op_rval__217,"constant"]
                            }
                        })(),Environment.definitions))){
                            {
                                throw new TypeError(("Assignment to constant variable "+ refname));
                                
                            }
                        };
                        let namespace_identity= ( function(){
                            if (check_true (target_namespace)){
                                return  ( function(){
                                    let __array_op_rval__218=target_namespace;
                                     if (__array_op_rval__218 instanceof Function){
                                        return  __array_op_rval__218(refname) 
                                    } else {
                                        return [__array_op_rval__218,refname]
                                    }
                                })()
                            } else {
                                return (refname).split("/")
                            }
                        })();
                        ;
                        return   (function(){
                            if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace===namespace_identity['0']))))) {
                                return  parent_environment["set_global"].call(parent_environment,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'],(contained|| contained_req))
                            } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {
                                {
                                    if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){
                                        return  ( function() {
                                            {
                                                 let __call_target__=children[namespace_identity['0']], __call_method__="set_global";
                                                return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'])
                                            } 
                                        })()
                                    } else {
                                        throw new EvalError(("namespace "+ namespace_identity['0']+ " doesn't exist"));
                                        
                                    }
                                }
                            } else {
                                {
                                    let comps= get_object_path( ( function(){
                                        if (check_true ((1===namespace_identity.length))){
                                            return namespace_identity['0']
                                        } else {
                                            return namespace_identity['1']
                                        }
                                    })());
                                    ;
                                      (function(){
                                        Environment.global_ctx.scope[comps['0']]=value;
                                        return Environment.global_ctx.scope;
                                        
                                    })();
                                    if (check_true (((meta instanceof Object)&&  not((meta instanceof Array))))){
                                        {
                                            if (check_true (is_constant)){
                                                {
                                                      (function(){
                                                        meta["constant"]=true;
                                                        return meta;
                                                        
                                                    })()
                                                }
                                            };
                                              (function(){
                                                Environment.definitions[comps['0']]=meta;
                                                return Environment.definitions;
                                                
                                            })()
                                        }
                                    } else {
                                        if (check_true (is_constant)){
                                            {
                                                  (function(){
                                                    Environment.definitions[comps['0']]={
                                                        constant:true
                                                    };
                                                    return Environment.definitions;
                                                    
                                                })()
                                            }
                                        }
                                    };
                                    return Environment.global_ctx.scope[comps['0']]
                                }
                            }
                        } )()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["set_global"]=set_global;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["set_global"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let get_global=function(refname,value_if_not_found,suppress_check_external_env,target_namespace,path_comps,contained_req) {
                        return   (function(){
                            if (check_true ( not((typeof refname==="string")))) {
                                throw new TypeError("reference name must be a string type");
                                
                            } else if (check_true ((refname==="Environment"))) {
                                return Environment
                            } else if (check_true ( compiler_operators["has"].call(compiler_operators,refname))) {
                                return special_identity
                            } else {
                                {
                                    let namespace_identity;
                                    let comps;
                                    let refval;
                                    let symbol_name;
                                    let check_external_env;
                                    namespace_identity= ( function(){
                                        if (check_true (target_namespace)){
                                            return  ( function(){
                                                let __array_op_rval__225=target_namespace;
                                                 if (__array_op_rval__225 instanceof Function){
                                                    return  __array_op_rval__225(refname) 
                                                } else {
                                                    return [__array_op_rval__225,refname]
                                                }
                                            })()
                                        } else {
                                            return (refname).split("/")
                                        }
                                    })();
                                    comps=(path_comps||  get_object_path( ( function(){
                                        if (check_true ((1===namespace_identity.length))){
                                            return namespace_identity['0']
                                        } else {
                                            return namespace_identity['1']
                                        }
                                    })()));
                                    refval=null;
                                    symbol_name=null;
                                    check_external_env= ( function(){
                                        if (check_true (suppress_check_external_env)){
                                            return false
                                        } else {
                                            return check_external_env_default
                                        }
                                    })();
                                    return   (function(){
                                        if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {
                                            return  parent_environment["get_global"].call(parent_environment,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps,(contained|| contained_req))
                                        } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {
                                            {
                                                if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){
                                                    return  ( function() {
                                                        {
                                                             let __call_target__=children[namespace_identity['0']], __call_method__="get_global";
                                                            return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps)
                                                        } 
                                                    })()
                                                } else {
                                                    {
                                                        throw new EvalError(("namespace "+ namespace_identity['0']+ " doesn't exist"));
                                                        
                                                    }
                                                }
                                            }
                                        } else {
                                            {
                                                refval=Environment.global_ctx.scope[comps['0']];
                                                if (check_true (((undefined===refval)&& (namespace_identity.length===1)&& parent_environment))){
                                                    {
                                                        let rval= parent_environment["get_global"].call(parent_environment,refname,value_if_not_found,suppress_check_external_env,null,comps,(contained|| contained_req));
                                                        ;
                                                        return rval
                                                    }
                                                } else {
                                                    {
                                                        if (check_true (((undefined===refval)&& check_external_env))){
                                                            refval= ( function(){
                                                                if (check_true (check_external_env)){
                                                                    return ( get_outside_global(comps['0'])|| NOT_FOUND)
                                                                } else {
                                                                    return NOT_FOUND
                                                                }
                                                            })()
                                                        };
                                                        return   (function(){
                                                            if (check_true (((NOT_FOUND===refval)&&  not((undefined===value_if_not_found))))) {
                                                                return value_if_not_found
                                                            } else if (check_true ((NOT_FOUND===refval))) {
                                                                {
                                                                    throw new ReferenceError(("symbol not found: "+  ( function(){
                                                                        if (check_true ((namespace_identity.length>1))){
                                                                            return  add(namespace,"/",namespace_identity['1'])
                                                                        } else {
                                                                            return  add(namespace,"/",namespace_identity['0'])
                                                                        }
                                                                    })()));
                                                                    
                                                                }
                                                            } else if (check_true ((comps.length===1))) {
                                                                return refval
                                                            } else if (check_true ((comps.length>1))) {
                                                                {
                                                                    return  resolve_path( rest(comps),refval)
                                                                }
                                                            } else {
                                                                {
                                                                     console.warn("get_global: condition fall through: ",comps);
                                                                    return NOT_FOUND
                                                                }
                                                            }
                                                        } )()
                                                    }
                                                }
                                            }
                                        }
                                    } )()
                                }
                            }
                        } )()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["get_global"]=get_global;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["get_global"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let symbol_definition=async function(symname,target_namespace) {
                        let namespace_identity;
                        namespace_identity=await (async function(){
                            if (check_true (target_namespace)){
                                return await (async function(){
                                    let __array_op_rval__228=target_namespace;
                                     if (__array_op_rval__228 instanceof Function){
                                        return await __array_op_rval__228(symname) 
                                    } else {
                                        return [__array_op_rval__228,symname]
                                    }
                                })()
                            } else {
                                if (check_true ((await length(symname)>2))){
                                    return (symname).split("/")
                                } else {
                                    return await (async function(){
                                        let __array_op_rval__229=symname;
                                         if (__array_op_rval__229 instanceof Function){
                                            return await __array_op_rval__229() 
                                        } else {
                                            return [__array_op_rval__229]
                                        }
                                    })()
                                }
                            }
                        })();
                        return await async function(){
                            if (check_true ((namespace_identity.length===1))) {
                                {
                                    let it;
                                    it=Environment.definitions[symname];
                                    if (check_true (it)){
                                        return it
                                    } else {
                                        if (check_true (parent_environment)){
                                            return await parent_environment["symbol_definition"].call(parent_environment,symname)
                                        }
                                    }
                                }
                            } else if (check_true ((namespace_identity['0']===namespace))) {
                                return Environment.definitions[symname]
                            } else if (check_true (parent_environment)) {
                                return await parent_environment["symbol_definition"].call(parent_environment,namespace_identity['1'],namespace_identity['0'])
                            } else if (check_true ((namespace_identity.length===2))) {
                                return await (async function() {
                                    {
                                         let __call_target__=children[namespace_identity['0']], __call_method__="symbol_definition";
                                        return await __call_target__[__call_method__].call(__call_target__,namespace_identity['1'])
                                    } 
                                })()
                            } else {
                                return undefined
                            }
                        } ()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["symbol_definition"]=symbol_definition;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["symbol_definition"]={
                            core_lang:true,description:("Given a symbol name and an optional namespace, either as a fully qualified path "+ "or via the target_namespace argument, returns definition information about the "+ "retquested symbol.  "+ "Used primarily by the compiler to find metadata for a specific symbol during compilation."),usage:["symname:string","namespace:string"],tags:["compiler","symbols","namespace","search","context","environment"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let compile=async function(json_expression,opts) {
                        let out;
                        opts=await add({
                            env:Environment
                        },opts,{
                            meta:await (async function(){
                                if (check_true ((opts&& opts.meta))){
                                    return true
                                } else {
                                    return false
                                }
                            })()
                        });
                        out=null;
                        out=await (async function(){
                             return await compiler(json_expression,opts) 
                        })();
                        return await async function(){
                            if (check_true (((out instanceof Array)&& out['0'].ctype&& (out['0'].ctype==="FAIL")))) {
                                return out
                            } else if (check_true (opts.meta)) {
                                return out
                            } else {
                                return out['1']
                            }
                        } ()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["compile"]=compile;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["compile"]={
                            core_lang:true,description:("Compiles the given JSON or quoted lisp and returns a string containing "+ "the lisp form or expression as javascript.<br>"+ "If passed the option { meta: true } , an array is returned containing compilation metadata "+ "in element 0 and the compiled code in element 1."),usage:["json_expression:*","opts:object"],tags:["macro","quote","quotes","desym","compiler"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let env_log=await (async function(){
                         return await defclog({
                            prefix:("env"+ id),background:"#B0F0C0"
                        }) 
                    })();
                    ;
                    await async function(){
                        Environment.global_ctx.scope["env_log"]=env_log;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["env_log"]={
                            core_lang:true,description:"The environment logging function used by the environment.",usage:["arg0:*","argN:*"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let evaluate_local=async function(expression,ctx,opts) {
                        let compiled;
                        let error_data;
                        let requires;
                        let result;
                        opts=(opts|| new Object());
                        compiled=null;
                        error_data=null;
                        requires=null;
                        result=null;
                        if (check_true (opts.compiled_source)){
                            compiled=expression
                        } else {
                            try {
                                compiled=await (async function(){
                                     return await compiler(await (async function(){
                                        if (check_true (opts.json_in)){
                                            return expression
                                        } else {
                                            return await Environment["read_lisp"].call(Environment,expression,{
                                                source_name:opts.source_name
                                            })
                                        }
                                    })(),{
                                        env:Environment,ctx:ctx,formatted_output:true,source_name:opts.source_name,throw_on_error:opts.throw_on_error,error_report:(opts.error_report|| null),quiet_mode:(opts.quiet_mode|| false)
                                    }) 
                                })()
                            } catch (__exception__236) {
                                if (__exception__236 instanceof Error) {
                                    let e=__exception__236;
                                    {
                                        {
                                            if (check_true (opts.throw_on_error)){
                                                {
                                                    throw e;
                                                    
                                                }
                                            };
                                            if (check_true ((e instanceof LispSyntaxError))){
                                                {
                                                    await async function(){
                                                        e["message"]=await JSON.parse(e.message);
                                                        return e;
                                                        
                                                    }()
                                                }
                                            };
                                            await async function(){
                                                if (check_true ((e instanceof LispSyntaxError))) {
                                                    return error_data=await add({
                                                        error:"LispSyntaxError"
                                                    },e.message)
                                                } else {
                                                    error_data={
                                                        error:await sub_type(e),message:e.message,stack:e.stack,form:await (async function(){
                                                             return await async function(){
                                                                if (check_true (((expression instanceof String || typeof expression==='string')&& (expression.length>100)))) {
                                                                    return await add(await expression["substr"].call(expression,0,100),"...")
                                                                } else {
                                                                    return await (await get_global("as_lisp"))(expression)
                                                                }
                                                            } () 
                                                        })(),parent_forms:[],source_name:opts.source_name,invalid:true
                                                    }
                                                }
                                            } ();
                                            if (check_true (opts.error_report)){
                                                await (async function(){
                                                    let __array_op_rval__238=opts.error_report;
                                                     if (__array_op_rval__238 instanceof Function){
                                                        return await __array_op_rval__238(error_data) 
                                                    } else {
                                                        return [__array_op_rval__238,error_data]
                                                    }
                                                })()
                                            } else {
                                                await console.error("Compilation Error: ",error_data)
                                            };
                                            compiled=await (async function(){
                                                 return [{
                                                    error:true
                                                },null] 
                                            })()
                                        }
                                    }
                                }
                            }
                        };
                        return await async function(){
                            if (check_true ((null==compiled))) {
                                return null
                            } else if (check_true ((compiled['0'].ctype==="FAIL"))) {
                                {
                                    if (check_true (opts.error_report)){
                                        {
                                            await (async function(){
                                                let __array_op_rval__239=opts.error_report;
                                                 if (__array_op_rval__239 instanceof Function){
                                                    return await __array_op_rval__239(compiled['1']) 
                                                } else {
                                                    return [__array_op_rval__239,compiled['1']]
                                                }
                                            })()
                                        }
                                    };
                                    return await async function(){
                                        if (check_true ((compiled['1'] instanceof Error))) {
                                            throw compiled['1'];
                                            
                                        } else if (check_true ((compiled['1']['0'] instanceof Error))) {
                                            throw compiled['1']['0'];
                                            
                                        } else if (check_true (((compiled['1']['0'] instanceof Object)&& (compiled['1']['0'].error==="SyntaxError")))) {
                                            {
                                                let new_error=new SyntaxError(compiled['1']['0'].message);
                                                ;
                                                await async function(){
                                                    new_error["from"]=compiled['1']['0'];
                                                    return new_error;
                                                    
                                                }();
                                                throw new_error;
                                                
                                            }
                                        } else {
                                            return compiled['1']
                                        }
                                    } ()
                                }
                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))&& parent_environment))) {
                                return await parent_environment["evaluate_local"].call(parent_environment,compiled,ctx,await add(new Object(),opts,{
                                    compiled_source:true
                                }))
                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))))) {
                                if (check_true (children[compiled['0'].namespace])){
                                    return await (async function() {
                                        {
                                             let __call_target__=children[compiled['0'].namespace], __call_method__="evaluate_local";
                                            return await __call_target__[__call_method__].call(__call_target__,compiled,ctx,await add(new Object(),opts,{
                                                compiled_source:true
                                            }))
                                        } 
                                    })()
                                } else {
                                    throw new EvalError(("unknown namespace "+ compiled['0'].namespace+ " assignment"));
                                    
                                }
                            } else {
                                {
                                    if (check_true (opts.on_compilation_complete)){
                                        await (async function(){
                                            let __array_op_rval__241=opts.on_compilation_complete;
                                             if (__array_op_rval__241 instanceof Function){
                                                return await __array_op_rval__241(compiled) 
                                            } else {
                                                return [__array_op_rval__241,compiled]
                                            }
                                        })()
                                    };
                                    try {
                                        if (check_true (((compiled instanceof Array)&& (compiled['0'] instanceof Object)&& compiled['0'].ctype&& await not((compiled['0'].ctype instanceof String || typeof compiled['0'].ctype==='string'))))){
                                            {
                                                await async function(){
                                                    compiled['0']["ctype"]=await subtype(compiled['0'].ctype);
                                                    return compiled['0'];
                                                    
                                                }()
                                            }
                                        };
                                        result=await (async function(){
                                             return await async function(){
                                                if (check_true (compiled.error)) {
                                                    throw new Error((await get_global("indirect_new"))(compiled.error,compiled.message));
                                                    
                                                } else if (check_true ((compiled['0'].ctype&& (await contains_ques_("block",compiled['0'].ctype)|| (compiled['0'].ctype==="assignment")|| (compiled['0'].ctype==="__!NOT_FOUND!__"))))) {
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__244=compiled['0'].has_lisp_globals;
                                                         if (__array_op_rval__244 instanceof Function){
                                                            return await __array_op_rval__244() 
                                                        } else {
                                                            return [__array_op_rval__244]
                                                        }
                                                    })())){
                                                        {
                                                            await async function(){
                                                                compiled[1]=new AsyncFunction("Environment",("{ "+ compiled['1']+ "}"));
                                                                return compiled;
                                                                
                                                            }();
                                                            return await (async function(){
                                                                let __array_op_rval__246=compiled['1'];
                                                                 if (__array_op_rval__246 instanceof Function){
                                                                    return await __array_op_rval__246(Environment) 
                                                                } else {
                                                                    return [__array_op_rval__246,Environment]
                                                                }
                                                            })()
                                                        }
                                                    } else {
                                                        {
                                                            await async function(){
                                                                compiled[1]=new AsyncFunction(("{"+ compiled['1']+ "}"));
                                                                return compiled;
                                                                
                                                            }();
                                                            return await (async function(){
                                                                let __array_op_rval__248=compiled['1'];
                                                                 if (__array_op_rval__248 instanceof Function){
                                                                    return await __array_op_rval__248() 
                                                                } else {
                                                                    return [__array_op_rval__248]
                                                                }
                                                            })()
                                                        }
                                                    }
                                                } else if (check_true ((compiled['0'].ctype&& (("AsyncFunction"===compiled['0'].ctype)|| ("statement"===compiled['0'].ctype)|| ("objliteral"===compiled['0'].ctype))))) {
                                                    {
                                                        if (check_true (await (async function(){
                                                            let __array_op_rval__249=compiled['0'].has_lisp_globals;
                                                             if (__array_op_rval__249 instanceof Function){
                                                                return await __array_op_rval__249() 
                                                            } else {
                                                                return [__array_op_rval__249]
                                                            }
                                                        })())){
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new AsyncFunction("Environment",("{ return "+ compiled['1']+ "} "));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__251=compiled['1'];
                                                                     if (__array_op_rval__251 instanceof Function){
                                                                        return await __array_op_rval__251(Environment) 
                                                                    } else {
                                                                        return [__array_op_rval__251,Environment]
                                                                    }
                                                                })()
                                                            }
                                                        } else {
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new AsyncFunction(("{ return "+ compiled['1']+ "}"));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__253=compiled['1'];
                                                                     if (__array_op_rval__253 instanceof Function){
                                                                        return await __array_op_rval__253() 
                                                                    } else {
                                                                        return [__array_op_rval__253]
                                                                    }
                                                                })()
                                                            }
                                                        }
                                                    }
                                                } else if (check_true ((compiled['0'].ctype&& ("Function"===compiled['0'].ctype)))) {
                                                    {
                                                        if (check_true (await (async function(){
                                                            let __array_op_rval__254=compiled['0'].has_lisp_globals;
                                                             if (__array_op_rval__254 instanceof Function){
                                                                return await __array_op_rval__254() 
                                                            } else {
                                                                return [__array_op_rval__254]
                                                            }
                                                        })())){
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new Function("Environment",("{ return "+ compiled['1']+ "} "));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__256=compiled['1'];
                                                                     if (__array_op_rval__256 instanceof Function){
                                                                        return await __array_op_rval__256(Environment) 
                                                                    } else {
                                                                        return [__array_op_rval__256,Environment]
                                                                    }
                                                                })()
                                                            }
                                                        } else {
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new Function(("{ return "+ compiled['1']+ "}"));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__258=compiled['1'];
                                                                     if (__array_op_rval__258 instanceof Function){
                                                                        return await __array_op_rval__258() 
                                                                    } else {
                                                                        return [__array_op_rval__258]
                                                                    }
                                                                })()
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    return compiled['1']
                                                }
                                            } () 
                                        })()
                                    } catch (__exception__242) {
                                        if (__exception__242 instanceof Error) {
                                            let e=__exception__242;
                                            {
                                                {
                                                    if (check_true ((opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4)))){
                                                        {
                                                            if (check_true (e.details)){
                                                                await env_log("caught error: ",e.details)
                                                            } else {
                                                                await env_log("caught error: ",e.name,e.message,e)
                                                            }
                                                        }
                                                    };
                                                    if (check_true (((await sub_type(e)==="SyntaxError")&& (opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4))))){
                                                        await console.log(compiled['1'])
                                                    };
                                                    if (check_true (opts.error_report)){
                                                        {
                                                            await (async function(){
                                                                let __array_op_rval__259=opts.error_report;
                                                                 if (__array_op_rval__259 instanceof Function){
                                                                    return await __array_op_rval__259(await (async function(){
                                                                        if (check_true (e.details)){
                                                                            return e.details
                                                                        } else {
                                                                            return {
                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack
                                                                            }
                                                                        }
                                                                    })()) 
                                                                } else {
                                                                    return [__array_op_rval__259,await (async function(){
                                                                        if (check_true (e.details)){
                                                                            return e.details
                                                                        } else {
                                                                            return {
                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack
                                                                            }
                                                                        }
                                                                    })()]
                                                                }
                                                            })()
                                                        }
                                                    };
                                                    result=e;
                                                    if (check_true ((await not(opts.catch_errors)|| (ctx&& ctx.in_try)))){
                                                        {
                                                            throw result;
                                                            
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    };
                                    return result
                                }
                            }
                        } ()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["evaluate_local"]=evaluate_local;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["evaluate_local"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let evaluate=async function(expression,ctx,opts) {
                        return await async function(){
                            if (check_true ((namespace===active_namespace))) {
                                return await evaluate_local(expression,ctx,opts)
                            } else if (check_true ((namespace==="core"))) {
                                return await (async function() {
                                    {
                                         let __call_target__=children[active_namespace], __call_method__="evaluate";
                                        return await __call_target__[__call_method__].call(__call_target__,expression,ctx,opts)
                                    } 
                                })()
                            }
                        } ()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["evaluate"]=evaluate;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["evaluate"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let eval_struct=async function(lisp_struct,ctx,opts) {
                        let rval;
                        rval=null;
                        if (check_true (lisp_struct instanceof Function)){
                            rval=await (async function(){
                                let __array_op_rval__264=lisp_struct;
                                 if (__array_op_rval__264 instanceof Function){
                                    return await __array_op_rval__264() 
                                } else {
                                    return [__array_op_rval__264]
                                }
                            })()
                        } else {
                            rval=await (async function(){
                                 return await evaluate(lisp_struct,ctx,await add({
                                    json_in:true
                                },(opts|| new Object()))) 
                            })()
                        };
                        return rval
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["eval_struct"]=eval_struct;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["eval_struct"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let built_ins=["MAX_SAFE_INTEGER","LispSyntaxError","sub_type","__VERBOSITY__","int","float","values","pairs","keys","take","prepend","first","last","length","conj","reverse","map","bind","to_object","to_array","slice","rest","second","third","chop","chomp","not","push","pop","list","flatten","jslambda","join","lowercase","uppercase","log","split","split_by","is_object?","is_array?","is_number?","is_function?","is_set?","is_element?","is_string?","is_nil?","is_regex?","is_date?","ends_with?","starts_with?","blank?","contains?","make_set","eval_exp","indirect_new","get_import_entry","range","add","merge_objects","index_of","resolve_path","delete_prop","load_pends","min_value","max_value","interlace","trim","assert","unquotify","or_args","pending_ns_loads","special_operators","defclog","NOT_FOUND","check_external_env_default","built_ins","reader"];
                    ;
                    await async function(){
                        Environment.global_ctx.scope["built_ins"]=built_ins;
                        return Environment.global_ctx.scope;
                        
                    }();
                    let set_compiler=async function(compiler_function) {
                        let new_ops;
                        new_ops=await (async function(){
                            let __array_op_rval__268=compiler_function;
                             if (__array_op_rval__268 instanceof Function){
                                return await __array_op_rval__268([],{
                                    special_operators:true,env:Environment
                                }) 
                            } else {
                                return [__array_op_rval__268,[],{
                                    special_operators:true,env:Environment
                                }]
                            }
                        })();
                        if (check_true (await is_set_ques_(new_ops))){
                            {
                                compiler_operators=new_ops;
                                compiler=compiler_function;
                                await async function(){
                                    Environment.global_ctx.scope["compiler"]=compiler;
                                    return Environment.global_ctx.scope;
                                    
                                }();
                                await (await get_global("register_feature"))("compiler")
                            }
                        } else {
                            {
                                await console.error("Invalid compiler function: invalid operators returned. Not installing.");
                                throw new EvalError("Invalid compiler function");
                                
                            }
                        };
                        return compiler
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["set_compiler"]=set_compiler;
                        return Environment.global_ctx.scope;
                        
                    }();
                    await async function(){
                        Environment.global_ctx.scope["clone"]=async function(val) {
                            if (check_true ((val===Environment))){
                                return Environment
                            } else {
                                return await clone(val,0,Environment)
                            }
                        };
                        return Environment.global_ctx.scope;
                        
                    }();
                    await async function(){
                        Environment["get_global"]=get_global;
                        Environment["set_global"]=set_global;
                        Environment["symbol_definition"]=symbol_definition;
                        Environment["namespace"]=namespace;
                        return Environment;
                        
                    }();
                    let children=(opts.children|| new Object());
                    ;
                    let children_declarations=(opts.children_declarations|| new Object());
                    ;
                    if (check_true ((namespace==="core"))){
                        {
                            if (check_true (await not(Environment.global_ctx.scope["*env_config*"]))){
                                {
                                    await async function(){
                                        Environment.global_ctx.scope["*env_config*"]={
                                            export:{
                                                save_path:"js/juno.js",default_namespace:"core",include_source:false
                                            },features:[],build:DLISP_ENV_VERSION,imports:new Object()
                                        };
                                        return Environment.global_ctx.scope;
                                        
                                    }()
                                }
                            };
                            let current_namespace=function() {
                                return active_namespace
                            };
                            ;
                            let create_namespace=async function(name,options,defer_initialization) {
                                return await async function(){
                                    if (check_true (await not((name instanceof String || typeof name==='string')))) {
                                        throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true (children[name])) {
                                        throw new EvalError("namespace already exists");
                                        
                                    } else {
                                        {
                                            let child_env;
                                            options=(options|| new Object());
                                            child_env=await (async function(){
                                                 return await dlisp_env({
                                                    parent_environment:Environment,namespace:name,contained:options.contained,defer_initialization:defer_initialization
                                                }) 
                                            })();
                                            if (check_true (child_env.evaluate)){
                                                {
                                                    await child_env["set_compiler"].call(child_env,compiler);
                                                    await async function(){
                                                        children[name]=child_env;
                                                        return children;
                                                        
                                                    }();
                                                    await async function(){
                                                        children_declarations[name]=new Object();
                                                        return children_declarations;
                                                        
                                                    }();
                                                    await child_env["evaluate_local"].call(child_env,"(for_each (sym built_ins) (delete_prop Environment.context.scope sym))");
                                                    await child_env["evaluate_local"].call(child_env,"(for_each (sym built_ins) (delete_prop Environment.definitions sym))");
                                                    if (check_true (options.contained)){
                                                        await async function(){
                                                            let __target_obj__276=children_declarations[name];
                                                            __target_obj__276["contained"]=true;
                                                            return __target_obj__276;
                                                            
                                                        }()
                                                    };
                                                    await async function(){
                                                        let __target_obj__277=children_declarations[name];
                                                        __target_obj__277["serialize_with_image"]=await (async function(){
                                                            if (check_true ((false===options.serialize_with_image))){
                                                                return false
                                                            } else {
                                                                return true
                                                            }
                                                        })();
                                                        return __target_obj__277;
                                                        
                                                    }();
                                                    return name
                                                }
                                            } else {
                                                {
                                                    await console.error("ENV: couldn't create the child environment. Received: ",child_env);
                                                    throw new EvalError(("unable to create namespace "+ name));
                                                    
                                                }
                                            }
                                        }
                                    }
                                } ()
                            };
                            ;
                            let set_namespace=async function(name) {
                                return await async function(){
                                    if (check_true (await not((name instanceof String || typeof name==='string')))) {
                                        throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true ((await not(("core"===name))&& (null==children[name])))) {
                                        throw new EvalError(("namespace "+ name+ " doesn't exist"));
                                        
                                    } else {
                                        {
                                            if (check_true ((name==="core"))){
                                                {
                                                    active_namespace="core"
                                                }
                                            } else {
                                                {
                                                    active_namespace=name
                                                }
                                            };
                                            return name
                                        }
                                    }
                                } ()
                            };
                            ;
                            let delete_namespace=async function(name) {
                                return await async function(){
                                    if (check_true (await not((name instanceof String || typeof name==='string')))) {
                                        throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true (("core"===name))) {
                                        throw new EvalError("core namespace cannot be removed");
                                        
                                    } else if (check_true ((null==children[name]))) {
                                        throw new EvalError(("namespace "+ name+ "doesn't exist"));
                                        
                                    } else if (check_true ((name===await current_namespace()))) {
                                        throw new EvalError("namespace is the current namespace");
                                        
                                    } else {
                                        {
                                            await (await get_global("remove_prop"))(children,name);
                                            await (async function() {
                                                let __for_body__280=async function(k) {
                                                    if (check_true (await starts_with_ques_(k,name))){
                                                        {
                                                            return await (await get_global("remove_prop"))(Environment.global_ctx._star_env_config_star_.imports,k)
                                                        }
                                                    }
                                                };
                                                let __array__281=[],__elements__279=(await resolve_path(["global_ctx","scope","*env_config*","imports"],Environment)|| []);
                                                let __BREAK__FLAG__=false;
                                                for(let __iter__278 in __elements__279) {
                                                    __array__281.push(await __for_body__280(__elements__279[__iter__278]));
                                                    if(__BREAK__FLAG__) {
                                                         __array__281.pop();
                                                        break;
                                                        
                                                    }
                                                }return __array__281;
                                                 
                                            })();
                                            return name
                                        }
                                    }
                                } ()
                            };
                            ;
                            await async function(){
                                Environment.global_ctx.scope["create_namespace"]=create_namespace;
                                Environment.global_ctx.scope["set_namespace"]=set_namespace;
                                Environment.global_ctx.scope["delete_namespace"]=delete_namespace;
                                Environment.global_ctx.scope["namespaces"]=function() {
                                    return  add( keys(children),"core")
                                };
                                Environment.global_ctx.scope["current_namespace"]=current_namespace;
                                return Environment.global_ctx.scope;
                                
                            }()
                        }
                    };
                    let get_namespace_handle=async function(name) {
                        return await async function(){
                            if (check_true ((namespace===name))) {
                                return Environment
                            } else if (check_true ((namespace==="core"))) {
                                if (check_true (((name instanceof String || typeof name==='string')&& children[name]))){
                                    return children[name]
                                }
                            } else if (check_true (parent_environment)) {
                                return await parent_environment["get_namespace_handle"].call(parent_environment,name)
                            } else {
                                throw new Error("invalid namespace handle requested");
                                
                            }
                        } ()
                    };
                    ;
                    let included_globals=async function() {
                        return {
                            definitions:await (async function(){
                                 return { "MAX_SAFE_INTEGER":{ "core_lang":true
                            },"LispSyntaxError":{ "core_lang":true
                        },"sub_type":{ "core_lang":true,"description":"Returns a string the determined actual type of the provided value.","usage":["value:*"],"tags":["type","class","prototype","typeof","instanceof"]
                    },"__VERBOSITY__":{ "core_lang":true,"description":"Set __VERBOSITY__ to a positive integer for verbose console output of system activity.","tags":["debug","compiler","environment","global"]
                },"int":{ "core_lang":true,"usage":"value:string|number","description":"Convenience method for parseInt, should be used in map vs. directly calling parseInt, which will not work directly","tags":["conversion","number"]
            },"float":{ "core_lang":true,"usage":"value:string|number","description":"Convenience method for parseFloat, should be used in map vs. directly calling parseFloat, which will not work directly","tags":["conversion","number"]
        },"values":{ "core_lang":true,"description":"Given a container, returns a list containing the values of each supplied argument. Note that for objects, only the values are returned, not the keys. If given multiple values, the returned value is a concatentation of all containers provided in the arguments.","usage":["arg0:*","argn:*"],"tags":["array","container","object","keys","elements"]
    },"pairs":{ "core_lang":true,"description":"Given a passed object or array, returns a list containing a 2 element list for each key/value pair of the supplied object.","tags":["array","container","object"],"usage":["obj:object"]
},"keys":{ "core_lang":true,"description":"Given an object, returns the keys of the object.","tags":["object","values","keys","indexes","container"],"usage":["obj:object"]
},"take":{ "core_lang":true,"description":"Takes the first value off the list, and returns the value.","tags":["array","container","mutate","first"],"usage":["place:container"]
},"prepend":{ "core_lang":true,"description":"Places the value argument onto the first of the list (unshift) and returns the list.","tags":["array","mutate","container"],"usage":["place:array","thing:*"]
},"first":{ "core_lang":true,"description":"Given an array, returns the first element in the array.","usage":["x:array"],"tags":["array","container","elements"]
},"last":{ "core_lang":true,"description":"Given an array, returns the last element in the array.","usage":["x:array"],"tags":["array","container","elements","end"]
},"length":{ "core_lang":true,"description":"Returns the length of the supplied type (array, object, set, string, number). If the supplied value is nil or a non-container type, returns 0.","tags":["size","elements","container","dimension","array","set","string","number"],"usage":["thing:container"]
},"conj":{ "core_lang":true,"description":"Conjoins or concatenates things (typically arrays) together and returns an array. Examples:<br>(conj [ 1 2 ] [ 3 4 ]) => [ 1 2 3 4 ]<br>(conj [ 1 2 ] 3 4 ) => [ 1 2 3 4 ]<br>(conj 1 2 [ 3 4 ]) => [ 1 2 3 4 ]<br>(conj { `abc: 123 } [ 2 3]) => [ { abc: 123 }, 2, 3 ]<br>(conj [ 1 2 3 [ 4 ]] [ 5 6 [ 7 ]]) => [ 1 2 3 [ 4 ] 5 6 [ 7 ] ]","tags":["elements","concat","array","conjoin","append"],"usage":["arg0:*","argN:*"]
},"reverse":{ "core_lang":true,"usage":["container:list"],"description":"Returns a copy of the passed list as reversed.  The original is not changed.","tags":["list","sort","order"]
},"map":{ "core_lang":true,"description":"Provided a function as a first argument, map calls the function (item, current_index, total_length) with each element from the second argument, which should be a list. Returns a new list containing the return values resulting from evaluating.","tags":["array","container","elements","iteration"],"usage":["lambda:function","elements:array"]
},"bind":{ "core_lang":true,"description":"Given a function and a this value, the bind function returns a new function that has its this keyword set to the provided value in this_arg.","usage":["func:function","this_arg:*"],"tags":["bind","this","function"]
},"to_object":{ "core_lang":true,"description":"Given an array of pairs in the form of [[key value] [key value] ...], constructs an object with the first array element of the pair as the key and the second element as the value. A single object is returned.","usage":["paired_array:array"],"tags":["conversion","object","array","list","pairs"]
},"to_array":{ "core_lang":true,"description":"Given a container of type Array, Set, Object, or a string, it will convert the members of the container to an array form, and return a new array with the values of the provided container. In the case of an object, the keys and values will be contained in paired arrays in the returned array.  A string will be split into individual characters. If provided a different type other than the listed values above, the value will be placed in an array as a single element.","usage":["container:*"],"tags":["array","conversion","set","object","string","pairs"]
},"slice":{ "core_lang":true,"description":"Given an array, with a starting index and an optional ending index, slice returns a new array containing the elements in the range of provided indices.","usage":["target:array","from:number","to:number"],"tags":["array","slicing","dimensions","subset"]
},"rest":{ "core_lang":true,"description":"Returns a new array containing the elements in the 2nd through last position (the tail) of the provided array.","usage":["x:array"],"tags":["array","subset","slice","tail","end"]
},"second":{ "core_lang":true,"description":"Returns the second element in the provided array (the element at index 1)","tags":["array","subset","element","first"],"usage":["x:array"]
},"third":{ "core_lang":true,"description":"Returns the third element in the provided array (the element at index 2)","tags":["array","subset","element","first"],"usage":["x:array"]
},"chop":{ "core_lang":true,"description":"Returns a new container containing all items except the last item.  This function takes either an array or a string.","usage":["container:array|string"],"tags":["array","slice","subset","first","string"]
},"chomp":{ "core_lang":true,"description":"Given a string returns a new string containing all characters except the last character.","usage":["x:string"],"tags":["slice","subset","string"]
},"not":{ "core_lang":true,"description":"Returns the logical opposite of the given value.  If given a truthy value, a false is returned.  If given a falsey value, true is returned.","usage":["x:*"],"tags":["logic","not","inverse"]
},"push":{ "core_lang":true,"description":"Given an array as a place, and an arbitrary value, appends (pushes) the value to the end of the array.","usage":["place:array","thing:*"],"tags":["array","mutate","append","concat","pop"]
},"pop":{ "core_lang":true,"description":"Given an array as an arguments, removes the last value from the given array and returns it.","usage":["place:array"],"tags":["array","mutate","take","remove","push"]
},"list":{ "core_lang":true,"description":"Given a set of arbitrary arguments, returns an array containing the provided arguments. If no arguments are provided, returns an empty array.","usage":["arg0:*","argN:*"],"tags":["array","container","elements"]
},"flatten":{ "core_lang":true,"description":"Given a nested array structure, returns a flattened version of the array","usage":["x:array"],"tags":["array","container","flat","tree"]
},"jslambda":{ "core_lang":true,"description":"Proxy for Javascript Function.  Given a set of string based arguments, all but the last are considered arguments to the function to be defined.  The last argument is considered the body of the function and should be provided as a string of javascript. Returns a javascript function. <br>(jslambda (`a `b) \"{ return a+b }\")<br>(jslambda () \"{ return new Date() }\")","usage":["argument_list:array","argn:string"],"tags":["javascript","embed","function"]
},"join":{ "core_lang":true,"description":"Given an optional joining string and an array of strings, returns a string containing the elements of the array interlaced with the optional joining string.<br>(join \",\" [ \"red\" \"fox\" ]) -> \"red,fox\"<br>(join [\"red\" \"fox\"]) -> redfox","tags":["array","combine","split","string","text"],"usage":["joining_string?:string","container:array"]
},"lowercase":{ "core_lang":true,"description":"Given a string, converts all capital characters to lowercase characters.","tags":["string","text","uppercase","case","convert"],"usage":["text:string"]
},"uppercase":{ "core_lang":true,"description":"Given a string, converts all capital characters to uppercase characters.","tags":["string","text","lowercase","case","convert"],"usage":["text:string"]
},"log":{ "core_lang":true,"description":"log is a shorthand call for console.log by default, and serves to provide a base abstraction for logging.  Log behavior can be changed by redefining log to better suit the environmental context.  For example, writing log output to a file or HTML container.","usage":["args0:*","argsN:*"],"tags":["logging","console","output"]
},"split":{ "core_lang":true,"description":"Given a string to partition and a string for a splitting token, return an array whose elements are the text found between each splitting token. <br>(split \"red,fox\" \",\") => [ \"red\" \"fox\" ]","tags":["partition","join","separate","string","array"],"usage":["string_to_split:string","split_token:string"]
},"split_by":{ "core_lang":true,"description":"Given a string for a splitting token and a string to partition, return an array whose elements are the text found between each splitting token. <br>(split_by \",\" \"red,fox\") => [ \"red\" \"fox\" ]","tags":["partition","join","separate","string","array"],"usage":["split_token:string","string_to_split:string"]
},"is_object?":{ "core_lang":true,"description":"for the given value x, returns true if x is an Javascript object type.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_array?":{ "core_lang":true,"description":"for the given value x, returns true if x is an array.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_number?":{ "core_lang":true,"description":"for the given value x, returns true if x is a number.","usage":["arg:value"],"tags":["type","condition","subtype","value","what","function"]
},"is_function?":{ "core_lang":true,"description":"for the given value x, returns true if x is a function.","usage":["arg:value"],"tags":["type","condition","subtype","value","what","function"]
},"is_set?":{ "core_lang":true,"description":"for the given value x, returns true if x is a set.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_element?":{ "core_lang":true,"description":"for the given value x, returns true if x is an Element object","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_string?":{ "core_lang":true,"description":"for the given value x, returns true if x is a String object","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_nil?":{ "name":"is_nil?","fn_args":"(\"value\")","description":"for the given value x, returns true if x is exactly equal to nil.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_regex?":{ "name":"is_regex?","fn_args":"(x)","description":"for the given value x, returns true if x is a Javascript regex object","usage":["arg:value"],"tags":["type","condition","subtype","value","what"],"requires":["sub_type"]
},"is_date?":{ "core_lang":true,"description":"for the given value x, returns true if x is a Date object.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"ends_with?":{ "core_lang":true,"description":"for a given string or array, checks to see if it ends with the given start_value.  Non string args return false.","usage":["end_value:value","collection:array|string"],"tags":["string","text","list","array","filter","reduce"]
},"starts_with?":{ "core_lang":true,"description":"for a given string or array, checks to see if it starts with the given start_value.  Non string args return false.","usage":["start_value:value","collection:array|string"],"tags":["string","text","list","array","filter","reduce","begin"]
},"delete_prop":{ "core_lang":true,"description":"Removes the key or keys of the provided object, and returns the modified object.<br>Example:<br>(defglobal foo { abc: 123 def: 456 ghi: 789 })<br>(delete_prop foo `abc `def) => { ghi: 789 }<br>","usage":["obj:objects","key0:string","keyN?:string"],"tags":["delete","keys","object","remove","remove_prop","mutate"]
},"blank?":{ "core_lang":true,"description":"Given a value, if it is equal (via eq) to nil or to \"\" (an empty string), returns true, otherwise false.","usage":["val:*"],"tags":["string","empty","text"]
},"contains?":{ "core_lang":true,"description":"Given a target value and container value (array, set, or string), checks if the container has the value. If it is found, true is returned, otherwise false if returned.  ","tags":["string","array","set","has","includes","indexOf"],"usage":["value:*","container:array|set|string"]
},"make_set":{ "core_lang":true,"description":"If given an array, a new Set is returned containing the elements of the array. If given an object, a new Set is returned containing the values of the object, and the keys are discarded. If given a set, new Set is created and returend  from the values of the old set.","usage":["vals:array|object|set"],"tags":["array","set","object","values","convert"]
},"meta_for_symbol":{ "core_lang":true,"description":"Given a quoted symbol and a boolean indicating whether or not all namespaces should be searched, returns the meta data associated with the symbol for each environment.  If search mode is requested, the value returned is an array, since there can be symbols with the same name in different environments. If no values are found an empty array is returned.  If not in search mode, meta_for_symbol searches the current namespace only, and if a matching symbol is found, returns an object with all found metadata, otherwise nil is returned.","usage":["quoted_symbol:string","search_mode:boolean"],"tags":["describe","meta","help","definition","symbol","metadata"]
},"describe":{ "core_lang":true,"description":"Given a quoted symbol returns the relevant metadata pertinent to the current namespace context.","usage":["quoted_symbol:string","search_mode:boolean"],"tags":["meta","help","definition","symbol","metadata","info","meta_for_symbol"]
},"undefine":{ "core_lang":true,"description":"Given a quoted symbol removes the symbol and any definition information from the namespace. If the namespace is fully-qualified, then the symbol will be removed from the specified namespace instead of the currently active namespace. If the symbol is successfully removed, the function will return true, otherwise if it is not found, false will be returned.  Note that if the specified symbol is non-qualified, but exists in a different, accessible namespace, but the symbol isn't present in the current namespace, the symbol will not be deleted.  The environment is not searched and therefore symbols have to be explicitly fully-qualified for any effect of this function outside the current namespace.","usage":["quoted_symbol:string"],"tags":["symbol","delete","remove","unintern","reference","value"]
},"eval_exp":{ "core_lang":true,"description":"Evaluates the given expression and returns the value.","usage":["expression:*"],"tags":["eval","evaluation","expression"]
},"indirect_new":{ "core_lang":true,"description":"Used by the compiler for implementation of the new operator and shouldn't be directly called by user programs.  The new operator should be called instead.","usage":["arg0:*","argsN:*"],"tags":["system","compiler","internal"]
},"range":{ "core_lang":true,"usage":["start_or_end:number","end:number","step:number"],"description":"Range has a variable form depending on the amount of arguments provided to the function when calling it. If provided one argument, range will produce an array from 0 up to, but not including the provided value. If given two arguments, the first argument will be the starging value and the last value will be used as the upper bounding value, returning an array with elements starting at the start value and up to, but not including the bounding value. If given a third value, the value will be interpreted as the step value, and the returned array will contain values that increment by the step amount.  Range will throw an error if a negative range is specified. For negative ranges see neg_range.<br><br>Examples:<br>(range 5) -> [ 0 1 2 3 4 ]<br>(range 10 15) -> [ 10 11 12 13 14 ]<br>(range 10 20) -> [ 10 12 14 16 18 ]<br>(range -5 0) -> [ -5 -4 -3 -2 -1 ]<br>(range -3 3) -> [ -3, -2, -1, 0, 1, 2 ]<br>"
},"add":{ "core_lang":true,"description":"Add is an overloaded function that, based on the first argument provided, determines how to 'add' the arguments. If provided a number as a first argument, then it will assume the rest of the arguments are numbers and add them to the first, returning the numerical sum of the arguments. If an object, it will merge the keys of the provided arguments, returning a combined object.  Be aware that if merging objects, if arguments that have the same keys the argument who appears last with the key will prevail.  If called with an array as a first argument, the subsequent arguments will be added to the first via 'concat'.  If strings, the strings will be joined into a single string and returned.<br>(add 1 2 3) => 6<br>(add { `abc: 123 `def: 345 } { `def: 456 }) => { abc: 123, def: 456 }(add [ 1 2 3 ] [ 4 5 6] 7) => [ 1, 2, 3, [ 4, 5, 6 ], 7 ]<br>(add \"abc\" \"def\") => \"abcdef\"<br><br>Note that add doesn't typically need to explicily called.  The compiler will try and determine the best way to handle adding based on the arguments to be added, so the + operator should be used instead, since it gives the compiler an opportunity to inline if possible.","usage":["arg0:*","argN:*"],"tags":["add","+","sum","number","addition","merge","join","concat"]
},"merge_objects":{ "core_lang":true,"description":"Merge objects takes an array of objects and returns an object whose keys and values are the sum of the provided objects (same behavior as add with objects).  If objects have the same keys, the last element in the array with the duplicate key will be used to provide the value for that key.","usage":["objects:array"],"tags":["add","merge","keys","values","objects","value"]
},"index_of":{ "core_lang":true,"description":"Given a value and an array container, returns the index of the value in the array, or -1 if not found.","usage":["value:number|string|boolean","container:array"],"tags":["find","position","index","array","contains"]
},"resolve_path":{ "core_lang":true,"description":"Given a path and a tree structure, which can be either an array or an object, traverse the tree structure and return the value at the path if it exists, otherwise undefined is returned.<br>(resolve_path [ 2 1 ] [ 1 2 [ 3 4 5 ] 6 7]) => 4)","usage":["path:array","tree_structure:array|object"],"tags":["find","position","index","path","array","tree","contains","set_path"]
},"min_value":{ "core_lang":true,"description":"Returns the minimum value in the provided array of numbers.","usage":["elements:array"],"tags":["min","max_value","array","elements","minimum","number"]
},"max_value":{ "core_lang":true,"description":"Returns the maximum value in the provided array of numbers.","usage":["elements:array"],"tags":["min","max_value","array","elements","minimum","number"]
},"interlace":{ "core_lang":true,"usage":["list0:array","list1:array","listn?:array"],"description":"Returns a list containing a consecutive values from each list, in argument order.  I.e. list0.0 list1.0 listn.0 list0.1 list1.1 listn.1 ...","tags":["list","array","join","merge"]
},"trim":{ "core_lang":true,"description":"Removes leading and trailing spaces from the provided string value.","usage":["value:string"],"tags":["string","spaces","clean","squeeze","leading","trailing","space"]
},"assert":{ "core_lang":true,"description":"If the evaluated assertion form is true, the result is returned, otherwise an EvalError is thrown with the optionally provided failure message.","usage":["form:*","failure_message:string?"],"tags":["true","error","check","debug","valid","assertion"]
},"unquotify":{ "core_lang":true,"description":"Removes binding symbols and quotes from a supplied value.  For use in compile time function such as macros.","usage":["val:string"],"tags":["macro","quote","quotes","desym"]
},"or_args":{ "core_lang":true,"description":"Provided an array of values, returns true if any of the values are true, otherwise will return false.","usage":["argset:array"],"tags":["or","true","false","array","logic"]
},"special_operators":{ "core_lang":true
},"defclog":{ "core_lang":true,"description":"Given a description object, containing specific keys, returns a customized console logging function implements the given requested properties.<br>Options<br>prefix:string:The prefix to log prior to any supplied user arguments.<br>color:string:The text color to use on the prefix (or initial argument if no prefix)<br>background:string:The background coloe to use on the prefix (or initial argument if no prefix)<br>","usage":["options:object"],"tags":["log","logging","console","utility"]
},"NOT_FOUND":{ "core_lang":true
},"check_external_env_default":{ "core_lang":true
},"*namespace*":{ "core_lang":true
},"pending_ns_loads":{ "core_lang":true
},"pend_load":{ "core_lang":true,"description":"When used as an initializer wrapper via the use_symbols macro, the wrapped initializer will not be loaded until the from_namespace is loaded to ensure that the wrapped initializer won't fail due to not yet loaded dependencies.","usage":["from_namespace:string","target_namespace:string","symbol:string","initializer:array"],"tags":["symbol","definitions","namespace","scope","dependency","dependencies","require"]
},"load_pends":{ "core_lang":true
},"symbols":{ "core_lang":true,"description":"Returns an array of the defined global symbols for the local environment.  If opts.unique is true, only symbols that are not part of the built ins are included.","usage":["opts:object"],"tags":["symbol","names","definitions","values","scope"]
},"set_global":{ "core_lang":true
},"get_global":{ "core_lang":true
},"symbol_definition":{ "core_lang":true,"description":"Given a symbol name and an optional namespace, either as a fully qualified path or via the target_namespace argument, returns definition information about the retquested symbol.  Used primarily by the compiler to find metadata for a specific symbol during compilation.","usage":["symname:string","namespace:string"],"tags":["compiler","symbols","namespace","search","context","environment"]
},"compile":{ "core_lang":true,"description":"Compiles the given JSON or quoted lisp and returns a string containing the lisp form or expression as javascript.<br>If passed the option { meta: true } , an array is returned containing compilation metadata in element 0 and the compiled code in element 1.","usage":["json_expression:*","opts:object"],"tags":["macro","quote","quotes","desym","compiler"]
},"env_log":{ "core_lang":true,"description":"The environment logging function used by the environment.","usage":["arg0:*","argN:*"]
},"evaluate_local":{ "core_lang":true
},"evaluate":{ "core_lang":true
},"eval_struct":{ "core_lang":true
},"*formatting_rules*":{ "requires":["split_by"]
},"defmacro":{ "eval_when":{ "compile_time":true
},"description":"Defines the provided name as a compile time macro function in the current namespace environment. The parameters in the lambda list are destructured and bound to the provided names which are then available in the macro function.  The forms are used as the basis for the function with the final form expected to return a quoted form which is then as the expansion of the macro by the compiler. The body of forms are explicitly placed in a progn block.  Like with functions and defglobal, if the final argument to defmacro is an object, this will be used for the metadata associated with with the bound symbol provided as name.<br>Example:<br> (defmacro unless (condition `& forms)\n    `(if (not ,#condition)\n       (do \n         ,@forms))\n    {\n     `description: \"opposite of if, if the condition is false then the forms are evaluated\"\n     `usage: [\"condition:array\" \"forms:array\"]\n     `tags: [\"if\" \"not\" \"ifnot\" \"logic\" \"conditional\"]\n     }) <br>In the above example the macro unless is defined.  Passed arguments must be explicitly unquoted or an error may be thrown because the arguments condition and forms *may* not be defined in the final compilation environment.  Note that if the symbols used by the macro are defined in the final compilation scope, that this may cause unexpected behavior due to the form being placed into the compilation tree and then acting on those symbols. <br>Be aware that if a macro being defined returns an object (not an array) you should explicitly add the final metadata form to explictly ensure appropriate interpretation of the argument positions.<br><br>Since a macro is a function that is defined to operate at compile time vs. run time, the rules of declare apply.  Declaration operate normally and should be the first form in the block, or if using let, the first form after the allocation block of the let.","usage":["name:symbol","lambda_list:array","forms:array","meta?:object"],"tags":["macro","define","compile","function"],"requires":["last","is_object?","not","blank?","pop","or_args","length","flatten","destructure_list","add","starts_with?","as_lisp"]
},"read_lisp":{ "requires":["reader"]
},"desym":{ "eval_when":{ "compile_time":true
},"name":"desym","macro":true,"fn_args":"(val)","description":"Given a value or arrays of values, return the provided symbol in it's literal, quoted form, e.g. (desym myval) => \"myval\"","usage":["val:string|array"],"tags":["symbol","reference","literal","desymbolize","dereference","deref","desym_ref"],"requires":["as_lisp","is_string?","is_array?"]
},"desym_ref":{ "eval_when":{ "compile_time":true
},"name":"desym_ref","macro":true,"fn_args":"(val)","description":["=:+","Given a value will return the a string containing the desymbolized value or values. ","Example: <br>","(defglobal myvar \"foo\")<br>","(defglobal myarr [ (quote myvar) ])<br>","(desym_ref myarr) => (myvar)<br>","(desym_ref myarr.0) => myvar<br>","(subtype (desym_ref myarr.0)) => \"String\""],"usage":["val:*"],"tags":["symbol","reference","syntax","dereference","desym","desym_ref"]
},"deref":{ "eval_when":{ "compile_time":true
},"name":"deref","macro":true,"fn_args":"(val)","description":["=:+","If the value that the symbol references is a binding value, aka starting with '=:', then return the symbol value ","instead of the value that is referenced by the symbol. This is useful in macros where a value in a form is ","to be used for it's symbolic name vs. it's referenced value, which may be undefined if the symbol being ","de-referenced is not bound to any value. <br>","Example:<br>","Dereference the symbolic value being held in array element 0:<br>","(defglobal myvar \"foo\")<br>","(defglobal myarr [ (quote myvar) ])<br>","(deref my_array.0) => \"my_var\"<br>","(deref my_array) => [ \"=:my_var\" ]<br>","<br>In the last example, the input to deref isn't a string and so it returns the value as is.  See also desym_ref."],"tags":["symbol","reference","syntax","dereference","desym","desym_ref"],"usage":["symbol:string"]
},"when":{ "eval_when":{ "compile_time":true
},"name":"when","macro":true,"fn_args":"(condition \"&\" mbody)","description":["=:+","Similar to if, but the body forms are evaluated in an implicit progn, if the condition form or expression is true. ","The function when will return the last form value.  There is no evaluation of the body if the conditional expression ","is false."],"usage":["condition:*","body:*"],"tags":["if","condition","logic","true","progn","conditional"]
},"if_compile_time_defined":{ "eval_when":{ "compile_time":true
},"name":"if_compile_time_defined","macro":true,"fn_args":"(quoted_symbol exists_form not_exists_form)","description":"If the provided quoted symbol is a defined symbol at compilation time, the exists_form will be compiled, otherwise the not_exists_form will be compiled.","tags":["compile","defined","global","symbol","reference"],"usage":["quoted_symbol:string","exists_form:*","not_exists_form:*"],"requires":["describe"]
},"defexternal":{ "eval_when":{ "compile_time":true
},"name":"defexternal","macro":true,"fn_args":"(name value)","description":"Given a name and a value, defexternal will add a globalThis property with the symbol name thereby creating a global variable in the javascript environment.","tags":["global","javascript","globalThis","value"],"usage":["name:string","value:*"]
},"defun":{ "eval_when":{ "compile_time":true
},"name":"defun","macro":true,"fn_args":"(name lambda_list body meta)","description":["=:+","Defines a top level function in the current environment.  Given a name, lambda_list,","body, and a meta data description, builds, compiles and installs the function in the","environment under the provided name.  The body isn't an explicit progn, and must be","within a block structure, such as progn, let or do."],"usage":["name:string:required","lambda_list:array:required","body:array:required","meta:object"],"tags":["function","lambda","define","environment"],"requires":["or_args","length","flatten","destructure_list","add","unquotify","as_lisp"]
},"defun_sync":{ "eval_when":{ "compile_time":true
},"name":"defun_sync","macro":true,"fn_args":"(name args body meta)","description":["=:+","Creates a top level synchronous function as opposed to the default via defun, which creates an asynchronous top level function.","Doesn't support destructuring bind in the lambda list (args). ","Given a name, an argument list, a body and symbol metadata, will establish a top level synchronous function.  If the name is ","fully qualified, the function will be compiled in the current namespace (and it's lexical environment) and placed in the ","specified namespace."],"usage":["name:string","args:array","body:*","meta:object"],"tags":["define","function","synchronous","toplevel"],"requires":["add","unquotify","as_lisp"]
},"macroexpand":{ "name":"macroexpand","fn_args":"(quoted_form)","description":"Given a quoted form, will perform the macro expansion and return the expanded form.","usage":["quoted_form:*"],"tags":["macro","expansion","debug","compile","compilation"],"requires":["current_namespace","is_function?","resolve_path"]
},"macroexpand_nq":{ "eval_when":{ "compile_time":true
},"name":"macroexpand_nq","macro":true,"fn_args":"(form)","description":"[Deprecated] - use macroexpand.  The nq form takes a non quoted form and returns the expansion. Used primarily during early development.","usage":["form:*"],"tags":["macro","deprecated","expansion","debug","compile","compilation"],"deprecated":true,"requires":["is_function?"]
},"check_type":{ "eval_when":{ "compile_time":true
},"name":"check_type","macro":true,"fn_args":"(thing type_name error_string)","description":"If the type of thing (ascertained by sub_type) are not of the type type_name, will throw a TypeError with the optional error_string as the error message.","usage":["thing:*","type_name:string","error_string:string"],"tags":["types","validation","type","assert"]
},"get_object_path":{ "name":"get_object_path","fn_args":"(refname)","description":"get_object_path is used by the compiler to take a string based notation in the form of p[a][b] or p.a.b and returns an array of the components.","tags":["compiler"],"usage":["refname:string"],"requires":["split_by","push","join"]
},"do_deferred_splice":{ "name":"do_deferred_splice","fn_args":"(tree)","description":"Internally used by the compiler to facilitate splice operations on arrays.","usage":["tree:*"],"tags":["compiler","build"],"requires":["join","is_array?","push","is_object?","pairs"]
},"define":{ "eval_when":{ "compile_time":true
},"name":"define","macro":true,"fn_args":"(\"&\" defs)","usage":["declaration:array","declaration:array*"],"description":["=:+","Given 1 or more declarations in the form of (symbol value ?metadata), ","creates a symbol in global scope referencing the provided value.  If a ","metadata object is provided, this is stored as a the symbol's metadata."],"tags":["symbol","reference","definition","metadata","environment"],"requires":["push","as_lisp","is_object?"]
},"defbinding":{ "eval_when":{ "compile_time":true
},"name":"defbinding","macro":true,"fn_args":"(\"&\" args)","description":["=:+","Defines a global binding to a potentially native function.  This macro ","facilitates the housekeeping by keeping track of the source form ","used (and stored in the environment) so that the save environment ","facility can capture the source bindings and recreate it in the initializer ","function on rehydration.<br>","The macro can take an arbitrary amount of binding arguments, with the form: ","(symbol_name (fn_to_bind_to this))"],"usage":["binding_set0:array","binding_setN:array"],"tags":["toplevel","global","bind","environment","initialize"],"requires":["is_array?","push","*namespace*","is_string?","starts_with?","is_object?","add"]
},"define_env":{ "eval_when":{ "compile_time":true
},"name":"define_env","macro":true,"fn_args":"(\"&\" defs)","description":["=:+","define_env is a macro used to provide a dual definition on the top level: it creates a symbol via defvar in the ","constructed scope as well as placing a reference to the defined symbol in the scope object."],"usage":["definitions:array"],"tags":["environment","core","build"],"requires":["push","as_lisp","is_object?","add"]
},"type":{ "name":"type","fn_args":"(x)","usage":["value:*"],"description":"returns the type of value that has been passed.  Deprecated, and the sub_type function should be used.","tags":["types","value","what"]
},"destructure_list":{ "name":"destructure_list","fn_args":"(elems)","description":"Destructure list takes a nested array and returns the paths of each element in the provided array.","usage":["elems:array"],"tags":["destructuring","path","array","nested","tree"],"requires":["is_array?","map","add","is_object?","pairs","push"]
},"destructuring_bind":{ "eval_when":{ "compile_time":true
},"name":"destructuring_bind","macro":true,"fn_args":"(bind_vars expression \"&\" forms)","description":["=:+","The macro destructuring_bind binds the variable symbols specified in bind_vars to the corresponding ","values in the tree structure resulting from the evaluation of the provided expression.  The bound ","variables are then available within the provided forms, which are then evaluated.  Note that ","destructuring_bind only supports destructuring arrays. Destructuring objects is not supported."],"usage":["bind_vars:array","expression:array","forms:*"],"tags":["destructure","array","list","bind","variables","allocation","symbols"],"requires":["random_int","destructure_list","is_array?","starts_with?","push","assert","is_value?","resolve_path","is_object?","join","conj","range","length"]
},"split_by_recurse":{ "name":"split_by_recurse","fn_args":"(token container)","usage":["token:string","container:string|array"],"description":["=:+","Like split_by, splits the provided container at ","each token, returning an array of the split ","items.  If the container is an array, the function ","will recursively split the strings in the array ","and return an array containing the split values ","of that array.  The final returned array may contain ","strings and arrays."],"tags":["split","nested","recursion","array","string"],"requires":["is_string?","split_by","is_array?","map","split_by_recurse"]
},"no_await":{ "eval_when":{ "compile_time":true
},"name":"no_await","macro":true,"fn_args":"(form)","description":["=:+","For the provided form in an asynchronous context, forces the compiler flag ","to treat the form as synchronous, thus avoiding an await call.  The return ","value may be impacted and result in a promise being returned ","as opposed to a resolved promise value."],"usage":["no_await:array"],"tags":["compiler","synchronous","await","promise"]
},"reduce":{ "eval_when":{ "compile_time":true
},"name":"reduce","macro":true,"fn_args":"((elem item_list) form)","description":"Provided a first argument as a list which contains a binding variable name and a list, returns a list of all non-null return values that result from the evaluation of the second list.","usage":[["binding-elem:symbol","values:list"],["form:list"]],"tags":["filter","remove","select","list","array"]
},"reduce_sync":{ "eval_when":{ "compile_time":true
},"name":"reduce_sync","macro":true,"fn_args":"((elem item_list) form)","description":"Provided a first argument as a list which contains a binding variable name and a list, returns a list of all non-null return values that result from the evaluation of the second list.","usage":[["binding-elem:symbol","values:list"],["form:list"]],"tags":["filter","remove","select","list","array"]
},"bind_function":{ "description":"Reference bind and so has the exact same behavior.  Used for Kina legacy code. See bind description.","requires":["bind"]
},"is_error?":{ "name":"is_error?","fn_args":"(val)","description":"Returns true if the passed value is a instance of an Error type, otherwise returns false.","usage":["val:*"],"tags":["Error","types","predicate","type","instanceof"]
},"is_reference?":{ "eval_when":{ "compile_time":true
},"name":"is_reference?","macro":true,"fn_args":"(val)","description":["=:+","Returns true if the quoted value is a binding string; in JSON notation this would be a string starting with \"=:\". ","Note that this function doesn't check if the provided value is a defined symbol, but only if it has been ","described in the JSON structure as a bounding string."],"usage":["val:string"],"tags":["reference","JSON","binding","symbol","predicate"]
},"scan_str":{ "name":"scan_str","fn_args":"(regex search_string)","description":["=:+","Using a provided regex and a search string, performs a regex ","exec using the provided regex argument on the string argument. ","Returns an array of results or an empty array, with matched ","text, index, and any capture groups."],"usage":["regex:RegExp","text:string"],"tags":["regex","string","match","exec","array"],"requires":["is_regex?","not","push","to_object","keys"]
},"remove_prop":{ "name":"remove_prop","fn_args":"(obj key)","usage":["obj:object","key:*"],"description":["=:+","If the provided key exists, removes the key from the provided object, ","and returns the removed value if the key exists, otherwise returned undefined."],"tags":["object","key","value","mutate","delete_prop","remove"],"requires":["not","delete_prop"]
},"object_methods":{ "name":"object_methods","fn_args":"(obj)","description":"Given a instantiated object, get all methods (functions) that the object and it's prototype chain contains.","usage":["obj:object"],"tags":["object","methods","functions","introspection","keys"],"requires":["map","is_function?"]
},"expand_dot_accessor":{ "name":"expand_dot_accessor","fn_args":"(val ctx)","description":"Used for compilation. Expands dotted notation of a.b.0.1 to a[\"b\"][0][1]","usage":["val:string","ctx:object"],"tags":["compiler","system"],"requires":["split_by","take","is_object?","contains?","object_methods","not","join","conj","flatten","is_number?"]
},"getf_ctx":{ "name":"getf_ctx","fn_args":"(ctx name _value)","description":"Used for compilation. Given a context structure, provides a utility function for retrieving a context value based on a provided identifier.","usage":["tree:array","name:string"],"tags":["compiler","system"],"requires":["is_string?","not","getf_ctx"]
},"setf_ctx":{ "name":"setf_ctx","fn_args":"(ctx name value)","description":"Used for compilation. Given a context structure, provides a utility function for setting a context place with value.","usage":["tree:array","name:string","value:*"],"tags":["compiler","system"],"requires":["getf_ctx"]
},"set_path":{ "name":"set_path","fn_args":"(path obj value)","description":["=:+","Given a path value as an array, a tree structure, and a value, ","sets the value within the tree at the path value, potentially overriding any existing value at that path.<br><br>","(defglobal foo [ 0 2 [ { `foo: [ 1 4 3 ] `bar: [ 0 1 2 ] } ] 3 ])<br>","(set_path [ 2 0 `bar 1 ] foo 10) => [ 0 10 2 ]<br>","foo => [ 0 2 [ { foo: [ 1 4 3 ] bar: [ 0 10 2 ] } ] 3 ]"],"tags":["resolve_path","path","set","tree","mutate"],"usage":["path:array","tree:array|object","value:*"],"requires":["pop","resolve_path"]
},"minmax":{ "name":"minmax","fn_args":"(container)","description":["=:+","Given an array container with numeric values, returns an array with smallest ","and largest values in the given array [ min, max ]<br>","(minmax [ 2 0 1 3]) -> [ 0 3 ]"],"usage":["container:array"],"tags":["min","max","array","number","range"],"requires":["MAX_SAFE_INTEGER","is_array?","length","is_number?"]
},"aif":{ "eval_when":{ "compile_time":true
},"name":"aif","macro":true,"fn_args":"(test_expr eval_when_true eval_when_false)","description":["=:+","Anaphoric If - This macro defines a scope in which the symbol `it is used ","to store the evaluation of the test form or expression.  It is then available ","in the eval_when_true form and, if provided, the eval_when_false expression."],"usage":["test_expression:*","eval_when_true:*","eval_when_false:*?"],"tags":["conditional","logic","anaphoric","if","it"]
},"ifa":{ "eval_when":{ "compile_time":true
},"name":"ifa","macro":true,"fn_args":"(test thenclause elseclause)","description":"Similar to if, the ifa macro is anaphoric in binding, where the it value is defined as the return value of the test form. Use like if, but the it reference is bound within the bodies of the thenclause or elseclause.","usage":["test:*","thenclause:*","elseclause:*"],"tags":["cond","it","if","anaphoric"]
},"map_range":{ "name":"map_range","fn_args":"(n from_range to_range)","usage":["n:number","from_range:array","to_range:array"],"tags":["range","scale","conversion"],"description":["=:+","Given an initial number n, and two numeric ranges, maps n from the first range ","to the second range, returning the value of n as scaled into the second range. "]
},"range_inc":{ "name":"range_inc","fn_args":"(start end step)","description":["=:+","Similar to range, but is end inclusive: [start end] returning an array containing values from start, including end. ","vs. the regular range function that returns [start end).  ","If just 1 argument is provided, the function returns an array starting from 0, up to and including the provided value."],"usage":["start:number","end?:number","step?:number"],"tags":["range","iteration","loop"],"requires":["range","add"]
},"color_for_number":{ "name":"color_for_number","fn_args":"(num saturation brightness)","usage":["number:number","saturation:float","brightness:float"],"description":"Given an arbitrary integer, a saturation between 0 and 1 and a brightness between 0 and 1, return an RGB color string","tags":["ui","color","view"],"requires":["map_range","HSV_to_RGB"]
},"flatten_ctx":{ "name":"flatten_ctx","fn_args":"(ctx _var_table)","description":"Internal usage by the compiler, flattens the hierarchical context structure to a single level. Shadowing rules apply.","usage":["ctx_object:object"],"tags":["system","compiler"],"requires":["keys","not","contains?","flatten_ctx"]
},"identify_symbols":{ "name":"identify_symbols","fn_args":"(quoted_form _state)","requires":["is_array?","push","identify_symbols","is_string?","starts_with?","as_lisp","describe","is_object?","values"]
},"unless":{ "eval_when":{ "compile_time":true
},"name":"unless","macro":true,"fn_args":"(condition \"&\" forms)","description":"opposite of if, if the condition is false then the forms are evaluated","usage":["condition:array","forms:array"],"tags":["if","not","ifnot","logic","conditional"]
},"use_quoted_initializer":{ "eval_when":{ "compile_time":true
},"name":"use_quoted_initializer","macro":true,"fn_args":"(\"&\" forms)","description":" \nuse_quoted_initializer is a macro that preserves the source form in the symbol definition object. \nWhen the environment is saved, any source forms that wish to be preserved through the \nserialization process should be in the body of this macro.  This is a necessity for global \nobjects that hold callable functions, or functions or structures that require initializers,\nsuch as things that connect or use environmental resources.\n","usage":["forms:array"],"tags":["compilation","save_env","export","source","use","compiler","compile"],"requires":["is_array?","is_object?","resolve_path","set_path","warn","is_string?","macroexpand"]
},"random_int":{ "name":"random_int","fn_args":"(\"&\" \"args\")","description":"Returns a random integer between 0 and the argument.  If two arguments are provided then returns an integer between the first argument and the second argument.","usage":["arg1:number","arg2?:number"],"tags":["rand","number","integer"],"requires":["length","add"]
},"resolve_multi_path":{ "name":"resolve_multi_path","fn_args":"(path obj not_found)","tags":["path","wildcard","tree","structure"],"usage":["path:array","obj:object","not_found:?*"],"description":"Given a list containing a path to a value in a nested array, return the value at the given path. If the value * is in the path, the path value is a wild card if the passed object structure at the path position is a vector or list.","requires":["is_object?","length","first","not","is_array?","resolve_multi_path","rest","values"]
},"symbol_tree":{ "name":"symbol_tree","fn_args":"(quoted_form _state _current_path)","description":"Given a quoted form as input, isolates the symbols of the form in a tree structure so dependencies can be seen.","usage":["quoted_form:quote"],"tags":["structure","development","analysis"],"requires":["unquotify","resolve_multi_path","is_array?","push","map","symbol_tree","conj","add","is_string?","starts_with?","is_object?","pairs"]
},"except_nil":{ "name":"except_nil","fn_args":"(\"items\")","description":"Takes the passed list or set and returns a new list that doesn't contain any undefined or nil values.  Unlike no_empties, false values and blank strings will pass through.","usage":["items:list|set"],"tags":["filter","nil","undefined","remove","no_empties"],"requires":["not","sub_type","push"]
},"each":{ "name":"each","fn_args":"(items property)","description":["=:+","Provided a list of items, provide a property name or ","a list of property names to be extracted and returned from the source array as a new list.","If property is an array, and contains values that are arrays, those arrays will be treated as a path."],"usage":["items:list","property:string|list|function|AsyncFunction"],"tags":["pluck","element","only","list","object","property"],"requires":["is_string?","is_number?","except_nil","sub_type","is_array?","push","resolve_path","is_function?"]
},"replace":{ "name":"replace","fn_args":"(\"&\" args)","description":["=:+","Given at least 3 arguments, finds the first  argument, and replaces with the second argument, operating on the third plus argument.  ","This function will act to replace and find values in strings, arrays and objects.  When replacing values in strings, be aware that ","only the first matching value will be replaced.  To replace ALL values in strings, use a RegExp with the `g flag set, such as ","(new RegExp \"Target String\" `g).  For example, the following replaces all target values in the target string:<br>","(replace (new RegExp \"Indiana\" `g) \"Illinois\" \"The address of the location in Indiana has now been changed to 123 Main Street, Townville, Indiana.\")"],"usage":["target:string|regexp","replacement:string|number","container:string|array|object"],"tags":["replace","find","change","edit","string","array","object"],"requires":["slice","push","replace","keys","not","first"]
},"env_encode_string":{ "name":"env_encode_string","fn_args":"(text)","requires":["push"]
},"cl_encode_string":{ "name":"cl_encode_string","fn_args":"(text)","requires":["is_string?","replace","add","split_by","join"]
},"fn_signature":{ "name":"fn_signature","fn_args":"(f)","description":["=:+","For a given function as an argument, returns an object with a ","type key containing the function type (async, sync) and an args ","key with an array for the arguments"],"usage":["f:function"],"tags":["function","signature","arity","inspect"],"requires":["is_function?","trim","first","split_by","replace","starts_with?","second","chop","index_of"]
},"path_to_js_syntax":{ "name":"path_to_js_syntax","fn_args":"(comps)","description":"Used by the compiler, converts an array containing the components of a path to Javascript syntax, which is then returned as a string.","usage":["comps:array"],"tags":["compiler","path","js","javascript"],"requires":["is_array?","join","map","int","starts_with?","sub_type"]
},"first_is_upper_case?":{ "name":"first_is_upper_case?","fn_args":"(str_val)","description":"Returns true if the first character of the provided string is an uppercase value in the range [A-Z]. ","usage":["str_val:string"],"tags":["string","case","uppercase","capitalized"]
},"safe_access_2":{ "name":"safe_access_2","fn_args":"(token ctx sanitizer_fn)","requires":["split_by","push","take","join","expand_dot_accessor","flatten"]
},"safe_access":{ "name":"safe_access","fn_args":"(token ctx sanitizer_fn)","requires":["split_by","push","take","expand_dot_accessor","join","flatten"]
},"compile_to_js":{ "eval_when":{ "compile_time":true
},"name":"compile_to_js","macro":true,"fn_args":"(quoted_form)","description":["=:+","Given a quoted form, returns an array with two elements, element 0 is the compilation metadata, ","and element 1 is the output Javascript as a string."],"usage":["quoted_form:*"],"tags":["compilation","source","javascript","environment"]
},"evaluate_compiled_source":{ "eval_when":{ "compile_time":true
},"name":"evaluate_compiled_source","macro":true,"fn_args":"(compiled_source)","description":["=:+","The macro evaluate_compiled_source takes the direct output of the compiler, ","which can be captured using the macro compile_to_js, and performs the ","evaluation of the compiled source, thereby handling the second half of the ","compile then evaluate cycle.  This call will return the results of ","the evaluation of the compiled code assembly."],"usage":["compiled_source:array"],"tags":["compilation","compile","eval","pre-compilation"]
},"form_structure":{ "name":"form_structure","fn_args":"(quoted_form max_depth)","description":["=:+","Given a form and an optional max_depth positive number, ","traverses the passed JSON form and produces a nested array structure that contains","the contents of the form classified as either a \"symbol\", \"number\", \"string\", \"boolean\", \"array\", \"object\", or the elem itself. ","The returned structure will mirror the passed structure in form, except with the leaf contents ","being replaced with generalized categorizations."],"tags":["validation","compilation","structure"],"usage":["quoted_form:*","max_depth:?number"],"requires":["MAX_SAFE_INTEGER","is_array?","is_object?","map","add","pairs","is_string?","starts_with?","is_number?"]
},"validate_form_structure":{ "name":"validate_form_structure","fn_args":"(validation_rules quoted_form)","description":["=:+","Given a validation rule structure and a quoted form to analyze returns an object with ","two keys, valid and invalid, which are arrays containing the outcome of the rule ","evaluation, a rule_count key containing the total rules passed, and an all_passed key","which will be set to true if all rules passed, otherwise it will fail.","If the rule evaluates successfully, valid is populated with the rule path, ","otherwise the rule path is placed in the invalid array.<br><br>","Rule structure is as follows:<br><code>","[ [path [validation validation ...] \"rule_name\"] [path [validation ...] \"rule_name\"] ]<br>","</code>","where path is an array with the index path and ","validation is a single argument lambda (fn (v) v) that must either ","return true or false. If true, the validation is considered correct, ","false for incorrect.  The result of the rule application will be put in the valid array, ","otherwise the result will be put in invalid."],"tags":["validation","rules","form","structure"],"usage":["validation_rules:array","quoted_form:*"],"requires":["length","is_array?","resolve_path","not","push"]
},"*compiler_syntax_rules*":{ "initializer":["=:try",{ "compile_let":[[[0,1,"val"],["=:list","=:is_array?"],"let allocation section"],[[0,2],["=:list",["=:fn",["=:v"],["=:not",["=:==","=:v","=:undefined"]]]],"let missing block"]],"compile_cond":[[[0],["=:list",["=:fn",["=:v"],["=:==",["=:%",["=:length",["=:rest","=:v"]],2],0]]],"cond: odd number of arguments"]],"compile_assignment":[[[0,1],["=:list",["=:fn",["=:v"],["=:not",["=:==","=:v","=:undefined"]]]],"assignment is missing target and values"],[[0,2],["=:list",["=:fn",["=:v"],["=:not",["=:==","=:v","=:undefined"]]]],"assignment is missing value"]]
},["=:catch","=:Error",["=:e"],"=:e"]],"requires":["is_array?","not","length","rest"]
},"compiler_source_chain":{ "name":"compiler_source_chain","fn_args":"(cpath tree sources)","requires":["is_array?","chop","as_lisp","resolve_path","add","not","blank?","push","compiler_source_chain"]
},"compiler_syntax_validation":{ "name":"compiler_syntax_validation","fn_args":"(validator_key tokens errors ctx tree)","requires":["*compiler_syntax_rules*","validate_form_structure","is_array?","chop","is_object?","not","push","getf_ctx","first","compiler_source_chain","rest"]
},"describe_all":{ "name":"describe_all","fn_args":"()","description":"Returns an object with all defined symbols as the keys and their corresponding descriptions.","usage":[],"tags":["env","environment","symbol","symbols","global","globals"],"requires":["add","to_object","describe","symbols"]
},"is_value?":{ "name":"is_value?","fn_args":"(val)","description":"Returns true for anything that is not nil or undefined or false.","usage":["val:*"],"tags":["if","value","truthy",false,true]
},"sort":{ "name":"sort","fn_args":"(elems options)","description":["=:+","Given an array of elements, and an optional options object, returns a new sorted array.","With no options provided, the elements are sorted in ascending order.  If the key ","reversed is set to true in options, then the elements are reverse sorted. ","<br>","An optional synchronous function can be provided (defined by the comparitor key) which is expected to take ","two values and return the difference between them as can be used by the sort method of ","JS Array.  Additionally a key value can be provided as either a string (separated by dots) or as an array ","which will be used to bind (destructure) the a and b values to be compared to nested values in the elements ","of the array.","<br>","<br>","Options:<br>","reversed:boolean:if true, the elements are reverse sorted.  Note that if a comparitor function is provided, then ","this key cannot be present, as the comparitor should deal with the sorting order.<br>","key:string|array:A path to the comparison values in the provided elements. If a string, it is provided as period ","separated values.  If it is an array, each component of the array is a successive path value in the element to be ","sorted. <br>","comparitor:function:A synchronous function that is to be provided for comparison of two elements.  It should take ","two arguments, and return the difference between the arguments, either a positive or negative."],"usage":["elements:array","options:object?"],"tags":["array","sorting","order","reverse","comparison","objects"],"requires":["is_object?","is_function?","is_string?","assert","is_array?","not","path_to_js_syntax","get_object_path","conj"]
},"and*":{ "name":"and*","fn_args":"(\"&\" vals)","description":["=:+","Similar to and, but unlike and, values that ","are \"\" (blank) or NaN are considered to be true.","Uses is_value? to determine if the value should be considered to be true.","Returns true if the given arguments all are considered a value, ","otherwise false.  If no arguments are provided, returns undefined."],"usage":["val0:*","val1:*","val2:*"],"tags":["truth","and","logic","truthy"],"requires":["not","is_value?"]
},"or*":{ "name":"or*","fn_args":"(\"&\" vals)","description":["=:+","Similar to or, but unlike or, values that ","are \"\" (blank) or NaN are considered to be true.","Uses is_value? to determine if the value should be considered to be true.","Returns true if the given arguments all are considered a value, ","otherwise false.  If no arguments are provided, returns undefined."],"usage":["val0:*","val1:*","val2:*"],"tags":["truth","or","logic","truthy"],"requires":["is_value?"]
},"either":{ "name":"either","fn_args":"(\"&\" args)","description":["=:+","Similar to or, but unlike or, returns the first non nil ","or undefined value in the argument list whereas or returns ","the first truthy value."],"usage":["values:*"],"tags":["nil","truthy","logic","or","undefined"],"requires":["not"]
},"sanitize_js_ref_name":{ "name":"sanitize_js_ref_name","fn_args":"(symname)","requires":["not","is_string?","split_by","push","contains?","join"]
},"is_symbol?":{ "eval_when":{ "compile_time":true
},"name":"is_symbol?","macro":true,"fn_args":"(symbol_to_find)","usage":["symbol:string|*"],"description":["=:+","If provided a quoted symbol, will return true if the symbol can be found ","in the local or global contexts."],"tags":["context","env","def"]
},"defvalue":{ "eval_when":{ "compile_time":true
},"name":"defvalue","macro":true,"fn_args":"(sym value meta)","description":["=:+","If the provided symbol is already defined as an accessible ","global value from the current namespace it will return the ","defined value, otherwise it will define the global in the ","current (implicit) namespace or the explicitly referenced ","namespace.  Returns the newly defined value or previously ","defined value."],"usage":["sym:symbol|string","value:*","meta:?object"],"tags":["allocation","reference","symbol","value","set","reference","global"]
},"defparameter":{ "eval_when":{ "compile_time":true
},"name":"defparameter","macro":true,"fn_args":"(sym value meta)"
},"get_function_args":{ "name":"get_function_args","fn_args":"(f)","description":"Given a javascript function, return a list of arg names for that function","usage":["function:function"],"tags":["function","introspect","introspection","arguments"],"requires":["scan_str","is_object?","map","ends_with?","chop","split_by","second"]
},"findpaths":{ "name":"findpaths","fn_args":"(value structure)","requires":["is_array?","map","is_object?","conj","push","pairs"]
},"warn":{ "description":"Prefixes a warning symbol prior to the arguments to the console.  Otherwise the same as console.log.","usage":["args0:*","argsN:*"],"tags":["log","warning","error","signal","output","notify","defclog"],"initializer":["=:defclog",{ "prefix":"⚠️  "
}],"requires":["defclog"]
},"success":{ "description":"Prefixes a green checkmark symbol prior to the arguments to the console.  Otherwise the same as console.log.","usage":["args0:*","argsN:*"],"tags":["log","warning","notify","signal","output","ok","success","defclog"],"initializer":["=:defclog",{ "color":"green","prefix":"✓  "
}],"requires":["defclog"]
},"in_background":{ "eval_when":{ "compile_time":true
},"name":"in_background","macro":true,"fn_args":"(\"&\" forms)","description":["=:+","Given a form or forms, evaluates the forms in the background, with ","the function returning true immediately prior to starting the forms."],"usage":["forms:*"],"tags":["eval","background","promise","evaluation"]
},"set_compiler":{ "name":"set_compiler","fn_args":"(compiler_function)","description":["=:+","Given a compiled compiler function, installs the provided function as the ","environment's compiler, and returns the compiler function."],"usage":["compiler_function:function"],"tags":["compilation","environment","compiler"]
},"show":{ "name":"show","fn_args":"(thing)","usage":["thing:function"],"description":"Given a name to a compiled function, returns the source of the compiled function.  Otherwise just returns the passed argument.","tags":["compile","source","javascript","js","display"],"requires":["is_function?"]
},"export_symbols":{ "eval_when":{ "compile_time":true
},"name":"export_symbols","macro":true,"fn_args":"(\"&\" args)","requires":["length","is_array?","push","is_string?","starts_with?"]
},"register_feature":{ "name":"register_feature","fn_args":"(feature)","description":"Adds the provided string to the *env_config* features.  Features are used to mark what functionality is present in the environment.","tags":["environment","modules","libraries","namespaces"],"usage":["feature:string"],"requires":["not","contains?","*env_config*","push"]
},"uniq":{ "name":"uniq","fn_args":"(values)","description":["=:+","Given a list of values, returns a new list with unique, deduplicated values. ","If the values list contains complex types such as objects or arrays, set the ","handle_complex_types argument to true so they are handled appropriately. "],"usage":["values:list"],"tags":["list","dedup","duplicates","unique","values"],"requires":["map","to_array"]
},"time_in_millis":{ "eval_when":{ "compile_time":true
},"name":"time_in_millis","macro":true,"fn_args":"()","usage":[],"tags":["time","milliseconds","number","integer","date"],"description":"Returns the current time in milliseconds as an integer"
},"defns":{ "name":"defns","fn_args":"(name options)","usage":["name:string","options:object"],"description":["=:+","Given a name and an optional options object, creates a new namespace ","identified by the name argument.  If the options object is provided, the following keys are available:","<br>","ignore_if_exists:boolean:If set to true, if the namespace is already defined, do not return an error ","and instead just return with the name of the requested namespace. Any other options are ignored and ","the existing namespace isn't altered.","contained:boolean:If set to true, the newly defined namespace will not have visibility to other namespaces ","beyond 'core' and itself.  Any fully qualified symbols that reference other non-core namespaces will ","fail.","serialize_with_image:boolean:If set to false, if the environment is saved, the namespace will not be ","included in the saved image file.  Default is true."],"tags":["namespace","environment","define","scope","context"],"requires":["is_string?","contains?","namespaces","create_namespace"]
},"use_ns":{ "eval_when":{ "compile_time":true
},"name":"use_ns","macro":true,"fn_args":"(name)","usage":["name:symbol"],"description":"Sets the current namespace to the provided name.  Returns the name of the new namespace if succesful, otherwise an Eval error is thrown","tags":["namespace","environment","scope","change","set"]
},"bind_and_call":{ "name":"bind_and_call","fn_args":"(target_object this_object method \"&\" args)","usage":["target_object:object","this_object:object","method:string","args0:*","argsn:*"],"description":"Binds the provided method of the target object with the this_object context, and then calls the object method with the optional provided arguments.","tags":["bind","object","this","context","call"],"requires":["bind"]
},"save_locally":{ "name":"save_locally","fn_args":"(fname data content_type)","description":["=:+","Provided a filename, a data buffer, and a MIME type, such as \"text/javascript\", ","triggers a browser download of the provided data with the filename.  Depending ","on the browser configuration, the data will be saved to the configured ","user download directory, or prompt the user for a save location. "],"usage":["filename:string","data:*","content_type:string"],"tags":["save","download","browser"],"requires":["document"]
},"fetch_text":{ "name":"fetch_text","fn_args":"(url)","description":["=:+","Given a url, returns the text content of that url. ","This function is a helper function for the import macro."],"usage":["url:string"],"tags":["fetch","text","string"]
},"import":{ "eval_when":{ "compile_time":true
},"name":"import","macro":true,"fn_args":"(\"&\" args)","description":["=:+","Load the contents of the specified source file (including path) into the Lisp environment ","in the current namespace.<br>","If the file is a Lisp source, it will be evaluated as part of the load and the final result returned.","If the file is a JS source, it will be loaded into the environment and a handle returned.","When importing non-Lisp sources (javascript or typescript), import requires a binding symbol in an array ","as the first argument.<br","The allowed extensions are .lisp, .js, .json, .juno, and if the JS platform is Deno, ",".ts is allowed.  Otherwise an EvalError will be thrown due to a non-handled file type.","Examples:<br>","Lisp/JSON: (import \"tests/compiler_tests.lisp\")<br>","JS/TS: (import (logger) \"https://deno.land/std@0.148.0/log/mod.ts\""],"tags":["compile","read","io","file","get","fetch","load"],"usage":["binding_symbols:array","filename:string"],"requires":["last","contains?","not","starts_with?","ends_with?","length","is_array?","push","current_namespace"]
},"system_date_format":{ "description":"The system date format structure that is used by the system_date_formatter.If modified, the system_date_formatter, which is a Intl.DateTimeFormat object should be reinitialized by calling (new Intl.DateTimeFormat [] system_date_format).","tags":["time","date","system"]
},"system_date_formatter":{ "initializer":["=:new","=:Intl.DateTimeFormat",[],{ "weekday":"long","year":"numeric","month":"2-digit","day":"2-digit","hour":"numeric","minute":"numeric","second":"numeric","fractionalSecondDigits":3,"hourCycle":"h24","hour12":false,"timeZoneName":"short"
}],"tags":["time","date","system"],"description":"The instantiation of the system_date_format.  See system_date_format for additional information.","requires":["system_date_format"]
},"tzoffset":{ "name":"tzoffset","fn_args":"()","description":"Returns the number of seconds the local timezone is offset from GMT","usage":[],"tags":["time","date","timezone"]
},"date_components":{ "name":"date_components","fn_args":"(date_value date_formatter)","usage":["date_value:Date","date_formatter:DateTimeFormat?"],"description":"Given a date value, returns an object containing a the current time information broken down by time component. Optionally pass a Intl.DateTimeFormat object as a second argument.","tags":["date","time","object","component"],"requires":["is_date?","to_object","map","bind_and_call","system_date_formatter"]
},"formatted_date":{ "name":"formatted_date","fn_args":"(dval date_formatter)","usage":["dval:Date","date_formatter:DateTimeFormat?"],"description":"Given a date object, return a formatted string in the form of: \"yyyy-MM-d HH:mm:ss\".  Optionally pass a Intl.DateTimeFormat object as a second argument.","tags":["date","format","time","string"],"requires":["date_components","join","values"]
},"dtext":{ "name":"dtext","fn_args":"(default_text)","usage":["text:string","key:string?"],"description":["=:+","Given a default text string and an optional key, if a key ","exists in the global object *LANGUAGE*, return the text associated with the key. ","If no key is provided, attempts to find the default text as a key in the *LANGUAGE* object. ","If that is a nil entry, returns the default text."],"tags":["text","multi-lingual","language","translation","translate"],"requires":["*LANGUAGE*"]
},"nth":{ "name":"nth","fn_args":"(idx collection)","description":["=:+","Based on the index or index list passed as the first argument, ","and a collection as a second argument, return the specified values ","from the collection. If an index value is negative, the value ","retrieved will be at the offset starting from the end of the array, ","i.e. -1 will return the last value in the array."],"tags":["filter","select","pluck","object","list","key","array"],"usage":["idx:string|number|array","collection:list|object"],"requires":["is_array?","map","nth","is_number?","length","add"]
},"use_symbols":{ "eval_when":{ "compile_time":true
},"name":"use_symbols","macro":true,"fn_args":"(namespace symbol_list target_namespace)","description":["=:+","Given a namespace and an array of symbols (quoted or unquoted), ","the macro will faciltate the binding of the symbols into the ","current namespace."],"usage":["namespace:string|symbol","symbol_list:array","target_namespace?:string"],"tags":["namespace","binding","import","use","symbols"],"requires":["is_string?","starts_with?","assert","is_array?","push","current_namespace"]
},"use_unique_symbols":{ "name":"use_unique_symbols","fn_args":"(namespace)","description":["=:+","This function binds all symbols unique to the provided ","namespace identifier into the current namespace. Returns ","the amount of symbol bound."],"usage":["namespace:string"],"tags":["namespace","binding","import","use","symbols"],"requires":["is_string?","length"]
},"decomp_symbol":{ "name":"decomp_symbol","fn_args":"(quoted_sym)","requires":["split_by","first","each","describe"]
},"sort_dependencies":{ "name":"sort_dependencies","fn_args":"()","requires":["index_of","push","decomp_symbol","pairs","conj","not","namespaces","contains?"]
},"symbols_by_namespace":{ "name":"symbols_by_namespace","fn_args":"(options)","requires":["to_object","sort","push","pairs","keys","namespaces"]
},"keys*":{ "name":"keys*","fn_args":"(obj)","description":["=:+","Like keys, but where keys uses Object.keys, keys* uses the function Object.getOwnpropertynames and returns the ","prototype keys as well."],"usage":["obj:Object"],"tags":["object","array","keys","property","properties","introspection"],"requires":["is_object?","first","push","flatten"]
},"pairs*":{ "name":"pairs*","fn_args":"(obj)","description":"Like pairs, but where keys uses Object.keys, pairs* returns the key-value pairs prototype heirarchy as well.","usage":["obj:Object"],"tags":["object","array","keys","property","properties","introspection","values"],"requires":["is_object?","keys*"]
},"analyze_text_line":{ "name":"analyze_text_line","fn_args":"(line)","description":["=:+","Given a line of text, analyzes the text for form/block openers, identified as ","(,{,[ and their corresponding closers, which correspod to ),},].  It then returns ","an object containing the following: <br><br>","{ delta:int   - a positive or negative integer that is represents the positive or negative depth change, <br>","  final_type: string - the final delimiter character found which can either be an opener or a closer, <br>","  final_pos: int - the position of the final delimiter, <br>","  line: string - the line of text analyzed, <br>","  indent: int - the indentation space count found in the line, <br>","  openers: array - an array of integers representing all column positions of found openers in the line.<br>","  closers: array - an array of integers representing all column positions of found closers in the line. }<br><br>","The function does not count opening and closing tokens if they appear in a string."],"tags":["text","tokens","form","block","formatting","indentation"],"usage":["line:string"],"requires":["not","push","split_by"]
},"calculate_indent_rule":{ "name":"calculate_indent_rule","fn_args":"(delta movement_needed)","description":["=:+","Given a delta object as returned from analyze_text_line, and an integer representing the ","the amount of tree depth to change, calculates the line indentation required for the ","given delta object, and creates an indent property in the delta object containing ","the given amount of spaces to prepend to the line.  References the *formatting_rules* ","object as needed to determine minor indentation from standard indentation, as well as ","which symbols are identified as keywords.  Returns the provided delta object with the ","indent key added."],"tags":["indentation","text","formatting"],"usage":["delta:object","movement_needed:int"],"requires":["first","not","blank?","push","split_by","contains?","meta_for_symbol","starts_with?","*formatting_rules*","add","last","built_ins"]
},"format_lisp_line":{ "name":"format_lisp_line","fn_args":"(line_number get_line)","description":["=:+","Given a line number and an accessor function (synchronous), returns a","a text string representing the computed indentation for the provided ","line number. The get_line function to be provided will be called with ","a single integer argument representing a requested line number from ","the text buffer being analyzed.  The provided get_line function should ","return a string representing the line of text from the buffer containing ","the requested line. "],"tags":["formatting","indentation","text","indent"],"usage":["line_number:integer","get_line:function"],"requires":["is_function?","trim","analyze_text_line","calculate_indent_rule","join","range"]
},"keyword_mapper":{ "name":"keyword_mapper","fn_args":"(token)","requires":["contains?","*formatting_rules*"]
},"compiler":{ "requires":["take","is_array?","is_string?","is_function?","get_object_path","is_object?","blank?","delete_prop","scan_str","keys","is_element?","chop","as_lisp","resolve_path","push","split_by","safe_access","expand_dot_accessor","pairs","compiler_syntax_validation","pop","assert","rest","setf_ctx","prepend","ends_with?","range","join","path_to_js_syntax","get_outside_global","to_array","bind_function","each","read_lisp","warn","make_set"]
},"read_text_file":{ "description":"Given an accessible filename including path with read permissions returns the file contents as a string.","usage":["filename:string","options:object"],"tags":["file","read","text","input","io"],"initializer":["=:bind","=:Deno.readTextFile","=:Deno"],"requires":["bind"]
},"readline_mod":{ "initializer":["=:javascript","undefined"]
},"streams":{ "initializer":["=:javascript","undefined"]
},"repl":{ "name":"repl","fn_args":"(instream outstream opts)","description":["=:+","Implements a Read-Eval-Print for Juno.  This function takes ","an input stream, an output stream, and an optional options object ","and starts up a continuously running loop that waits for input ","and, once a fully closed expression is received, evaluates it ","and returns the result on the output stream.  The options object ","will affect the behavior of the REPL: <br><br>","raw:boolean:false:If raw mode is true, no prompt will be emitted ","into the output stream.<br>","prompt:function|string:the prompt to display when the REPL is ready ","for input.  If no values are given the default prompt is displayed ","which contains the current namespace and an arrow to indicate ","ready for input.<br>","subprompt:function|string::When a form isn't complete, and the user ","has pressed return, the subprompt is displayed until the form is closed.<br>","sigint_message:string:If the SIGINT signal is received, the prompt for the ","REPL to display.<br>","output_processor:function::The function to call when the REPL has received output ","from the evaluation process.  This function can be used to encode or otherwise ","package the return value for consumption by the output stream.<br>","use_console:boolean:false:If true, the output is sent to the console, as opposed ","to the direct output stream. <br>"],"usage":["input:stream","output:stream","options:object"],"tags":["repl","eval","read","output"],"requires":["either","resolve_path","*env_config*","readline_mod","is_function?","is_string?","current_namespace","join","map","range","length","range_inc","streams","warn","reader","add","push","prepend","first","pop","*namespace*","$","$$","second","$$$"]
},"set_repl":{ "name":"set_repl","fn_args":"(key value)","description":"Given a configuration key and a value, sets the provided REPL config key to the value.","usage":["key:string","value:*"],"tags":["repl","config"],"requires":["set_path","*env_config*"]
},"repl_config":{ "name":"repl_config","fn_args":"()","description":["=:+","Returns the environment configuration options that are ","available for the repl and their current settings."],"tags":["repl","config"],"usage":[],"requires":["add","resolve_path","*env_config*"]
},"path":{ "initializer":["=:javascript","undefined"]
},"write_text_file":{ "description":"Given a string path to a filename, an argument containing the string of text to be written, and an optional options argument write the file to the filesystem.<br><br>.The WriteFileOptions corresponds to the Deno WriteFileOptions interface","usage":["filepath:string","textdata:string","options:WriteFileOptions"],"tags":["file","write","io","text","string"],"initializer":["=:bind","=:Deno.writeTextFile","=:Deno"],"requires":["bind"]
},"load":{ "name":"load","fn_args":"(filename)","description":["=:+","Compile and load the contents of the specified lisp filename (including path) into the Lisp environment. ","The file contents are expected to be Lisp source code in text format."],"tags":["compile","read","io","file"],"usage":["filename:string"],"requires":["path","evaluate","read_text_file"]
},"with_fs_events":{ "eval_when":{ "compile_time":true
},"name":"with_fs_events","macro":true,"fn_args":"((event_binding location) body)","description":["=:+","This function sets up a watcher scope for events on a filesystem. ","The symbol passed to the event_binding is bound to new events that occur ","at the provided location.  Once an event occurs, the body forms are executed."],"usage":["event_binding:symbol","location:string","body:array"],"tags":["file","filesystem","events","io","watch"]
},"compile_buffer":{ "name":"compile_buffer","fn_args":"(input_buffer export_function_name options)","description":["=:+","Given an input lisp file, and an optional initalizer function name and options ","object, compile the lisp file into a javascript file. The options object will ","allow the specification of an output path and filename, given by the key ","output_file.  If the initializer function isn't specified it is named ","initializer, which when used with load, will be automatically called ","one the file is loaded.  Otherwise the initializer function should be ","called when after dynamically importing, using dynamic_import. If the ","options object is to be used, with a default initializer, nil should be ","used as a placeholder for the initializer_function name.<br><br>","Options are as follows:<br><br>","js_headers: array: If provided, this is an array of strings that represent","lines to be inserted at the top of the file.","include_source: boolean: If provided will append the block forms and ","expressions within the text as comments.","output_file: string: If provided the path and filename of the compiled ","javascript file to be produced.","include_boilerplate: boolean: If set to false explicity, the boilerplate","code will be not be included in the build.","<br><br>","NOTE: this function's API is unstable and subject to change due to ","the early phase of this language."],"usage":["input_file:string","initializer_function:string?","options:object?"],"tags":["compile","environment","building","javascript","lisp","file","export"],"requires":["add","is_object?","map","pairs","length","scan_str","push","is_array?","compiler","warn","contains?","is_string?","join","not","write_text_file","success"]
},"compile_file":{ "name":"compile_file","fn_args":"(lisp_file export_function_name options)","requires":["path","read_text_file","read_lisp","compile_buffer","add"]
},"rebuild_env":{ "name":"rebuild_env","fn_args":"(opts)","description":["=:+","Builds the lisp environment from the Lisp sources and produces the Javascript output files ","necessary for initializing the environment. Options: <br>","source_dir:string:The directory of the Lisp sources, the default is './src'.<br>","output_dir:string:The directory to where the output Javascript files are placed.  The default is './js'.<br>","include_source:boolean:If true, the compiler will include comments of the lisp source (not fully supported yet).<br>","version_tag:string:A string based label signifying the text to use as the version.  If not specified, the version ","tag uses the format year.month.day.hour.minute.<br>"],"usage":["options:object?"],"tags":["compile","export","build","environment","javascript"],"requires":["date_components","not","blank?","join","formatted_date","path","push","load","success","compile_file"]
},"*env_skeleton*":{ "requires":["reader","read_text_file"]
},"*initializer*":{ "name":"core/*initializer*","fn_args":"()","requires":["repl"]
}
} 
})(),declarations:{
    safety:{
        level:2
    }
},config:{
    export:{
        save_path:"js/juno.js",default_namespace:"user",include_source:false
    },features:["compiler","repl","io","Deno","build-tools","*env_skeleton*"],build:"2022.10.20.12.02",imports:await ( async function(){
        let __obj__283=new Object();
        __obj__283["core/readline_mod"]={
            symbol:"readline_mod",namespace:"core",location:"https://deno.land/x/readline/mod.ts"
        };
        __obj__283["core/streams"]={
            symbol:"streams",namespace:"core",location:"https://deno.land/std/streams/conversion.ts"
        };
        __obj__283["user/path"]={
            symbol:"path",namespace:"user",location:"https://deno.land/std@0.110.0/path/mod.ts"
        };
        return __obj__283;
        
    })(),repl:new Object()
},imports:{
    readline_mod:{
        initializer:new function () { return readline_mod },symbol:"readline_mod",namespace:"core"
    },streams:{
        initializer:new function () { return streams },symbol:"streams",namespace:"core"
    },path:{
        initializer:new function () { return path },symbol:"path",namespace:"user"
    }
},symbols:await ( async function(){let __obj__1=new Object();__obj__1["MAX_SAFE_INTEGER"]=9007199254740991;__obj__1["LispSyntaxError"]=LispSyntaxError;__obj__1["sub_type"]=subtype;__obj__1["__VERBOSITY__"]=0;__obj__1["int"]=parseInt;__obj__1["float"]=parseFloat;__obj__1["values"]=function anonymous(...args
) {
{
                                let acc = [];
                                for (let _i in args) {
                                    let value = args[_i];
                                    let type = subtype(value);
                                    if (value instanceof Set)  {
                                        acc = acc.concat(Array.from(value));
                                    } else if (type==='array') {
                                        acc = acc.concat(value);
                                    } else if (type==='object') {
                                        acc = acc.concat(Object.values(value))
                                    } else {
                                        acc = acc.concat(value);
                                    }
                                }
                                return acc;
                            }
};__obj__1["pairs"]=function anonymous(obj
) {
{
                                    if (subtype(obj)==='array') {
                                        let rval = [];
                                        for (let i = 0; i < obj.length; i+=2) {
                                            rval.push([obj[i],obj[i+1]]);
                                        }
                                        return rval;
                                    } else {
                                        let keys = Object.keys(obj);
                                        let rval = keys.reduce(function(acc,x,i) {
                                            acc.push([x,obj[x]])
                                            return acc;
                                        },[]);
                                        return rval;
                                    }
                                }
};__obj__1["keys"]=function anonymous(obj
) {
{  return Object.keys(obj);  }
};__obj__1["take"]=function anonymous(place
) {
{ return place.shift() }
};__obj__1["prepend"]=function anonymous(place,thing
) {
{ return place.unshift(thing) }
};__obj__1["first"]=function anonymous(x
) {
{ return x[0] }
};__obj__1["last"]=function anonymous(x
) {
{ return x[x.length - 1] }
};__obj__1["length"]=function anonymous(obj
) {
{
                                if(obj instanceof Array) {
                                    return obj.length;
                                } else if (obj instanceof Set) {
                                    return obj.size;
                                } else if ((obj === undefined)||(obj===null)) {
                                    return 0;
                                } else if (typeof obj==='object') {
                                    return Object.keys(obj).length;
                                } else if (typeof obj==='string') {
                                    return obj.length;
                                } 
                                return 0;
                            }
};__obj__1["conj"]=function anonymous(...args
) {
{   let list = [];
                                if (args[0] instanceof Array) {
                                    list = args[0];
                                } else {
                                    list = [args[0]];
                                }
                                args.slice(1).map(function(x) {
                                    list = list.concat(x);
                                });
                                return list;
                            }
};__obj__1["reverse"]=function anonymous(container
) {
{ return container.slice(0).reverse }
};__obj__1["map"]=async function anonymous(lambda,array_values
) {
{ try {
                                        let rval = [],
                                                tl = array_values.length;
                                        for (let i = 0; i < array_values.length; i++) {
                                            rval.push(await lambda.apply(this,[array_values[i], i, tl]));
                                         }
                                        return rval;
                                    } catch (ex) {           
                                              if (lambda === undefined || lambda === null) {
                                                    throw new ReferenceError("map: lambda argument (position 0) is undefined or nil")
                                              } else if (array_values === undefined || array_values === null) {
                                                    throw new ReferenceError("map: container argument (position 1) is undefined or nil")
                                              } else if (!(lambda instanceof Function)) {
                                                    throw new ReferenceError("map: lambda argument must be a function: received: "+ typeof lambda)
                                              } else if (!(array_values instanceof Array)) {
                                                    throw new ReferenceError("map: invalid array argument, received: " + typeof array_values)
                                              } else {
                                                    // something else just pass on the error
                                                throw ex;
                                              }
                                    }
                              }
};__obj__1["bind"]=function anonymous(func,this_arg
) {
{ return func.bind(this_arg) }
};__obj__1["to_object"]=function anonymous(array_values
) {
{
                                      let obj={}
                                      array_values.forEach((pair)=>{
                                             obj[pair[0]]=pair[1]
                                      });
                                      return obj;
                                    }
};__obj__1["to_array"]=async function(container) {
                        return await async function(){
                            if (check_true ((container instanceof Array))) {
                                return container
                            } else if (check_true (await (await get_global("is_set?"))(container))) {
                                {
                                    let acc=[];
                                    ;
                                    await container["forEach"].call(container,async function(v) {
                                        return (acc).push(v)
                                    });
                                    return acc
                                }
                            } else if (check_true ((container instanceof String || typeof container==='string'))) {
                                return (container).split("")
                            } else if (check_true ((container instanceof Object))) {
                                return await pairs(container)
                            } else {
                                return await (async function(){
                                    let __array_op_rval__45=container;
                                     if (__array_op_rval__45 instanceof Function){
                                        return await __array_op_rval__45() 
                                    } else {
                                        return [__array_op_rval__45]
                                    }
                                })()
                            }
                        } ()
                    };__obj__1["slice"]=function(target,from,to) {
                        return   (function(){
                            if (check_true (to)) {
                                return  target["slice"].call(target,from,to)
                            } else if (check_true (from)) {
                                return  target["slice"].call(target,from)
                            } else {
                                throw new SyntaxError("slice requires 2 or 3 arguments");
                                
                            }
                        } )()
                    };__obj__1["rest"]=function(x) {
                        return   (function(){
                            if (check_true ((x instanceof Array))) {
                                return  x["slice"].call(x,1)
                            } else if (check_true ((x instanceof String || typeof x==='string'))) {
                                return  x["substr"].call(x,1)
                            } else {
                                return null
                            }
                        } )()
                    };__obj__1["second"]=function anonymous(x
) {
{ return x[1] }
};__obj__1["third"]=function anonymous(x
) {
{ return x[2] }
};__obj__1["chop"]=function anonymous(x
) {
{ if (x instanceof Array) { return x.slice(0, x.length-1) } else { return x.substr(0,x.length-1) } }
};__obj__1["chomp"]=function anonymous(x
) {
{ return x.substr(x.length-1) }
};__obj__1["not"]=function anonymous(x
) {
{ if (check_true(x)) { return false } else { return true } }
};__obj__1["push"]=function anonymous(place,thing
) {
{ return place.push(thing) }
};__obj__1["pop"]=function anonymous(place
) {
{ return place.pop() }
};__obj__1["list"]=async function(...args) {
                        return args
                    };__obj__1["flatten"]=function anonymous(x
) {
{ return x.flat(999999999999) } 
};__obj__1["jslambda"]=function(...args) {
                        return  ( function(){
                            let __apply_args__70= flatten(args);
                            return ( Function).apply(this,__apply_args__70)
                        })()
                    };__obj__1["join"]=function(...args) {
                        return   (function(){
                            if (check_true ((args.length===1))) {
                                return  args['0']["join"].call(args['0'],"")
                            } else {
                                return  args['1']["join"].call(args['1'],args['0'])
                            }
                        } )()
                    };__obj__1["lowercase"]=function(x) {
                        return  x["toLowerCase"]()
                    };__obj__1["uppercase"]=function(x) {
                        return  x["toUpperCase"]()
                    };__obj__1["log"]=function(...args) {
                        return  ( function(){
                            return ( console.log).apply(this,args)
                        })()
                    };__obj__1["split"]=function anonymous(container,token
) {
{ return container.split(token) }
};__obj__1["split_by"]=function anonymous(token,container
) {
{ return container.split(token) }
};__obj__1["is_object?"]=function anonymous(x
) {
{ return x instanceof Object }
};__obj__1["is_array?"]=function anonymous(x
) {
{ return x instanceof Array }
};__obj__1["is_number?"]=function(x) {
                        return ( subtype(x)==="Number")
                    };__obj__1["is_function?"]=function(x) {
                        return (x instanceof Function)
                    };__obj__1["is_set?"]=function anonymous(x
) {
{ return x instanceof Set }
};__obj__1["is_element?"]=function anonymous(x
) {
{ return x instanceof Element }
};__obj__1["is_string?"]=function(x) {
                        return ((x instanceof String)|| (typeof x==="string"))
                    };__obj__1["is_nil?"]=async function(value) {
    return (null===value)
};__obj__1["is_regex?"]=async function(x) {
    return (await (await Environment.get_global("sub_type"))(x)==="RegExp")
};__obj__1["is_date?"]=function(x) {
                        return ( sub_type(x)==="Date")
                    };__obj__1["ends_with?"]=function anonymous(val,text
) {
{ if (text instanceof Array) { return text[text.length-1]===val } else if (subtype(text)=='String') { return text.endsWith(val) } else { return false }}
};__obj__1["starts_with?"]=function anonymous(val,text
) {
{ if (text instanceof Array) { return text[0]===val } else if (subtype(text)=='String') { return text.startsWith(val) } else { return false }}
};__obj__1["delete_prop"]=function anonymous(obj,...args
) {
{
                                        if (args.length == 1) {
                                            return delete obj[args[0]];
                                        } else {
                                            while (args.length > 0) {
                                                let prop = args.shift();
                                                delete obj[prop];
                                            }
                                        }
                                        return obj;
                                    }
};__obj__1["blank?"]=function(val) {
                        return ((val==null)|| ((val instanceof String || typeof val==='string')&& (val==="")))
                    };__obj__1["contains?"]=function anonymous(value,container
) {
{ if (!value && !container) { return false }
                           else if (container === null) { throw new TypeError("contains?: passed nil/undefined container value"); }
                           else if (container instanceof Array) return container.includes(value);
                           else if (container instanceof Set) return container.has(value);
                           else if ((container instanceof String) || typeof container === "string") {
                                if (subtype(value) === "Number") return container.indexOf(""+value)>-1;
                                else return container.indexOf(value)>-1;
                           }                                                      
                           else throw new TypeError("contains?: passed invalid container type: "+subtype(container)) }
};__obj__1["make_set"]=function(vals) {
                        if (check_true ((vals instanceof Array))){
                            return new Set(vals)
                        } else {
                            {
                                let vtype;
                                vtype= sub_type(vals);
                                return   (function(){
                                    if (check_true ((vtype==="Set"))) {
                                        return new Set(vals)
                                    } else if (check_true ((vtype==="object"))) {
                                        return new Set( values(vals))
                                    }
                                } )()
                            }
                        }
                    };__obj__1["meta_for_symbol"]=function(quoted_symbol,search_mode) {
                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){
                            {
                                let local_data=Environment.global_ctx.scope[quoted_symbol];
                                ;
                                let acc=[];
                                ;
                                if (check_true (search_mode)){
                                    {
                                        if (check_true (local_data)){
                                            {
                                                (acc).push( ( get_global("add"))({
                                                    namespace:namespace,name:quoted_symbol,type: subtype(local_data)
                                                }, ( function(){
                                                    let it;
                                                    it=Environment.definitions[quoted_symbol];
                                                    if (check_true (it)){
                                                        return it
                                                    } else {
                                                        return new Object()
                                                    }
                                                })()))
                                            }
                                        };
                                        if (check_true (parent_environment)){
                                            {
                                                {
                                                    let __collector;
                                                    let __result;
                                                    let __action;
                                                    __collector=[];
                                                    __result=null;
                                                    __action=function(info) {
                                                        return (acc).push(info)
                                                    };
                                                    ;
                                                     ( function() {
                                                        let __for_body__122=function(__item) {
                                                            __result= __action(__item);
                                                            if (check_true (__result)){
                                                                return (__collector).push(__result)
                                                            }
                                                        };
                                                        let __array__123=[],__elements__121= ( function() {
                                                            {
                                                                 let __call_target__= parent_environment["meta_for_symbol"].call(parent_environment,quoted_symbol,true), __call_method__="flat";
                                                                return  __call_target__[__call_method__].call(__call_target__,1)
                                                            } 
                                                        })();
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__120 in __elements__121) {
                                                            __array__123.push( __for_body__122(__elements__121[__iter__120]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__123.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__123;
                                                         
                                                    })();
                                                    __collector
                                                }
                                            }
                                        };
                                        if (check_true (( length( keys(children))>0))){
                                            {
                                                {
                                                    let __collector;
                                                    let __result;
                                                    let __action;
                                                    __collector=[];
                                                    __result=null;
                                                    __action=function(details) {
                                                        return (acc).push(details)
                                                    };
                                                    ;
                                                     ( function() {
                                                        let __for_body__126=function(__item) {
                                                            __result= __action(__item);
                                                            if (check_true (__result)){
                                                                return (__collector).push(__result)
                                                            }
                                                        };
                                                        let __array__127=[],__elements__125= ( function(){
                                                            let ____collector__128=  function(){
                                                                return []
                                                            };
                                                            let ____result__129=  function(){
                                                                return null
                                                            };
                                                            let ____action__130=  function(){
                                                                return function(child_data) {
                                                                    if (check_true ( not((child_data['0']=== ( get_global("current_namespace"))())))){
                                                                        {
                                                                            return  child_data['1']["meta_for_symbol"].call(child_data['1'],quoted_symbol)
                                                                        }
                                                                    }
                                                                }
                                                            };
                                                            {
                                                                let __collector= ____collector__128();
                                                                ;
                                                                let __result= ____result__129();
                                                                ;
                                                                let __action= ____action__130();
                                                                ;
                                                                ;
                                                                 ( function() {
                                                                    let __for_body__133=function(__item) {
                                                                        __result= __action(__item);
                                                                        if (check_true (__result)){
                                                                            return (__collector).push(__result)
                                                                        }
                                                                    };
                                                                    let __array__134=[],__elements__132= pairs(children);
                                                                    let __BREAK__FLAG__=false;
                                                                    for(let __iter__131 in __elements__132) {
                                                                        __array__134.push( __for_body__133(__elements__132[__iter__131]));
                                                                        if(__BREAK__FLAG__) {
                                                                             __array__134.pop();
                                                                            break;
                                                                            
                                                                        }
                                                                    }return __array__134;
                                                                     
                                                                })();
                                                                return __collector
                                                            }
                                                        })();
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__124 in __elements__125) {
                                                            __array__127.push( __for_body__126(__elements__125[__iter__124]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__127.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__127;
                                                         
                                                    })();
                                                    __collector
                                                }
                                            }
                                        };
                                        return acc
                                    }
                                } else {
                                    {
                                        quoted_symbol= ( function(){
                                            if (check_true ( starts_with_ques_( ( function(){
                                                 return "=:" 
                                            })(),quoted_symbol))){
                                                return  quoted_symbol["substr"].call(quoted_symbol,2)
                                            } else {
                                                return quoted_symbol
                                            }
                                        })();
                                        {
                                            let it;
                                            it=Environment.definitions[quoted_symbol];
                                            if (check_true (it)){
                                                return  ( get_global("add"))({
                                                    namespace:namespace,type: sub_type(local_data),name:quoted_symbol
                                                },it)
                                            } else {
                                                return null
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    };__obj__1["describe"]=async function(quoted_symbol,search_mode) {
                        let internal_results=await meta_for_symbol(quoted_symbol,true);
                        ;
                        if (check_true (((internal_results instanceof Array)&& internal_results['0']))){
                            if (check_true (search_mode)){
                                return internal_results
                            } else {
                                return await first(internal_results)
                            }
                        } else {
                            {
                                let external_results=await get_outside_global(quoted_symbol);
                                ;
                                if (check_true (external_results)){
                                    return {
                                        location:"external",type:await subtype(external_results)
                                    }
                                } else {
                                    return null
                                }
                            }
                        }
                    };__obj__1["undefine"]=function(quoted_symbol) {
                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){
                            {
                                let namespace_identity;
                                let parent_call;
                                let child_call;
                                let target_symbol;
                                namespace_identity=(quoted_symbol).split("/");
                                parent_call=null;
                                child_call=null;
                                target_symbol=null;
                                ;
                                return   (function(){
                                    if (check_true ((((namespace_identity.length===1)&& Environment.global_ctx.scope[namespace_identity['0']])|| ((namespace_identity.length>1)&& (namespace_identity['0']===namespace))))) {
                                        {
                                            target_symbol= ( function(){
                                                if (check_true ((namespace_identity.length>1))){
                                                    return namespace_identity['1']
                                                } else {
                                                    return namespace_identity['0']
                                                }
                                            })();
                                             delete_prop(Environment.definitions,target_symbol);
                                            if (check_true (Environment.global_ctx.scope[target_symbol])){
                                                return  delete_prop(Environment.global_ctx.scope,target_symbol)
                                            } else {
                                                return false
                                            }
                                        }
                                    } else if (check_true (((namespace_identity.length>1)&& parent_environment))) {
                                        {
                                            parent_call= parent_environment["get_global"].call(parent_environment,"undefine");
                                            return (parent_call)(quoted_symbol)
                                        }
                                    } else if (check_true (((namespace_identity.length>1)&& children[namespace_identity['0']]))) {
                                        {
                                            child_call= ( function() {
                                                {
                                                     let __call_target__=children[namespace_identity['0']], __call_method__="get_global";
                                                    return  __call_target__[__call_method__].call(__call_target__,"undefine")
                                                } 
                                            })();
                                            return  child_call(quoted_symbol)
                                        }
                                    } else {
                                        return false
                                    }
                                } )()
                            }
                        } else {
                            throw new SyntaxError("undefine requires a quoted symbol");
                            
                        }
                    };__obj__1["eval_exp"]=async function(expression) {
                        return await (async function(){
                            let __array_op_rval__141=expression;
                             if (__array_op_rval__141 instanceof Function){
                                return await __array_op_rval__141() 
                            } else {
                                return [__array_op_rval__141]
                            }
                        })()
                    };__obj__1["indirect_new"]=function anonymous(...args
) {
{
                                    let targetClass = args[0];
                                    if (subtype(targetClass)==="String") {
                                        let tmpf=new Function("{ return "+targetClass+" }");
                                        targetClass = tmpf();
                                    }
                                    if (args.length==1) {
                                        let f = function(Class) {
                                            return new (Function.prototype.bind.apply(Class, args));
                                        }
                                        let rval = f.apply(this,[targetClass]);
                                        return rval;
                                    } else {
                                        let f = function(Class) {
                                            return new (Function.prototype.bind.apply(Class, args));
                                        }
                                        let rval = f.apply(this,[targetClass].concat(args.slice(1)));
                                        return rval;
                                    }}
};__obj__1["range"]=function(...args) {
                        let from_to;
                        let step;
                        let idx;
                        let acc;
                        from_to= ( function(){
                            if (check_true (args['1'])){
                                return [parseInt(args['0']),parseInt(args['1'])]
                            } else {
                                return [0,parseInt(args['0'])]
                            }
                        })();
                        step= ( function(){
                            if (check_true (args['2'])){
                                return parseFloat(args['2'])
                            } else {
                                return 1
                            }
                        })();
                        idx=from_to['0'];
                        acc=[];
                         ( get_global("assert"))((step>0),"range: step must be > 0");
                         ( get_global("assert"))((from_to['1']>=from_to['0']),"range: lower bound must be greater or equal than upper bound");
                         ( function(){
                             let __test_condition__146=function() {
                                return (idx<from_to['1'])
                            };
                            let __body_ref__147=function() {
                                (acc).push(idx);
                                return idx+=step
                            };
                            let __BREAK__FLAG__=false;
                            while( __test_condition__146()) {
                                 __body_ref__147();
                                 if(__BREAK__FLAG__) {
                                     break;
                                    
                                }
                            } ;
                            
                        })();
                        return acc
                    };__obj__1["add"]=function anonymous(...args
) {
{
                                let acc;
                                if (typeof args[0]==="number") {
                                    acc = 0;
                                } else if (args[0] instanceof Array) {
                                    return args[0].concat(args.slice(1));
                                } else if (typeof args[0]==='object') {
                                   let rval = {};
                                   for (let i in args) {
                                        if (typeof args[i] === 'object') {
                                            for (let k in args[i]) {
                                                rval[k] = args[i][k];
                                            }
                                        }
                                   }
                                   return rval;
                                } else {
                                    acc = "";
                                }
                                for (let i in args) {
                                    acc += args[i];
                                }
                                return acc;
                             }
};__obj__1["merge_objects"]=function anonymous(x
) {
{
                                    let rval = {};
                                    for (let i in x) {
                                        if (typeof i === 'object') {
                                            for (let k in x[i]) {
                                                rval[k] = x[i][k];
                                            }
                                        }
                                    }
                                    return rval;
                                 }
};__obj__1["index_of"]=function anonymous(value,container
) {
{ return container.indexOf(value) }
};__obj__1["resolve_path"]=function anonymous(path,obj
) {
{
                                        if (typeof path==='string') {
                                            path = path.split(".");
                                        }
                                        let s=obj;
                                        return path.reduce(function(prev, curr) {
                                            return prev ? prev[curr] : undefined
                                        }, obj || {})
                                    }
};__obj__1["min_value"]=function anonymous(elements
) {
{ return Math.min(...elements); }
};__obj__1["max_value"]=function anonymous(elements
) {
{ return Math.max(...elements); }
};__obj__1["interlace"]=async function(...args) {
                        let min_length;
                        let rlength_args;
                        let rval;
                        min_length=await min_value(await (async function(){
                             return await map(length,args) 
                        })());
                        rlength_args=await range(await length(args));
                        rval=[];
                        await (async function() {
                            let __for_body__164=async function(i) {
                                return await (async function() {
                                    let __for_body__168=async function(j) {
                                        return (rval).push(await (async function(){
                                            let __targ__170=args[j];
                                            if (__targ__170){
                                                 return(__targ__170)[i]
                                            } 
                                        })())
                                    };
                                    let __array__169=[],__elements__167=rlength_args;
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__166 in __elements__167) {
                                        __array__169.push(await __for_body__168(__elements__167[__iter__166]));
                                        if(__BREAK__FLAG__) {
                                             __array__169.pop();
                                            break;
                                            
                                        }
                                    }return __array__169;
                                     
                                })()
                            };
                            let __array__165=[],__elements__163=await range(min_length);
                            let __BREAK__FLAG__=false;
                            for(let __iter__162 in __elements__163) {
                                __array__165.push(await __for_body__164(__elements__163[__iter__162]));
                                if(__BREAK__FLAG__) {
                                     __array__165.pop();
                                    break;
                                    
                                }
                            }return __array__165;
                             
                        })();
                        return rval
                    };__obj__1["trim"]=function(x) {
                        return  x["trim"]()
                    };__obj__1["assert"]=function(assertion_form,failure_message) {
                        if (check_true (assertion_form)){
                            return assertion_form
                        } else {
                            throw new EvalError((failure_message|| "assertion failure"));
                            
                        }
                    };__obj__1["unquotify"]=async function(val) {
                        let dval;
                        dval=val;
                        if (check_true (await starts_with_ques_("\"",dval))){
                            dval=await dval["substr"].call(dval,1,(dval.length- 2))
                        };
                        if (check_true (await starts_with_ques_("=:",dval))){
                            dval=await dval["substr"].call(dval,2)
                        };
                        return dval
                    };__obj__1["or_args"]=async function(argset) {
                        let is_true;
                        is_true=false;
                        await (async function() {
                            let __for_body__181=async function(elem) {
                                if (check_true (elem)){
                                    {
                                        is_true=true;
                                        return __BREAK__FLAG__=true;
                                        return
                                    }
                                }
                            };
                            let __array__182=[],__elements__180=argset;
                            let __BREAK__FLAG__=false;
                            for(let __iter__179 in __elements__180) {
                                __array__182.push(await __for_body__181(__elements__180[__iter__179]));
                                if(__BREAK__FLAG__) {
                                     __array__182.pop();
                                    break;
                                    
                                }
                            }return __array__182;
                             
                        })();
                        return is_true
                    };__obj__1["special_operators"]=async function() {
                        return await make_set(await (async function(){
                             return await compiler([],{
                                special_operators:true,env:Environment
                            }) 
                        })())
                    };__obj__1["defclog"]=async function(opts) {
                        let style;
                        style=("padding: 5px;"+ await (async function(){
                            if (check_true (opts.background)){
                                return ("background: "+ opts.background+ ";")
                            } else {
                                return ""
                            }
                        })()+ await (async function(){
                            if (check_true (opts.color)){
                                return ("color: "+ opts.color+ ";")
                            }
                        })()+ "");
                        return async function(...args) {
                            return await (async function(){
                                let __target_arg__189=[].concat(await conj(await (async function(){
                                    let __array_op_rval__190=style;
                                     if (__array_op_rval__190 instanceof Function){
                                        return await __array_op_rval__190() 
                                    } else {
                                        return [__array_op_rval__190]
                                    }
                                })(),args));
                                if(!__target_arg__189 instanceof Array){
                                    throw new TypeError("Invalid final argument to apply - an array is required")
                                }let __pre_arg__191=("%c"+ await (async function(){
                                    if (check_true (opts.prefix)){
                                        return opts.prefix
                                    } else {
                                        return (args).shift()
                                    }
                                })());
                                __target_arg__189.unshift(__pre_arg__191);
                                return (console.log).apply(this,__target_arg__189)
                            })()
                        }
                    };__obj__1["NOT_FOUND"]=new Object();__obj__1["check_external_env_default"]=true;__obj__1["*namespace*"]="core";__obj__1["pending_ns_loads"]=new Object();__obj__1["pend_load"]=async function(from_namespace,target_namespace,symbol,initializer) {
                        if (check_true ((null==pending_ns_loads[from_namespace]))){
                            {
                                await async function(){
                                    pending_ns_loads[from_namespace]=[];
                                    return pending_ns_loads;
                                    
                                }()
                            }
                        };
                        (pending_ns_loads[from_namespace]).push({
                            symbol:symbol,source_ns:from_namespace,target_ns:target_namespace,initializer:await (async function(){
                                 return ["=:quote",initializer] 
                            })()
                        });
                        return initializer
                    };__obj__1["load_pends"]=async function(from_namespace) {
                        if (check_true (pending_ns_loads[from_namespace])){
                            {
                                let acc=[];
                                ;
                                acc=await (async function() {
                                    let __for_body__207=async function(load_instruction) {
                                        return ["=:use_symbols",load_instruction.source_ns,[load_instruction.symbol],load_instruction.target_ns]
                                    };
                                    let __array__208=[],__elements__206=pending_ns_loads[from_namespace];
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__205 in __elements__206) {
                                        __array__208.push(await __for_body__207(__elements__206[__iter__205]));
                                        if(__BREAK__FLAG__) {
                                             __array__208.pop();
                                            break;
                                            
                                        }
                                    }return __array__208;
                                     
                                })();
                                await console.log("load_pends: ",from_namespace,"->",acc);
                                (await Environment.eval(await async function(){
                                    return acc
                                }()));
                                return true
                            }
                        }
                    };__obj__1["symbols"]=async function(opts) {
                        return await async function(){
                            if (check_true ((null==opts))) {
                                return await keys(Environment.global_ctx.scope)
                            } else if (check_true (opts.unique)) {
                                {
                                    let no_includes=await make_set(await conj(["meta_for_symbol","describe","undefine","*namespace*","pend_load","symbols","set_global","get_global","symbol_definition","compile","env_log","evaluate_local","evaluate","eval_struct","set_compiler","clone","eval","add_escape_encoding","get_outside_global","as_lisp","lisp_writer","clone_to_new","save_env","null","compiler"],built_ins));
                                    ;
                                    {
                                        let __collector;
                                        let __result;
                                        let __action;
                                        __collector=[];
                                        __result=null;
                                        __action=async function(sym) {
                                            if (check_true (await no_includes["has"].call(no_includes,sym))){
                                                return null
                                            } else {
                                                return sym
                                            }
                                        };
                                        ;
                                        await (async function() {
                                            let __for_body__213=async function(__item) {
                                                __result=await __action(__item);
                                                if (check_true (__result)){
                                                    return (__collector).push(__result)
                                                }
                                            };
                                            let __array__214=[],__elements__212=await keys(Environment.global_ctx.scope);
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__211 in __elements__212) {
                                                __array__214.push(await __for_body__213(__elements__212[__iter__211]));
                                                if(__BREAK__FLAG__) {
                                                     __array__214.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__214;
                                             
                                        })();
                                        return __collector
                                    }
                                }
                            }
                        } ()
                    };__obj__1["set_global"]=function(refname,value,meta,is_constant,target_namespace,contained_req) {
                          (function(){
                            if (check_true ( not((typeof refname==="string")))) {
                                throw new TypeError("reference name must be a string type");
                                
                            } else if (check_true (((Environment===value)|| (Environment.global_ctx===value)|| (Environment.global_ctx.scope===value)))) {
                                {
                                    throw new EvalError("cannot set the environment scope as a global value");
                                    
                                }
                            }
                        } )();
                        if (check_true ( resolve_path( ( function(){
                            let __array_op_rval__217=refname;
                             if (__array_op_rval__217 instanceof Function){
                                return  __array_op_rval__217("constant") 
                            } else {
                                return [__array_op_rval__217,"constant"]
                            }
                        })(),Environment.definitions))){
                            {
                                throw new TypeError(("Assignment to constant variable "+ refname));
                                
                            }
                        };
                        let namespace_identity= ( function(){
                            if (check_true (target_namespace)){
                                return  ( function(){
                                    let __array_op_rval__218=target_namespace;
                                     if (__array_op_rval__218 instanceof Function){
                                        return  __array_op_rval__218(refname) 
                                    } else {
                                        return [__array_op_rval__218,refname]
                                    }
                                })()
                            } else {
                                return (refname).split("/")
                            }
                        })();
                        ;
                        return   (function(){
                            if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace===namespace_identity['0']))))) {
                                return  parent_environment["set_global"].call(parent_environment,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'],(contained|| contained_req))
                            } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {
                                {
                                    if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){
                                        return  ( function() {
                                            {
                                                 let __call_target__=children[namespace_identity['0']], __call_method__="set_global";
                                                return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'])
                                            } 
                                        })()
                                    } else {
                                        throw new EvalError(("namespace "+ namespace_identity['0']+ " doesn't exist"));
                                        
                                    }
                                }
                            } else {
                                {
                                    let comps= get_object_path( ( function(){
                                        if (check_true ((1===namespace_identity.length))){
                                            return namespace_identity['0']
                                        } else {
                                            return namespace_identity['1']
                                        }
                                    })());
                                    ;
                                      (function(){
                                        Environment.global_ctx.scope[comps['0']]=value;
                                        return Environment.global_ctx.scope;
                                        
                                    })();
                                    if (check_true (((meta instanceof Object)&&  not((meta instanceof Array))))){
                                        {
                                            if (check_true (is_constant)){
                                                {
                                                      (function(){
                                                        meta["constant"]=true;
                                                        return meta;
                                                        
                                                    })()
                                                }
                                            };
                                              (function(){
                                                Environment.definitions[comps['0']]=meta;
                                                return Environment.definitions;
                                                
                                            })()
                                        }
                                    } else {
                                        if (check_true (is_constant)){
                                            {
                                                  (function(){
                                                    Environment.definitions[comps['0']]={
                                                        constant:true
                                                    };
                                                    return Environment.definitions;
                                                    
                                                })()
                                            }
                                        }
                                    };
                                    return Environment.global_ctx.scope[comps['0']]
                                }
                            }
                        } )()
                    };__obj__1["get_global"]=function(refname,value_if_not_found,suppress_check_external_env,target_namespace,path_comps,contained_req) {
                        return   (function(){
                            if (check_true ( not((typeof refname==="string")))) {
                                throw new TypeError("reference name must be a string type");
                                
                            } else if (check_true ((refname==="Environment"))) {
                                return Environment
                            } else if (check_true ( compiler_operators["has"].call(compiler_operators,refname))) {
                                return special_identity
                            } else {
                                {
                                    let namespace_identity;
                                    let comps;
                                    let refval;
                                    let symbol_name;
                                    let check_external_env;
                                    namespace_identity= ( function(){
                                        if (check_true (target_namespace)){
                                            return  ( function(){
                                                let __array_op_rval__225=target_namespace;
                                                 if (__array_op_rval__225 instanceof Function){
                                                    return  __array_op_rval__225(refname) 
                                                } else {
                                                    return [__array_op_rval__225,refname]
                                                }
                                            })()
                                        } else {
                                            return (refname).split("/")
                                        }
                                    })();
                                    comps=(path_comps||  get_object_path( ( function(){
                                        if (check_true ((1===namespace_identity.length))){
                                            return namespace_identity['0']
                                        } else {
                                            return namespace_identity['1']
                                        }
                                    })()));
                                    refval=null;
                                    symbol_name=null;
                                    check_external_env= ( function(){
                                        if (check_true (suppress_check_external_env)){
                                            return false
                                        } else {
                                            return check_external_env_default
                                        }
                                    })();
                                    return   (function(){
                                        if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {
                                            return  parent_environment["get_global"].call(parent_environment,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps,(contained|| contained_req))
                                        } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {
                                            {
                                                if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){
                                                    return  ( function() {
                                                        {
                                                             let __call_target__=children[namespace_identity['0']], __call_method__="get_global";
                                                            return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps)
                                                        } 
                                                    })()
                                                } else {
                                                    {
                                                        throw new EvalError(("namespace "+ namespace_identity['0']+ " doesn't exist"));
                                                        
                                                    }
                                                }
                                            }
                                        } else {
                                            {
                                                refval=Environment.global_ctx.scope[comps['0']];
                                                if (check_true (((undefined===refval)&& (namespace_identity.length===1)&& parent_environment))){
                                                    {
                                                        let rval= parent_environment["get_global"].call(parent_environment,refname,value_if_not_found,suppress_check_external_env,null,comps,(contained|| contained_req));
                                                        ;
                                                        return rval
                                                    }
                                                } else {
                                                    {
                                                        if (check_true (((undefined===refval)&& check_external_env))){
                                                            refval= ( function(){
                                                                if (check_true (check_external_env)){
                                                                    return ( get_outside_global(comps['0'])|| NOT_FOUND)
                                                                } else {
                                                                    return NOT_FOUND
                                                                }
                                                            })()
                                                        };
                                                        return   (function(){
                                                            if (check_true (((NOT_FOUND===refval)&&  not((undefined===value_if_not_found))))) {
                                                                return value_if_not_found
                                                            } else if (check_true ((NOT_FOUND===refval))) {
                                                                {
                                                                    throw new ReferenceError(("symbol not found: "+  ( function(){
                                                                        if (check_true ((namespace_identity.length>1))){
                                                                            return  add(namespace,"/",namespace_identity['1'])
                                                                        } else {
                                                                            return  add(namespace,"/",namespace_identity['0'])
                                                                        }
                                                                    })()));
                                                                    
                                                                }
                                                            } else if (check_true ((comps.length===1))) {
                                                                return refval
                                                            } else if (check_true ((comps.length>1))) {
                                                                {
                                                                    return  resolve_path( rest(comps),refval)
                                                                }
                                                            } else {
                                                                {
                                                                     console.warn("get_global: condition fall through: ",comps);
                                                                    return NOT_FOUND
                                                                }
                                                            }
                                                        } )()
                                                    }
                                                }
                                            }
                                        }
                                    } )()
                                }
                            }
                        } )()
                    };__obj__1["symbol_definition"]=async function(symname,target_namespace) {
                        let namespace_identity;
                        namespace_identity=await (async function(){
                            if (check_true (target_namespace)){
                                return await (async function(){
                                    let __array_op_rval__228=target_namespace;
                                     if (__array_op_rval__228 instanceof Function){
                                        return await __array_op_rval__228(symname) 
                                    } else {
                                        return [__array_op_rval__228,symname]
                                    }
                                })()
                            } else {
                                if (check_true ((await length(symname)>2))){
                                    return (symname).split("/")
                                } else {
                                    return await (async function(){
                                        let __array_op_rval__229=symname;
                                         if (__array_op_rval__229 instanceof Function){
                                            return await __array_op_rval__229() 
                                        } else {
                                            return [__array_op_rval__229]
                                        }
                                    })()
                                }
                            }
                        })();
                        return await async function(){
                            if (check_true ((namespace_identity.length===1))) {
                                {
                                    let it;
                                    it=Environment.definitions[symname];
                                    if (check_true (it)){
                                        return it
                                    } else {
                                        if (check_true (parent_environment)){
                                            return await parent_environment["symbol_definition"].call(parent_environment,symname)
                                        }
                                    }
                                }
                            } else if (check_true ((namespace_identity['0']===namespace))) {
                                return Environment.definitions[symname]
                            } else if (check_true (parent_environment)) {
                                return await parent_environment["symbol_definition"].call(parent_environment,namespace_identity['1'],namespace_identity['0'])
                            } else if (check_true ((namespace_identity.length===2))) {
                                return await (async function() {
                                    {
                                         let __call_target__=children[namespace_identity['0']], __call_method__="symbol_definition";
                                        return await __call_target__[__call_method__].call(__call_target__,namespace_identity['1'])
                                    } 
                                })()
                            } else {
                                return undefined
                            }
                        } ()
                    };__obj__1["compile"]=async function(json_expression,opts) {
                        let out;
                        opts=await add({
                            env:Environment
                        },opts,{
                            meta:await (async function(){
                                if (check_true ((opts&& opts.meta))){
                                    return true
                                } else {
                                    return false
                                }
                            })()
                        });
                        out=null;
                        out=await (async function(){
                             return await compiler(json_expression,opts) 
                        })();
                        return await async function(){
                            if (check_true (((out instanceof Array)&& out['0'].ctype&& (out['0'].ctype==="FAIL")))) {
                                return out
                            } else if (check_true (opts.meta)) {
                                return out
                            } else {
                                return out['1']
                            }
                        } ()
                    };__obj__1["env_log"]=async function(...args) {
                            return await (async function(){
                                let __target_arg__189=[].concat(await conj(await (async function(){
                                    let __array_op_rval__190=style;
                                     if (__array_op_rval__190 instanceof Function){
                                        return await __array_op_rval__190() 
                                    } else {
                                        return [__array_op_rval__190]
                                    }
                                })(),args));
                                if(!__target_arg__189 instanceof Array){
                                    throw new TypeError("Invalid final argument to apply - an array is required")
                                }let __pre_arg__191=("%c"+ await (async function(){
                                    if (check_true (opts.prefix)){
                                        return opts.prefix
                                    } else {
                                        return (args).shift()
                                    }
                                })());
                                __target_arg__189.unshift(__pre_arg__191);
                                return (console.log).apply(this,__target_arg__189)
                            })()
                        };__obj__1["evaluate_local"]=async function(expression,ctx,opts) {
                        let compiled;
                        let error_data;
                        let requires;
                        let result;
                        opts=(opts|| new Object());
                        compiled=null;
                        error_data=null;
                        requires=null;
                        result=null;
                        if (check_true (opts.compiled_source)){
                            compiled=expression
                        } else {
                            try {
                                compiled=await (async function(){
                                     return await compiler(await (async function(){
                                        if (check_true (opts.json_in)){
                                            return expression
                                        } else {
                                            return await Environment["read_lisp"].call(Environment,expression,{
                                                source_name:opts.source_name
                                            })
                                        }
                                    })(),{
                                        env:Environment,ctx:ctx,formatted_output:true,source_name:opts.source_name,throw_on_error:opts.throw_on_error,error_report:(opts.error_report|| null),quiet_mode:(opts.quiet_mode|| false)
                                    }) 
                                })()
                            } catch (__exception__236) {
                                if (__exception__236 instanceof Error) {
                                    let e=__exception__236;
                                    {
                                        {
                                            if (check_true (opts.throw_on_error)){
                                                {
                                                    throw e;
                                                    
                                                }
                                            };
                                            if (check_true ((e instanceof LispSyntaxError))){
                                                {
                                                    await async function(){
                                                        e["message"]=await JSON.parse(e.message);
                                                        return e;
                                                        
                                                    }()
                                                }
                                            };
                                            await async function(){
                                                if (check_true ((e instanceof LispSyntaxError))) {
                                                    return error_data=await add({
                                                        error:"LispSyntaxError"
                                                    },e.message)
                                                } else {
                                                    error_data={
                                                        error:await sub_type(e),message:e.message,stack:e.stack,form:await (async function(){
                                                             return await async function(){
                                                                if (check_true (((expression instanceof String || typeof expression==='string')&& (expression.length>100)))) {
                                                                    return await add(await expression["substr"].call(expression,0,100),"...")
                                                                } else {
                                                                    return await (await get_global("as_lisp"))(expression)
                                                                }
                                                            } () 
                                                        })(),parent_forms:[],source_name:opts.source_name,invalid:true
                                                    }
                                                }
                                            } ();
                                            if (check_true (opts.error_report)){
                                                await (async function(){
                                                    let __array_op_rval__238=opts.error_report;
                                                     if (__array_op_rval__238 instanceof Function){
                                                        return await __array_op_rval__238(error_data) 
                                                    } else {
                                                        return [__array_op_rval__238,error_data]
                                                    }
                                                })()
                                            } else {
                                                await console.error("Compilation Error: ",error_data)
                                            };
                                            compiled=await (async function(){
                                                 return [{
                                                    error:true
                                                },null] 
                                            })()
                                        }
                                    }
                                }
                            }
                        };
                        return await async function(){
                            if (check_true ((null==compiled))) {
                                return null
                            } else if (check_true ((compiled['0'].ctype==="FAIL"))) {
                                {
                                    if (check_true (opts.error_report)){
                                        {
                                            await (async function(){
                                                let __array_op_rval__239=opts.error_report;
                                                 if (__array_op_rval__239 instanceof Function){
                                                    return await __array_op_rval__239(compiled['1']) 
                                                } else {
                                                    return [__array_op_rval__239,compiled['1']]
                                                }
                                            })()
                                        }
                                    };
                                    return await async function(){
                                        if (check_true ((compiled['1'] instanceof Error))) {
                                            throw compiled['1'];
                                            
                                        } else if (check_true ((compiled['1']['0'] instanceof Error))) {
                                            throw compiled['1']['0'];
                                            
                                        } else if (check_true (((compiled['1']['0'] instanceof Object)&& (compiled['1']['0'].error==="SyntaxError")))) {
                                            {
                                                let new_error=new SyntaxError(compiled['1']['0'].message);
                                                ;
                                                await async function(){
                                                    new_error["from"]=compiled['1']['0'];
                                                    return new_error;
                                                    
                                                }();
                                                throw new_error;
                                                
                                            }
                                        } else {
                                            return compiled['1']
                                        }
                                    } ()
                                }
                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))&& parent_environment))) {
                                return await parent_environment["evaluate_local"].call(parent_environment,compiled,ctx,await add(new Object(),opts,{
                                    compiled_source:true
                                }))
                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))))) {
                                if (check_true (children[compiled['0'].namespace])){
                                    return await (async function() {
                                        {
                                             let __call_target__=children[compiled['0'].namespace], __call_method__="evaluate_local";
                                            return await __call_target__[__call_method__].call(__call_target__,compiled,ctx,await add(new Object(),opts,{
                                                compiled_source:true
                                            }))
                                        } 
                                    })()
                                } else {
                                    throw new EvalError(("unknown namespace "+ compiled['0'].namespace+ " assignment"));
                                    
                                }
                            } else {
                                {
                                    if (check_true (opts.on_compilation_complete)){
                                        await (async function(){
                                            let __array_op_rval__241=opts.on_compilation_complete;
                                             if (__array_op_rval__241 instanceof Function){
                                                return await __array_op_rval__241(compiled) 
                                            } else {
                                                return [__array_op_rval__241,compiled]
                                            }
                                        })()
                                    };
                                    try {
                                        if (check_true (((compiled instanceof Array)&& (compiled['0'] instanceof Object)&& compiled['0'].ctype&& await not((compiled['0'].ctype instanceof String || typeof compiled['0'].ctype==='string'))))){
                                            {
                                                await async function(){
                                                    compiled['0']["ctype"]=await subtype(compiled['0'].ctype);
                                                    return compiled['0'];
                                                    
                                                }()
                                            }
                                        };
                                        result=await (async function(){
                                             return await async function(){
                                                if (check_true (compiled.error)) {
                                                    throw new Error((await get_global("indirect_new"))(compiled.error,compiled.message));
                                                    
                                                } else if (check_true ((compiled['0'].ctype&& (await contains_ques_("block",compiled['0'].ctype)|| (compiled['0'].ctype==="assignment")|| (compiled['0'].ctype==="__!NOT_FOUND!__"))))) {
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__244=compiled['0'].has_lisp_globals;
                                                         if (__array_op_rval__244 instanceof Function){
                                                            return await __array_op_rval__244() 
                                                        } else {
                                                            return [__array_op_rval__244]
                                                        }
                                                    })())){
                                                        {
                                                            await async function(){
                                                                compiled[1]=new AsyncFunction("Environment",("{ "+ compiled['1']+ "}"));
                                                                return compiled;
                                                                
                                                            }();
                                                            return await (async function(){
                                                                let __array_op_rval__246=compiled['1'];
                                                                 if (__array_op_rval__246 instanceof Function){
                                                                    return await __array_op_rval__246(Environment) 
                                                                } else {
                                                                    return [__array_op_rval__246,Environment]
                                                                }
                                                            })()
                                                        }
                                                    } else {
                                                        {
                                                            await async function(){
                                                                compiled[1]=new AsyncFunction(("{"+ compiled['1']+ "}"));
                                                                return compiled;
                                                                
                                                            }();
                                                            return await (async function(){
                                                                let __array_op_rval__248=compiled['1'];
                                                                 if (__array_op_rval__248 instanceof Function){
                                                                    return await __array_op_rval__248() 
                                                                } else {
                                                                    return [__array_op_rval__248]
                                                                }
                                                            })()
                                                        }
                                                    }
                                                } else if (check_true ((compiled['0'].ctype&& (("AsyncFunction"===compiled['0'].ctype)|| ("statement"===compiled['0'].ctype)|| ("objliteral"===compiled['0'].ctype))))) {
                                                    {
                                                        if (check_true (await (async function(){
                                                            let __array_op_rval__249=compiled['0'].has_lisp_globals;
                                                             if (__array_op_rval__249 instanceof Function){
                                                                return await __array_op_rval__249() 
                                                            } else {
                                                                return [__array_op_rval__249]
                                                            }
                                                        })())){
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new AsyncFunction("Environment",("{ return "+ compiled['1']+ "} "));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__251=compiled['1'];
                                                                     if (__array_op_rval__251 instanceof Function){
                                                                        return await __array_op_rval__251(Environment) 
                                                                    } else {
                                                                        return [__array_op_rval__251,Environment]
                                                                    }
                                                                })()
                                                            }
                                                        } else {
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new AsyncFunction(("{ return "+ compiled['1']+ "}"));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__253=compiled['1'];
                                                                     if (__array_op_rval__253 instanceof Function){
                                                                        return await __array_op_rval__253() 
                                                                    } else {
                                                                        return [__array_op_rval__253]
                                                                    }
                                                                })()
                                                            }
                                                        }
                                                    }
                                                } else if (check_true ((compiled['0'].ctype&& ("Function"===compiled['0'].ctype)))) {
                                                    {
                                                        if (check_true (await (async function(){
                                                            let __array_op_rval__254=compiled['0'].has_lisp_globals;
                                                             if (__array_op_rval__254 instanceof Function){
                                                                return await __array_op_rval__254() 
                                                            } else {
                                                                return [__array_op_rval__254]
                                                            }
                                                        })())){
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new Function("Environment",("{ return "+ compiled['1']+ "} "));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__256=compiled['1'];
                                                                     if (__array_op_rval__256 instanceof Function){
                                                                        return await __array_op_rval__256(Environment) 
                                                                    } else {
                                                                        return [__array_op_rval__256,Environment]
                                                                    }
                                                                })()
                                                            }
                                                        } else {
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new Function(("{ return "+ compiled['1']+ "}"));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__258=compiled['1'];
                                                                     if (__array_op_rval__258 instanceof Function){
                                                                        return await __array_op_rval__258() 
                                                                    } else {
                                                                        return [__array_op_rval__258]
                                                                    }
                                                                })()
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    return compiled['1']
                                                }
                                            } () 
                                        })()
                                    } catch (__exception__242) {
                                        if (__exception__242 instanceof Error) {
                                            let e=__exception__242;
                                            {
                                                {
                                                    if (check_true ((opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4)))){
                                                        {
                                                            if (check_true (e.details)){
                                                                await env_log("caught error: ",e.details)
                                                            } else {
                                                                await env_log("caught error: ",e.name,e.message,e)
                                                            }
                                                        }
                                                    };
                                                    if (check_true (((await sub_type(e)==="SyntaxError")&& (opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4))))){
                                                        await console.log(compiled['1'])
                                                    };
                                                    if (check_true (opts.error_report)){
                                                        {
                                                            await (async function(){
                                                                let __array_op_rval__259=opts.error_report;
                                                                 if (__array_op_rval__259 instanceof Function){
                                                                    return await __array_op_rval__259(await (async function(){
                                                                        if (check_true (e.details)){
                                                                            return e.details
                                                                        } else {
                                                                            return {
                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack
                                                                            }
                                                                        }
                                                                    })()) 
                                                                } else {
                                                                    return [__array_op_rval__259,await (async function(){
                                                                        if (check_true (e.details)){
                                                                            return e.details
                                                                        } else {
                                                                            return {
                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack
                                                                            }
                                                                        }
                                                                    })()]
                                                                }
                                                            })()
                                                        }
                                                    };
                                                    result=e;
                                                    if (check_true ((await not(opts.catch_errors)|| (ctx&& ctx.in_try)))){
                                                        {
                                                            throw result;
                                                            
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    };
                                    return result
                                }
                            }
                        } ()
                    };__obj__1["evaluate"]=async function(expression,ctx,opts) {
                        return await async function(){
                            if (check_true ((namespace===active_namespace))) {
                                return await evaluate_local(expression,ctx,opts)
                            } else if (check_true ((namespace==="core"))) {
                                return await (async function() {
                                    {
                                         let __call_target__=children[active_namespace], __call_method__="evaluate";
                                        return await __call_target__[__call_method__].call(__call_target__,expression,ctx,opts)
                                    } 
                                })()
                            }
                        } ()
                    };__obj__1["eval_struct"]=async function(lisp_struct,ctx,opts) {
                        let rval;
                        rval=null;
                        if (check_true (lisp_struct instanceof Function)){
                            rval=await (async function(){
                                let __array_op_rval__264=lisp_struct;
                                 if (__array_op_rval__264 instanceof Function){
                                    return await __array_op_rval__264() 
                                } else {
                                    return [__array_op_rval__264]
                                }
                            })()
                        } else {
                            rval=await (async function(){
                                 return await evaluate(lisp_struct,ctx,await add({
                                    json_in:true
                                },(opts|| new Object()))) 
                            })()
                        };
                        return rval
                    };__obj__1["built_ins"]=["MAX_SAFE_INTEGER","LispSyntaxError","sub_type","__VERBOSITY__","int","float","values","pairs","keys","take","prepend","first","last","length","conj","reverse","map","bind","to_object","to_array","slice","rest","second","third","chop","chomp","not","push","pop","list","flatten","jslambda","join","lowercase","uppercase","log","split","split_by","is_object?","is_array?","is_number?","is_function?","is_set?","is_element?","is_string?","is_nil?","is_regex?","is_date?","ends_with?","starts_with?","blank?","contains?","make_set","eval_exp","indirect_new","get_import_entry","range","add","merge_objects","index_of","resolve_path","delete_prop","load_pends","min_value","max_value","interlace","trim","assert","unquotify","or_args","pending_ns_loads","special_operators","defclog","NOT_FOUND","check_external_env_default","built_ins","reader"];__obj__1["set_compiler"]=async function(compiler_function) {
    await Environment["set_compiler"].call(Environment,compiler_function);
    return compiler_function
};__obj__1["clone"]=async function(val) {
                            if (check_true ((val===Environment))){
                                return Environment
                            } else {
                                return await clone(val,0,Environment)
                            }
                        };__obj__1["*env_config*"]={export:{save_path:"js/juno.js",default_namespace:"user",include_source:false},features:["compiler","repl","io","Deno","build-tools","*env_skeleton*"],build:"2022.10.20.12.02",imports:await ( async function(){let __obj__2=new Object();__obj__2["core/readline_mod"]={symbol:"readline_mod",namespace:"core",location:"https://deno.land/x/readline/mod.ts"};__obj__2["core/streams"]={symbol:"streams",namespace:"core",location:"https://deno.land/std/streams/conversion.ts"};__obj__2["user/path"]={symbol:"path",namespace:"user",location:"https://deno.land/std@0.110.0/path/mod.ts"};return __obj__2;})(),repl:new Object()};__obj__1["create_namespace"]=async function(name,options,defer_initialization) {
                                return await async function(){
                                    if (check_true (await not((name instanceof String || typeof name==='string')))) {
                                        throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true (children[name])) {
                                        throw new EvalError("namespace already exists");
                                        
                                    } else {
                                        {
                                            let child_env;
                                            options=(options|| new Object());
                                            child_env=await (async function(){
                                                 return await dlisp_env({
                                                    parent_environment:Environment,namespace:name,contained:options.contained,defer_initialization:defer_initialization
                                                }) 
                                            })();
                                            if (check_true (child_env.evaluate)){
                                                {
                                                    await child_env["set_compiler"].call(child_env,compiler);
                                                    await async function(){
                                                        children[name]=child_env;
                                                        return children;
                                                        
                                                    }();
                                                    await async function(){
                                                        children_declarations[name]=new Object();
                                                        return children_declarations;
                                                        
                                                    }();
                                                    await child_env["evaluate_local"].call(child_env,"(for_each (sym built_ins) (delete_prop Environment.context.scope sym))");
                                                    await child_env["evaluate_local"].call(child_env,"(for_each (sym built_ins) (delete_prop Environment.definitions sym))");
                                                    if (check_true (options.contained)){
                                                        await async function(){
                                                            let __target_obj__276=children_declarations[name];
                                                            __target_obj__276["contained"]=true;
                                                            return __target_obj__276;
                                                            
                                                        }()
                                                    };
                                                    await async function(){
                                                        let __target_obj__277=children_declarations[name];
                                                        __target_obj__277["serialize_with_image"]=await (async function(){
                                                            if (check_true ((false===options.serialize_with_image))){
                                                                return false
                                                            } else {
                                                                return true
                                                            }
                                                        })();
                                                        return __target_obj__277;
                                                        
                                                    }();
                                                    return name
                                                }
                                            } else {
                                                {
                                                    await console.error("ENV: couldn't create the child environment. Received: ",child_env);
                                                    throw new EvalError(("unable to create namespace "+ name));
                                                    
                                                }
                                            }
                                        }
                                    }
                                } ()
                            };__obj__1["set_namespace"]=async function(name) {
                                return await async function(){
                                    if (check_true (await not((name instanceof String || typeof name==='string')))) {
                                        throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true ((await not(("core"===name))&& (null==children[name])))) {
                                        throw new EvalError(("namespace "+ name+ " doesn't exist"));
                                        
                                    } else {
                                        {
                                            if (check_true ((name==="core"))){
                                                {
                                                    active_namespace="core"
                                                }
                                            } else {
                                                {
                                                    active_namespace=name
                                                }
                                            };
                                            return name
                                        }
                                    }
                                } ()
                            };__obj__1["delete_namespace"]=async function(name) {
                                return await async function(){
                                    if (check_true (await not((name instanceof String || typeof name==='string')))) {
                                        throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true (("core"===name))) {
                                        throw new EvalError("core namespace cannot be removed");
                                        
                                    } else if (check_true ((null==children[name]))) {
                                        throw new EvalError(("namespace "+ name+ "doesn't exist"));
                                        
                                    } else if (check_true ((name===await current_namespace()))) {
                                        throw new EvalError("namespace is the current namespace");
                                        
                                    } else {
                                        {
                                            await (await get_global("remove_prop"))(children,name);
                                            await (async function() {
                                                let __for_body__280=async function(k) {
                                                    if (check_true (await starts_with_ques_(k,name))){
                                                        {
                                                            return await (await get_global("remove_prop"))(Environment.global_ctx._star_env_config_star_.imports,k)
                                                        }
                                                    }
                                                };
                                                let __array__281=[],__elements__279=(await resolve_path(["global_ctx","scope","*env_config*","imports"],Environment)|| []);
                                                let __BREAK__FLAG__=false;
                                                for(let __iter__278 in __elements__279) {
                                                    __array__281.push(await __for_body__280(__elements__279[__iter__278]));
                                                    if(__BREAK__FLAG__) {
                                                         __array__281.pop();
                                                        break;
                                                        
                                                    }
                                                }return __array__281;
                                                 
                                            })();
                                            return name
                                        }
                                    }
                                } ()
                            };__obj__1["namespaces"]=function() {
                                    return  add( keys(children),"core")
                                };__obj__1["current_namespace"]=function() {
                                return active_namespace
                            };__obj__1["eval"]=async function(expression) {
                        return await (async function(){
                            let __array_op_rval__141=expression;
                             if (__array_op_rval__141 instanceof Function){
                                return await __array_op_rval__141() 
                            } else {
                                return [__array_op_rval__141]
                            }
                        })()
                    };__obj__1["reader"]=async function(text,opts) {     return  await async function(){        if (check_true( (undefined==text))) {             throw new EvalError(("reader: received undefined, text must be a string."));                    } else if (check_true( await (await Environment.get_global("not"))((text instanceof String || typeof text==='string')))) {             throw new EvalError(("reader: received "+await (await Environment.get_global("sub_type"))(text)+": text must be a string."));                    } else  {            let output_structure;            let idx;            let line_number;            let column_number;            let source_name;            let len;            let debugmode;            let in_buffer;            let in_code;            let in_quotes;            let in_long_text;            let in_comment;            let in_single_quote;            let reading_object;            let mode;            let local_text;            let position;            let read_table;            let get_char;            let error;            let handle_escape_char;            let process_word;            let registered_stop_char;            let handler_stack;            let handler;            let c;            let next_c;            let depth;            let stop;            let read_block;            output_structure=[];            idx=-1;            line_number=1;            column_number=0;            source_name=await (async function () {                 if (check_true ((opts && opts["source_name"]))){                      return (opts && opts["source_name"])                } else {                      return "anonymous"                }             })();            opts=(opts||new Object());            len=(await (await Environment.get_global("length"))(text)-1);            debugmode=await async function(){                if (check_true((opts && opts["verbose"]))) {                     return true                } else if (check_true( ((opts && opts["verbose"])===false))) {                     return false                } else if (check_true( ((await Environment.get_global("__VERBOSITY__"))>6))) {                     return true                } else  {                     return false                }            } ();            in_buffer=(text).split("");            in_code=0;            in_quotes=1;            in_long_text=2;            in_comment=3;            in_single_quote=4;            reading_object=false;            mode=in_code;            local_text=async function() {                let start;                let end;                start=await Math.max(0,(idx-10));                end=await Math.min(await (await Environment.get_global("length"))(in_buffer),(idx+10));                 return  (await (await Environment.get_global("slice"))(in_buffer,start,end)).join("")            };            position=async function(offset) {                 return  ("line: "+line_number+" column: "+await (async function () {                     if (check_true (offset)){                          return (column_number+offset)                    } else {                          return column_number                    }                 })())            };            read_table=await (await Environment.get_global("add"))(new Object(),await (async function() {                 if (check_true ((opts && opts["read_table_entries"]))){                      return (opts && opts["read_table_entries"])                } else {                      return new Object()                }             } )(),await ( async function(){                let __obj__1=new Object();                __obj__1["("]=[")",async function(block) {                     return  block                }];                __obj__1["["]=["]",async function(block) {                     return  block                }];                __obj__1["{"]=["}",async function(block) {                    let obj;                    let __idx__2= async function(){                        return -1                    };                    let key_mode;                    let need_colon;                    let value_mode;                    let key;                    let value;                    let cpos;                    let state;                    let block_length;                    {                        obj=new Object();                        let idx=await __idx__2();                        ;                        key_mode=0;                        need_colon=1;                        value_mode=2;                        key=null;                        value=null;                        cpos=null;                        state=key_mode;                        block_length=(await (await Environment.get_global("length"))(block)-1);                        reading_object=false;                        await (async function(){                             let __test_condition__3=async function() {                                 return  (idx<block_length)                            };                            let __body_ref__4=async function() {                                (idx=idx+1);                                key=block[idx];                                if (check_true (((key instanceof Array)&&((key && key.length)===2)&&((key && key["0"])==="=:quotem")&&((key && key["1"]) instanceof String || typeof (key && key["1"])==='string')))){                                     key=(key && key["1"])                                };                                if (check_true (((key instanceof String || typeof key==='string')&&await (await Environment.get_global("starts_with?"))("=:",key)&&(await (await Environment.get_global("length"))(key)>2)))){                                     key=await key["substr"].call(key,2)                                };                                 return  await async function(){                                    if (check_true( await (await Environment.get_global("blank?"))(key))) {                                         return await error("missing object key",("blank or nil key: "+block[idx]))                                    } else if (check_true( await (await Environment.get_global("is_number?"))(key))) {                                        (idx=idx+1);                                         return  await async function(){                                            obj[key]=block[idx];                                            return obj;                                                                                    }()                                    } else if (check_true( ((key instanceof String || typeof key==='string')&&await (await Environment.get_global("contains?"))(":",key)&&await (await Environment.get_global("not"))(await (await Environment.get_global("ends_with?"))(":",key))))) {                                        cpos=await key["indexOf"].call(key,":");                                        value=await key["substr"].call(key,(cpos+1));                                        key=await key["substr"].call(key,0,cpos);                                        value=await process_word((value).split(""),0);                                         return  await async function(){                                            obj[key]=value;                                            return obj;                                                                                    }()                                    } else  {                                        (idx=idx+1);                                        if (check_true (await (await Environment.get_global("ends_with?"))(":",key))){                                             key=await (await Environment.get_global("chop"))(key)                                        } else {                                            if (check_true ((block[idx]===":"))){                                                 (idx=idx+1)                                            } else {                                                 await error("missing colon",("expected colon for: "+key))                                            }                                        };                                         return  await async function(){                                            obj[key]=block[idx];                                            return obj;                                                                                    }()                                    }                                } ()                            };                            let __BREAK__FLAG__=false;                            while(await __test_condition__3()) {                                await __body_ref__4();                                 if(__BREAK__FLAG__) {                                     break;                                                                    }                            } ;                                                    })();                         return  obj                    }                },async function() {                     return  reading_object=true                }];                __obj__1["\""]=["\"",async function(block) {                     return  ["quotes",block]                }];                return __obj__1;                            })());            get_char=async function(pos) {                 return  in_buffer[pos]            };            error=async function(type,message,offset) {                throw new LispSyntaxError({                    message:message,position:await position(offset),pos:{                        line:line_number,column:(column_number+(offset||0))                    },depth:depth,local_text:await local_text(),source_name:source_name,type:type                });                            };            handle_escape_char=async function(c) {                let ccode;                ccode=await c["charCodeAt"].call(c,0);                 return  await async function(){                    if (check_true( (ccode===34))) {                         return c                    } else if (check_true( (ccode===92))) {                         return c                    } else if (check_true( (c==="t"))) {                         return await String.fromCharCode(9)                    } else if (check_true( (c==="n"))) {                         return await String.fromCharCode(10)                    } else if (check_true( (c==="r"))) {                         return await String.fromCharCode(13)                    } else if (check_true( (c==="f"))) {                         return c                    } else if (check_true( (c==="b"))) {                         return c                    } else  {                         return c                    }                } ()            };            process_word=async function(word_acc,backtick_mode) {                let word;                let word_as_number;                word=(word_acc).join("");                word_as_number=await Number(word);                if (check_true (debugmode)){                     console.log("process_word: ",word,word_as_number,backtick_mode)                };                 return  await async function(){                    if (check_true( ("true"===word))) {                         return true                    } else if (check_true( ("false"===word))) {                         return false                    } else if (check_true( (":"===word))) {                         return word                    } else if (check_true( (",@"===word))) {                         return "=$,@"                    } else if (check_true( ((",#"===word)||("##"===word)))) {                         return "=:##"                    } else if (check_true( ("=$,@"===word))) {                         return "=$,@"                    } else if (check_true( ("=:##"===word))) {                         return "=:##"                    } else if (check_true( await isNaN(word_as_number))) {                         return  await async function(){                            if (check_true( (word==="=:"))) {                                 return  "=:"                            } else if (check_true( ((backtick_mode===0)&&await (await Environment.get_global("ends_with?"))(")",word)))) {                                 return await error("trailing character","unexpected trailing parenthesis")                            } else if (check_true( ((backtick_mode===0)&&await (await Environment.get_global("ends_with?"))("]",word)))) {                                 return await error("trailing character","unexpected trailing bracket")                            } else if (check_true( await (await Environment.get_global("contains?"))(word,["=:(","=:)","=:'"]))) {                                 return  word                            } else if (check_true( (backtick_mode===1))) {                                 return word                            } else  {                                 return await (await Environment.get_global("add"))("=:",word)                            }                        } ()                    } else if (check_true( await (await Environment.get_global("is_number?"))(word_as_number))) {                         return word_as_number                    } else  {                        console.log("reader: ",await position()," what is this?",word,word_acc,await local_text());                         return  word                    }                } ()            };            registered_stop_char=null;            handler_stack=[];            handler=null;            c=null;            next_c=null;            depth=0;            stop=false;            read_block=async function(_depth,_prefix_op) {                let acc;                let word_acc;                let backtick_mode;                let escape_mode;                let last_c;                let block_return;                acc=[];                word_acc=[];                backtick_mode=0;                escape_mode=0;                last_c=null;                block_return=null;                if (check_true (_prefix_op)){                     (acc).push(_prefix_op)                };                depth=_depth;                await (async function(){                     let __test_condition__8=async function() {                         return  (await (await Environment.get_global("not"))(stop)&&(idx<len))                    };                    let __body_ref__9=async function() {                        idx+=1;                        escape_mode=await Math.max(0,(escape_mode-1));                        c=await get_char(idx);                        next_c=await get_char((idx+1));                        if (check_true ((c==="\n"))){                            line_number+=1;                             column_number=0                        };                        if (check_true (debugmode)){                             await console.log(_depth,"C->",c,next_c,mode,escape_mode,await clone(acc),await clone(word_acc),(handler_stack && handler_stack.length))                        };                        await async function(){                            if (check_true( ((next_c===undefined)&&await (await Environment.get_global("not"))((await (async function(){                                let __targ__10=await (await Environment.get_global("last"))(handler_stack);                                if (__targ__10){                                     return(__targ__10)[0]                                }                             })()===undefined))&&(await (await Environment.get_global("not"))((c===await (async function(){                                let __targ__11=await (await Environment.get_global("last"))(handler_stack);                                if (__targ__11){                                     return(__targ__11)[0]                                }                             })()))||((handler_stack && handler_stack.length)>1))))) {                                 return await error("premature end",("premature end: expected: "+await (async function(){                                    let __targ__12=await (await Environment.get_global("last"))(handler_stack);                                    if (__targ__12){                                         return(__targ__12)[0]                                    }                                 })()))                            } else if (check_true( ((next_c===undefined)&&(mode===in_quotes)&&await (await Environment.get_global("not"))((await c["charCodeAt"]()===34))))) {                                 return await error("premature end","premature end: expected: \"")
                            } else if (check_true( ((next_c===undefined)&&(mode===in_long_text)&&await (await Environment.get_global("not"))((c==="|"))))) {
                                 return await error("premature end","premature end: expected: |")
                            } else if (check_true( ((mode===in_code)&&(_depth===1)&&(next_c===")")&&(c===")")))) {
                                 return  await error("trailing character","unexpected trailing parenthesis")
                            }
                        } ();
                        await async function(){
                            if (check_true( ((c==="\n")&&(mode===in_comment)))) {
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((92===await c["charCodeAt"].call(c,0))&&(mode===in_long_text)))) {
                                (word_acc).push(c);
                                 return  (word_acc).push(c)
                            } else if (check_true( ((mode>0)&&(escape_mode===1)&&(92===await c["charCodeAt"].call(c,0))))) {
                                 return  (word_acc).push(c)
                            } else if (check_true( ((mode>0)&&(92===await c["charCodeAt"].call(c,0))))) {
                                 return  escape_mode=2
                            } else if (check_true( ((mode>0)&&(escape_mode===1)))) {
                                 return  (word_acc).push(await handle_escape_char(c))
                            } else if (check_true( ((mode===in_long_text)&&(escape_mode===0)&&(c==="|")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_quotes)&&(escape_mode===0)&&(c==="\"")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_single_quote)&&(escape_mode===0)&&(c==="'")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((c==="|")&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_long_text;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                    block_return=["=:quotem",block_return];
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( ((c==="\"")&&(escape_mode===0)&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_quotes;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( ((c==="'")&&(escape_mode===0)&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_single_quote;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( (mode===in_comment))) {
                                 return false
                            } else if (check_true( ((c===";")&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_comment;
                                 return  await read_block(await (await Environment.get_global("add"))(_depth,1))
                            } else if (check_true( ((mode===in_code)&&(await (await Environment.get_global("length"))(handler_stack)>0)&&(c===await (async function(){
                                let __targ__13=await (await Environment.get_global("last"))(handler_stack);
                                if (__targ__13){
                                     return(__targ__13)[0]
                                } 
                            })())))) {
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_code)&&read_table[c]&&await (await Environment.get_global("first"))(read_table[c])))) {
                                if (check_true (await (async function(){
                                    let __targ__14=read_table[c];
                                    if (__targ__14){
                                         return(__targ__14)[2]
                                    } 
                                })())){
                                    handler=await (async function(){
                                        let __targ__15=read_table[c];
                                        if (__targ__15){
                                             return(__targ__15)[2]
                                        } 
                                    })();
                                    await (async function(){
                                        let __array_op_rval__16=handler;
                                         if (__array_op_rval__16 instanceof Function){
                                            return await __array_op_rval__16() 
                                        } else {
                                            return[__array_op_rval__16]
                                        }
                                    })();
                                     handler=null
                                };
                                (handler_stack).push(read_table[c]);
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc,backtick_mode));
                                    backtick_mode=0;
                                     word_acc=[]
                                };
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                handler=await (async function(){
                                    let __targ__17=(handler_stack).pop();
                                    if (__targ__17){
                                         return(__targ__17)[1]
                                    } 
                                })();
                                block_return=await (async function(){
                                    let __array_op_rval__18=handler;
                                     if (__array_op_rval__18 instanceof Function){
                                        return await __array_op_rval__18(block_return) 
                                    } else {
                                        return[__array_op_rval__18,block_return]
                                    }
                                })();
                                if (check_true (await (await Environment.get_global("not"))((undefined===block_return)))){
                                    if (check_true ((backtick_mode===1))){
                                        block_return=["=:quotem",block_return];
                                         backtick_mode=0
                                    };
                                     return  (acc).push(block_return)
                                }
                            } else if (check_true( ((mode===in_code)&&(c==="`")))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                 return  backtick_mode=1
                            } else if (check_true( ((mode===in_code)&&(c===":")&&((word_acc && word_acc.length)===0)&&((acc && acc.length)>0)&&(await (await Environment.get_global("last"))(acc) instanceof String || typeof await (await Environment.get_global("last"))(acc)==='string')))) {
                                 return (acc).push(await (await Environment.get_global("add"))((acc).pop(),":"))
                            } else if (check_true( ((mode===in_code)&&(last_c===",")&&((c==="#")||(c==="@"))))) {
                                (word_acc).push(c);
                                (acc).push(await process_word(word_acc));
                                 return  word_acc=[]
                            } else if (check_true( ((mode===in_code)&&((c===" ")||(await c["charCodeAt"].call(c,0)===10)||(await c["charCodeAt"].call(c,0)===9)||((c===",")&&await (await Environment.get_global("not"))((next_c==="@"))&&await (await Environment.get_global("not"))((next_c==="#"))))))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    if (check_true ((backtick_mode===1))){
                                        (acc).push(await process_word(word_acc,backtick_mode));
                                         backtick_mode=0
                                    } else {
                                         (acc).push(await process_word(word_acc))
                                    };
                                     return  word_acc=[]
                                }
                            } else if (check_true( ((mode===in_code)&&(await c["charCodeAt"].call(c,0)===13)))) {
                                 return false
                            } else  {
                                 return  (word_acc).push(c)
                            }
                        } ();
                        column_number+=1;
                         return  last_c=c
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__8()) {
                        await __body_ref__9();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                if (check_true (((word_acc && word_acc.length)>0))){
                    (acc).push(await process_word(word_acc,backtick_mode));
                     word_acc=[]
                };
                 return  acc
            };
            if (check_true (debugmode)){
                 await console.log("read->",in_buffer)
            };
            output_structure=await read_block(0);
            if (check_true (debugmode)){
                 await console.log("read<-",await clone(output_structure))
            };
            if (check_true (((output_structure instanceof Array)&&(await (await Environment.get_global("length"))(output_structure)>1)))){
                (output_structure).unshift("=:iprogn");
                 return  await (await Environment.get_global("first"))(await (async function(){
                    let __array_op_rval__19=output_structure;
                     if (__array_op_rval__19 instanceof Function){
                        return await __array_op_rval__19() 
                    } else {
                        return[__array_op_rval__19]
                    }
                })())
            } else {
                  return await (await Environment.get_global("first"))(output_structure)
            }
        }
    } ()
};__obj__1["add_escape_encoding"]=async function(text) {        if (check_true ((text instanceof String || typeof text==='string'))){            let chars;            let acc;            chars=(text).split("");            acc=[];            await (async function() {                let __for_body__3=async function(c) {                     return  await async function(){                        if (check_true( ((await c["charCodeAt"].call(c,0)===34)))) {                            (acc).push(await String.fromCharCode(92));                             return  (acc).push(c)                        } else  {                             return (acc).push(c)                        }                    } ()                };                let __array__4=[],__elements__2=chars;                let __BREAK__FLAG__=false;                for(let __iter__1 in __elements__2) {                    __array__4.push(await __for_body__3(__elements__2[__iter__1]));                    if(__BREAK__FLAG__) {                         __array__4.pop();                        break;                                            }                }return __array__4;                             })();             return  (acc).join("")        } else {              return text        }    };__obj__1["get_outside_global"]=function get_outside_global(refname) {  try {    let tfn = new Function("{ if (typeof " + refname + " === 'undefined') { return undefined } else { return "+refname+" } }");    return tfn();  } catch (ex) {    return undefined;  }};__obj__1["as_lisp"]=lisp_writer;__obj__1["lisp_writer"]=lisp_writer;__obj__1["clone_to_new"]=async function(options) {
                        let new_env;
                        let my_children;
                        let my_children_declarations;
                        new_env=null;
                        my_children=null;
                        my_children_declarations=null;
                        await env_log(namespace,"cloning: # children: ",await length(children));
                        new_env=await (async function(){
                             return await dlisp_env({
                                env:await (async function(){
                                     return await clone(Environment) 
                                })(),children:await (async function(){
                                     return await clone(children) 
                                })(),children_declarations:await (async function(){
                                     return await clone(children_declarations) 
                                })()
                            }) 
                        })();
                        await env_log(namespace,"constructed: ",await new_env["id"]());
                        return new_env
                    };__obj__1["save_env"]=async function(options) {
                        let new_env;
                        let my_children;
                        let env_constructor;
                        let dcomps;
                        let version_tag;
                        let build_time;
                        let build_headers;
                        let child_env;
                        let want_buffer;
                        let comp_buffer;
                        let sorted_dependencies;
                        let child_export_order;
                        let preserve_imports;
                        let include_source;
                        let exports;
                        let src;
                        let target_insertion_path;
                        let output_path;
                        new_env=null;
                        my_children=null;
                        env_constructor=null;
                        dcomps=await (async function(){
                             return await (await get_global("date_components"))(new Date()) 
                        })();
                        options=(options|| new Object());
                        version_tag=await (async function(){
                            if (check_true (await not(await blank_ques_(opts.version_tag)))){
                                return opts.version_tag
                            } else {
                                return (await (async function(){
                                    let __array_op_rval__322=dcomps.year;
                                     if (__array_op_rval__322 instanceof Function){
                                        return await __array_op_rval__322(dcomps.month,dcomps.day,dcomps.hour,dcomps.minute) 
                                    } else {
                                        return [__array_op_rval__322,dcomps.month,dcomps.day,dcomps.hour,dcomps.minute]
                                    }
                                })()).join(".")
                            }
                        })();
                        build_time=await (async function(){
                             return await (await get_global("formatted_date"))(new Date()) 
                        })();
                        build_headers=[];
                        child_env=null;
                        want_buffer=(options.want_buffer|| false);
                        comp_buffer=null;
                        sorted_dependencies=await (async function(){
                             return await (await get_global("sort_dependencies"))() 
                        })();
                        child_export_order=null;
                        preserve_imports=await (async function(){
                            if (check_true ((options&& (options.preserve_imports===false)))){
                                return false
                            } else {
                                return true
                            }
                        })();
                        include_source=false;
                        exports=[];
                        src=await (async function(){
                            if (check_true (await Environment["get_global"].call(Environment,"*env_skeleton*",null))){
                                return await clone(await Environment["get_global"].call(Environment,"*env_skeleton*"))
                            } else {
                                return await (await get_global("reader"))(await (async function(){
                                     return await (await get_global("read_text_file"))("./src/environment.lisp") 
                                })())
                            }
                        })();
                        target_insertion_path=null;
                        output_path=null;
                        if (check_true (Environment.global_ctx.scope["*env_skeleton*"])){
                            {
                                await (await get_global("register_feature"))("*env_skeleton*")
                            }
                        };
                        target_insertion_path=await first(await (async function(){
                             return await (await get_global("findpaths"))(await (async function(){
                                 return "=:included_globals" 
                            })(),src) 
                        })());
                        if (check_true (await not((target_insertion_path instanceof Array)))){
                            throw new EvalError("Unable to find the first included_globals symbol");
                            
                        };
                        target_insertion_path=await conj(await chop(target_insertion_path),[2]);
                        if (check_true (options.include_source)){
                            {
                                include_source=true
                            }
                        };
                        await env_log(namespace,"cloning: # children: ",await length(children));
                        await env_log(namespace,"preserve_imports: ",preserve_imports);
                        exports=await export_symbol_set(await (async function(){
                            if (check_true (options.do_not_include)){
                                return {
                                    do_not_include:options.do_not_include
                                }
                            }
                        })());
                        child_export_order=await (async function(){
                            let __collector;
                            let __result;
                            let __action;
                            __collector=[];
                            __result=null;
                            __action=async function(cname) {
                                if (check_true (await not((cname==="core")))){
                                    {
                                        return await (async function(){
                                            let __array_op_rval__323=cname;
                                             if (__array_op_rval__323 instanceof Function){
                                                return await __array_op_rval__323(children[cname]) 
                                            } else {
                                                return [__array_op_rval__323,children[cname]]
                                            }
                                        })()
                                    }
                                }
                            };
                            ;
                            await (async function() {
                                let __for_body__326=async function(__item) {
                                    __result=await __action(__item);
                                    if (check_true (__result)){
                                        return (__collector).push(__result)
                                    }
                                };
                                let __array__327=[],__elements__325=sorted_dependencies.namespaces;
                                let __BREAK__FLAG__=false;
                                for(let __iter__324 in __elements__325) {
                                    __array__327.push(await __for_body__326(__elements__325[__iter__324]));
                                    if(__BREAK__FLAG__) {
                                         __array__327.pop();
                                        break;
                                        
                                    }
                                }return __array__327;
                                 
                            })();
                            return __collector
                        })();
                        await console.log("save_env: child_export_order: ",await (async function(){
                             return await (await get_global("each"))(child_export_order,0) 
                        })());
                        my_children=await to_object(await (async function(){
                            let __collector;
                            let __result;
                            let __action;
                            __collector=[];
                            __result=null;
                            __action=async function(child) {
                                if (check_true (await resolve_path(await (async function(){
                                    let __array_op_rval__328=child['0'];
                                     if (__array_op_rval__328 instanceof Function){
                                        return await __array_op_rval__328("serialize_with_image") 
                                    } else {
                                        return [__array_op_rval__328,"serialize_with_image"]
                                    }
                                })(),children_declarations))){
                                    {
                                        child_env=await child['1']["compile"].call(child['1'],await child['1']["export_symbol_set"].call(child['1'],await add(new Object(),{
                                            no_compiler:true
                                        })),{
                                            throw_on_error:true
                                        });
                                        return await (async function(){
                                            let __array_op_rval__329=child['0'];
                                             if (__array_op_rval__329 instanceof Function){
                                                return await __array_op_rval__329(await (async function(){
                                                     return [["=:quotel",child['1'].definitions],await (async function(){
                                                         return ["=:javascript",child_env] 
                                                    })()] 
                                                })()) 
                                            } else {
                                                return [__array_op_rval__329,await (async function(){
                                                     return [["=:quotel",child['1'].definitions],await (async function(){
                                                         return ["=:javascript",child_env] 
                                                    })()] 
                                                })()]
                                            }
                                        })()
                                    }
                                }
                            };
                            ;
                            await (async function() {
                                let __for_body__332=async function(__item) {
                                    __result=await __action(__item);
                                    if (check_true (__result)){
                                        return (__collector).push(__result)
                                    }
                                };
                                let __array__333=[],__elements__331=child_export_order;
                                let __BREAK__FLAG__=false;
                                for(let __iter__330 in __elements__331) {
                                    __array__333.push(await __for_body__332(__elements__331[__iter__330]));
                                    if(__BREAK__FLAG__) {
                                         __array__333.pop();
                                        break;
                                        
                                    }
                                }return __array__333;
                                 
                            })();
                            return __collector
                        })());
                        await (await get_global("set_path"))(target_insertion_path,src,await (async function(){
                             return ["=:fn",[],await to_object(await (async function(){
                                 return [["definitions",await (async function(){
                                     return ["=:quote",await (async function(){
                                        if (check_true (options.do_not_include)){
                                            return await to_object(await (async function(){
                                                let __collector;
                                                let __result;
                                                let __action;
                                                __collector=[];
                                                __result=null;
                                                __action=async function(defset) {
                                                    if (check_true (await not(await contains_ques_(defset['0'],options.do_not_include)))){
                                                        return await (async function(){
                                                            let __array_op_rval__334=defset['0'];
                                                             if (__array_op_rval__334 instanceof Function){
                                                                return await __array_op_rval__334(defset['1']) 
                                                            } else {
                                                                return [__array_op_rval__334,defset['1']]
                                                            }
                                                        })()
                                                    }
                                                };
                                                ;
                                                await (async function() {
                                                    let __for_body__337=async function(__item) {
                                                        __result=await __action(__item);
                                                        if (check_true (__result)){
                                                            return (__collector).push(__result)
                                                        }
                                                    };
                                                    let __array__338=[],__elements__336=await pairs(Environment.definitions);
                                                    let __BREAK__FLAG__=false;
                                                    for(let __iter__335 in __elements__336) {
                                                        __array__338.push(await __for_body__337(__elements__336[__iter__335]));
                                                        if(__BREAK__FLAG__) {
                                                             __array__338.pop();
                                                            break;
                                                            
                                                        }
                                                    }return __array__338;
                                                     
                                                })();
                                                return __collector
                                            })())
                                        } else {
                                            return await clone(Environment.definitions)
                                        }
                                    })()] 
                                })()],["declarations",await (async function(){
                                     return await clone(Environment.declarations) 
                                })()],["config",await (async function(){
                                    let exp_conf;
                                    exp_conf=await (async function(){
                                         return await clone(Environment.global_ctx.scope["*env_config*"]) 
                                    })();
                                    if (check_true (await not(preserve_imports))){
                                        {
                                            await async function(){
                                                exp_conf["imports"]=new Object();
                                                return exp_conf;
                                                
                                            }()
                                        }
                                    };
                                    if (check_true (options.features)){
                                        {
                                            await async function(){
                                                exp_conf["features"]=options.features;
                                                return exp_conf;
                                                
                                            }()
                                        }
                                    };
                                    return exp_conf
                                })()],["imports",await (async function(){
                                    if (check_true (preserve_imports)){
                                        return await to_object(await (async function() {
                                            let __for_body__343=async function(imp_source) {
                                                return await (async function(){
                                                    let __array_op_rval__345=imp_source.symbol;
                                                     if (__array_op_rval__345 instanceof Function){
                                                        return await __array_op_rval__345({
                                                            initializer:await (async function(){
                                                                 return ["=:javascript","new function () { return ",imp_source.symbol," }"] 
                                                            })(),symbol:imp_source.symbol,namespace:imp_source.namespace
                                                        }) 
                                                    } else {
                                                        return [__array_op_rval__345,{
                                                            initializer:await (async function(){
                                                                 return ["=:javascript","new function () { return ",imp_source.symbol," }"] 
                                                            })(),symbol:imp_source.symbol,namespace:imp_source.namespace
                                                        }]
                                                    }
                                                })()
                                            };
                                            let __array__344=[],__elements__342=await values((await resolve_path(["*env_config*","imports"],Environment.global_ctx.scope)|| new Object()));
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__341 in __elements__342) {
                                                __array__344.push(await __for_body__343(__elements__342[__iter__341]));
                                                if(__BREAK__FLAG__) {
                                                     __array__344.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__344;
                                             
                                        })())
                                    } else {
                                        return new Object()
                                    }
                                })()],["symbols",await (async function(){
                                     return ["=:javascript",await compile(await to_object(exports),{
                                        throw_on_error:true
                                    })] 
                                })()],["children_declarations",await (async function(){
                                     return ["=:fn",[],await clone(children_declarations)] 
                                })()],["child_load_order",await (async function(){
                                     return await (await get_global("each"))(child_export_order,0) 
                                })()],["children",my_children]] 
                            })())] 
                        })());
                        output_path=await (async function(){
                            if (check_true (options.want_buffer)){
                                return null
                            } else {
                                return (options.save_as|| await resolve_path(["*env_config*","export","save_path"],Environment.global_ctx.scope))
                            }
                        })();
                        if (check_true (output_path instanceof Function)){
                            output_path=await (async function(){
                                let __array_op_rval__346=output_path;
                                 if (__array_op_rval__346 instanceof Function){
                                    return await __array_op_rval__346() 
                                } else {
                                    return [__array_op_rval__346]
                                }
                            })()
                        };
                        if (check_true ((await not((output_path instanceof String || typeof output_path==='string'))&& output_path))){
                            throw new EvalError("invalid name for target for saving the environment.  Must be a string or function");
                            
                        };
                        return await async function(){
                            if (check_true ((want_buffer|| (output_path&& await ends_with_ques_(".js",output_path))))) {
                                {
                                    (build_headers).push(("// Build Time: "+ build_time));
                                    (build_headers).push(("// Version: "+ version_tag));
                                    (build_headers).push(("export const DLISP_ENV_VERSION='"+ version_tag+ "';"));
                                    await env_log("saving to: ",output_path);
                                    return await (await get_global("compile_buffer"))(src,"init_dlisp",{
                                        namespace:namespace,toplevel:true,include_boilerplate:false,verbose:false,bundle:true,want_buffer:want_buffer,imports:await (async function(){
                                            if (check_true (preserve_imports)){
                                                return await resolve_path(["*env_config*","imports"],Environment.global_ctx.scope)
                                            }
                                        })(),js_headers:await (async function(){
                                             return [await (await get_global("show"))(check_true),await (async function(){
                                                 return await (await get_global("show"))(get_next_environment_id) 
                                            })(),await (async function(){
                                                 return await (await get_global("show"))(get_outside_global) 
                                            })(),await (async function(){
                                                 return await (await get_global("show"))(subtype) 
                                            })(),await (async function(){
                                                 return await (await get_global("show"))(lisp_writer) 
                                            })(),await (async function(){
                                                 return await (await get_global("show"))(clone) 
                                            })(),await (async function(){
                                                 return await (await get_global("show"))(LispSyntaxError) 
                                            })()] 
                                        })(),bundle_options:{
                                            default_namespace:await resolve_path(["*env_config*","export","default_namespace"],Environment.global_ctx.scope)
                                        },output_file:output_path,include_source:(options.include_source|| await resolve_path(["*env_config*","export","include_source"],Environment.global_ctx.scope)),build_headers:build_headers
                                    })
                                }
                            } else if (check_true ((output_path&& await ends_with_ques_(".lisp",output_path)))) {
                                return await (await get_global("write_text_file"))(output_path,await JSON.stringify(src,null,4))
                            } else {
                                return src
                            }
                        } ()
                    };__obj__1["null"]=null;__obj__1["*formatting_rules*"]={minor_indent:["defun","defun_sync","defmacro","define","when","let","destructuring_bind","while","for_each","fn","lambda","function","progn","do","reduce","cond","try","catch","macroexpand","compile","set_prop","unless","for_with","no_await"],keywords:["defun","defmacro","throw","try","defvar","typeof","instanceof","==","<",">","<=",">=","eq","return","yield","jslambda","cond","apply","setq","defun_sync","map","while","reduce","no_await","&defglobal","do","fn","if","let","new","function","progn","javascript","catch","evaluate","eval","call","import","dynamic_import","quote","for_each","for_with","declare","break","->","*","+","/","-","and","or","prop","set_prop","defparameter","defvalue"]};__obj__1["defmacro"]=async function(name,lambda_list,...forms) {
    let macro_name;
    let macro_args;
    let macro_body;
    let final_form;
    let macro_meta;
    let complex_lambda_list;
    let source_details;
    macro_name=name;
    macro_args=lambda_list;
    macro_body=forms;
    final_form=await (await Environment.get_global("last"))(forms);
    macro_meta=await (async function(){
        if (check_true (((final_form instanceof Object)&& await (await Environment.get_global("not"))(await (await Environment.get_global("blank?"))((final_form && final_form["description"])))&& await (await Environment.get_global("not"))(await (await Environment.get_global("blank?"))((final_form && final_form["usage"])))))){
            return (forms).pop()
        }
    })();
    complex_lambda_list=await (async function(){
         return await (await Environment.get_global("or_args"))(await (async function() {
            let __for_body__45=async function(elem) {
                return (await (await Environment.get_global("length"))(await (await Environment.get_global("flatten"))(await (async function(){
                     return await (await Environment.get_global("destructure_list"))(elem) 
                })()))>0)
            };
            let __array__46=[],__elements__44=lambda_list;
            let __BREAK__FLAG__=false;
            for(let __iter__43 in __elements__44) {
                __array__46.push(await __for_body__45(__elements__44[__iter__43]));
                if(__BREAK__FLAG__) {
                     __array__46.pop();
                    break;
                    
                }
            }return __array__46;
             
        })()) 
    })();
    source_details=await (await Environment.get_global("add"))({
        eval_when:{
            compile_time:true
        },name:await (async function(){
            if (check_true (await (await Environment.get_global("starts_with?"))("=:",name))){
                return await name["substr"].call(name,2)
            } else {
                return name
            }
        })(),macro:true,fn_args:await (await Environment.get_global("as_lisp"))(macro_args)
    },await (async function(){
        if (check_true (macro_meta)){
            return macro_meta
        } else {
            return new Object()
        }
    })());
    if (check_true (complex_lambda_list)){
        return ["=:defglobal",macro_name,["=:fn",["&","=:args"],["=:destructuring_bind",macro_args,"=:args",].concat(macro_body)],["=:quote",source_details]]
    } else {
        return ["=:defglobal",macro_name,["=:fn",macro_args,].concat(macro_body),["=:quote",source_details]]
    }
};__obj__1["read_lisp"]=async function(text,opts) {     return  await async function(){        if (check_true( (undefined==text))) {             throw new EvalError(("reader: received undefined, text must be a string."));                    } else if (check_true( await (await Environment.get_global("not"))((text instanceof String || typeof text==='string')))) {             throw new EvalError(("reader: received "+await (await Environment.get_global("sub_type"))(text)+": text must be a string."));                    } else  {            let output_structure;            let idx;            let line_number;            let column_number;            let source_name;            let len;            let debugmode;            let in_buffer;            let in_code;            let in_quotes;            let in_long_text;            let in_comment;            let in_single_quote;            let reading_object;            let mode;            let local_text;            let position;            let read_table;            let get_char;            let error;            let handle_escape_char;            let process_word;            let registered_stop_char;            let handler_stack;            let handler;            let c;            let next_c;            let depth;            let stop;            let read_block;            output_structure=[];            idx=-1;            line_number=1;            column_number=0;            source_name=await (async function () {                 if (check_true ((opts && opts["source_name"]))){                      return (opts && opts["source_name"])                } else {                      return "anonymous"                }             })();            opts=(opts||new Object());            len=(await (await Environment.get_global("length"))(text)-1);            debugmode=await async function(){                if (check_true((opts && opts["verbose"]))) {                     return true                } else if (check_true( ((opts && opts["verbose"])===false))) {                     return false                } else if (check_true( ((await Environment.get_global("__VERBOSITY__"))>6))) {                     return true                } else  {                     return false                }            } ();            in_buffer=(text).split("");            in_code=0;            in_quotes=1;            in_long_text=2;            in_comment=3;            in_single_quote=4;            reading_object=false;            mode=in_code;            local_text=async function() {                let start;                let end;                start=await Math.max(0,(idx-10));                end=await Math.min(await (await Environment.get_global("length"))(in_buffer),(idx+10));                 return  (await (await Environment.get_global("slice"))(in_buffer,start,end)).join("")            };            position=async function(offset) {                 return  ("line: "+line_number+" column: "+await (async function () {                     if (check_true (offset)){                          return (column_number+offset)                    } else {                          return column_number                    }                 })())            };            read_table=await (await Environment.get_global("add"))(new Object(),await (async function() {                 if (check_true ((opts && opts["read_table_entries"]))){                      return (opts && opts["read_table_entries"])                } else {                      return new Object()                }             } )(),await ( async function(){                let __obj__1=new Object();                __obj__1["("]=[")",async function(block) {                     return  block                }];                __obj__1["["]=["]",async function(block) {                     return  block                }];                __obj__1["{"]=["}",async function(block) {                    let obj;                    let __idx__2= async function(){                        return -1                    };                    let key_mode;                    let need_colon;                    let value_mode;                    let key;                    let value;                    let cpos;                    let state;                    let block_length;                    {                        obj=new Object();                        let idx=await __idx__2();                        ;                        key_mode=0;                        need_colon=1;                        value_mode=2;                        key=null;                        value=null;                        cpos=null;                        state=key_mode;                        block_length=(await (await Environment.get_global("length"))(block)-1);                        reading_object=false;                        await (async function(){                             let __test_condition__3=async function() {                                 return  (idx<block_length)                            };                            let __body_ref__4=async function() {                                (idx=idx+1);                                key=block[idx];                                if (check_true (((key instanceof Array)&&((key && key.length)===2)&&((key && key["0"])==="=:quotem")&&((key && key["1"]) instanceof String || typeof (key && key["1"])==='string')))){                                     key=(key && key["1"])                                };                                if (check_true (((key instanceof String || typeof key==='string')&&await (await Environment.get_global("starts_with?"))("=:",key)&&(await (await Environment.get_global("length"))(key)>2)))){                                     key=await key["substr"].call(key,2)                                };                                 return  await async function(){                                    if (check_true( await (await Environment.get_global("blank?"))(key))) {                                         return await error("missing object key",("blank or nil key: "+block[idx]))                                    } else if (check_true( await (await Environment.get_global("is_number?"))(key))) {                                        (idx=idx+1);                                         return  await async function(){                                            obj[key]=block[idx];                                            return obj;                                                                                    }()                                    } else if (check_true( ((key instanceof String || typeof key==='string')&&await (await Environment.get_global("contains?"))(":",key)&&await (await Environment.get_global("not"))(await (await Environment.get_global("ends_with?"))(":",key))))) {                                        cpos=await key["indexOf"].call(key,":");                                        value=await key["substr"].call(key,(cpos+1));                                        key=await key["substr"].call(key,0,cpos);                                        value=await process_word((value).split(""),0);                                         return  await async function(){                                            obj[key]=value;                                            return obj;                                                                                    }()                                    } else  {                                        (idx=idx+1);                                        if (check_true (await (await Environment.get_global("ends_with?"))(":",key))){                                             key=await (await Environment.get_global("chop"))(key)                                        } else {                                            if (check_true ((block[idx]===":"))){                                                 (idx=idx+1)                                            } else {                                                 await error("missing colon",("expected colon for: "+key))                                            }                                        };                                         return  await async function(){                                            obj[key]=block[idx];                                            return obj;                                                                                    }()                                    }                                } ()                            };                            let __BREAK__FLAG__=false;                            while(await __test_condition__3()) {                                await __body_ref__4();                                 if(__BREAK__FLAG__) {                                     break;                                                                    }                            } ;                                                    })();                         return  obj                    }                },async function() {                     return  reading_object=true                }];                __obj__1["\""]=["\"",async function(block) {                     return  ["quotes",block]                }];                return __obj__1;                            })());            get_char=async function(pos) {                 return  in_buffer[pos]            };            error=async function(type,message,offset) {                throw new LispSyntaxError({                    message:message,position:await position(offset),pos:{                        line:line_number,column:(column_number+(offset||0))                    },depth:depth,local_text:await local_text(),source_name:source_name,type:type                });                            };            handle_escape_char=async function(c) {                let ccode;                ccode=await c["charCodeAt"].call(c,0);                 return  await async function(){                    if (check_true( (ccode===34))) {                         return c                    } else if (check_true( (ccode===92))) {                         return c                    } else if (check_true( (c==="t"))) {                         return await String.fromCharCode(9)                    } else if (check_true( (c==="n"))) {                         return await String.fromCharCode(10)                    } else if (check_true( (c==="r"))) {                         return await String.fromCharCode(13)                    } else if (check_true( (c==="f"))) {                         return c                    } else if (check_true( (c==="b"))) {                         return c                    } else  {                         return c                    }                } ()            };            process_word=async function(word_acc,backtick_mode) {                let word;                let word_as_number;                word=(word_acc).join("");                word_as_number=await Number(word);                if (check_true (debugmode)){                     console.log("process_word: ",word,word_as_number,backtick_mode)                };                 return  await async function(){                    if (check_true( ("true"===word))) {                         return true                    } else if (check_true( ("false"===word))) {                         return false                    } else if (check_true( (":"===word))) {                         return word                    } else if (check_true( (",@"===word))) {                         return "=$,@"                    } else if (check_true( ((",#"===word)||("##"===word)))) {                         return "=:##"                    } else if (check_true( ("=$,@"===word))) {                         return "=$,@"                    } else if (check_true( ("=:##"===word))) {                         return "=:##"                    } else if (check_true( await isNaN(word_as_number))) {                         return  await async function(){                            if (check_true( (word==="=:"))) {                                 return  "=:"                            } else if (check_true( ((backtick_mode===0)&&await (await Environment.get_global("ends_with?"))(")",word)))) {                                 return await error("trailing character","unexpected trailing parenthesis")                            } else if (check_true( ((backtick_mode===0)&&await (await Environment.get_global("ends_with?"))("]",word)))) {                                 return await error("trailing character","unexpected trailing bracket")                            } else if (check_true( await (await Environment.get_global("contains?"))(word,["=:(","=:)","=:'"]))) {                                 return  word                            } else if (check_true( (backtick_mode===1))) {                                 return word                            } else  {                                 return await (await Environment.get_global("add"))("=:",word)                            }                        } ()                    } else if (check_true( await (await Environment.get_global("is_number?"))(word_as_number))) {                         return word_as_number                    } else  {                        console.log("reader: ",await position()," what is this?",word,word_acc,await local_text());                         return  word                    }                } ()            };            registered_stop_char=null;            handler_stack=[];            handler=null;            c=null;            next_c=null;            depth=0;            stop=false;            read_block=async function(_depth,_prefix_op) {                let acc;                let word_acc;                let backtick_mode;                let escape_mode;                let last_c;                let block_return;                acc=[];                word_acc=[];                backtick_mode=0;                escape_mode=0;                last_c=null;                block_return=null;                if (check_true (_prefix_op)){                     (acc).push(_prefix_op)                };                depth=_depth;                await (async function(){                     let __test_condition__8=async function() {                         return  (await (await Environment.get_global("not"))(stop)&&(idx<len))                    };                    let __body_ref__9=async function() {                        idx+=1;                        escape_mode=await Math.max(0,(escape_mode-1));                        c=await get_char(idx);                        next_c=await get_char((idx+1));                        if (check_true ((c==="\n"))){                            line_number+=1;                             column_number=0                        };                        if (check_true (debugmode)){                             await console.log(_depth,"C->",c,next_c,mode,escape_mode,await clone(acc),await clone(word_acc),(handler_stack && handler_stack.length))                        };                        await async function(){                            if (check_true( ((next_c===undefined)&&await (await Environment.get_global("not"))((await (async function(){                                let __targ__10=await (await Environment.get_global("last"))(handler_stack);                                if (__targ__10){                                     return(__targ__10)[0]                                }                             })()===undefined))&&(await (await Environment.get_global("not"))((c===await (async function(){                                let __targ__11=await (await Environment.get_global("last"))(handler_stack);                                if (__targ__11){                                     return(__targ__11)[0]                                }                             })()))||((handler_stack && handler_stack.length)>1))))) {                                 return await error("premature end",("premature end: expected: "+await (async function(){                                    let __targ__12=await (await Environment.get_global("last"))(handler_stack);                                    if (__targ__12){                                         return(__targ__12)[0]                                    }                                 })()))                            } else if (check_true( ((next_c===undefined)&&(mode===in_quotes)&&await (await Environment.get_global("not"))((await c["charCodeAt"]()===34))))) {                                 return await error("premature end","premature end: expected: \"")
                            } else if (check_true( ((next_c===undefined)&&(mode===in_long_text)&&await (await Environment.get_global("not"))((c==="|"))))) {
                                 return await error("premature end","premature end: expected: |")
                            } else if (check_true( ((mode===in_code)&&(_depth===1)&&(next_c===")")&&(c===")")))) {
                                 return  await error("trailing character","unexpected trailing parenthesis")
                            }
                        } ();
                        await async function(){
                            if (check_true( ((c==="\n")&&(mode===in_comment)))) {
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((92===await c["charCodeAt"].call(c,0))&&(mode===in_long_text)))) {
                                (word_acc).push(c);
                                 return  (word_acc).push(c)
                            } else if (check_true( ((mode>0)&&(escape_mode===1)&&(92===await c["charCodeAt"].call(c,0))))) {
                                 return  (word_acc).push(c)
                            } else if (check_true( ((mode>0)&&(92===await c["charCodeAt"].call(c,0))))) {
                                 return  escape_mode=2
                            } else if (check_true( ((mode>0)&&(escape_mode===1)))) {
                                 return  (word_acc).push(await handle_escape_char(c))
                            } else if (check_true( ((mode===in_long_text)&&(escape_mode===0)&&(c==="|")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_quotes)&&(escape_mode===0)&&(c==="\"")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_single_quote)&&(escape_mode===0)&&(c==="'")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((c==="|")&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_long_text;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                    block_return=["=:quotem",block_return];
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( ((c==="\"")&&(escape_mode===0)&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_quotes;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( ((c==="'")&&(escape_mode===0)&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_single_quote;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( (mode===in_comment))) {
                                 return false
                            } else if (check_true( ((c===";")&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_comment;
                                 return  await read_block(await (await Environment.get_global("add"))(_depth,1))
                            } else if (check_true( ((mode===in_code)&&(await (await Environment.get_global("length"))(handler_stack)>0)&&(c===await (async function(){
                                let __targ__13=await (await Environment.get_global("last"))(handler_stack);
                                if (__targ__13){
                                     return(__targ__13)[0]
                                } 
                            })())))) {
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_code)&&read_table[c]&&await (await Environment.get_global("first"))(read_table[c])))) {
                                if (check_true (await (async function(){
                                    let __targ__14=read_table[c];
                                    if (__targ__14){
                                         return(__targ__14)[2]
                                    } 
                                })())){
                                    handler=await (async function(){
                                        let __targ__15=read_table[c];
                                        if (__targ__15){
                                             return(__targ__15)[2]
                                        } 
                                    })();
                                    await (async function(){
                                        let __array_op_rval__16=handler;
                                         if (__array_op_rval__16 instanceof Function){
                                            return await __array_op_rval__16() 
                                        } else {
                                            return[__array_op_rval__16]
                                        }
                                    })();
                                     handler=null
                                };
                                (handler_stack).push(read_table[c]);
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc,backtick_mode));
                                    backtick_mode=0;
                                     word_acc=[]
                                };
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                handler=await (async function(){
                                    let __targ__17=(handler_stack).pop();
                                    if (__targ__17){
                                         return(__targ__17)[1]
                                    } 
                                })();
                                block_return=await (async function(){
                                    let __array_op_rval__18=handler;
                                     if (__array_op_rval__18 instanceof Function){
                                        return await __array_op_rval__18(block_return) 
                                    } else {
                                        return[__array_op_rval__18,block_return]
                                    }
                                })();
                                if (check_true (await (await Environment.get_global("not"))((undefined===block_return)))){
                                    if (check_true ((backtick_mode===1))){
                                        block_return=["=:quotem",block_return];
                                         backtick_mode=0
                                    };
                                     return  (acc).push(block_return)
                                }
                            } else if (check_true( ((mode===in_code)&&(c==="`")))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                 return  backtick_mode=1
                            } else if (check_true( ((mode===in_code)&&(c===":")&&((word_acc && word_acc.length)===0)&&((acc && acc.length)>0)&&(await (await Environment.get_global("last"))(acc) instanceof String || typeof await (await Environment.get_global("last"))(acc)==='string')))) {
                                 return (acc).push(await (await Environment.get_global("add"))((acc).pop(),":"))
                            } else if (check_true( ((mode===in_code)&&(last_c===",")&&((c==="#")||(c==="@"))))) {
                                (word_acc).push(c);
                                (acc).push(await process_word(word_acc));
                                 return  word_acc=[]
                            } else if (check_true( ((mode===in_code)&&((c===" ")||(await c["charCodeAt"].call(c,0)===10)||(await c["charCodeAt"].call(c,0)===9)||((c===",")&&await (await Environment.get_global("not"))((next_c==="@"))&&await (await Environment.get_global("not"))((next_c==="#"))))))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    if (check_true ((backtick_mode===1))){
                                        (acc).push(await process_word(word_acc,backtick_mode));
                                         backtick_mode=0
                                    } else {
                                         (acc).push(await process_word(word_acc))
                                    };
                                     return  word_acc=[]
                                }
                            } else if (check_true( ((mode===in_code)&&(await c["charCodeAt"].call(c,0)===13)))) {
                                 return false
                            } else  {
                                 return  (word_acc).push(c)
                            }
                        } ();
                        column_number+=1;
                         return  last_c=c
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__8()) {
                        await __body_ref__9();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                if (check_true (((word_acc && word_acc.length)>0))){
                    (acc).push(await process_word(word_acc,backtick_mode));
                     word_acc=[]
                };
                 return  acc
            };
            if (check_true (debugmode)){
                 await console.log("read->",in_buffer)
            };
            output_structure=await read_block(0);
            if (check_true (debugmode)){
                 await console.log("read<-",await clone(output_structure))
            };
            if (check_true (((output_structure instanceof Array)&&(await (await Environment.get_global("length"))(output_structure)>1)))){
                (output_structure).unshift("=:iprogn");
                 return  await (await Environment.get_global("first"))(await (async function(){
                    let __array_op_rval__19=output_structure;
                     if (__array_op_rval__19 instanceof Function){
                        return await __array_op_rval__19() 
                    } else {
                        return[__array_op_rval__19]
                    }
                })())
            } else {
                  return await (await Environment.get_global("first"))(output_structure)
            }
        }
    } ()
};__obj__1["desym"]=async function(val) {
        let strip;
        strip=async function(v) {
            return (""+ await (await Environment.get_global("as_lisp"))(v))
        };
        return await async function(){
            if (check_true ((val instanceof String || typeof val==='string'))) {
                return await strip(val)
            } else if (check_true ((val instanceof Array))) {
                return await (async function() {
                    let __for_body__3=async function(v) {
                        return await strip(v)
                    };
                    let __array__4=[],__elements__2=val;
                    let __BREAK__FLAG__=false;
                    for(let __iter__1 in __elements__2) {
                        __array__4.push(await __for_body__3(__elements__2[__iter__1]));
                        if(__BREAK__FLAG__) {
                             __array__4.pop();
                            break;
                            
                        }
                    }return __array__4;
                     
                })()
            } else {
                return val
            }
        } ()
    };__obj__1["desym_ref"]=async function(val) {
    return ["=:+","",["=:as_lisp",val]]
};__obj__1["deref"]=async function(val) {
    return ["=:let",[["=:mval",val]],["=:if",["=:and",["=:is_string?","=:mval"],["=:starts_with?","=:","=:mval"]],["=:->","=:mval","substr",2],"=:mval"]]
};__obj__1["when"]=async function(condition,...mbody) {
    return ["=:if",condition,["=:do",].concat(mbody)]
};__obj__1["if_compile_time_defined"]=async function(quoted_symbol,exists_form,not_exists_form) {
    if (check_true (await (await Environment.get_global("describe"))(quoted_symbol))){
        return exists_form
    } else {
        return (not_exists_form|| [])
    }
};__obj__1["defexternal"]=async function(name,value) {
    return ["=:let",[["=:symname",["=:desym",].concat(name)]],["=:do",["=:set_prop","=:globalThis","=:symname",value],["=:prop","=:globalThis","=:symname"]]]
};__obj__1["defun"]=async function(name,lambda_list,body,meta) {
    let fn_name;
    let fn_args;
    let fn_body;
    let fn_meta;
    let complex_lambda_list;
    let source_details;
    fn_name=name;
    fn_args=lambda_list;
    fn_body=body;
    fn_meta=meta;
    complex_lambda_list=await (async function(){
         return await (await Environment.get_global("or_args"))(await (async function() {
            let __for_body__49=async function(elem) {
                return (await (await Environment.get_global("length"))(await (await Environment.get_global("flatten"))(await (async function(){
                     return await (await Environment.get_global("destructure_list"))(elem) 
                })()))>0)
            };
            let __array__50=[],__elements__48=lambda_list;
            let __BREAK__FLAG__=false;
            for(let __iter__47 in __elements__48) {
                __array__50.push(await __for_body__49(__elements__48[__iter__47]));
                if(__BREAK__FLAG__) {
                     __array__50.pop();
                    break;
                    
                }
            }return __array__50;
             
        })()) 
    })();
    source_details=await (await Environment.get_global("add"))({
        name:await (async function(){
             return await (await Environment.get_global("unquotify"))(name) 
        })(),fn_args:await (await Environment.get_global("as_lisp"))(fn_args)
    },await (async function(){
        if (check_true (fn_meta)){
            {
                if (check_true ((fn_meta && fn_meta["description"]))){
                    await async function(){
                        fn_meta["description"]=(fn_meta && fn_meta["description"]);
                        return fn_meta;
                        
                    }()
                };
                return fn_meta
            }
        } else {
            return new Object()
        }
    })());
    if (check_true (complex_lambda_list)){
        return ["=:defglobal",fn_name,["=:fn",["&","=:args"],["=:destructuring_bind",fn_args,"=:args",fn_body]],["=:quote",source_details]]
    } else {
        return ["=:defglobal",fn_name,["=:fn",fn_args,fn_body],["=:quote",source_details]]
    }
};__obj__1["defun_sync"]=async function(name,args,body,meta) {
    let fn_name;
    let fn_args;
    let fn_body;
    let source_details;
    fn_name=name;
    fn_args=args;
    fn_body=body;
    source_details=await (await Environment.get_global("add"))({
        name:await (async function(){
             return await (await Environment.get_global("unquotify"))(name) 
        })(),fn_args:await (await Environment.get_global("as_lisp"))(fn_args)
    },await (async function(){
        if (check_true (meta)){
            return meta
        } else {
            return new Object()
        }
    })());
    return ["=:do",["=:defglobal",fn_name,["=:function",fn_args,fn_body],["=:quote",source_details]]]
};__obj__1["macroexpand"]=async function(quoted_form) {
    let macro_name;
    let working_env;
    let macro_func;
    let expansion;
    macro_name=await (quoted_form && quoted_form["0"])["substr"].call((quoted_form && quoted_form["0"]),2);
    working_env=await Environment["get_namespace_handle"].call(Environment,await (await Environment.get_global("current_namespace"))());
    macro_func=await working_env["get_global"].call(working_env,macro_name);
    expansion=await (async function(){
        if (check_true ((macro_func instanceof Function&& await (await Environment.get_global("resolve_path"))(await (async function(){
            let __array_op_rval__5=macro_name;
             if (__array_op_rval__5 instanceof Function){
                return await __array_op_rval__5("eval_when","compile_time") 
            } else {
                return [__array_op_rval__5,"eval_when","compile_time"]
            }
        })(),(working_env && working_env["definitions"]))))){
            return await (async function(){
                let __apply_args__6=await (async function(){
                     return await quoted_form["slice"].call(quoted_form,1) 
                })();
                return ( macro_func).apply(this,__apply_args__6)
            })()
        } else {
            return quoted_form
        }
    })();
    return expansion
};__obj__1["macroexpand_nq"]=async function(form) {
    let macro_name;
    let macro_func;
    let expansion;
    macro_name=await (async function() {
        {
             let __call_target__=form[0], __call_method__="substr";
            return await __call_target__[__call_method__].call(__call_target__,2)
        } 
    })();
    macro_func=await Environment["get_global"].call(Environment,macro_name);
    expansion=await (async function(){
        if (check_true (macro_func instanceof Function)){
            return await (async function(){
                let __apply_args__8=await (async function(){
                     return await form["slice"].call(form,1) 
                })();
                return ( macro_func).apply(this,__apply_args__8)
            })()
        } else {
            return form
        }
    })();
    return ["=:quote",expansion]
};__obj__1["check_type"]=async function(thing,type_name,error_string) {
    if (check_true (error_string)){
        return ["=:if",["=:not",["=:==",["=:sub_type",thing],type_name]],["=:throw","=:TypeError",error_string]]
    } else {
        return ["=:if",["=:not",["=:==",["=:sub_type",thing],type_name]],["=:throw","=:TypeError",["=:+","invalid type: required ",type_name," but got ",["=:sub_type",thing]]]]
    }
};__obj__1["get_object_path"]=function(refname) {
        if (check_true ((( refname["indexOf"].call(refname,".")>-1)|| ( refname["indexOf"].call(refname,"[")>-1)))){
            {
                let chars;
                let comps;
                let mode;
                let name_acc;
                chars=(refname).split("");
                comps=[];
                mode=0;
                name_acc=[];
                 ( function() {
                    let __for_body__12=function(c) {
                        return   (function(){
                            if (check_true (((c===".")&& (mode===0)))) {
                                {
                                    if (check_true (((name_acc && name_acc.length)>0))){
                                        {
                                            (comps).push((name_acc).join(""))
                                        }
                                    };
                                    return name_acc=[]
                                }
                            } else if (check_true (((mode===0)&& (c==="[")))) {
                                {
                                    mode=1;
                                    if (check_true (((name_acc && name_acc.length)>0))){
                                        {
                                            (comps).push((name_acc).join(""))
                                        }
                                    };
                                    return name_acc=[]
                                }
                            } else if (check_true (((mode===1)&& (c==="]")))) {
                                {
                                    mode=0;
                                    (comps).push((name_acc).join(""));
                                    return name_acc=[]
                                }
                            } else {
                                return (name_acc).push(c)
                            }
                        } )()
                    };
                    let __array__13=[],__elements__11=chars;
                    let __BREAK__FLAG__=false;
                    for(let __iter__10 in __elements__11) {
                        __array__13.push( __for_body__12(__elements__11[__iter__10]));
                        if(__BREAK__FLAG__) {
                             __array__13.pop();
                            break;
                            
                        }
                    }return __array__13;
                     
                })();
                if (check_true (((name_acc && name_acc.length)>0))){
                    (comps).push((name_acc).join(""))
                };
                return comps
            }
        } else {
            return  ( function(){
                let __array_op_rval__14=refname;
                 if (__array_op_rval__14 instanceof Function){
                    return  __array_op_rval__14() 
                } else {
                    return [__array_op_rval__14]
                }
            })()
        }
    };__obj__1["do_deferred_splice"]=async function(tree) {
    let rval;
    let idx;
    let tval;
    let deferred_operator;
    rval=null;
    idx=0;
    tval=null;
    deferred_operator=(["=","$","&","!"]).join("");
    return await async function(){
        if (check_true ((tree instanceof Array))) {
            {
                rval=[];
                await (async function(){
                     let __test_condition__15=async function() {
                        return (idx<(tree && tree.length))
                    };
                    let __body_ref__16=async function() {
                        tval=tree[idx];
                        if (check_true ((tval===deferred_operator))){
                            {
                                idx+=1;
                                tval=tree[idx];
                                rval=await rval["concat"].call(rval,await (async function(){
                                     return await do_deferred_splice(tval) 
                                })())
                            }
                        } else {
                            (rval).push(await (async function(){
                                 return await do_deferred_splice(tval) 
                            })())
                        };
                        return idx+=1
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__15()) {
                        await __body_ref__16();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                return rval
            }
        } else if (check_true ((tree instanceof Object))) {
            {
                rval=new Object();
                await (async function() {
                    let __for_body__19=async function(pset) {
                        return await async function(){
                            rval[(pset && pset["0"])]=await (async function(){
                                 return await do_deferred_splice((pset && pset["1"])) 
                            })();
                            return rval;
                            
                        }()
                    };
                    let __array__20=[],__elements__18=await (await Environment.get_global("pairs"))(tree);
                    let __BREAK__FLAG__=false;
                    for(let __iter__17 in __elements__18) {
                        __array__20.push(await __for_body__19(__elements__18[__iter__17]));
                        if(__BREAK__FLAG__) {
                             __array__20.pop();
                            break;
                            
                        }
                    }return __array__20;
                     
                })();
                return rval
            }
        } else {
            return tree
        }
    } ()
};__obj__1["define"]=async function(...defs) {
    let acc;
    let symname;
    acc=await (async function(){
         return ["=:progl"] 
    })();
    symname=null;
    await (async function() {
        let __for_body__24=async function(defset) {
            (acc).push(await (async function(){
                 return ["=:defvar",(defset && defset["0"]),(defset && defset["1"])] 
            })());
            symname=(defset && defset["0"]);
            (acc).push(await (async function(){
                 return ["=:set_prop",await (async function(){
                     return "=:Environment.global_ctx.scope" 
                })(),(""+ await (await Environment.get_global("as_lisp"))(symname)),symname] 
            })());
            if (check_true (((defset && defset["2"]) instanceof Object))){
                {
                    return (acc).push(await (async function(){
                         return [["=:set_prop",await (async function(){
                             return "=:Environment.definitions" 
                        })(),(""+ await (await Environment.get_global("as_lisp"))(symname)+ ""),(defset && defset["2"])]] 
                    })())
                }
            }
        };
        let __array__25=[],__elements__23=defs;
        let __BREAK__FLAG__=false;
        for(let __iter__22 in __elements__23) {
            __array__25.push(await __for_body__24(__elements__23[__iter__22]));
            if(__BREAK__FLAG__) {
                 __array__25.pop();
                break;
                
            }
        }return __array__25;
         
    })();
    return acc
};__obj__1["defbinding"]=async function(...args) {
    let binding;
    let acc;
    binding=null;
    acc=await (async function(){
         return ["=:list"] 
    })();
    await (async function() {
        let __for_body__28=async function(bind_set) {
            return await async function(){
                if (check_true (((bind_set instanceof Array)&& (((bind_set && bind_set.length)===2)|| ((bind_set && bind_set.length)===3))&& ((bind_set && bind_set["1"]) instanceof Array)&& ((bind_set && bind_set["1"] && bind_set["1"]["length"])===2)))) {
                    {
                        binding=await (async function(){
                             return ["=:quotel",await (async function(){
                                 return ["=:bind",(bind_set && bind_set["1"] && bind_set["1"]["0"]),(bind_set && bind_set["1"] && bind_set["1"]["1"])] 
                            })()] 
                        })();
                        return (acc).push(await (async function(){
                             return ["=:defglobal",((await Environment.get_global("*namespace*"))+ "/"+ await (async function(){
                                let mval;
                                mval=(bind_set && bind_set["0"]);
                                if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                                    return await mval["substr"].call(mval,2)
                                } else {
                                    return mval
                                }
                            })()),await (async function(){
                                 return ["=:bind",(bind_set && bind_set["1"] && bind_set["1"]["0"]),(bind_set && bind_set["1"] && bind_set["1"]["1"])] 
                            })(),await (async function(){
                                if (check_true (((bind_set && bind_set["2"]) instanceof Object))){
                                    return await (await Environment.get_global("add"))(new Object(),(bind_set && bind_set["2"]),{
                                        initializer:binding
                                    })
                                } else {
                                    return {
                                        initializer:binding
                                    }
                                }
                            })()] 
                        })())
                    }
                } else {
                    throw new SyntaxError("defbinding received malform arguments");
                    
                }
            } ()
        };
        let __array__29=[],__elements__27=args;
        let __BREAK__FLAG__=false;
        for(let __iter__26 in __elements__27) {
            __array__29.push(await __for_body__28(__elements__27[__iter__26]));
            if(__BREAK__FLAG__) {
                 __array__29.pop();
                break;
                
            }
        }return __array__29;
         
    })();
    return acc
};__obj__1["define_env"]=async function(...defs) {
    let acc;
    let symname;
    acc=await (async function(){
         return ["=:progl"] 
    })();
    symname=null;
    await (async function() {
        let __for_body__32=async function(defset) {
            (acc).push(await (async function(){
                 return ["=:defvar",(defset && defset["0"]),(defset && defset["1"])] 
            })());
            symname=(defset && defset["0"]);
            (acc).push(await (async function(){
                 return ["=:set_prop",await (async function(){
                     return "=:Environment.global_ctx.scope" 
                })(),(""+ await (await Environment.get_global("as_lisp"))(symname)),symname] 
            })());
            if (check_true (((defset && defset["2"]) instanceof Object))){
                return (acc).push(await (async function(){
                     return [["=:set_prop",await (async function(){
                         return "=:Environment.definitions" 
                    })(),(""+ await (await Environment.get_global("as_lisp"))(symname)+ ""),await (await Environment.get_global("add"))({
                        core_lang:true
                    },(defset && defset["2"]))]] 
                })())
            } else {
                return (acc).push(await (async function(){
                     return [["=:set_prop",await (async function(){
                         return "=:Environment.definitions" 
                    })(),(""+ await (await Environment.get_global("as_lisp"))(symname)+ ""),{
                        core_lang:true
                    }]] 
                })())
            }
        };
        let __array__33=[],__elements__31=defs;
        let __BREAK__FLAG__=false;
        for(let __iter__30 in __elements__31) {
            __array__33.push(await __for_body__32(__elements__31[__iter__30]));
            if(__BREAK__FLAG__) {
                 __array__33.pop();
                break;
                
            }
        }return __array__33;
         
    })();
    return acc
};__obj__1["type"]=async function(x) {
    return await async function(){
        if (check_true ((null===x))) {
            return "null"
        } else if (check_true ((undefined===x))) {
            return "undefined"
        } else if (check_true ((x instanceof Array))) {
            return "array"
        } else {
            return typeof x
        }
    } ()
};__obj__1["destructure_list"]=async function(elems) {
    let idx;
    let acc;
    let structure;
    let follow_tree;
    idx=0;
    acc=[];
    structure=elems;
    follow_tree=async function(elems,_path_prefix) {
        return await async function(){
            if (check_true ((elems instanceof Array))) {
                return await (await Environment.get_global("map"))(async function(elem,idx) {
                    return await follow_tree(elem,await (await Environment.get_global("add"))(_path_prefix,idx))
                },elems)
            } else if (check_true ((elems instanceof Object))) {
                return await (async function() {
                    let __for_body__36=async function(pset) {
                        return await follow_tree((pset && pset["1"]),await (await Environment.get_global("add"))(_path_prefix,(pset && pset["0"])))
                    };
                    let __array__37=[],__elements__35=await (await Environment.get_global("pairs"))(elems);
                    let __BREAK__FLAG__=false;
                    for(let __iter__34 in __elements__35) {
                        __array__37.push(await __for_body__36(__elements__35[__iter__34]));
                        if(__BREAK__FLAG__) {
                             __array__37.pop();
                            break;
                            
                        }
                    }return __array__37;
                     
                })()
            } else {
                return (acc).push(_path_prefix)
            }
        } ()
    };
    await follow_tree(structure,[]);
    return acc
};__obj__1["destructuring_bind"]=async function(bind_vars,expression,...forms) {
    let binding_vars;
    let preamble;
    let allocations;
    let expr_result_var;
    let paths;
    let bound_expression;
    let acc;
    binding_vars=bind_vars;
    preamble=[];
    allocations=[];
    expr_result_var=("=:"+ "_expr_"+ await (async function(){
         return await (await Environment.get_global("random_int"))(100000) 
    })());
    paths=await (async function(){
         return await (await Environment.get_global("destructure_list"))(binding_vars) 
    })();
    bound_expression=await (async function(){
        if (check_true (((expression instanceof Array)&& await (await Environment.get_global("starts_with?"))("=:",(expression && expression["0"]))))){
            {
                (allocations).push(await (async function(){
                     return [expr_result_var,expression] 
                })());
                return expr_result_var
            }
        } else {
            return expression
        }
    })();
    acc=await (async function(){
         return ["=:let"] 
    })();
    await (await Environment.get_global("assert"))(((bind_vars instanceof Array)&& await (async function(){
         return await (await Environment.get_global("is_value?"))(expression) 
    })()&& await (async function(){
         return await (await Environment.get_global("is_value?"))(forms) 
    })()),"destructuring_bind: requires 3 arguments");
    await (async function() {
        let __for_body__40=async function(idx) {
            return (allocations).push(await (async function(){
                 return [await (await Environment.get_global("resolve_path"))(paths[idx],binding_vars),await (async function(){
                     return await async function(){
                        if (check_true ((bound_expression instanceof Object))) {
                            return await (await Environment.get_global("resolve_path"))(paths[idx],bound_expression)
                        } else {
                            return (await (await Environment.get_global("conj"))(await (async function(){
                                let __array_op_rval__42=bound_expression;
                                 if (__array_op_rval__42 instanceof Function){
                                    return await __array_op_rval__42() 
                                } else {
                                    return [__array_op_rval__42]
                                }
                            })(),paths[idx])).join(".")
                        }
                    } () 
                })()] 
            })())
        };
        let __array__41=[],__elements__39=await (await Environment.get_global("range"))(await (await Environment.get_global("length"))(paths));
        let __BREAK__FLAG__=false;
        for(let __iter__38 in __elements__39) {
            __array__41.push(await __for_body__40(__elements__39[__iter__38]));
            if(__BREAK__FLAG__) {
                 __array__41.pop();
                break;
                
            }
        }return __array__41;
         
    })();
    (acc).push(allocations);
    acc=await (await Environment.get_global("conj"))(acc,forms);
    return acc
};__obj__1["split_by_recurse"]=function(token,container) {
        return   (function(){
            if (check_true ((container instanceof String || typeof container==='string'))) {
                return (container).split(token)
            } else if (check_true ((container instanceof Array))) {
                return  ( Environment.get_global("map"))(async function(elem) {
                    return  ( Environment.get_global("split_by_recurse"))(token,elem)
                },container)
            }
        } )()
    };__obj__1["no_await"]=async function(form) {
    return ["=:progn",["=:defvar","=:__SYNCF__",true],form]
};__obj__1["reduce"]=async function(...args) {
    let elem;
    let item_list;
    let form;
    elem=(args && args["0"] && args["0"]["0"]);
    item_list=(args && args["0"] && args["0"]["1"]);
    form=(args && args["1"]);
    return ["=:let",[["=:__collector",[]],["=:__result","=:nil"],["=:__action",["=:fn",[].concat(elem),form]]],["=:declare",["=:function","=:__action"]],["=:for_each",["=:__item",item_list],["=:do",["=:=","=:__result",["=:__action","=:__item"]],["=:if","=:__result",["=:push","=:__collector","=:__result"]]]],"=:__collector"]
};__obj__1["reduce_sync"]=async function(...args) {
    let elem;
    let item_list;
    let form;
    elem=(args && args["0"] && args["0"]["0"]);
    item_list=(args && args["0"] && args["0"]["1"]);
    form=(args && args["1"]);
    return ["=:let",[["=:__collector",[]],["=:__result","=:nil"],["=:__action",["=:function",[].concat(elem),form]]],["=:declare",["=:function","=:__action"]],["=:for_each",["=:__item",item_list],["=:do",["=:=","=:__result",["=:__action","=:__item"]],["=:if","=:__result",["=:push","=:__collector","=:__result"]]]],"=:__collector"]
};__obj__1["bind_function"]=function anonymous(func,this_arg
) {
{ return func.bind(this_arg) }
};__obj__1["is_error?"]=function(val) {
        return (val instanceof Error)
    };__obj__1["is_reference?"]=async function(val) {
    return ["=:and",["=:is_string?",val],["=:>",["=:length",val],2],["=:starts_with?",["=:quote","=:"],val]]
};__obj__1["scan_str"]=function(regex,search_string) {
        let result;
        let last_result;
        let totals;
        let strs;
        result=null;
        last_result=null;
        totals=[];
        strs=(""+ search_string);
        if (check_true ( ( Environment.get_global("is_regex?"))(regex))){
            {
                  (function(){
                    regex["lastIndex"]=0;
                    return regex;
                    
                })();
                 ( function(){
                     let __test_condition__53=function() {
                        return ( ( function(){
                            result= regex["exec"].call(regex,strs);
                            return true
                        })()&& result&&  ( function(){
                            if (check_true (last_result)){
                                return  ( Environment.get_global("not"))(((result && result["0"])===(last_result && last_result["0"])))
                            } else {
                                return true
                            }
                        })())
                    };
                    let __body_ref__54=function() {
                        last_result=result;
                        return (totals).push( ( Environment.get_global("to_object"))( ( function() {
                            let __for_body__57=function(v) {
                                return  ( function(){
                                    let __array_op_rval__59=v;
                                     if (__array_op_rval__59 instanceof Function){
                                        return  __array_op_rval__59(result[v]) 
                                    } else {
                                        return [__array_op_rval__59,result[v]]
                                    }
                                })()
                            };
                            let __array__58=[],__elements__56= ( Environment.get_global("keys"))(result);
                            let __BREAK__FLAG__=false;
                            for(let __iter__55 in __elements__56) {
                                __array__58.push( __for_body__57(__elements__56[__iter__55]));
                                if(__BREAK__FLAG__) {
                                     __array__58.pop();
                                    break;
                                    
                                }
                            }return __array__58;
                             
                        })()))
                    };
                    let __BREAK__FLAG__=false;
                    while( __test_condition__53()) {
                         __body_ref__54();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })()
            }
        } else {
            throw new Error(new ReferenceError(("scan_str: invalid RegExp provided: "+ regex)));
            
        };
        return totals
    };__obj__1["remove_prop"]=async function(obj,key) {
    if (check_true (await (await Environment.get_global("not"))((undefined===obj[key])))){
        {
            {
                let val;
                val=obj[key];
                await (await Environment.get_global("delete_prop"))(obj,key);
                return val
            }
        }
    }
};__obj__1["object_methods"]=async function(obj) {
    let properties;
    let current_obj;
    properties=new Set();
    current_obj=obj;
    await (async function(){
         let __test_condition__236=async function() {
            return current_obj
        };
        let __body_ref__237=async function() {
            await (await Environment.get_global("map"))(async function(item) {
                return await properties["add"].call(properties,item)
            },await Object.getOwnPropertyNames(current_obj));
            return current_obj=await Object.getPrototypeOf(current_obj)
        };
        let __BREAK__FLAG__=false;
        while(await __test_condition__236()) {
            await __body_ref__237();
             if(__BREAK__FLAG__) {
                 break;
                
            }
        } ;
        
    })();
    return await (async function() {
        {
             let __call_target__=await Array.from(await properties["keys"]()), __call_method__="filter";
            return await __call_target__[__call_method__].call(__call_target__,async function(item) {
                return item instanceof Function
            })
        } 
    })()
};__obj__1["expand_dot_accessor"]=async function(val,ctx) {
    let comps;
    let find_in_ctx;
    let reference;
    let val_type;
    comps=(val).split(".");
    find_in_ctx=async function(the_ctx) {
        return await async function(){
            if (check_true (await (async function(){
                let __targ__62=(the_ctx && the_ctx["scope"]);
                if (__targ__62){
                     return(__targ__62)[reference]
                } 
            })())) {
                return await (async function(){
                    let __targ__63=(the_ctx && the_ctx["scope"]);
                    if (__targ__63){
                         return(__targ__63)[reference]
                    } 
                })()
            } else if (check_true ((the_ctx && the_ctx["parent"]))) {
                return await find_in_ctx((the_ctx && the_ctx["parent"]))
            }
        } ()
    };
    reference=(comps).shift();
    val_type=await find_in_ctx(ctx);
    return await async function(){
        if (check_true ((0===(comps && comps.length)))) {
            return reference
        } else if (check_true (((val_type instanceof Object)&& await (await Environment.get_global("contains?"))((comps && comps["0"]),await (async function(){
             return await (await Environment.get_global("object_methods"))(val_type) 
        })())&& await (await Environment.get_global("not"))(await val_type["propertyIsEnumerable"].call(val_type,(comps && comps["0"])))))) {
            return val
        } else {
            return (await (await Environment.get_global("conj"))(await (async function(){
                let __array_op_rval__64=reference;
                 if (__array_op_rval__64 instanceof Function){
                    return await __array_op_rval__64() 
                } else {
                    return [__array_op_rval__64]
                }
            })(),await (await Environment.get_global("flatten"))(await (async function() {
                let __for_body__67=async function(comp) {
                    if (check_true (await (await Environment.get_global("is_number?"))(comp))){
                        return ["[",comp,"]"]
                    } else {
                        return ["[\"",comp,"\"]"]
                    }
                };
                let __array__68=[],__elements__66=comps;
                let __BREAK__FLAG__=false;
                for(let __iter__65 in __elements__66) {
                    __array__68.push(await __for_body__67(__elements__66[__iter__65]));
                    if(__BREAK__FLAG__) {
                         __array__68.pop();
                        break;
                        
                    }
                }return __array__68;
                 
            })()))).join("")
        }
    } ()
};__obj__1["getf_ctx"]=async function(ctx,name,_value) {
    if (check_true ((ctx&& (name instanceof String || typeof name==='string')))){
        return await async function(){
            if (check_true (await (await Environment.get_global("not"))((undefined===await (async function(){
                let __targ__69=(ctx && ctx["scope"]);
                if (__targ__69){
                     return(__targ__69)[name]
                } 
            })())))) {
                if (check_true (await (await Environment.get_global("not"))((_value===undefined)))){
                    {
                        await async function(){
                            let __target_obj__70=(ctx && ctx["scope"]);
                            __target_obj__70[name]=_value;
                            return __target_obj__70;
                            
                        }();
                        return _value
                    }
                } else {
                    return await (async function(){
                        let __targ__71=(ctx && ctx["scope"]);
                        if (__targ__71){
                             return(__targ__71)[name]
                        } 
                    })()
                }
            } else if (check_true ((ctx && ctx["parent"]))) {
                return await (await Environment.get_global("getf_ctx"))((ctx && ctx["parent"]),name,_value)
            } else {
                return undefined
            }
        } ()
    } else {
        throw new Error("invalid call to getf_ctx: missing argument/s");
        
    }
};__obj__1["setf_ctx"]=async function(ctx,name,value) {
    let found_val;
    found_val=await (async function(){
         return await (await Environment.get_global("getf_ctx"))(ctx,name,value) 
    })();
    if (check_true ((found_val===undefined))){
        await async function(){
            let __target_obj__72=(ctx && ctx["scope"]);
            __target_obj__72[name]=value;
            return __target_obj__72;
            
        }()
    };
    return value
};__obj__1["set_path"]=async function(path,obj,value) {
    let fpath;
    let idx;
    let rpath;
    let target_obj;
    fpath=await (async function(){
         return await clone(path) 
    })();
    idx=(fpath).pop();
    rpath=fpath;
    target_obj=null;
    target_obj=await (await Environment.get_global("resolve_path"))(rpath,obj);
    if (check_true (target_obj)){
        {
            return await async function(){
                target_obj[idx]=value;
                return target_obj;
                
            }()
        }
    } else {
        throw new RangeError(("set_path: invalid path: "+ path));
        
    }
};__obj__1["minmax"]=async function(container) {
    let value_found;
    let smallest;
    let biggest;
    value_found=false;
    smallest=(await Environment.get_global("MAX_SAFE_INTEGER"));
    biggest=(-1* (await Environment.get_global("MAX_SAFE_INTEGER")));
    if (check_true ((container&& (container instanceof Array)&& (await (await Environment.get_global("length"))(container)>0)))){
        {
            await (async function() {
                let __for_body__76=async function(value) {
                    return (await (await Environment.get_global("is_number?"))(value)&& await (async function(){
                        value_found=true;
                        smallest=await Math.min(value,smallest);
                        return biggest=await Math.max(value,biggest)
                    })())
                };
                let __array__77=[],__elements__75=container;
                let __BREAK__FLAG__=false;
                for(let __iter__74 in __elements__75) {
                    __array__77.push(await __for_body__76(__elements__75[__iter__74]));
                    if(__BREAK__FLAG__) {
                         __array__77.pop();
                        break;
                        
                    }
                }return __array__77;
                 
            })();
            if (check_true (value_found)){
                return await (async function(){
                    let __array_op_rval__78=smallest;
                     if (__array_op_rval__78 instanceof Function){
                        return await __array_op_rval__78(biggest) 
                    } else {
                        return [__array_op_rval__78,biggest]
                    }
                })()
            } else {
                return null
            }
        }
    } else {
        return null
    }
};__obj__1["aif"]=async function(test_expr,eval_when_true,eval_when_false) {
    return ["=:let",[["=:it",test_expr]],["=:if","=:it",eval_when_true,eval_when_false]]
};__obj__1["ifa"]=async function(test,thenclause,elseclause) {
    return ["=:let",[["=:it",test]],["=:if","=:it",thenclause,elseclause]]
};__obj__1["map_range"]=async function(n,from_range,to_range) {
    ;
    return ((to_range && to_range["0"])+ (((n- (from_range && from_range["0"]))/ ((from_range && from_range["1"])- (from_range && from_range["0"])))* ((to_range && to_range["1"])- (to_range && to_range["0"]))))
};__obj__1["range_inc"]=function(start,end,step) {
        if (check_true (end)){
            return  ( Environment.get_global("range"))(start, ( Environment.get_global("add"))(end,1),step)
        } else {
            return  ( Environment.get_global("range"))( ( Environment.get_global("add"))(start,1))
        }
    };__obj__1["HSV_to_RGB"]=function anonymous(h, s, v
) {
{
        var r, g, b, i, f, p, q, t;
        if (arguments.length === 1) {
            s = h.s, v = h.v, h = h.h;
        }
        i = Math.floor(h * 6);
        f = h * 6 - i;
        p = v * (1 - s);
        q = v * (1 - f * s);
        t = v * (1 - (1 - f) * s);
        switch (i % 6) {
            case 0: r = v, g = t, b = p; break;
            case 1: r = q, g = v, b = p; break;
            case 2: r = p, g = v, b = t; break;
            case 3: r = p, g = q, b = v; break;
            case 4: r = t, g = p, b = v; break;
            case 5: r = v, g = p, b = q; break;
        }
        return {
            r: Math.round(r * 255),
            g: Math.round(g * 255),
            b: Math.round(b * 255)
        }
    }
};__obj__1["color_for_number"]=async function(num,saturation,brightness) {
    let h;
    let pos;
    let color_key;
    let rgb;
    let v;
    h=await Math.abs(await parseInt(num));
    pos=(8% h);
    color_key=[0,4,1,5,2,6,3,7];
    rgb=null;
    v=color_key[pos];
    ;
    h=await (async function(){
         return await (await Environment.get_global("map_range"))((360% (28* h)),[0,360],[0,1]) 
    })();
    v=await (async function(){
         return await (await Environment.get_global("map_range"))([v,[0,7],[0.92,1]]) 
    })();
    rgb=await (await Environment.get_global("HSV_to_RGB"))(h,saturation,brightness);
    return ("#"+ await (async function() {
        {
             let __call_target__=await (rgb && rgb["r"])["toString"].call((rgb && rgb["r"]),16), __call_method__="padStart";
            return await __call_target__[__call_method__].call(__call_target__,2,"0")
        } 
    })()+ await (async function() {
        {
             let __call_target__=await (rgb && rgb["g"])["toString"].call((rgb && rgb["g"]),16), __call_method__="padStart";
            return await __call_target__[__call_method__].call(__call_target__,2,"0")
        } 
    })()+ await (async function() {
        {
             let __call_target__=await (rgb && rgb["b"])["toString"].call((rgb && rgb["b"]),16), __call_method__="padStart";
            return await __call_target__[__call_method__].call(__call_target__,2,"0")
        } 
    })())
};__obj__1["flatten_ctx"]=async function(ctx,_var_table) {
    let var_table;
    let ctx_keys;
    var_table=(_var_table|| new Object());
    ctx_keys=await (await Environment.get_global("keys"))(var_table);
    if (check_true ((ctx && ctx["scope"]))){
        {
            await (async function() {
                let __for_body__81=async function(k) {
                    if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("contains?"))(k,ctx_keys)))){
                        {
                            return await async function(){
                                var_table[k]=await (async function(){
                                    let __targ__84=(ctx && ctx["scope"]);
                                    if (__targ__84){
                                         return(__targ__84)[k]
                                    } 
                                })();
                                return var_table;
                                
                            }()
                        }
                    }
                };
                let __array__82=[],__elements__80=await (await Environment.get_global("keys"))((ctx && ctx["scope"]));
                let __BREAK__FLAG__=false;
                for(let __iter__79 in __elements__80) {
                    __array__82.push(await __for_body__81(__elements__80[__iter__79]));
                    if(__BREAK__FLAG__) {
                         __array__82.pop();
                        break;
                        
                    }
                }return __array__82;
                 
            })();
            if (check_true ((ctx && ctx["parent"]))){
                {
                    await (await Environment.get_global("flatten_ctx"))((ctx && ctx["parent"]),var_table)
                }
            };
            return var_table
        }
    }
};__obj__1["identify_symbols"]=async function(quoted_form,_state) {
    let acc;
    acc=[];
    _state=await (async function(){
        if (check_true (_state)){
            return _state
        } else {
            return new Object()
        }
    })();
    debugger;
    ;
    await async function(){
        if (check_true ((quoted_form instanceof Array))) {
            {
                return await (async function() {
                    let __for_body__87=async function(elem) {
                        return (acc).push(await (async function(){
                             return await (await Environment.get_global("identify_symbols"))(elem,_state) 
                        })())
                    };
                    let __array__88=[],__elements__86=quoted_form;
                    let __BREAK__FLAG__=false;
                    for(let __iter__85 in __elements__86) {
                        __array__88.push(await __for_body__87(__elements__86[__iter__85]));
                        if(__BREAK__FLAG__) {
                             __array__88.pop();
                            break;
                            
                        }
                    }return __array__88;
                     
                })()
            }
        } else if (check_true (((quoted_form instanceof String || typeof quoted_form==='string')&& await (await Environment.get_global("starts_with?"))("=:",quoted_form)))) {
            (acc).push({
                name:await (await Environment.get_global("as_lisp"))(quoted_form),where:await (async function(){
                     return await (await Environment.get_global("describe"))(await (await Environment.get_global("as_lisp"))(quoted_form)) 
                })()
            })
        } else if (check_true ((quoted_form instanceof Object))) {
            await (async function() {
                let __for_body__91=async function(elem) {
                    return (acc).push(await (async function(){
                         return await (await Environment.get_global("identify_symbols"))(elem,_state) 
                    })())
                };
                let __array__92=[],__elements__90=await (await Environment.get_global("values"))(quoted_form);
                let __BREAK__FLAG__=false;
                for(let __iter__89 in __elements__90) {
                    __array__92.push(await __for_body__91(__elements__90[__iter__89]));
                    if(__BREAK__FLAG__) {
                         __array__92.pop();
                        break;
                        
                    }
                }return __array__92;
                 
            })()
        }
    } ();
    return ["=:quote",acc]
};__obj__1["unless"]=async function(condition,...forms) {
    return ["=:if",["=:not",condition],["=:do",].concat(forms)]
};__obj__1["use_quoted_initializer"]=async function(...forms) {
    let insert_initializer;
    insert_initializer=async function(form) {
        let meta=form[3];
        ;
        if (check_true ((null==form[3]))){
            meta=await async function(){
                form[3]=new Object();
                return form;
                
            }()
        };
        return await async function(){
            if (check_true (((meta instanceof Array)&& (await (await Environment.get_global("resolve_path"))([3,1],form) instanceof Object)))) {
                {
                    await (await Environment.get_global("set_path"))([3,1,"initializer"],form,await (async function(){
                         return ["=:quotel",await (async function(){
                             return ["=:try",(form && form["2"]),["=:catch","=:Error",["=:e"],"=:e"]] 
                        })()] 
                    })());
                    return form
                }
            } else if (check_true ((meta instanceof Object))) {
                {
                    await async function(){
                        let __target_obj__94=(form && form["3"]);
                        __target_obj__94["initializer"]=await (async function(){
                             return ["=:quotel",await (async function(){
                                 return ["=:try",(form && form["2"]),["=:catch","=:Error",["=:e"],"=:e"]] 
                            })()] 
                        })();
                        return __target_obj__94;
                        
                    }();
                    return form
                }
            } else {
                {
                    await (await Environment.get_global("warn"))("use_quoted_initializer: cannot quote ",await (async function(){
                        if (check_true (((form && form["2"]) instanceof String || typeof (form && form["2"])==='string'))){
                            return (form && form["2"])
                        } else {
                            return form
                        }
                    })());
                    return form
                }
            }
        } ()
    };
    return await (async function() {
        let __for_body__97=async function(form) {
            form=await (async function(){
                 return await (await Environment.get_global("macroexpand"))(form) 
            })();
            if (check_true (((form instanceof Array)&& ((form && form["0"])==="=:defglobal")))){
                {
                    return await insert_initializer(form)
                }
            } else {
                return form
            }
        };
        let __array__98=[],__elements__96=forms;
        let __BREAK__FLAG__=false;
        for(let __iter__95 in __elements__96) {
            __array__98.push(await __for_body__97(__elements__96[__iter__95]));
            if(__BREAK__FLAG__) {
                 __array__98.pop();
                break;
                
            }
        }return __array__98;
         
    })()
};__obj__1["random_int"]=async function(...args) {
    let top;
    let bottom;
    top=0;
    bottom=0;
    if (check_true ((await (await Environment.get_global("length"))(args)>1))){
        {
            top=await parseInt((args && args["1"]));
            bottom=await parseInt((args && args["0"]))
        }
    } else {
        top=await parseInt((args && args["0"]))
    };
    return await parseInt(await (await Environment.get_global("add"))((await Math.random()* (top- bottom)),bottom))
};__obj__1["resolve_multi_path"]=async function(path,obj,not_found) {
    return await async function(){
        if (check_true ((obj instanceof Object))) {
            return await async function(){
                if (check_true (((await (await Environment.get_global("length"))(path)===1)&& ("*"===await (await Environment.get_global("first"))(path))))) {
                    return (obj|| not_found)
                } else if (check_true (((await (await Environment.get_global("length"))(path)===1)&& (obj[await (await Environment.get_global("first"))(path)] instanceof Object)))) {
                    return (obj[await (await Environment.get_global("first"))(path)]|| not_found)
                } else if (check_true (((await (await Environment.get_global("length"))(path)===1)&& await (await Environment.get_global("not"))((obj[await (await Environment.get_global("first"))(path)] instanceof Object))&& await (await Environment.get_global("not"))((null==obj[await (await Environment.get_global("first"))(path)]))))) {
                    return obj[await (await Environment.get_global("first"))(path)]
                } else if (check_true (((obj instanceof Array)&& ("*"===await (await Environment.get_global("first"))(path))))) {
                    return await (async function() {
                        let __for_body__101=async function(val) {
                            return await (await Environment.get_global("resolve_multi_path"))(await (await Environment.get_global("rest"))(path),val,not_found)
                        };
                        let __array__102=[],__elements__100=obj;
                        let __BREAK__FLAG__=false;
                        for(let __iter__99 in __elements__100) {
                            __array__102.push(await __for_body__101(__elements__100[__iter__99]));
                            if(__BREAK__FLAG__) {
                                 __array__102.pop();
                                break;
                                
                            }
                        }return __array__102;
                         
                    })()
                } else if (check_true (((obj instanceof Object)&& ("*"===await (await Environment.get_global("first"))(path))))) {
                    return await (async function() {
                        let __for_body__105=async function(val) {
                            return await (await Environment.get_global("resolve_multi_path"))(await (await Environment.get_global("rest"))(path),val,not_found)
                        };
                        let __array__106=[],__elements__104=await (await Environment.get_global("values"))(obj);
                        let __BREAK__FLAG__=false;
                        for(let __iter__103 in __elements__104) {
                            __array__106.push(await __for_body__105(__elements__104[__iter__103]));
                            if(__BREAK__FLAG__) {
                                 __array__106.pop();
                                break;
                                
                            }
                        }return __array__106;
                         
                    })()
                } else if (check_true ((await (await Environment.get_global("length"))(path)>1))) {
                    return await (await Environment.get_global("resolve_multi_path"))(await (await Environment.get_global("rest"))(path),obj[await (await Environment.get_global("first"))(path)],not_found)
                }
            } ()
        } else {
            return not_found
        }
    } ()
};__obj__1["symbol_tree"]=async function(quoted_form,_state,_current_path) {
    let acc;
    let allocators;
    let uop;
    let get_allocations;
    let idx;
    let fval;
    let sym_paths;
    let is_root;
    acc=[];
    allocators={
        let:await (async function(){
             return [[1,"*",0]] 
        })(),defun:await (async function(){
             return [[1],[2,"*"]] 
        })()
    };
    uop=null;
    get_allocations=async function() {
        sym_paths=allocators[await (async function(){
             return await (await Environment.get_global("unquotify"))((quoted_form && quoted_form["0"])) 
        })()];
        if (check_true (sym_paths)){
            {
                return await (async function() {
                    let __for_body__109=async function(sym_path) {
                        fval=await (async function(){
                             return await (await Environment.get_global("resolve_multi_path"))(sym_path,quoted_form) 
                        })();
                        await console.log("Fval is: ",fval,"sym_path: ",sym_path,"current_path: ",_current_path," ",quoted_form);
                        uop=await (async function(){
                             return await (await Environment.get_global("unquotify"))((quoted_form && quoted_form["0"])) 
                        })();
                        if (check_true ((fval instanceof Array))){
                            return await (async function() {
                                let __for_body__113=async function(s) {
                                    s=await (async function(){
                                         return await (await Environment.get_global("unquotify"))(s) 
                                    })();
                                    if (check_true ((null==await (async function(){
                                        let __targ__115=(_state && _state["definitions"]);
                                        if (__targ__115){
                                             return(__targ__115)[fval]
                                        } 
                                    })()))){
                                        {
                                            await async function(){
                                                let __target_obj__116=(_state && _state["definitions"]);
                                                __target_obj__116[s]=[];
                                                return __target_obj__116;
                                                
                                            }()
                                        }
                                    };
                                    return (await (async function(){
                                        let __targ__117=(_state && _state["definitions"]);
                                        if (__targ__117){
                                             return(__targ__117)[s]
                                        } 
                                    })()).push({
                                        path:_current_path,op:uop
                                    })
                                };
                                let __array__114=[],__elements__112=fval;
                                let __BREAK__FLAG__=false;
                                for(let __iter__111 in __elements__112) {
                                    __array__114.push(await __for_body__113(__elements__112[__iter__111]));
                                    if(__BREAK__FLAG__) {
                                         __array__114.pop();
                                        break;
                                        
                                    }
                                }return __array__114;
                                 
                            })()
                        } else {
                            {
                                if (check_true ((null==await (async function(){
                                    let __targ__118=(_state && _state["definitions"]);
                                    if (__targ__118){
                                         return(__targ__118)[fval]
                                    } 
                                })()))){
                                    {
                                        await async function(){
                                            let __target_obj__119=(_state && _state["definitions"]);
                                            __target_obj__119[fval]=[];
                                            return __target_obj__119;
                                            
                                        }()
                                    }
                                };
                                return (await (async function(){
                                    let __targ__120=(_state && _state["definitions"]);
                                    if (__targ__120){
                                         return(__targ__120)[fval]
                                    } 
                                })()).push({
                                    path:_current_path,op:uop
                                })
                            }
                        }
                    };
                    let __array__110=[],__elements__108=sym_paths;
                    let __BREAK__FLAG__=false;
                    for(let __iter__107 in __elements__108) {
                        __array__110.push(await __for_body__109(__elements__108[__iter__107]));
                        if(__BREAK__FLAG__) {
                             __array__110.pop();
                            break;
                            
                        }
                    }return __array__110;
                     
                })()
            }
        }
    };
    idx=-1;
    fval=null;
    sym_paths=null;
    is_root=await (async function(){
        if (check_true ((_state==undefined))){
            return true
        } else {
            return false
        }
    })();
    _state=await (async function(){
        if (check_true (_state)){
            return _state
        } else {
            return {
                definitions:new Object()
            }
        }
    })();
    _current_path=(_current_path|| []);
    ;
    await console.log("symbol_tree: quoted_form: ",quoted_form,_current_path);
    await get_allocations();
    return await async function(){
        if (check_true ((quoted_form instanceof Array))) {
            {
                await (await Environment.get_global("map"))(async function(elem,idx) {
                    {
                        let it;
                        it=await (async function(){
                             return await (await Environment.get_global("symbol_tree"))(elem,_state,await (await Environment.get_global("conj"))(_current_path,idx)) 
                        })();
                        if (check_true (it)){
                            return (acc).push(it)
                        } else {
                            return 
                        }
                    }
                },quoted_form);
                if (check_true (is_root)){
                    return await (await Environment.get_global("add"))({
                        tree:acc
                    },_state)
                } else {
                    return acc
                }
            }
        } else if (check_true (((quoted_form instanceof String || typeof quoted_form==='string')&& await (await Environment.get_global("starts_with?"))("=:",quoted_form)))) {
            {
                return await (await Environment.get_global("unquotify"))(quoted_form)
            }
        } else if (check_true ((quoted_form instanceof Object))) {
            {
                await (async function() {
                    let __for_body__123=async function(pset) {
                        {
                            let it;
                            it=await (async function(){
                                 return await (await Environment.get_global("symbol_tree"))((pset && pset["1"]),_state,await (await Environment.get_global("conj"))(_current_path,await (async function(){
                                    let __array_op_rval__125=(pset && pset["1"]);
                                     if (__array_op_rval__125 instanceof Function){
                                        return await __array_op_rval__125() 
                                    } else {
                                        return [__array_op_rval__125]
                                    }
                                })())) 
                            })();
                            if (check_true (it)){
                                return (acc).push(it)
                            } else {
                                return 
                            }
                        }
                    };
                    let __array__124=[],__elements__122=await (await Environment.get_global("pairs"))(quoted_form);
                    let __BREAK__FLAG__=false;
                    for(let __iter__121 in __elements__122) {
                        __array__124.push(await __for_body__123(__elements__122[__iter__121]));
                        if(__BREAK__FLAG__) {
                             __array__124.pop();
                            break;
                            
                        }
                    }return __array__124;
                     
                })();
                if (check_true (is_root)){
                    return await (await Environment.get_global("add"))({
                        tree:acc
                    },_state)
                } else {
                    return acc
                }
            }
        }
    } ()
};__obj__1["except_nil"]=async function(items) {
    let acc=[];
    ;
    if (check_true (await (await Environment.get_global("not"))((await (await Environment.get_global("sub_type"))(items)=="array")))){
        items=[items]
    };
    await (async function() {
        let __for_body__128=async function(value) {
            if (check_true (await (await Environment.get_global("not"))((null==value)))){
                return (acc).push(value)
            }
        };
        let __array__129=[],__elements__127=items;
        let __BREAK__FLAG__=false;
        for(let __iter__126 in __elements__127) {
            __array__129.push(await __for_body__128(__elements__127[__iter__126]));
            if(__BREAK__FLAG__) {
                 __array__129.pop();
                break;
                
            }
        }return __array__129;
         
    })();
    return acc
};__obj__1["each"]=async function(items,property) {
    return await async function(){
        if (check_true (((property instanceof String || typeof property==='string')|| await (await Environment.get_global("is_number?"))(property)))) {
            return await (await Environment.get_global("except_nil"))(await (async function() {
                let __for_body__132=async function(item) {
                    if (check_true (item)){
                        {
                            return item[property]
                        }
                    }
                };
                let __array__133=[],__elements__131=(items|| []);
                let __BREAK__FLAG__=false;
                for(let __iter__130 in __elements__131) {
                    __array__133.push(await __for_body__132(__elements__131[__iter__130]));
                    if(__BREAK__FLAG__) {
                         __array__133.pop();
                        break;
                        
                    }
                }return __array__133;
                 
            })())
        } else if (check_true ((await (await Environment.get_global("sub_type"))(property)=="array"))) {
            {
                let __collector;
                let __result;
                let __action;
                __collector=[];
                __result=null;
                __action=async function(item) {
                    let nl=[];
                    ;
                    await (async function() {
                        let __for_body__136=async function(p) {
                            return await async function(){
                                if (check_true ((p instanceof Array))) {
                                    return (nl).push(await (await Environment.get_global("resolve_path"))(p,item))
                                } else if (check_true (p instanceof Function)) {
                                    return (nl).push(await (async function(){
                                        let __array_op_rval__138=p;
                                         if (__array_op_rval__138 instanceof Function){
                                            return await __array_op_rval__138(item) 
                                        } else {
                                            return [__array_op_rval__138,item]
                                        }
                                    })())
                                } else {
                                    return (nl).push(item[p])
                                }
                            } ()
                        };
                        let __array__137=[],__elements__135=property;
                        let __BREAK__FLAG__=false;
                        for(let __iter__134 in __elements__135) {
                            __array__137.push(await __for_body__136(__elements__135[__iter__134]));
                            if(__BREAK__FLAG__) {
                                 __array__137.pop();
                                break;
                                
                            }
                        }return __array__137;
                         
                    })();
                    return nl
                };
                ;
                await (async function() {
                    let __for_body__141=async function(__item) {
                        __result=await __action(__item);
                        if (check_true (__result)){
                            return (__collector).push(__result)
                        }
                    };
                    let __array__142=[],__elements__140=items;
                    let __BREAK__FLAG__=false;
                    for(let __iter__139 in __elements__140) {
                        __array__142.push(await __for_body__141(__elements__140[__iter__139]));
                        if(__BREAK__FLAG__) {
                             __array__142.pop();
                            break;
                            
                        }
                    }return __array__142;
                     
                })();
                return __collector
            }
        } else if (check_true ((await (await Environment.get_global("sub_type"))(property)=="AsyncFunction"))) {
            {
                let __collector;
                let __result;
                let __action;
                __collector=[];
                __result=null;
                __action=async function(item) {
                    return await (async function(){
                        let __array_op_rval__143=property;
                         if (__array_op_rval__143 instanceof Function){
                            return await __array_op_rval__143(item) 
                        } else {
                            return [__array_op_rval__143,item]
                        }
                    })()
                };
                ;
                await (async function() {
                    let __for_body__146=async function(__item) {
                        __result=await __action(__item);
                        if (check_true (__result)){
                            return (__collector).push(__result)
                        }
                    };
                    let __array__147=[],__elements__145=items;
                    let __BREAK__FLAG__=false;
                    for(let __iter__144 in __elements__145) {
                        __array__147.push(await __for_body__146(__elements__145[__iter__144]));
                        if(__BREAK__FLAG__) {
                             __array__147.pop();
                            break;
                            
                        }
                    }return __array__147;
                     
                })();
                return __collector
            }
        } else if (check_true ((await (await Environment.get_global("sub_type"))(property)=="Function"))) {
            {
                let __collector;
                let __result;
                let __action;
                __collector=[];
                __result=null;
                __action=async function(item) {
                    return await (async function(){
                        let __array_op_rval__148=property;
                         if (__array_op_rval__148 instanceof Function){
                            return await __array_op_rval__148(item) 
                        } else {
                            return [__array_op_rval__148,item]
                        }
                    })()
                };
                ;
                await (async function() {
                    let __for_body__151=async function(__item) {
                        __result=await __action(__item);
                        if (check_true (__result)){
                            return (__collector).push(__result)
                        }
                    };
                    let __array__152=[],__elements__150=items;
                    let __BREAK__FLAG__=false;
                    for(let __iter__149 in __elements__150) {
                        __array__152.push(await __for_body__151(__elements__150[__iter__149]));
                        if(__BREAK__FLAG__) {
                             __array__152.pop();
                            break;
                            
                        }
                    }return __array__152;
                     
                })();
                return __collector
            }
        } else {
            throw new TypeError(("each: strings, arrays, and functions can be provided for the property name or names to extract - received: "+ await (await Environment.get_global("sub_type"))(property)));
            
        }
    } ()
};__obj__1["replace"]=function(...args) {
        if (check_true (((args && args.length)<3))){
            throw new SyntaxError("Invalid syntax for replace: requires at least three arguments, target value or regex, the replacement value, and at least one value (object list or string)");
            
        } else {
            try {
                {
                    let target;
                    let replacement;
                    let work_values;
                    let value_type;
                    let sr_val;
                    let arg_value_type;
                    let rval;
                    target=(args && args["0"]);
                    replacement=(args && args["1"]);
                    work_values= ( Environment.get_global("slice"))(args,2);
                    value_type=null;
                    sr_val=null;
                    arg_value_type= subtype((args && args["2"]));
                    rval=[];
                     ( function() {
                        let __for_body__156=function(value) {
                            value_type= subtype(value);
                            if (check_true ((value_type==="Number"))){
                                {
                                    value_type="String";
                                    value=(""+ value)
                                }
                            };
                            return   (function(){
                                if (check_true ((value_type==="String"))) {
                                    return (rval).push( value["replace"].call(value,target,replacement))
                                } else if (check_true ((value_type==="array"))) {
                                    return  ( function() {
                                        let __for_body__160=function(elem) {
                                            return (rval).push( ( Environment.get_global("replace"))(target,replacement,elem))
                                        };
                                        let __array__161=[],__elements__159=value;
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__158 in __elements__159) {
                                            __array__161.push( __for_body__160(__elements__159[__iter__158]));
                                            if(__BREAK__FLAG__) {
                                                 __array__161.pop();
                                                break;
                                                
                                            }
                                        }return __array__161;
                                         
                                    })()
                                } else if (check_true ((value_type==="object"))) {
                                    {
                                        sr_val=new Object();
                                         ( function() {
                                            let __for_body__164=function(k) {
                                                if (check_true ( value["hasOwnProperty"].call(value,k))){
                                                    {
                                                        return   (function(){
                                                            sr_val[k]= ( Environment.get_global("replace"))(target,replacement,value[k]);
                                                            return sr_val;
                                                            
                                                        })()
                                                    }
                                                }
                                            };
                                            let __array__165=[],__elements__163= ( Environment.get_global("keys"))(value);
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__162 in __elements__163) {
                                                __array__165.push( __for_body__164(__elements__163[__iter__162]));
                                                if(__BREAK__FLAG__) {
                                                     __array__165.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__165;
                                             
                                        })();
                                        return rval= rval["concat"].call(rval,sr_val)
                                    }
                                }
                            } )()
                        };
                        let __array__157=[],__elements__155=work_values;
                        let __BREAK__FLAG__=false;
                        for(let __iter__154 in __elements__155) {
                            __array__157.push( __for_body__156(__elements__155[__iter__154]));
                            if(__BREAK__FLAG__) {
                                 __array__157.pop();
                                break;
                                
                            }
                        }return __array__157;
                         
                    })();
                    if (check_true (( ( Environment.get_global("not"))((arg_value_type==="array"))&&  ( Environment.get_global("not"))((arg_value_type==="object"))))){
                        return  ( Environment.get_global("first"))(rval)
                    } else {
                        return rval
                    }
                }
            } catch (__exception__153) {
                if (__exception__153 instanceof Error) {
                    let e=__exception__153;
                    {
                        return  console.error(("replace: "+ e))
                    }
                }
            }
        }
    };__obj__1["env_encode_string"]=async function(text) {
    let te;
    let enc;
    let decl;
    let de;
    let bl;
    te=new TextEncoder();
    enc=await te["encode"].call(te,text);
    decl=[];
    de=new TextDecoder();
    bl=null;
    await (async function() {
        let __for_body__169=async function(b) {
            if (check_true ((b===92))){
                {
                    (decl).push(92);
                    (decl).push(92);
                    (decl).push(92);
                    return (decl).push(92)
                }
            } else {
                {
                    return (decl).push(b)
                }
            }
        };
        let __array__170=[],__elements__168=enc;
        let __BREAK__FLAG__=false;
        for(let __iter__167 in __elements__168) {
            __array__170.push(await __for_body__169(__elements__168[__iter__167]));
            if(__BREAK__FLAG__) {
                 __array__170.pop();
                break;
                
            }
        }return __array__170;
         
    })();
    return await de["decode"].call(de,new Uint8Array(decl))
};__obj__1["cl_encode_string"]=async function(text) {
    if (check_true ((text instanceof String || typeof text==='string'))){
        {
            let escaped;
            let nq;
            let step1;
            let snq;
            escaped=await (await Environment.get_global("replace"))(new RegExp("\n","g"),await (await Environment.get_global("add"))(await String.fromCharCode(92),"n"),text);
            escaped=await (await Environment.get_global("replace"))(new RegExp("\r","g"),await (await Environment.get_global("add"))(await String.fromCharCode(92),"r"),escaped);
            nq=(escaped).split(await String.fromCharCode(34));
            step1=(nq).join(await (await Environment.get_global("add"))(await String.fromCharCode(92),await String.fromCharCode(34)));
            snq=(step1).split(await String.fromCharCode(39));
            return step1
        }
    } else {
        return text
    }
};__obj__1["fn_signature"]=function(f) {
        if (check_true (f instanceof Function)){
            {
                let sig;
                let arg_text;
                let comps;
                let descriptor;
                let fname;
                let ftype;
                let extends_class;
                let keyword_idx;
                let args;
                sig=( ( Environment.get_global("first"))(( ( Environment.get_global("replace"))("\n","", f["toString"]())).split("{"))).trim();
                arg_text=null;
                comps=null;
                descriptor=null;
                fname=null;
                ftype=null;
                extends_class=null;
                keyword_idx=null;
                args=null;
                return   (function(){
                    if (check_true ( ( Environment.get_global("starts_with?"))("class",sig))) {
                        {
                            ftype="class";
                            descriptor=(sig).split(" ");
                            fname= ( Environment.get_global("second"))(descriptor);
                            if (check_true ((descriptor[3]==="extends"))){
                                extends_class=descriptor[4]
                            };
                            return {
                                name:fname,type:ftype,extends:extends_class
                            }
                        }
                    } else {
                        {
                            if (check_true (sig)){
                                {
                                    comps=(sig).split("(");
                                    descriptor=(( ( Environment.get_global("first"))(comps)|| "")).split(" ");
                                    arg_text=( ( Environment.get_global("chop"))( ( Environment.get_global("second"))(comps))|| "")
                                }
                            };
                            if (check_true (((descriptor && descriptor.length)>0))){
                                {
                                    keyword_idx= ( Environment.get_global("index_of"))("function",descriptor);
                                    if (check_true (keyword_idx)){
                                        {
                                            fname=( ( Environment.get_global("first"))( descriptor["slice"].call(descriptor,(keyword_idx+ 1),(keyword_idx+ 2)))|| "anonymous");
                                            ftype= ( function(){
                                                if (check_true ((keyword_idx===0))){
                                                    return "sync"
                                                } else {
                                                    return descriptor[(keyword_idx- 1)]
                                                }
                                            })()
                                        }
                                    }
                                }
                            };
                            if (check_true (arg_text)){
                                args= ( function() {
                                    let __for_body__173=function(a) {
                                        return (a).trim()
                                    };
                                    let __array__174=[],__elements__172=((arg_text).split(",")|| []);
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__171 in __elements__172) {
                                        __array__174.push( __for_body__173(__elements__172[__iter__171]));
                                        if(__BREAK__FLAG__) {
                                             __array__174.pop();
                                            break;
                                            
                                        }
                                    }return __array__174;
                                     
                                })()
                            } else {
                                args=[]
                            };
                            return {
                                name:fname,type:ftype,args:args
                            }
                        }
                    }
                } )()
            }
        } else {
            throw new TypeError("non-function supplied to fn_signature");
            
        }
    };__obj__1["path_to_js_syntax"]=async function(comps) {
    if (check_true ((comps instanceof Array))){
        if (check_true (((comps && comps.length)>1))){
            return (await (async function(){
                 return await (await Environment.get_global("map"))(async function(comp,idx) {
                    if (check_true ((idx===0))){
                        return comp
                    } else {
                        return await async function(){
                            if (check_true ((await isNaN(parseInt(comp))&& await (await Environment.get_global("starts_with?"))("\"",comp)))) {
                                return ("["+ comp+ "]")
                            } else if (check_true (await isNaN(parseInt(comp)))) {
                                return ("."+ comp)
                            } else {
                                return ("["+ "'"+ comp+ "'"+ "]")
                            }
                        } ()
                    }
                },comps) 
            })()).join("")
        } else {
            return (comps && comps["0"])
        }
    } else {
        throw new TypeError(("path_to_js_syntax: need array - given "+ await (await Environment.get_global("sub_type"))(comps)));
        
    }
};__obj__1["first_is_upper_case?"]=async function(str_val) {
    let rval=await str_val["match"].call(str_val,new RegExp("^[A-Z]"));
    ;
    if (check_true ((rval&& (rval && rval["0"])))){
        return true
    } else {
        return false
    }
};__obj__1["safe_access_2"]=async function(token,ctx,sanitizer_fn) {
    let comps;
    let acc;
    let acc_full;
    let pos;
    let rval;
    comps=null;
    acc=[];
    acc_full=[];
    pos=null;
    rval=null;
    comps=((token && token.name)).split(".");
    if (check_true (((comps && comps.length)===1))){
        return (token && token.name)
    } else {
        {
            await async function(){
                comps[0]=await (async function(){
                    let __array_op_rval__176=sanitizer_fn;
                     if (__array_op_rval__176 instanceof Function){
                        return await __array_op_rval__176((comps && comps["0"])) 
                    } else {
                        return [__array_op_rval__176,(comps && comps["0"])]
                    }
                })();
                return comps;
                
            }();
            await (async function(){
                 let __test_condition__177=async function() {
                    return ((comps && comps.length)>0)
                };
                let __body_ref__178=async function() {
                    (acc).push((comps).shift());
                    if (check_true (((comps && comps.length)>0))){
                        return (acc_full).push((["check_true(",await (async function(){
                             return await (await Environment.get_global("expand_dot_accessor"))((acc).join("."),ctx) 
                        })(),")"]).join(""))
                    } else {
                        return (acc_full).push(await (async function(){
                             return await (await Environment.get_global("expand_dot_accessor"))((acc).join("."),ctx) 
                        })())
                    }
                };
                let __BREAK__FLAG__=false;
                while(await __test_condition__177()) {
                    await __body_ref__178();
                     if(__BREAK__FLAG__) {
                         break;
                        
                    }
                } ;
                
            })();
            rval=await (await Environment.get_global("flatten"))(["(",(acc_full).join(" && "),")"]);
            return rval
        }
    }
};__obj__1["safe_access"]=async function(token,ctx,sanitizer_fn) {
    let comps;
    let acc;
    let acc_full;
    let pos;
    let rval;
    comps=null;
    acc=[];
    acc_full=[];
    pos=null;
    rval=null;
    comps=((token && token.name)).split(".");
    if (check_true (((comps && comps.length)===1))){
        return (token && token.name)
    } else {
        {
            await async function(){
                comps[0]=await (async function(){
                    let __array_op_rval__180=sanitizer_fn;
                     if (__array_op_rval__180 instanceof Function){
                        return await __array_op_rval__180((comps && comps["0"])) 
                    } else {
                        return [__array_op_rval__180,(comps && comps["0"])]
                    }
                })();
                return comps;
                
            }();
            await (async function(){
                 let __test_condition__181=async function() {
                    return ((comps && comps.length)>0)
                };
                let __body_ref__182=async function() {
                    (acc).push((comps).shift());
                    return (acc_full).push(await (async function(){
                         return await (await Environment.get_global("expand_dot_accessor"))((acc).join("."),ctx) 
                    })())
                };
                let __BREAK__FLAG__=false;
                while(await __test_condition__181()) {
                    await __body_ref__182();
                     if(__BREAK__FLAG__) {
                         break;
                        
                    }
                } ;
                
            })();
            rval=await (await Environment.get_global("flatten"))(["(",(acc_full).join(" && "),")"]);
            return rval
        }
    }
};__obj__1["compile_to_js"]=async function(quoted_form) {
    return ["=:->","=:Environment","compile",quoted_form]
};__obj__1["evaluate_compiled_source"]=async function(compiled_source) {
    return ["=:->","=:Environment","evaluate",compiled_source,"=:nil",{ "compiled_source":true
}]
};__obj__1["form_structure"]=async function(quoted_form,max_depth) {
    let idx;
    let acc;
    let structure;
    let follow_tree;
    idx=0;
    acc=[];
    max_depth=(max_depth|| (await Environment.get_global("MAX_SAFE_INTEGER")));
    structure=quoted_form;
    follow_tree=async function(elems,acc,_depth) {
        return await async function(){
            if (check_true ((((elems instanceof Array)|| (elems instanceof Object))&& (_depth>=max_depth)))) {
                if (check_true ((elems instanceof Array))){
                    return "array"
                } else {
                    return "object"
                }
            } else if (check_true ((elems instanceof Array))) {
                return await (await Environment.get_global("map"))(async function(elem,idx) {
                    return await follow_tree(elem,[],await (await Environment.get_global("add"))(_depth,1))
                },elems)
            } else if (check_true ((elems instanceof Object))) {
                {
                    return await (async function() {
                        let __for_body__185=async function(pset) {
                            return await follow_tree((pset && pset["1"]),[],await (await Environment.get_global("add"))(_depth,1))
                        };
                        let __array__186=[],__elements__184=await (await Environment.get_global("pairs"))(elems);
                        let __BREAK__FLAG__=false;
                        for(let __iter__183 in __elements__184) {
                            __array__186.push(await __for_body__185(__elements__184[__iter__183]));
                            if(__BREAK__FLAG__) {
                                 __array__186.pop();
                                break;
                                
                            }
                        }return __array__186;
                         
                    })()
                }
            } else {
                return await async function(){
                    if (check_true (((elems instanceof String || typeof elems==='string')&& await (await Environment.get_global("starts_with?"))("=:",elems)))) {
                        return "symbol"
                    } else if (check_true (await (await Environment.get_global("is_number?"))(elems))) {
                        return "number"
                    } else if (check_true ((elems instanceof String || typeof elems==='string'))) {
                        return "string"
                    } else if (check_true (((elems===true)|| (elems===false)))) {
                        return "boolean"
                    } else {
                        return elems
                    }
                } ()
            }
        } ()
    };
    return await follow_tree(structure,[],0)
};__obj__1["validate_form_structure"]=async function(validation_rules,quoted_form) {
    let results;
    let all_valid;
    let target;
    results={
        valid:[],invalid:[],rule_count:await (await Environment.get_global("length"))(validation_rules),all_passed:false
    };
    all_valid=null;
    target=null;
    await (async function() {
        let __for_body__189=async function(rule) {
            if (check_true (((rule instanceof Array)&& ((rule && rule.length)>1)&& ((rule && rule["0"]) instanceof Array)&& ((rule && rule["1"]) instanceof Array)))){
                {
                    all_valid=true;
                    target=await (await Environment.get_global("resolve_path"))((rule && rule["0"]),quoted_form);
                    await (async function() {
                        let __for_body__193=async function(validation) {
                            if (check_true (await (await Environment.get_global("not"))(await (async function(){
                                let __array_op_rval__195=validation;
                                 if (__array_op_rval__195 instanceof Function){
                                    return await __array_op_rval__195(target) 
                                } else {
                                    return [__array_op_rval__195,target]
                                }
                            })()))){
                                {
                                    all_valid=false;
                                    return __BREAK__FLAG__=true;
                                    return
                                }
                            }
                        };
                        let __array__194=[],__elements__192=(rule && rule["1"]);
                        let __BREAK__FLAG__=false;
                        for(let __iter__191 in __elements__192) {
                            __array__194.push(await __for_body__193(__elements__192[__iter__191]));
                            if(__BREAK__FLAG__) {
                                 __array__194.pop();
                                break;
                                
                            }
                        }return __array__194;
                         
                    })();
                    if (check_true (all_valid)){
                        return ((results && results["valid"])).push(((rule && rule["2"])|| (rule && rule["0"])))
                    } else {
                        return ((results && results["invalid"])).push(((rule && rule["2"])|| (rule && rule["0"])))
                    }
                }
            }
        };
        let __array__190=[],__elements__188=(validation_rules|| []);
        let __BREAK__FLAG__=false;
        for(let __iter__187 in __elements__188) {
            __array__190.push(await __for_body__189(__elements__188[__iter__187]));
            if(__BREAK__FLAG__) {
                 __array__190.pop();
                break;
                
            }
        }return __array__190;
         
    })();
    await async function(){
        results["all_passed"]=(await (await Environment.get_global("length"))((results && results["valid"]))===(results && results["rule_count"]));
        return results;
        
    }();
    return results
};__obj__1["*compiler_syntax_rules*"]=await (async function(){ return "placeholder" })();__obj__1["compiler_source_chain"]=async function(cpath,tree,sources) {
    if (check_true (((cpath instanceof Array)&& tree))){
        {
            let source;
            sources=(sources|| []);
            source=null;
            cpath=await (await Environment.get_global("chop"))(cpath);
            source=await (await Environment.get_global("as_lisp"))(await (await Environment.get_global("resolve_path"))(cpath,tree));
            if (check_true (((source && source.length)>80))){
                source=await (await Environment.get_global("add"))(await source["substr"].call(source,0,80),"...")
            };
            if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("blank?"))(source)))){
                {
                    (sources).push(source)
                }
            };
            if (check_true ((((cpath && cpath.length)>0)&& ((sources && sources.length)<2)))){
                await (await Environment.get_global("compiler_source_chain"))(cpath,tree,sources)
            };
            return sources
        }
    }
};__obj__1["compiler_syntax_validation"]=async function(validator_key,tokens,errors,ctx,tree) {
    let validation_results;
    let syntax_error;
    let cpath;
    let rules;
    validation_results=null;
    syntax_error=null;
    cpath=null;
    rules=await (async function(){
        let __targ__198=(await Environment.get_global("*compiler_syntax_rules*"));
        if (__targ__198){
             return(__targ__198)[validator_key]
        } 
    })();
    if (check_true (rules)){
        {
            validation_results=await (async function(){
                 return await (await Environment.get_global("validate_form_structure"))(rules,await (async function(){
                    let __array_op_rval__199=tokens;
                     if (__array_op_rval__199 instanceof Function){
                        return await __array_op_rval__199() 
                    } else {
                        return [__array_op_rval__199]
                    }
                })()) 
            })();
            cpath=await (async function(){
                 return await async function(){
                    if (check_true ((tokens instanceof Array))) {
                        return await (await Environment.get_global("chop"))((tokens && tokens["0"] && tokens["0"]["path"]))
                    } else if (check_true ((tokens instanceof Object))) {
                        return (tokens && tokens["path"])
                    }
                } () 
            })();
            if (check_true (await (await Environment.get_global("not"))((validation_results && validation_results["all_passed"])))){
                {
                    await (async function() {
                        let __for_body__202=async function(problem) {
                            return (errors).push({
                                error:"SyntaxError",message:problem,source_name:await (async function(){
                                     return await (await Environment.get_global("getf_ctx"))(ctx,"__SOURCE_NAME__") 
                                })(),form:await (await Environment.get_global("first"))(await (async function(){
                                     return await (await Environment.get_global("compiler_source_chain"))(cpath,tree) 
                                })()),parent_forms:await (await Environment.get_global("rest"))(await (async function(){
                                     return await (await Environment.get_global("compiler_source_chain"))(cpath,tree) 
                                })()),invalid:true
                            })
                        };
                        let __array__203=[],__elements__201=((validation_results && validation_results["invalid"])|| []);
                        let __BREAK__FLAG__=false;
                        for(let __iter__200 in __elements__201) {
                            __array__203.push(await __for_body__202(__elements__201[__iter__200]));
                            if(__BREAK__FLAG__) {
                                 __array__203.pop();
                                break;
                                
                            }
                        }return __array__203;
                         
                    })();
                    syntax_error=new SyntaxError("invalid syntax");
                    await async function(){
                        syntax_error["handled"]=true;
                        return syntax_error;
                        
                    }();
                    throw syntax_error;
                    
                }
            }
        }
    };
    return validation_results
};__obj__1["describe_all"]=async function() {
    return await (async function(){
        let __apply_args__205=await (async function(){
             return await (async function() {
                let __for_body__209=async function(s) {
                    return await (await Environment.get_global("to_object"))(await (async function(){
                         return [await (async function(){
                            let __array_op_rval__211=s;
                             if (__array_op_rval__211 instanceof Function){
                                return await __array_op_rval__211(await (async function(){
                                     return await (await Environment.get_global("describe"))(s) 
                                })()) 
                            } else {
                                return [__array_op_rval__211,await (async function(){
                                     return await (await Environment.get_global("describe"))(s) 
                                })()]
                            }
                        })()] 
                    })())
                };
                let __array__210=[],__elements__208=await (async function(){
                     return await (await Environment.get_global("symbols"))() 
                })();
                let __BREAK__FLAG__=false;
                for(let __iter__207 in __elements__208) {
                    __array__210.push(await __for_body__209(__elements__208[__iter__207]));
                    if(__BREAK__FLAG__) {
                         __array__210.pop();
                        break;
                        
                    }
                }return __array__210;
                 
            })() 
        })();
        return ( (await Environment.get_global("add"))).apply(this,__apply_args__205)
    })()
};__obj__1["is_value?"]=async function(val) {
    if (check_true ((val===""))){
        return true
    } else {
        if (check_true ((val===undefined))){
            return false
        } else {
            if (check_true (await isNaN(val))){
                return true
            } else {
                if (check_true (val)){
                    return true
                } else {
                    return false
                }
            }
        }
    }
};__obj__1["sort"]=async function(elems,options) {
    let opts;
    let sort_fn;
    let sort_fn_inner;
    let keyed;
    let reverser;
    let comparitor;
    let key_path_a;
    let key_path_b;
    opts=(((options instanceof Object)&& options)|| new Object());
    sort_fn=null;
    sort_fn_inner=null;
    keyed=false;
    reverser=await (async function(){
        if (check_true ((opts && opts["reversed"]))){
            return -1
        } else {
            return 1
        }
    })();
    comparitor=await (async function(){
         return await async function(){
            if (check_true ((opts && opts["comparitor"]) instanceof Function)) {
                return (opts && opts["comparitor"])
            } else {
                return function(a,b) {
                    return   (function(){
                        if (check_true ((a instanceof String || typeof a==='string'))) {
                            if (check_true ((b instanceof String || typeof b==='string'))){
                                return (reverser*  a["localeCompare"].call(a,b))
                            } else {
                                return (reverser*  a["localeCompare"].call(a,(""+ b)))
                            }
                        } else if (check_true ((b instanceof String || typeof b==='string'))) {
                            return (reverser*  ( function() {
                                {
                                     let __call_target__=(""+ a), __call_method__="localeCompare";
                                    return  __call_target__[__call_method__].call(__call_target__,b)
                                } 
                            })())
                        } else if (check_true ((opts && opts["reversed"]))) {
                            return (b- a)
                        } else {
                            return (a- b)
                        }
                    } )()
                }
            }
        } () 
    })();
    key_path_a="aval";
    key_path_b="bval";
    await (await Environment.get_global("assert"))((elems instanceof Array),"sort: elements must be an array");
    await (await Environment.get_global("assert"))((await subtype(comparitor)==="Function"),("sort: invalid comparitor provided : "+ await subtype(comparitor)+ " - must be a synchronous function, or evaluate to a synchronous function."));
    await (await Environment.get_global("assert"))((((opts && opts["comparitor"])&& await (await Environment.get_global("not"))((opts && opts["reversed"])))|| (await (await Environment.get_global("not"))((opts && opts["comparitor"]))&& (opts && opts["reversed"]))|| (await (await Environment.get_global("not"))((opts && opts["comparitor"]))&& await (await Environment.get_global("not"))((opts && opts["reversed"])))),"sort: comparitor option cannot be combined with reversed option");
    await async function(){
        if (check_true (((opts && opts["key"]) instanceof String || typeof (opts && opts["key"])==='string'))) {
            {
                keyed=true;
                key_path_a=await (async function(){
                     return await (await Environment.get_global("path_to_js_syntax"))(await (await Environment.get_global("get_object_path"))(("aval."+ (opts && opts["key"])))) 
                })();
                return key_path_b=await (async function(){
                     return await (await Environment.get_global("path_to_js_syntax"))(await (await Environment.get_global("get_object_path"))(("bval."+ (opts && opts["key"])))) 
                })()
            }
        } else if (check_true (((opts && opts["key"]) instanceof Array))) {
            {
                keyed=true;
                key_path_a=await (async function(){
                     return await (await Environment.get_global("path_to_js_syntax"))(await (await Environment.get_global("conj"))(["aval"],(opts && opts["key"]))) 
                })();
                key_path_b=await (async function(){
                     return await (await Environment.get_global("path_to_js_syntax"))(await (await Environment.get_global("conj"))(["bval"],(opts && opts["key"]))) 
                })()
            }
        }
    } ();
    sort_fn_inner=new Function("aval","bval","comparitor",("return comparitor( "+ key_path_a+ ","+ key_path_b+ ")"));
    sort_fn=function(aval,bval) {
        return  sort_fn_inner(aval,bval,comparitor)
    };
    return await elems["sort"].call(elems,sort_fn)
};__obj__1["and*"]=async function(...vals) {
    if (check_true (((vals && vals.length)>0))){
        {
            let rval=true;
            ;
            await (async function() {
                let __for_body__214=async function(v) {
                    if (check_true (await (await Environment.get_global("not"))(await (async function(){
                         return await (await Environment.get_global("is_value?"))(v) 
                    })()))){
                        {
                            rval=false;
                            return __BREAK__FLAG__=true;
                            return
                        }
                    }
                };
                let __array__215=[],__elements__213=vals;
                let __BREAK__FLAG__=false;
                for(let __iter__212 in __elements__213) {
                    __array__215.push(await __for_body__214(__elements__213[__iter__212]));
                    if(__BREAK__FLAG__) {
                         __array__215.pop();
                        break;
                        
                    }
                }return __array__215;
                 
            })();
            return rval
        }
    }
};__obj__1["or*"]=async function(...vals) {
    if (check_true (((vals && vals.length)>0))){
        {
            let rval=false;
            ;
            await (async function() {
                let __for_body__218=async function(v) {
                    if (check_true (await (await Environment.get_global("is_value?"))(v))){
                        {
                            rval=true;
                            return __BREAK__FLAG__=true;
                            return
                        }
                    }
                };
                let __array__219=[],__elements__217=vals;
                let __BREAK__FLAG__=false;
                for(let __iter__216 in __elements__217) {
                    __array__219.push(await __for_body__218(__elements__217[__iter__216]));
                    if(__BREAK__FLAG__) {
                         __array__219.pop();
                        break;
                        
                    }
                }return __array__219;
                 
            })();
            return rval
        }
    }
};__obj__1["either"]=async function(...args) {
    let rval;
    rval=null;
    await (async function() {
        let __for_body__222=async function(arg) {
            rval=arg;
            if (check_true ((await (await Environment.get_global("not"))((undefined===arg))&& await (await Environment.get_global("not"))((null===arg))))){
                {
                    return __BREAK__FLAG__=true;
                    return
                }
            }
        };
        let __array__223=[],__elements__221=args;
        let __BREAK__FLAG__=false;
        for(let __iter__220 in __elements__221) {
            __array__223.push(await __for_body__222(__elements__221[__iter__220]));
            if(__BREAK__FLAG__) {
                 __array__223.pop();
                break;
                
            }
        }return __array__223;
         
    })();
    return rval
};__obj__1["sanitize_js_ref_name"]=function(symname) {
        return   (function(){
            if (check_true ( ( Environment.get_global("not"))((symname instanceof String || typeof symname==='string')))) {
                return symname
            } else {
                {
                    let text_chars;
                    let acc;
                    text_chars=(symname).split("");
                    acc=[];
                     ( function() {
                        let __for_body__226=function(t) {
                            return   (function(){
                                if (check_true ((t==="+"))) {
                                    return (acc).push("_plus_")
                                } else if (check_true ((t==="?"))) {
                                    return (acc).push("_ques_")
                                } else if (check_true ((t==="-"))) {
                                    return (acc).push("_")
                                } else if (check_true ((t==="&"))) {
                                    return (acc).push("_amper_")
                                } else if (check_true ((t==="^"))) {
                                    return (acc).push("_carot_")
                                } else if (check_true ((t==="#"))) {
                                    return (acc).push("_hash_")
                                } else if (check_true ((t==="!"))) {
                                    return (acc).push("_exclaim_")
                                } else if (check_true ((t==="*"))) {
                                    return (acc).push("_star_")
                                } else if (check_true ((t==="~"))) {
                                    return (acc).push("_tilde_")
                                } else if (check_true ((t==="~"))) {
                                    return (acc).push("_percent_")
                                } else if (check_true ((t==="|"))) {
                                    return (acc).push("_pipe_")
                                } else if (check_true ( ( Environment.get_global("contains?"))(t,"(){}"))) {
                                    throw new LispSyntaxError(("Invalid character in symbol: "+ symname));
                                    
                                } else {
                                    return (acc).push(t)
                                }
                            } )()
                        };
                        let __array__227=[],__elements__225=text_chars;
                        let __BREAK__FLAG__=false;
                        for(let __iter__224 in __elements__225) {
                            __array__227.push( __for_body__226(__elements__225[__iter__224]));
                            if(__BREAK__FLAG__) {
                                 __array__227.pop();
                                break;
                                
                            }
                        }return __array__227;
                         
                    })();
                    return (acc).join("")
                }
            }
        } )()
    };__obj__1["is_symbol?"]=async function(symbol_to_find) {
    return ["=:not",["=:or",["=:==",["=:typeof",symbol_to_find],"undefined"],["=:==",["=:->","=:Environment","get_global",symbol_to_find,"=:ReferenceError"],"=:ReferenceError"]]]
};__obj__1["defvalue"]=async function(sym,value,meta) {
    return ["=:let",[["=:unquoted_sym",["=:desym",sym]],["=:details",["=:describe","=:unquoted_sym"]]],["=:if","=:details",["=:->","=:Environment","get_global",["=:+","=:details.namespace","/","=:unquoted_sym"]],["=:defglobal",sym,value,meta]]]
};__obj__1["defparameter"]=async function(sym,value,meta) {
    return ["=:first",["=:use_quoted_initializer",["=:defglobal",sym,value,meta]],{ "description":["=:+","Defines a global that is always reset to the provided value, ","when called or when the image is reloaded, ensuring that the ","initial value is always set to a specific value.  If the value ","is already defined, it will be overwritten.  To set a symbol in ","an explicit namespace, provide a fully qualified symbol name ","in the form of namspace/symname as the symbol to be defined. ","Returns the defined value."],"usage":["sym:symbol|string","value:*","meta:?object"],"tags":["allocation","reference","symbol","value","set","reference","global"]
}]
};__obj__1["get_function_args"]=async function(f) {
    let r;
    let s;
    r=new RegExp("^[a-zA-Z_]+ [a-zA-Z ]*\\\\(([a-zA-Z 0-9_,\\\\.\\\\n]*)\\\\)","gm");
    s=await f["toString"]();
    r=await (await Environment.get_global("scan_str"))(r,s);
    if (check_true ((((r && r.length)>0)&& ((r && r["0"]) instanceof Object)))){
        {
            return await (await Environment.get_global("map"))(async function(v) {
                if (check_true (await (await Environment.get_global("ends_with?"))("\n",v))){
                    return await (await Environment.get_global("chop"))(v)
                } else {
                    return v
                }
            },((await (await Environment.get_global("second"))((r && r["0"]))|| "")).split(","))
        }
    }
};__obj__1["findpaths"]=async function(value,structure) {
    let acc;
    let search;
    acc=[];
    search=async function(struct,_cpath) {
        return await async function(){
            if (check_true ((struct instanceof Array))) {
                return await (await Environment.get_global("map"))(async function(elem,idx) {
                    return await async function(){
                        if (check_true ((elem instanceof Object))) {
                            return await search(elem,await (await Environment.get_global("conj"))(_cpath,await (async function(){
                                let __array_op_rval__228=idx;
                                 if (__array_op_rval__228 instanceof Function){
                                    return await __array_op_rval__228() 
                                } else {
                                    return [__array_op_rval__228]
                                }
                            })()))
                        } else if (check_true ((elem===value))) {
                            return (acc).push(await (await Environment.get_global("conj"))(_cpath,await (async function(){
                                let __array_op_rval__229=idx;
                                 if (__array_op_rval__229 instanceof Function){
                                    return await __array_op_rval__229() 
                                } else {
                                    return [__array_op_rval__229]
                                }
                            })()))
                        }
                    } ()
                },struct)
            } else if (check_true ((struct instanceof Object))) {
                return await (await Environment.get_global("map"))(async function(pset) {
                    return await async function(){
                        if (check_true (((pset && pset["1"]) instanceof Object))) {
                            return await search((pset && pset["1"]),await (await Environment.get_global("conj"))(_cpath,await (async function(){
                                let __array_op_rval__230=(pset && pset["0"]);
                                 if (__array_op_rval__230 instanceof Function){
                                    return await __array_op_rval__230() 
                                } else {
                                    return [__array_op_rval__230]
                                }
                            })()))
                        } else if (check_true (((pset && pset["1"])===value))) {
                            return (acc).push(await (await Environment.get_global("conj"))(_cpath,await (async function(){
                                let __array_op_rval__231=(pset && pset["1"]);
                                 if (__array_op_rval__231 instanceof Function){
                                    return await __array_op_rval__231() 
                                } else {
                                    return [__array_op_rval__231]
                                }
                            })()))
                        }
                    } ()
                },await (await Environment.get_global("pairs"))(struct))
            } else if (check_true ((struct===value))) {
                return (acc).push(_cpath)
            }
        } ()
    };
    await search(structure,[]);
    return acc
};__obj__1["warn"]=await (async function(){ return "placeholder" })();__obj__1["success"]=await (async function(){ return "placeholder" })();__obj__1["in_background"]=async function(...forms) {
    return ["=:new","=:Promise",["=:fn",["=:resolve","=:reject"],["=:progn",["=:resolve",true],].concat(forms)]]
};__obj__1["show"]=async function(thing) {
    return await async function(){
        if (check_true (thing instanceof Function)) {
            return await thing["toString"]()
        } else {
            return thing
        }
    } ()
};__obj__1["export_symbols"]=async function(...args) {
    let acc;
    let numargs;
    let idx;
    acc=await (async function(){
         return ["=:javascript","export","{"] 
    })();
    numargs=await (await Environment.get_global("length"))(args);
    idx=0;
    await (async function() {
        let __for_body__234=async function(symname) {
            await async function(){
                if (check_true (((symname instanceof Array)&& ((symname && symname.length)===2)))) {
                    {
                        (acc).push(await (async function(){
                            let mval;
                            mval=(symname && symname["0"]);
                            if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                                return await mval["substr"].call(mval,2)
                            } else {
                                return mval
                            }
                        })());
                        (acc).push(" as ");
                        return (acc).push(await (async function(){
                            let mval;
                            mval=(symname && symname["1"]);
                            if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                                return await mval["substr"].call(mval,2)
                            } else {
                                return mval
                            }
                        })())
                    }
                } else if (check_true ((symname instanceof String || typeof symname==='string'))) {
                    (acc).push(await (async function(){
                        let mval;
                        mval=symname;
                        if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                            return await mval["substr"].call(mval,2)
                        } else {
                            return mval
                        }
                    })())
                } else {
                    throw new SyntaxError("Invalid argument for export");
                    
                }
            } ();
            idx+=1;
            if (check_true ((idx<numargs))){
                return (acc).push(", ")
            }
        };
        let __array__235=[],__elements__233=args;
        let __BREAK__FLAG__=false;
        for(let __iter__232 in __elements__233) {
            __array__235.push(await __for_body__234(__elements__233[__iter__232]));
            if(__BREAK__FLAG__) {
                 __array__235.pop();
                break;
                
            }
        }return __array__235;
         
    })();
    return (acc).push("}")
};__obj__1["register_feature"]=async function(feature) {
    if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("contains?"))(feature,(await Environment.get_global("*env_config*.features")))))){
        {
            ((await Environment.get_global("*env_config*.features"))).push(feature);
            return true
        }
    } else {
        return false
    }
};__obj__1["uniq"]=async function(values) {
    let s;
    s=new Set();
    await (await Environment.get_global("map"))(async function(x) {
        return await s["add"].call(s,x)
    },(values|| []));
    return await (await Environment.get_global("to_array"))(s)
};__obj__1["time_in_millis"]=async function() {
    return ["=:Date.now"]
};__obj__1["defns"]=async function(name,options) {
    if (check_true ((options&& (options && options["ignore_if_exists"])&& (name instanceof String || typeof name==='string')&& await (await Environment.get_global("contains?"))(name,await (await Environment.get_global("namespaces"))())))){
        return name
    } else {
        return await (await Environment.get_global("create_namespace"))(name,options)
    }
};__obj__1["use_ns"]=async function(name) {
    return ["=:set_namespace",["=:desym",name]]
};__obj__1["bind_and_call"]=async function(target_object,this_object,method,...args) {
    let boundf=await (await Environment.get_global("bind"))(target_object[method],this_object);
    ;
    if (check_true (boundf)){
        return await (async function(){
            return ( boundf).apply(this,args)
        })()
    } else {
        throw new Error("unable to bind target_object");
        
    }
};__obj__1["save_locally"]=async function(fname,data,content_type) {
    if (check_true (window["document"])){
        {
            let blob;
            let elem;
            let dbody;
            blob=new Blob(await (async function(){
                let __array_op_rval__240=data;
                 if (__array_op_rval__240 instanceof Function){
                    return await __array_op_rval__240() 
                } else {
                    return [__array_op_rval__240]
                }
            })(),{
                type:content_type
            });
            elem=await (async function() {
                {
                     let __call_target__=window["document"], __call_method__="createElement";
                    return await __call_target__[__call_method__].call(__call_target__,"a")
                } 
            })();
            dbody=await (async function(){
                let __targ__241=(await Environment.get_global("document"));
                if (__targ__241){
                     return(__targ__241)["body"]
                } 
            })();
            ;
            await async function(){
                elem["href"]=await window.URL["createObjectURL"].call(window.URL,blob);
                elem["download"]=fname;
                return elem;
                
            }();
            await dbody["appendChild"].call(dbody,elem);
            await elem["click"]();
            await dbody["removeChild"].call(dbody,elem);
            return true
        }
    } else {
        return false
    }
};__obj__1["fetch_text"]=async function(url) {
    let resp;
    resp=await fetch(url);
    if (check_true ((resp && resp["ok"]))){
        return await resp["text"]()
    } else {
        throw new EvalError(("unable to fetch "+ url+ ": "+ (resp && resp["status"])+ ": "+ (resp && resp["statusText"])));
        
    }
};__obj__1["import"]=async function(...args) {
    let filespec;
    let is_url_ques_;
    let js_mode;
    let url_comps;
    let js_mod;
    let load_fn;
    let target_symbols;
    let target_path;
    let acc;
    filespec=await (await Environment.get_global("last"))(args);
    is_url_ques_=await (await Environment.get_global("contains?"))("://",filespec);
    js_mode=null;
    url_comps=null;
    js_mod=null;
    load_fn=null;
    target_symbols=await (async function(){
        if (check_true (((args && args.length)>1))){
            return (args && args["0"])
        }
    })();
    target_path=null;
    acc=[];
    await async function(){
        if (check_true ((is_url_ques_|| await (await Environment.get_global("not"))((null==location))))) {
            {
                load_fn="fetch_text";
                url_comps=await (async function(){
                     return await async function(){
                        if (check_true (is_url_ques_)) {
                            return new URL(filespec)
                        } else if (check_true (await (await Environment.get_global("starts_with?"))("/",filespec))) {
                            return new URL((""+ location["origin"]+ filespec))
                        } else {
                            return new URL((""+ location["href"]+ "/"+ filespec))
                        }
                    } () 
                })();
                return target_path=(url_comps && url_comps["pathname"])
            }
        } else if (check_true (await (await Environment.get_global("not"))(((typeof "read_text_file"==="undefined")|| (await Environment["get_global"].call(Environment,"read_text_file",ReferenceError)===ReferenceError))))) {
            {
                load_fn="read_text_file";
                target_path=filespec
            }
        } else {
            throw new EvalError(("unable to handle import of "+ filespec));
            
        }
    } ();
    return await async function(){
        if (check_true ((await (await Environment.get_global("ends_with?"))(".lisp",target_path)|| await (await Environment.get_global("ends_with?"))(".juno",target_path)))) {
            return ["=:evaluate",[await (async function(){
                 return ("=:"+ load_fn) 
            })(),filespec],"=:nil",["=:to_object",[["source_name",filespec],["throw_on_error",true]]]]
        } else if (check_true (await (await Environment.get_global("ends_with?"))(".json",target_path))) {
            return ["=:evaluate",["=:JSON.parse",[await (async function(){
                 return ("=:"+ load_fn) 
            })(),filespec]],"=:nil",["=:to_object",[["json_in",true],["source_name",filespec],["throw_on_error",true]]]]
        } else if (check_true ((await (await Environment.get_global("ends_with?"))(".js",target_path)|| (await (await Environment.get_global("not"))(((typeof "Deno"==="undefined")|| (await Environment["get_global"].call(Environment,"Deno",ReferenceError)===ReferenceError)))&& await (await Environment.get_global("ends_with?"))(".ts",target_path))))) {
            {
                return await async function(){
                    if (check_true ((await (await Environment.get_global("length"))(target_symbols)===0))) {
                        throw new SyntaxError("imports of javascript sources require binding symbols as the first argument");
                        
                    } else if (check_true ((target_symbols instanceof Array))) {
                        {
                            (acc).push(await (async function(){
                                 return ["=:defglobal",(target_symbols && target_symbols["0"]),["=:dynamic_import",filespec]] 
                            })());
                            (acc).push(await (async function(){
                                 return ["=:set_path",["imports",["=:+",await (await Environment.get_global("current_namespace"))(),"/",["=:desym",(target_symbols && target_symbols["0"])]]],"=:*env_config*",["=:to_object",[["symbol",["=:desym",(target_symbols && target_symbols["0"])]],["namespace",await (await Environment.get_global("current_namespace"))()],["location",filespec]]]] 
                            })());
                            (acc).push(await (async function(){
                                 return ["=:when",["=:prop",(target_symbols && target_symbols["0"]),"initializer"],["=:->",(target_symbols && target_symbols["0"]),"initializer","=:Environment"]] 
                            })());
                            (acc).push((target_symbols && target_symbols["0"]));
                            return ["=:iprogn",].concat(acc)
                        }
                    }
                } ()
            }
        } else {
            throw new EvalError("invalid extension: needs to be .lisp, .js, .json or .juno");
            
        }
    } ()
};__obj__1["system_date_format"]={weekday:"long",year:"numeric",month:"2-digit",day:"2-digit",hour:"numeric",minute:"numeric",second:"numeric",fractionalSecondDigits:3,hourCycle:"h24",hour12:false,timeZoneName:"short"};__obj__1["system_date_formatter"]=await (async function(){ return "placeholder" })();__obj__1["tzoffset"]=async function() {
    return (60* await (async function() {
        {
             let __call_target__=new Date(), __call_method__="getTimezoneOffset";
            return await __call_target__[__call_method__]()
        } 
    })())
};__obj__1["date_components"]=async function(date_value,date_formatter) {
    if (check_true (await (await Environment.get_global("is_date?"))(date_value))){
        return await (await Environment.get_global("to_object"))(await (async function(){
             return await (await Environment.get_global("map"))(async function(x) {
                return await (async function(){
                    let __array_op_rval__243=(x && x["type"]);
                     if (__array_op_rval__243 instanceof Function){
                        return await __array_op_rval__243((x && x["value"])) 
                    } else {
                        return [__array_op_rval__243,(x && x["value"])]
                    }
                })()
            },await (async function(){
                if (check_true (date_formatter)){
                    return await (await Environment.get_global("bind_and_call"))(date_formatter,date_formatter,"formatToParts",date_value)
                } else {
                    return await (await Environment.get_global("bind_and_call"))((await Environment.get_global("system_date_formatter")),(await Environment.get_global("system_date_formatter")),"formatToParts",date_value)
                }
            })()) 
        })())
    } else {
        return null
    }
};__obj__1["formatted_date"]=async function(dval,date_formatter) {
    let comps;
    comps=await (async function(){
         return await (await Environment.get_global("date_components"))(dval,date_formatter) 
    })();
    if (check_true (comps)){
        if (check_true (date_formatter)){
            return (await (await Environment.get_global("values"))(comps)).join("")
        } else {
            return (""+ (comps && comps["year"])+ "-"+ (comps && comps["month"])+ "-"+ (comps && comps["day"])+ " "+ (comps && comps["hour"])+ ":"+ (comps && comps["minute"])+ ":"+ (comps && comps["second"]))
        }
    } else {
        return null
    }
};__obj__1["*LANGUAGE*"]=new Object();__obj__1["dtext"]=function(default_text) {
        return ( ( function(){
            let __targ__244=( Environment.get_global("*LANGUAGE*"));
            if (__targ__244){
                 return(__targ__244)[default_text]
            } 
        })()|| default_text)
    };__obj__1["nth"]=async function(idx,collection) {
    return await async function(){
        if (check_true ((idx instanceof Array))) {
            return await (await Environment.get_global("map"))(async function(v) {
                return await (await Environment.get_global("nth"))(v,collection)
            },idx)
        } else if (check_true ((await (await Environment.get_global("is_number?"))(idx)&& (idx<0)&& (await (await Environment.get_global("length"))(collection)>=(-1* idx))))) {
            return collection[await (await Environment.get_global("add"))(await (await Environment.get_global("length"))(collection),idx)]
        } else if (check_true ((await (await Environment.get_global("is_number?"))(idx)&& (idx<0)&& (await (await Environment.get_global("length"))(collection)<(-1* idx))))) {
            return undefined
        } else {
            return collection[idx]
        }
    } ()
};__obj__1["use_symbols"]=async function(namespace,symbol_list,target_namespace) {
    let acc;
    let nspace;
    let nspace_handle;
    let decs;
    acc=await (async function(){
         return ["=:progn"] 
    })();
    nspace=await (async function(){
        if (check_true (namespace)){
            {
                let mval;
                mval=namespace;
                if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                    return await mval["substr"].call(mval,2)
                } else {
                    return mval
                }
            }
        }
    })();
    nspace_handle=null;
    decs=null;
    await (await Environment.get_global("assert"))((nspace instanceof String || typeof nspace==='string'));
    await (await Environment.get_global("assert"))((symbol_list instanceof Array),"invalid symbol list provided to use_symbols");
    nspace_handle=await Environment["get_namespace_handle"].call(Environment,nspace);
    await (async function() {
        let __for_body__247=async function(sym) {
            decs=await (async function(){
                let __targ__249=(nspace_handle && nspace_handle["definitions"]);
                if (__targ__249){
                     return(__targ__249)[await (async function(){
                        let mval;
                        mval=sym;
                        if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                            return await mval["substr"].call(mval,2)
                        } else {
                            return mval
                        }
                    })()]
                } 
            })();
            return (acc).push(await (async function(){
                 return ["=:defglobal",await (async function(){
                    let mval;
                    mval=sym;
                    if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                        return await mval["substr"].call(mval,2)
                    } else {
                        return mval
                    }
                })(),await (async function(){
                     return ("=:"+ nspace+ "/"+ await (async function(){
                        let mval;
                        mval=sym;
                        if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                            return await mval["substr"].call(mval,2)
                        } else {
                            return mval
                        }
                    })()) 
                })(),["=:to_object",[["initializer",["=:quotem",["=:pend_load",nspace,await (async function(){
                     return (target_namespace|| await (await Environment.get_global("current_namespace"))()) 
                })(),await (async function(){
                    let mval;
                    mval=sym;
                    if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                        return await mval["substr"].call(mval,2)
                    } else {
                        return mval
                    }
                })(),await (async function(){
                     return ("=:"+ nspace+ "/"+ await (async function(){
                        let mval;
                        mval=sym;
                        if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                            return await mval["substr"].call(mval,2)
                        } else {
                            return mval
                        }
                    })()) 
                })()]]],["=:quotem",["require_ns",nspace]],["=:quotem",["requires",[await (async function(){
                     return (""+ nspace+ "/"+ await (async function(){
                        let mval;
                        mval=sym;
                        if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                            return await mval["substr"].call(mval,2)
                        } else {
                            return mval
                        }
                    })()) 
                })()]]],["eval_when",await (async function(){
                     return ((decs&& decs["eval_when"])|| new Object()) 
                })()]]]] 
            })())
        };
        let __array__248=[],__elements__246=symbol_list;
        let __BREAK__FLAG__=false;
        for(let __iter__245 in __elements__246) {
            __array__248.push(await __for_body__247(__elements__246[__iter__245]));
            if(__BREAK__FLAG__) {
                 __array__248.pop();
                break;
                
            }
        }return __array__248;
         
    })();
    return acc
};__obj__1["use_unique_symbols"]=async function(namespace) {
    if (check_true ((namespace instanceof String || typeof namespace==='string'))){
        {
            let symlist;
            symlist=await Environment["evaluate"].call(Environment,("("+ namespace+ "/symbols { `unique: true })"));
            (await Environment.eval(await async function(){
                return ["=:use_symbols",namespace,symlist]
            }()));
            return await (await Environment.get_global("length"))(symlist)
        }
    } else {
        throw new EvalError("provided namespace must be a string");
        
    }
};__obj__1["decomp_symbol"]=async function(quoted_sym) {
    let comps;
    comps=(quoted_sym).split("/");
    if (check_true (((comps && comps.length)===1))){
        return await (async function(){
            let __array_op_rval__250=(comps && comps["0"]);
             if (__array_op_rval__250 instanceof Function){
                return await __array_op_rval__250(await (await Environment.get_global("first"))(await (async function(){
                     return await (await Environment.get_global("each"))(await (async function(){
                         return await (await Environment.get_global("describe"))(quoted_sym,true) 
                    })(),"namespace") 
                })()),false) 
            } else {
                return [__array_op_rval__250,await (await Environment.get_global("first"))(await (async function(){
                     return await (await Environment.get_global("each"))(await (async function(){
                         return await (await Environment.get_global("describe"))(quoted_sym,true) 
                    })(),"namespace") 
                })()),false]
            }
        })()
    } else {
        return await (async function(){
            let __array_op_rval__251=(comps && comps["1"]);
             if (__array_op_rval__251 instanceof Function){
                return await __array_op_rval__251((comps && comps["0"]),true) 
            } else {
                return [__array_op_rval__251,(comps && comps["0"]),true]
            }
        })()
    }
};__obj__1["sort_dependencies"]=async function() {
    let ordered;
    let ns;
    let symname;
    let ns_marker;
    let symbol_marker;
    let splice_before;
    let current_pos;
    ordered=[];
    ns=null;
    symname=null;
    ns_marker=function(ns) {
        return ("*NS:"+ ns)
    };
    symbol_marker=function(ns,symbol_name) {
        return (""+ ns+ "/"+ symbol_name)
    };
    splice_before=async function(target_name,value_to_insert) {
        let idx;
        let value_idx;
        idx=await (await Environment.get_global("index_of"))(target_name,ordered);
        value_idx=await (await Environment.get_global("index_of"))(value_to_insert,ordered);
        return await async function(){
            if (check_true (((value_idx>-1)&& (value_idx===idx)))) {
                return true
            } else if (check_true (((value_idx>-1)&& (value_idx<idx)))) {
                return true
            } else if (check_true (((idx>-1)&& (value_idx===-1)))) {
                return await ordered["splice"].call(ordered,idx,0,value_to_insert)
            } else if (check_true (((idx===-1)&& (value_idx>-1)))) {
                return (ordered).push(target_name)
            } else if (check_true ((idx===-1))) {
                {
                    (ordered).push(value_to_insert);
                    return (ordered).push(target_name)
                }
            } else if (check_true (((idx>-1)&& (value_idx>-1)&& (idx<value_idx)))) {
                {
                    await ordered["splice"].call(ordered,value_idx,1);
                    return await ordered["splice"].call(ordered,idx,0,value_to_insert)
                }
            } else {
                return await console.log("fall through: target: ",target_name,"@",idx,"  ",value_to_insert,"@",value_idx)
            }
        } ()
    };
    current_pos=null;
    await (async function() {
        let __for_body__254=async function(name) {
            ns=await Environment["get_namespace_handle"].call(Environment,name);
            return await (async function() {
                let __for_body__258=async function(pset) {
                    {
                        let __symname__260= async function(){
                            return (pset && pset["0"])
                        };
                        let symdef;
                        {
                            let symname=await __symname__260();
                            ;
                            symdef=(pset && pset["1"]);
                            return await async function(){
                                if (check_true ((symdef && symdef["requires"]))) {
                                    return await (async function() {
                                        let __for_body__263=async function(req) {
                                            {
                                                let _expr_93900;
                                                let req_sym;
                                                let req_ns;
                                                let explicit;
                                                _expr_93900=await (async function(){
                                                     return await (await Environment.get_global("decomp_symbol"))(req) 
                                                })();
                                                req_sym=(_expr_93900 && _expr_93900["0"]);
                                                req_ns=(_expr_93900 && _expr_93900["1"]);
                                                explicit=(_expr_93900 && _expr_93900["2"]);
                                                if (check_true (req_ns)){
                                                    {
                                                        return await splice_before(await symbol_marker(name,symname),await symbol_marker(req_ns,req_sym))
                                                    }
                                                }
                                            }
                                        };
                                        let __array__264=[],__elements__262=(symdef && symdef["requires"]);
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__261 in __elements__262) {
                                            __array__264.push(await __for_body__263(__elements__262[__iter__261]));
                                            if(__BREAK__FLAG__) {
                                                 __array__264.pop();
                                                break;
                                                
                                            }
                                        }return __array__264;
                                         
                                    })()
                                } else {
                                    {
                                        if (check_true ((await (await Environment.get_global("index_of"))(await symbol_marker(name,symname),ordered)===-1))){
                                            {
                                                return (ordered).push(await symbol_marker(name,symname))
                                            }
                                        }
                                    }
                                }
                            } ()
                        }
                    }
                };
                let __array__259=[],__elements__257=await (await Environment.get_global("pairs"))((ns && ns["definitions"]));
                let __BREAK__FLAG__=false;
                for(let __iter__256 in __elements__257) {
                    __array__259.push(await __for_body__258(__elements__257[__iter__256]));
                    if(__BREAK__FLAG__) {
                         __array__259.pop();
                        break;
                        
                    }
                }return __array__259;
                 
            })()
        };
        let __array__255=[],__elements__253=await (await Environment.get_global("conj"))(["core"],await (async function(){
            let __collector;
            let __result;
            let __action;
            __collector=[];
            __result=null;
            __action=async function(name) {
                if (check_true (await (await Environment.get_global("not"))((name==="core")))){
                    {
                        return name
                    }
                }
            };
            ;
            await (async function() {
                let __for_body__267=async function(__item) {
                    __result=await __action(__item);
                    if (check_true (__result)){
                        return (__collector).push(__result)
                    }
                };
                let __array__268=[],__elements__266=await (await Environment.get_global("namespaces"))();
                let __BREAK__FLAG__=false;
                for(let __iter__265 in __elements__266) {
                    __array__268.push(await __for_body__267(__elements__266[__iter__265]));
                    if(__BREAK__FLAG__) {
                         __array__268.pop();
                        break;
                        
                    }
                }return __array__268;
                 
            })();
            return __collector
        })());
        let __BREAK__FLAG__=false;
        for(let __iter__252 in __elements__253) {
            __array__255.push(await __for_body__254(__elements__253[__iter__252]));
            if(__BREAK__FLAG__) {
                 __array__255.pop();
                break;
                
            }
        }return __array__255;
         
    })();
    return {
        namespaces:await (async function(){
            let acc;
            acc=[];
            {
                let __collector;
                let __result;
                let __action;
                __collector=[];
                __result=null;
                __action=async function(sym) {
                    let _expr_71420;
                    let nspace;
                    _expr_71420=await (async function(){
                         return await (await Environment.get_global("decomp_symbol"))(sym) 
                    })();
                    sym=(_expr_71420 && _expr_71420["0"]);
                    nspace=(_expr_71420 && _expr_71420["1"]);
                    if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("contains?"))(nspace,acc)))){
                        {
                            (acc).push(nspace);
                            return nspace
                        }
                    }
                };
                ;
                await (async function() {
                    let __for_body__271=async function(__item) {
                        __result=await __action(__item);
                        if (check_true (__result)){
                            return (__collector).push(__result)
                        }
                    };
                    let __array__272=[],__elements__270=ordered;
                    let __BREAK__FLAG__=false;
                    for(let __iter__269 in __elements__270) {
                        __array__272.push(await __for_body__271(__elements__270[__iter__269]));
                        if(__BREAK__FLAG__) {
                             __array__272.pop();
                            break;
                            
                        }
                    }return __array__272;
                     
                })();
                return __collector
            }
        })(),symbols:ordered
    }
};__obj__1["symbols_by_namespace"]=async function(options) {
    let ns_handle;
    ns_handle=null;
    return await (await Environment.get_global("to_object"))(await (async function() {
        let __for_body__275=async function(ns) {
            ns_handle=await Environment["get_namespace_handle"].call(Environment,ns);
            return await (async function(){
                let __array_op_rval__282=ns;
                 if (__array_op_rval__282 instanceof Function){
                    return await __array_op_rval__282(await (async function(){
                         return await (await Environment.get_global("sort"))(await (async function(){
                            if (check_true ((options && options["filter_by"]))){
                                {
                                    let __collector;
                                    let __result;
                                    let __action;
                                    __collector=[];
                                    __result=null;
                                    __action=async function(pset) {
                                        let name;
                                        let val;
                                        name=(pset && pset["0"]);
                                        val=(pset && pset["1"]);
                                        if (check_true (await (async function(){
                                            let __array_op_rval__277=(options && options["filter_by"]);
                                             if (__array_op_rval__277 instanceof Function){
                                                return await __array_op_rval__277(name,val) 
                                            } else {
                                                return [__array_op_rval__277,name,val]
                                            }
                                        })())){
                                            return name
                                        }
                                    };
                                    ;
                                    await (async function() {
                                        let __for_body__280=async function(__item) {
                                            __result=await __action(__item);
                                            if (check_true (__result)){
                                                return (__collector).push(__result)
                                            }
                                        };
                                        let __array__281=[],__elements__279=await (await Environment.get_global("pairs"))((ns_handle && ns_handle["context"] && ns_handle["context"]["scope"]));
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__278 in __elements__279) {
                                            __array__281.push(await __for_body__280(__elements__279[__iter__278]));
                                            if(__BREAK__FLAG__) {
                                                 __array__281.pop();
                                                break;
                                                
                                            }
                                        }return __array__281;
                                         
                                    })();
                                    return __collector
                                }
                            } else {
                                return await (await Environment.get_global("keys"))((ns_handle && ns_handle["context"] && ns_handle["context"]["scope"]))
                            }
                        })()) 
                    })()) 
                } else {
                    return [__array_op_rval__282,await (async function(){
                         return await (await Environment.get_global("sort"))(await (async function(){
                            if (check_true ((options && options["filter_by"]))){
                                {
                                    let __collector;
                                    let __result;
                                    let __action;
                                    __collector=[];
                                    __result=null;
                                    __action=async function(pset) {
                                        let name;
                                        let val;
                                        name=(pset && pset["0"]);
                                        val=(pset && pset["1"]);
                                        if (check_true (await (async function(){
                                            let __array_op_rval__277=(options && options["filter_by"]);
                                             if (__array_op_rval__277 instanceof Function){
                                                return await __array_op_rval__277(name,val) 
                                            } else {
                                                return [__array_op_rval__277,name,val]
                                            }
                                        })())){
                                            return name
                                        }
                                    };
                                    ;
                                    await (async function() {
                                        let __for_body__280=async function(__item) {
                                            __result=await __action(__item);
                                            if (check_true (__result)){
                                                return (__collector).push(__result)
                                            }
                                        };
                                        let __array__281=[],__elements__279=await (await Environment.get_global("pairs"))((ns_handle && ns_handle["context"] && ns_handle["context"]["scope"]));
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__278 in __elements__279) {
                                            __array__281.push(await __for_body__280(__elements__279[__iter__278]));
                                            if(__BREAK__FLAG__) {
                                                 __array__281.pop();
                                                break;
                                                
                                            }
                                        }return __array__281;
                                         
                                    })();
                                    return __collector
                                }
                            } else {
                                return await (await Environment.get_global("keys"))((ns_handle && ns_handle["context"] && ns_handle["context"]["scope"]))
                            }
                        })()) 
                    })()]
                }
            })()
        };
        let __array__276=[],__elements__274=await (await Environment.get_global("namespaces"))();
        let __BREAK__FLAG__=false;
        for(let __iter__273 in __elements__274) {
            __array__276.push(await __for_body__275(__elements__274[__iter__273]));
            if(__BREAK__FLAG__) {
                 __array__276.pop();
                break;
                
            }
        }return __array__276;
         
    })())
};__obj__1["keys*"]=function(obj) {
        if (check_true ((obj instanceof Object))){
            {
                let current_obj;
                let prototypes;
                let properties;
                current_obj=obj;
                prototypes=[];
                properties= ( Environment.get_global("first"))(prototypes);
                 ( function(){
                     let __test_condition__283=function() {
                        return current_obj
                    };
                    let __body_ref__284=function() {
                        properties=new Set();
                        (prototypes).push(properties);
                         ( function() {
                            let __for_body__287=function(item) {
                                return  properties["add"].call(properties,item)
                            };
                            let __array__288=[],__elements__286= Object.getOwnPropertyNames(current_obj);
                            let __BREAK__FLAG__=false;
                            for(let __iter__285 in __elements__286) {
                                __array__288.push( __for_body__287(__elements__286[__iter__285]));
                                if(__BREAK__FLAG__) {
                                     __array__288.pop();
                                    break;
                                    
                                }
                            }return __array__288;
                             
                        })();
                        return current_obj= Object.getPrototypeOf(current_obj)
                    };
                    let __BREAK__FLAG__=false;
                    while( __test_condition__283()) {
                         __body_ref__284();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                return  ( Environment.get_global("flatten"))( ( function() {
                    let __for_body__291=function(s) {
                        return  ( function() {
                            {
                                 let __call_target__= Array.from(s), __call_method__="sort";
                                return  __call_target__[__call_method__]()
                            } 
                        })()
                    };
                    let __array__292=[],__elements__290=prototypes;
                    let __BREAK__FLAG__=false;
                    for(let __iter__289 in __elements__290) {
                        __array__292.push( __for_body__291(__elements__290[__iter__289]));
                        if(__BREAK__FLAG__) {
                             __array__292.pop();
                            break;
                            
                        }
                    }return __array__292;
                     
                })())
            }
        } else {
            throw new TypeError("keys*: invalid object as argument");
            
        }
    };__obj__1["pairs*"]=function(obj) {
        if (check_true ((obj instanceof Object))){
            return  ( function() {
                let __for_body__295=function(k) {
                    return  ( function(){
                        let __array_op_rval__297=k;
                         if (__array_op_rval__297 instanceof Function){
                            return  __array_op_rval__297(obj[k]) 
                        } else {
                            return [__array_op_rval__297,obj[k]]
                        }
                    })()
                };
                let __array__296=[],__elements__294= ( Environment.get_global("keys*"))(obj);
                let __BREAK__FLAG__=false;
                for(let __iter__293 in __elements__294) {
                    __array__296.push( __for_body__295(__elements__294[__iter__293]));
                    if(__BREAK__FLAG__) {
                         __array__296.pop();
                        break;
                        
                    }
                }return __array__296;
                 
            })()
        }
    };__obj__1["analyze_text_line"]=function(line) {
        let delta;
        let indent_spaces;
        let base_indent;
        let idx;
        let openers;
        let closers;
        let code_mode;
        let cpos;
        let last_c;
        let last_delim;
        delta=0;
        indent_spaces=0;
        base_indent=null;
        idx=-1;
        openers=[];
        closers=[];
        code_mode=true;
        cpos=null;
        last_c=null;
        last_delim=null;
         ( function() {
            let __for_body__300=function(c) {
                idx+=1;
                  (function(){
                    if (check_true (((c==="\"")&& ((null==last_c)|| (last_c&&  ( Environment.get_global("not"))((92=== last_c["charCodeAt"]()))))))) {
                        return code_mode= ( Environment.get_global("not"))(code_mode)
                    } else if (check_true ((code_mode&& (c===";")))) {
                        {
                            __BREAK__FLAG__=true;
                            return
                        }
                    } else if (check_true ((code_mode&& ((c==="(")|| (c==="{")|| (c==="["))))) {
                        {
                            delta+=1;
                            (openers).push(idx);
                            base_indent=indent_spaces;
                            cpos=idx;
                            last_delim=c
                        }
                    } else if (check_true ((code_mode&& ((c===")")|| (c==="]")|| (c==="}"))))) {
                        {
                            delta-=1;
                            (closers).push(idx);
                            cpos=idx;
                            last_delim=c
                        }
                    } else if (check_true ((code_mode&& (c===" ")&&  ( Environment.get_global("not"))(base_indent)))) {
                        {
                            indent_spaces+=1
                        }
                    } else if (check_true ( ( Environment.get_global("not"))(base_indent))) {
                        base_indent=indent_spaces
                    }
                } )();
                return last_c=c
            };
            let __array__301=[],__elements__299=(line).split("");
            let __BREAK__FLAG__=false;
            for(let __iter__298 in __elements__299) {
                __array__301.push( __for_body__300(__elements__299[__iter__298]));
                if(__BREAK__FLAG__) {
                     __array__301.pop();
                    break;
                    
                }
            }return __array__301;
             
        })();
        if (check_true ((undefined==base_indent))){
            {
                base_indent=indent_spaces
            }
        };
        return {
            delta:delta,final_type:last_delim,final_pos:cpos,line:line,indent:base_indent,openers:openers,closers:closers
        }
    };__obj__1["calculate_indent_rule"]=function(delta,movement_needed) {
        let lisp_line;
        let remainder_pos;
        let remainder;
        let comps;
        let symbol_details;
        lisp_line= (delta && delta["line"])["substr"].call((delta && delta["line"]), ( Environment.get_global("first"))((delta && delta["openers"])));
        remainder_pos=( ( function(){
            let __targ__302=(delta && delta["openers"]);
            if (__targ__302){
                 return(__targ__302)[(movement_needed- 1)]
            } 
        })()||  ( Environment.get_global("first"))((delta && delta["openers"]))|| (delta && delta["indent"]));
        remainder= (delta && delta["line"])["substr"].call((delta && delta["line"]),(1+ remainder_pos));
        comps= ( function(){
            let __collector;
            let __result;
            let __action;
            __collector=[];
            __result=null;
            __action=function(c) {
                if (check_true ( ( Environment.get_global("not"))( ( Environment.get_global("blank?"))(c)))){
                    {
                        return c
                    }
                }
            };
            ;
             ( function() {
                let __for_body__305=function(__item) {
                    __result= __action(__item);
                    if (check_true (__result)){
                        return (__collector).push(__result)
                    }
                };
                let __array__306=[],__elements__304=(remainder).split(" ");
                let __BREAK__FLAG__=false;
                for(let __iter__303 in __elements__304) {
                    __array__306.push( __for_body__305(__elements__304[__iter__303]));
                    if(__BREAK__FLAG__) {
                         __array__306.pop();
                        break;
                        
                    }
                }return __array__306;
                 
            })();
            return __collector
        })();
        symbol_details= ( function(){
            if (check_true ((((comps && comps.length)>0)&&  ( Environment.get_global("not"))( ( Environment.get_global("contains?"))("(",(comps && comps["0"])))&&  ( Environment.get_global("not"))( ( Environment.get_global("contains?"))("{",(comps && comps["0"])))&&  ( Environment.get_global("not"))( ( Environment.get_global("contains?"))("[",(comps && comps["0"])))))){
                return ( ( Environment.get_global("first"))( ( Environment.get_global("meta_for_symbol"))((comps && comps["0"]),true))|| {
                    type:"-"
                })
            } else {
                return {
                    type:"-"
                }
            }
        })();
          (function(){
            if (check_true ((movement_needed===0))) {
                return true
            } else if (check_true (( ( Environment.get_global("starts_with?"))("def",(comps && comps["0"]))||  ( Environment.get_global("contains?"))((comps && comps["0"]),( Environment.get_global("*formatting_rules*.minor_indent")))))) {
                {
                      (function(){
                        delta["indent"]= ( Environment.get_global("add"))(remainder_pos,3);
                        return delta;
                        
                    })()
                }
            } else if (check_true (((((symbol_details && symbol_details["type"])&&  ( Environment.get_global("contains?"))("Function",(symbol_details && symbol_details["type"])))||  ( Environment.get_global("contains?"))((comps && comps["0"]),( Environment.get_global("*formatting_rules*.keywords"))))&&  ( Environment.get_global("contains?"))((delta && delta["final_type"]),["(","[",")","]"])))) {
                {
                      (function(){
                        delta["indent"]= ( Environment.get_global("add"))(remainder_pos,(comps && comps["0"] && comps["0"]["length"]),2);
                        return delta;
                        
                    })()
                }
            } else if (check_true (((delta && delta["final_type"])==="{"))) {
                {
                      (function(){
                        delta["indent"]= ( Environment.get_global("add"))( ( Environment.get_global("last"))((delta && delta["openers"])),2);
                        return delta;
                        
                    })()
                }
            } else if (check_true ( ( Environment.get_global("contains?"))((comps && comps["0"]),( Environment.get_global("built_ins"))))) {
                {
                      (function(){
                        delta["indent"]= ( Environment.get_global("add"))(remainder_pos,(comps && comps["0"] && comps["0"]["length"]),2);
                        return delta;
                        
                    })()
                }
            } else {
                {
                      (function(){
                        delta["indent"]= ( Environment.get_global("add"))(remainder_pos,1);
                        return delta;
                        
                    })()
                }
            }
        } )();
        return delta
    };__obj__1["format_lisp_line"]=function(line_number,get_line) {
        if (check_true (((line_number>0)&& get_line instanceof Function))){
            {
                let current_row;
                let prior_line;
                let delta;
                let movement_needed;
                let orig_movement_needed;
                let comps;
                let final;
                let in_seek;
                current_row=(line_number- 1);
                prior_line= ( function(){
                    let v= ( function(){
                        let __array_op_rval__312=get_line;
                         if (__array_op_rval__312 instanceof Function){
                            return  __array_op_rval__312(current_row) 
                        } else {
                            return [__array_op_rval__312,current_row]
                        }
                    })();
                    ;
                     ( function(){
                         let __test_condition__313=function() {
                            return (((v).trim()==="")&& (current_row>0))
                        };
                        let __body_ref__314=function() {
                            current_row-=1;
                            return v= ( function(){
                                let __array_op_rval__315=get_line;
                                 if (__array_op_rval__315 instanceof Function){
                                    return  __array_op_rval__315(current_row) 
                                } else {
                                    return [__array_op_rval__315,current_row]
                                }
                            })()
                        };
                        let __BREAK__FLAG__=false;
                        while( __test_condition__313()) {
                             __body_ref__314();
                             if(__BREAK__FLAG__) {
                                 break;
                                
                            }
                        } ;
                        
                    })();
                    return (v|| "")
                })();
                delta= ( Environment.get_global("analyze_text_line"))(prior_line);
                movement_needed=0;
                orig_movement_needed=0;
                comps=null;
                final=(delta && delta["final_type"]);
                in_seek=((delta && delta["openers"] && delta["openers"]["length"])<(delta && delta["closers"] && delta["closers"]["length"]));
                movement_needed=(delta && delta["delta"]);
                orig_movement_needed=movement_needed;
                  (function(){
                    if (check_true ((movement_needed<0))) {
                        {
                            let lisp_line;
                            let remainder_pos;
                            let remainder;
                            let symbol_details;
                            lisp_line=null;
                            remainder_pos=null;
                            remainder=null;
                            symbol_details=null;
                             ( function(){
                                 let __test_condition__316=function() {
                                    return ((movement_needed<0)&& (current_row>0))
                                };
                                let __body_ref__317=function() {
                                    current_row-=1;
                                    prior_line= ( function(){
                                        let __array_op_rval__318=get_line;
                                         if (__array_op_rval__318 instanceof Function){
                                            return  __array_op_rval__318(current_row) 
                                        } else {
                                            return [__array_op_rval__318,current_row]
                                        }
                                    })();
                                     ( function(){
                                         let __test_condition__319=function() {
                                            return ((current_row>0)&& ((prior_line).trim()===""))
                                        };
                                        let __body_ref__320=function() {
                                            current_row-=1;
                                            return prior_line= ( function(){
                                                let __array_op_rval__321=get_line;
                                                 if (__array_op_rval__321 instanceof Function){
                                                    return  __array_op_rval__321(current_row) 
                                                } else {
                                                    return [__array_op_rval__321,current_row]
                                                }
                                            })()
                                        };
                                        let __BREAK__FLAG__=false;
                                        while( __test_condition__319()) {
                                             __body_ref__320();
                                             if(__BREAK__FLAG__) {
                                                 break;
                                                
                                            }
                                        } ;
                                        
                                    })();
                                    delta= ( Environment.get_global("analyze_text_line"))(prior_line);
                                    return movement_needed=(movement_needed+ (delta && delta["delta"]))
                                };
                                let __BREAK__FLAG__=false;
                                while( __test_condition__316()) {
                                     __body_ref__317();
                                     if(__BREAK__FLAG__) {
                                         break;
                                        
                                    }
                                } ;
                                
                            })();
                            return delta= ( Environment.get_global("calculate_indent_rule"))(delta,movement_needed)
                        }
                    } else if (check_true ((movement_needed>0))) {
                        {
                            return delta= ( Environment.get_global("calculate_indent_rule"))(delta,movement_needed)
                        }
                    }
                } )();
                return ( ( function() {
                    let __for_body__324=function(c) {
                        return " "
                    };
                    let __array__325=[],__elements__323= ( Environment.get_global("range"))((delta && delta["indent"]));
                    let __BREAK__FLAG__=false;
                    for(let __iter__322 in __elements__323) {
                        __array__325.push( __for_body__324(__elements__323[__iter__322]));
                        if(__BREAK__FLAG__) {
                             __array__325.pop();
                            break;
                            
                        }
                    }return __array__325;
                     
                })()).join("")
            }
        }
    };__obj__1["keyword_mapper"]=function(token) {
        if (check_true ( ( Environment.get_global("contains?"))(token,( Environment.get_global("*formatting_rules*.keywords"))))){
            return "keyword"
        } else {
            return "identifier"
        }
    };__obj__1["compiler"]=async function(quoted_lisp,opts) {
    let Environment=(opts && opts["env"]);
    ;
    let get_global=(opts && opts["env"] && opts["env"]["get_global"]);
    ;
    {
        let length=function anonymous(obj) {
{
                                if(obj instanceof Array) {
                                    return obj.length;
                                } else if (obj instanceof Set) {
                                    return obj.size;
                                } else if ((obj === undefined)||(obj===null)) {
                                    return 0;
                                } else if (typeof obj==='object') {
                                    return Object.keys(obj).length;
                                } else if (typeof obj==='string') {
                                    return obj.length;
                                } 
                                return 0;
                            }
};
        let first=function anonymous(x) {
{ return x[0] }
};
        let second=function anonymous(x) {
{ return x[1] }
};
        let map=async function anonymous(lambda,array_values) {
{ try {
                                        let rval = [],
                                                tl = array_values.length;
                                        for (let i = 0; i < array_values.length; i++) {
                                            rval.push(await lambda.apply(this,[array_values[i], i, tl]));
                                         }
                                        return rval;
                                    } catch (ex) {           
                                              if (lambda === undefined || lambda === null) {
                                                    throw new ReferenceError("map: lambda argument (position 0) is undefined or nil")
                                              } else if (array_values === undefined || array_values === null) {
                                                    throw new ReferenceError("map: container argument (position 1) is undefined or nil")
                                              } else if (!(lambda instanceof Function)) {
                                                    throw new ReferenceError("map: lambda argument must be a function: received: "+ typeof lambda)
                                              } else if (!(array_values instanceof Array)) {
                                                    throw new ReferenceError("map: invalid array argument, received: " + typeof array_values)
                                              } else {
                                                    // something else just pass on the error
                                                throw ex;
                                              }
                                    }
                              }
};
        let do_deferred_splice=async function(tree) {    let rval;
    let idx;
    let tval;
    let deferred_operator;
    rval=null;
    idx=0;
    tval=null;
    deferred_operator=(["=","$","&","!"]).join("");
    return await async function(){
        if (check_true ((tree instanceof Array))) {
            {
                rval=[];
                await (async function(){
                     let __test_condition__15=async function() {
                        return (idx<(tree && tree.length))
                    };
                    let __body_ref__16=async function() {
                        tval=tree[idx];
                        if (check_true ((tval===deferred_operator))){
                            {
                                idx+=1;
                                tval=tree[idx];
                                rval=await rval["concat"].call(rval,await (async function(){
                                     return await do_deferred_splice(tval) 
                                })())
                            }
                        } else {
                            (rval).push(await (async function(){
                                 return await do_deferred_splice(tval) 
                            })())
                        };
                        return idx+=1
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__15()) {
                        await __body_ref__16();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                return rval
            }
        } else if (check_true ((tree instanceof Object))) {
            {
                rval=new Object();
                await (async function() {
                    let __for_body__19=async function(pset) {
                        return await async function(){
                            rval[(pset && pset["0"])]=await (async function(){
                                 return await do_deferred_splice((pset && pset["1"])) 
                            })();
                            return rval;
                            
                        }()
                    };
                    let __array__20=[],__elements__18=await (await Environment.get_global("pairs"))(tree);
                    let __BREAK__FLAG__=false;
                    for(let __iter__17 in __elements__18) {
                        __array__20.push(await __for_body__19(__elements__18[__iter__17]));
                        if(__BREAK__FLAG__) {
                             __array__20.pop();
                            break;
                            
                        }
                    }return __array__20;
                     
                })();
                return rval
            }
        } else {
            return tree
        }
    } ()
};
        let not=function anonymous(x) {
{ if (check_true(x)) { return false } else { return true } }
};
        let sub_type=function subtype(value) {  if (value === null) return "null";  else if (value === undefined) return "undefined";
  else if (value instanceof Array) return "array";
  else if (value.constructor && value.constructor!=null && value.constructor.name!=='Object') {
    return value.constructor.name;
  }
  return typeof value;
};
        let last=function anonymous(x) {
{ return x[x.length - 1] }
};
        let flatten=function anonymous(x) {
{ return x.flat(999999999999) } 
};
        let add=function anonymous(...args) {
{
                                let acc;
                                if (typeof args[0]==="number") {
                                    acc = 0;
                                } else if (args[0] instanceof Array) {
                                    return args[0].concat(args.slice(1));
                                } else if (typeof args[0]==='object') {
                                   let rval = {};
                                   for (let i in args) {
                                        if (typeof args[i] === 'object') {
                                            for (let k in args[i]) {
                                                rval[k] = args[i][k];
                                            }
                                        }
                                   }
                                   return rval;
                                } else {
                                    acc = "";
                                }
                                for (let i in args) {
                                    acc += args[i];
                                }
                                return acc;
                             }
};
        let subtype=function subtype(value) {  if (value === null) return "null";
  else if (value === undefined) return "undefined";
  else if (value instanceof Array) return "array";
  else if (value.constructor && value.constructor!=null && value.constructor.name!=='Object') {
    return value.constructor.name;
  }
  return typeof value;
};
        let is_nil_ques_=async function(value) {    return (null===value)
};
        let is_number_ques_=function(x) {                        return ( subtype(x)==="Number")
                    };
        let starts_with_ques_=function anonymous(val,text) {
{ if (text instanceof Array) { return text[0]===val } else if (subtype(text)=='String') { return text.startsWith(val) } else { return false }}
};
        let uniq=async function(values) {    let s;
    s=new Set();
    await (await Environment.get_global("map"))(async function(x) {
        return await s["add"].call(s,x)
    },(values|| []));
    return await (await Environment.get_global("to_array"))(s)
};
        let object_methods=async function(obj) {    let properties;
    let current_obj;
    properties=new Set();
    current_obj=obj;
    await (async function(){
         let __test_condition__236=async function() {
            return current_obj
        };
        let __body_ref__237=async function() {
            await (await Environment.get_global("map"))(async function(item) {
                return await properties["add"].call(properties,item)
            },await Object.getOwnPropertyNames(current_obj));
            return current_obj=await Object.getPrototypeOf(current_obj)
        };
        let __BREAK__FLAG__=false;
        while(await __test_condition__236()) {
            await __body_ref__237();
             if(__BREAK__FLAG__) {
                 break;
                
            }
        } ;
        
    })();
    return await (async function() {
        {
             let __call_target__=await Array.from(await properties["keys"]()), __call_method__="filter";
            return await __call_target__[__call_method__].call(__call_target__,async function(item) {
                return item instanceof Function
            })
        } 
    })()
};
        let conj=function anonymous(...args) {
{   let list = [];
                                if (args[0] instanceof Array) {
                                    list = args[0];
                                } else {
                                    list = [args[0]];
                                }
                                args.slice(1).map(function(x) {
                                    list = list.concat(x);
                                });
                                return list;
                            }
};
        let cl_encode_string=async function(text) {    if (check_true ((text instanceof String || typeof text==='string'))){
        {
            let escaped;
            let nq;
            let step1;
            let snq;
            escaped=await (await Environment.get_global("replace"))(new RegExp("\n","g"),await (await Environment.get_global("add"))(await String.fromCharCode(92),"n"),text);
            escaped=await (await Environment.get_global("replace"))(new RegExp("\r","g"),await (await Environment.get_global("add"))(await String.fromCharCode(92),"r"),escaped);
            nq=(escaped).split(await String.fromCharCode(34));
            step1=(nq).join(await (await Environment.get_global("add"))(await String.fromCharCode(92),await String.fromCharCode(34)));
            snq=(step1).split(await String.fromCharCode(39));
            return step1
        }
    } else {
        return text
    }
};
        let contains_ques_=function anonymous(value,container) {
{ if (!value && !container) { return false }
                           else if (container === null) { throw new TypeError("contains?: passed nil/undefined container value"); }
                           else if (container instanceof Array) return container.includes(value);
                           else if (container instanceof Set) return container.has(value);
                           else if ((container instanceof String) || typeof container === "string") {
                                if (subtype(value) === "Number") return container.indexOf(""+value)>-1;
                                else return container.indexOf(value)>-1;
                           }                                                      
                           else throw new TypeError("contains?: passed invalid container type: "+subtype(container)) }
};
        let tree;
        let expanded_tree;
        let op;
        let default_safety_level;
        let source_name;
        let build_environment_mode;
        let env_ref;
        let operator;
        let break_out;
        let tokens;
        let tokenized;
        let target_namespace;
        let errors;
        let external_dependencies;
        let first_level_setup;
        let needs_first_level;
        let signal_error;
        let warnings;
        let blk_counter;
        let ctx;
        let output;
        let __log__1= async function(){
            return await Environment.get_global("log")
        };
        let __defclog__2= async function(){
            return async function(opts) {
                let style;
                style=("padding: 5px;"+ await (async function(){
                    if (check_true ((opts && opts["background"]))){
                        return ("background: "+ (opts && opts["background"])+ ";")
                    } else {
                        return ""
                    }
                })()+ await (async function(){
                    if (check_true ((opts && opts["color"]))){
                        return ("color: "+ (opts && opts["color"])+ ";")
                    }
                })()+ "");
                ;
                return async function(...args) {
                    return await (async function(){
                        let __target_arg__7=[].concat(await conj([style],args));
                        if(!__target_arg__7 instanceof Array){
                            throw new TypeError("Invalid final argument to apply - an array is required")
                        }let __pre_arg__8=("%c"+ await (async function(){
                            if (check_true ((opts && opts["prefix"]))){
                                return (opts && opts["prefix"])
                            } else {
                                return (args).shift()
                            }
                        })());
                        __target_arg__7.unshift(__pre_arg__8);
                        return (console.log).apply(this,__target_arg__7)
                    })()
                }
            }
        };
        let quiet_mode;
        let show_hints;
        let error_log;
        let assembly;
        let async_function_type_placeholder;
        let function_type_placeholder;
        let type_marker;
        let return_marker;
        let entry_signature;
        let temp_fn_asn_template;
        let anon_fn_template;
        let build_fn_with_assignment;
        let build_anon_fn;
        let completion_types;
        let referenced_global_symbols;
        let new_ctx;
        let set_ctx_log;
        let map_ctype_to_value;
        let map_value_to_ctype;
        let set_ctx;
        let get_ctx;
        let get_ctx_val;
        let get_declarations;
        let set_declaration;
        let is_ambiguous_ques_;
        let set_ambiguous;
        let unset_ambiguous;
        let invalid_js_ref_chars;
        let invalid_js_ref_chars_regex;
        let check_invalid_js_ref;
        let __sanitize_js_ref_name__3= async function(){
            return await Environment.get_global("sanitize_js_ref_name")
        };
        let find_in_context;
        let source_chain;
        let source_from_tokens;
        let source_comment;
        let NOT_FOUND;
        let THIS_REFERENCE;
        let NOT_FOUND_THING;
        let get_lisp_ctx_log;
        let get_lisp_ctx;
        let get_val;
        let has_lisp_globals;
        let root_ctx;
        let tokenize_object;
        let tokenize_quote;
        let tokenize;
        let comp_time_log;
        let compile_time_eval;
        let infix_ops;
        let compile_set_prop;
        let compile_prop;
        let compile_elem;
        let inline_log;
        let compile_inline;
        let compile_push;
        let compile_list;
        let compile_typeof;
        let compile_instanceof;
        let compile_compare;
        let compile_assignment;
        let top_level_log;
        let compile_toplevel;
        let check_statement_completion;
        let compile_block;
        let Expression;
        let Statement;
        let NumberType;
        let StringType;
        let NilType;
        let UnknownType;
        let ArgumentType;
        let compile_defvar;
        let get_declaration_details;
        let clean_quoted_reference;
        let compile_let;
        let in_sync_ques_;
        let await_ques_;
        let calling_preamble;
        let fn_log;
        let completion_scope_id;
        let set_new_completion_scope;
        let compile_fn;
        let compile_jslambda;
        let compile_yield;
        let var_counter;
        let gen_temp_name;
        let if_id;
        let compile_cond;
        let compile_cond_inner;
        let ensure_block;
        let compile_if;
        let compile_as_call;
        let compile_wrapper_fn;
        let compile_block_to_anon_fn;
        let make_do_block;
        let push_as_arg_list;
        let compile_new;
        let compile_val_mod;
        let compile_try;
        let compile_try_inner;
        let compile_throw;
        let compile_break;
        let compile_return;
        let apply_log;
        let compile_apply;
        let compile_call;
        let compile_call_inner;
        let check_needs_wrap;
        let compile_import;
        let compile_dynamic_import;
        let compile_javascript;
        let compile_set_global;
        let is_token_ques_;
        let compile_quote;
        let compile_quotel;
        let wrap_and_run;
        let quote_tree;
        let quotem_log;
        let compile_quotem;
        let compile_unquotem;
        let eval_log;
        let compile_eval;
        let compile_debug;
        let compile_for_each;
        let compile_for_each_inner;
        let compile_while;
        let compile_for_with;
        let compile_for_with_inner;
        let silence;
        let verbosity;
        let check_verbosity;
        let declare_log;
        let compile_declare;
        let safety_level;
        let get_scoped_type;
        let compile_scoped_reference;
        let compile_lisp_scoped_reference;
        let standard_types;
        let is_error;
        let is_block_ques_;
        let is_complex_ques_;
        let is_form_ques_;
        let op_lookup;
        let comp_log;
        let last_source;
        let compile_obj_literal;
        let is_literal_ques_;
        let comp_warn;
        let __compile__4= async function(){
            return async function(tokens,ctx,_cdepth) {
                if (check_true (is_error)){
                    return is_error
                } else {
                    {
                        let rval=await compile_inner(tokens,ctx,_cdepth);
                        ;
                        if (check_true (is_error)){
                            {
                                if (check_true ((opts && opts["throw_on_error"]))){
                                    {
                                        let error=new Error((is_error && is_error["error"]));
                                        ;
                                        await (async function() {
                                            let __for_body__541=async function(pset) {
                                                return await async function(){
                                                    error[(pset && pset["0"])]=(pset && pset["1"]);
                                                    return error;
                                                    
                                                }()
                                            };
                                            let __array__542=[],__elements__540=await (await Environment.get_global("pairs"))(is_error);
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__539 in __elements__540) {
                                                __array__542.push(await __for_body__541(__elements__540[__iter__539]));
                                                if(__BREAK__FLAG__) {
                                                     __array__542.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__542;
                                             
                                        })();
                                        throw error;
                                        
                                    }
                                }
                            }
                        };
                        return rval
                    }
                }
            }
        };
        let compile_inner;
        let final_token_assembly;
        let main_log;
        let assemble_output;
        {
            tree=quoted_lisp;
            expanded_tree=await (async function(){
                 return await clone(tree) 
            })();
            op=null;
            default_safety_level=((Environment && Environment["declarations"] && Environment["declarations"]["safety"] && Environment["declarations"]["safety"]["level"])|| 1);
            source_name=((opts && opts["source_name"])|| "anonymous");
            build_environment_mode=((opts && opts["build_environment"])|| false);
            env_ref=await (async function(){
                if (check_true (build_environment_mode)){
                    return ""
                } else {
                    return "Environment."
                }
            })();
            operator=null;
            break_out="__BREAK__FLAG__";
            tokens=[];
            tokenized=null;
            target_namespace=null;
            errors=[];
            external_dependencies=new Object();
            first_level_setup=[];
            needs_first_level=true;
            signal_error=async function(message) {
                return new LispSyntaxError(message)
            };
            warnings=[];
            blk_counter=0;
            ctx=null;
            output=null;
            let log=await __log__1();
            ;
            let defclog=await __defclog__2();
            ;
            quiet_mode=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    {
                        log=console.log;
                        return true
                    }
                } else {
                    return false
                }
            })();
            show_hints=null;
            error_log=await (async function(){
                 return await defclog({
                    prefix:"Compile Error",background:"#CA3040",color:"white"
                }) 
            })();
            assembly=[];
            async_function_type_placeholder=async function() {
                return true
            };
            function_type_placeholder=function() {
                return true
            };
            type_marker=async function(type) {
                return await async function(){
                    let __target_obj__9=new Object();
                    __target_obj__9["ctype"]=type;
                    __target_obj__9["args"]=[];
                    return __target_obj__9;
                    
                }()
            };
            return_marker=async function() {
                return {
                    mark:"rval"
                }
            };
            entry_signature=null;
            temp_fn_asn_template=await (async function(){
                 return [{
                    type:"special",val:await (async function(){
                         return "=:defvar" 
                    })(),ref:true,name:"defvar"
                },{
                    type:"literal",val:"\"\"",ref:false,name:""
                },{
                    type:"arr",val:await (async function(){
                         return [{
                            type:"special",val:await (async function(){
                                 return "=:fn" 
                            })(),ref:true,name:"fn"
                        },{
                            type:"arr",val:[],ref:false,name:null
                        },{
                            type:"arr",val:[],ref:false,name:null
                        }] 
                    })(),ref:false,name:null
                }] 
            })();
            anon_fn_template=await temp_fn_asn_template["slice"].call(temp_fn_asn_template,2);
            build_fn_with_assignment=async function(tmp_var_name,body,args,ctx) {
                let tmp_template;
                tmp_template=await (async function(){
                     return await clone(temp_fn_asn_template) 
                })();
                if (check_true (await in_sync_ques_(ctx))){
                    {
                        await async function(){
                            let __target_obj__10=(tmp_template && tmp_template["2"] && tmp_template["2"]["val"] && tmp_template["2"]["val"]["0"]);
                            __target_obj__10["val"]=await (async function(){
                                 return "=:function" 
                            })();
                            return __target_obj__10;
                            
                        }();
                        await async function(){
                            let __target_obj__11=(tmp_template && tmp_template["2"] && tmp_template["2"]["val"] && tmp_template["2"]["val"]["0"]);
                            __target_obj__11["name"]="function";
                            return __target_obj__11;
                            
                        }()
                    }
                };
                await async function(){
                    let __target_obj__12=(tmp_template && tmp_template["1"]);
                    __target_obj__12["name"]=tmp_var_name;
                    __target_obj__12["val"]=tmp_var_name;
                    return __target_obj__12;
                    
                }();
                if (check_true ((args instanceof Array))){
                    {
                        await async function(){
                            let __target_obj__13=(tmp_template && tmp_template["2"] && tmp_template["2"]["val"] && tmp_template["2"]["val"]["1"]);
                            __target_obj__13["val"]=args;
                            return __target_obj__13;
                            
                        }()
                    }
                };
                await async function(){
                    let __target_obj__14=(tmp_template && tmp_template["2"] && tmp_template["2"]["val"] && tmp_template["2"]["val"]["2"]);
                    __target_obj__14["val"]=body;
                    return __target_obj__14;
                    
                }();
                return tmp_template
            };
            build_anon_fn=async function(body,args) {
                let tmp_template;
                tmp_template=await (async function(){
                     return await clone(anon_fn_template) 
                })();
                if (check_true (await verbosity(ctx))){
                    {
                        await console.log("build_anon_function: -> body: ",body);
                        await console.log("build_anon_function: -> args: ",args)
                    }
                };
                if (check_true ((args instanceof Array))){
                    {
                        await async function(){
                            let __target_obj__15=(tmp_template && tmp_template["0"] && tmp_template["0"]["val"] && tmp_template["0"]["val"]["1"]);
                            __target_obj__15["val"]=args;
                            return __target_obj__15;
                            
                        }()
                    }
                };
                await async function(){
                    let __target_obj__16=(tmp_template && tmp_template["0"] && tmp_template["0"]["val"] && tmp_template["0"]["val"]["2"]);
                    __target_obj__16["val"]=body;
                    return __target_obj__16;
                    
                }();
                return tmp_template
            };
            completion_types=["return","throw","yield"];
            referenced_global_symbols=new Set();
            new_ctx=function(parent) {
                let ctx_obj;
                ctx_obj=new Object();
                  (function(){
                    ctx_obj["scope"]=new Object();
                    ctx_obj["source"]="";
                    ctx_obj["parent"]=parent;
                    ctx_obj["ambiguous"]=new Object();
                    ctx_obj["declared_types"]=new Object();
                    ctx_obj["defs"]=[];
                    return ctx_obj;
                    
                })();
                if (check_true (parent)){
                    {
                          (function(){
                            let __target_obj__18=(ctx_obj && ctx_obj["scope"]);
                            __target_obj__18["namespace"]=(parent && parent["scope"] && parent["scope"]["namespace"]);
                            return __target_obj__18;
                            
                        })();
                        if (check_true ((parent && parent["defvar_eval"]))){
                            {
                                  (function(){
                                    ctx_obj["defvar_eval"]=true;
                                    return ctx_obj;
                                    
                                })()
                            }
                        };
                        if (check_true ((parent && parent["has_first_level"]))){
                            {
                                  (function(){
                                    ctx_obj["has_first_level"]=true;
                                    return ctx_obj;
                                    
                                })()
                            }
                        };
                        if (check_true ((parent && parent["block_step"]))){
                            {
                                  (function(){
                                    ctx_obj["block_step"]=(parent && parent["block_step"]);
                                    return ctx_obj;
                                    
                                })()
                            }
                        };
                        if (check_true ((parent && parent["block_id"]))){
                            {
                                  (function(){
                                    ctx_obj["block_id"]=(parent && parent["block_id"]);
                                    return ctx_obj;
                                    
                                })()
                            }
                        };
                        if (check_true ((parent && parent["sub_block_step"]))){
                            {
                                  (function(){
                                    ctx_obj["sub_block_step"]=(parent && parent["sub_block_step"]);
                                    return ctx_obj;
                                    
                                })()
                            }
                        };
                        if (check_true (false)){
                            {
                                  (function(){
                                    ctx_obj["return_point"]= add((parent && parent["return_point"]),1);
                                    return ctx_obj;
                                    
                                })()
                            }
                        }
                    }
                };
                return ctx_obj
            };
            set_ctx_log=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    return log
                } else {
                    return await defclog({
                        prefix:"set_ctx",background:"darkgreen",color:"white"
                    })
                }
            })();
            map_ctype_to_value=async function(ctype,value) {
                return await async function(){
                    if (check_true ((ctype==="Function"))) {
                        return Function
                    } else if (check_true ((ctype==="AsyncFunction"))) {
                        return AsyncFunction
                    } else if (check_true ((ctype==="expression"))) {
                        return Expression
                    } else if (check_true (((ctype instanceof String || typeof ctype==='string')&& await contains_ques_("block",ctype)))) {
                        return UnknownType
                    } else if (check_true ((ctype==="array"))) {
                        return Array
                    } else if (check_true ((ctype==="nil"))) {
                        return NilType
                    } else if (check_true (ctype instanceof Function)) {
                        return ctype
                    } else {
                        return value
                    }
                } ()
            };
            map_value_to_ctype=async function(value) {
                return await async function(){
                    if (check_true ((Function===value))) {
                        return "Function"
                    } else if (check_true ((AsyncFunction===value))) {
                        return "AsyncFunction"
                    } else if (check_true ((NumberType===value))) {
                        return "NumberType"
                    } else if (check_true ((Expression===value))) {
                        return "Expression"
                    } else if (check_true ((Array===value))) {
                        return "array"
                    } else if (check_true ((Boolean===value))) {
                        return "Boolean"
                    } else if (check_true ((NilType===value))) {
                        return "nil"
                    } else if (check_true ((Object===value))) {
                        return "Object"
                    } else {
                        return value
                    }
                } ()
            };
            set_ctx=async function(ctx,name,value) {
                let sanitized_name=await sanitize_js_ref_name(name);
                ;
                if (check_true (((value instanceof Array)&& (value && value["0"] && value["0"]["ctype"])))){
                    return await async function(){
                        let __target_obj__25=(ctx && ctx["scope"]);
                        __target_obj__25[sanitized_name]=await (async function(){
                             return await async function(){
                                if (check_true (((value && value["0"] && value["0"]["ctype"])==="Function"))) {
                                    return Function
                                } else if (check_true (((value && value["0"] && value["0"]["ctype"])==="AsyncFunction"))) {
                                    return AsyncFunction
                                } else if (check_true (((value && value["0"] && value["0"]["ctype"])==="expression"))) {
                                    return Expression
                                } else {
                                    return value
                                }
                            } () 
                        })();
                        return __target_obj__25;
                        
                    }()
                } else {
                    return await async function(){
                        let __target_obj__26=(ctx && ctx["scope"]);
                        __target_obj__26[sanitized_name]=value;
                        return __target_obj__26;
                        
                    }()
                }
            };
            get_ctx=async function(ctx,name) {
                let ref_name;
                ref_name=null;
                return await async function(){
                    if (check_true (await (async function(){
                         return await is_nil_ques_(name) 
                    })())) {
                        throw new SyntaxError(("get_ctx: nil identifier passed: "+ await sub_type(name)));
                        
                    } else if (check_true (await is_number_ques_(name))) {
                        return name
                    } else if (check_true (name instanceof Function)) {
                        throw new SyntaxError(("get_ctx: invalid identifier passed: "+ await sub_type(name)));
                        
                    } else {
                        {
                            ref_name=await first(await (await Environment.get_global("get_object_path"))(name));
                            return await async function(){
                                if (check_true (await not((undefined===await (async function(){
                                    let __targ__27=(ctx && ctx["scope"]);
                                    if (__targ__27){
                                         return(__targ__27)[ref_name]
                                    } 
                                })())))) {
                                    return await (async function(){
                                        let __targ__28=(ctx && ctx["scope"]);
                                        if (__targ__28){
                                             return(__targ__28)[ref_name]
                                        } 
                                    })()
                                } else if (check_true ((ctx && ctx["parent"]))) {
                                    return await get_ctx((ctx && ctx["parent"]),ref_name)
                                }
                            } ()
                        }
                    }
                } ()
            };
            get_ctx_val=async function(ctx,name) {
                let ref_name;
                let declared_type_value;
                ref_name=null;
                declared_type_value=null;
                if (check_true ((null==ctx))){
                    {
                        await console.error("get_ctx_val: undefined/nil ctx passed.")
                    }
                };
                return await async function(){
                    if (check_true (await (async function(){
                         return await is_nil_ques_(name) 
                    })())) {
                        throw new TypeError(("get_ctx_val: nil identifier passed: "+ await sub_type(name)));
                        
                    } else if (check_true (await is_number_ques_(name))) {
                        return name
                    } else if (check_true (name instanceof Function)) {
                        throw new Error(("get_ctx_val: invalid identifier passed: "+ await sub_type(name)));
                        
                    } else {
                        {
                            if (check_true (await starts_with_ques_(await (async function(){
                                 return "=:" 
                            })(),name))){
                                ref_name=await name["substr"].call(name,2)
                            } else {
                                ref_name=name
                            };
                            ref_name=await sanitize_js_ref_name(name);
                            declared_type_value=await get_declarations(ctx,ref_name);
                            return await async function(){
                                if (check_true ((declared_type_value && declared_type_value["declared_global"]))) {
                                    return undefined
                                } else if (check_true ((declared_type_value && declared_type_value["type"]))) {
                                    return (declared_type_value && declared_type_value["type"])
                                } else {
                                    {
                                        ref_name=await first(await (await Environment.get_global("get_object_path"))(ref_name));
                                        return await async function(){
                                            if (check_true (op_lookup[ref_name])) {
                                                return AsyncFunction
                                            } else if (check_true (await not((undefined===await (async function(){
                                                let __targ__29=(ctx && ctx["scope"]);
                                                if (__targ__29){
                                                     return(__targ__29)[ref_name]
                                                } 
                                            })())))) {
                                                return await (async function(){
                                                    let __targ__30=(ctx && ctx["scope"]);
                                                    if (__targ__30){
                                                         return(__targ__30)[ref_name]
                                                    } 
                                                })()
                                            } else if (check_true ((ctx && ctx["parent"]))) {
                                                return await get_ctx((ctx && ctx["parent"]),ref_name)
                                            }
                                        } ()
                                    }
                                }
                            } ()
                        }
                    }
                } ()
            };
            get_declarations=async function(ctx,name,_tagged) {
                let ref_name;
                let oname;
                let root_name;
                ref_name=null;
                oname=name;
                root_name=null;
                name=await (async function(){
                    if (check_true (_tagged)){
                        return name
                    } else {
                        return await sanitize_js_ref_name(name)
                    }
                })();
                return await async function(){
                    if (check_true (await not((ctx instanceof Object)))) {
                        throw new TypeError(("get_declarations: invalid ctx passed"));
                        
                    } else if (check_true (await (async function(){
                         return await is_nil_ques_(name) 
                    })())) {
                        throw new TypeError(("get_declarations: nil identifier passed: "+ await sub_type(oname)));
                        
                    } else if (check_true (await is_number_ques_(name))) {
                        return name
                    } else if (check_true (name instanceof Function)) {
                        throw new Error(("get_declarations: invalid identifier passed: "+ await sub_type(oname)));
                        
                    } else {
                        if (check_true ((name instanceof String || typeof name==='string'))){
                            {
                                if (check_true (await starts_with_ques_(await (async function(){
                                     return "=:" 
                                })(),name))){
                                    ref_name=await name["substr"].call(name,2)
                                } else {
                                    ref_name=name
                                };
                                return await async function(){
                                    if (check_true (op_lookup[ref_name])) {
                                        return null
                                    } else if (check_true (await not((undefined===await (async function(){
                                        let __targ__31=(ctx && ctx["declared_types"]);
                                        if (__targ__31){
                                             return(__targ__31)[ref_name]
                                        } 
                                    })())))) {
                                        return await (async function(){
                                            let __targ__32=(ctx && ctx["declared_types"]);
                                            if (__targ__32){
                                                 return(__targ__32)[ref_name]
                                            } 
                                        })()
                                    } else if (check_true ((ctx && ctx["parent"]))) {
                                        return await get_declarations((ctx && ctx["parent"]),ref_name,true)
                                    }
                                } ()
                            }
                        }
                    }
                } ()
            };
            set_declaration=async function(ctx,name,declaration_type,value) {
                let sname;
                let dec_struct;
                sname=await sanitize_js_ref_name(name);
                dec_struct=await get_declarations(ctx,sname);
                if (check_true (await (await Environment.get_global("blank?"))(dec_struct))){
                    {
                        dec_struct={
                            type:undefined,inlined:false
                        }
                    }
                };
                return await async function(){
                    if (check_true (((declaration_type==="location")&& (value==="global")))) {
                        {
                            has_lisp_globals=true;
                            if (check_true ((undefined===dec_struct["type"]))){
                                throw new SyntaxError("global declaration must be after declaration of type for symbol");
                                
                            };
                            await async function(){
                                dec_struct["declared_global"]=true;
                                return dec_struct;
                                
                            }();
                            return await async function(){
                                let __target_obj__34=(root_ctx && root_ctx["defined_lisp_globals"]);
                                __target_obj__34[name]=dec_struct["type"];
                                return __target_obj__34;
                                
                            }()
                        }
                    } else {
                        {
                            await async function(){
                                dec_struct[declaration_type]=value;
                                return dec_struct;
                                
                            }();
                            await async function(){
                                let __target_obj__36=(ctx && ctx["declared_types"]);
                                __target_obj__36[sname]=dec_struct;
                                return __target_obj__36;
                                
                            }();
                            return await (async function(){
                                let __targ__37=(ctx && ctx["declared_types"]);
                                if (__targ__37){
                                     return(__targ__37)[sname]
                                } 
                            })()
                        }
                    }
                } ()
            };
            is_ambiguous_ques_=async function(ctx,name) {
                let ref_name;
                ref_name=null;
                return await async function(){
                    if (check_true (await (async function(){
                         return await is_nil_ques_(ctx) 
                    })())) {
                        throw new TypeError(("is_ambiguous?: nil ctx passed"));
                        
                    } else if (check_true (await (async function(){
                         return await is_nil_ques_(name) 
                    })())) {
                        throw new TypeError(("is_ambiguous?: nil reference name passed"));
                        
                    } else if (check_true (await not((name instanceof String || typeof name==='string')))) {
                        throw new TypeError(("is_ambiguous?: reference name given is a "+ await sub_type(name)+ ", requires a string"));
                        
                    } else {
                        {
                            if (check_true (await starts_with_ques_(await (async function(){
                                 return "=:" 
                            })(),name))){
                                ref_name=await name["substr"].call(name,2)
                            } else {
                                ref_name=name
                            };
                            ref_name=await first(await (await Environment.get_global("get_object_path"))(ref_name));
                            return await async function(){
                                if (check_true (await (async function(){
                                    let __targ__38=(ctx && ctx["ambiguous"]);
                                    if (__targ__38){
                                         return(__targ__38)[ref_name]
                                    } 
                                })())) {
                                    return true
                                } else if (check_true ((ctx && ctx["parent"]))) {
                                    return await is_ambiguous_ques_((ctx && ctx["parent"]),ref_name)
                                }
                            } ()
                        }
                    }
                } ()
            };
            set_ambiguous=async function(ctx,name) {
                return await async function(){
                    let __target_obj__39=(ctx && ctx["ambiguous"]);
                    __target_obj__39[name]=true;
                    return __target_obj__39;
                    
                }()
            };
            unset_ambiguous=async function(ctx,name) {
                return await (await Environment.get_global("delete_prop"))((ctx && ctx["ambiguous"]),name)
            };
            invalid_js_ref_chars="+?-%&^#!*[]~{}/|";
            invalid_js_ref_chars_regex=new RegExp("[/\%\+\[\>\?\<\\}\{&\#\^\=\~\*\!\)\(\-]+","g");
            check_invalid_js_ref=async function(symname) {
                return await async function(){
                    if (check_true (await not((symname instanceof String || typeof symname==='string')))) {
                        return false
                    } else if (check_true (((symname instanceof String || typeof symname==='string')&& (await length(symname)>2)&& await starts_with_ques_(await (async function(){
                         return "=:" 
                    })(),symname)))) {
                        return (await length(await (await Environment.get_global("scan_str"))(invalid_js_ref_chars_regex,await symname["substr"].call(symname,2)))>0)
                    } else {
                        return (await length(await (await Environment.get_global("scan_str"))(invalid_js_ref_chars_regex,symname))>0)
                    }
                } ()
            };
            let sanitize_js_ref_name=await __sanitize_js_ref_name__3();
            ;
            find_in_context=async function(ctx,name) {
                let symname;
                let ref;
                let __is_literal_ques___40= async function(){
                    return (await is_number_ques_(name)|| (await not(ref)&& (name instanceof String || typeof name==='string'))|| ("nil"===symname)|| ("null"===symname)|| (ref&& ("undefined"===symname))|| (ref&& ("else"===symname))|| (ref&& ("catch"===symname))|| (true===name)|| (false===name))
                };
                let special;
                let local;
                let global;
                let val;
                {
                    symname=await (async function(){
                         return await async function(){
                            if (check_true (((name instanceof String || typeof name==='string')&& (await length(name)>2)&& await starts_with_ques_(await (async function(){
                                 return "=:" 
                            })(),name)))) {
                                return await name["substr"].call(name,2)
                            } else if (check_true ((name instanceof String || typeof name==='string'))) {
                                return name
                            } else {
                                {
                                    if (check_true ((name===null))){
                                        {
                                            name=await (async function(){
                                                 return "=:nil" 
                                            })()
                                        }
                                    };
                                    return "null"
                                }
                            }
                        } () 
                    })();
                    ref=(symname&& ((name instanceof String || typeof name==='string')&& (await length(name)>2)&& await starts_with_ques_(await (async function(){
                         return "=:" 
                    })(),name)));
                    let is_literal_ques_=await __is_literal_ques___40();
                    ;
                    special=(ref&& symname&& await contains_ques_(symname,await conj(["unquotem","quotem"],await (await Environment.get_global("keys"))(op_lookup))));
                    local=(await not(special)&& await not(is_literal_ques_)&& symname&& ref&& await get_ctx_val(ctx,symname));
                    global=(await not(special)&& await not(is_literal_ques_)&& ref&& symname&& await get_lisp_ctx(ctx,symname));
                    val=await (async function(){
                         return await async function(){
                            if (check_true (is_literal_ques_)) {
                                return name
                            } else if (check_true ((name instanceof Array))) {
                                return name
                            } else if (check_true ((name instanceof Object))) {
                                return name
                            } else if (check_true (special)) {
                                return name
                            } else if (check_true (local)) {
                                return local
                            } else if (check_true ((await not((global===undefined))&& await not((global===NOT_FOUND))))) {
                                return global
                            } else if (check_true ((symname===name))) {
                                return name
                            }
                        } () 
                    })();
                    return {
                        type:await (async function(){
                             return await async function(){
                                if (check_true ((name instanceof Array))) {
                                    return "arr"
                                } else if (check_true (name instanceof Element)) {
                                    return "dom"
                                } else if (check_true ((name instanceof Object))) {
                                    return await sub_type(name)
                                } else if (check_true (special)) {
                                    return "special"
                                } else if (check_true (is_literal_ques_)) {
                                    return "literal"
                                } else if (check_true (local)) {
                                    return await sub_type(local)
                                } else if (check_true (await not((undefined==global)))) {
                                    return await sub_type(global)
                                } else if (check_true ((ref&& symname))) {
                                    return "unbound"
                                } else if (check_true ((name===undefined))) {
                                    return "literal"
                                } else {
                                    {
                                        await error_log("find_in_context: unknown type: ",name);
                                        debugger;
                                        ;
                                        return "??"
                                    }
                                }
                            } () 
                        })(),name:await (async function(){
                             return await async function(){
                                if (check_true ((symname&& ref))) {
                                    return await sanitize_js_ref_name(symname)
                                } else if (check_true ((false&& is_literal_ques_&& (val instanceof String || typeof val==='string')))) {
                                    return await sanitize_js_ref_name(name)
                                } else if (check_true (is_literal_ques_)) {
                                    if (check_true (ref)){
                                        return await sanitize_js_ref_name(name)
                                    } else {
                                        return name
                                    }
                                } else {
                                    return null
                                }
                            } () 
                        })(),val:await (async function(){
                            if (check_true ((val===undefined))){
                                return undefined
                            } else {
                                return val
                            }
                        })(),ref:await (async function(){
                            if (check_true (ref)){
                                return true
                            } else {
                                return false
                            }
                        })(),local:(local|| null),global:((global&& await not((NOT_FOUND===global)))|| null)
                    }
                }
            };
            source_chain=async function(cpath,tree,sources) {
                if (check_true (((cpath instanceof Array)&& tree))){
                    {
                        let source;
                        sources=(sources|| []);
                        source=null;
                        cpath=await (await Environment.get_global("chop"))(cpath);
                        source=await (await Environment.get_global("as_lisp"))(await (await Environment.get_global("resolve_path"))(cpath,tree));
                        if (check_true (((source && source.length)>80))){
                            source=await add(await source["substr"].call(source,0,80),"...")
                        };
                        if (check_true (await not(await (await Environment.get_global("blank?"))(source)))){
                            {
                                (sources).push(source)
                            }
                        };
                        if (check_true ((((cpath && cpath.length)>0)&& ((sources && sources.length)<4)))){
                            await source_chain(cpath,tree,sources)
                        };
                        return sources
                    }
                }
            };
            source_from_tokens=async function(tokens,tree,collect_parents_ques_) {
                return await async function(){
                    if (check_true (((tokens && tokens["path"])&& collect_parents_ques_))) {
                        return await source_chain((tokens && tokens["path"]),tree)
                    } else if (check_true ((tree instanceof String || typeof tree==='string'))) {
                        return await (await Environment.get_global("as_lisp"))(tree)
                    } else if (check_true ((tokens && tokens["path"]))) {
                        return await (await Environment.get_global("as_lisp"))(await (await Environment.get_global("resolve_path"))((tokens && tokens["path"]),tree))
                    } else if (check_true (((tokens instanceof Array)&& (tokens && tokens["0"] && tokens["0"]["path"])&& collect_parents_ques_))) {
                        return await source_chain((tokens && tokens["0"] && tokens["0"]["path"]),tree)
                    } else if (check_true (((tokens instanceof Array)&& (tokens && tokens["0"] && tokens["0"]["path"])))) {
                        return await (await Environment.get_global("as_lisp"))(await (await Environment.get_global("resolve_path"))(await (await Environment.get_global("chop"))((tokens && tokens["0"] && tokens["0"]["path"])),tree))
                    } else if (check_true (((undefined===tokens)&& await not((undefined===tree))))) {
                        return await (await Environment.get_global("as_lisp"))(tree)
                    } else {
                        {
                            if (check_true (await verbosity(ctx))){
                                {
                                    await console.warn("source_from_tokens: unable to determine source path from: ",await (async function(){
                                         return await clone(tokens) 
                                    })())
                                }
                            };
                            return ""
                        }
                    }
                } ()
            };
            source_comment=async function(tokens) {
                return {
                    comment:await source_from_tokens(tokens,expanded_tree)
                }
            };
            NOT_FOUND="__!NOT_FOUND!__";
            THIS_REFERENCE=async function() {
                return "this"
            };
            NOT_FOUND_THING=async function() {
                return true
            };
            get_lisp_ctx_log=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    return log
                } else {
                    return await defclog({
                        prefix:"get_lisp_ctx",color:"darkgreen",background:"#A0A0A0"
                    })
                }
            })();
            get_lisp_ctx=async function(ctx,name) {
                if (check_true (await not((name instanceof String || typeof name==='string')))){
                    throw new Error("Compiler Error: get_lisp_ctx passed a non string identifier");
                    
                } else {
                    {
                        let comps;
                        let cannot_be_js_global;
                        let ref_name;
                        let ref_type;
                        comps=await (await Environment.get_global("get_object_path"))(name);
                        cannot_be_js_global=await check_invalid_js_ref((comps && comps["0"]));
                        ref_name=(comps).shift();
                        ref_type=await (async function(){
                            if (check_true ((ref_name==="this"))){
                                return THIS_REFERENCE
                            } else {
                                {
                                    let global_ref=await (async function(){
                                        let __targ__41=(root_ctx && root_ctx["defined_lisp_globals"]);
                                        if (__targ__41){
                                             return(__targ__41)[ref_name]
                                        } 
                                    })();
                                    ;
                                    if (check_true (((undefined==global_ref)|| (global_ref==="statement")))){
                                        return await Environment["get_global"].call(Environment,ref_name,NOT_FOUND_THING,cannot_be_js_global)
                                    } else {
                                        return global_ref
                                    }
                                }
                            }
                        })();
                        if (check_true ((await not((NOT_FOUND_THING===ref_type))&& await not(await contains_ques_(ref_name,standard_types))))){
                            {
                                await referenced_global_symbols["add"].call(referenced_global_symbols,ref_name);
                                {
                                    let it;
                                    it=await get_ctx(ctx,"__GLOBALS__");
                                    if (check_true (it)){
                                        await it["add"].call(it,ref_name)
                                    } else {
                                        
                                    }
                                }
                            }
                        };
                        if (check_true (await verbosity(root_ctx))){
                            {
                                await (async function(){
                                    let __array_op_rval__42=get_lisp_ctx_log;
                                     if (__array_op_rval__42 instanceof Function){
                                        return await __array_op_rval__42("name: ",name,"type: ",ref_type,"components: ",comps) 
                                    } else {
                                        return [__array_op_rval__42,"name: ",name,"type: ",ref_type,"components: ",comps]
                                    }
                                })()
                            }
                        };
                        return await async function(){
                            if (check_true ((NOT_FOUND_THING===ref_type))) {
                                return undefined
                            } else if (check_true ((ref_type===THIS_REFERENCE))) {
                                return ref_type
                            } else if (check_true (((comps && comps.length)===0))) {
                                return ref_type
                            } else if (check_true ((((comps && comps.length)===1)&& (ref_type instanceof Object)&& await contains_ques_((comps && comps["0"]),await (async function(){
                                 return await object_methods(ref_type) 
                            })())))) {
                                return ref_type[(comps && comps["0"])]
                            } else if (check_true ((ref_type instanceof Function&& await is_ambiguous_ques_(root_ctx,ref_name)))) {
                                return ref_type
                            } else if (check_true ((ref_type instanceof Array))) {
                                return ref_type
                            } else if (check_true ((ref_type==="array"))) {
                                return []
                            } else if (check_true ((ref_type instanceof Object))) {
                                return await (await Environment.get_global("resolve_path"))(comps,ref_type)
                            } else if (check_true (((typeof ref_type==="object")&& await contains_ques_((comps && comps["0"]),await Object["keys"].call(Object,ref_type))))) {
                                {
                                    await (async function(){
                                         let __test_condition__43=async function() {
                                            return ((ref_type==undefined)|| ((comps && comps.length)>0))
                                        };
                                        let __body_ref__44=async function() {
                                            return ref_type=ref_type[(comps).shift()]
                                        };
                                        let __BREAK__FLAG__=false;
                                        while(await __test_condition__43()) {
                                            await __body_ref__44();
                                             if(__BREAK__FLAG__) {
                                                 break;
                                                
                                            }
                                        } ;
                                        
                                    })();
                                    return ref_type
                                }
                            } else if (check_true ((ref_type==="objliteral"))) {
                                return ref_type
                            } else {
                                {
                                    debugger;
                                    ;
                                    await (async function(){
                                        let __array_op_rval__45=get_lisp_ctx_log;
                                         if (__array_op_rval__45 instanceof Function){
                                            return await __array_op_rval__45("symbol not found: ",name,ref_name,ref_type,cannot_be_js_global) 
                                        } else {
                                            return [__array_op_rval__45,"symbol not found: ",name,ref_name,ref_type,cannot_be_js_global]
                                        }
                                    })();
                                    return undefined
                                }
                            }
                        } ()
                    }
                }
            };
            get_val=async function(token,ctx) {
                return await async function(){
                    if (check_true ((token && token["ref"]))) {
                        {
                            let comps=((token && token.name)).split(".");
                            ;
                            if (check_true (await verbosity(ctx))){
                                {
                                    console.log("get_val: reference: ",await (async function(){
                                         return await (await Environment.get_global("safe_access"))(token,ctx,sanitize_js_ref_name) 
                                    })())
                                }
                            };
                            let ref_name=await (async function(){
                                if (check_true (((await safety_level(ctx)>1)&& ((comps && comps.length)>1)))){
                                    return await (await Environment.get_global("safe_access"))(token,ctx,sanitize_js_ref_name)
                                } else {
                                    return await sanitize_js_ref_name(await (async function(){
                                         return await (await Environment.get_global("expand_dot_accessor"))((token && token.name),ctx) 
                                    })())
                                }
                            })();
                            ;
                            return await async function(){
                                if (check_true ((await get_ctx(ctx,"__IN_QUOTEM__")&& await not(await get_ctx(ctx,"__IN_LAMBDA__"))))) {
                                    return await get_ctx(ctx,ref_name)
                                } else if (check_true ((false&& await get_ctx(ctx,"__IN_QUOTEM__")&& await get_ctx(ctx,"__IN_LAMBDA__")))) {
                                    return ("await ctx_access(\""+ ref_name+ "\")")
                                } else {
                                    return ref_name
                                }
                            } ()
                        }
                    } else {
                        return (token && token["val"])
                    }
                } ()
            };
            has_lisp_globals=false;
            root_ctx=await new_ctx(((opts && opts["ctx"])));
            tokenize_object=async function(obj,ctx,_path) {
                let ser=null;
                ;
                try {
                    ser=await JSON.stringify(obj)
                } catch (__exception__46) {
                    if (__exception__46 instanceof TypeError) {
                        let e=__exception__46;
                        {
                            {
                                await console.warn("compiler: cannot tokenize: ",obj,e);
                                ser=""
                            }
                        }
                    } else throw __exception__46;
                    
                };
                _path=(_path|| []);
                if (check_true ((ser==="{}"))){
                    {
                        return {
                            type:"object",ref:false,val:"{}",name:"{}",__token__:true,path:_path
                        }
                    }
                } else {
                    return await (async function() {
                        let __for_body__49=async function(pset) {
                            return {
                                type:"keyval",val:await tokenize(pset,ctx,"path:",await add(_path,(pset && pset["0"]))),ref:false,name:(""+ await (await Environment.get_global("as_lisp"))((pset && pset["0"]))),__token__:true
                            }
                        };
                        let __array__50=[],__elements__48=await (await Environment.get_global("pairs"))(obj);
                        let __BREAK__FLAG__=false;
                        for(let __iter__47 in __elements__48) {
                            __array__50.push(await __for_body__49(__elements__48[__iter__47]));
                            if(__BREAK__FLAG__) {
                                 __array__50.pop();
                                break;
                                
                            }
                        }return __array__50;
                         
                    })()
                }
            };
            tokenize_quote=async function(args,_path) {
                return await async function(){
                    if (check_true (((args && args["0"])==="=:quote"))) {
                        return {
                            type:"arr",__token__:true,source:await (await Environment.get_global("as_lisp"))(args),val:await conj(await (async function(){
                                 return [{
                                    type:"special",val:await (async function(){
                                         return "=:quote" 
                                    })(),ref:true,name:"quote",__token__:true
                                }] 
                            })(),await args["slice"].call(args,1)),ref:((args instanceof String || typeof args==='string')&& (await length(args)>2)&& await starts_with_ques_(await (async function(){
                                 return "=:" 
                            })(),args)),name:null,path:_path
                        }
                    } else if (check_true (((args && args["0"])==="=:quotem"))) {
                        return {
                            type:"arr",__token__:true,source:await (await Environment.get_global("as_lisp"))(args),val:await conj(await (async function(){
                                 return [{
                                    type:"special",path:await conj(_path,[0]),val:await (async function(){
                                         return "=:quotem" 
                                    })(),ref:true,name:"quotem",__token__:true
                                }] 
                            })(),await args["slice"].call(args,1)),ref:((args instanceof String || typeof args==='string')&& (await length(args)>2)&& await starts_with_ques_(await (async function(){
                                 return "=:" 
                            })(),args)),name:null,path:_path
                        }
                    } else {
                        return {
                            type:"arr",__token__:true,source:await (await Environment.get_global("as_lisp"))(args),val:await conj(await (async function(){
                                 return [{
                                    type:"special",val:await (async function(){
                                         return "=:quotel" 
                                    })(),ref:true,name:"quotel",__token__:true
                                }] 
                            })(),await args["slice"].call(args,1)),ref:((args instanceof String || typeof args==='string')&& (await length(args)>2)&& await starts_with_ques_(await (async function(){
                                 return "=:" 
                            })(),args)),name:null,path:_path
                        }
                    }
                } ()
            };
            tokenize=async function(args,ctx,_path,_suppress_comptime_eval) {
                let argtype;
                let rval;
                let qval;
                let idx;
                let tobject;
                let argdetails;
                let argvalue;
                let is_ref;
                argtype=null;
                rval=null;
                ctx=ctx;
                _path=(_path|| []);
                qval=null;
                idx=-1;
                tobject=null;
                argdetails=null;
                argvalue=null;
                is_ref=null;
                ;
                if (check_true ((null==ctx))){
                    {
                        await console.error("tokenize: nil ctx passed: ",await (async function(){
                             return await clone(args) 
                        })());
                        throw new ReferenceError("nil/undefined ctx passed to tokenize");
                        
                    }
                };
                if (check_true (((args instanceof Array)&& await not(_suppress_comptime_eval)))){
                    {
                        args=await compile_time_eval(ctx,args,_path);
                        await async function(){
                            if (check_true (((_path && _path.length)>1))) {
                                {
                                    tobject=await (await Environment.get_global("resolve_path"))(await (await Environment.get_global("chop"))(_path),expanded_tree);
                                    if (check_true (tobject)){
                                        {
                                            return await async function(){
                                                tobject[await last(_path)]=args;
                                                return tobject;
                                                
                                            }()
                                        }
                                    }
                                }
                            } else if (check_true (((_path && _path.length)===1))) {
                                {
                                    await async function(){
                                        expanded_tree[await first(_path)]=args;
                                        return expanded_tree;
                                        
                                    }()
                                }
                            } else {
                                expanded_tree=args
                            }
                        } ()
                    }
                };
                return await async function(){
                    if (check_true (((args instanceof String || typeof args==='string')|| await is_number_ques_(args)|| ((args===true)|| (args===false))))) {
                        return await first(await tokenize([args],ctx,_path,true))
                    } else if (check_true (((args instanceof Array)&& (((args && args["0"])==="=:quotem")|| ((args && args["0"])==="=:quote")|| ((args && args["0"])==="=:quotel"))))) {
                        {
                            rval=await tokenize_quote(args,_path);
                            return rval
                        }
                    } else if (check_true (((args instanceof Array)&& await not(await get_ctx_val(ctx,"__IN_LAMBDA__"))&& ((args && args["0"])==="=:iprogn")))) {
                        {
                            rval=await compile_toplevel(args,ctx);
                            return await tokenize(rval,ctx,_path)
                        }
                    } else if (check_true ((await not((args instanceof Array))&& (args instanceof Object)))) {
                        return await first(await tokenize([args],ctx,await add(_path,0)))
                    } else {
                        {
                            if (check_true ((((args && args["0"])==="=:fn")|| ((args && args["0"])==="=:function")|| ((args && args["0"])==="=:=>")))){
                                {
                                    ctx=await new_ctx(ctx);
                                    await set_ctx(ctx,"__IN_LAMBDA__",true)
                                }
                            };
                            return await (async function() {
                                let __for_body__55=async function(arg) {
                                    idx+=1;
                                    try {
                                        argdetails=await find_in_context(ctx,arg)
                                    } catch (__exception__57) {
                                        if (__exception__57 instanceof LispSyntaxError) {
                                            let e=__exception__57;
                                            {
                                                {
                                                    is_error={
                                                        error:(e && e["name"]),source_name:source_name,message:(e && e.message),form:await (await Environment.get_global("resolve_path"))(_path,expanded_tree),parent_forms:((await (await Environment.get_global("chop"))(_path)&& await (await Environment.get_global("resolve_path"))(await (await Environment.get_global("chop"))(_path),expanded_tree))|| []),invalid:true
                                                    };
                                                    await async function(){
                                                        e["details"]=is_error;
                                                        e["handled"]=true;
                                                        return e;
                                                        
                                                    }();
                                                    await console.error(is_error);
                                                    debugger;
                                                    ;
                                                    throw e;
                                                    
                                                }
                                            }
                                        } else throw __exception__57;
                                        
                                    };
                                    argvalue=(argdetails && argdetails["val"]);
                                    argtype=(argdetails && argdetails["type"]);
                                    is_ref=(argdetails && argdetails["ref"]);
                                    return await async function(){
                                        if (check_true ((await sub_type(arg)==="array"))) {
                                            return {
                                                type:"arr",__token__:true,val:await tokenize(arg,ctx,await add(_path,idx)),ref:is_ref,name:null,path:await add(_path,idx)
                                            }
                                        } else if (check_true ((argtype==="Function"))) {
                                            return {
                                                type:"fun",__token__:true,val:arg,ref:is_ref,name:(""+ await (await Environment.get_global("as_lisp"))(arg)),path:await add(_path,idx)
                                            }
                                        } else if (check_true ((argtype==="AsyncFunction"))) {
                                            return {
                                                type:"asf",__token__:true,val:arg,ref:is_ref,name:(""+ await (await Environment.get_global("as_lisp"))(arg)),path:await add(_path,idx)
                                            }
                                        } else if (check_true ((argtype==="array"))) {
                                            return {
                                                type:"array",__token__:true,val:arg,ref:is_ref,name:(""+ await (await Environment.get_global("as_lisp"))(arg)),path:await add(_path,idx)
                                            }
                                        } else if (check_true ((argtype==="Number"))) {
                                            return {
                                                type:"num",__token__:true,val:argvalue,ref:is_ref,name:(""+ await (await Environment.get_global("as_lisp"))(arg)),path:await add(_path,idx)
                                            }
                                        } else if (check_true (((argtype==="String")&& is_ref))) {
                                            return {
                                                type:"arg",__token__:true,val:argvalue,ref:is_ref,name:await clean_quoted_reference((""+ await (await Environment.get_global("as_lisp"))(arg))),global:(argdetails && argdetails["global"]),local:(argdetails && argdetails["local"]),path:await add(_path,idx)
                                            }
                                        } else if (check_true ((argtype==="String"))) {
                                            return {
                                                type:"literal",__token__:true,val:argvalue,ref:is_ref,name:await clean_quoted_reference((""+ await (await Environment.get_global("as_lisp"))(arg))),global:(argdetails && argdetails["global"]),path:await add(_path,idx)
                                            }
                                        } else if (check_true ((argtype==="dom"))) {
                                            return {
                                                type:"null",__token__:true,val:null,ref:is_ref,name:await clean_quoted_reference((""+ await (await Environment.get_global("as_lisp"))(arg))),global:(argdetails && argdetails["global"]),path:await add(_path,idx)
                                            }
                                        } else if (check_true ((arg instanceof Object))) {
                                            {
                                                return {
                                                    type:"objlit",__token__:true,val:await tokenize_object(arg,ctx,await add(_path,idx)),ref:is_ref,name:null,path:await add(_path,idx)
                                                }
                                            }
                                        } else if (check_true (((argtype==="literal")&& is_ref&& ((""+ await (await Environment.get_global("as_lisp"))(arg))==="nil")))) {
                                            return {
                                                type:"null",__token__:true,val:null,ref:true,name:"null",path:await add(_path,idx)
                                            }
                                        } else if (check_true (((argtype==="unbound")&& is_ref&& (null==argvalue)))) {
                                            return {
                                                type:"arg",__token__:true,val:arg,ref:true,name:await clean_quoted_reference((""+ await (await Environment.get_global("as_lisp"))(arg))),path:await add(_path,idx)
                                            }
                                        } else if (check_true (((argtype==="unbound")&& is_ref))) {
                                            return {
                                                type:await sub_type(argvalue),__token__:true,val:argvalue,ref:true,name:await clean_quoted_reference(await sanitize_js_ref_name((""+ await (await Environment.get_global("as_lisp"))(arg)))),path:await add(_path,idx)
                                            }
                                        } else {
                                            return {
                                                type:argtype,__token__:true,val:argvalue,ref:is_ref,name:await clean_quoted_reference((""+ await (await Environment.get_global("as_lisp"))(arg))),global:(argdetails && argdetails["global"]),local:(argdetails && argdetails["local"]),path:await add(_path,idx)
                                            }
                                        }
                                    } ()
                                };
                                let __array__56=[],__elements__54=args;
                                let __BREAK__FLAG__=false;
                                for(let __iter__53 in __elements__54) {
                                    __array__56.push(await __for_body__55(__elements__54[__iter__53]));
                                    if(__BREAK__FLAG__) {
                                         __array__56.pop();
                                        break;
                                        
                                    }
                                }return __array__56;
                                 
                            })()
                        }
                    }
                } ()
            };
            comp_time_log=await (async function(){
                 return await defclog({
                    prefix:"compile_time_eval",background:"#C0C0C0",color:"darkblue"
                }) 
            })();
            compile_time_eval=async function(ctx,lisp_tree,path) {
                if (check_true (((lisp_tree instanceof Array)&& (((lisp_tree && lisp_tree["0"]) instanceof String || typeof (lisp_tree && lisp_tree["0"])==='string')&& (await length((lisp_tree && lisp_tree["0"]))>2)&& await starts_with_ques_(await (async function(){
                     return "=:" 
                })(),(lisp_tree && lisp_tree["0"])))&& await (async function(){
                    let it;
                    it=await Environment["symbol_definition"].call(Environment,await (lisp_tree && lisp_tree["0"])["substr"].call((lisp_tree && lisp_tree["0"]),2));
                    if (check_true (it)){
                        return await (await Environment.get_global("resolve_path"))(["eval_when","compile_time"],it)
                    } else {
                        return 
                    }
                })()))){
                    {
                        let ntree;
                        let precompile_function;
                        ntree=null;
                        precompile_function=await Environment["get_global"].call(Environment,await (lisp_tree && lisp_tree["0"])["substr"].call((lisp_tree && lisp_tree["0"]),2));
                        if (check_true (await verbosity(ctx))){
                            {
                                await comp_time_log(path,"->",await (lisp_tree && lisp_tree["0"])["substr"].call((lisp_tree && lisp_tree["0"]),2),lisp_tree,"to function: ",await lisp_tree["slice"].call(lisp_tree,1))
                            }
                        };
                        try {
                            ntree=await (async function(){
                                let __apply_args__60=await (async function(){
                                     return await lisp_tree["slice"].call(lisp_tree,1) 
                                })();
                                return ( precompile_function).apply(this,__apply_args__60)
                            })()
                        } catch (__exception__59) {
                            if (__exception__59 instanceof Error) {
                                let e=__exception__59;
                                {
                                    {
                                        await async function(){
                                            e["handled"]=true;
                                            return e;
                                            
                                        }();
                                        (errors).push({
                                            error:(e && e.name),message:(e && e.message),source_name:source_name,precompilation:true,form:lisp_tree,parent_forms:[],invalid:true,stack:(e && e.stack)
                                        });
                                        throw e;
                                        
                                    }
                                }
                            }
                        };
                        if (check_true ((null==ntree))){
                            (warnings).push(("compile time function "+ await (lisp_tree && lisp_tree["0"])["substr"].call((lisp_tree && lisp_tree["0"]),2)+ " returned nil"))
                        } else {
                            {
                                ntree=await (async function(){
                                     return await do_deferred_splice(ntree) 
                                })();
                                if (check_true (await not((await JSON.stringify(ntree)===await JSON.stringify(lisp_tree))))){
                                    {
                                        ntree=await compile_time_eval(ctx,ntree,path)
                                    }
                                };
                                if (check_true (await verbosity(ctx))){
                                    {
                                        await comp_time_log(await (lisp_tree && lisp_tree["0"])["substr"].call((lisp_tree && lisp_tree["0"]),2),"<- lisp: ",await (await Environment.get_global("as_lisp"))(ntree))
                                    }
                                }
                            }
                        };
                        return ntree
                    }
                } else {
                    return lisp_tree
                }
            };
            infix_ops=async function(tokens,ctx,opts) {
                let op_translation;
                let math_op_a;
                let math_op;
                let idx;
                let stmts;
                let declaration;
                let symbol_ctx_val;
                let is_overloaded;
                let token;
                let add_operand;
                let acc;
                op_translation={
                    or:"||",and:"&&"
                };
                ctx=await new_ctx(ctx);
                math_op_a=await (async function(){
                    let __targ__63=await first(tokens);
                    if (__targ__63){
                         return(__targ__63)["name"]
                    } 
                })();
                math_op=(op_translation[math_op_a]|| math_op_a);
                idx=0;
                stmts=null;
                declaration=await (async function(){
                    if (check_true (((tokens && tokens["1"] && tokens["1"]["name"]) instanceof String || typeof (tokens && tokens["1"] && tokens["1"]["name"])==='string'))){
                        return await get_declarations(ctx,(tokens && tokens["1"] && tokens["1"]["name"]),await not((tokens && tokens["1"] && tokens["1"]["ref"])))
                    } else {
                        return null
                    }
                })();
                symbol_ctx_val=await (async function(){
                    if (check_true (((tokens && tokens["1"] && tokens["1"]["ref"])&& ((tokens && tokens["1"] && tokens["1"]["name"]) instanceof String || typeof (tokens && tokens["1"] && tokens["1"]["name"])==='string')))){
                        return await get_ctx_val(ctx,(tokens && tokens["1"] && tokens["1"]["name"]))
                    }
                })();
                is_overloaded=false;
                token=null;
                add_operand=async function() {
                    if (check_true (((idx>1)&& (idx<((tokens && tokens.length)- 0))))){
                        {
                            (acc).push(math_op);
                            return (acc).push(" ")
                        }
                    }
                };
                acc=await (async function(){
                     return [{
                        ctype:"expression"
                    }] 
                })();
                await set_ctx(ctx,"__COMP_INFIX_OPS__",true);
                if (check_true (((symbol_ctx_val instanceof Array)&& (symbol_ctx_val && symbol_ctx_val["0"] && symbol_ctx_val["0"]["ctype"])))){
                    {
                        symbol_ctx_val=(symbol_ctx_val && symbol_ctx_val["0"] && symbol_ctx_val["0"]["ctype"])
                    }
                };
                if (check_true (((((declaration && declaration["type"])===Array)|| ((declaration && declaration["type"])===Object)|| (symbol_ctx_val==="objliteral")|| (symbol_ctx_val===Expression)|| (symbol_ctx_val===ArgumentType)|| ((tokens && tokens["1"] && tokens["1"]["type"])==="objlit")|| ((tokens && tokens["1"] && tokens["1"]["type"])==="arr"))&& (math_op==="+")))){
                    {
                        is_overloaded=true
                    }
                };
                if (check_true (is_overloaded)){
                    {
                        await async function(){
                            tokens[0]={
                                type:"function",val:await add(await (async function(){
                                     return "=:" 
                                })(),"add"),name:"add",ref:true
                            };
                            return tokens;
                            
                        }();
                        await async function(){
                            ctx["block_step"]=0;
                            return ctx;
                            
                        }();
                        stmts=await compile_wrapper_fn(tokens,ctx);
                        return stmts
                    }
                } else {
                    {
                        (acc).push("(");
                        await (async function(){
                             let __test_condition__66=async function() {
                                return (idx<((tokens && tokens.length)- 1))
                            };
                            let __body_ref__67=async function() {
                                idx+=1;
                                token=tokens[idx];
                                await add_operand();
                                await async function(){
                                    ctx["block_step"]=0;
                                    return ctx;
                                    
                                }();
                                return (acc).push(await compile_wrapper_fn(token,ctx))
                            };
                            let __BREAK__FLAG__=false;
                            while(await __test_condition__66()) {
                                await __body_ref__67();
                                 if(__BREAK__FLAG__) {
                                     break;
                                    
                                }
                            } ;
                            
                        })();
                        (acc).push(")");
                        return acc
                    }
                }
            };
            compile_set_prop=async function(tokens,ctx) {
                let acc;
                let wrapper;
                let stmt;
                let preamble;
                let token;
                let complicated;
                let target;
                let target_reference;
                let idx;
                acc=[];
                wrapper=[];
                stmt=null;
                preamble=await calling_preamble(ctx);
                token=await second(tokens);
                ctx=await new_ctx(ctx);
                complicated=await is_complex_ques_((token && token["val"]));
                target=await (async function(){
                    if (check_true (complicated)){
                        return await compile_wrapper_fn((token && token["val"]),ctx)
                    } else {
                        return await compile(token,ctx)
                    }
                })();
                target_reference=await gen_temp_name("target_obj");
                idx=1;
                ;
                await set_new_completion_scope(ctx);
                await (async function() {
                    let __for_body__71=async function(t) {
                        return (wrapper).push(t)
                    };
                    let __array__72=[],__elements__70=[(preamble && preamble["0"])," ",(preamble && preamble["1"])," ",(preamble && preamble["3"]),"function","()","{"];
                    let __BREAK__FLAG__=false;
                    for(let __iter__69 in __elements__70) {
                        __array__72.push(await __for_body__71(__elements__70[__iter__69]));
                        if(__BREAK__FLAG__) {
                             __array__72.pop();
                            break;
                            
                        }
                    }return __array__72;
                     
                })();
                if (check_true (await not((target instanceof String || typeof target==='string')))){
                    await (async function() {
                        let __for_body__75=async function(t) {
                            return (wrapper).push(t)
                        };
                        let __array__76=[],__elements__74=["let"," ",target_reference,"=",target,";"];
                        let __BREAK__FLAG__=false;
                        for(let __iter__73 in __elements__74) {
                            __array__76.push(await __for_body__75(__elements__74[__iter__73]));
                            if(__BREAK__FLAG__) {
                                 __array__76.pop();
                                break;
                                
                            }
                        }return __array__76;
                         
                    })()
                } else {
                    {
                        target_reference=target
                    }
                };
                await (async function(){
                     let __test_condition__77=async function() {
                        return (idx<((tokens && tokens.length)- 1))
                    };
                    let __body_ref__78=async function() {
                        idx+=1;
                        (acc).push(target_reference);
                        token=tokens[idx];
                        (acc).push("[");
                        stmt=await compile_as_call(token,ctx);
                        (acc).push(stmt);
                        (acc).push("]");
                        idx+=1;
                        (acc).push("=");
                        token=tokens[idx];
                        if (check_true ((null==token))){
                            throw new SyntaxError("set_prop: odd number of arguments");
                            
                        };
                        stmt=await compile_wrapper_fn(token,ctx);
                        (acc).push(stmt);
                        return (acc).push(";")
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__77()) {
                        await __body_ref__78();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                (wrapper).push(acc);
                (wrapper).push("return");
                (wrapper).push(" ");
                (wrapper).push(target_reference);
                (wrapper).push(";");
                (wrapper).push("}");
                (wrapper).push((preamble && preamble["4"]));
                (wrapper).push("()");
                return wrapper
            };
            compile_prop=async function(tokens,ctx) {
                if (check_true (await not(((tokens && tokens.length)===3)))){
                    {
                        throw new SyntaxError("prop requires exactly 2 arguments");
                        
                    }
                } else {
                    {
                        let acc;
                        let target;
                        let target_val;
                        let preamble;
                        let idx_key;
                        acc=[];
                        target=await compile_wrapper_fn(await second(tokens),ctx);
                        target_val=null;
                        preamble=await calling_preamble(ctx);
                        idx_key=await compile_wrapper_fn(tokens[2],ctx);
                        ;
                        if (check_true ((await safety_level(ctx)>1))){
                            return await async function(){
                                if (check_true ((target instanceof String || typeof target==='string'))) {
                                    {
                                        return await (async function(){
                                            let __array_op_rval__79=target;
                                             if (__array_op_rval__79 instanceof Function){
                                                return await __array_op_rval__79("[",idx_key,"]") 
                                            } else {
                                                return [__array_op_rval__79,"[",idx_key,"]"]
                                            }
                                        })()
                                    }
                                } else {
                                    {
                                        target_val=await gen_temp_name("targ");
                                        return [(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()","{","let"," ",target_val,"=",target,";","if"," ","(",target_val,")","{"," ","return","(",target_val,")","[",idx_key,"]","}"," ","}",")","()"]
                                    }
                                }
                            } ()
                        } else {
                            return ["(",target,")","[",idx_key,"]"]
                        }
                    }
                }
            };
            compile_elem=async function(token,ctx) {
                let rval;
                rval=null;
                await console.warn("compile_elem - deprecated: check call: ",token);
                if (check_true ((await is_complex_ques_((token && token["val"]))|| (((token && token["val"]) instanceof Array)&& ((token && token["val"] && token["val"]["0"] && token["val"]["0"]["name"])==="if"))))){
                    rval=await compile_wrapper_fn(token,ctx)
                } else {
                    rval=await (async function(){
                         return await compile(token,ctx) 
                    })()
                };
                if (check_true (await not((rval instanceof Array)))){
                    {
                        rval=await (async function(){
                            let __array_op_rval__80=rval;
                             if (__array_op_rval__80 instanceof Function){
                                return await __array_op_rval__80() 
                            } else {
                                return [__array_op_rval__80]
                            }
                        })()
                    }
                };
                return rval
            };
            inline_log=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    return log
                } else {
                    return await defclog({
                        prefix:"compile_inline:",background:"#404880",color:"white"
                    })
                }
            })();
            compile_inline=async function(tokens,ctx) {
                let rval;
                let stmt;
                let inline_fn;
                let has_literal_ques_;
                let wrap_style;
                let args;
                rval=null;
                stmt=null;
                inline_fn=null;
                has_literal_ques_=false;
                wrap_style=0;
                args=[];
                await (async function() {
                    let __for_body__83=async function(token) {
                        stmt=await compile_wrapper_fn(token,ctx);
                        return (args).push(stmt)
                    };
                    let __array__84=[],__elements__82=await tokens["slice"].call(tokens,1);
                    let __BREAK__FLAG__=false;
                    for(let __iter__81 in __elements__82) {
                        __array__84.push(await __for_body__83(__elements__82[__iter__81]));
                        if(__BREAK__FLAG__) {
                             __array__84.pop();
                            break;
                            
                        }
                    }return __array__84;
                     
                })();
                if (check_true (await verbosity())){
                    {
                        await inline_log("args: ",args)
                    }
                };
                if (check_true (await (async function(){
                    let __targ__85=(Environment && Environment["inlines"]);
                    if (__targ__85){
                         return(__targ__85)[(tokens && tokens["0"] && tokens["0"]["name"])]
                    } 
                })())){
                    {
                        inline_fn=await (async function(){
                            let __targ__86=(Environment && Environment["inlines"]);
                            if (__targ__86){
                                 return(__targ__86)[(tokens && tokens["0"] && tokens["0"]["name"])]
                            } 
                        })();
                        rval=await (async function(){
                            let __array_op_rval__87=inline_fn;
                             if (__array_op_rval__87 instanceof Function){
                                return await __array_op_rval__87(args,ctx) 
                            } else {
                                return [__array_op_rval__87,args,ctx]
                            }
                        })()
                    }
                } else {
                    throw new ReferenceError(("no source for named lib function "+ (tokens && tokens["0"] && tokens["0"]["name"])));
                    
                };
                return rval
            };
            compile_push=async function(tokens,ctx) {
                let acc;
                let place;
                let thing;
                acc=[];
                place=await compile_wrapper_fn((tokens && tokens["1"]),ctx);
                thing=await compile_wrapper_fn((tokens && tokens["2"]),ctx);
                return await (async function(){
                    let __array_op_rval__88=place;
                     if (__array_op_rval__88 instanceof Function){
                        return await __array_op_rval__88(".push","(",thing,")") 
                    } else {
                        return [__array_op_rval__88,".push","(",thing,")"]
                    }
                })()
            };
            compile_list=async function(tokens,ctx) {
                let acc;
                let compiled_values;
                acc=["["];
                compiled_values=[];
                await (async function() {
                    let __for_body__91=async function(t) {
                        return (compiled_values).push(await compile_wrapper_fn(t,ctx))
                    };
                    let __array__92=[],__elements__90=await tokens["slice"].call(tokens,1);
                    let __BREAK__FLAG__=false;
                    for(let __iter__89 in __elements__90) {
                        __array__92.push(await __for_body__91(__elements__90[__iter__89]));
                        if(__BREAK__FLAG__) {
                             __array__92.pop();
                            break;
                            
                        }
                    }return __array__92;
                     
                })();
                await push_as_arg_list(acc,compiled_values);
                (acc).push("]");
                return acc
            };
            compile_typeof=async function(tokens,ctx) {
                let local_details=await (async function(){
                    if (check_true ((tokens && tokens["1"] && tokens["1"]["ref"]))){
                        return await get_ctx_val(ctx,(tokens && tokens["1"] && tokens["1"]["name"]))
                    } else {
                        return null
                    }
                })();
                ;
                let fully_qualified=await (async function(){
                    if (check_true (((tokens && tokens["1"] && tokens["1"]["name"])&& await contains_ques_("/",(tokens && tokens["1"] && tokens["1"]["name"]))))){
                        return true
                    } else {
                        return false
                    }
                })();
                ;
                if (check_true (await verbosity(ctx))){
                    {
                        await console.log("compile_typeof -> ",tokens)
                    }
                };
                if (check_true (((tokens && tokens.length)<2))){
                    {
                        throw new SyntaxError("typeof requires 1 argument");
                        
                    }
                };
                return await async function(){
                    if (check_true (((tokens && tokens["1"] && tokens["1"]["ref"])&& local_details))) {
                        return ["typeof"," ",await (async function(){
                             return await compile((tokens && tokens["1"]),ctx) 
                        })()]
                    } else if (check_true (((tokens && tokens["1"] && tokens["1"]["ref"])&& await get_lisp_ctx(ctx,(tokens && tokens["1"] && tokens["1"]["name"]))))) {
                        return ["typeof"," ",await (async function(){
                             return await compile((tokens && tokens["1"]),ctx) 
                        })()]
                    } else if (check_true ((tokens && tokens["1"] && tokens["1"]["ref"]))) {
                        return ["(","typeof"," ","(","function","() { let __tval=",await compile_lisp_scoped_reference((tokens && tokens["1"] && tokens["1"]["name"]),ctx,true),"; if (__tval === ReferenceError) return undefined; else return __tval; }",")()",")"]
                    } else {
                        return ["typeof"," ",await compile_wrapper_fn((tokens && tokens["1"]),ctx)]
                    }
                } ()
            };
            compile_instanceof=async function(tokens,ctx) {
                let acc;
                acc=[];
                if (check_true (((tokens instanceof Array)&& ((tokens && tokens.length)===3)))){
                    return ["(",await (async function(){
                        if (check_true (await is_complex_ques_((tokens && tokens["1"])))){
                            return await compile_wrapper_fn((tokens && tokens["1"]),ctx)
                        } else {
                            return await compile((tokens && tokens["1"]),ctx)
                        }
                    })()," ","instanceof"," ",await (async function(){
                        if (check_true (await is_complex_ques_((tokens && tokens["1"])))){
                            return await compile_wrapper_fn((tokens && tokens["2"]),ctx)
                        } else {
                            return await compile((tokens && tokens["2"]),ctx)
                        }
                    })(),")"]
                } else {
                    throw new SyntaxError("instanceof requires 2 arguments");
                    
                }
            };
            compile_compare=async function(tokens,ctx) {
                let acc;
                let ops;
                let __operator__93= async function(){
                    return ops[await (async function(){
                        let __targ__95=await first(tokens);
                        if (__targ__95){
                             return(__targ__95)["name"]
                        } 
                    })()]
                };
                let left;
                let right;
                {
                    acc=await (async function(){
                         return [{
                            ctype:"expression"
                        }] 
                    })();
                    ctx=await new_ctx(ctx);
                    ops=await ( async function(){
                        let __obj__94=new Object();
                        __obj__94["eq"]="==";
                        __obj__94["=="]="===";
                        __obj__94["<"]="<";
                        __obj__94[">"]=">";
                        __obj__94["gt"]=">";
                        __obj__94["lt"]="<";
                        __obj__94["<="]="<=";
                        __obj__94[">="]=">=";
                        return __obj__94;
                        
                    })();
                    let operator=await __operator__93();
                    ;
                    left=tokens[1];
                    right=tokens[2];
                    if (check_true (((tokens && tokens.length)<3))){
                        {
                            throw new SyntaxError("comparison operation requires 2 arguments");
                            
                        }
                    };
                    await set_ctx(ctx,"__COMP_INFIX_OPS__",true);
                    (acc).push("(");
                    (acc).push(await (async function(){
                         return await compile(left,ctx) 
                    })());
                    (acc).push(operator);
                    (acc).push(await (async function(){
                         return await compile(right,ctx) 
                    })());
                    (acc).push(")");
                    return acc
                }
            };
            compile_assignment=async function(tokens,ctx) {
                let acc;
                let assignment_operator;
                let token;
                let assignment_value;
                let assignment_type;
                let wrap_as_function_ques_;
                let preamble;
                let comps;
                let sanitized;
                let target_details;
                let target;
                acc=[];
                assignment_operator=await (async function(){
                    let __targ__96=await first(tokens);
                    if (__targ__96){
                         return(__targ__96)["name"]
                    } 
                })();
                token=await second(tokens);
                assignment_value=null;
                assignment_type=null;
                wrap_as_function_ques_=null;
                preamble=await calling_preamble(ctx);
                comps=[];
                sanitized=await (async function(){
                    if (check_true (((token && token["ref"])&& (token && token["name"])))){
                        return await sanitize_js_ref_name((token && token["name"]))
                    } else {
                        throw new SyntaxError(("assignment: missing assignment symbol"));
                        
                    }
                })();
                target_details=await (async function(){
                     return await async function(){
                        if (check_true (await get_ctx(ctx,sanitized))) {
                            return "local"
                        } else if (check_true (await get_lisp_ctx(ctx,(token && token["name"])))) {
                            return "global"
                        } else {
                            {
                                {
                                    let it;
                                    it=await get_declaration_details(ctx,(token && token["name"]));
                                    if (check_true (it)){
                                        return await async function(){
                                            if (check_true ((it && it["is_argument"]))) {
                                                return "local"
                                            } else if (check_true ((it && it["declared_global"]))) {
                                                return "global"
                                            } else if (check_true (it)) {
                                                return "local"
                                            }
                                        } ()
                                    } else {
                                        return 
                                    }
                                }
                            }
                        }
                    } () 
                })();
                target=await (async function(){
                    if (check_true ((target_details==="local"))){
                        return sanitized
                    } else {
                        return (token && token["name"])
                    }
                })();
                ;
                comps=(target).split(".");
                await (await Environment.get_global("compiler_syntax_validation"))("compile_assignment",tokens,errors,ctx,expanded_tree);
                if (check_true ((undefined===target_details))){
                    throw new ReferenceError(("assignment to undeclared symbol: "+ (token && token["name"])));
                    
                };
                if (check_true (((comps && comps.length)>1))){
                    throw new SyntaxError(("invalid assignment to an object property, use set_prop instead: "+ target));
                    
                };
                if (check_true ((((tokens && tokens["2"] && tokens["2"]["type"])==="arr")&& ((tokens && tokens["2"] && tokens["2"]["val"] && tokens["2"]["val"]["0"] && tokens["2"]["val"]["0"]["type"])==="special")&& ((tokens && tokens["2"] && tokens["2"]["val"] && tokens["2"]["val"]["0"] && tokens["2"]["val"]["0"]["name"])==="defvar")))){
                    {
                        throw new SyntaxError("cannot assign result of the allocation operator defvar");
                        
                    }
                };
                await unset_ambiguous(ctx,target);
                await async function(){
                    ctx["in_assignment"]=true;
                    return ctx;
                    
                }();
                assignment_value=await compile_wrapper_fn((tokens && tokens["2"]),ctx);
                if (check_true (((assignment_value instanceof Array)&& ((assignment_value && assignment_value["0"]) instanceof Object)&& (assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])))){
                    {
                        assignment_type=await map_ctype_to_value((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"]),assignment_value)
                    }
                } else {
                    {
                        await set_ambiguous(ctx,target);
                        assignment_type=UnknownType
                    }
                };
                if (check_true ((target_details==="local"))){
                    {
                        await set_ctx(ctx,target,assignment_type);
                        (acc).push(target);
                        (acc).push("=");
                        (acc).push(assignment_value)
                    }
                } else {
                    {
                        await (async function() {
                            let __for_body__100=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__101=[],__elements__99=await (async function(){
                                 return [{
                                    ctype:"statement"
                                },(preamble && preamble["0"])," ","Environment",".","set_global","(","\"",target,"\"",",",assignment_value,")"] 
                            })();
                            let __BREAK__FLAG__=false;
                            for(let __iter__98 in __elements__99) {
                                __array__101.push(await __for_body__100(__elements__99[__iter__98]));
                                if(__BREAK__FLAG__) {
                                     __array__101.pop();
                                    break;
                                    
                                }
                            }return __array__101;
                             
                        })()
                    }
                };
                await async function(){
                    ctx["in_assignment"]=false;
                    return ctx;
                    
                }();
                if (check_true ((target_details==="local"))){
                    await set_ctx(ctx,target,assignment_type)
                };
                return acc
            };
            top_level_log=await (async function(){
                 return await defclog({
                    prefix:"top-level",color:"darkgreen",background:"#300010"
                }) 
            })();
            compile_toplevel=async function(lisp_tree,ctx,block_options) {
                if (check_true (await get_ctx_val(ctx,"__IN_LAMBDA__"))){
                    throw new EvalError("Compiler attempt to compile top-level in lambda (most likely a bug)");
                    
                } else {
                    {
                        {
                            let idx;
                            let rval;
                            let __tokens__103= async function(){
                                return null
                            };
                            let stmt;
                            let base_ctx;
                            let num_non_return_statements;
                            {
                                idx=0;
                                rval=null;
                                let tokens=await __tokens__103();
                                ;
                                stmt=null;
                                base_ctx=ctx;
                                num_non_return_statements=(await length(lisp_tree)- 2);
                                ctx=await (async function(){
                                    if (check_true ((block_options && block_options["no_scope_boundary"]))){
                                        return ctx
                                    } else {
                                        return await new_ctx(ctx)
                                    }
                                })();
                                await (async function(){
                                     let __test_condition__104=async function() {
                                        return (idx<num_non_return_statements)
                                    };
                                    let __body_ref__105=async function() {
                                        idx+=1;
                                        ctx=await new_ctx(ctx);
                                        await set_new_completion_scope(ctx);
                                        await set_ctx(ctx,"__TOP_LEVEL__",true);
                                        if (check_true (await verbosity(ctx))){
                                            {
                                                await console.log("");
                                                await top_level_log((""+ idx+ "/"+ num_non_return_statements),"->",await (await Environment.get_global("as_lisp"))(lisp_tree[idx]))
                                            }
                                        };
                                        tokens=await tokenize(lisp_tree[idx],ctx);
                                        stmt=await (async function(){
                                             return await compile(tokens,ctx) 
                                        })();
                                        rval=await wrap_and_run(stmt,ctx,{
                                            bind_mode:true
                                        });
                                        if (check_true (await verbosity(ctx))){
                                            {
                                                await top_level_log((""+ idx+ "/"+ num_non_return_statements),"compiled <- ",await (await Environment.get_global("as_lisp"))(stmt));
                                                return await top_level_log((""+ idx+ "/"+ num_non_return_statements),"<-",await (await Environment.get_global("as_lisp"))(rval))
                                            }
                                        }
                                    };
                                    let __BREAK__FLAG__=false;
                                    while(await __test_condition__104()) {
                                        await __body_ref__105();
                                         if(__BREAK__FLAG__) {
                                             break;
                                            
                                        }
                                    } ;
                                    
                                })();
                                return lisp_tree[(idx+ 1)]
                            }
                        }
                    }
                }
            };
            check_statement_completion=async function(ctx,stmts) {
                let stmt;
                let cmp_rec;
                stmt=await (async function(){
                    if (check_true ((null==stmts))){
                        throw new Error("compiler error: check_statement_completion: received undefined/nil statement array.");
                        
                    } else {
                        return await last(stmts)
                    }
                })();
                cmp_rec=await get_ctx(ctx,"__COMPLETION_SCOPE__");
                if (check_true ((((ctx && ctx["block_step"])===0)&& await not(await contains_ques_((stmt && stmt["0"] && stmt["0"]["ctype"]),["block","ifblock","tryblock","letblock"]))&& await not(await contains_ques_((stmt && stmt["0"] && stmt["0"]["completion"]),completion_types))))){
                    {
                        (stmts).pop();
                        await (await Environment.get_global("assert"))(cmp_rec,"compiler error: check_statement_completion unable to find completion_scope record in context");
                        if (check_true ((((stmt && stmt["0"]) instanceof Object)&& await not(((stmt && stmt["0"]) instanceof Array))))){
                            {
                                await async function(){
                                    let __target_obj__106=(stmt && stmt["0"]);
                                    __target_obj__106["completion"]="return";
                                    return __target_obj__106;
                                    
                                }();
                                (stmts).push(await (async function(){
                                    let __array_op_rval__107=(stmt && stmt["0"]);
                                     if (__array_op_rval__107 instanceof Function){
                                        return await __array_op_rval__107("return ",await (await Environment.get_global("rest"))(stmt)) 
                                    } else {
                                        return [__array_op_rval__107,"return ",await (await Environment.get_global("rest"))(stmt)]
                                    }
                                })());
                                ((cmp_rec && cmp_rec["completion_records"])).push({
                                    block_id:(ctx && ctx["block_id"]),block_step:(ctx && ctx["block_step"]),type:"return",stmt:await last(stmts)
                                })
                            }
                        } else {
                            {
                                (stmts).push(await (async function(){
                                     return [{
                                        completion:"return"
                                    },"return ",stmt] 
                                })());
                                ((cmp_rec && cmp_rec["completion_records"])).push({
                                    block_id:(ctx && ctx["block_id"]),type:"return",block_step:(ctx && ctx["block_step"]),stmt:await last(stmts)
                                })
                            }
                        };
                        return stmts
                    }
                } else {
                    return stmts
                }
            };
            compile_block=async function(tokens,ctx,block_options) {
                let acc;
                let block_id;
                let clog;
                let token;
                let block_type;
                let last_stmt;
                let is_first_level;
                let return_last;
                let stmt;
                let subacc;
                let completion_scope;
                let stmt_ctype;
                let lambda_block;
                let stmts;
                let idx;
                acc=[];
                block_id=(((block_options && block_options.name)&& await add((block_options && block_options.name),(blk_counter=blk_counter+1)))|| (blk_counter=blk_counter+1));
                clog=await (async function(){
                    if (check_true (quiet_mode)){
                        return log
                    } else {
                        return await defclog({
                            prefix:("compile_block ("+ block_id+ "):"),background:"#404080",color:"white"
                        })
                    }
                })();
                ctx=await (async function(){
                    if (check_true ((block_options && block_options["force_no_new_ctx"]))){
                        return ctx
                    } else {
                        return await new_ctx(ctx)
                    }
                })();
                token=null;
                block_type="sub";
                last_stmt=null;
                is_first_level=false;
                return_last=(ctx && ctx["return_last_value"]);
                stmt=null;
                subacc=[];
                completion_scope=await get_ctx(ctx,"__COMPLETION_SCOPE__");
                stmt_ctype=null;
                lambda_block=false;
                stmts=[];
                idx=0;
                if (check_true ((null==ctx))){
                    {
                        throw new ReferenceError("undefined ctx passed to compile block");
                        
                    }
                };
                if (check_true (await verbosity(ctx))){
                    {
                        await clog("->",tokens,ctx,block_options)
                    }
                };
                if (check_true (needs_first_level)){
                    {
                        is_first_level=true;
                        needs_first_level=false
                    }
                };
                if (check_true ((opts && opts["include_source"]))){
                    {
                        if (check_true (((tokens && tokens["path"])&& ((tokens && tokens["path"] && tokens["path"]["length"])>0)))){
                            {
                                (acc).push(await source_comment(tokens))
                            }
                        }
                    }
                };
                await async function(){
                    ctx["block_id"]=block_id;
                    return ctx;
                    
                }();
                await (await Environment.get_global("assert"))(completion_scope,"block called with no completion scope");
                await (await Environment.get_global("assert"))((completion_scope instanceof Object),"block called with an invalid completion scope");
                if (check_true ((completion_scope && completion_scope["root_block_id"]))){
                    {
                        await set_ctx(ctx,"__IN_SUB_BLOCK__",true)
                    }
                } else {
                    {
                        await async function(){
                            completion_scope["root_block_id"]=block_id;
                            return completion_scope;
                            
                        }();
                        block_type="root";
                        await set_ctx(ctx,"__IN_SUB_BLOCK__",false)
                    }
                };
                if (check_true ((block_options && block_options["no_scope_boundary"]))){
                    {
                        await async function(){
                            ctx["no_scope_boundary"]=true;
                            return ctx;
                            
                        }()
                    }
                };
                if (check_true ((await get_ctx_val(ctx,"__LAMBDA_STEP__")===-1))){
                    {
                        lambda_block=true;
                        await (await Environment.get_global("setf_ctx"))(ctx,"__LAMBDA_STEP__",((tokens && tokens.length)- 1))
                    }
                };
                if (check_true (is_first_level)){
                    {
                        (acc).push(first_level_setup)
                    }
                };
                await async function(){
                    ctx["final_block_statement"]=false;
                    return ctx;
                    
                }();
                await (async function(){
                     let __test_condition__112=async function() {
                        return (idx<((tokens && tokens.length)- 1))
                    };
                    let __body_ref__113=async function() {
                        idx+=1;
                        subacc=[];
                        token=tokens[idx];
                        if (check_true ((idx===((tokens && tokens.length)- 1)))){
                            {
                                await async function(){
                                    ctx["final_block_statement"]=true;
                                    return ctx;
                                    
                                }()
                            }
                        };
                        if (check_true ((block_type==="root"))){
                            await async function(){
                                ctx["block_step"]=((tokens && tokens.length)- 1- idx);
                                return ctx;
                                
                            }()
                        };
                        await async function(){
                            ctx["sub_block_step"]=((tokens && tokens.length)- 1- idx);
                            return ctx;
                            
                        }();
                        if (check_true (lambda_block)){
                            {
                                await set_ctx(ctx,"__LAMBDA_STEP__",((tokens && tokens.length)- 1- idx))
                            }
                        };
                        await async function(){
                            if (check_true (((block_type==="root")&& ((token && token["type"])==="arr")&& ((token && token["val"] && token["val"]["0"] && token["val"]["0"]["name"])==="return")))) {
                                {
                                    return stmt=await compile_return((token && token["val"]),ctx)
                                }
                            } else if (check_true ((((token && token["val"] && token["val"]["0"] && token["val"]["0"]["name"])==="declare")&& (block_options && block_options["ignore_declarations"])))) {
                                stmt={
                                    ignored:"declare"
                                }
                            } else if (check_true (((((tokens && tokens.length)- 1- idx)>0)&& ((token && token["val"] && token["val"]["0"] && token["val"]["0"]["type"])==="special")&& (((token && token["val"] && token["val"]["0"] && token["val"]["0"]["name"])==="if")|| ((token && token["val"] && token["val"]["0"] && token["val"]["0"]["name"])==="try"))))) {
                                {
                                    let subctx;
                                    subctx=await new_ctx(ctx);
                                    await async function(){
                                        subctx["block_step"]=((tokens && tokens.length)- 1- idx);
                                        return subctx;
                                        
                                    }();
                                    if (check_true (((token && token["val"] && token["val"]["0"] && token["val"]["0"]["name"])==="if"))){
                                        stmt=await compile_if((token && token["val"]),subctx)
                                    } else {
                                        stmt=await compile_try((token && token["val"]),subctx)
                                    }
                                }
                            } else {
                                stmt=await (async function(){
                                     return await compile(token,ctx) 
                                })()
                            }
                        } ();
                        if (check_true ((stmt===undefined))){
                            {
                                if (check_true (is_error)){
                                    stmt=await (async function(){
                                         return [{
                                            ctype:Error
                                        },"ERROR_STATE"] 
                                    })()
                                } else {
                                    throw new EvalError("compile_block: returned stmt is undefined");
                                    
                                }
                            }
                        };
                        (stmts).push(stmt);
                        if (check_true ((idx<((tokens && tokens.length)- 1)))){
                            {
                                return (stmts).push(";")
                            }
                        }
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__112()) {
                        await __body_ref__113();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                await check_statement_completion(ctx,stmts);
                (acc).push(stmts);
                if (check_true (await not((block_options && block_options["no_scope_boundary"])))){
                    {
                        (acc).unshift("{");
                        (acc).push("}")
                    }
                };
                (acc).unshift({
                    ctype:"block",block_id:block_id,block_options:block_options
                });
                return acc
            };
            Expression=new Function("","{ return \"expression\" }");
            Statement=new Function("","{ return \"statement\" }");
            NumberType=new Function("","{ return \"number\" }");
            StringType=new Function("","{ return \"string\" }");
            NilType=new Function("","{ return \"nil\" }");
            UnknownType=new Function(""," { return \"unknown\"} ");
            ArgumentType=new Function(""," { return \"argument\" }");
            compile_defvar=async function(tokens,ctx,opts) {
                let target;
                let wrap_as_function_ques_;
                let ctx_details;
                let allocation_type;
                let assignment_type;
                let assignment_value;
                target=await clean_quoted_reference(await sanitize_js_ref_name((tokens && tokens["1"] && tokens["1"]["name"])));
                wrap_as_function_ques_=null;
                ctx_details=null;
                ctx=ctx;
                allocation_type=await (async function(){
                    if (check_true ((opts && opts["constant"]))){
                        return "const"
                    } else {
                        return "let"
                    }
                })();
                assignment_type=null;
                assignment_value=null;
                if (check_true (((tokens && tokens.length)<2))){
                    {
                        throw new SyntaxError(("defvar requires 2 arguments, received "+ ((tokens && tokens.length)- 1)));
                        
                    }
                };
                if (check_true (((ctx && ctx["final_block_statement"])&& await not((ctx && ctx["no_scope_boundary"]))))){
                    {
                        throw new SyntaxError("defvar has no effect at end of block scope");
                        
                    }
                };
                assignment_value=await (async function(){
                    return await compile_wrapper_fn((tokens && tokens["2"]),ctx)
                })();
                ctx_details=await get_declaration_details(ctx,target);
                assignment_type=await add(new Object(),ctx_details,await get_declarations(ctx,target));
                await async function(){
                    if (check_true (((assignment_value instanceof Array)&& ((assignment_value && assignment_value["0"]) instanceof Object)&& (assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])))) {
                        {
                            return await set_ctx(ctx,target,await map_ctype_to_value((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"]),assignment_value))
                        }
                    } else if (check_true ((assignment_type && assignment_type["value"]) instanceof Function)) {
                        await set_ctx(ctx,target,(assignment_type && assignment_type["value"]))
                    } else {
                        await set_ctx(ctx,target,assignment_value)
                    }
                } ();
                if (check_true ((ctx && ctx["defvar_eval"]))){
                    {
                        await (await Environment.get_global("delete_prop"))(ctx,"defvar_eval");
                        return [{
                            ctype:"assignment"
                        },allocation_type," ",target,"=",assignment_value,"()",";"]
                    }
                } else {
                    return [{
                        ctype:"assignment"
                    },await (async function(){
                        if (check_true (((ctx_details && ctx_details["is_argument"])&& ((ctx_details && ctx_details["levels_up"])===1)))){
                            return ""
                        } else {
                            return (allocation_type+ " ")
                        }
                    })(),"",target,"=",[assignment_value],";"]
                }
            };
            get_declaration_details=async function(ctx,symname,_levels_up) {
                return await async function(){
                    if (check_true ((await (async function(){
                        let __targ__118=(ctx && ctx["scope"]);
                        if (__targ__118){
                             return(__targ__118)[symname]
                        } 
                    })()&& ctx["lambda_scope"]))) {
                        return {
                            name:symname,is_argument:true,levels_up:(_levels_up|| 0),value:await (async function(){
                                let __targ__119=(ctx && ctx["scope"]);
                                if (__targ__119){
                                     return(__targ__119)[symname]
                                } 
                            })(),declared_global:await (async function(){
                                if (check_true (await (async function(){
                                    let __targ__120=(root_ctx && root_ctx["defined_lisp_globals"]);
                                    if (__targ__120){
                                         return(__targ__120)[symname]
                                    } 
                                })())){
                                    return true
                                } else {
                                    return false
                                }
                            })()
                        }
                    } else if (check_true (await (async function(){
                        let __targ__121=(ctx && ctx["scope"]);
                        if (__targ__121){
                             return(__targ__121)[symname]
                        } 
                    })())) {
                        return {
                            name:symname,is_argument:false,levels_up:(_levels_up|| 0),value:await (async function(){
                                let __targ__122=(ctx && ctx["scope"]);
                                if (__targ__122){
                                     return(__targ__122)[symname]
                                } 
                            })(),declarations:await get_declarations(ctx,symname),declared_global:await (async function(){
                                if (check_true (await (async function(){
                                    let __targ__123=(root_ctx && root_ctx["defined_lisp_globals"]);
                                    if (__targ__123){
                                         return(__targ__123)[symname]
                                    } 
                                })())){
                                    return true
                                } else {
                                    return false
                                }
                            })()
                        }
                    } else if (check_true (((ctx["parent"]==null)&& await (async function(){
                        let __targ__124=(root_ctx && root_ctx["defined_lisp_globals"]);
                        if (__targ__124){
                             return(__targ__124)[symname]
                        } 
                    })()))) {
                        return {
                            name:symname,is_argument:false,levels_up:(_levels_up|| 0),value:await (async function(){
                                let __targ__125=(ctx && ctx["scope"]);
                                if (__targ__125){
                                     return(__targ__125)[symname]
                                } 
                            })(),declarations:await get_declarations(ctx,symname),declared_global:true
                        }
                    } else if (check_true ((ctx && ctx["parent"]))) {
                        return await get_declaration_details((ctx && ctx["parent"]),symname,((_levels_up&& await add(_levels_up,1))|| 1))
                    } else if (check_true (await not((NOT_FOUND_THING===await Environment["get_global"].call(Environment,symname,NOT_FOUND_THING))))) {
                        return {
                            name:symname,is_argument:false,levels_up:(_levels_up|| 0),value:await Environment["get_global"].call(Environment,symname),declared_global:true
                        }
                    }
                } ()
            };
            clean_quoted_reference=async function(name) {
                return await async function(){
                    if (check_true (((name instanceof String || typeof name==='string')&& await starts_with_ques_("\"",name)&& await (await Environment.get_global("ends_with?"))("\"",name)))) {
                        return await (async function() {
                            {
                                 let __call_target__=await name["substr"].call(name,1), __call_method__="substr";
                                return await __call_target__[__call_method__].call(__call_target__,0,(await length(name)- 2))
                            } 
                        })()
                    } else {
                        return name
                    }
                } ()
            };
            compile_let=async function(tokens,ctx) {
                let acc;
                let clog;
                let token;
                let declarations_handled;
                let assignment_value;
                let suppress_return;
                let block_declarations;
                let my_tokens;
                let assignment_type;
                let stmt;
                let def_idx;
                let redefinitions;
                let need_sub_block;
                let assignments;
                let reference_name;
                let shadowed_globals;
                let alloc_set;
                let is_first_level;
                let sub_block_count;
                let ctx_details;
                let preamble;
                let structure_validation_rules;
                let validation_results;
                let allocations;
                let block;
                let syntax_error;
                let idx;
                acc=[];
                ctx=await new_ctx(ctx);
                clog=await (async function(){
                    if (check_true (quiet_mode)){
                        return log
                    } else {
                        return await defclog({
                            prefix:("compile_let: "+ ((ctx && ctx["block_id"])|| "")),background:"#B0A0F0",color:"black"
                        })
                    }
                })();
                token=null;
                declarations_handled=false;
                assignment_value=null;
                suppress_return=null;
                block_declarations=new Object();
                my_tokens=tokens;
                assignment_type=null;
                stmt=null;
                def_idx=null;
                redefinitions=new Object();
                need_sub_block=false;
                assignments=new Object();
                reference_name=null;
                shadowed_globals=new Object();
                alloc_set=null;
                is_first_level=false;
                sub_block_count=0;
                ctx_details=null;
                preamble=await calling_preamble(ctx);
                structure_validation_rules=await (async function(){
                     return [[[1,"val"],[(await Environment.get_global("is_array?"))],"allocation section"],await (async function(){
                         return [[2],[async function(v) {
                            return await not((v===undefined))
                        }],"block"] 
                    })()] 
                })();
                validation_results=null;
                allocations=(tokens && tokens["1"] && tokens["1"]["val"]);
                block=await tokens["slice"].call(tokens,2);
                syntax_error=null;
                idx=-1;
                ;
                await (await Environment.get_global("compiler_syntax_validation"))("compile_let",tokens,errors,ctx,expanded_tree);
                await async function(){
                    ctx["return_last_value"]=true;
                    return ctx;
                    
                }();
                await set_ctx(ctx,"__LOCAL_SCOPE__",true);
                (acc).push("{");
                sub_block_count+=1;
                if (check_true (((block && block["0"] && block["0"]["val"] && block["0"]["val"]["0"] && block["0"]["val"]["0"]["name"])==="declare"))){
                    {
                        declarations_handled=true;
                        (acc).push(await compile_declare((block && block["0"] && block["0"]["val"]),ctx))
                    }
                };
                if (check_true (needs_first_level)){
                    {
                        is_first_level=true;
                        needs_first_level=false;
                        if (check_true (is_first_level)){
                            {
                                (acc).push(first_level_setup)
                            }
                        }
                    }
                };
                await (async function(){
                     let __test_condition__127=async function() {
                        return (idx<((allocations && allocations.length)- 1))
                    };
                    let __body_ref__128=async function() {
                        idx+=1;
                        alloc_set=await (async function(){
                            let __targ__129=allocations[idx];
                            if (__targ__129){
                                 return(__targ__129)["val"]
                            } 
                        })();
                        reference_name=await clean_quoted_reference(await sanitize_js_ref_name((alloc_set && alloc_set["0"] && alloc_set["0"]["name"])));
                        await (await Environment.get_global("assert"))(((reference_name instanceof String || typeof reference_name==='string')&& (await length(reference_name)>0)),("Invalid reference name: "+ (alloc_set && alloc_set["0"] && alloc_set["0"]["name"])));
                        ctx_details=await get_declaration_details(ctx,reference_name);
                        if (check_true (ctx_details)){
                            {
                                if (check_true ((await not((ctx_details && ctx_details["is_argument"]))&& ((ctx_details && ctx_details["levels_up"])>1)))){
                                    {
                                        need_sub_block=true;
                                        if (check_true (redefinitions[reference_name])){
                                            (redefinitions[reference_name]).push(await gen_temp_name(reference_name))
                                        } else {
                                            await async function(){
                                                redefinitions[reference_name]=[0,await gen_temp_name(reference_name)];
                                                return redefinitions;
                                                
                                            }()
                                        };
                                        if (check_true (((ctx_details && ctx_details["declared_global"])&& await not((ctx_details && ctx_details["is_argument"]))))){
                                            {
                                                await async function(){
                                                    shadowed_globals[(alloc_set && alloc_set["0"] && alloc_set["0"]["name"])]=true;
                                                    return shadowed_globals;
                                                    
                                                }()
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        if (check_true (await not((ctx_details && ctx_details["is_argument"])))){
                            {
                                return await set_ctx(ctx,reference_name,AsyncFunction)
                            }
                        }
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__127()) {
                        await __body_ref__128();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                idx=-1;
                await (async function(){
                     let __test_condition__132=async function() {
                        return (idx<((allocations && allocations.length)- 1))
                    };
                    let __body_ref__133=async function() {
                        idx+=1;
                        stmt=[];
                        alloc_set=await (async function(){
                            let __targ__134=allocations[idx];
                            if (__targ__134){
                                 return(__targ__134)["val"]
                            } 
                        })();
                        reference_name=await clean_quoted_reference(await sanitize_js_ref_name((alloc_set && alloc_set["0"] && alloc_set["0"]["name"])));
                        ctx_details=await get_declaration_details(ctx,reference_name);
                        await async function(){
                            if (check_true (((alloc_set && alloc_set["1"] && alloc_set["1"]["val"]) instanceof Array))) {
                                {
                                    await async function(){
                                        ctx["in_assignment"]=true;
                                        return ctx;
                                        
                                    }();
                                    assignment_value=await compile_wrapper_fn((alloc_set && alloc_set["1"]),ctx);
                                    return await async function(){
                                        ctx["in_assignment"]=false;
                                        return ctx;
                                        
                                    }()
                                }
                            } else if (check_true ((((alloc_set && alloc_set["1"] && alloc_set["1"]["name"]) instanceof String || typeof (alloc_set && alloc_set["1"] && alloc_set["1"]["name"])==='string')&& await not((ctx_details && ctx_details["is_argument"]))&& (alloc_set && alloc_set["1"] && alloc_set["1"]["ref"])&& await not((await Environment["get_global"].call(Environment,(alloc_set && alloc_set["1"] && alloc_set["1"]["name"]),NOT_FOUND_THING)===NOT_FOUND_THING))&& shadowed_globals[(alloc_set && alloc_set["0"] && alloc_set["0"]["name"])]))) {
                                {
                                    assignment_value=await (async function(){
                                         return [{
                                            ctype:(ctx_details && ctx_details["value"])
                                        },"await"," ",env_ref,"get_global","(","\"",(alloc_set && alloc_set["0"] && alloc_set["0"]["name"]),"\"",")"] 
                                    })()
                                }
                            } else {
                                {
                                    assignment_value=await compile_wrapper_fn((alloc_set && alloc_set["1"]),ctx);
                                    if (check_true (await verbosity(ctx))){
                                        {
                                            await clog("setting simple assignment value for",reference_name,": <- ",await (async function(){
                                                 return await clone(assignment_value) 
                                            })())
                                        }
                                    }
                                }
                            }
                        } ();
                        await async function(){
                            if (check_true (((assignment_value instanceof Array)&& ((assignment_value && assignment_value["0"]) instanceof Object)&& (assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])))) {
                                {
                                    return await set_ctx(ctx,reference_name,await map_ctype_to_value((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"]),assignment_value))
                                }
                            } else if (check_true (((assignment_value instanceof Array)&& ((assignment_value && assignment_value["0"]) instanceof Array)&& (assignment_value && assignment_value["0"] && assignment_value["0"]["0"] && assignment_value["0"]["0"]["ctype"])))) {
                                {
                                    await set_ctx(ctx,reference_name,await map_ctype_to_value((assignment_value && assignment_value["0"] && assignment_value["0"]["0"] && assignment_value["0"]["0"]["ctype"]),assignment_value))
                                }
                            } else {
                                {
                                    await set_ctx(ctx,reference_name,assignment_value)
                                }
                            }
                        } ();
                        if (check_true ((ctx_details && ctx_details["is_argument"]))){
                            {
                                await async function(){
                                    block_declarations[reference_name]=true;
                                    return block_declarations;
                                    
                                }()
                            }
                        };
                        def_idx=null;
                        await async function(){
                            if (check_true ((redefinitions[reference_name]&& await first(redefinitions[reference_name])))) {
                                {
                                    def_idx=await first(redefinitions[reference_name]);
                                    def_idx+=1;
                                    await async function(){
                                        let __target_obj__138=redefinitions[reference_name];
                                        __target_obj__138[0]=def_idx;
                                        return __target_obj__138;
                                        
                                    }();
                                    return await (async function() {
                                        let __for_body__141=async function(t) {
                                            return (acc).push(t)
                                        };
                                        let __array__142=[],__elements__140=["let"," ",await (async function(){
                                            let __targ__143=redefinitions[reference_name];
                                            if (__targ__143){
                                                 return(__targ__143)[def_idx]
                                            } 
                                        })(),"="," ",(preamble && preamble["1"])," ","function","()","{","return"," ",assignment_value,"}",";"];
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__139 in __elements__140) {
                                            __array__142.push(await __for_body__141(__elements__140[__iter__139]));
                                            if(__BREAK__FLAG__) {
                                                 __array__142.pop();
                                                break;
                                                
                                            }
                                        }return __array__142;
                                         
                                    })()
                                }
                            } else if (check_true (await not(block_declarations[reference_name]))) {
                                {
                                    await (async function() {
                                        let __for_body__146=async function(t) {
                                            return (acc).push(t)
                                        };
                                        let __array__147=[],__elements__145=["let"," ",reference_name,";"];
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__144 in __elements__145) {
                                            __array__147.push(await __for_body__146(__elements__145[__iter__144]));
                                            if(__BREAK__FLAG__) {
                                                 __array__147.pop();
                                                break;
                                                
                                            }
                                        }return __array__147;
                                         
                                    })();
                                    await async function(){
                                        block_declarations[reference_name]=true;
                                        return block_declarations;
                                        
                                    }()
                                }
                            }
                        } ();
                        if (check_true (await not(assignments[reference_name]))){
                            {
                                await async function(){
                                    assignments[reference_name]=[];
                                    return assignments;
                                    
                                }()
                            }
                        };
                        return (assignments[reference_name]).push(await (async function(){
                            if (check_true (def_idx)){
                                return [(preamble && preamble["0"])," ",await (async function(){
                                    let __targ__150=redefinitions[reference_name];
                                    if (__targ__150){
                                         return(__targ__150)[def_idx]
                                    } 
                                })(),"()",";"]
                            } else {
                                return assignment_value
                            }
                        })())
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__132()) {
                        await __body_ref__133();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                if (check_true (need_sub_block)){
                    {
                        await (async function() {
                            let __for_body__153=async function(pset) {
                                return await (async function() {
                                    let __for_body__157=async function(redef) {
                                        return (redefinitions[(pset && pset["0"])]).shift()
                                    };
                                    let __array__158=[],__elements__156=(pset && pset["1"]);
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__155 in __elements__156) {
                                        __array__158.push(await __for_body__157(__elements__156[__iter__155]));
                                        if(__BREAK__FLAG__) {
                                             __array__158.pop();
                                            break;
                                            
                                        }
                                    }return __array__158;
                                     
                                })()
                            };
                            let __array__154=[],__elements__152=await (await Environment.get_global("pairs"))(redefinitions);
                            let __BREAK__FLAG__=false;
                            for(let __iter__151 in __elements__152) {
                                __array__154.push(await __for_body__153(__elements__152[__iter__151]));
                                if(__BREAK__FLAG__) {
                                     __array__154.pop();
                                    break;
                                    
                                }
                            }return __array__154;
                             
                        })()
                    }
                };
                if (check_true (need_sub_block)){
                    {
                        (acc).push("{");
                        sub_block_count+=1
                    }
                };
                idx=-1;
                await (async function(){
                     let __test_condition__159=async function() {
                        return (idx<((allocations && allocations.length)- 1))
                    };
                    let __body_ref__160=async function() {
                        idx+=1;
                        def_idx=null;
                        stmt=[];
                        alloc_set=await (async function(){
                            let __targ__161=allocations[idx];
                            if (__targ__161){
                                 return(__targ__161)["val"]
                            } 
                        })();
                        reference_name=await clean_quoted_reference(await sanitize_js_ref_name((alloc_set && alloc_set["0"] && alloc_set["0"]["name"])));
                        ctx_details=await get_declaration_details(ctx,reference_name);
                        assignment_value=(assignments[reference_name]).shift();
                        await async function(){
                            if (check_true (block_declarations[reference_name])) {
                                return true
                            } else {
                                {
                                    (stmt).push("let");
                                    (stmt).push(" ")
                                }
                            }
                        } ();
                        (stmt).push(reference_name);
                        await async function(){
                            block_declarations[reference_name]=true;
                            return block_declarations;
                            
                        }();
                        (stmt).push("=");
                        (stmt).push(assignment_value);
                        (stmt).push(";");
                        return (acc).push(stmt)
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__159()) {
                        await __body_ref__160();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                (acc).push(await compile_block(await conj(["PLACEHOLDER"],block),ctx,{
                    no_scope_boundary:true,suppress_return:suppress_return,ignore_declarations:declarations_handled
                }));
                await (async function() {
                    let __for_body__165=async function(i) {
                        return (acc).push("}")
                    };
                    let __array__166=[],__elements__164=await (await Environment.get_global("range"))(sub_block_count);
                    let __BREAK__FLAG__=false;
                    for(let __iter__163 in __elements__164) {
                        __array__166.push(await __for_body__165(__elements__164[__iter__163]));
                        if(__BREAK__FLAG__) {
                             __array__166.pop();
                            break;
                            
                        }
                    }return __array__166;
                     
                })();
                if (check_true (false)){
                    return acc
                } else {
                    {
                        (acc).unshift({
                            ctype:"letblock",block_step:(ctx && ctx["parent"] && ctx["parent"]["block_step"])
                        });
                        return acc
                    }
                }
            };
            in_sync_ques_=async function(ctx) {
                return await get_ctx(ctx,"__SYNCF__")
            };
            await_ques_=async function(ctx) {
                if (check_true (await in_sync_ques_(ctx))){
                    return ""
                } else {
                    return "await"
                }
            };
            calling_preamble=async function(ctx) {
                if (check_true (await in_sync_ques_(ctx))){
                    return ["","",{
                        ctype:"Function",block_step:0
                    },"(",")"]
                } else {
                    return ["await","async",{
                        ctype:"AsyncFunction",block_step:0
                    },"",""]
                }
            };
            fn_log=await (async function(){
                 return await defclog({
                    prefix:"compile_fn",background:"black",color:"lightblue"
                }) 
            })();
            completion_scope_id=0;
            set_new_completion_scope=async function(ctx) {
                let completion_scope;
                completion_scope={
                    id:completion_scope_id+=1,root_block_id:null,completion_records:[],is_top:false
                };
                await set_ctx(ctx,"__COMPLETION_SCOPE__",completion_scope);
                await set_ctx(ctx,"__COMP_INFIX_OPS__",null);
                return completion_scope
            };
            compile_fn=async function(tokens,ctx,fn_opts) {
                let acc;
                let idx;
                let arg;
                let fn_args;
                let body;
                let external_declarations;
                let type_mark;
                let completion_scope;
                let nbody;
                acc=[];
                idx=-1;
                arg=null;
                ctx=await new_ctx(ctx);
                fn_args=(tokens && tokens["1"] && tokens["1"]["val"]);
                body=(tokens && tokens["2"]);
                external_declarations=(tokens && tokens["3"]);
                type_mark=null;
                completion_scope=await set_new_completion_scope(ctx);
                nbody=null;
                if (check_true ((undefined==body))){
                    {
                        throw new SyntaxError("Invalid function call syntax");
                        
                    }
                };
                await async function(){
                    ctx["return_point"]=0;
                    return ctx;
                    
                }();
                await set_ctx(ctx,"__IN_LAMBDA__",true);
                await set_ctx(ctx,"__LAMBDA_STEP__",-1);
                await async function(){
                    ctx["lambda_scope"]=true;
                    return ctx;
                    
                }();
                await async function(){
                    ctx["suppress_return"]=false;
                    return ctx;
                    
                }();
                await async function(){
                    if (check_true ((fn_opts && fn_opts["synchronous"]))) {
                        {
                            type_mark=await type_marker("Function");
                            await set_ctx(ctx,"__SYNCF__",true);
                            await async function(){
                                completion_scope["in_sync"]=true;
                                return completion_scope;
                                
                            }();
                            return (acc).push(type_mark)
                        }
                    } else if (check_true ((fn_opts && fn_opts["arrow"]))) {
                        {
                            type_mark=await type_marker("Function");
                            (acc).push(type_mark)
                        }
                    } else if (check_true ((fn_opts && fn_opts["generator"]))) {
                        {
                            type_mark=await type_marker("GeneratorFunction");
                            (acc).push(type_mark);
                            (acc).push("async");
                            (acc).push(" ")
                        }
                    } else {
                        {
                            type_mark=await type_marker("AsyncFunction");
                            (acc).push(type_mark);
                            (acc).push("async");
                            (acc).push(" ")
                        }
                    }
                } ();
                await async function(){
                    type_mark["args"]=[];
                    return type_mark;
                    
                }();
                await async function(){
                    if (check_true ((fn_opts && fn_opts["arrow"]))) {
                        return await async function(){
                            completion_scope["scope_type"]="arrow";
                            return completion_scope;
                            
                        }()
                    } else if (check_true ((fn_opts && fn_opts["generator"]))) {
                        {
                            (acc).push("function*");
                            await async function(){
                                completion_scope["scope_type"]="generator";
                                return completion_scope;
                                
                            }()
                        }
                    } else {
                        {
                            await async function(){
                                completion_scope["scope_type"]="function";
                                return completion_scope;
                                
                            }();
                            (acc).push("function")
                        }
                    }
                } ();
                (acc).push("(");
                await (async function(){
                     let __test_condition__175=async function() {
                        return (idx<((fn_args && fn_args.length)- 1))
                    };
                    let __body_ref__176=async function() {
                        idx+=1;
                        arg=fn_args[idx];
                        if (check_true (((arg && arg.name)==="&"))){
                            {
                                idx+=1;
                                arg=fn_args[idx];
                                if (check_true ((null==arg))){
                                    {
                                        throw new SyntaxError("Missing argument symbol after &");
                                        
                                    }
                                };
                                await set_ctx(ctx,(arg && arg.name),ArgumentType);
                                await async function(){
                                    arg["name"]=("..."+ (arg && arg.name));
                                    return arg;
                                    
                                }()
                            }
                        } else {
                            {
                                await set_ctx(ctx,(arg && arg.name),ArgumentType)
                            }
                        };
                        (acc).push(await sanitize_js_ref_name((arg && arg.name)));
                        ((type_mark && type_mark["args"])).push(await sanitize_js_ref_name((arg && arg.name)));
                        if (check_true ((idx<((fn_args && fn_args.length)- 1)))){
                            {
                                return (acc).push(",")
                            }
                        }
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__175()) {
                        await __body_ref__176();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                (acc).push(")");
                (acc).push(" ");
                if (check_true ((fn_opts && fn_opts["arrow"]))){
                    {
                        (acc).push("=>")
                    }
                };
                if (check_true ((fn_opts && fn_opts["generator"]))){
                    await async function(){
                        ctx["return_last_value"]=false;
                        return ctx;
                        
                    }()
                } else {
                    await async function(){
                        ctx["return_last_value"]=true;
                        return ctx;
                        
                    }()
                };
                await async function(){
                    if (check_true (((body && body["val"] && body["val"]["0"] && body["val"]["0"]["name"])==="let"))) {
                        {
                            return (acc).push(await (async function(){
                                 return await compile((body && body["val"]),ctx) 
                            })())
                        }
                    } else if (check_true (await contains_ques_((body && body["val"] && body["val"]["0"] && body["val"]["0"]["name"]),["do","progn","progl"]))) {
                        {
                            (acc).push(await compile_block((body && body["val"]),ctx))
                        }
                    } else {
                        {
                            nbody=await (async function(){
                                 return [{
                                    type:"special",val:await (async function(){
                                         return "=:do" 
                                    })(),ref:true,name:"do"
                                },body] 
                            })();
                            await async function(){
                                ctx["return_last_value"]=true;
                                return ctx;
                                
                            }();
                            (acc).push({
                                mark:"nbody"
                            });
                            (acc).push(await compile_block(nbody,ctx))
                        }
                    }
                } ();
                await async function(){
                    if (check_true (((completion_scope && completion_scope["completion_records"] && completion_scope["completion_records"]["length"])===0))) {
                        throw new Error("internal compile error: no completion records for callable");
                        
                    } else {
                        true
                    }
                } ();
                return acc
            };
            compile_jslambda=async function(tokens,ctx) {
                let acc;
                let fn_args;
                let body;
                let idx;
                let quoted_body;
                let arg;
                let type_mark;
                acc=[];
                fn_args=(tokens && tokens["1"] && tokens["1"]["val"]);
                body=await (async function(){
                     return await compile((tokens && tokens["2"] && tokens["2"]["val"]),ctx) 
                })();
                idx=-1;
                quoted_body=[];
                arg=null;
                type_mark=await type_marker("Function");
                (acc).push(type_mark);
                await (async function() {
                    let __for_body__183=async function(t) {
                        return (acc).push(t)
                    };
                    let __array__184=[],__elements__182=["new"," ","Function","("];
                    let __BREAK__FLAG__=false;
                    for(let __iter__181 in __elements__182) {
                        __array__184.push(await __for_body__183(__elements__182[__iter__181]));
                        if(__BREAK__FLAG__) {
                             __array__184.pop();
                            break;
                            
                        }
                    }return __array__184;
                     
                })();
                if (check_true (await not((body instanceof String || typeof body==='string')))){
                    {
                        throw new SyntaxError(("Invalid jslambda body, need string, got: "+ await subtype(body)));
                        
                    }
                };
                await (async function(){
                     let __test_condition__185=async function() {
                        return (idx<((fn_args && fn_args.length)- 1))
                    };
                    let __body_ref__186=async function() {
                        idx+=1;
                        arg=fn_args[idx];
                        await set_ctx(ctx,(arg && arg.name),ArgumentType);
                        (acc).push(("\""+ (arg && arg.name)+ "\""));
                        ((type_mark && type_mark["args"])).push((arg && arg.name));
                        return (acc).push(",")
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__185()) {
                        await __body_ref__186();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                (acc).push("\"");
                await (async function() {
                    let __for_body__189=async function(c) {
                        if (check_true (await not((c==="\n"),(c==="\r")))){
                            {
                                if (check_true ((c==="\""))){
                                    {
                                        (quoted_body).push(await String.fromCharCode(92))
                                    }
                                };
                                return (quoted_body).push(c)
                            }
                        }
                    };
                    let __array__190=[],__elements__188=(body).split("");
                    let __BREAK__FLAG__=false;
                    for(let __iter__187 in __elements__188) {
                        __array__190.push(await __for_body__189(__elements__188[__iter__187]));
                        if(__BREAK__FLAG__) {
                             __array__190.pop();
                            break;
                            
                        }
                    }return __array__190;
                     
                })();
                (acc).push((await flatten(quoted_body)).join(""));
                (acc).push("\"");
                (acc).push(")");
                return acc
            };
            compile_yield=async function(tokens,ctx) {
                let acc;
                let expr;
                let cmp_rec;
                acc=[];
                expr=null;
                cmp_rec=await get_ctx(ctx,"__COMPLETION_SCOPE__");
                (acc).push(["yield"," ",await compile_wrapper_fn((tokens && tokens["1"]),ctx),";"]);
                ((cmp_rec && cmp_rec["completion_records"])).push({
                    block_id:(ctx && ctx["block_id"]),block_step:(ctx && ctx["block_step"]),type:"yield",stmt:await last(acc)
                });
                return acc
            };
            var_counter=0;
            gen_temp_name=async function(arg) {
                return ("__"+ (arg|| "")+ "__"+ (var_counter=var_counter+1))
            };
            if_id=0;
            compile_cond=async function(tokens,ctx) {
                let preamble;
                preamble=await calling_preamble(ctx);
                ctx=await new_ctx(ctx);
                ;
                await set_new_completion_scope(ctx);
                return [(preamble && preamble["2"]),(preamble && preamble["0"])," ",(preamble && preamble["1"])," ",(preamble && preamble["3"]),"function","()","{",await compile_cond_inner(tokens,ctx),"} ",(preamble && preamble["4"]),"()"]
            };
            compile_cond_inner=async function(tokens,ctx) {
                let acc;
                let conditions;
                let block_step;
                let condition_tokens;
                let idx;
                let preamble;
                let compile_condition;
                acc=[];
                conditions=[];
                block_step=(ctx && ctx["block_step"]);
                condition_tokens=await tokens["slice"].call(tokens,1);
                idx=-2;
                preamble=await calling_preamble(ctx);
                compile_condition=async function(cond_test,cond_block) {
                    let stmts;
                    let compiled_test;
                    let stmt;
                    stmts=[];
                    compiled_test=null;
                    stmt=null;
                    if (check_true (((cond_test && cond_test.name)==="else"))){
                        if (check_true ((idx>=2))){
                            (stmts).push(" else ")
                        }
                    } else {
                        {
                            if (check_true ((idx>=2))){
                                (stmts).push(" else ")
                            };
                            compiled_test=await compile_wrapper_fn(cond_test,ctx);
                            if (check_true (((await first(compiled_test) instanceof Object)&& await (async function(){
                                let __targ__191=await first(compiled_test);
                                if (__targ__191){
                                     return(__targ__191)["ctype"]
                                } 
                            })()&& (await (async function(){
                                let __targ__192=await first(compiled_test);
                                if (__targ__192){
                                     return(__targ__192)["ctype"]
                                } 
                            })() instanceof String || typeof await (async function(){
                                let __targ__192=await first(compiled_test);
                                if (__targ__192){
                                     return(__targ__192)["ctype"]
                                } 
                            })()==='string')&& await contains_ques_("unction",await (async function(){
                                let __targ__193=await first(compiled_test);
                                if (__targ__193){
                                     return(__targ__193)["ctype"]
                                } 
                            })())))){
                                (stmts).push(["if"," ","(check_true (",(preamble && preamble["0"])," ",compiled_test,"()",")) "])
                            } else {
                                (stmts).push(["if"," ","(check_true (",compiled_test,")) "])
                            }
                        }
                    };
                    stmt=await compile_block(await ensure_block(cond_block),ctx);
                    (stmts).push(stmt);
                    return stmts
                };
                ;
                await (await Environment.get_global("compiler_syntax_validation"))("compile_cond",tokens,errors,ctx,expanded_tree);
                await async function(){
                    if (check_true (await not((((condition_tokens && condition_tokens.length)% 2)===0)))) {
                        throw new SyntaxError("cond: Invalid syntax: missing condition block");
                        
                    } else if (check_true (((condition_tokens && condition_tokens.length)===0))) {
                        throw new SyntaxError("cond: Invalid syntax: no conditions provided");
                        
                    }
                } ();
                await (async function(){
                     let __test_condition__194=async function() {
                        return (idx<((condition_tokens && condition_tokens.length)- 2))
                    };
                    let __body_ref__195=async function() {
                        idx+=2;
                        return (acc).push(await compile_condition(condition_tokens[idx],condition_tokens[(idx+ 1)]))
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__194()) {
                        await __body_ref__195();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                return acc
            };
            ensure_block=async function(tokens) {
                if (check_true (((tokens instanceof Array)&& ("special"===(tokens && tokens["0"] && tokens["0"]["type"]))&& await contains_ques_((tokens && tokens["0"] && tokens["0"]["name"]),["do","progn"])))){
                    return tokens
                } else {
                    return ["PLACEHOLDER",tokens]
                }
            };
            compile_if=async function(tokens,ctx) {
                let acc;
                let subacc;
                let stmts;
                let test_form;
                let if_true;
                let if_false;
                let compiled_test;
                let compiled_true;
                let compiled_false;
                let block_step;
                let preamble;
                acc=[];
                subacc=[];
                stmts=null;
                test_form=(tokens && tokens["1"]);
                if_true=(tokens && tokens["2"]);
                if_false=(tokens && tokens["3"]);
                compiled_test=null;
                compiled_true=null;
                compiled_false=null;
                block_step=(ctx && ctx["block_step"]);
                preamble=await calling_preamble(ctx);
                ;
                if (check_true ((null==block_step))){
                    block_step=0
                };
                (acc).push({
                    ctype:"ifblock",block_step:(ctx && ctx["block_step"]),block_id:(ctx && ctx["block_id"])
                });
                compiled_test=await (async function(){
                     return await compile(test_form,ctx) 
                })();
                if (check_true (((await first(compiled_test) instanceof Object)&& await (async function(){
                    let __targ__196=await first(compiled_test);
                    if (__targ__196){
                         return(__targ__196)["ctype"]
                    } 
                })()&& (await (async function(){
                    let __targ__197=await first(compiled_test);
                    if (__targ__197){
                         return(__targ__197)["ctype"]
                    } 
                })() instanceof String || typeof await (async function(){
                    let __targ__197=await first(compiled_test);
                    if (__targ__197){
                         return(__targ__197)["ctype"]
                    } 
                })()==='string')&& await contains_ques_("unction",await (async function(){
                    let __targ__198=await first(compiled_test);
                    if (__targ__198){
                         return(__targ__198)["ctype"]
                    } 
                })())))){
                    await (async function() {
                        let __for_body__201=async function(t) {
                            return (subacc).push(t)
                        };
                        let __array__202=[],__elements__200=["if"," ","(check_true (",(preamble && preamble["0"])," ",compiled_test,"()","))"];
                        let __BREAK__FLAG__=false;
                        for(let __iter__199 in __elements__200) {
                            __array__202.push(await __for_body__201(__elements__200[__iter__199]));
                            if(__BREAK__FLAG__) {
                                 __array__202.pop();
                                break;
                                
                            }
                        }return __array__202;
                         
                    })()
                } else {
                    await (async function() {
                        let __for_body__205=async function(t) {
                            return (subacc).push(t)
                        };
                        let __array__206=[],__elements__204=["if"," ","(check_true (",compiled_test,"))"];
                        let __BREAK__FLAG__=false;
                        for(let __iter__203 in __elements__204) {
                            __array__206.push(await __for_body__205(__elements__204[__iter__203]));
                            if(__BREAK__FLAG__) {
                                 __array__206.pop();
                                break;
                                
                            }
                        }return __array__206;
                         
                    })()
                };
                (acc).push(subacc);
                subacc=[];
                compiled_true=await compile_block(await ensure_block(if_true),ctx);
                (acc).push(compiled_true);
                if (check_true (if_false)){
                    {
                        (acc).push(" ");
                        (acc).push("else");
                        (acc).push(" ");
                        compiled_false=await compile_block(await ensure_block(if_false),ctx);
                        (acc).push(compiled_false)
                    }
                };
                return acc
            };
            compile_as_call=async function(tokens,ctx) {
                return await compile_wrapper_fn(tokens,ctx,{
                    force:true
                })
            };
            compile_wrapper_fn=async function(tokens,ctx,opts) {
                let acc;
                let preamble;
                let needs_await;
                acc=[];
                ctx=ctx;
                preamble=await calling_preamble(ctx);
                needs_await=true;
                ;
                await async function(){
                    if (check_true (((tokens instanceof Object)&& await not((tokens instanceof Array))&& await not(((tokens && tokens["type"])==="arr"))))) {
                        {
                            needs_await=false;
                            return acc=await (async function(){
                                 return await compile(tokens,ctx) 
                            })()
                        }
                    } else if (check_true (((tokens instanceof Object)&& ((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["type"])==="fun")))) {
                        {
                            needs_await=false;
                            acc=await (async function(){
                                 return await compile(tokens,ctx) 
                            })()
                        }
                    } else if (check_true ((opts && opts["force"]))) {
                        {
                            ctx=await new_ctx(ctx);
                            await set_new_completion_scope(ctx);
                            acc=await compile_block_to_anon_fn(tokens,ctx)
                        }
                    } else if (check_true (await is_block_ques_(tokens))) {
                        {
                            ctx=await new_ctx(ctx);
                            await set_new_completion_scope(ctx);
                            await async function(){
                                ctx["block_step"]=0;
                                return ctx;
                                
                            }();
                            acc=await (async function(){
                                let __array_op_rval__208=(preamble && preamble["2"]);
                                 if (__array_op_rval__208 instanceof Function){
                                    return await __array_op_rval__208("(",(preamble && preamble["1"])," ","function","()","{",await (async function(){
                                         return await compile(tokens,ctx) 
                                    })(),"}",")","()") 
                                } else {
                                    return [__array_op_rval__208,"(",(preamble && preamble["1"])," ","function","()","{",await (async function(){
                                         return await compile(tokens,ctx) 
                                    })(),"}",")","()"]
                                }
                            })()
                        }
                    } else if (check_true (((tokens instanceof Object)&& ((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["type"])==="special")&& (((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["name"])==="if")|| (((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["name"])==="throw")&& await get_ctx(ctx,"__COMP_INFIX_OPS__")))))) {
                        {
                            ctx=await new_ctx(ctx);
                            await set_new_completion_scope(ctx);
                            await async function(){
                                ctx["block_step"]=0;
                                return ctx;
                                
                            }();
                            await (async function() {
                                let __for_body__212=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__213=[],__elements__211=await (async function(){
                                    let __array_op_rval__214=(preamble && preamble["2"]);
                                     if (__array_op_rval__214 instanceof Function){
                                        return await __array_op_rval__214("(",(preamble && preamble["1"])," ","function","()","{",await compile_if((tokens && tokens["val"]),ctx),"}",")","()") 
                                    } else {
                                        return [__array_op_rval__214,"(",(preamble && preamble["1"])," ","function","()","{",await compile_if((tokens && tokens["val"]),ctx),"}",")","()"]
                                    }
                                })();
                                let __BREAK__FLAG__=false;
                                for(let __iter__210 in __elements__211) {
                                    __array__213.push(await __for_body__212(__elements__211[__iter__210]));
                                    if(__BREAK__FLAG__) {
                                         __array__213.pop();
                                        break;
                                        
                                    }
                                }return __array__213;
                                 
                            })()
                        }
                    } else if (check_true (((tokens instanceof Array)&& (((tokens && tokens["0"] && tokens["0"]["type"])==="fun")|| ((tokens && tokens["0"] && tokens["0"]["type"])==="asf")|| ((tokens && tokens["0"] && tokens["0"]["type"])==="function"))))) {
                        {
                            needs_await=false;
                            acc=await (async function(){
                                 return await compile(tokens,ctx) 
                            })()
                        }
                    } else if (check_true ((tokens instanceof Array))) {
                        {
                            ctx=await new_ctx(ctx);
                            await set_new_completion_scope(ctx);
                            acc=await compile_block_to_anon_fn(tokens,ctx)
                        }
                    } else if (check_true (((tokens instanceof Object)&& ((tokens && tokens["type"])==="arr")&& (((tokens && tokens["val"] && tokens["val"]["length"])===0)|| ((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["type"])==="literal")|| (((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["type"])==="arg")|| (((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["type"])==="special")&& await not(await contains_ques_((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["name"]),["if","try","do","progn","let","cond"])))))))) {
                        {
                            needs_await=false;
                            acc=await (async function(){
                                 return await compile(tokens,ctx) 
                            })()
                        }
                    } else if (check_true (((tokens instanceof Object)&& (tokens && tokens["val"])&& ((tokens && tokens["type"])==="arr")))) {
                        {
                            ctx=await new_ctx(ctx);
                            await set_new_completion_scope(ctx);
                            acc=await compile_block_to_anon_fn((tokens && tokens["val"]),ctx)
                        }
                    } else {
                        acc=await (async function(){
                             return await compile(tokens,ctx) 
                        })()
                    }
                } ();
                if (check_true (needs_await)){
                    return [(preamble && preamble["0"])," ",acc]
                } else {
                    return acc
                }
            };
            compile_block_to_anon_fn=async function(tokens,ctx,opts) {
                let acc;
                let preamble;
                acc=[];
                preamble=await calling_preamble(ctx);
                ctx=await new_ctx(ctx);
                await async function(){
                    ctx["return_point"]=0;
                    return ctx;
                    
                }();
                await async function(){
                    ctx["block_step"]=0;
                    return ctx;
                    
                }();
                await async function(){
                    if (check_true (await is_block_ques_(tokens))) {
                        {
                            await async function(){
                                ctx["return_last_value"]=true;
                                return ctx;
                                
                            }();
                            await async function(){
                                ctx["return_point"]=0;
                                return ctx;
                                
                            }();
                            return await (async function() {
                                let __for_body__221=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__222=[],__elements__220=["(",(preamble && preamble["1"])," ","function","()",await compile_block(tokens,ctx),")","()"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__219 in __elements__220) {
                                    __array__222.push(await __for_body__221(__elements__220[__iter__219]));
                                    if(__BREAK__FLAG__) {
                                         __array__222.pop();
                                        break;
                                        
                                    }
                                }return __array__222;
                                 
                            })()
                        }
                    } else if (check_true ((((tokens && tokens["0"] && tokens["0"]["name"])==="let")&& ((tokens && tokens["0"] && tokens["0"]["type"])==="special")))) {
                        {
                            await async function(){
                                ctx["return_last_value"]=true;
                                return ctx;
                                
                            }();
                            await async function(){
                                ctx["return_point"]=0;
                                return ctx;
                                
                            }();
                            await (async function() {
                                let __for_body__227=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__228=[],__elements__226=["(",(preamble && preamble["1"])," ","function","()",await (async function(){
                                     return await compile(tokens,ctx) 
                                })(),")","()"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__225 in __elements__226) {
                                    __array__228.push(await __for_body__227(__elements__226[__iter__225]));
                                    if(__BREAK__FLAG__) {
                                         __array__228.pop();
                                        break;
                                        
                                    }
                                }return __array__228;
                                 
                            })()
                        }
                    } else if (check_true ((((tokens && tokens["0"] && tokens["0"]["type"])==="special")&& (((tokens && tokens["0"] && tokens["0"]["name"])==="if")|| ((tokens && tokens["0"] && tokens["0"]["name"])==="try"))))) {
                        {
                            await (async function() {
                                let __for_body__231=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__232=[],__elements__230=["(",(preamble && preamble["1"])," ","function","() { ",await (async function(){
                                     return await compile(tokens,ctx) 
                                })(),"})","()"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__229 in __elements__230) {
                                    __array__232.push(await __for_body__231(__elements__230[__iter__229]));
                                    if(__BREAK__FLAG__) {
                                         __array__232.pop();
                                        break;
                                        
                                    }
                                }return __array__232;
                                 
                            })()
                        }
                    } else {
                        {
                            await async function(){
                                ctx["return_last_value"]=true;
                                return ctx;
                                
                            }();
                            await async function(){
                                ctx["return_point"]=0;
                                return ctx;
                                
                            }();
                            await (async function() {
                                let __for_body__237=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__238=[],__elements__236=["(",(preamble && preamble["1"])," ","function","()","{"," ","return"," ",await (async function(){
                                     return await compile(tokens,ctx) 
                                })()," ","}",")","()"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__235 in __elements__236) {
                                    __array__238.push(await __for_body__237(__elements__236[__iter__235]));
                                    if(__BREAK__FLAG__) {
                                         __array__238.pop();
                                        break;
                                        
                                    }
                                }return __array__238;
                                 
                            })()
                        }
                    }
                } ();
                return acc
            };
            make_do_block=async function(tokens) {
                let preamble;
                let place;
                preamble=await (async function(){
                     return await clone({
                        type:"arr",ref:false,name:null,val:[]
                    }) 
                })();
                place=(preamble && preamble["val"]);
                (place).push({
                    type:"special",val:await (async function(){
                         return "=:do" 
                    })(),ref:true,name:"do"
                });
                await async function(){
                    if (check_true ((tokens instanceof Array))) {
                        return await (async function() {
                            let __for_body__241=async function(token) {
                                return (place).push(token)
                            };
                            let __array__242=[],__elements__240=tokens;
                            let __BREAK__FLAG__=false;
                            for(let __iter__239 in __elements__240) {
                                __array__242.push(await __for_body__241(__elements__240[__iter__239]));
                                if(__BREAK__FLAG__) {
                                     __array__242.pop();
                                    break;
                                    
                                }
                            }return __array__242;
                             
                        })()
                    } else {
                        await (async function() {
                            let __for_body__245=async function(token) {
                                return (place).push(token)
                            };
                            let __array__246=[],__elements__244=await (async function(){
                                let __array_op_rval__247=tokens;
                                 if (__array_op_rval__247 instanceof Function){
                                    return await __array_op_rval__247() 
                                } else {
                                    return [__array_op_rval__247]
                                }
                            })();
                            let __BREAK__FLAG__=false;
                            for(let __iter__243 in __elements__244) {
                                __array__246.push(await __for_body__245(__elements__244[__iter__243]));
                                if(__BREAK__FLAG__) {
                                     __array__246.pop();
                                    break;
                                    
                                }
                            }return __array__246;
                             
                        })()
                    }
                } ();
                return preamble
            };
            push_as_arg_list=async function(place,args) {
                await map(async function(v,i,t) {
                    (place).push(v);
                    if (check_true ((i<=(t- 2)))){
                        {
                            return (place).push(",")
                        }
                    }
                },args);
                return place
            };
            compile_new=async function(tokens,ctx) {
                let acc;
                let prebuild;
                let target_type;
                let comps;
                let type_details;
                let root_type_details;
                let target_return_type;
                let new_arg_name;
                let args;
                let preamble;
                let new_opts;
                acc=[];
                prebuild=[];
                target_type=await clean_quoted_reference(await sanitize_js_ref_name((tokens && tokens["1"] && tokens["1"]["name"])));
                comps=await (await Environment.get_global("get_object_path"))(target_type);
                type_details=await get_declaration_details(ctx,target_type);
                root_type_details=await (async function(){
                    if (check_true (((comps && comps.length)>1))){
                        return await get_declaration_details(ctx,(comps && comps["0"]))
                    } else {
                        return null
                    }
                })();
                target_return_type=null;
                new_arg_name=null;
                args=[];
                ctx=await new_ctx(ctx);
                preamble=await calling_preamble(ctx);
                new_opts=await tokens["slice"].call(tokens,2);
                if (check_true (((comps && comps.length)>1))){
                    {
                        target_type=await (async function(){
                             return await (await Environment.get_global("path_to_js_syntax"))(comps) 
                        })()
                    }
                };
                await (async function() {
                    let __for_body__250=async function(opt_token) {
                        return (args).push(await compile_wrapper_fn(opt_token,ctx))
                    };
                    let __array__251=[],__elements__249=(new_opts|| []);
                    let __BREAK__FLAG__=false;
                    for(let __iter__248 in __elements__249) {
                        __array__251.push(await __for_body__250(__elements__249[__iter__248]));
                        if(__BREAK__FLAG__) {
                             __array__251.pop();
                            break;
                            
                        }
                    }return __array__251;
                     
                })();
                await async function(){
                    if (check_true ((await not((null==(type_details && type_details["value"])))&& (type_details && type_details["declared_global"])))) {
                        {
                            await (async function() {
                                let __for_body__254=async function(arg) {
                                    return (acc).push(arg)
                                };
                                let __array__255=[],__elements__253=["new"," ",await (async function(){
                                     return await compile((tokens && tokens["1"]),ctx) 
                                })(),"("];
                                let __BREAK__FLAG__=false;
                                for(let __iter__252 in __elements__253) {
                                    __array__255.push(await __for_body__254(__elements__253[__iter__252]));
                                    if(__BREAK__FLAG__) {
                                         __array__255.pop();
                                        break;
                                        
                                    }
                                }return __array__255;
                                 
                            })();
                            await push_as_arg_list(acc,args);
                            return (acc).push(")")
                        }
                    } else if (check_true ((await not((null==(type_details && type_details["value"])))&& (type_details && type_details["value"]) instanceof Function))) {
                        {
                            await (async function() {
                                let __for_body__258=async function(arg) {
                                    return (acc).push(arg)
                                };
                                let __array__259=[],__elements__257=["new"," ",target_type,"("];
                                let __BREAK__FLAG__=false;
                                for(let __iter__256 in __elements__257) {
                                    __array__259.push(await __for_body__258(__elements__257[__iter__256]));
                                    if(__BREAK__FLAG__) {
                                         __array__259.pop();
                                        break;
                                        
                                    }
                                }return __array__259;
                                 
                            })();
                            await push_as_arg_list(acc,args);
                            (acc).push(")")
                        }
                    } else if (check_true (((null==(type_details && type_details["value"]))&& await not((null==(root_type_details && root_type_details["value"])))))) {
                        {
                            await (async function() {
                                let __for_body__262=async function(arg) {
                                    return (acc).push(arg)
                                };
                                let __array__263=[],__elements__261=["(",(preamble && preamble["0"])," ",env_ref,"get_global","(","\"","indirect_new","\"",")",")","(",target_type];
                                let __BREAK__FLAG__=false;
                                for(let __iter__260 in __elements__261) {
                                    __array__263.push(await __for_body__262(__elements__261[__iter__260]));
                                    if(__BREAK__FLAG__) {
                                         __array__263.pop();
                                        break;
                                        
                                    }
                                }return __array__263;
                                 
                            })();
                            if (check_true (((args && args.length)>0))){
                                {
                                    (acc).push(",");
                                    await push_as_arg_list(acc,args)
                                }
                            };
                            (acc).push(")")
                        }
                    } else {
                        {
                            await (async function() {
                                let __for_body__266=async function(arg) {
                                    return (acc).push(arg)
                                };
                                let __array__267=[],__elements__265=["new"," ",(tokens && tokens["1"] && tokens["1"]["name"]),"("];
                                let __BREAK__FLAG__=false;
                                for(let __iter__264 in __elements__265) {
                                    __array__267.push(await __for_body__266(__elements__265[__iter__264]));
                                    if(__BREAK__FLAG__) {
                                         __array__267.pop();
                                        break;
                                        
                                    }
                                }return __array__267;
                                 
                            })();
                            await push_as_arg_list(acc,args);
                            (acc).push(")")
                        }
                    }
                } ();
                target_return_type=(await get_ctx_val(ctx,target_type)|| await (async function(){
                    let __targ__268=(await get_declarations(ctx,target_type)|| new Object());
                    if (__targ__268){
                         return(__targ__268)["type"]
                    } 
                })()|| await (await Environment.get_global("get_outside_global"))(target_type)|| UnknownType);
                (acc).unshift({
                    ctype:target_return_type
                });
                return acc
            };
            compile_val_mod=async function(tokens,ctx) {
                let target;
                let target_location;
                let comps;
                let target_details;
                let in_infix;
                let operation;
                let mod_source;
                let how_much;
                target=((tokens && tokens["1"] && tokens["1"]["name"])|| await (async function(){
                    throw new SyntaxError(await add((tokens && tokens["0"] && tokens["0"]["name"])," requires at least one argument indicating the symbol which value is to be modified"));
                    
                })());
                target_location=await (async function(){
                     return await async function(){
                        if (check_true (await get_ctx(ctx,(tokens && tokens["1"] && tokens["1"]["name"])))) {
                            return "local"
                        } else if (check_true (await get_lisp_ctx(ctx,(tokens && tokens["1"] && tokens["1"]["name"])))) {
                            return "global"
                        }
                    } () 
                })();
                comps=(target).split(".");
                target_details=await get_declaration_details(ctx,await first(comps));
                in_infix=await get_ctx_val(ctx,"__COMP_INFIX_OPS__");
                operation=await (async function(){
                    if (check_true (in_infix)){
                        return await async function(){
                            if (check_true (((tokens && tokens["0"] && tokens["0"]["name"])==="inc"))) {
                                return "+"
                            } else if (check_true (((tokens && tokens["0"] && tokens["0"]["name"])==="dec"))) {
                                return "-"
                            } else {
                                throw new SyntaxError(("Invalid value modification operator: "+ (tokens && tokens["0"] && tokens["0"]["name"])));
                                
                            }
                        } ()
                    } else {
                        return await async function(){
                            if (check_true (((target_location==="local")&& ((tokens && tokens["0"] && tokens["0"]["name"])==="inc")))) {
                                return "+="
                            } else if (check_true (((target_location==="local")&& ((tokens && tokens["0"] && tokens["0"]["name"])==="dec")))) {
                                return "-="
                            } else if (check_true (((tokens && tokens["0"] && tokens["0"]["name"])==="inc"))) {
                                return "+"
                            } else {
                                return "-"
                            }
                        } ()
                    }
                })();
                mod_source=null;
                how_much=(((tokens && tokens["2"])&& await (async function(){
                     return await compile((tokens && tokens["2"]),ctx) 
                })())|| 1);
                if (check_true ((undefined===target_details))){
                    throw new ReferenceError(("unknown symbol: "+ (comps && comps["0"])));
                    
                };
                return await async function(){
                    if (check_true ((target_location==="global"))) {
                        {
                            has_lisp_globals=true;
                            return ["(","await"," ",env_ref,"set_global(\"",target,"\",","await"," ",env_ref,"get_global(\"",target,"\")"," ",operation," ",how_much,"))"]
                        }
                    } else if (check_true (in_infix)) {
                        {
                            return ["(",target,"=",target,operation,how_much,")"]
                        }
                    } else {
                        return await (async function(){
                            let __array_op_rval__269=target;
                             if (__array_op_rval__269 instanceof Function){
                                return await __array_op_rval__269(operation,how_much) 
                            } else {
                                return [__array_op_rval__269,operation,how_much]
                            }
                        })()
                    }
                } ()
            };
            compile_try=async function(tokens,ctx) {
                if (check_true ((null==(ctx && ctx["block_step"])))){
                    return await compile_block(await ensure_block(tokens),ctx)
                } else {
                    return await compile_try_inner(tokens,ctx)
                }
            };
            compile_try_inner=async function(tokens,ctx) {
                let acc;
                let try_block;
                let compiled_try_block;
                let catch_block;
                let idx;
                let exception_ref;
                let base_error_caught;
                let catch_stmts;
                let catches;
                let compile_catch;
                acc=[];
                try_block=await (async function(){
                     return await async function(){
                        if (check_true (((tokens && tokens["1"])&& (null==(tokens && tokens["1"] && tokens["1"]["val"]))))) {
                            return (tokens && tokens["1"])
                        } else if (check_true ((tokens && tokens["1"]))) {
                            return (tokens && tokens["1"] && tokens["1"]["val"])
                        }
                    } () 
                })();
                compiled_try_block=null;
                catch_block=null;
                idx=-1;
                exception_ref=await gen_temp_name("exception");
                base_error_caught=false;
                catch_stmts=[];
                catches=await tokens["slice"].call(tokens,2);
                compile_catch=async function(catch_block) {
                    let throwable_type;
                    let throwable_ref;
                    let catch_statements;
                    let stmts;
                    let subacc;
                    throwable_type=(catch_block && catch_block["1"] && catch_block["1"]["name"]);
                    throwable_ref=(catch_block && catch_block["2"] && catch_block["2"]["val"] && catch_block["2"]["val"]["0"] && catch_block["2"]["val"]["0"]["name"]);
                    catch_statements=(catch_block && catch_block["3"]);
                    stmts=null;
                    subacc=[];
                    ctx=await new_ctx(ctx);
                    await set_ctx(ctx,throwable_ref,(await Environment.get_global("indirect_new"))(catch_block['1'].name));
                    if (check_true ((throwable_type==="Error"))){
                        {
                            base_error_caught=true
                        }
                    };
                    stmts=await compile_block(await ensure_block(catch_statements),ctx);
                    if (check_true ((idx>0))){
                        (subacc).push([" ","else"," "])
                    };
                    (subacc).push(["if (",exception_ref," instanceof ",throwable_type,") ","{","let ",throwable_ref,"=",exception_ref,";",stmts,"}"]);
                    if (check_true (((idx===((catches && catches.length)- 1))&& await not(base_error_caught)))){
                        {
                            (subacc).push([" ","else"," "]);
                            (subacc).push(await (async function(){
                                 return [{
                                    completion:"throw"
                                },"throw"," ",exception_ref,";"] 
                            })())
                        }
                    };
                    return subacc
                };
                await async function(){
                    if (check_true (((tokens && tokens.length)<2))) {
                        throw new SyntaxError("invalid try form: missing try block");
                        
                    } else if (check_true (((null==catches)|| ((catches && catches.length)<1)))) {
                        throw new SyntaxError("invalid catch block: missing catch");
                        
                    }
                } ();
                compiled_try_block=await compile_block(await ensure_block(try_block),ctx);
                (acc).push({
                    ctype:"tryblock"
                });
                (acc).push(["try"," ",compiled_try_block]);
                (catch_stmts).push([" ","catch"," ","(",exception_ref,")"," "]);
                (catch_stmts).push("{");
                await (async function(){
                     let __test_condition__270=async function() {
                        return (idx<((catches && catches.length)- 1))
                    };
                    let __body_ref__271=async function() {
                        idx+=1;
                        catch_block=await (async function(){
                            let __targ__272=catches[idx];
                            if (__targ__272){
                                 return(__targ__272)["val"]
                            } 
                        })();
                        if (check_true ((catch_block instanceof Array))){
                            return (catch_stmts).push(await compile_catch(catch_block))
                        } else {
                            throw new SyntaxError("invalid catch form");
                            
                        }
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__270()) {
                        await __body_ref__271();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                (catch_stmts).push("}");
                (acc).push(catch_stmts);
                return acc
            };
            compile_throw=async function(tokens,ctx) {
                let acc;
                let error_message;
                let mode;
                let cmp_rec;
                let error_instance;
                acc=[];
                error_message=null;
                mode=1;
                cmp_rec=await get_ctx(ctx,"__COMPLETION_SCOPE__");
                error_instance=null;
                await (await Environment.get_global("assert"))(cmp_rec,"compiler error: throw unable to find completion scope in context");
                await async function(){
                    if (check_true (((tokens instanceof Array)&& ((tokens && tokens.length)===2)&& (tokens && tokens["1"] && tokens["1"]["ref"])))) {
                        {
                            mode=0;
                            return error_instance=await (async function(){
                                 return await compile((tokens && tokens["1"]),ctx) 
                            })()
                        }
                    } else if (check_true (((tokens instanceof Array)&& ((tokens && tokens.length)===3)))) {
                        {
                            error_instance=await (async function(){
                                 return await compile((tokens && tokens["1"]),ctx) 
                            })();
                            error_message=await (async function(){
                                 return await compile((tokens && tokens["2"]),ctx) 
                            })()
                        }
                    } else if (check_true (((tokens instanceof Array)&& ((tokens && tokens.length)===2)))) {
                        {
                            error_message=await (async function(){
                                 return await compile((tokens && tokens["1"]),ctx) 
                            })();
                            error_instance="Error"
                        }
                    } else {
                        throw new SyntaxError("Invalid Throw Syntax");
                        
                    }
                } ();
                if (check_true ((mode===0))){
                    await (async function() {
                        let __for_body__275=async function(t) {
                            return (acc).push(t)
                        };
                        let __array__276=[],__elements__274=await (async function(){
                             return [{
                                completion:"throw"
                            },"throw"," ",error_instance,";"] 
                        })();
                        let __BREAK__FLAG__=false;
                        for(let __iter__273 in __elements__274) {
                            __array__276.push(await __for_body__275(__elements__274[__iter__273]));
                            if(__BREAK__FLAG__) {
                                 __array__276.pop();
                                break;
                                
                            }
                        }return __array__276;
                         
                    })()
                } else {
                    await (async function() {
                        let __for_body__279=async function(t) {
                            return (acc).push(t)
                        };
                        let __array__280=[],__elements__278=await (async function(){
                             return [{
                                completion:"throw"
                            },"throw"," ","new"," ",error_instance,"(",error_message,")",";"] 
                        })();
                        let __BREAK__FLAG__=false;
                        for(let __iter__277 in __elements__278) {
                            __array__280.push(await __for_body__279(__elements__278[__iter__277]));
                            if(__BREAK__FLAG__) {
                                 __array__280.pop();
                                break;
                                
                            }
                        }return __array__280;
                         
                    })()
                };
                ((cmp_rec && cmp_rec["completion_records"])).push({
                    block_id:(ctx && ctx["block_id"]),type:"throw",block_step:(ctx && ctx["block_step"]),stmt:acc
                });
                return acc
            };
            compile_break=async function(tokens,ctx) {
                return await (async function(){
                    let __array_op_rval__281=break_out;
                     if (__array_op_rval__281 instanceof Function){
                        return await __array_op_rval__281("=","true",";","return") 
                    } else {
                        return [__array_op_rval__281,"=","true",";","return"]
                    }
                })()
            };
            compile_return=async function(tokens,ctx) {
                let acc;
                let return_val_reference;
                let return_value;
                let cmp_rec;
                acc=[];
                return_val_reference=await gen_temp_name("return");
                return_value=null;
                cmp_rec=await get_ctx(ctx,"__COMPLETION_SCOPE__");
                await (await Environment.get_global("assert"))(cmp_rec,"compiler error: compile_return: no completion scope record found");
                if (check_true (await is_block_ques_((tokens && tokens["1"] && tokens["1"]["val"])))){
                    {
                        (acc).push(["let"," ",return_val_reference,"=",await (async function(){
                             return await compile((tokens && tokens["1"] && tokens["1"]["val"]),ctx) 
                        })(),";"]);
                        (acc).push(await (async function(){
                             return [{
                                completion:"return"
                            },"return"," ",return_val_reference,";"] 
                        })())
                    }
                } else {
                    {
                        await (async function() {
                            let __for_body__284=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__285=[],__elements__283=["return"," ",await (async function(){
                                 return await compile((tokens && tokens["1"]),ctx) 
                            })(),";"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__282 in __elements__283) {
                                __array__285.push(await __for_body__284(__elements__283[__iter__282]));
                                if(__BREAK__FLAG__) {
                                     __array__285.pop();
                                    break;
                                    
                                }
                            }return __array__285;
                             
                        })()
                    }
                };
                ((cmp_rec && cmp_rec["completion_records"])).push({
                    block_id:(ctx && ctx["block_id"]),block_step:(ctx && ctx["block_step"]),type:"return",stmt:await last(acc)
                });
                return acc
            };
            apply_log=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    return log
                } else {
                    return await defclog({
                        prefix:"compile_apply",background:"sienna",color:"white"
                    })
                }
            })();
            compile_apply=async function(tokens,ctx) {
                let acc;
                let fn_ref;
                let complex_ques_;
                let args_ref;
                let function_ref;
                let target_argument_ref;
                let target_arg;
                let ctype;
                let preceding_arg_ref;
                let preamble;
                let requires_await;
                let compiled_fun_resolver;
                let args;
                acc=[];
                fn_ref=(tokens && tokens["1"]);
                complex_ques_=false;
                args_ref=await gen_temp_name("apply_args");
                function_ref=await gen_temp_name("apply_fn");
                target_argument_ref=null;
                target_arg=null;
                ctype=null;
                preceding_arg_ref=null;
                preamble=await calling_preamble(ctx);
                requires_await=false;
                ctx=await new_ctx(ctx);
                compiled_fun_resolver=null;
                args=await tokens["slice"].call(tokens,2);
                ;
                await set_new_completion_scope(ctx);
                if (check_true ((args&& ((args && args.length)===1)))){
                    {
                        args=await first(args)
                    }
                };
                function_ref=await compile_wrapper_fn(fn_ref,ctx);
                if (check_true ((fn_ref && fn_ref["ref"]))){
                    {
                        ctype=await get_declaration_details(ctx,(fn_ref && fn_ref["name"]))
                    }
                };
                if (check_true ((ctype && ctype["value"]) instanceof Function)){
                    {
                        requires_await=true
                    }
                };
                if (check_true ((args instanceof Array))){
                    {
                        target_argument_ref=await gen_temp_name("target_arg");
                        target_arg=(args).pop();
                        await (async function() {
                            let __for_body__288=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__289=[],__elements__287=["let"," ",target_argument_ref,"=","[]",".concat","(",await (async function(){
                                 return await compile(target_arg,ctx) 
                            })(),")",";"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__286 in __elements__287) {
                                __array__289.push(await __for_body__288(__elements__287[__iter__286]));
                                if(__BREAK__FLAG__) {
                                     __array__289.pop();
                                    break;
                                    
                                }
                            }return __array__289;
                             
                        })();
                        await (async function() {
                            let __for_body__292=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__293=[],__elements__291=["if","(","!",target_argument_ref," ","instanceof"," ","Array",")","{","throw"," ","new"," ","TypeError","(","\"Invalid final argument to apply - an array is required\"",")","}"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__290 in __elements__291) {
                                __array__293.push(await __for_body__292(__elements__291[__iter__290]));
                                if(__BREAK__FLAG__) {
                                     __array__293.pop();
                                    break;
                                    
                                }
                            }return __array__293;
                             
                        })();
                        await (async function() {
                            let __for_body__296=async function(token) {
                                preceding_arg_ref=await gen_temp_name("pre_arg");
                                if (check_true (await is_form_ques_(token))){
                                    {
                                        await (async function() {
                                            let __for_body__300=async function(t) {
                                                return (acc).push(t)
                                            };
                                            let __array__301=[],__elements__299=["let"," ",preceding_arg_ref,"=",await compile_wrapper_fn(token,ctx),";"];
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__298 in __elements__299) {
                                                __array__301.push(await __for_body__300(__elements__299[__iter__298]));
                                                if(__BREAK__FLAG__) {
                                                     __array__301.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__301;
                                             
                                        })()
                                    }
                                } else {
                                    preceding_arg_ref=await compile_wrapper_fn(token,ctx)
                                };
                                return (acc).push(await (async function(){
                                    let __array_op_rval__302=target_argument_ref;
                                     if (__array_op_rval__302 instanceof Function){
                                        return await __array_op_rval__302(".unshift","(",preceding_arg_ref,")",";") 
                                    } else {
                                        return [__array_op_rval__302,".unshift","(",preceding_arg_ref,")",";"]
                                    }
                                })())
                            };
                            let __array__297=[],__elements__295=args;
                            let __BREAK__FLAG__=false;
                            for(let __iter__294 in __elements__295) {
                                __array__297.push(await __for_body__296(__elements__295[__iter__294]));
                                if(__BREAK__FLAG__) {
                                     __array__297.pop();
                                    break;
                                    
                                }
                            }return __array__297;
                             
                        })();
                        await (async function() {
                            let __for_body__305=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__306=[],__elements__304=["return"," ","(",function_ref,")",".","apply","(","this",",",target_argument_ref,")"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__303 in __elements__304) {
                                __array__306.push(await __for_body__305(__elements__304[__iter__303]));
                                if(__BREAK__FLAG__) {
                                     __array__306.pop();
                                    break;
                                    
                                }
                            }return __array__306;
                             
                        })()
                    }
                } else {
                    {
                        if (check_true (await is_form_ques_(args))){
                            {
                                await (async function() {
                                    let __for_body__309=async function(t) {
                                        return (acc).push(t)
                                    };
                                    let __array__310=[],__elements__308=["let"," ",args_ref,"=",await compile_wrapper_fn((args && args["val"]),ctx),";"];
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__307 in __elements__308) {
                                        __array__310.push(await __for_body__309(__elements__308[__iter__307]));
                                        if(__BREAK__FLAG__) {
                                             __array__310.pop();
                                            break;
                                            
                                        }
                                    }return __array__310;
                                     
                                })();
                                complex_ques_=true
                            }
                        };
                        await (async function() {
                            let __for_body__313=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__314=[],__elements__312=["return"," ","("," ",function_ref,")",".","apply","(","this"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__311 in __elements__312) {
                                __array__314.push(await __for_body__313(__elements__312[__iter__311]));
                                if(__BREAK__FLAG__) {
                                     __array__314.pop();
                                    break;
                                    
                                }
                            }return __array__314;
                             
                        })();
                        if (check_true (args)){
                            {
                                (acc).push(",");
                                if (check_true (complex_ques_)){
                                    (acc).push(args_ref)
                                } else {
                                    (acc).push(await compile_wrapper_fn(args,ctx))
                                }
                            }
                        };
                        (acc).push(")")
                    }
                };
                return [(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()","{",acc,"}",")","()"]
            };
            compile_call=async function(tokens,ctx) {
                let preamble;
                let simple_target_ques_;
                let simple_method_ques_;
                preamble=await calling_preamble(ctx);
                simple_target_ques_=await (async function(){
                    if (check_true (((tokens && tokens["1"] && tokens["1"]["ref"])===true))){
                        return true
                    } else {
                        return false
                    }
                })();
                simple_method_ques_=await (async function(){
                    if (check_true (((tokens && tokens["2"] && tokens["2"]["type"])==="literal"))){
                        return true
                    } else {
                        return false
                    }
                })();
                ctx=ctx;
                ;
                return await async function(){
                    if (check_true ((simple_target_ques_&& simple_method_ques_))) {
                        return await compile_call_inner(tokens,ctx,{
                            type:0,preamble:preamble
                        })
                    } else if (check_true (simple_target_ques_)) {
                        return await compile_call_inner(tokens,ctx,{
                            type:0,preamble:preamble
                        })
                    } else {
                        {
                            ctx=await new_ctx(ctx);
                            await set_new_completion_scope(ctx);
                            return [(preamble && preamble["2"]),(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{",await compile_call_inner(tokens,ctx,{
                                type:2,preamble:preamble
                            })," ","}",")","()"]
                        }
                    }
                } ()
            };
            compile_call_inner=async function(tokens,ctx,opts) {
                let acc;
                let target;
                let idx;
                let preamble;
                let add_args;
                let method;
                acc=[];
                target=null;
                idx=-1;
                preamble=(opts && opts["preamble"]);
                add_args=async function() {
                    return await (async function() {
                        let __for_body__317=async function(token) {
                            (acc).push(",");
                            return (acc).push(await compile_wrapper_fn(token,ctx))
                        };
                        let __array__318=[],__elements__316=await tokens["slice"].call(tokens,3);
                        let __BREAK__FLAG__=false;
                        for(let __iter__315 in __elements__316) {
                            __array__318.push(await __for_body__317(__elements__316[__iter__315]));
                            if(__BREAK__FLAG__) {
                                 __array__318.pop();
                                break;
                                
                            }
                        }return __array__318;
                         
                    })()
                };
                method=null;
                if (check_true (((tokens && tokens.length)<3))){
                    {
                        throw new SyntaxError(("call: missing arguments, requires at least 2"));
                        
                    }
                };
                target=await compile_wrapper_fn((tokens && tokens["1"]),ctx);
                method=await compile_wrapper_fn((tokens && tokens["2"]),ctx);
                await async function(){
                    if (check_true ((((opts && opts["type"])===0)|| ((opts && opts["type"])===1)))) {
                        {
                            return await async function(){
                                if (check_true (((tokens && tokens.length)===3))) {
                                    return await (async function() {
                                        let __for_body__321=async function(t) {
                                            return (acc).push(t)
                                        };
                                        let __array__322=[],__elements__320=await (async function(){
                                            let __array_op_rval__323=(preamble && preamble["0"]);
                                             if (__array_op_rval__323 instanceof Function){
                                                return await __array_op_rval__323(" ",target,"[",method,"]","()") 
                                            } else {
                                                return [__array_op_rval__323," ",target,"[",method,"]","()"]
                                            }
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__319 in __elements__320) {
                                            __array__322.push(await __for_body__321(__elements__320[__iter__319]));
                                            if(__BREAK__FLAG__) {
                                                 __array__322.pop();
                                                break;
                                                
                                            }
                                        }return __array__322;
                                         
                                    })()
                                } else {
                                    {
                                        await (async function() {
                                            let __for_body__326=async function(t) {
                                                return (acc).push(t)
                                            };
                                            let __array__327=[],__elements__325=await (async function(){
                                                let __array_op_rval__328=(preamble && preamble["0"]);
                                                 if (__array_op_rval__328 instanceof Function){
                                                    return await __array_op_rval__328(" ",target,"[",method,"]",".call","(",target) 
                                                } else {
                                                    return [__array_op_rval__328," ",target,"[",method,"]",".call","(",target]
                                                }
                                            })();
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__324 in __elements__325) {
                                                __array__327.push(await __for_body__326(__elements__325[__iter__324]));
                                                if(__BREAK__FLAG__) {
                                                     __array__327.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__327;
                                             
                                        })();
                                        await add_args();
                                        return (acc).push(")")
                                    }
                                }
                            } ()
                        }
                    } else if (check_true (((opts && opts["type"])===2))) {
                        {
                            await (async function() {
                                let __for_body__331=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__332=[],__elements__330=["{"," ","let"," ","__call_target__","=",target,","," ","__call_method__","=",method,";"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__329 in __elements__330) {
                                    __array__332.push(await __for_body__331(__elements__330[__iter__329]));
                                    if(__BREAK__FLAG__) {
                                         __array__332.pop();
                                        break;
                                        
                                    }
                                }return __array__332;
                                 
                            })();
                            await async function(){
                                if (check_true (((tokens && tokens.length)===3))) {
                                    return await (async function() {
                                        let __for_body__335=async function(t) {
                                            return (acc).push(t)
                                        };
                                        let __array__336=[],__elements__334=["return"," ",(preamble && preamble["0"])," ","__call_target__","[","__call_method__","]","()"];
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__333 in __elements__334) {
                                            __array__336.push(await __for_body__335(__elements__334[__iter__333]));
                                            if(__BREAK__FLAG__) {
                                                 __array__336.pop();
                                                break;
                                                
                                            }
                                        }return __array__336;
                                         
                                    })()
                                } else {
                                    {
                                        await (async function() {
                                            let __for_body__339=async function(t) {
                                                return (acc).push(t)
                                            };
                                            let __array__340=[],__elements__338=["return"," ",(preamble && preamble["0"])," ","__call_target__","[","__call_method__","]",".","call","(","__call_target__"];
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__337 in __elements__338) {
                                                __array__340.push(await __for_body__339(__elements__338[__iter__337]));
                                                if(__BREAK__FLAG__) {
                                                     __array__340.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__340;
                                             
                                        })();
                                        await add_args();
                                        (acc).push(")")
                                    }
                                }
                            } ();
                            (acc).push("}")
                        }
                    }
                } ();
                return acc
            };
            check_needs_wrap=async function(stmts) {
                let fst;
                fst=(((stmts instanceof Array)&& await first(stmts)&& (await first(stmts) instanceof Object)&& await not(await (async function(){
                    let __targ__341=await first(stmts);
                    if (__targ__341){
                         return(__targ__341)["ctype"]
                    } 
                })() instanceof Function)&& await (async function(){
                    let __targ__342=await first(stmts);
                    if (__targ__342){
                         return(__targ__342)["ctype"]
                    } 
                })()&& await (async function(){
                     return await async function(){
                        if (check_true ((await (async function(){
                            let __targ__343=await first(stmts);
                            if (__targ__343){
                                 return(__targ__343)["ctype"]
                            } 
                        })() instanceof String || typeof await (async function(){
                            let __targ__343=await first(stmts);
                            if (__targ__343){
                                 return(__targ__343)["ctype"]
                            } 
                        })()==='string'))) {
                            return await (async function(){
                                let __targ__344=await first(stmts);
                                if (__targ__344){
                                     return(__targ__344)["ctype"]
                                } 
                            })()
                        } else {
                            return await sub_type(await (async function(){
                                let __targ__345=await first(stmts);
                                if (__targ__345){
                                     return(__targ__345)["ctype"]
                                } 
                            })())
                        }
                    } () 
                })())|| "");
                await console.warn("DEPRECATION: check_needs_wrap called: ",stmts);
                return await async function(){
                    if (check_true (await contains_ques_("block",fst))) {
                        return true
                    } else {
                        return false
                    }
                } ()
            };
            compile_import=async function(tokens,ctx) {
                let symbol_tokens;
                let __symbols__346= async function(){
                    return []
                };
                let from_tokens;
                let from_place;
                let acc;
                {
                    symbol_tokens=(tokens && tokens["1"]);
                    let symbols=await __symbols__346();
                    ;
                    from_tokens=null;
                    from_place=null;
                    acc=[];
                    if (check_true (((tokens && tokens.length)<3))){
                        throw new SyntaxError("import requires exactly two arguments");
                        
                    };
                    symbol_tokens=(tokens && tokens["1"]);
                    from_tokens=(tokens && tokens["2"]);
                    from_place=await (async function(){
                         return await compile(from_tokens,ctx) 
                    })();
                    (acc).push({
                        ctype:"statement",meta:{
                            imported_from:from_place
                        }
                    });
                    (acc).push("import");
                    (acc).push(" ");
                    await async function(){
                        if (check_true (((symbol_tokens && symbol_tokens["val"]) instanceof Array))) {
                            {
                                await (async function() {
                                    let __for_body__349=async function(s) {
                                        return (symbols).push((s && s.name))
                                    };
                                    let __array__350=[],__elements__348=(symbol_tokens && symbol_tokens["val"]);
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__347 in __elements__348) {
                                        __array__350.push(await __for_body__349(__elements__348[__iter__347]));
                                        if(__BREAK__FLAG__) {
                                             __array__350.pop();
                                            break;
                                            
                                        }
                                    }return __array__350;
                                     
                                })();
                                return await (async function() {
                                    let __for_body__353=async function(t) {
                                        return (acc).push(t)
                                    };
                                    let __array__354=[],__elements__352=await flatten(["{"," ",symbols," ","}"," ","from"," ",from_place]);
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__351 in __elements__352) {
                                        __array__354.push(await __for_body__353(__elements__352[__iter__351]));
                                        if(__BREAK__FLAG__) {
                                             __array__354.pop();
                                            break;
                                            
                                        }
                                    }return __array__354;
                                     
                                })()
                            }
                        } else {
                            throw new SyntaxError("import requires an array of imported symbols as a second argument");
                            
                        }
                    } ();
                    return acc
                }
            };
            compile_dynamic_import=async function(tokens,ctx) {
                let from_tokens;
                let preamble;
                let from_place;
                let can_be_static;
                let metaval;
                let imported_from;
                let acc;
                from_tokens=null;
                preamble=await calling_preamble(ctx);
                from_place=null;
                can_be_static=false;
                metaval=null;
                imported_from=null;
                acc=[];
                ;
                from_tokens=(tokens && tokens["1"]);
                from_place=await compile_wrapper_fn(from_tokens,ctx);
                imported_from=await (async function(){
                    if (check_true ((from_place instanceof Array))){
                        return (from_place && from_place["1"])
                    } else {
                        return from_place
                    }
                })();
                if (check_true (((imported_from instanceof String || typeof imported_from==='string')&& await starts_with_ques_("\"",imported_from)&& await (await Environment.get_global("ends_with?"))("\"",imported_from)))){
                    {
                        can_be_static=true;
                        imported_from=await imported_from["substr"].call(imported_from,1,((imported_from && imported_from.length)- 2))
                    }
                };
                await async function(){
                    external_dependencies[imported_from]=true;
                    return external_dependencies;
                    
                }();
                metaval=await (async function(){
                    if (check_true (can_be_static)){
                        return {
                            initializer:await (async function(){
                                 return ["=:javascript","undefined"] 
                            })()
                        }
                    } else {
                        return new Object()
                    }
                })();
                (acc).push({
                    ctype:"statement",meta:metaval
                });
                await (async function() {
                    let __for_body__358=async function(t) {
                        return (acc).push(t)
                    };
                    let __array__359=[],__elements__357=await flatten([(preamble && preamble["0"])," ","import"," ","(",from_place,")"]);
                    let __BREAK__FLAG__=false;
                    for(let __iter__356 in __elements__357) {
                        __array__359.push(await __for_body__358(__elements__357[__iter__356]));
                        if(__BREAK__FLAG__) {
                             __array__359.pop();
                            break;
                            
                        }
                    }return __array__359;
                     
                })();
                return acc
            };
            compile_javascript=async function(tokens,ctx) {
                let acc;
                let text;
                acc=[];
                text=null;
                await (async function() {
                    let __for_body__362=async function(t) {
                        return await async function(){
                            if (check_true ((t && t["ref"]))) {
                                return (acc).push((t && t.name))
                            } else if (check_true (((t && t["val"]) instanceof Array))) {
                                return (acc).push(await (async function(){
                                     return await compile(t,ctx) 
                                })())
                            } else {
                                return (acc).push((t && t["val"]))
                            }
                        } ()
                    };
                    let __array__363=[],__elements__361=(await (await Environment.get_global("rest"))(tokens)|| []);
                    let __BREAK__FLAG__=false;
                    for(let __iter__360 in __elements__361) {
                        __array__363.push(await __for_body__362(__elements__361[__iter__360]));
                        if(__BREAK__FLAG__) {
                             __array__363.pop();
                            break;
                            
                        }
                    }return __array__363;
                     
                })();
                return acc
            };
            compile_set_global=async function(tokens,ctx,opts) {
                let target;
                let wrap_as_function_ques_;
                let global_dependencies;
                let preamble;
                let acc;
                let clog;
                let metavalue;
                let assignment_value;
                target=(tokens && tokens["1"] && tokens["1"]["name"]);
                wrap_as_function_ques_=null;
                ctx=await new_ctx(ctx);
                global_dependencies=null;
                preamble=await calling_preamble(ctx);
                acc=null;
                clog=await (async function(){
                    if (check_true ((opts && opts["quiet_mode"]))){
                        return log
                    } else {
                        return await defclog({
                            prefix:"compile_set_global",color:"blue",background:"#205020"
                        })
                    }
                })();
                metavalue=null;
                assignment_value=null;
                ;
                await async function(){
                    if (check_true ((null==(tokens && tokens["1"])))) {
                        throw new SyntaxError("set global directive missing assignment target and assignment value");
                        
                    } else if (check_true ((null==(tokens && tokens["2"])))) {
                        throw new SyntaxError("set global directive missing assignment value");
                        
                    }
                } ();
                has_lisp_globals=true;
                await set_ctx(ctx,"__GLOBALS__",new Set());
                await async function(){
                    let __target_obj__364=(root_ctx && root_ctx["defined_lisp_globals"]);
                    __target_obj__364[target]=AsyncFunction;
                    return __target_obj__364;
                    
                }();
                assignment_value=await (async function(){
                    return await compile_wrapper_fn((tokens && tokens["2"]),ctx)
                })();
                global_dependencies=await (async function(){
                     return await (await Environment.get_global("to_array"))(await get_ctx(ctx,"__GLOBALS__")) 
                })();
                if (check_true (((global_dependencies && global_dependencies.length)>0))){
                    {
                        await async function(){
                            if (check_true ((null==(tokens && tokens["3"])))) {
                                return (tokens).push(await tokenize({
                                    requires:global_dependencies
                                },ctx))
                            } else if (check_true (((tokens && tokens["3"] && tokens["3"]["val"] && tokens["3"]["val"]["val"] && tokens["3"]["val"]["val"]["1"]) instanceof Object))) {
                                await async function(){
                                    let __target_obj__365=(tokens && tokens["3"] && tokens["3"]["val"] && tokens["3"]["val"]["val"] && tokens["3"]["val"]["val"]["1"]);
                                    __target_obj__365["requires"]=global_dependencies;
                                    return __target_obj__365;
                                    
                                }()
                            } else if (check_true ((((tokens && tokens["3"] && tokens["3"]["val"]) instanceof Array)&& ((tokens && tokens["3"] && tokens["3"]["type"])==="objlit")))) {
                                {
                                    global_dependencies=await tokenize({
                                        requires:global_dependencies
                                    },ctx);
                                    ((tokens && tokens["3"] && tokens["3"]["val"])).push((global_dependencies && global_dependencies["val"] && global_dependencies["val"]["0"]))
                                }
                            }
                        } ()
                    }
                };
                if (check_true ((tokens && tokens["3"]))){
                    {
                        metavalue=await (async function(){
                            if (check_true (await is_complex_ques_((tokens && tokens["3"])))){
                                return await compile_wrapper_fn((tokens && tokens["3"]),ctx)
                            } else {
                                return await compile((tokens && tokens["3"]),ctx)
                            }
                        })()
                    }
                };
                await async function(){
                    if (check_true ((((assignment_value && assignment_value["0"]) instanceof Object)&& (assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])))) {
                        {
                            if (check_true ((assignment_value && assignment_value["0"] && assignment_value["0"]["meta"]))){
                                {
                                    if (check_true (await not(metavalue))){
                                        {
                                            metavalue=await quote_tree((assignment_value && assignment_value["0"] && assignment_value["0"]["meta"]),ctx)
                                        }
                                    }
                                }
                            };
                            return await async function(){
                                let __target_obj__366=(root_ctx && root_ctx["defined_lisp_globals"]);
                                __target_obj__366[target]=await (async function(){
                                     return await async function(){
                                        if (check_true (((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])==="Function"))) {
                                            return Function
                                        } else if (check_true (((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])==="AsyncFunction"))) {
                                            return AsyncFunction
                                        } else if (check_true (((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])==="Number"))) {
                                            return NumberType
                                        } else if (check_true (((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])==="expression"))) {
                                            return Expression
                                        } else {
                                            return (assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])
                                        }
                                    } () 
                                })();
                                return __target_obj__366;
                                
                            }()
                        }
                    } else {
                        {
                            if (check_true (((assignment_value instanceof Array)&& ((assignment_value && assignment_value["0"])==="await")))){
                                {
                                    await async function(){
                                        let __target_obj__367=(root_ctx && root_ctx["defined_lisp_globals"]);
                                        __target_obj__367[target]=AsyncFunction;
                                        return __target_obj__367;
                                        
                                    }();
                                    await set_ambiguous(root_ctx,target)
                                }
                            } else {
                                await async function(){
                                    let __target_obj__368=(root_ctx && root_ctx["defined_lisp_globals"]);
                                    __target_obj__368[target]=assignment_value;
                                    return __target_obj__368;
                                    
                                }()
                            }
                        }
                    }
                } ();
                if (check_true (await verbosity(ctx))){
                    {
                        await clog("target: ",await (await Environment.get_global("as_lisp"))(target));
                        await clog("assignment_value: ",await (await Environment.get_global("as_lisp"))(assignment_value))
                    }
                };
                acc=await (async function(){
                     return [{
                        ctype:"statement"
                    },await (async function(){
                        if (check_true (((Function===await (async function(){
                            let __targ__369=(root_ctx && root_ctx["defined_lisp_globals"]);
                            if (__targ__369){
                                 return(__targ__369)[target]
                            } 
                        })())|| await in_sync_ques_(ctx)))){
                            return ""
                        } else {
                            return "await"
                        }
                    })()," ","Environment",".","set_global","(","","\"",(tokens && tokens["1"] && tokens["1"]["name"]),"\"",",",assignment_value,await (async function(){
                        if (check_true ((metavalue|| (opts && opts["constant"])))){
                            return ","
                        } else {
                            return ""
                        }
                    })(),await (async function(){
                        if (check_true (metavalue)){
                            return metavalue
                        } else {
                            if (check_true ((opts && opts["constant"]))){
                                return "null"
                            } else {
                                return ""
                            }
                        }
                    })(),await (async function(){
                        if (check_true ((opts && opts["constant"]))){
                            return ","
                        } else {
                            return ""
                        }
                    })(),await (async function(){
                        if (check_true ((opts && opts["constant"]))){
                            return "true"
                        } else {
                            return ""
                        }
                    })(),")"] 
                })();
                return acc
            };
            is_token_ques_=async function(t) {
                return (((t instanceof Object)&& (t && t["__token__"]))|| ((t instanceof Array)&& ((t && t["0"]) instanceof Object)&& (t && t["0"] && t["0"]["__token__"])))
            };
            compile_quote=async function(lisp_struct,ctx) {
                let acc;
                acc=[];
                ctx=await new_ctx(ctx);
                acc=await compile_quotem(lisp_struct,ctx);
                return acc
            };
            compile_quotel=async function(lisp_struct,ctx) {
                let acc;
                acc=[];
                acc=await JSON.stringify((lisp_struct && lisp_struct["1"]));
                return await (async function(){
                    let __array_op_rval__370=acc;
                     if (__array_op_rval__370 instanceof Function){
                        return await __array_op_rval__370() 
                    } else {
                        return [__array_op_rval__370]
                    }
                })()
            };
            wrap_and_run=async function(js_code,ctx,run_opts) {
                let __assembly__371= async function(){
                    return null
                };
                let result;
                let fst;
                let ctype;
                let comp_meta;
                let needs_braces_ques_;
                let in_quotem;
                let run_log;
                let needs_return_ques_;
                let assembled;
                {
                    let assembly=await __assembly__371();
                    ;
                    result=null;
                    fst=null;
                    ctype=null;
                    comp_meta=null;
                    needs_braces_ques_=false;
                    in_quotem=await get_ctx(ctx,"__IN_QUOTEM__");
                    run_log=await (async function(){
                        if (check_true ((opts && opts["quiet_mode"]))){
                            return log
                        } else {
                            return await defclog({
                                prefix:"wrap_and_run",background:"#703030",color:"white"
                            })
                        }
                    })();
                    needs_return_ques_=await (async function(){
                        ctype=await (async function(){
                            if (check_true (((js_code instanceof Array)&& await first(js_code)&& (await first(js_code) instanceof Object)&& await (async function(){
                                let __targ__372=await first(js_code);
                                if (__targ__372){
                                     return(__targ__372)["ctype"]
                                } 
                            })()))){
                                return await (async function(){
                                    let __targ__373=await first(js_code);
                                    if (__targ__373){
                                         return(__targ__373)["ctype"]
                                    } 
                                })()
                            }
                        })();
                        if (check_true (((typeof ctype==="object")&& await not((ctype instanceof Object))))){
                            fst=""
                        } else {
                            fst=(""+ (ctype|| ""))
                        };
                        if (check_true (fst instanceof Function)){
                            {
                                fst=await sub_type(fst)
                            }
                        };
                        return await async function(){
                            if (check_true (await contains_ques_("block",fst))) {
                                {
                                    if (check_true ((fst==="ifblock"))){
                                        needs_braces_ques_=true
                                    } else {
                                        needs_braces_ques_=false
                                    };
                                    return false
                                }
                            } else if (check_true ((await first(js_code)==="throw"))) {
                                {
                                    needs_braces_ques_=false;
                                    return false
                                }
                            } else {
                                {
                                    needs_braces_ques_=true;
                                    return true
                                }
                            }
                        } ()
                    })();
                    assembled=null;
                    ;
                    if (check_true ((false&& await not((opts && opts["root_environment"]))&& ((first_level_setup && first_level_setup.length)===0)&& has_lisp_globals))){
                        (first_level_setup).push(["const __GG__=",env_ref,"get_global",";"])
                    };
                    assembled=js_code;
                    if (check_true ((target_namespace&& ((assembled && assembled["0"]) instanceof Object)&& await not((target_namespace===(Environment && Environment["namespace"])))))){
                        {
                            comp_meta=await first(assembled);
                            await async function(){
                                comp_meta["namespace"]=target_namespace;
                                return comp_meta;
                                
                            }();
                            if (check_true ((await verbosity(ctx)&& (comp_meta && comp_meta["namespace"])))){
                                {
                                    await run_log("specified namespace: ",(comp_meta && comp_meta["namespace"]))
                                }
                            };
                            result=await Environment["evaluate_local"].call(Environment,await (async function(){
                                let __array_op_rval__375=comp_meta;
                                 if (__array_op_rval__375 instanceof Function){
                                    return await __array_op_rval__375(await assemble_output(assembled)) 
                                } else {
                                    return [__array_op_rval__375,await assemble_output(assembled)]
                                }
                            })(),ctx,{
                                compiled_source:true
                            });
                            if (check_true (await verbosity(ctx))){
                                {
                                    await run_log("<- ",result)
                                }
                            };
                            return result
                        }
                    } else {
                        {
                            assembled=await assemble_output(assembled);
                            assembled=await add(await (async function(){
                                if (check_true (needs_braces_ques_)){
                                    return "{"
                                } else {
                                    return ""
                                }
                            })(),await (async function(){
                                if (check_true (needs_return_ques_)){
                                    return " return "
                                } else {
                                    return ""
                                }
                            })(),assembled,await (async function(){
                                if (check_true (needs_braces_ques_)){
                                    return "}"
                                } else {
                                    return ""
                                }
                            })());
                            if (check_true (await verbosity(ctx))){
                                {
                                    await run_log("assembled: ",assembled)
                                }
                            };
                            try {
                                assembly=new AsyncFunction("Environment",assembled)
                            } catch (__exception__376) {
                                if (__exception__376 instanceof Error) {
                                    let e=__exception__376;
                                    {
                                        {
                                            throw e;
                                            
                                        }
                                    }
                                }
                            };
                            if (check_true ((run_opts && run_opts["bind_mode"]))){
                                {
                                    assembly=await (await Environment.get_global("bind_function"))(assembly,Environment)
                                }
                            };
                            result=await (async function(){
                                let __array_op_rval__377=assembly;
                                 if (__array_op_rval__377 instanceof Function){
                                    return await __array_op_rval__377(Environment) 
                                } else {
                                    return [__array_op_rval__377,Environment]
                                }
                            })();
                            if (check_true (await verbosity(ctx))){
                                {
                                    await run_log("<- ",result)
                                }
                            };
                            return result
                        }
                    }
                }
            };
            quote_tree=async function(lisp_tree,ctx,_acc) {
                let acc;
                let mode;
                let in_concat;
                let in_lambda_ques_;
                acc=(_acc|| []);
                mode=0;
                in_concat=false;
                in_lambda_ques_=false;
                await async function(){
                    if (check_true ((lisp_tree instanceof Array))) {
                        {
                            (acc).push("[");
                            await map(async function(elem,i,t) {
                                if (check_true ((mode===1))){
                                    {
                                        return mode=0
                                    }
                                } else {
                                    {
                                        await async function(){
                                            if (check_true ((("=:##"===elem)|| ("=:unquotem"===elem)))) {
                                                {
                                                    if (check_true (in_concat)){
                                                        (acc).push(await compile_wrapper_fn(await tokenize(await (async function(){
                                                             return [lisp_tree[await add(i,1)]] 
                                                        })(),ctx),ctx))
                                                    } else {
                                                        (acc).push(await compile_wrapper_fn(await tokenize(lisp_tree[await add(i,1)],ctx),ctx))
                                                    };
                                                    return mode=1
                                                }
                                            } else if (check_true (("=$,@"===elem))) {
                                                {
                                                    if (check_true (await not(in_concat))){
                                                        (acc).push("].concat(")
                                                    };
                                                    (acc).push(await compile_wrapper_fn(await tokenize(lisp_tree[await add(i,1)],ctx),ctx));
                                                    in_concat=true;
                                                    return mode=1
                                                }
                                            } else {
                                                {
                                                    if (check_true (in_concat)){
                                                        return await quote_tree(await (async function(){
                                                            let __array_op_rval__378=elem;
                                                             if (__array_op_rval__378 instanceof Function){
                                                                return await __array_op_rval__378() 
                                                            } else {
                                                                return [__array_op_rval__378]
                                                            }
                                                        })(),ctx,acc)
                                                    } else {
                                                        return await quote_tree(elem,ctx,acc)
                                                    }
                                                }
                                            }
                                        } ();
                                        if (check_true ((i<(t- 1)))){
                                            return (acc).push(",")
                                        }
                                    }
                                }
                            },lisp_tree);
                            if (check_true ((","===await last(acc)))){
                                (acc).pop()
                            };
                            if (check_true (in_concat)){
                                return (acc).push(")")
                            } else {
                                return (acc).push("]")
                            }
                        }
                    } else if (check_true ((lisp_tree instanceof Object))) {
                        {
                            (acc).push("{ ");
                            await map(async function(k,i,t) {
                                (acc).push(await JSON.stringify(k));
                                (acc).push(":");
                                await quote_tree(lisp_tree[k],ctx,acc);
                                if (check_true ((i<(t- 1)))){
                                    return (acc).push(",")
                                }
                            },await (await Environment.get_global("keys"))(lisp_tree));
                            (acc).push("}")
                        }
                    } else if (check_true ((lisp_tree instanceof String || typeof lisp_tree==='string'))) {
                        (acc).push(await JSON.stringify(lisp_tree))
                    } else if (check_true (await (async function(){
                         return await is_nil_ques_(lisp_tree) 
                    })())) {
                        (acc).push(await JSON.stringify(null))
                    } else if (check_true ((undefined===lisp_tree))) {
                        (acc).push(await JSON.stringify(undefined))
                    } else {
                        (acc).push(await JSON.stringify(lisp_tree))
                    }
                } ();
                return acc
            };
            quotem_log=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    return log
                } else {
                    return await defclog({
                        prefix:"compile_quotem",background:"#503090",color:"white"
                    })
                }
            })();
            compile_quotem=async function(lisp_struct,ctx) {
                let acc;
                let quoted_js;
                acc=[];
                ctx=await new_ctx(ctx);
                quoted_js=null;
                await set_ctx(ctx,"__IN_QUOTEM__",true);
                if (check_true (await verbosity(ctx))){
                    {
                        await quotem_log("->",await (async function(){
                            if (check_true (await get_ctx(ctx,"__IN_LAMBDA__"))){
                                return "[IN LAMBDA]"
                            } else {
                                return ""
                            }
                        })(),await JSON.stringify((lisp_struct && lisp_struct["1"])))
                    }
                };
                if (check_true (await get_ctx(ctx,"__IN_LAMBDA__"))){
                    {
                        quoted_js=await quote_tree((lisp_struct && lisp_struct["1"]),ctx)
                    }
                } else {
                    quoted_js=await quote_tree((lisp_struct && lisp_struct["1"]),ctx)
                };
                if (check_true (await verbosity(ctx))){
                    {
                        await quotem_log("<-",await (await Environment.get_global("as_lisp"))(quoted_js))
                    }
                };
                return quoted_js
            };
            compile_unquotem=async function(lisp_struct,ctx) {
                let acc;
                acc=[];
                (acc).push(await (async function(){
                     return await compile((lisp_struct && lisp_struct["1"]),ctx) 
                })());
                return acc
            };
            eval_log=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    return log
                } else {
                    return await defclog({
                        prefix:"compile_eval",background:"#705030",color:"white"
                    })
                }
            })();
            compile_eval=async function(tokens,ctx) {
                let __assembly__379= async function(){
                    return null
                };
                let type_mark;
                let acc;
                let preamble;
                let result;
                {
                    let assembly=await __assembly__379();
                    ;
                    type_mark=null;
                    acc=[];
                    preamble=await calling_preamble(ctx);
                    result=null;
                    ctx=await new_ctx(ctx);
                    await set_new_completion_scope(ctx);
                    assembly=await (async function(){
                         return await compile((tokens && tokens["1"]),ctx) 
                    })();
                    if (check_true (await verbosity(ctx))){
                        {
                            await eval_log("assembly:",await (async function(){
                                 return await clone(assembly) 
                            })())
                        }
                    };
                    has_lisp_globals=true;
                    result=["(","await"," ","Environment",".","eval","(",(preamble && preamble["0"])," ",(preamble && preamble["1"])," ","function","()",["{","return"," ",assembly,"}","()",")",")"]];
                    return result
                }
            };
            compile_debug=async function(tokens,ctx) {
                return [{
                    ctype:"statement"
                },"debugger",";"]
            };
            compile_for_each=async function(tokens,ctx) {
                let preamble;
                preamble=await calling_preamble(ctx);
                ctx=await new_ctx(ctx);
                ;
                await set_new_completion_scope(ctx);
                return await (async function(){
                    let __array_op_rval__380=(preamble && preamble["2"]);
                     if (__array_op_rval__380 instanceof Function){
                        return await __array_op_rval__380((preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{",await compile_for_each_inner(tokens,ctx,preamble)," ","}",")","()") 
                    } else {
                        return [__array_op_rval__380,(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{",await compile_for_each_inner(tokens,ctx,preamble)," ","}",")","()"]
                    }
                })()
            };
            compile_for_each_inner=async function(tokens,ctx,preamble) {
                let acc;
                let idx;
                let stmts;
                let idx_iter;
                let idx_iters;
                let element_list;
                let body_function_ref;
                let collector_ref;
                let prebuild;
                let for_args;
                let iterator_ref;
                let elements;
                let iter_count;
                let for_body;
                let body_is_block_ques_;
                acc=[];
                idx=0;
                stmts=[];
                idx_iter=await gen_temp_name("iter");
                idx_iters=[];
                element_list=await gen_temp_name("elements");
                body_function_ref=await gen_temp_name("for_body");
                collector_ref=await gen_temp_name("array");
                prebuild=[];
                for_args=(tokens && tokens["1"] && tokens["1"]["val"]);
                iterator_ref=(for_args && for_args["0"]);
                elements=await last(for_args);
                iter_count=await (async function(){
                    if (check_true (for_args)){
                        return ((for_args && for_args.length)- 1)
                    } else {
                        return 0
                    }
                })();
                for_body=(tokens && tokens["2"]);
                body_is_block_ques_=await is_block_ques_((for_body && for_body["val"]));
                if (check_true ((iter_count<1))){
                    {
                        throw new SyntaxError("Invalid for_each arguments");
                        
                    }
                };
                await (async function() {
                    let __for_body__383=async function(iter_idx) {
                        (idx_iters).push(for_args[iter_idx]);
                        return await set_ctx(ctx,await clean_quoted_reference(await (async function(){
                            let __targ__385=await last(idx_iters);
                            if (__targ__385){
                                 return(__targ__385)["name"]
                            } 
                        })()),ArgumentType)
                    };
                    let __array__384=[],__elements__382=await (await Environment.get_global("range"))(iter_count);
                    let __BREAK__FLAG__=false;
                    for(let __iter__381 in __elements__382) {
                        __array__384.push(await __for_body__383(__elements__382[__iter__381]));
                        if(__BREAK__FLAG__) {
                             __array__384.pop();
                            break;
                            
                        }
                    }return __array__384;
                     
                })();
                await set_ctx(ctx,collector_ref,ArgumentType);
                await set_ctx(ctx,"__LAMBDA_STEP__",-1);
                await set_ctx(ctx,element_list,"arg");
                if (check_true (await not(body_is_block_ques_))){
                    {
                        for_body=await make_do_block(for_body)
                    }
                };
                prebuild=await build_fn_with_assignment(body_function_ref,(for_body && for_body["val"]),idx_iters,ctx);
                await async function(){
                    ctx["return_last_value"]=true;
                    return ctx;
                    
                }();
                (acc).push(await (async function(){
                     return await compile(prebuild,ctx) 
                })());
                await (async function() {
                    let __for_body__389=async function(t) {
                        return (acc).push(t)
                    };
                    let __array__390=[],__elements__388=["let"," ",collector_ref,"=","[]",",",element_list,"=",await compile_wrapper_fn(elements,ctx),";"];
                    let __BREAK__FLAG__=false;
                    for(let __iter__387 in __elements__388) {
                        __array__390.push(await __for_body__389(__elements__388[__iter__387]));
                        if(__BREAK__FLAG__) {
                             __array__390.pop();
                            break;
                            
                        }
                    }return __array__390;
                     
                })();
                await (async function() {
                    let __for_body__393=async function(t) {
                        return (acc).push(t)
                    };
                    let __array__394=[],__elements__392=["let"," ",break_out,"=","false",";"];
                    let __BREAK__FLAG__=false;
                    for(let __iter__391 in __elements__392) {
                        __array__394.push(await __for_body__393(__elements__392[__iter__391]));
                        if(__BREAK__FLAG__) {
                             __array__394.pop();
                            break;
                            
                        }
                    }return __array__394;
                     
                })();
                if (check_true (await (await Environment.get_global("blank?"))((preamble && preamble["0"])))){
                    await set_ctx(ctx,body_function_ref,Function)
                } else {
                    await set_ctx(ctx,body_function_ref,AsyncFunction)
                };
                await async function(){
                    if (check_true ((((for_args && for_args.length)===2)&& await not(((for_args && for_args["1"]) instanceof Array))))) {
                        {
                            await set_ctx(ctx,idx_iter,NumberType);
                            await (async function() {
                                let __for_body__397=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__398=[],__elements__396=["for","(","let"," ",idx_iter," ","in"," ",element_list,")"," ","{"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__395 in __elements__396) {
                                    __array__398.push(await __for_body__397(__elements__396[__iter__395]));
                                    if(__BREAK__FLAG__) {
                                         __array__398.pop();
                                        break;
                                        
                                    }
                                }return __array__398;
                                 
                            })();
                            await (async function() {
                                let __for_body__401=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__402=[],__elements__400=await (async function(){
                                    let __array_op_rval__403=collector_ref;
                                     if (__array_op_rval__403 instanceof Function){
                                        return await __array_op_rval__403(".","push","(",(preamble && preamble["0"])," ",body_function_ref,"(",element_list,"[",idx_iter,"]",")",")",";") 
                                    } else {
                                        return [__array_op_rval__403,".","push","(",(preamble && preamble["0"])," ",body_function_ref,"(",element_list,"[",idx_iter,"]",")",")",";"]
                                    }
                                })();
                                let __BREAK__FLAG__=false;
                                for(let __iter__399 in __elements__400) {
                                    __array__402.push(await __for_body__401(__elements__400[__iter__399]));
                                    if(__BREAK__FLAG__) {
                                         __array__402.pop();
                                        break;
                                        
                                    }
                                }return __array__402;
                                 
                            })();
                            await (async function() {
                                let __for_body__406=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__407=[],__elements__405=["if","(",break_out,")"," ","{"," ",collector_ref,".","pop","()",";","break",";","}"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__404 in __elements__405) {
                                    __array__407.push(await __for_body__406(__elements__405[__iter__404]));
                                    if(__BREAK__FLAG__) {
                                         __array__407.pop();
                                        break;
                                        
                                    }
                                }return __array__407;
                                 
                            })();
                            return (acc).push("}")
                        }
                    }
                } ();
                (acc).push("return");
                (acc).push(" ");
                (acc).push(collector_ref);
                (acc).push(";");
                return acc
            };
            compile_while=async function(tokens,ctx) {
                let acc;
                let idx;
                let preamble;
                let test_condition;
                let test_condition_ref;
                let body;
                let body_ref;
                let prebuild;
                acc=[];
                idx=0;
                ctx=await new_ctx(ctx);
                preamble=await calling_preamble(ctx);
                test_condition=(tokens && tokens["1"]);
                test_condition_ref=await gen_temp_name("test_condition");
                body=(tokens && tokens["2"]);
                body_ref=await gen_temp_name("body_ref");
                prebuild=[];
                ;
                await set_new_completion_scope(ctx);
                await set_ctx(ctx,break_out,true);
                if (check_true ((test_condition && test_condition["ref"]))){
                    (prebuild).push(await (async function(){
                         return await compile(await build_fn_with_assignment(test_condition_ref,(test_condition && test_condition["name"]),null,ctx),ctx) 
                    })())
                } else {
                    (prebuild).push(await (async function(){
                         return await compile(await build_fn_with_assignment(test_condition_ref,(test_condition && test_condition["val"]),null,ctx),ctx) 
                    })())
                };
                (prebuild).push(await (async function(){
                     return await compile(await build_fn_with_assignment(body_ref,(body && body["val"]),null,ctx),ctx) 
                })());
                await (async function() {
                    let __for_body__410=async function(t) {
                        return (prebuild).push(t)
                    };
                    let __array__411=[],__elements__409=["let"," ",break_out,"=","false",";"];
                    let __BREAK__FLAG__=false;
                    for(let __iter__408 in __elements__409) {
                        __array__411.push(await __for_body__410(__elements__409[__iter__408]));
                        if(__BREAK__FLAG__) {
                             __array__411.pop();
                            break;
                            
                        }
                    }return __array__411;
                     
                })();
                await (async function() {
                    let __for_body__414=async function(t) {
                        return (prebuild).push(t)
                    };
                    let __array__415=[],__elements__413=["while","(",(preamble && preamble["0"])," ",test_condition_ref,"()",")"," ","{",(preamble && preamble["0"])," ",body_ref,"()",";"," ","if","(",break_out,")"," ","{"," ","break",";","}","}"," ","",";"];
                    let __BREAK__FLAG__=false;
                    for(let __iter__412 in __elements__413) {
                        __array__415.push(await __for_body__414(__elements__413[__iter__412]));
                        if(__BREAK__FLAG__) {
                             __array__415.pop();
                            break;
                            
                        }
                    }return __array__415;
                     
                })();
                await (async function() {
                    let __for_body__418=async function(t) {
                        return (acc).push(t)
                    };
                    let __array__419=[],__elements__417=[(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()","{"," ",prebuild,"}",")","()"];
                    let __BREAK__FLAG__=false;
                    for(let __iter__416 in __elements__417) {
                        __array__419.push(await __for_body__418(__elements__417[__iter__416]));
                        if(__BREAK__FLAG__) {
                             __array__419.pop();
                            break;
                            
                        }
                    }return __array__419;
                     
                })();
                return acc
            };
            compile_for_with=async function(tokens,ctx,preamble) {
                preamble=await calling_preamble(ctx);
                ctx=await new_ctx(ctx);
                ;
                await set_new_completion_scope(ctx);
                return [(preamble && preamble["2"]),(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{",await compile_for_with_inner(tokens,ctx,preamble)," ","}",")","()"]
            };
            compile_for_with_inner=async function(tokens,ctx,preamble) {
                let acc;
                let idx;
                let stmts;
                let iter_ref;
                let idx_iters;
                let generator_expression;
                let body_function_ref;
                let prebuild;
                let for_args;
                let iterator_ref;
                let elements;
                let iter_count;
                let for_body;
                let body_is_block_ques_;
                acc=[];
                idx=0;
                stmts=[];
                iter_ref=await gen_temp_name("iter");
                idx_iters=[];
                generator_expression=await gen_temp_name("elements");
                body_function_ref=await gen_temp_name("for_body");
                prebuild=[];
                for_args=(tokens && tokens["1"] && tokens["1"]["val"]);
                iterator_ref=(for_args && for_args["0"]);
                elements=await last(for_args);
                iter_count=await (async function(){
                    if (check_true (for_args)){
                        return ((for_args && for_args.length)- 1)
                    } else {
                        return 0
                    }
                })();
                for_body=(tokens && tokens["2"]);
                body_is_block_ques_=await is_block_ques_((for_body && for_body["val"]));
                if (check_true ((iter_count<1))){
                    {
                        throw new SyntaxError("Invalid for_each arguments");
                        
                    }
                };
                await (async function() {
                    let __for_body__422=async function(iter_ref) {
                        (idx_iters).push(for_args[iter_ref]);
                        return await set_ctx(ctx,await clean_quoted_reference(await (async function(){
                            let __targ__424=await last(idx_iters);
                            if (__targ__424){
                                 return(__targ__424)["name"]
                            } 
                        })()),ArgumentType)
                    };
                    let __array__423=[],__elements__421=await (await Environment.get_global("range"))(iter_count);
                    let __BREAK__FLAG__=false;
                    for(let __iter__420 in __elements__421) {
                        __array__423.push(await __for_body__422(__elements__421[__iter__420]));
                        if(__BREAK__FLAG__) {
                             __array__423.pop();
                            break;
                            
                        }
                    }return __array__423;
                     
                })();
                await set_ctx(ctx,generator_expression,"arg");
                if (check_true (await not(body_is_block_ques_))){
                    {
                        for_body=await make_do_block(for_body)
                    }
                };
                prebuild=await build_fn_with_assignment(body_function_ref,(for_body && for_body["val"]),idx_iters,ctx);
                await async function(){
                    ctx["block_step"]=0;
                    return ctx;
                    
                }();
                await async function(){
                    ctx["return_last_value"]=true;
                    return ctx;
                    
                }();
                (acc).push(await (async function(){
                     return await compile(prebuild,ctx) 
                })());
                await (async function() {
                    let __for_body__429=async function(t) {
                        return (acc).push(t)
                    };
                    let __array__430=[],__elements__428=["let"," ",break_out,"=","false",";"];
                    let __BREAK__FLAG__=false;
                    for(let __iter__427 in __elements__428) {
                        __array__430.push(await __for_body__429(__elements__428[__iter__427]));
                        if(__BREAK__FLAG__) {
                             __array__430.pop();
                            break;
                            
                        }
                    }return __array__430;
                     
                })();
                await set_ctx(ctx,body_function_ref,AsyncFunction);
                await async function(){
                    if (check_true ((((for_args && for_args.length)===2)&& await not(((for_args && for_args["1"]) instanceof Array))))) {
                        {
                            await (async function() {
                                let __for_body__433=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__434=[],__elements__432=["for"," ",(preamble && preamble["0"])," ","(","const"," ",iter_ref," ","of"," ",await compile_wrapper_fn(elements,ctx),")"," ","{"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__431 in __elements__432) {
                                    __array__434.push(await __for_body__433(__elements__432[__iter__431]));
                                    if(__BREAK__FLAG__) {
                                         __array__434.pop();
                                        break;
                                        
                                    }
                                }return __array__434;
                                 
                            })();
                            await (async function() {
                                let __for_body__437=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__438=[],__elements__436=await (async function(){
                                    let __array_op_rval__439=(preamble && preamble["0"]);
                                     if (__array_op_rval__439 instanceof Function){
                                        return await __array_op_rval__439(" ",body_function_ref,"(",iter_ref,")",";") 
                                    } else {
                                        return [__array_op_rval__439," ",body_function_ref,"(",iter_ref,")",";"]
                                    }
                                })();
                                let __BREAK__FLAG__=false;
                                for(let __iter__435 in __elements__436) {
                                    __array__438.push(await __for_body__437(__elements__436[__iter__435]));
                                    if(__BREAK__FLAG__) {
                                         __array__438.pop();
                                        break;
                                        
                                    }
                                }return __array__438;
                                 
                            })();
                            await (async function() {
                                let __for_body__442=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__443=[],__elements__441=["if","(",break_out,")"," ","break",";"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__440 in __elements__441) {
                                    __array__443.push(await __for_body__442(__elements__441[__iter__440]));
                                    if(__BREAK__FLAG__) {
                                         __array__443.pop();
                                        break;
                                        
                                    }
                                }return __array__443;
                                 
                            })();
                            return (acc).push("}")
                        }
                    }
                } ();
                return acc
            };
            silence=async function() {
                return false
            };
            verbosity=silence;
            check_verbosity=async function(ctx) {
                return await Environment["get_global"].call(Environment,"__VERBOSITY__")
            };
            declare_log=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    return log
                } else {
                    return await defclog({
                        prefix:"DECLARE",color:"white",background:"black"
                    })
                }
            })();
            compile_declare=async function(tokens,ctx) {
                let expressions;
                let targeted;
                let acc;
                let source;
                let details;
                let sanitized_name;
                let declaration;
                let dec_struct;
                expressions=await (await Environment.get_global("rest"))(tokens);
                targeted=null;
                acc=[];
                source=null;
                details=null;
                sanitized_name=null;
                declaration=null;
                dec_struct=null;
                await (async function() {
                    let __for_body__446=async function(exp) {
                        declaration=(exp && exp["val"] && exp["val"]["0"] && exp["val"]["0"]["name"]);
                        targeted=await (await Environment.get_global("rest"))((exp && exp["val"]));
                        if (check_true (await (async function(){
                            let __array_op_rval__448=verbosity;
                             if (__array_op_rval__448 instanceof Function){
                                return await __array_op_rval__448(ctx) 
                            } else {
                                return [__array_op_rval__448,ctx]
                            }
                        })())){
                            {
                                await declare_log("declaration: ",declaration,"targeted: ",await (async function(){
                                     return await (await Environment.get_global("each"))(targeted,"name") 
                                })(),targeted)
                            }
                        };
                        return await async function(){
                            if (check_true ((declaration==="toplevel"))) {
                                {
                                    await async function(){
                                        opts["root_environment"]=(targeted && targeted["0"]);
                                        return opts;
                                        
                                    }();
                                    if (check_true ((opts && opts["root_environment"]))){
                                        return env_ref=""
                                    } else {
                                        return env_ref="Environment."
                                    }
                                }
                            } else if (check_true ((declaration==="include"))) {
                                {
                                    return await (async function() {
                                        let __for_body__452=async function(name) {
                                            sanitized_name=await sanitize_js_ref_name(name);
                                            dec_struct=await get_declaration_details(ctx,name);
                                            if (check_true (dec_struct)){
                                                {
                                                    await (async function() {
                                                        let __for_body__456=async function(t) {
                                                            return (acc).push(t)
                                                        };
                                                        let __array__457=[],__elements__455=["let"," ",sanitized_name,"="];
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__454 in __elements__455) {
                                                            __array__457.push(await __for_body__456(__elements__455[__iter__454]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__457.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__457;
                                                         
                                                    })();
                                                    await async function(){
                                                        if (check_true (((dec_struct && dec_struct["value"]) instanceof Function&& await (async function(){
                                                            let __targ__459=await (async function(){
                                                                let __targ__458=(Environment && Environment["definitions"]);
                                                                if (__targ__458){
                                                                     return(__targ__458)[name]
                                                                } 
                                                            })();
                                                            if (__targ__459){
                                                                 return(__targ__459)["fn_body"]
                                                            } 
                                                        })()))) {
                                                            {
                                                                details=await (async function(){
                                                                    let __targ__460=(Environment && Environment["definitions"]);
                                                                    if (__targ__460){
                                                                         return(__targ__460)[name]
                                                                    } 
                                                                })();
                                                                source=("(fn "+ (details && details["fn_args"])+ " "+ (details && details["fn_body"])+ ")");
                                                                source=await (async function(){
                                                                     return await compile(await tokenize(await (async function(){
                                                                         return await (await Environment.get_global("read_lisp"))(source) 
                                                                    })(),ctx),ctx,1000) 
                                                                })();
                                                                (acc).push(source);
                                                                return await set_ctx(ctx,name,AsyncFunction)
                                                            }
                                                        } else if (check_true ((dec_struct && dec_struct["value"]) instanceof Function)) {
                                                            {
                                                                (acc).push(await (async function() {
                                                                    {
                                                                         let __call_target__=await (dec_struct && dec_struct["value"])["toString"](), __call_method__="replace";
                                                                        return await __call_target__[__call_method__].call(__call_target__,"\n","")
                                                                    } 
                                                                })());
                                                                await set_ctx(ctx,name,AsyncFunction)
                                                            }
                                                        } else {
                                                            {
                                                                (acc).push(await (dec_struct && dec_struct["value"])["toString"]());
                                                                await set_ctx(ctx,name,ArgumentType)
                                                            }
                                                        }
                                                    } ();
                                                    (acc).push(";")
                                                }
                                            };
                                            await set_declaration(ctx,name,"inlined",true);
                                            if (check_true ((("undefined"===await (async function(){
                                                let __targ__461=await get_declarations(ctx,name);
                                                if (__targ__461){
                                                     return(__targ__461)["type"]
                                                } 
                                            })())&& (dec_struct && dec_struct["value"]) instanceof Function))){
                                                return await set_declaration(ctx,name,"type",Function)
                                            }
                                        };
                                        let __array__453=[],__elements__451=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__450 in __elements__451) {
                                            __array__453.push(await __for_body__452(__elements__451[__iter__450]));
                                            if(__BREAK__FLAG__) {
                                                 __array__453.pop();
                                                break;
                                                
                                            }
                                        }return __array__453;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="verbose"))) {
                                {
                                    let verbosity_level=await parseInt(await first(await (async function(){
                                         return await (await Environment.get_global("each"))(targeted,"name") 
                                    })()));
                                    ;
                                    if (check_true (await not(await isNaN(verbosity_level)))){
                                        {
                                            if (check_true ((verbosity_level>0))){
                                                await set_ctx(ctx,"__VERBOSITY__",verbosity_level)
                                            } else {
                                                {
                                                    await declare_log("verbosity: turned off");
                                                    verbosity=silence;
                                                    await set_ctx(ctx,"__VERBOSITY__",null)
                                                }
                                            };
                                            verbosity=check_verbosity;
                                            return await declare_log("compiler: verbosity set: ",await (async function(){
                                                let __array_op_rval__462=verbosity;
                                                 if (__array_op_rval__462 instanceof Function){
                                                    return await __array_op_rval__462(ctx) 
                                                } else {
                                                    return [__array_op_rval__462,ctx]
                                                }
                                            })())
                                        }
                                    } else {
                                        return (warnings).push("invalid verbosity declaration, expected number, received ")
                                    }
                                }
                            } else if (check_true ((declaration==="local"))) {
                                return await (async function() {
                                    let __for_body__465=async function(name) {
                                        dec_struct=await get_declaration_details(ctx,name);
                                        return await set_ctx(ctx,name,(dec_struct && dec_struct["value"]))
                                    };
                                    let __array__466=[],__elements__464=await (async function(){
                                         return await (await Environment.get_global("each"))(targeted,"name") 
                                    })();
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__463 in __elements__464) {
                                        __array__466.push(await __for_body__465(__elements__464[__iter__463]));
                                        if(__BREAK__FLAG__) {
                                             __array__466.pop();
                                            break;
                                            
                                        }
                                    }return __array__466;
                                     
                                })()
                            } else if (check_true ((declaration==="function"))) {
                                {
                                    return await (async function() {
                                        let __for_body__469=async function(name) {
                                            return await set_declaration(ctx,name,"type",Function)
                                        };
                                        let __array__470=[],__elements__468=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__467 in __elements__468) {
                                            __array__470.push(await __for_body__469(__elements__468[__iter__467]));
                                            if(__BREAK__FLAG__) {
                                                 __array__470.pop();
                                                break;
                                                
                                            }
                                        }return __array__470;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="fn"))) {
                                {
                                    return await (async function() {
                                        let __for_body__473=async function(name) {
                                            return await set_declaration(ctx,name,"type",AsyncFunction)
                                        };
                                        let __array__474=[],__elements__472=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__471 in __elements__472) {
                                            __array__474.push(await __for_body__473(__elements__472[__iter__471]));
                                            if(__BREAK__FLAG__) {
                                                 __array__474.pop();
                                                break;
                                                
                                            }
                                        }return __array__474;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="array"))) {
                                {
                                    return await (async function() {
                                        let __for_body__477=async function(name) {
                                            return await set_declaration(ctx,name,"type",Array)
                                        };
                                        let __array__478=[],__elements__476=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__475 in __elements__476) {
                                            __array__478.push(await __for_body__477(__elements__476[__iter__475]));
                                            if(__BREAK__FLAG__) {
                                                 __array__478.pop();
                                                break;
                                                
                                            }
                                        }return __array__478;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="number"))) {
                                {
                                    return await (async function() {
                                        let __for_body__481=async function(name) {
                                            return await set_declaration(ctx,name,"type",NumberType)
                                        };
                                        let __array__482=[],__elements__480=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__479 in __elements__480) {
                                            __array__482.push(await __for_body__481(__elements__480[__iter__479]));
                                            if(__BREAK__FLAG__) {
                                                 __array__482.pop();
                                                break;
                                                
                                            }
                                        }return __array__482;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="string"))) {
                                {
                                    return await (async function() {
                                        let __for_body__485=async function(name) {
                                            return await set_declaration(ctx,name,"type",StringType)
                                        };
                                        let __array__486=[],__elements__484=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__483 in __elements__484) {
                                            __array__486.push(await __for_body__485(__elements__484[__iter__483]));
                                            if(__BREAK__FLAG__) {
                                                 __array__486.pop();
                                                break;
                                                
                                            }
                                        }return __array__486;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="boolean"))) {
                                {
                                    return await (async function() {
                                        let __for_body__489=async function(name) {
                                            return await set_declaration(ctx,name,"type",Boolean)
                                        };
                                        let __array__490=[],__elements__488=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__487 in __elements__488) {
                                            __array__490.push(await __for_body__489(__elements__488[__iter__487]));
                                            if(__BREAK__FLAG__) {
                                                 __array__490.pop();
                                                break;
                                                
                                            }
                                        }return __array__490;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="regexp"))) {
                                {
                                    return await (async function() {
                                        let __for_body__493=async function(name) {
                                            return await set_declaration(ctx,name,"type",RegExp)
                                        };
                                        let __array__494=[],__elements__492=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__491 in __elements__492) {
                                            __array__494.push(await __for_body__493(__elements__492[__iter__491]));
                                            if(__BREAK__FLAG__) {
                                                 __array__494.pop();
                                                break;
                                                
                                            }
                                        }return __array__494;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="object"))) {
                                {
                                    return await (async function() {
                                        let __for_body__497=async function(name) {
                                            return await set_declaration(ctx,name,"type",Object)
                                        };
                                        let __array__498=[],__elements__496=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__495 in __elements__496) {
                                            __array__498.push(await __for_body__497(__elements__496[__iter__495]));
                                            if(__BREAK__FLAG__) {
                                                 __array__498.pop();
                                                break;
                                                
                                            }
                                        }return __array__498;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="global"))) {
                                {
                                    return await (async function() {
                                        let __for_body__501=async function(name) {
                                            return await set_declaration(ctx,name,"location","global")
                                        };
                                        let __array__502=[],__elements__500=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__499 in __elements__500) {
                                            __array__502.push(await __for_body__501(__elements__500[__iter__499]));
                                            if(__BREAK__FLAG__) {
                                                 __array__502.pop();
                                                break;
                                                
                                            }
                                        }return __array__502;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="optimize"))) {
                                {
                                    return await (async function() {
                                        let __for_body__505=async function(factor) {
                                            factor=await (async function(){
                                                 return await (await Environment.get_global("each"))(factor,"name") 
                                            })();
                                            return await async function(){
                                                if (check_true (((factor && factor["0"])==="safety"))) {
                                                    return await set_declaration(ctx,"__SAFETY__","level",(factor && factor["1"]))
                                                }
                                            } ()
                                        };
                                        let __array__506=[],__elements__504=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"val") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__503 in __elements__504) {
                                            __array__506.push(await __for_body__505(__elements__504[__iter__503]));
                                            if(__BREAK__FLAG__) {
                                                 __array__506.pop();
                                                break;
                                                
                                            }
                                        }return __array__506;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="namespace"))) {
                                {
                                    if (check_true (await not(((targeted && targeted.length)===1)))){
                                        {
                                            throw new SyntaxError("namespace declaration requires exactly 1 value");
                                            
                                        }
                                    };
                                    if (check_true (await get_ctx(ctx,"__IN_LAMBDA__"))){
                                        {
                                            throw new SyntaxError("namespace compiler declaration must be toplevel");
                                            
                                        }
                                    };
                                    target_namespace=(targeted && targeted["0"] && targeted["0"]["name"]);
                                    return Environment=await Environment["get_namespace_handle"].call(Environment,(targeted && targeted["0"] && targeted["0"]["name"]))
                                }
                            } else {
                                {
                                    (warnings).push(("unknown declaration directive: "+ declaration));
                                    return await (await Environment.get_global("warn"))(("compiler: unknown declaration directive: "+ declaration))
                                }
                            }
                        } ()
                    };
                    let __array__447=[],__elements__445=expressions;
                    let __BREAK__FLAG__=false;
                    for(let __iter__444 in __elements__445) {
                        __array__447.push(await __for_body__446(__elements__445[__iter__444]));
                        if(__BREAK__FLAG__) {
                             __array__447.pop();
                            break;
                            
                        }
                    }return __array__447;
                     
                })();
                return acc
            };
            safety_level=async function(ctx) {
                if (check_true (ctx)){
                    {
                        let safety=await get_declarations(ctx,"__SAFETY__");
                        ;
                        if (check_true (safety)){
                            return (safety && safety["level"])
                        } else {
                            return default_safety_level
                        }
                    }
                }
            };
            get_scoped_type=async function(name) {
                let rtype;
                rtype=await get_ctx(ctx,name);
                if (check_true ((undefined===rtype))){
                    return await sub_type(await get_lisp_ctx(ctx,name))
                } else {
                    return await sub_type(rtype)
                }
            };
            compile_scoped_reference=async function(tokens,ctx) {
                let acc;
                let idx;
                let ref_type;
                let rval;
                let stmt;
                let preamble;
                let sr_log;
                let val;
                let call_type;
                let token;
                acc=[];
                idx=0;
                ref_type=null;
                rval=null;
                stmt=null;
                preamble=await calling_preamble(ctx);
                sr_log=await (async function(){
                     return await defclog({
                        prefix:("compile_scoped_reference ("+ ((ctx && ctx["block_id"])|| "-")+ "):"),background:"steelblue",color:"white"
                    }) 
                })();
                val=null;
                call_type=await (async function(){
                     return await async function(){
                        if (check_true (await not((tokens && tokens["0"] && tokens["0"]["ref"])))) {
                            return "literal"
                        } else if (check_true (await get_ctx_val(ctx,(tokens && tokens["0"] && tokens["0"]["name"])))) {
                            return "local"
                        } else if (check_true (await get_lisp_ctx(ctx,(tokens && tokens["0"] && tokens["0"]["name"])))) {
                            return "lisp"
                        }
                    } () 
                })();
                token=null;
                ;
                await async function(){
                    if (check_true ((call_type==="lisp"))) {
                        return ref_type=await get_lisp_ctx(ctx,(tokens && tokens["0"] && tokens["0"]["name"]))
                    } else if (check_true ((call_type==="local"))) {
                        ref_type=await get_ctx_val(ctx,(tokens && tokens["0"] && tokens["0"]["name"]))
                    } else {
                        ref_type=ArgumentType
                    }
                } ();
                await async function(){
                    if (check_true ((ref_type===AsyncFunction))) {
                        return ref_type="AsyncFunction"
                    } else if (check_true ((ref_type===Expression))) {
                        ref_type=ArgumentType
                    } else if (check_true ((ref_type===Function))) {
                        ref_type="Function"
                    } else if (check_true ((ref_type===Array))) {
                        ref_type="Array"
                    } else if (check_true ((ref_type===NilType))) {
                        ref_type="nil"
                    } else if (check_true ((ref_type===NumberType))) {
                        ref_type=ArgumentType
                    } else if (check_true ((ref_type===StringType))) {
                        ref_type="StringType"
                    } else if (check_true ((ref_type===ArgumentType))) {
                        true
                    } else {
                        ref_type=await sub_type(ref_type)
                    }
                } ();
                if (check_true (await (async function(){
                    let __array_op_rval__507=verbosity;
                     if (__array_op_rval__507 instanceof Function){
                        return await __array_op_rval__507(ctx) 
                    } else {
                        return [__array_op_rval__507,ctx]
                    }
                })())){
                    {
                        await sr_log("SYMBOL: ",(tokens && tokens["0"] && tokens["0"]["name"]),"  found as:",call_type," of type:",ref_type,"sanitized as: ",await (async function(){
                            if (check_true (("local"===call_type))){
                                return (" local sanitized to: "+ await sanitize_js_ref_name((tokens && tokens["0"] && tokens["0"]["name"])))
                            }
                        })())
                    }
                };
                rval=await (async function(){
                     return await async function(){
                        if (check_true ((ref_type==="AsyncFunction"))) {
                            {
                                (acc).push((preamble && preamble["0"]));
                                (acc).push(" ");
                                (acc).push(await (async function(){
                                    if (check_true ((call_type==="lisp"))){
                                        return await compile_lisp_scoped_reference((tokens && tokens["0"] && tokens["0"]["name"]),ctx)
                                    } else {
                                        return await sanitize_js_ref_name((tokens && tokens["0"] && tokens["0"]["name"]))
                                    }
                                })());
                                (acc).push("(");
                                await (async function(){
                                     let __test_condition__508=async function() {
                                        return (idx<((tokens && tokens.length)- 1))
                                    };
                                    let __body_ref__509=async function() {
                                        idx+=1;
                                        token=tokens[idx];
                                        stmt=await compile_wrapper_fn(token,ctx,new Object());
                                        (acc).push(stmt);
                                        if (check_true ((idx<((tokens && tokens.length)- 1)))){
                                            {
                                                return (acc).push(",")
                                            }
                                        }
                                    };
                                    let __BREAK__FLAG__=false;
                                    while(await __test_condition__508()) {
                                        await __body_ref__509();
                                         if(__BREAK__FLAG__) {
                                             break;
                                            
                                        }
                                    } ;
                                    
                                })();
                                (acc).push(")");
                                return acc
                            }
                        } else if (check_true ((ref_type==="Function"))) {
                            {
                                (acc).push((preamble && preamble["0"]));
                                (acc).push(" ");
                                (acc).push(await (async function(){
                                    if (check_true ((call_type==="lisp"))){
                                        return await compile_lisp_scoped_reference((tokens && tokens["0"] && tokens["0"]["name"]),ctx)
                                    } else {
                                        return await sanitize_js_ref_name((tokens && tokens["0"] && tokens["0"]["name"]))
                                    }
                                })());
                                (acc).push("(");
                                await (async function(){
                                     let __test_condition__510=async function() {
                                        return (idx<((tokens && tokens.length)- 1))
                                    };
                                    let __body_ref__511=async function() {
                                        idx+=1;
                                        token=tokens[idx];
                                        stmt=await compile_wrapper_fn(token,ctx,new Object());
                                        (acc).push(stmt);
                                        if (check_true ((idx<((tokens && tokens.length)- 1)))){
                                            {
                                                return (acc).push(",")
                                            }
                                        }
                                    };
                                    let __BREAK__FLAG__=false;
                                    while(await __test_condition__510()) {
                                        await __body_ref__511();
                                         if(__BREAK__FLAG__) {
                                             break;
                                            
                                        }
                                    } ;
                                    
                                })();
                                (acc).push(")");
                                return acc
                            }
                        } else if (check_true (((call_type==="local")&& ((ref_type==="NumberType")|| (ref_type==="StringType")|| (ref_type==="Boolean"))))) {
                            {
                                (acc).push((tokens && tokens["0"] && tokens["0"]["name"]));
                                return acc
                            }
                        } else if (check_true (((call_type==="local")&& await not((ref_type===ArgumentType))&& (tokens instanceof Array)))) {
                            {
                                val=await get_ctx_val(ctx,(tokens && tokens["0"] && tokens["0"]["name"]));
                                (acc).push(val);
                                return acc
                            }
                        } else if (check_true (((ref_type===ArgumentType)&& (tokens instanceof Array)))) {
                            {
                                (acc).push("[");
                                await (async function(){
                                     let __test_condition__512=async function() {
                                        return (idx<(tokens && tokens.length))
                                    };
                                    let __body_ref__513=async function() {
                                        token=tokens[idx];
                                        (acc).push(await (async function(){
                                             return await compile(token,ctx) 
                                        })());
                                        if (check_true ((idx<((tokens && tokens.length)- 1)))){
                                            {
                                                (acc).push(",")
                                            }
                                        };
                                        return idx+=1
                                    };
                                    let __BREAK__FLAG__=false;
                                    while(await __test_condition__512()) {
                                        await __body_ref__513();
                                         if(__BREAK__FLAG__) {
                                             break;
                                            
                                        }
                                    } ;
                                    
                                })();
                                (acc).push("]");
                                return acc
                            }
                        } else if (check_true ((ref_type===ArgumentType))) {
                            {
                                (acc).push((tokens && tokens["0"] && tokens["0"]["name"]));
                                return acc
                            }
                        } else if (check_true ((ref_type==="undefined"))) {
                            {
                                throw new ReferenceError(("unknown reference: "+ (tokens && tokens["0"] && tokens["0"]["name"])));
                                
                            }
                        } else if (check_true ((call_type==="lisp"))) {
                            {
                                return await compile_lisp_scoped_reference((tokens && tokens["0"] && tokens["0"]["name"]),ctx)
                            }
                        } else {
                            {
                                (acc).push((tokens && tokens["0"] && tokens["0"]["name"]));
                                return acc
                            }
                        }
                    } () 
                })();
                if (check_true (false)){
                    {
                        await async function(){
                            if (check_true (((ref_type==="AsyncFunction")|| (ref_type==="Function")))) {
                                return (acc).unshift({
                                    ctype:ref_type
                                })
                            }
                        } ()
                    }
                };
                return acc
            };
            compile_lisp_scoped_reference=async function(refname,ctx,defer_not_found) {
                let refval;
                let reftype;
                let declarations;
                let preamble;
                let basename;
                refval=await get_lisp_ctx(ctx,refname);
                reftype=await sub_type(refval);
                declarations=null;
                preamble=await calling_preamble(ctx);
                basename=await (await Environment.get_global("get_object_path"))(refname);
                ;
                declarations=await add(new Object(),await get_declarations(ctx,refname),await get_declaration_details(ctx,refname));
                if (check_true ((declarations && declarations["inlined"]))){
                    {
                        refname=await sanitize_js_ref_name(refname)
                    }
                };
                if (check_true ((((reftype==="StringType")|| (reftype==="String"))&& await not((refval===undefined))))){
                    {
                        refval="text"
                    }
                };
                return await async function(){
                    if (check_true (await contains_ques_((basename && basename["0"]),standard_types))) {
                        return refname
                    } else if (check_true ((declarations && declarations["inlined"]))) {
                        return refname
                    } else if (check_true (await not((refval===undefined)))) {
                        {
                            has_lisp_globals=true;
                            return [{
                                ctype:await (async function(){
                                    if (check_true ((await not(refval instanceof Function)&& (refval instanceof Object)))){
                                        return "object"
                                    } else {
                                        return refval
                                    }
                                })()
                            },"(",(preamble && preamble["0"])," ",env_ref,"get_global","(\"",refname,"\")",")"]
                        }
                    } else if (check_true (defer_not_found)) {
                        return ["(",env_ref,"get_global","(\"",refname,"\", ReferenceError)",")"]
                    } else {
                        {
                            throw new ReferenceError(("unknown lisp reference: "+ refname));
                            
                        }
                    }
                } ()
            };
            standard_types=await (async function(){
                let all_vals;
                all_vals=await (await Environment.get_global("make_set"))(await (async function(){
                     return await uniq(await conj(["AsyncFunction","check_true","LispSyntaxError","dlisp_environment_count","clone","Environment","Expression","get_next_environment_id","subtype","lisp_writer","do_deferred_splice"],await (async function(){
                         return await object_methods(globalThis) 
                    })())) 
                })());
                await all_vals["delete"].call(all_vals,"length");
                return all_vals
            })();
            is_error=null;
            is_block_ques_=async function(tokens) {
                return (((tokens && tokens["0"] && tokens["0"]["type"])==="special")&& await contains_ques_((tokens && tokens["0"] && tokens["0"]["name"]),["do","progn"]))
            };
            is_complex_ques_=async function(tokens) {
                let rval;
                rval=(await is_block_ques_(tokens)|| (((tokens && tokens["type"])==="arr")&& await is_block_ques_((tokens && tokens["val"])))|| (((tokens && tokens["0"] && tokens["0"]["type"])==="special")&& (((tokens && tokens["0"] && tokens["0"]["name"])==="let")|| ((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["name"])==="if")|| ((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["name"])==="let"))));
                return rval
            };
            is_form_ques_=async function(token) {
                return (((token && token["val"]) instanceof Array)|| await is_block_ques_((token && token["val"])))
            };
            op_lookup=await ( async function(){
                let __obj__514=new Object();
                __obj__514["+"]=infix_ops;
                __obj__514["*"]=infix_ops;
                __obj__514["/"]=infix_ops;
                __obj__514["-"]=infix_ops;
                __obj__514["**"]=infix_ops;
                __obj__514["%"]=infix_ops;
                __obj__514["<<"]=infix_ops;
                __obj__514[">>"]=infix_ops;
                __obj__514["and"]=infix_ops;
                __obj__514["or"]=infix_ops;
                __obj__514["apply"]=compile_apply;
                __obj__514["call"]=compile_call;
                __obj__514["->"]=compile_call;
                __obj__514["set_prop"]=compile_set_prop;
                __obj__514["prop"]=compile_prop;
                __obj__514["="]=compile_assignment;
                __obj__514["setq"]=compile_assignment;
                __obj__514["=="]=compile_compare;
                __obj__514["eq"]=compile_compare;
                __obj__514[">"]=compile_compare;
                __obj__514["<"]=compile_compare;
                __obj__514["<="]=compile_compare;
                __obj__514[">="]=compile_compare;
                __obj__514["return"]=compile_return;
                __obj__514["new"]=compile_new;
                __obj__514["do"]=compile_block;
                __obj__514["progn"]=compile_block;
                __obj__514["progl"]=async function(tokens,ctx) {
                    return await compile_block(tokens,ctx,{
                        no_scope_boundary:true,suppress_return:true,force_no_new_ctx:true
                    })
                };
                __obj__514["break"]=compile_break;
                __obj__514["inc"]=compile_val_mod;
                __obj__514["dec"]=compile_val_mod;
                __obj__514["try"]=compile_try;
                __obj__514["throw"]=compile_throw;
                __obj__514["let"]=compile_let;
                __obj__514["defvar"]=compile_defvar;
                __obj__514["defconst"]=async function(tokens,ctx) {
                    if (check_true (await get_ctx(ctx,"__LOCAL_SCOPE__"))){
                        return await compile_defvar(tokens,ctx,{
                            constant:true
                        })
                    } else {
                        return await compile_set_global(tokens,ctx,{
                            constant:true
                        })
                    }
                };
                __obj__514["while"]=compile_while;
                __obj__514["for_each"]=compile_for_each;
                __obj__514["if"]=compile_if;
                __obj__514["cond"]=compile_cond;
                __obj__514["fn"]=compile_fn;
                __obj__514["lambda"]=compile_fn;
                __obj__514["function*"]=async function(tokens,ctx) {
                    return await compile_fn(tokens,ctx,{
                        generator:true
                    })
                };
                __obj__514["defglobal"]=compile_set_global;
                __obj__514["list"]=compile_list;
                __obj__514["function"]=async function(tokens,ctx) {
                    return await compile_fn(tokens,ctx,{
                        synchronous:true
                    })
                };
                __obj__514["=>"]=async function(tokens,ctx) {
                    return await compile_fn(tokens,ctx,{
                        arrow:true
                    })
                };
                __obj__514["yield"]=compile_yield;
                __obj__514["for_with"]=compile_for_with;
                __obj__514["quotem"]=compile_quotem;
                __obj__514["quote"]=compile_quote;
                __obj__514["quotel"]=compile_quotel;
                __obj__514["eval"]=compile_eval;
                __obj__514["jslambda"]=compile_jslambda;
                __obj__514["javascript"]=compile_javascript;
                __obj__514["instanceof"]=compile_instanceof;
                __obj__514["typeof"]=compile_typeof;
                __obj__514["unquotem"]=compile_unquotem;
                __obj__514["debug"]=compile_debug;
                __obj__514["declare"]=compile_declare;
                __obj__514["static_import"]=compile_import;
                __obj__514["dynamic_import"]=compile_dynamic_import;
                return __obj__514;
                
            })();
            comp_log=await (async function(){
                if (check_true (quiet_mode)){
                    return log
                } else {
                    return await defclog({
                        background:"LightSkyblue",color:"#000000"
                    })
                }
            })();
            last_source=null;
            compile_obj_literal=async function(tokens,ctx) {
                let acc;
                let idx;
                let stmt;
                let has_valid_key_literals;
                let token;
                let preamble;
                let key;
                let tmp_name;
                let kvpair;
                let total_length;
                acc=[];
                idx=-1;
                stmt=null;
                has_valid_key_literals=true;
                token=null;
                preamble=await calling_preamble(ctx);
                key=null;
                tmp_name=null;
                ctx=await new_ctx(ctx);
                kvpair=null;
                total_length=((tokens && tokens["val"] && tokens["val"]["length"])- 1);
                ;
                await async function(){
                    ctx["in_obj_literal"]=true;
                    return ctx;
                    
                }();
                await (async function() {
                    let __for_body__518=async function(token) {
                        if (check_true ((((token && token["type"])==="keyval")&& await check_invalid_js_ref((token && token.name))))){
                            {
                                has_valid_key_literals=false;
                                return __BREAK__FLAG__=true;
                                return
                            }
                        }
                    };
                    let __array__519=[],__elements__517=((tokens && tokens["val"])|| []);
                    let __BREAK__FLAG__=false;
                    for(let __iter__516 in __elements__517) {
                        __array__519.push(await __for_body__518(__elements__517[__iter__516]));
                        if(__BREAK__FLAG__) {
                             __array__519.pop();
                            break;
                            
                        }
                    }return __array__519;
                     
                })();
                if (check_true (has_valid_key_literals)){
                    if (check_true (((tokens && tokens["val"] && tokens["val"]["name"])==="{}"))){
                        return [{
                            ctype:"objliteral"
                        },"new Object()"]
                    } else {
                        {
                            (acc).push("{");
                            await (async function(){
                                 let __test_condition__520=async function() {
                                    return (idx<total_length)
                                };
                                let __body_ref__521=async function() {
                                    idx+=1;
                                    kvpair=await (async function(){
                                        let __targ__522=(tokens && tokens["val"]);
                                        if (__targ__522){
                                             return(__targ__522)[idx]
                                        } 
                                    })();
                                    key=await get_val((kvpair && kvpair["val"] && kvpair["val"]["0"]),ctx);
                                    if (check_true ((((key && key.length)===1)&& (await key["charCodeAt"]()===34)))){
                                        {
                                            key="'\"'"
                                        }
                                    };
                                    (acc).push(key);
                                    (acc).push(":");
                                    await set_ctx(ctx,"__LAMBDA_STEP__",-1);
                                    stmt=await compile_wrapper_fn((kvpair && kvpair["val"] && kvpair["val"]["1"]),ctx);
                                    await (await Environment.get_global("assert"))(stmt,"compile: obj literal value returned invalid/undefined value.");
                                    (acc).push(stmt);
                                    if (check_true ((idx<total_length))){
                                        {
                                            return (acc).push(",")
                                        }
                                    }
                                };
                                let __BREAK__FLAG__=false;
                                while(await __test_condition__520()) {
                                    await __body_ref__521();
                                     if(__BREAK__FLAG__) {
                                         break;
                                        
                                    }
                                } ;
                                
                            })();
                            (acc).push("}");
                            return [{
                                ctype:"objliteral"
                            },acc]
                        }
                    }
                } else {
                    {
                        tmp_name=await gen_temp_name("obj");
                        await (async function() {
                            let __for_body__525=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__526=[],__elements__524=await (async function(){
                                 return [{
                                    ctype:"statement"
                                },(preamble && preamble["0"])," ","("," ",(preamble && preamble["1"])," ","function","()","{","let"," ",tmp_name,"=","new"," ","Object","()",";"] 
                            })();
                            let __BREAK__FLAG__=false;
                            for(let __iter__523 in __elements__524) {
                                __array__526.push(await __for_body__525(__elements__524[__iter__523]));
                                if(__BREAK__FLAG__) {
                                     __array__526.pop();
                                    break;
                                    
                                }
                            }return __array__526;
                             
                        })();
                        await (async function(){
                             let __test_condition__527=async function() {
                                return (idx<total_length)
                            };
                            let __body_ref__528=async function() {
                                idx+=1;
                                kvpair=await (async function(){
                                    let __targ__529=(tokens && tokens["val"]);
                                    if (__targ__529){
                                         return(__targ__529)[idx]
                                    } 
                                })();
                                return await (async function() {
                                    let __for_body__532=async function(t) {
                                        return (acc).push(t)
                                    };
                                    let __array__533=[],__elements__531=await (async function(){
                                        let __array_op_rval__534=tmp_name;
                                         if (__array_op_rval__534 instanceof Function){
                                            return await __array_op_rval__534("[","\"",await (async function(){
                                                 return await cl_encode_string(await get_val((kvpair && kvpair["val"] && kvpair["val"]["0"]),ctx)) 
                                            })(),"\"","]","=",await compile_wrapper_fn((kvpair && kvpair["val"] && kvpair["val"]["1"]),ctx),";") 
                                        } else {
                                            return [__array_op_rval__534,"[","\"",await (async function(){
                                                 return await cl_encode_string(await get_val((kvpair && kvpair["val"] && kvpair["val"]["0"]),ctx)) 
                                            })(),"\"","]","=",await compile_wrapper_fn((kvpair && kvpair["val"] && kvpair["val"]["1"]),ctx),";"]
                                        }
                                    })();
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__530 in __elements__531) {
                                        __array__533.push(await __for_body__532(__elements__531[__iter__530]));
                                        if(__BREAK__FLAG__) {
                                             __array__533.pop();
                                            break;
                                            
                                        }
                                    }return __array__533;
                                     
                                })()
                            };
                            let __BREAK__FLAG__=false;
                            while(await __test_condition__527()) {
                                await __body_ref__528();
                                 if(__BREAK__FLAG__) {
                                     break;
                                    
                                }
                            } ;
                            
                        })();
                        await (async function() {
                            let __for_body__537=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__538=[],__elements__536=["return"," ",tmp_name,";","}",")","()"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__535 in __elements__536) {
                                __array__538.push(await __for_body__537(__elements__536[__iter__535]));
                                if(__BREAK__FLAG__) {
                                     __array__538.pop();
                                    break;
                                    
                                }
                            }return __array__538;
                             
                        })();
                        return acc
                    }
                }
            };
            is_literal_ques_=async function(val) {
                return (await is_number_ques_(val)|| (val instanceof String || typeof val==='string')|| (false===val)|| (true===val))
            };
            comp_warn=await (async function(){
                 return await defclog({
                    prefix:"compile: [warn]:",background:"#fcffc8",color:"brown"
                }) 
            })();
            let compile=await __compile__4();
            ;
            compile_inner=async function(tokens,ctx,_cdepth) {
                let operator_type;
                let op_token;
                let rcv;
                let __op__544= async function(){
                    return null
                };
                let acc;
                let preamble;
                let tmp_name;
                let refval;
                let ref;
                {
                    operator_type=null;
                    op_token=null;
                    rcv=null;
                    let op=await __op__544();
                    ;
                    _cdepth=(_cdepth|| 100);
                    acc=[];
                    preamble=await calling_preamble(ctx);
                    tmp_name=null;
                    refval=null;
                    ref=null;
                    ;
                    try {
                        if (check_true ((null==ctx))){
                            {
                                await error_log("compile: nil ctx: ",tokens);
                                throw new Error("compile: nil ctx");
                                
                            }
                        } else {
                            return await async function(){
                                if (check_true ((await is_number_ques_(tokens)|| (tokens instanceof String || typeof tokens==='string')|| (await sub_type(tokens)==="Boolean")))) {
                                    return tokens
                                } else if (check_true (((tokens instanceof Array)&& (tokens && tokens["0"] && tokens["0"]["ref"])&& await not((await get_ctx(ctx,(tokens && tokens["0"] && tokens["0"]["name"]))===UnknownType))&& (op_lookup[(tokens && tokens["0"] && tokens["0"]["name"])]|| (Function===await get_ctx_val(ctx,(tokens && tokens["0"] && tokens["0"]["name"])))|| (AsyncFunction===await get_ctx_val(ctx,(tokens && tokens["0"] && tokens["0"]["name"])))|| ("function"===typeof await (async function(){
                                    let __targ__546=(root_ctx && root_ctx["defined_lisp_globals"]);
                                    if (__targ__546){
                                         return(__targ__546)[(tokens && tokens["0"] && tokens["0"]["name"])]
                                    } 
                                })())|| await get_lisp_ctx(ctx,(tokens && tokens["0"] && tokens["0"]["name"])) instanceof Function)))) {
                                    {
                                        op_token=await first(tokens);
                                        operator=op_token["name"];
                                        operator_type=op_token["val"];
                                        ref=op_token["ref"];
                                        op=op_lookup[operator];
                                        return await async function(){
                                            if (check_true (op)) {
                                                return (op)(tokens,ctx)
                                            } else if (check_true (await (async function(){
                                                let __targ__547=(Environment && Environment["inlines"]);
                                                if (__targ__547){
                                                     return(__targ__547)[operator]
                                                } 
                                            })())) {
                                                return await compile_inline(tokens,ctx)
                                            } else {
                                                return await compile_scoped_reference(tokens,ctx)
                                            }
                                        } ()
                                    }
                                } else if (check_true (((tokens instanceof Object)&& ((tokens && tokens["type"])==="objlit")))) {
                                    {
                                        return await compile_obj_literal(tokens,ctx)
                                    }
                                } else if (check_true ((tokens instanceof Array))) {
                                    {
                                        return await async function(){
                                            if (check_true (((tokens && tokens.length)===0))) {
                                                return [{
                                                    ctype:"array",is_literal:true
                                                },"[]"]
                                            } else {
                                                {
                                                    let is_operation;
                                                    let declared_type;
                                                    let prefix;
                                                    let symbolic_replacements;
                                                    let compiled_values;
                                                    is_operation=false;
                                                    declared_type=null;
                                                    prefix="";
                                                    ctx=await new_ctx(ctx);
                                                    symbolic_replacements=[];
                                                    compiled_values=[];
                                                    await set_new_completion_scope(ctx);
                                                    if (check_true (((tokens && tokens["0"] && tokens["0"]["ref"])&& ((tokens && tokens["0"] && tokens["0"]["val"]) instanceof String || typeof (tokens && tokens["0"] && tokens["0"]["val"])==='string')))){
                                                        {
                                                            declared_type=await get_declarations(ctx,(tokens && tokens["0"] && tokens["0"]["name"]))
                                                        }
                                                    };
                                                    rcv=await (async function(){
                                                         return await compile((tokens && tokens["0"]),ctx,await add(_cdepth,1)) 
                                                    })();
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__548=verbosity;
                                                         if (__array_op_rval__548 instanceof Function){
                                                            return await __array_op_rval__548(ctx) 
                                                        } else {
                                                            return [__array_op_rval__548,ctx]
                                                        }
                                                    })())){
                                                        {
                                                            await comp_log(("compile: "+ _cdepth+ " array: "),"potential operator: ",(tokens && tokens["0"] && tokens["0"]["name"]),"declarations: ",declared_type)
                                                        }
                                                    };
                                                    await (async function() {
                                                        let __for_body__551=async function(t) {
                                                            if (check_true (await not(await get_ctx_val(ctx,"__IN_LAMBDA__")))){
                                                                await set_ctx(ctx,"__LAMBDA_STEP__",0)
                                                            };
                                                            return (compiled_values).push(await compile_wrapper_fn(t,ctx))
                                                        };
                                                        let __array__552=[],__elements__550=await (await Environment.get_global("rest"))(tokens);
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__549 in __elements__550) {
                                                            __array__552.push(await __for_body__551(__elements__550[__iter__549]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__552.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__552;
                                                         
                                                    })();
                                                    await map(async function(compiled_element,idx) {
                                                        let inst;
                                                        inst=await (async function(){
                                                             return await async function(){
                                                                if (check_true ((((compiled_element && compiled_element["0"]) instanceof Object)&& await (async function(){
                                                                    let __targ__553=(compiled_element && compiled_element["0"]);
                                                                    if (__targ__553){
                                                                         return(__targ__553)["ctype"]
                                                                    } 
                                                                })()))) {
                                                                    return await (async function(){
                                                                        let __targ__554=(compiled_element && compiled_element["0"]);
                                                                        if (__targ__554){
                                                                             return(__targ__554)["ctype"]
                                                                        } 
                                                                    })()
                                                                } else if (check_true (((compiled_element && compiled_element["0"])==="{"))) {
                                                                    return "block"
                                                                } else {
                                                                    return null
                                                                }
                                                            } () 
                                                        })();
                                                        return await async function(){
                                                            if (check_true (((inst==="block")|| (inst==="letblock")))) {
                                                                {
                                                                    return (symbolic_replacements).push(await (async function(){
                                                                        let __array_op_rval__555=idx;
                                                                         if (__array_op_rval__555 instanceof Function){
                                                                            return await __array_op_rval__555(await gen_temp_name("array_arg"),[(preamble && preamble["2"]),"(",(preamble && preamble["1"])," ","function","()"," ",compiled_element," ",")"]) 
                                                                        } else {
                                                                            return [__array_op_rval__555,await gen_temp_name("array_arg"),[(preamble && preamble["2"]),"(",(preamble && preamble["1"])," ","function","()"," ",compiled_element," ",")"]]
                                                                        }
                                                                    })())
                                                                }
                                                            } else if (check_true ((inst==="ifblock"))) {
                                                                {
                                                                    return (symbolic_replacements).push(await (async function(){
                                                                        let __array_op_rval__556=idx;
                                                                         if (__array_op_rval__556 instanceof Function){
                                                                            return await __array_op_rval__556(await gen_temp_name("array_arg"),[(preamble && preamble["2"]),"(",(preamble && preamble["1"])," ","function","()"," ","{",compiled_element,"}"," ",")"]) 
                                                                        } else {
                                                                            return [__array_op_rval__556,await gen_temp_name("array_arg"),[(preamble && preamble["2"]),"(",(preamble && preamble["1"])," ","function","()"," ","{",compiled_element,"}"," ",")"]]
                                                                        }
                                                                    })())
                                                                }
                                                            }
                                                        } ()
                                                    },compiled_values);
                                                    await (async function() {
                                                        let __for_body__559=async function(elem) {
                                                            await (async function() {
                                                                let __for_body__563=async function(t) {
                                                                    return (acc).push(t)
                                                                };
                                                                let __array__564=[],__elements__562=["let"," ",(elem && elem["1"]),"=",(elem && elem["2"]),";"];
                                                                let __BREAK__FLAG__=false;
                                                                for(let __iter__561 in __elements__562) {
                                                                    __array__564.push(await __for_body__563(__elements__562[__iter__561]));
                                                                    if(__BREAK__FLAG__) {
                                                                         __array__564.pop();
                                                                        break;
                                                                        
                                                                    }
                                                                }return __array__564;
                                                                 
                                                            })();
                                                            return await compiled_values["splice"].call(compiled_values,(elem && elem["0"]),1,[(preamble && preamble["0"])," ",(elem && elem["1"]),"()"])
                                                        };
                                                        let __array__560=[],__elements__558=symbolic_replacements;
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__557 in __elements__558) {
                                                            __array__560.push(await __for_body__559(__elements__558[__iter__557]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__560.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__560;
                                                         
                                                    })();
                                                    if (check_true (((symbolic_replacements && symbolic_replacements.length)>0))){
                                                        {
                                                            (acc).unshift("{");
                                                            (acc).unshift({
                                                                ctype:"block"
                                                            })
                                                        }
                                                    };
                                                    await async function(){
                                                        if (check_true ((((declared_type && declared_type["type"])===Function)|| ((declared_type && declared_type["type"])===AsyncFunction)|| (((rcv && rcv["0"]) instanceof Object)&& (rcv && rcv["0"] && rcv["0"]["ctype"]) instanceof Function)|| (((rcv && rcv["0"]) instanceof Object)&& await not(((rcv && rcv["0"]) instanceof Array))&& ((rcv && rcv["0"] && rcv["0"]["ctype"]) instanceof String || typeof (rcv && rcv["0"] && rcv["0"]["ctype"])==='string')&& await contains_ques_("unction",(rcv && rcv["0"] && rcv["0"]["ctype"])))))) {
                                                            {
                                                                if (check_true (((declared_type && declared_type["type"])===AsyncFunction))){
                                                                    prefix="await "
                                                                } else {
                                                                    prefix=""
                                                                };
                                                                is_operation=true;
                                                                await (async function() {
                                                                    let __for_body__567=async function(t) {
                                                                        return (acc).push(t)
                                                                    };
                                                                    let __array__568=[],__elements__566=await (async function(){
                                                                        let __array_op_rval__569=prefix;
                                                                         if (__array_op_rval__569 instanceof Function){
                                                                            return await __array_op_rval__569("(",rcv,")","(") 
                                                                        } else {
                                                                            return [__array_op_rval__569,"(",rcv,")","("]
                                                                        }
                                                                    })();
                                                                    let __BREAK__FLAG__=false;
                                                                    for(let __iter__565 in __elements__566) {
                                                                        __array__568.push(await __for_body__567(__elements__566[__iter__565]));
                                                                        if(__BREAK__FLAG__) {
                                                                             __array__568.pop();
                                                                            break;
                                                                            
                                                                        }
                                                                    }return __array__568;
                                                                     
                                                                })();
                                                                await push_as_arg_list(acc,compiled_values);
                                                                return (acc).push(")")
                                                            }
                                                        } else if (check_true (((null==(declared_type && declared_type["type"]))&& (((tokens && tokens["0"] && tokens["0"]["type"])==="arg")|| ((rcv instanceof String || typeof rcv==='string')&& await get_declaration_details(ctx,rcv))|| ((rcv instanceof Array)&& ((rcv && rcv["0"]) instanceof Object)&& ((rcv && rcv["0"] && rcv["0"]["ctype"]) instanceof String || typeof (rcv && rcv["0"] && rcv["0"]["ctype"])==='string')&& ((rcv && rcv["0"] && rcv["0"]["ctype"])&& (await not(await contains_ques_("unction",(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(await contains_ques_("block",(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("string"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("StringType"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("nil"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("NumberType"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("undefined"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("objliteral"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("Boolean"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("array"===(rcv && rcv["0"] && rcv["0"]["ctype"])))))))))) {
                                                            {
                                                                if (check_true (show_hints)){
                                                                    {
                                                                        await comp_warn("value ambiguity - use declare to clarify: ",await source_from_tokens(tokens,expanded_tree,true)," ",await (await Environment.get_global("as_lisp"))(rcv))
                                                                    }
                                                                };
                                                                tmp_name=await gen_temp_name("array_op_rval");
                                                                if (check_true (((symbolic_replacements && symbolic_replacements.length)>0))){
                                                                    {
                                                                        (acc).push({
                                                                            ctype:"block"
                                                                        });
                                                                        (acc).push("return");
                                                                        (acc).push(" ")
                                                                    }
                                                                };
                                                                await (async function() {
                                                                    let __for_body__572=async function(t) {
                                                                        return (acc).push(t)
                                                                    };
                                                                    let __array__573=[],__elements__571=[(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()","{","let"," ",tmp_name,"=",rcv,";"," ","if"," ","(",tmp_name," ","instanceof"," ","Function",")","{","return"," ",(preamble && preamble["0"])," ",tmp_name,"("];
                                                                    let __BREAK__FLAG__=false;
                                                                    for(let __iter__570 in __elements__571) {
                                                                        __array__573.push(await __for_body__572(__elements__571[__iter__570]));
                                                                        if(__BREAK__FLAG__) {
                                                                             __array__573.pop();
                                                                            break;
                                                                            
                                                                        }
                                                                    }return __array__573;
                                                                     
                                                                })();
                                                                await push_as_arg_list(acc,compiled_values);
                                                                await (async function() {
                                                                    let __for_body__576=async function(t) {
                                                                        return (acc).push(t)
                                                                    };
                                                                    let __array__577=[],__elements__575=[")"," ","}"," ","else"," ","{","return"," ","[",tmp_name];
                                                                    let __BREAK__FLAG__=false;
                                                                    for(let __iter__574 in __elements__575) {
                                                                        __array__577.push(await __for_body__576(__elements__575[__iter__574]));
                                                                        if(__BREAK__FLAG__) {
                                                                             __array__577.pop();
                                                                            break;
                                                                            
                                                                        }
                                                                    }return __array__577;
                                                                     
                                                                })();
                                                                if (check_true ((await length(await (await Environment.get_global("rest"))(tokens))>0))){
                                                                    {
                                                                        (acc).push(",");
                                                                        await push_as_arg_list(acc,compiled_values)
                                                                    }
                                                                };
                                                                return await (async function() {
                                                                    let __for_body__580=async function(t) {
                                                                        return (acc).push(t)
                                                                    };
                                                                    let __array__581=[],__elements__579=["]","}","}",")","()"];
                                                                    let __BREAK__FLAG__=false;
                                                                    for(let __iter__578 in __elements__579) {
                                                                        __array__581.push(await __for_body__580(__elements__579[__iter__578]));
                                                                        if(__BREAK__FLAG__) {
                                                                             __array__581.pop();
                                                                            break;
                                                                            
                                                                        }
                                                                    }return __array__581;
                                                                     
                                                                })()
                                                            }
                                                        } else if (check_true (((null==(declared_type && declared_type["type"]))&& (((rcv instanceof Array)&& ((rcv && rcv["0"]) instanceof Object)&& ((rcv && rcv["0"] && rcv["0"]["ctype"]) instanceof String || typeof (rcv && rcv["0"] && rcv["0"]["ctype"])==='string')&& await contains_ques_("block",(rcv && rcv["0"] && rcv["0"]["ctype"]))))))) {
                                                            {
                                                                if (check_true (((symbolic_replacements && symbolic_replacements.length)>0))){
                                                                    {
                                                                        (acc).push("return");
                                                                        (acc).push(" ")
                                                                    }
                                                                };
                                                                (acc).push("[");
                                                                (acc).push(["(",(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","() {",rcv,"})","()",")"]);
                                                                if (check_true ((await length(await (await Environment.get_global("rest"))(tokens))>0))){
                                                                    {
                                                                        (acc).push(",");
                                                                        await push_as_arg_list(acc,compiled_values)
                                                                    }
                                                                };
                                                                return (acc).push("]")
                                                            }
                                                        } else {
                                                            return [(await (async function() {if (check_true (((symbolic_replacements && symbolic_replacements.length)>0))){
                                                                {
                                                                    (acc).push("return");
                                                                    return (acc).push(" ")
                                                                }
                                                            }
                                                        })()),(acc).push("["),(acc).push(rcv),await (async function(){
                                                            if (check_true ((await length(await (await Environment.get_global("rest"))(tokens))>0))){
                                                                {
                                                                    (acc).push(",");
                                                                    return await push_as_arg_list(acc,compiled_values)
                                                                }
                                                            }
                                                        })(),(acc).push("]")]
                                                    }
                                                } ();
                                                if (check_true (((symbolic_replacements && symbolic_replacements.length)>0))){
                                                    {
                                                        (acc).push("}")
                                                    }
                                                };
                                                return acc
                                            }
                                        }
                                    } ()
                                }
                            } else if (check_true (((tokens instanceof Object)&& ((tokens && tokens["val"]) instanceof Array)&& (tokens && tokens["type"])))) {
                                {
                                    await async function(){
                                        ctx["source"]=(tokens && tokens["source"]);
                                        return ctx;
                                        
                                    }();
                                    rcv=await (async function(){
                                         return await compile((tokens && tokens["val"]),ctx,await add(_cdepth,1)) 
                                    })();
                                    return rcv
                                }
                            } else if (check_true ((((tokens instanceof Object)&& await not((undefined===(tokens && tokens["val"])))&& (tokens && tokens["type"]))|| ((tokens && tokens["type"])==="literal")|| ((tokens && tokens["type"])==="arg")|| ((tokens && tokens["type"])==="null")))) {
                                {
                                    let snt_name=null;
                                    ;
                                    let snt_value=null;
                                    ;
                                    return await async function(){
                                        if (check_true ((await not((tokens && tokens["ref"]))&& ((tokens && tokens["type"])==="arr")))) {
                                            return await compile((tokens && tokens["val"]),ctx,await add(_cdepth,1))
                                        } else if (check_true ((((tokens && tokens["type"])==="null")|| (((tokens && tokens["type"])==="literal")&& ((tokens && tokens.name)==="null")&& (tokens && tokens["ref"]))))) {
                                            return [{
                                                ctype:"nil"
                                            },"null"]
                                        } else if (check_true ((((tokens && tokens["type"])==="literal")&& ((tokens && tokens.name)==="undefined")&& (tokens && tokens["ref"])))) {
                                            return [{
                                                ctype:"undefined"
                                            },"undefined"]
                                        } else if (check_true (await not((tokens && tokens["ref"])))) {
                                            if (check_true ((((tokens && tokens["type"])==="literal")&& ((tokens && tokens["val"]) instanceof String || typeof (tokens && tokens["val"])==='string')))){
                                                return [{
                                                    ctype:"string"
                                                },("\""+ await (async function(){
                                                     return await cl_encode_string((tokens && tokens["val"])) 
                                                })()+ "\"")]
                                            } else {
                                                if (check_true (await is_number_ques_((tokens && tokens["val"])))){
                                                    return [{
                                                        ctype:"NumberType"
                                                    },(tokens && tokens["val"])]
                                                } else {
                                                    return [{
                                                        ctype:await sub_type((tokens && tokens["val"]))
                                                    },(tokens && tokens["val"])]
                                                }
                                            }
                                        } else if (check_true (((tokens && tokens["ref"])&& (opts && opts["root_environment"])))) {
                                            {
                                                return await (await Environment.get_global("path_to_js_syntax"))((await sanitize_js_ref_name((tokens && tokens.name))).split("."))
                                            }
                                        } else if (check_true (((tokens && tokens["ref"])&& op_lookup[(tokens && tokens.name)]))) {
                                            return (tokens && tokens.name)
                                        } else if (check_true (((tokens && tokens["ref"])&& await (async function(){
                                            snt_name=await sanitize_js_ref_name((tokens && tokens.name));
                                            snt_value=await get_ctx_val(ctx,snt_name);
                                            if (check_true (await (async function(){
                                                let __array_op_rval__583=verbosity;
                                                 if (__array_op_rval__583 instanceof Function){
                                                    return await __array_op_rval__583(ctx) 
                                                } else {
                                                    return [__array_op_rval__583,ctx]
                                                }
                                            })())){
                                                {
                                                    await comp_log("compile: singleton: ","name: ",(tokens && tokens.name)," sanitized: ",snt_name,"found locally as:",snt_value)
                                                }
                                            };
                                            return await not((snt_value===undefined))
                                        })()))) {
                                            {
                                                refval=snt_value;
                                                if (check_true ((refval===ArgumentType))){
                                                    {
                                                        refval=snt_name
                                                    }
                                                };
                                                return await async function(){
                                                    if (check_true (((tokens && tokens["type"])==="literal"))) {
                                                        return refval
                                                    } else {
                                                        return await get_val(tokens,ctx)
                                                    }
                                                } ()
                                            }
                                        } else if (check_true (await contains_ques_((tokens && tokens.name),standard_types))) {
                                            return (tokens && tokens.name)
                                        } else if (check_true (await not((undefined===await get_lisp_ctx(ctx,(tokens && tokens.name)))))) {
                                            {
                                                if (check_true (await (async function(){
                                                    let __array_op_rval__584=verbosity;
                                                     if (__array_op_rval__584 instanceof Function){
                                                        return await __array_op_rval__584(ctx) 
                                                    } else {
                                                        return [__array_op_rval__584,ctx]
                                                    }
                                                })())){
                                                    {
                                                        await comp_log("compile: singleton: found global: ",(tokens && tokens.name))
                                                    }
                                                };
                                                return await compile_lisp_scoped_reference((tokens && tokens.name),ctx)
                                            }
                                        } else {
                                            {
                                                if (check_true (await (async function(){
                                                    let __array_op_rval__585=verbosity;
                                                     if (__array_op_rval__585 instanceof Function){
                                                        return await __array_op_rval__585() 
                                                    } else {
                                                        return [__array_op_rval__585]
                                                    }
                                                })())){
                                                    {
                                                        await comp_log("compile: resolver fall through:",(tokens && tokens.name),"-  not found globally or in local context")
                                                    }
                                                };
                                                throw new ReferenceError(("compile: unknown/not found reference: "+ (tokens && tokens.name)));
                                                
                                            }
                                        }
                                    } ()
                                }
                            } else {
                                {
                                    throw new SyntaxError("compile passed invalid compilation structure");
                                    
                                }
                            }
                        } ()
                    }
                } catch (__exception__545) {
                    if (__exception__545 instanceof Error) {
                        let e=__exception__545;
                        {
                            {
                                if (check_true ((is_error&& (e && e["handled"])))){
                                    {
                                        throw e;
                                        
                                    }
                                };
                                is_error={
                                    error:(e && e.name),source_name:source_name,message:(e && e.message),form:await source_from_tokens(tokens,expanded_tree),parent_forms:await source_from_tokens(tokens,expanded_tree,true),invalid:true
                                };
                                if (check_true (await not((e && e["handled"])))){
                                    {
                                        (errors).push(is_error);
                                        await async function(){
                                            e["handled"]=true;
                                            return e;
                                            
                                        }()
                                    }
                                };
                                await async function(){
                                    e["details"]=is_error;
                                    return e;
                                    
                                }();
                                if (check_true ((opts && opts["throw_on_error"]))){
                                    throw e;
                                    
                                }
                            }
                        }
                    }
                }
            }
        };
        final_token_assembly=null;
        main_log=await (async function(){
            if (check_true ((opts && opts["quiet_mode"]))){
                return log
            } else {
                return await defclog({
                    prefix:"compiler:",background:"green",color:"black"
                })
            }
        })();
        assemble_output=async function(js_tree,suppress_join) {
            let text;
            let in_quotes;
            let escaped;
            let escape_char;
            let format_depth;
            let last_t;
            let insert_indent;
            let process_output_token;
            let assemble;
            text=[];
            in_quotes=false;
            escaped=0;
            escape_char=await String.fromCharCode(92);
            format_depth=[];
            last_t=null;
            insert_indent=async function() {
                (text).push("\n");
                return await (async function() {
                    let __for_body__590=async function(spacer) {
                        return (text).push(spacer)
                    };
                    let __array__591=[],__elements__589=format_depth;
                    let __BREAK__FLAG__=false;
                    for(let __iter__588 in __elements__589) {
                        __array__591.push(await __for_body__590(__elements__589[__iter__588]));
                        if(__BREAK__FLAG__) {
                             __array__591.pop();
                            break;
                            
                        }
                    }return __array__591;
                     
                })()
            };
            process_output_token=async function(t) {
                escaped=await Math.max(0,(escaped- 1));
                return await async function(){
                    if (check_true (((t==="\"")&& (escaped===0)&& in_quotes))) {
                        {
                            in_quotes=false;
                            return (text).push(t)
                        }
                    } else if (check_true (((t==="\"")&& (escaped===0)))) {
                        {
                            in_quotes=true;
                            return (text).push(t)
                        }
                    } else if (check_true ((t===escape_char))) {
                        {
                            (escaped===2);
                            return (text).push(t)
                        }
                    } else if (check_true ((await not(in_quotes)&& (t==="{")))) {
                        {
                            (text).push(t);
                            (format_depth).push("    ");
                            return await insert_indent()
                        }
                    } else if (check_true ((await not(in_quotes)&& await starts_with_ques_("}",t)))) {
                        {
                            (format_depth).pop();
                            await insert_indent();
                            return (text).push(t)
                        }
                    } else if (check_true ((await not(in_quotes)&& (t===";")))) {
                        {
                            (text).push(t);
                            return await insert_indent()
                        }
                    } else if (check_true ((false&& await not(in_quotes)&& await starts_with_ques_("/*",t)))) {
                        {
                            (text).push(t);
                            return await insert_indent()
                        }
                    } else {
                        {
                            return (text).push(t)
                        }
                    }
                } ()
            };
            assemble=async function(js_tokens) {
                return await (async function() {
                    let __for_body__594=async function(t) {
                        return await async function(){
                            if (check_true ((t instanceof Array))) {
                                {
                                    return await assemble(t)
                                }
                            } else if (check_true (("object"===typeof t))) {
                                {
                                    if (check_true (((t && t["comment"])&& (opts && opts["include_source"])))){
                                        {
                                            (text).push(("/* "+ (t && t["comment"])+ " */"));
                                            return await insert_indent()
                                        }
                                    }
                                }
                            } else if (check_true (t instanceof Function)) {
                                {
                                    return await async function(){
                                        if (check_true (((t && t.name)&& await contains_ques_((t && t.name),standard_types)))) {
                                            return (text).push((t && t.name))
                                        } else if (check_true (await (await Environment.get_global("ends_with?"))("{ [native code] }",await t["toString"]()))) {
                                            {
                                                throw new ReferenceError(("cannot capture source of: "+ (t && t.name)));
                                                
                                            }
                                        } else {
                                            return (text).push(t)
                                        }
                                    } ()
                                }
                            } else {
                                {
                                    if (check_true ((opts && opts["formatted_output"]))){
                                        return await process_output_token(t)
                                    } else {
                                        return (text).push(t)
                                    }
                                }
                            }
                        } ()
                    };
                    let __array__595=[],__elements__593=js_tokens;
                    let __BREAK__FLAG__=false;
                    for(let __iter__592 in __elements__593) {
                        __array__595.push(await __for_body__594(__elements__593[__iter__592]));
                        if(__BREAK__FLAG__) {
                             __array__595.pop();
                            break;
                            
                        }
                    }return __array__595;
                     
                })()
            };
            {
                await assemble(await flatten(await (async function(){
                    let __array_op_rval__596=js_tree;
                     if (__array_op_rval__596 instanceof Function){
                        return await __array_op_rval__596() 
                    } else {
                        return [__array_op_rval__596]
                    }
                })()));
                if (check_true (suppress_join)){
                    return text
                } else {
                    {
                        return (text).join("")
                    }
                }
            }
        };
        ;
        if (check_true ((null==Environment))){
            throw new EvalError("Compiler: No environment passed in options.");
            
        };
        if (check_true ((opts && opts["show_hints"]))){
            {
                show_hints=true
            }
        };
        if (check_true (await Environment["get_global"].call(Environment,"__VERBOSITY__"))){
            {
                {
                    let verbosity_level;
                    verbosity_level=await Environment["get_global"].call(Environment,"__VERBOSITY__");
                    await async function(){
                        if (check_true ((verbosity_level>4))) {
                            {
                                verbosity=check_verbosity;
                                return show_hints=true
                            }
                        } else if (check_true ((verbosity_level>3))) {
                            show_hints=true
                        }
                    } ()
                }
            }
        };
        if (check_true (await (async function(){
            let __array_op_rval__597=verbosity;
             if (__array_op_rval__597 instanceof Function){
                return await __array_op_rval__597(ctx) 
            } else {
                return [__array_op_rval__597,ctx]
            }
        })())){
            {
                await (async function(){
                    let __array_op_rval__598=main_log;
                     if (__array_op_rval__598 instanceof Function){
                        return await __array_op_rval__598("namespace set to: ",(Environment && Environment["namespace"])) 
                    } else {
                        return [__array_op_rval__598,"namespace set to: ",(Environment && Environment["namespace"])]
                    }
                })();
                if (check_true ((opts && opts["fully_qualified_globals"]))){
                    {
                        await (async function(){
                            let __array_op_rval__599=main_log;
                             if (__array_op_rval__599 instanceof Function){
                                return await __array_op_rval__599("fully qualified globals") 
                            } else {
                                return [__array_op_rval__599,"fully qualified globals"]
                            }
                        })()
                    }
                }
            }
        };
        await set_ctx(root_ctx,break_out,false);
        await async function(){
            root_ctx["defined_lisp_globals"]=new Object();
            return root_ctx;
            
        }();
        await set_ctx(root_ctx,"__COMPLETION_SCOPE__",{
            id:completion_scope_id,root_block_id:null,completion_records:[],is_top:true
        });
        await set_ctx(root_ctx,"__GLOBALS__",new Set());
        await set_ctx(root_ctx,"__SOURCE_NAME__",source_name);
        await set_ctx(root_ctx,"__LAMBDA_STEP__",-1);
        output=await (async function(){
             return await async function(){
                if (check_true ((opts && opts["special_operators"]))) {
                    {
                        return await (await Environment.get_global("make_set"))(await (await Environment.get_global("keys"))(op_lookup))
                    }
                } else if (check_true ((opts && opts["only_tokens"]))) {
                    return await tokenize(tree,root_ctx)
                } else if (check_true (is_error)) {
                    return [{
                        ctype:"CompileError"
                    },is_error]
                } else {
                    {
                        try {
                            final_token_assembly=await tokenize(tree,root_ctx)
                        } catch (__exception__601) {
                            if (__exception__601 instanceof Error) {
                                let e=__exception__601;
                                {
                                    is_error=e
                                }
                            }
                        };
                        await async function(){
                            if (check_true ((is_error&& (opts && opts["throw_on_error"])))) {
                                throw is_error;
                                
                            } else if (check_true ((is_error instanceof SyntaxError))) {
                                {
                                    (errors).push(is_error);
                                    return is_error
                                }
                            } else if (check_true (is_error)) {
                                {
                                    (errors).push(is_error);
                                    return is_error
                                }
                            } else if (check_true ((null==final_token_assembly))) {
                                {
                                    is_error=new EvalError("Pre-Compilation Error");
                                    return (errors).push(is_error)
                                }
                            } else {
                                {
                                    assembly=await (async function(){
                                         return await compile(final_token_assembly,root_ctx,0) 
                                    })();
                                    if (check_true ((is_error&& (opts && opts["throw_on_error"])))){
                                        {
                                            throw is_error;
                                            
                                        }
                                    };
                                    if (check_true (await not(is_error))){
                                        {
                                            if (check_true ((assembly instanceof Array))){
                                                {
                                                    await check_statement_completion(root_ctx,assembly)
                                                }
                                            }
                                        }
                                    };
                                    if (check_true ((false&& await not((opts && opts["root_environment"]))&& ((first_level_setup && first_level_setup.length)===0)&& has_lisp_globals))){
                                        (first_level_setup).push(["const __GG__=",env_ref,"get_global",";"])
                                    };
                                    return assembly
                                }
                            }
                        } ();
                        if (check_true ((opts && opts["root_environment"]))){
                            {
                                has_lisp_globals=false
                            }
                        };
                        if (check_true (((assembly && assembly["0"] && assembly["0"]["ctype"])&& (assembly && assembly["0"] && assembly["0"]["ctype"]) instanceof Function))){
                            {
                                await async function(){
                                    let __target_obj__602=(assembly && assembly["0"]);
                                    __target_obj__602["ctype"]=await map_value_to_ctype((assembly && assembly["0"] && assembly["0"]["ctype"]));
                                    return __target_obj__602;
                                    
                                }()
                            }
                        };
                        await async function(){
                            if (check_true ((await not(is_error)&& assembly&& (await first(assembly) instanceof Object)&& await (async function(){
                                let __targ__603=await first(assembly);
                                if (__targ__603){
                                     return(__targ__603)["ctype"]
                                } 
                            })()&& (await not((await (async function(){
                                let __targ__604=await first(assembly);
                                if (__targ__604){
                                     return(__targ__604)["ctype"]
                                } 
                            })() instanceof String || typeof await (async function(){
                                let __targ__604=await first(assembly);
                                if (__targ__604){
                                     return(__targ__604)["ctype"]
                                } 
                            })()==='string'))|| await (async function(){
                                let val;
                                val=await (async function(){
                                    let __targ__605=await first(assembly);
                                    if (__targ__605){
                                         return(__targ__605)["ctype"]
                                    } 
                                })();
                                return (await not((val==="assignment"))&& await not(await contains_ques_("block",val))&& await not(await contains_ques_("unction",val)))
                            })())))) {
                                return await async function(){
                                    let __target_obj__606=(assembly && assembly["0"]);
                                    __target_obj__606["ctype"]="statement";
                                    return __target_obj__606;
                                    
                                }()
                            } else if (check_true ((assembly&& (await first(assembly) instanceof String || typeof await first(assembly)==='string')&& (await first(assembly)==="throw")))) {
                                return assembly=await (async function(){
                                     return [{
                                        ctype:"block"
                                    },assembly] 
                                })()
                            } else if (check_true ((await not(is_error)&& assembly&& (await not((await first(assembly) instanceof Object))|| await not(await (async function(){
                                let __targ__607=await first(assembly);
                                if (__targ__607){
                                     return(__targ__607)["ctype"]
                                } 
                            })()))))) {
                                return assembly=await (async function(){
                                     return [{
                                        ctype:"statement"
                                    },assembly] 
                                })()
                            } else if (check_true (is_error)) {
                                return is_error
                            } else if (check_true ((null==assembly))) {
                                return assembly=[]
                            }
                        } ();
                        if (check_true (is_error)){
                            {
                                return [{
                                    ctype:"FAIL"
                                },errors]
                            }
                        } else {
                            if (check_true ((await first(assembly) instanceof Object))){
                                return [await add({
                                    has_lisp_globals:has_lisp_globals,requires:await (async function(){
                                         return await (await Environment.get_global("to_array"))(referenced_global_symbols) 
                                    })()
                                },(assembly).shift()),await assemble_output(assembly)]
                            } else {
                                return [{
                                    has_lisp_globals:has_lisp_globals,requires:await (async function(){
                                         return await (await Environment.get_global("to_array"))(referenced_global_symbols) 
                                    })()
                                },await assemble_output(assembly)]
                            }
                        }
                    }
                }
            } () 
        })();
        if (check_true (((await first(output) instanceof Object)&& target_namespace))){
            {
                await async function(){
                    let __target_obj__608=await first(output);
                    __target_obj__608["namespace"]=target_namespace;
                    return __target_obj__608;
                    
                }()
            }
        };
        if (check_true ((opts && opts["error_report"]))){
            {
                await opts.error_report({
                    errors:errors,warnings:warnings
                })
            }
        };
        return output
    }
}
};__obj__1["read_text_file"]=await (async function(){ return "placeholder" })();__obj__1["readline_mod"]=await (async function(){ return "placeholder" })();__obj__1["streams"]=await (async function(){ return "placeholder" })();__obj__1["repl"]=async function(instream,outstream,opts) {
    let not=function anonymous(x) {
{ if (check_true(x)) { return false } else { return true } }
};
    let buffer;
    let lines;
    let raw_mode;
    let use_console;
    let clean_input;
    let generator;
    let td;
    let te;
    let prompt_text;
    let __prompt__3= async function(){
        return async function() {
            return await te["encode"].call(te,await (async function(){
                let __array_op_rval__4=prompt_text;
                 if (__array_op_rval__4 instanceof Function){
                    return await __array_op_rval__4() 
                } else {
                    return [__array_op_rval__4]
                }
            })())
        }
    };
    let last_exception;
    let subprompt_text;
    let subprompt;
    let sigint_message;
    let write;
    let sigint_handler;
    let output_processor;
    let return_stack;
    {
        buffer=null;
        lines=[];
        raw_mode=await (async function(){
             return await (await Environment.get_global("either"))((opts && opts["raw"]),await (await Environment.get_global("resolve_path"))(["repl","raw_mode"],(await Environment.get_global("*env_config*"))),false) 
        })();
        use_console=((opts && opts["use_console"])|| false);
        clean_input=true;
        generator=(await Environment.get_global("readline_mod.readline"));
        instream=(instream|| Deno.stdin);
        outstream=(outstream|| Deno.stdout);
        td=new TextDecoder();
        te=new TextEncoder();
        prompt_text=await (async function(){
             return await async function(){
                if (check_true ((opts && opts["prompt"]) instanceof Function)) {
                    return (opts && opts["prompt"])
                } else if (check_true (((opts && opts["prompt"]) instanceof String || typeof (opts && opts["prompt"])==='string'))) {
                    return function() {
                        return (opts && opts["prompt"])
                    }
                } else {
                    return function() {
                        return ("["+  ( Environment.get_global("current_namespace"))()+ "] λ-> ")
                    }
                }
            } () 
        })();
        let prompt=await __prompt__3();
        ;
        last_exception=null;
        subprompt_text=await (async function(){
             return await async function(){
                if (check_true ((opts && opts["subprompt"]) instanceof Function)) {
                    return (opts && opts["subprompt"])
                } else if (check_true (((opts && opts["prompt"]) instanceof String || typeof (opts && opts["prompt"])==='string'))) {
                    return function() {
                        return (opts && opts["prompt"])
                    }
                } else {
                    return async function() {
                        return ("     "+ (await (async function(){
                             return await (await Environment.get_global("map"))(async function(v) {
                                return " "
                            },await (await Environment.get_global("range"))((2+ await (await Environment.get_global("length"))(await (await Environment.get_global("current_namespace"))())))) 
                        })()).join("")+ (await (async function(){
                             return await (await Environment.get_global("map"))(async function(v) {
                                return " "
                            },await (await Environment.get_global("range_inc"))(((last_exception && last_exception["depth"])|| 1))) 
                        })()).join(""))
                    }
                }
            } () 
        })();
        subprompt=async function() {
            return await te["encode"].call(te,await (async function(){
                let __array_op_rval__5=subprompt_text;
                 if (__array_op_rval__5 instanceof Function){
                    return await __array_op_rval__5() 
                } else {
                    return [__array_op_rval__5]
                }
            })())
        };
        sigint_message=await te["encode"].call(te,await (async function(){
             return await (await Environment.get_global("either"))((opts && opts["sigint_message"]),"\nsigint: input canceled. type ctrl-d to exit.\n") 
        })());
        write=(await Environment.get_global("streams.writeAllSync"));
        sigint_handler=function() {
             write(outstream,sigint_message);
            lines=[];
            return  write(outstream,prompt)
        };
        output_processor=await (async function(){
             return await async function(){
                if (check_true ((opts&& (opts && opts["output_processor"])&& (opts && opts["output_processor"]) instanceof Function))) {
                    return (opts && opts["output_processor"])
                } else if (check_true (await (await Environment.get_global("resolve_path"))(["repl","output_processor"],(await Environment.get_global("*env_config*"))))) {
                    return await (await Environment.get_global("resolve_path"))(["repl","output_processor"],(await Environment.get_global("*env_config*")))
                } else {
                    return async function(value) {
                        return await JSON.stringify(value,null,2)
                    }
                }
            } () 
        })();
        return_stack=[];
        ;
        await Environment.set_global("$",null);
        await Environment.set_global("$$",null);
        await Environment.set_global("$$$",null);
        if (check_true ((outstream===Deno.stdout))){
            await console.log("\nJuno",Environment.build_version," (c) 2022, Kina, LLC")
        };
        try {
            await Deno.addSignalListener("SIGINT",sigint_handler)
        } catch (__exception__6) {
            if (__exception__6 instanceof Error) {
                let e=__exception__6;
                {
                    await (await Environment.get_global("warn"))("Unable to install sigint handler.")
                }
            }
        };
        if (check_true (await not(raw_mode))){
            await write(outstream,await prompt())
        };
        try {
            return await (async function() {
                let __for_body__10=async function(l) {
                    l=await td["decode"].call(td,l);
                    try {
                        clean_input=true;
                        try {
                            await (await Environment.get_global("reader"))((await (await Environment.get_global("add"))(lines,l)).join("\n"),{
                                verbose:false
                            })
                        } catch (__exception__12) {
                            if (__exception__12 instanceof LispSyntaxError) {
                                let e=__exception__12;
                                {
                                    {
                                        if (check_true ((opts && opts["simple"]))){
                                            {
                                                throw e;
                                                
                                            }
                                        };
                                        clean_input=false;
                                        last_exception=await JSON.parse((e && e.message));
                                        await Environment.set_global("*last_exception*",last_exception);
                                        await async function(){
                                            if (check_true (await not(((last_exception && last_exception["type"])==="premature end")))) {
                                                {
                                                    await (await Environment.get_global("warn"))(((last_exception && last_exception["message"])+ ", position: "+ (last_exception && last_exception["position"])+ "\n    -->"+ (last_exception && last_exception["local_text"])+ "<--"));
                                                    lines=[];
                                                    if (check_true (await not(raw_mode))){
                                                        {
                                                            return await write(outstream,await prompt())
                                                        }
                                                    }
                                                }
                                            } else {
                                                {
                                                    (lines).push(l);
                                                    if (check_true (await not(raw_mode))){
                                                        {
                                                            await write(outstream,await subprompt())
                                                        }
                                                    }
                                                }
                                            }
                                        } ()
                                    }
                                }
                            } else throw __exception__12;
                            
                        };
                        if (check_true (clean_input)){
                            {
                                buffer=(await (await Environment.get_global("add"))(lines,l)).join("\n");
                                (return_stack).unshift(await Environment["evaluate"].call(Environment,buffer));
                                if (check_true (use_console)){
                                    await console.log(await (await Environment.get_global("first"))(return_stack))
                                } else {
                                    {
                                        await write(outstream,await te["encode"].call(te,await (async function(){
                                            let __array_op_rval__13=output_processor;
                                             if (__array_op_rval__13 instanceof Function){
                                                return await __array_op_rval__13(await (await Environment.get_global("first"))(return_stack)) 
                                            } else {
                                                return [__array_op_rval__13,await (await Environment.get_global("first"))(return_stack)]
                                            }
                                        })()));
                                        await write(outstream,await te["encode"].call(te,"\n"))
                                    }
                                };
                                if (check_true (await not(raw_mode))){
                                    {
                                        await write(outstream,await prompt())
                                    }
                                };
                                lines=[];
                                if (check_true (((return_stack && return_stack.length)>3))){
                                    {
                                        (return_stack).pop()
                                    }
                                };
                                if (check_true (((await (await Environment.get_global("first"))(return_stack)===Environment)|| (await (await Environment.get_global("first"))(return_stack)===Environment.global_ctx)|| (await (await Environment.get_global("first"))(return_stack)===Environment.global_ctx[(await Environment.get_global("*namespace*"))])|| (await (await Environment.get_global("first"))(return_stack)===await (async function(){
                                    let __targ__14=Environment.global_ctx[(await Environment.get_global("*namespace*"))];
                                    if (__targ__14){
                                         return(__targ__14)["scope"]
                                    } 
                                })())))){
                                    {
                                        await async function(){
                                            return_stack[0]=null;
                                            return return_stack;
                                            
                                        }()
                                    }
                                };
                                await Environment.set_global("$",await (await Environment.get_global("first"))(return_stack));
                                await Environment.set_global("$$",await (await Environment.get_global("second"))(return_stack));
                                return await Environment.set_global("$$$",(return_stack && return_stack["2"]))
                            }
                        }
                    } catch (__exception__11) {
                        if (__exception__11 instanceof Error) {
                            let e=__exception__11;
                            {
                                {
                                    if (check_true (await (await Environment.get_global("resolve_path"))(["repl","backtrace"],(await Environment.get_global("*env_config*"))))){
                                        await console.error("[ERROR] ",e)
                                    } else {
                                        if (check_true ((e && e["details"]))){
                                            await console.error("[ERROR]: ",(e && e["details"]))
                                        } else {
                                            await console.error("[ERROR]: ",(e && e.message))
                                        }
                                    };
                                    if (check_true (await not(raw_mode))){
                                        {
                                            return await write(outstream,await prompt())
                                        }
                                    }
                                }
                            }
                        }
                    }
                };
                let __BREAK__FLAG__=false;
                for await (const __iter__8 of await (async function(){
                    let __array_op_rval__16=generator;
                     if (__array_op_rval__16 instanceof Function){
                        return await __array_op_rval__16(instream) 
                    } else {
                        return [__array_op_rval__16,instream]
                    }
                })()) {
                    await __for_body__10(__iter__8);
                    if(__BREAK__FLAG__) break;
                    
                } 
            })()
        } catch (__exception__7) {
            if (__exception__7 instanceof Error) {
                let e=__exception__7;
                {
                    return await console.error("REPL: ",e)
                }
            }
        }
    }
};__obj__1["set_repl"]=async function(key,value) {
    return await (await Environment.get_global("set_path"))(["repl",key],(await Environment.get_global("*env_config*")),value)
};__obj__1["repl_config"]=async function() {
    return await (await Environment.get_global("add"))({
        backtrace:false,raw_mode:false,output_processor:false
    },(await (await Environment.get_global("resolve_path"))(["repl"],(await Environment.get_global("*env_config*")))|| new Object()))
};__obj__1["path"]=await (async function(){ return "placeholder" })();__obj__1["write_text_file"]=await (async function(){ return "placeholder" })();__obj__1["load"]=async function(filename) {
        let fname;
        let js_mod;
        let comps;
        fname=filename;
        js_mod=null;
        comps=await (await Environment.get_global("path.parse"))(fname);
        return await async function(){
            if (check_true (((comps && comps["ext"])===".lisp"))) {
                return await (await Environment.get_global("evaluate"))(await (async function(){
                     return await (await Environment.get_global("read_text_file"))(fname) 
                })(),null,{
                    source_name:fname
                })
            } else if (check_true (((comps && comps["ext"])===".js"))) {
                {
                    js_mod=await import (fname);
                    if (check_true ((js_mod && js_mod["initializer"]))){
                        return await (async function(){
                            let __array_op_rval__2=(js_mod && js_mod["initializer"]);
                             if (__array_op_rval__2 instanceof Function){
                                return await __array_op_rval__2(Environment) 
                            } else {
                                return [__array_op_rval__2,Environment]
                            }
                        })()
                    } else {
                        throw new EvalError("load: unable to find function named initializer in export, use dynamic_import for this.");
                        
                    }
                }
            } else if (check_true (((comps && comps["ext"])===".json"))) {
                return await (await Environment.get_global("evaluate"))(await JSON.parse(await (async function(){
                     return await (await Environment.get_global("read_text_file"))(fname) 
                })()),null,{
                    json_in:true
                })
            }
        } ()
    };__obj__1["with_fs_events"]=async function(...args) {
    let event_binding;
    let location;
    let body;
    event_binding=(args && args["0"] && args["0"]["0"]);
    location=(args && args["0"] && args["0"]["1"]);
    body=(args && args["1"]);
    return ["=:let",[["=:watcher",["=:->","=:Deno","watchFs",location]]],["=:declare",["=:object","=:watcher"]],["=:for_with",[event_binding,"=:watcher"],["=:progn",body]]]
};__obj__1["compile_buffer"]=async function(input_buffer,export_function_name,options) {
    let output_filename;
    let opts;
    let segments;
    let export_segment;
    let include_boilerplate;
    let start_time;
    let compile_time;
    let write_file;
    let import_headers;
    let include_source;
    let compiled;
    let invalid_js_ref_chars;
    let invalid_js_ref_chars_regex;
    let boilerplate;
    let compiled_js;
    output_filename=(options && options["output_file"]);
    opts=await (await Environment.get_global("add"))(new Object(),(options|| new Object()),{
        want_buffer:await (async function(){
            if (check_true (((options && options["want_buffer"])|| (null==output_filename)))){
                return true
            } else {
                return false
            }
        })()
    });
    export_function_name=(export_function_name|| "initializer");
    segments=[];
    export_segment=[];
    include_boilerplate=await (async function(){
        if (check_true ((false===(opts && opts["include_boilerplate"])))){
            return false
        } else {
            return true
        }
    })();
    start_time=await Date.now();
    compile_time=null;
    write_file=true;
    import_headers=await (async function(){
        if (check_true (((options && options["imports"]) instanceof Object))){
            return await (await Environment.get_global("map"))(async function(import_set,idx) {
                let target;
                let imp_details;
                target=(import_set && import_set["1"] && import_set["1"]["symbol"]);
                imp_details=(import_set && import_set["1"] && import_set["1"]["location"]);
                return await (async function(){
                    let __array_op_rval__1=("import * as "+ (target+ "_module")+ " from '"+ imp_details+ "'\n"+ "export const "+ target+ "="+ (target+ "_module")+ ";");
                     if (__array_op_rval__1 instanceof Function){
                        return await __array_op_rval__1() 
                    } else {
                        return [__array_op_rval__1]
                    }
                })()
            },await (await Environment.get_global("pairs"))((options && options["imports"])))
        } else {
            return []
        }
    })();
    include_source=await (async function(){
        if (check_true ((opts && opts["include_source"]))){
            return true
        } else {
            return false
        }
    })();
    compiled=null;
    invalid_js_ref_chars="+?-%&^#!*[]~{}|";
    invalid_js_ref_chars_regex=new RegExp("[\%\+\[\>\?\<\\}\{&\#\^\=\~\*\!\)\(\-]+");
    boilerplate="var { get_next_environment_id, check_true, get_outside_global, subtype, lisp_writer, clone, LispSyntaxError } = await import(\"./lisp_writer.js\");";
    compiled_js=null;
    if (check_true ((await (await Environment.get_global("length"))(await (await Environment.get_global("scan_str"))(invalid_js_ref_chars_regex,export_function_name))>0))){
        {
            throw new SyntaxError(("export function name contains an invalid JS character: "+ export_function_name+ ", cannot contain: "+ invalid_js_ref_chars));
            
        }
    };
    (segments).push(("// Source: "+ (options && options["input_filename"])+ "  "));
    if (check_true (((import_headers && import_headers.length)>0))){
        {
            await (async function() {
                let __for_body__4=async function(static_import) {
                    return (segments).push(static_import)
                };
                let __array__5=[],__elements__3=import_headers;
                let __BREAK__FLAG__=false;
                for(let __iter__2 in __elements__3) {
                    __array__5.push(await __for_body__4(__elements__3[__iter__2]));
                    if(__BREAK__FLAG__) {
                         __array__5.pop();
                        break;
                        
                    }
                }return __array__5;
                 
            })();
            (segments).push("\n")
        }
    };
    if (check_true (((opts && opts["build_headers"]) instanceof Array))){
        {
            await (async function() {
                let __for_body__8=async function(header) {
                    return (segments).push(header)
                };
                let __array__9=[],__elements__7=(opts && opts["build_headers"]);
                let __BREAK__FLAG__=false;
                for(let __iter__6 in __elements__7) {
                    __array__9.push(await __for_body__8(__elements__7[__iter__6]));
                    if(__BREAK__FLAG__) {
                         __array__9.pop();
                        break;
                        
                    }
                }return __array__9;
                 
            })();
            (segments).push("\n")
        }
    };
    (segments).push("\n");
    if (check_true (include_boilerplate)){
        (segments).push(boilerplate)
    };
    if (check_true (((opts && opts["js_headers"]) instanceof Array))){
        {
            await (async function() {
                let __for_body__12=async function(header) {
                    return (segments).push(header)
                };
                let __array__13=[],__elements__11=(opts && opts["js_headers"]);
                let __BREAK__FLAG__=false;
                for(let __iter__10 in __elements__11) {
                    __array__13.push(await __for_body__12(__elements__11[__iter__10]));
                    if(__BREAK__FLAG__) {
                         __array__13.pop();
                        break;
                        
                    }
                }return __array__13;
                 
            })();
            (segments).push("\n")
        }
    };
    if (check_true (((export_function_name==="init_dlisp")|| (opts && opts["toplevel"])))){
        {
            (segments).push("if (typeof AsyncFunction === \"undefined\") {\n  globalThis.AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n}")
        }
    };
    if (check_true (((input_buffer instanceof Array)&& ((input_buffer && input_buffer["0"])==="=:iprogn")))){
        await async function(){
            input_buffer[0]=await (async function(){
                 return "=:progn" 
            })();
            return input_buffer;
            
        }()
    };
    if (check_true ((opts && opts["verbose"]))){
        {
            await console.log("input_buffer: ",input_buffer)
        }
    };
    compiled=await (async function(){
         return await (await Environment.get_global("compiler"))(input_buffer,await (await Environment.get_global("add"))({
            env:Environment,formatted_output:true,include_source:include_source,source_name:((opts && opts["input_filename"])|| "anonymous")
        },opts)) 
    })();
    compile_time=await (await Environment.get_global("add"))(await (async function() {
        {
             let __call_target__=((await Date.now()- start_time)/ 1000), __call_method__="toFixed";
            return await __call_target__[__call_method__].call(__call_target__,3)
        } 
    })(),"s");
    await async function(){
        if (check_true ((compiled && compiled["error"]))) {
            throw new Error((await Environment.get_global("indirect_new"))(compiled.error,(compiled && compiled["message"])));
            
        } else if (check_true (((compiled && compiled["0"] && compiled["0"]["ctype"])&& ((compiled && compiled["0"] && compiled["0"]["ctype"])==="FAIL")))) {
            {
                write_file=false;
                await (await Environment.get_global("warn"))((compiled && compiled["1"]))
            }
        } else if (check_true (((compiled && compiled["0"] && compiled["0"]["ctype"])&& (await (await Environment.get_global("contains?"))("block",(compiled && compiled["0"] && compiled["0"]["ctype"]))|| ((compiled && compiled["0"] && compiled["0"]["ctype"])==="assignment")|| ((compiled && compiled["0"] && compiled["0"]["ctype"])==="__!NOT_FOUND!__"))))) {
            if (check_true (await (async function(){
                let __array_op_rval__15=(compiled && compiled["0"] && compiled["0"]["has_lisp_globals"]);
                 if (__array_op_rval__15 instanceof Function){
                    return await __array_op_rval__15() 
                } else {
                    return [__array_op_rval__15]
                }
            })())){
                {
                    (segments).push(("export async function "+ export_function_name+ "(Environment)  {"));
                    (segments).push((compiled && compiled["1"]));
                    (segments).push("}")
                }
            } else {
                {
                    (segments).push(("export async function "+ export_function_name+ "() {"));
                    (segments).push((compiled && compiled["1"]));
                    (segments).push("}")
                }
            }
        } else if (check_true (((compiled && compiled["0"] && compiled["0"]["ctype"])&& (("AsyncFunction"===(compiled && compiled["0"] && compiled["0"]["ctype"]))|| ("statement"===(compiled && compiled["0"] && compiled["0"]["ctype"]))|| ("objliteral"===(compiled && compiled["0"] && compiled["0"]["ctype"])))))) {
            {
                if (check_true (await (async function(){
                    let __array_op_rval__16=(compiled && compiled["0"] && compiled["0"]["has_lisp_globals"]);
                     if (__array_op_rval__16 instanceof Function){
                        return await __array_op_rval__16() 
                    } else {
                        return [__array_op_rval__16]
                    }
                })())){
                    {
                        (segments).push(("export async function "+ export_function_name+ "(Environment) {"));
                        (segments).push(("  return "+ (compiled && compiled["1"])+ "} "))
                    }
                } else {
                    {
                        (segments).push(("export async function "+ export_function_name+ "() {"));
                        (segments).push(("  return "+ (compiled && compiled["1"])+ "} "))
                    }
                }
            }
        } else if (check_true (((compiled && compiled["0"] && compiled["0"]["ctype"])&& ("Function"===(compiled && compiled["0"] && compiled["0"]["ctype"]))))) {
            {
                if (check_true (await (async function(){
                    let __array_op_rval__17=(compiled && compiled["0"] && compiled["0"]["has_lisp_globals"]);
                     if (__array_op_rval__17 instanceof Function){
                        return await __array_op_rval__17() 
                    } else {
                        return [__array_op_rval__17]
                    }
                })())){
                    {
                        (segments).push(("export function "+ export_function_name+ "(Environment) {"));
                        (segments).push(("  return "+ (compiled && compiled["1"])+ "}"))
                    }
                } else {
                    {
                        (segments).push(("export function "+ export_function_name+ "() {"));
                        (segments).push(("  return "+ (compiled && compiled["1"])+ " } "))
                    }
                }
            }
        } else {
            {
                await console.log("warning: unhandled return: ",compiled);
                write_file=false
            }
        }
    } ();
    if (check_true ((opts && opts["bundle"]))){
        {
            (segments).push(("await init_dlisp();"));
            (segments).push(("let env = await dlisp_env("+ await (async function(){
                if (check_true ((opts && opts["bundle_options"]))){
                    return await JSON.stringify((opts && opts["bundle_options"]))
                } else {
                    return ""
                }
            })()+ ");"))
        }
    };
    if (check_true (((opts && opts["exports"]) instanceof Array))){
        {
            (export_segment).push("export { ");
            await (await Environment.get_global("map"))(async function(exp,i,len) {
                await async function(){
                    if (check_true (((exp instanceof Array)&& ((exp && exp.length)===2)))) {
                        {
                            (export_segment).push((exp && exp["0"]));
                            (export_segment).push(" as ");
                            return (export_segment).push((exp && exp["1"]))
                        }
                    } else if (check_true ((exp instanceof String || typeof exp==='string'))) {
                        (export_segment).push(exp)
                    } else {
                        throw new SyntaxError(("Invalid export format: "+ exp));
                        
                    }
                } ();
                if (check_true ((i<(len- 1)))){
                    {
                        return (export_segment).push(",")
                    }
                }
            },(opts && opts["exports"]));
            (segments).push((export_segment).join(""))
        }
    };
    return await async function(){
        if (check_true ((write_file&& await (await Environment.get_global("not"))((opts && opts["want_buffer"]))))) {
            {
                await (await Environment.get_global("write_text_file"))(output_filename,(segments).join("\n"));
                await (await Environment.get_global("success"))(("["+ compile_time+ "] compiled: "),((opts && opts["input_filename"])|| (opts && opts["namespace"])|| "anonymous"),"->",output_filename);
                return output_filename
            }
        } else if (check_true ((write_file&& (opts && opts["want_buffer"])))) {
            return (segments).join("\n")
        } else {
            {
                await (await Environment.get_global("warn"))("cannot compile: ",((opts && opts["input_filename"])|| (opts && opts["namespace"])|| "anonymous"));
                return null
            }
        }
    } ()
};__obj__1["compile_file"]=async function(lisp_file,export_function_name,options) {
    let input_components;
    let input_filename;
    let input_buffer;
    input_components=await (await Environment.get_global("path.parse"))(lisp_file);
    input_filename=await (await Environment.get_global("path.basename"))(lisp_file);
    input_buffer=null;
    input_buffer=await (async function(){
         return await (await Environment.get_global("read_text_file"))(lisp_file) 
    })();
    if (check_true (((input_components && input_components["ext"])===".lisp"))){
        input_buffer=await (async function(){
             return await (await Environment.get_global("read_lisp"))(input_buffer,{
                implicit_progn:false,source_name:input_filename
            }) 
        })()
    };
    return await (await Environment.get_global("compile_buffer"))(input_buffer,export_function_name,await (await Environment.get_global("add"))(new Object(),{
        input_filename:input_filename
    },await (async function(){
        if (check_true (options)){
            return options
        } else {
            return new Object()
        }
    })()))
};__obj__1["rebuild_env"]=async function(opts) {
    let issues;
    let source_dir;
    let output_dir;
    let dcomps;
    let version_tag;
    let build_time;
    let build_headers;
    let include_source;
    let source_path;
    let output_path;
    issues=[];
    source_dir=((opts && opts["source_dir"])|| "./src");
    output_dir=((opts && opts["output_dir"])|| "./js");
    dcomps=await (async function(){
         return await (await Environment.get_global("date_components"))(new Date()) 
    })();
    version_tag=await (async function(){
        if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("blank?"))((opts && opts["version_tag"]))))){
            return (opts && opts["version_tag"])
        } else {
            return (await (async function(){
                let __array_op_rval__18=(dcomps && dcomps["year"]);
                 if (__array_op_rval__18 instanceof Function){
                    return await __array_op_rval__18((dcomps && dcomps["month"]),(dcomps && dcomps["day"]),(dcomps && dcomps["hour"]),(dcomps && dcomps["minute"])) 
                } else {
                    return [__array_op_rval__18,(dcomps && dcomps["month"]),(dcomps && dcomps["day"]),(dcomps && dcomps["hour"]),(dcomps && dcomps["minute"])]
                }
            })()).join(".")
        }
    })();
    build_time=await (async function(){
         return await (await Environment.get_global("formatted_date"))(new Date()) 
    })();
    build_headers=[];
    include_source=((opts && opts["include_source"])|| false);
    source_path=async function(filename) {
        return (await (async function(){
            let __array_op_rval__19=source_dir;
             if (__array_op_rval__19 instanceof Function){
                return await __array_op_rval__19(filename) 
            } else {
                return [__array_op_rval__19,filename]
            }
        })()).join((await Environment.get_global("path.sep")))
    };
    output_path=async function(filename) {
        return (await (async function(){
            let __array_op_rval__20=output_dir;
             if (__array_op_rval__20 instanceof Function){
                return await __array_op_rval__20(filename) 
            } else {
                return [__array_op_rval__20,filename]
            }
        })()).join((await Environment.get_global("path.sep")))
    };
    await console.log("Environment Build Time: ",build_time);
    await console.log("Version Tag: ",version_tag);
    await console.log("Source Directory: ",source_dir);
    await console.log("Output Directory: ",output_dir);
    (build_headers).push(("// Build Time: "+ build_time));
    (build_headers).push(("// Version: "+ version_tag));
    (build_headers).push(("export const DLISP_ENV_VERSION='"+ version_tag+ "';"));
    await console.log(await (async function(){
         return await (await Environment.get_global("load"))(await source_path("reader.lisp")) 
    })());
    await (await Environment.get_global("success"))("reloaded reader");
    await (await Environment.get_global("compile_file"))(await source_path("compiler.lisp"),"init_compiler",{
        output_file:await output_path("compiler.js"),include_source:include_source,build_headers:build_headers
    });
    await (await Environment.get_global("compile_file"))(await source_path("reader.lisp"),null,{
        output_file:await output_path("reader.js"),include_source:include_source,build_headers:build_headers
    });
    await (await Environment.get_global("compile_file"))(await source_path("environment.lisp"),"init_dlisp",{
        output_file:await output_path("environment.js"),include_source:include_source,toplevel:true,build_headers:build_headers
    });
    await (await Environment.get_global("compile_file"))(await source_path("core.lisp"),"environment_boot",{
        output_file:await output_path("core.js"),include_source:include_source,build_headers:build_headers
    });
    await (await Environment.get_global("compile_file"))(await source_path("core-ext.lisp"),"load_core",{
        output_file:await output_path("core-ext.js"),include_source:include_source,build_headers:build_headers
    });
    await (await Environment.get_global("compile_file"))(await source_path("base-io.lisp"),null,{
        output_file:await output_path("base-io.js"),include_source:include_source,build_headers:build_headers
    });
    await (await Environment.get_global("success"))("complete");
    return true
};__obj__1["*env_skeleton*"]=await (async function(){ return ["=:iprogn",["=:set_prop","=:globalThis","subtype","=:subtype","check_true","=:check_true","clone","=:clone","lisp_writer","=:lisp_writer","LispSyntaxError","=:LispSyntaxError"],["=:if",["=:==","undefined",["=:typeof","=:dlisp_environment_count"]],["=:set_prop","=:globalThis","dlisp_environment_count",0]],["=:defexternal","=:dlisp_env",["=:fn",["=:opts"],["=:progn",["=:declare",["=:toplevel",true],["=:include","=:subtype","=:get_object_path","=:get_outside_global"],["=:local","=:clone","=:get_next_environment_id","=:check_true"]],["=:=","=:opts",["=:if",["=:==","=:opts","=:undefined"],{},"=:opts"]],["=:defvar","=:namespace",["=:or","=:opts.namespace","core"]],["=:defvar","=:in_boot",true],["=:defvar","=:pending_loads",{}],["=:defvar","=:parent_environment",["=:if",["=:==","=:namespace","core"],"=:nil","=:opts.parent_environment"]],["=:defvar","=:active_namespace","=:namespace"],["=:defvar","=:contained",["=:or","=:opts.contained",false]],["=:defvar","=:Environment",{"global_ctx":{"scope":{},"name":"=:namespace"},"build_version":["=:javascript","=:DLISP_ENV_VERSION"],"definitions":["=:or","=:opts.definitions",{}],"declarations":["=:or","=:opts.declarations",{"safety":{"level":2}}]}],["=:if",["=:==","undefined",["=:typeof","=:Element"]],["=:set_prop","=:globalThis","Element",["=:function",[],false]]],["=:defvar","=:id",["=:get_next_environment_id"]],["=:set_prop","=:Environment","context","=:Environment.global_ctx"],["=:defvar","=:unset_compiler",["=:fn",[],["=:throw","=:EvalError",["=:+","compiler must be set for ","=:namespace"]]]],["=:defvar","=:compiler","=:unset_compiler"],["=:defvar","=:compiler_operators",["=:new","=:Set"]],["=:defvar","=:special_identity",["=:fn",["=:v"],"=:v"]],["=:define_env",["=:MAX_SAFE_INTEGER",9007199254740991],["=:LispSyntaxError","=:globalThis.LispSyntaxError"],["=:sub_type","=:subtype",{"description":"Returns a string the determined actual type of the provided value.","usage":["value:*"],"tags":["type","class","prototype","typeof","instanceof"]}],["=:__VERBOSITY__",0,{"description":"Set __VERBOSITY__ to a positive integer for verbose console output of system activity.","tags":["debug","compiler","environment","global"]}],["=:int","=:parseInt",{"usage":"value:string|number","description":"Convenience method for parseInt, should be used in map vs. directly calling parseInt, which will not work directly","tags":["conversion","number"]}],["=:float","=:parseFloat",{"usage":"value:string|number","description":"Convenience method for parseFloat, should be used in map vs. directly calling parseFloat, which will not work directly","tags":["conversion","number"]}],["=:values",["=:new","=:Function","...args","{\n                                let acc = [];\n                                for (let _i in args) {\n                                    let value = args[_i];\n                                    let type = subtype(value);\n                                    if (value instanceof Set)  {\n                                        acc = acc.concat(Array.from(value));\n                                    } else if (type==='array') {\n                                        acc = acc.concat(value);\n                                    } else if (type==='object') {\n                                        acc = acc.concat(Object.values(value))\n                                    } else {\n                                        acc = acc.concat(value);\n                                    }\n                                }\n                                return acc;\n                            }"],{"description":["=:+","Given a container, returns a list containing the values of each supplied argument. Note that for objects, only the values are returned, not the keys. ","If given multiple values, the returned value is a concatentation of all containers provided in the arguments."],"usage":["arg0:*","argn:*"],"tags":["array","container","object","keys","elements"]}],["=:pairs",["=:new","=:Function","obj","{\n                                    if (subtype(obj)==='array') {\n                                        let rval = [];\n                                        for (let i = 0; i < obj.length; i+=2) {\n                                            rval.push([obj[i],obj[i+1]]);\n                                        }\n                                        return rval;\n                                    } else {\n                                        let keys = Object.keys(obj);\n                                        let rval = keys.reduce(function(acc,x,i) {\n                                            acc.push([x,obj[x]])\n                                            return acc;\n                                        },[]);\n                                        return rval;\n                                    }\n                                }"],{"description":"Given a passed object or array, returns a list containing a 2 element list for each key/value pair of the supplied object.","tags":["array","container","object"],"usage":["obj:object"]}],["=:keys",["=:new","=:Function","obj","{  return Object.keys(obj);  }"],{"description":"Given an object, returns the keys of the object.","tags":["object","values","keys","indexes","container"],"usage":["obj:object"]}],["=:take",["=:new","=:Function","place","{ return place.shift() }"],{"description":"Takes the first value off the list, and returns the value.","tags":["array","container","mutate","first"],"usage":["place:container"]}],["=:prepend",["=:new","=:Function","place","thing","{ return place.unshift(thing) }"],{"description":"Places the value argument onto the first of the list (unshift) and returns the list.","tags":["array","mutate","container"],"usage":["place:array","thing:*"]}],["=:first",["=:new","=:Function","x","{ return x[0] }"],{"description":"Given an array, returns the first element in the array.","usage":["x:array"],"tags":["array","container","elements"]}],["=:last",["=:new","=:Function","x","{ return x[x.length - 1] }"],{"description":"Given an array, returns the last element in the array.","usage":["x:array"],"tags":["array","container","elements","end"]}],["=:length",["=:new","=:Function","obj","{\n                                if(obj instanceof Array) {\n                                    return obj.length;\n                                } else if (obj instanceof Set) {\n                                    return obj.size;\n                                } else if ((obj === undefined)||(obj===null)) {\n                                    return 0;\n                                } else if (typeof obj==='object') {\n                                    return Object.keys(obj).length;\n                                } else if (typeof obj==='string') {\n                                    return obj.length;\n                                } \n                                return 0;\n                            }"],{"description":["=:+","Returns the length of the supplied type (array, object, set, string, number). ","If the supplied value is nil or a non-container type, returns 0."],"tags":["size","elements","container","dimension","array","set","string","number"],"usage":["thing:container"]}],["=:conj",["=:new","=:Function","...args","{   let list = [];\n                                if (args[0] instanceof Array) {\n                                    list = args[0];\n                                } else {\n                                    list = [args[0]];\n                                }\n                                args.slice(1).map(function(x) {\n                                    list = list.concat(x);\n                                });\n                                return list;\n                            }"],{"description":["=:+","Conjoins or concatenates things (typically arrays) together and returns an array. ","Examples:<br>","(conj [ 1 2 ] [ 3 4 ]) => [ 1 2 3 4 ]<br>","(conj [ 1 2 ] 3 4 ) => [ 1 2 3 4 ]<br>","(conj 1 2 [ 3 4 ]) => [ 1 2 3 4 ]<br>","(conj { `abc: 123 } [ 2 3]) => [ { abc: 123 }, 2, 3 ]<br>","(conj [ 1 2 3 [ 4 ]] [ 5 6 [ 7 ]]) => [ 1 2 3 [ 4 ] 5 6 [ 7 ] ]"],"tags":["elements","concat","array","conjoin","append"],"usage":["arg0:*","argN:*"]}],["=:reverse",["=:new","=:Function","container","{ return container.slice(0).reverse }"],{"usage":["container:list"],"description":"Returns a copy of the passed list as reversed.  The original is not changed.","tags":["list","sort","order"]}],["=:map",["=:new","=:AsyncFunction","lambda","array_values","{ try {\n                                        let rval = [],\n                                                tl = array_values.length;\n                                        for (let i = 0; i < array_values.length; i++) {\n                                            rval.push(await lambda.apply(this,[array_values[i], i, tl]));\n                                         }\n                                        return rval;\n                                    } catch (ex) {           \n                                              if (lambda === undefined || lambda === null) {\n                                                    throw new ReferenceError(\"map: lambda argument (position 0) is undefined or nil\")\n                                              } else if (array_values === undefined || array_values === null) {\n                                                    throw new ReferenceError(\"map: container argument (position 1) is undefined or nil\")\n                                              } else if (!(lambda instanceof Function)) {\n                                                    throw new ReferenceError(\"map: lambda argument must be a function: received: \"+ typeof lambda)\n                                              } else if (!(array_values instanceof Array)) {\n                                                    throw new ReferenceError(\"map: invalid array argument, received: \" + typeof array_values)\n                                              } else {\n                                                    // something else just pass on the error\n                                                throw ex;\n                                              }\n                                    }\n                              }"],{"description":["=:+","Provided a function as a first argument, map calls the function ","(item, current_index, total_length) with each element from the second argument, which should be a list. Returns a new list containing the return values resulting from evaluating."],"tags":["array","container","elements","iteration"],"usage":["lambda:function","elements:array"]}],["=:bind",["=:new","=:Function","func,this_arg","{ return func.bind(this_arg) }"],{"description":"Given a function and a this value, the bind function returns a new function that has its this keyword set to the provided value in this_arg.","usage":["func:function","this_arg:*"],"tags":["bind","this","function"]}],["=:to_object",["=:new","=:Function","array_values","{\n                                      let obj={}\n                                      array_values.forEach((pair)=>{\n                                             obj[pair[0]]=pair[1]\n                                      });\n                                      return obj;\n                                    }"],{"description":["=:+","Given an array of pairs in the form of [[key value] [key value] ...], constructs an ","object with the first array element of the pair as the key and the second ","element as the value. A single object is returned."],"usage":["paired_array:array"],"tags":["conversion","object","array","list","pairs"]}],["=:to_array",["=:fn",["=:container"],["=:cond",["=:is_array?","=:container"],"=:container",["=:is_set?","=:container"],["=:do",["=:defvar","=:acc",[]],["=:->","=:container","forEach",["=:fn",["=:v"],["=:push","=:acc","=:v"]]],"=:acc"],["=:is_string?","=:container"],["=:split_by","","=:container"],["=:is_object?","=:container"],["=:pairs","=:container"],"=:else",["=:container"]]],{"description":["=:+","Given a container of type Array, Set, Object, or a string, ","it will convert the members of the container to an array form, ","and return a new array with the values of the provided container. ","In the case of an object, the keys and values will be contained in ","paired arrays in the returned array.  A string will be split into ","individual characters. If provided a different ","type other than the listed values above, the value will be placed ","in an array as a single element."],"usage":["container:*"],"tags":["array","conversion","set","object","string","pairs"]}],["=:slice",["=:function",["=:target","=:from","=:to"],["=:cond","=:to",["=:->","=:target","slice","=:from","=:to"],"=:from",["=:->","=:target","slice","=:from"],"=:else",["=:throw","=:SyntaxError","slice requires 2 or 3 arguments"]]],{"description":"Given an array, with a starting index and an optional ending index, slice returns a new array containing the elements in the range of provided indices.","usage":["target:array","from:number","to:number"],"tags":["array","slicing","dimensions","subset"]}],["=:rest",["=:function",["=:x"],["=:cond",["=:instanceof","=:x","=:Array"],["=:->","=:x","slice",1],["=:is_string?","=:x"],["=:->","=:x","substr",1],"=:else","=:nil"]],{"description":"Returns a new array containing the elements in the 2nd through last position (the tail) of the provided array.","usage":["x:array"],"tags":["array","subset","slice","tail","end"]}],["=:second",["=:new","=:Function","x","{ return x[1] }"],{"description":"Returns the second element in the provided array (the element at index 1)","tags":["array","subset","element","first"],"usage":["x:array"]}],["=:third",["=:new","=:Function","x","{ return x[2] }"],{"description":"Returns the third element in the provided array (the element at index 2)","tags":["array","subset","element","first"],"usage":["x:array"]}],["=:chop",["=:new","=:Function","x","{ if (x instanceof Array) { return x.slice(0, x.length-1) } else { return x.substr(0,x.length-1) } }"],{"description":"Returns a new container containing all items except the last item.  This function takes either an array or a string.","usage":["container:array|string"],"tags":["array","slice","subset","first","string"]}],["=:chomp",["=:new","=:Function","x","{ return x.substr(x.length-1) }"],{"description":"Given a string returns a new string containing all characters except the last character.","usage":["x:string"],"tags":["slice","subset","string"]}],["=:not",["=:new","=:Function","x","{ if (check_true(x)) { return false } else { return true } }"],{"description":"Returns the logical opposite of the given value.  If given a truthy value, a false is returned.  If given a falsey value, true is returned.","usage":["x:*"],"tags":["logic","not","inverse"]}],["=:push",["=:new","=:Function","place","thing","{ return place.push(thing) }"],{"description":"Given an array as a place, and an arbitrary value, appends (pushes) the value to the end of the array.","usage":["place:array","thing:*"],"tags":["array","mutate","append","concat","pop"]}],["=:pop",["=:new","=:Function","place","{ return place.pop() }"],{"description":"Given an array as an arguments, removes the last value from the given array and returns it.","usage":["place:array"],"tags":["array","mutate","take","remove","push"]}],["=:list",["=:fn",["&","=:args"],"=:args"],{"description":"Given a set of arbitrary arguments, returns an array containing the provided arguments. If no arguments are provided, returns an empty array.","usage":["arg0:*","argN:*"],"tags":["array","container","elements"]}],["=:flatten",["=:new","=:Function","x","{ return x.flat(999999999999) } "],{"description":"Given a nested array structure, returns a flattened version of the array","usage":["x:array"],"tags":["array","container","flat","tree"]}],["=:jslambda",["=:function",["&","=:args"],["=:apply","=:Function",["=:flatten","=:args"]]],{"description":["=:+","Proxy for Javascript Function.  Given a set of string based arguments, all but the last are considered arguments to the ","function to be defined.  The last argument is considered the body of the function and should be provided as a string of ","javascript. Returns a javascript function. <br>","(jslambda (`a `b) \"{ return a+b }\")<br>","(jslambda () \"{ return new Date() }\")"],"usage":["argument_list:array","argn:string"],"tags":["javascript","embed","function"]}],["=:join",["=:function",["&","=:args"],["=:cond",["=:==","=:args.length",1],["=:->","=:args.0","join",""],"=:else",["=:->","=:args.1","join","=:args.0"]]],{"description":["=:+","Given an optional joining string and an array of strings, returns a string containing the ","elements of the array interlaced with the optional joining string.<br>","(join \",\" [ \"red\" \"fox\" ]) -> \"red,fox\"<br>","(join [\"red\" \"fox\"]) -> redfox"],"tags":["array","combine","split","string","text"],"usage":["joining_string?:string","container:array"]}],["=:lowercase",["=:function",["=:x"],["=:->","=:x","toLowerCase"]],{"description":"Given a string, converts all capital characters to lowercase characters.","tags":["string","text","uppercase","case","convert"],"usage":["text:string"]}],["=:uppercase",["=:function",["=:x"],["=:->","=:x","toUpperCase"]],{"description":"Given a string, converts all capital characters to uppercase characters.","tags":["string","text","lowercase","case","convert"],"usage":["text:string"]}],["=:log",["=:function",["&","=:args"],["=:apply","=:console.log","=:args"]],{"description":["=:+","log is a shorthand call for console.log by default, and serves to provide a base ","abstraction for logging.  Log behavior can be changed by redefining log to ","better suit the environmental context.  For example, writing log output to a file ","or HTML container."],"usage":["args0:*","argsN:*"],"tags":["logging","console","output"]}],["=:split",["=:new","=:Function","container","token","{ return container.split(token) }"],{"description":["=:+","Given a string to partition and a string for a splitting token, return an array whose elements ","are the text found between each splitting token. <br>","(split \"red,fox\" \",\") => [ \"red\" \"fox\" ]"],"tags":["partition","join","separate","string","array"],"usage":["string_to_split:string","split_token:string"]}],["=:split_by",["=:new","=:Function","token","container","{ return container.split(token) }"],{"description":["=:+","Given a string for a splitting token and a string to partition, return an array whose elements ","are the text found between each splitting token. <br>","(split_by \",\" \"red,fox\") => [ \"red\" \"fox\" ]"],"tags":["partition","join","separate","string","array"],"usage":["split_token:string","string_to_split:string"]}],["=:is_object?",["=:new","=:Function","x","{ return x instanceof Object }"],{"description":"for the given value x, returns true if x is an Javascript object type.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:is_array?",["=:new","=:Function","x","{ return x instanceof Array }"],{"description":"for the given value x, returns true if x is an array.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:is_number?",["=:function",["=:x"],["=:==",["=:subtype","=:x"],"Number"]],{"description":"for the given value x, returns true if x is a number.","usage":["arg:value"],"tags":["type","condition","subtype","value","what","function"]}],["=:is_function?",["=:function",["=:x"],["=:instanceof","=:x","=:Function"]],{"description":"for the given value x, returns true if x is a function.","usage":["arg:value"],"tags":["type","condition","subtype","value","what","function"]}],["=:is_set?",["=:new","=:Function","x","{ return x instanceof Set }"],{"description":"for the given value x, returns true if x is a set.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:is_element?",["=:new","=:Function","x","{ return x instanceof Element }"],{"description":"for the given value x, returns true if x is an Element object","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:is_string?",["=:function",["=:x"],["=:or",["=:instanceof","=:x","=:String"],["=:==",["=:typeof","=:x"],"string"]]],{"description":"for the given value x, returns true if x is a String object","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:is_nil?",["=:function",["=:x"],["=:==","=:x","=:nil"]],{"description":"for the given value x, returns true if x is exactly equal to nil.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:is_regex?",["=:function",["=:x"],["=:==",["=:sub_type","=:x"],"RegExp"]],{"description":"for the given value x, returns true if x is a Javascript regex object","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:is_date?",["=:function",["=:x"],["=:==",["=:sub_type","=:x"],"Date"]],{"description":"for the given value x, returns true if x is a Date object.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]}],["=:ends_with?",["=:new","=:Function","val","text","{ if (text instanceof Array) { return text[text.length-1]===val } else if (subtype(text)=='String') { return text.endsWith(val) } else { return false }}"],{"description":"for a given string or array, checks to see if it ends with the given start_value.  Non string args return false.","usage":["end_value:value","collection:array|string"],"tags":["string","text","list","array","filter","reduce"]}],["=:starts_with?",["=:new","=:Function","val","text","{ if (text instanceof Array) { return text[0]===val } else if (subtype(text)=='String') { return text.startsWith(val) } else { return false }}"],{"description":"for a given string or array, checks to see if it starts with the given start_value.  Non string args return false.","usage":["start_value:value","collection:array|string"],"tags":["string","text","list","array","filter","reduce","begin"]}],["=:delete_prop",["=:new","=:Function","obj","...args","{\n                                        if (args.length == 1) {\n                                            return delete obj[args[0]];\n                                        } else {\n                                            while (args.length > 0) {\n                                                let prop = args.shift();\n                                                delete obj[prop];\n                                            }\n                                        }\n                                        return obj;\n                                    }"],{"description":["=:+","Removes the key or keys of the provided object, and returns the modified object.<br>Example:<br>","(defglobal foo { abc: 123 def: 456 ghi: 789 })<br>","(delete_prop foo `abc `def) => { ghi: 789 }<br>"],"usage":["obj:objects","key0:string","keyN?:string"],"tags":["delete","keys","object","remove","remove_prop","mutate"]}],["=:blank?",["=:function",["=:val"],["=:or",["=:eq","=:val","=:nil"],["=:and",["=:is_string?","=:val"],["=:==","=:val",""]]]],{"description":"Given a value, if it is equal (via eq) to nil or to \"\" (an empty string), returns true, otherwise false.","usage":["val:*"],"tags":["string","empty","text"]}],["=:contains?",["=:new","=:Function","value","container","{ if (!value && !container) { return false }\n                           else if (container === null) { throw new TypeError(\"contains?: passed nil/undefined container value\"); }\n                           else if (container instanceof Array) return container.includes(value);\n                           else if (container instanceof Set) return container.has(value);\n                           else if ((container instanceof String) || typeof container === \"string\") {\n                                if (subtype(value) === \"Number\") return container.indexOf(\"\"+value)>-1;\n                                else return container.indexOf(value)>-1;\n                           }                                                      \n                           else throw new TypeError(\"contains?: passed invalid container type: \"+subtype(container)) }"],{"description":["=:+","Given a target value and container value (array, set, or string), checks if the container has the value. ","If it is found, true is returned, otherwise false if returned.  "],"tags":["string","array","set","has","includes","indexOf"],"usage":["value:*","container:array|set|string"]}],["=:make_set",["=:function",["=:vals"],["=:if",["=:instanceof","=:vals","=:Array"],["=:new","=:Set","=:vals"],["=:let",[["vtype",["=:sub_type","=:vals"]]],["=:cond",["=:==","=:vtype","Set"],["=:new","=:Set","=:vals"],["=:==","=:vtype","object"],["=:new","=:Set",["=:values","=:vals"]]]]]],{"description":["=:+","If given an array, a new Set is returned containing the elements of the array. ","If given an object, a new Set is returned containing the values of the object, and the keys are discarded. ","If given a set, new Set is created and returend  from the values of the old set."],"usage":["vals:array|object|set"],"tags":["array","set","object","values","convert"]}],["=:meta_for_symbol",["=:function",["=:quoted_symbol","=:search_mode"],["=:when",["=:is_string?","=:quoted_symbol"],["=:defvar","=:local_data",["=:prop","=:Environment.global_ctx.scope","=:quoted_symbol"]],["=:defvar","=:acc",[]],["=:if","=:search_mode",["=:do",["=:when","=:local_data",["=:push","=:acc",["=:+",{"namespace":"=:namespace","name":"=:quoted_symbol","type":["=:subtype","=:local_data"]},["=:aif",["=:prop","=:Environment.definitions","=:quoted_symbol"],"=:it",{}]]]],["=:when","=:parent_environment",["=:reduce_sync",["=:info",["=:->",["=:->","=:parent_environment","meta_for_symbol","=:quoted_symbol",true],"flat",1]],["=:push","=:acc","=:info"]]],["=:when",["=:>",["=:length",["=:keys","=:children"]],0],["=:reduce_sync",["details",["=:reduce_sync",["child_data",["=:pairs","=:children"]],["=:when",["=:not",["=:==","=:child_data.0",["=:current_namespace"]]],["=:->","=:child_data.1","meta_for_symbol","=:quoted_symbol"]]]],["=:push","=:acc","=:details"]]],"=:acc"],["=:do",["=:=","=:quoted_symbol",["=:if",["=:starts_with?",["=:quote","=:"],"=:quoted_symbol"],["=:->","=:quoted_symbol","substr",2],"=:quoted_symbol"]],["=:aif",["=:prop","=:Environment.definitions","=:quoted_symbol"],["=:+",{"namespace":"=:namespace","type":["=:sub_type","=:local_data"],"name":"=:quoted_symbol"},"=:it"],"=:nil"]]]]],{"description":["=:+","Given a quoted symbol and a boolean indicating whether or not all namespaces should be searched, returns ","the meta data associated with the symbol for each environment.  If search mode is requested, the value returned ","is an array, since there can be symbols with the same name in different environments. If no values are found ","an empty array is returned.  If not in search mode, meta_for_symbol searches the current namespace ","only, and if a matching symbol is found, returns an object with all found metadata, otherwise nil is returned."],"usage":["quoted_symbol:string","search_mode:boolean"],"tags":["describe","meta","help","definition","symbol","metadata"]}],["=:describe",["=:fn",["=:quoted_symbol","=:search_mode"],["=:progn",["=:defvar","=:internal_results",["=:meta_for_symbol","=:quoted_symbol",true]],["=:if",["=:and",["=:is_array?","=:internal_results"],"=:internal_results.0"],["=:if","=:search_mode","=:internal_results",["=:first","=:internal_results"]],["=:do",["=:defvar","=:external_results",["=:get_outside_global","=:quoted_symbol"]],["=:if","=:external_results",{"location":"external","type":["=:subtype","=:external_results"]},"=:nil"]]]]],{"description":"Given a quoted symbol returns the relevant metadata pertinent to the current namespace context.","usage":["quoted_symbol:string","search_mode:boolean"],"tags":["meta","help","definition","symbol","metadata","info","meta_for_symbol"]}],["=:undefine",["=:function",["=:quoted_symbol"],["=:if",["=:is_string?","=:quoted_symbol"],["=:let",[["namespace_identity",["=:split_by","/","=:quoted_symbol"]],["parent_call","=:nil"],["child_call","=:nil"],["target_symbol","=:nil"]],["=:declare",["=:function","=:parent_call"]],["=:cond",["=:or",["=:and",["=:==","=:namespace_identity.length",1],["=:prop","=:Environment.global_ctx.scope","=:namespace_identity.0"]],["=:and",["=:>","=:namespace_identity.length",1],["=:==","=:namespace_identity.0","=:namespace"]]],["=:progn",["=:=","=:target_symbol",["=:if",["=:>","=:namespace_identity.length",1],"=:namespace_identity.1","=:namespace_identity.0"]],["=:delete_prop","=:Environment.definitions","=:target_symbol"],["=:if",["=:prop","=:Environment.global_ctx.scope","=:target_symbol"],["=:delete_prop","=:Environment.global_ctx.scope","=:target_symbol"],false]],["=:and",["=:>","=:namespace_identity.length",1],"=:parent_environment"],["=:progn",["=:setq","=:parent_call",["=:->","=:parent_environment","get_global","undefine"]],["=:parent_call","=:quoted_symbol"]],["=:and",["=:>","=:namespace_identity.length",1],["=:prop","=:children","=:namespace_identity.0"]],["=:progn",["=:setq","=:child_call",["=:->",["=:prop","=:children","=:namespace_identity.0"],"get_global","undefine"]],["=:child_call","=:quoted_symbol"]],"=:else",false]],["=:throw","=:SyntaxError","undefine requires a quoted symbol"]]],{"description":["=:+","Given a quoted symbol removes the symbol and any definition information from the namespace. ","If the namespace is fully-qualified, then the symbol will be removed from the specified namespace ","instead of the currently active namespace. If the symbol is successfully removed, the function ","will return true, otherwise if it is not found, false will be returned.  Note that if the ","specified symbol is non-qualified, but exists in a different, accessible namespace, but the ","symbol isn't present in the current namespace, the symbol will not be deleted.  The environment ","is not searched and therefore symbols have to be explicitly fully-qualified for any effect ","of this function outside the current namespace."],"usage":["quoted_symbol:string"],"tags":["symbol","delete","remove","unintern","reference","value"]}],["=:eval_exp",["=:fn",["=:expression"],["=:do",["=:expression"]]],{"description":["=:+","Evaluates the given expression and returns the value."],"usage":["expression:*"],"tags":["eval","evaluation","expression"]}],["=:indirect_new",["=:new","=:Function","...args","{\n                                    let targetClass = args[0];\n                                    if (subtype(targetClass)===\"String\") {\n                                        let tmpf=new Function(\"{ return \"+targetClass+\" }\");\n                                        targetClass = tmpf();\n                                    }\n                                    if (args.length==1) {\n                                        let f = function(Class) {\n                                            return new (Function.prototype.bind.apply(Class, args));\n                                        }\n                                        let rval = f.apply(this,[targetClass]);\n                                        return rval;\n                                    } else {\n                                        let f = function(Class) {\n                                            return new (Function.prototype.bind.apply(Class, args));\n                                        }\n                                        let rval = f.apply(this,[targetClass].concat(args.slice(1)));\n                                        return rval;\n                                    }}"],{"description":["=:+","Used by the compiler for implementation of the new operator and shouldn't be directly called by ","user programs.  The new operator should be called instead."],"usage":["arg0:*","argsN:*"],"tags":["system","compiler","internal"]}],["=:range",["=:function",["&","=:args"],["=:let",[["from_to",["=:if","=:args.1",[["=:int","=:args.0"],["=:int","=:args.1"]],[0,["=:int","=:args.0"]]]],["step",["=:if","=:args.2",["=:float","=:args.2"],1]],["idx","=:from_to.0"],["acc",[]]],["=:assert",["=:>","=:step",0],"range: step must be > 0"],["=:assert",["=:>=","=:from_to.1","=:from_to.0"],"range: lower bound must be greater or equal than upper bound"],["=:while",["=:<","=:idx","=:from_to.1"],["=:do",["=:push","=:acc","=:idx"],["=:inc","=:idx","=:step"]]],"=:acc"]],{"usage":["start_or_end:number","end:number","step:number"],"description":["=:+","Range has a variable form depending on the amount of arguments provided to the function when ","calling it. If provided one argument, range will produce an array from 0 up to, but not including ","the provided value. If given two arguments, the first argument will be the starging value and ","the last value will be used as the upper bounding value, returning an array with elements starting ","at the start value and up to, but not including the bounding value. If given a third value, the ","value will be interpreted as the step value, and the returned array will contain values that ","increment by the step amount.  Range will throw an error if a negative range is specified. ","For negative ranges see neg_range.","<br><br>Examples:<br>","(range 5) -> [ 0 1 2 3 4 ]<br>","(range 10 15) -> [ 10 11 12 13 14 ]<br>","(range 10 20) -> [ 10 12 14 16 18 ]<br>","(range -5 0) -> [ -5 -4 -3 -2 -1 ]<br>","(range -3 3) -> [ -3, -2, -1, 0, 1, 2 ]<br>"]}],["=:add",["=:new","=:Function","...args","{\n                                let acc;\n                                if (typeof args[0]===\"number\") {\n                                    acc = 0;\n                                } else if (args[0] instanceof Array) {\n                                    return args[0].concat(args.slice(1));\n                                } else if (typeof args[0]==='object') {\n                                   let rval = {};\n                                   for (let i in args) {\n                                        if (typeof args[i] === 'object') {\n                                            for (let k in args[i]) {\n                                                rval[k] = args[i][k];\n                                            }\n                                        }\n                                   }\n                                   return rval;\n                                } else {\n                                    acc = \"\";\n                                }\n                                for (let i in args) {\n                                    acc += args[i];\n                                }\n                                return acc;\n                             }"],{"description":["=:+","Add is an overloaded function that, based on the first argument provided, determines how to 'add' the arguments. ","If provided a number as a first argument, then it will assume the rest of the arguments are numbers and add them ","to the first, returning the numerical sum of the arguments. If an object, it will merge the keys of the provided ","arguments, returning a combined object.  Be aware that if merging objects, if arguments that have the same keys ","the argument who appears last with the key will prevail.  If called with an array as a first argument, the ","subsequent arguments will be added to the first via 'concat'.  If strings, the strings will be joined into a ","single string and returned.<br>","(add 1 2 3) => 6<br>","(add { `abc: 123 `def: 345 } { `def: 456 }) => { abc: 123, def: 456 }","(add [ 1 2 3 ] [ 4 5 6] 7) => [ 1, 2, 3, [ 4, 5, 6 ], 7 ]<br>","(add \"abc\" \"def\") => \"abcdef\"<br><br>","Note that add doesn't typically need to explicily called.  The compiler will try and determine the best ","way to handle adding based on the arguments to be added, so the + operator should be used instead, since ","it gives the compiler an opportunity to inline if possible."],"usage":["arg0:*","argN:*"],"tags":["add","+","sum","number","addition","merge","join","concat"]}],["=:merge_objects",["=:new","=:Function","x","{\n                                    let rval = {};\n                                    for (let i in x) {\n                                        if (typeof i === 'object') {\n                                            for (let k in x[i]) {\n                                                rval[k] = x[i][k];\n                                            }\n                                        }\n                                    }\n                                    return rval;\n                                 }"],{"description":["=:+","Merge objects takes an array of objects and returns an object whose keys and values are ","the sum of the provided objects (same behavior as add with objects).  If objects have the ","same keys, the last element in the array with the duplicate key will be used to provide the ","value for that key."],"usage":["objects:array"],"tags":["add","merge","keys","values","objects","value"]}],["=:index_of",["=:new","=:Function","value","container",["=:+","{ return container.indexOf(value) }"]],{"description":"Given a value and an array container, returns the index of the value in the array, or -1 if not found.","usage":["value:number|string|boolean","container:array"],"tags":["find","position","index","array","contains"]}],["=:resolve_path",["=:new","=:Function","path,obj","{\n                                        if (typeof path==='string') {\n                                            path = path.split(\".\");\n                                        }\n                                        let s=obj;\n                                        return path.reduce(function(prev, curr) {\n                                            return prev ? prev[curr] : undefined\n                                        }, obj || {})\n                                    }"],{"description":["=:+","Given a path and a tree structure, which can be either an array or an object, ","traverse the tree structure and return the value at the path if it exists, otherwise ","undefined is returned.<br>","(resolve_path [ 2 1 ] [ 1 2 [ 3 4 5 ] 6 7]) => 4)"],"usage":["path:array","tree_structure:array|object"],"tags":["find","position","index","path","array","tree","contains","set_path"]}],["=:min_value",["=:new","=:Function","elements","{ return Math.min(...elements); }"],{"description":"Returns the minimum value in the provided array of numbers.","usage":["elements:array"],"tags":["min","max_value","array","elements","minimum","number"]}],["=:max_value",["=:new","=:Function","elements","{ return Math.max(...elements); }"],{"description":"Returns the maximum value in the provided array of numbers.","usage":["elements:array"],"tags":["min","max_value","array","elements","minimum","number"]}],["=:interlace",["=:fn",["&","=:args"],["=:let",[["=:min_length",["=:min_value",["=:map","=:length","=:args"]]],["=:rlength_args",["=:range",["=:length","=:args"]]],["=:rval",[]]],["=:for_each",["i",["=:range","=:min_length"]],["=:for_each",["j","=:rlength_args"],["=:push","=:rval",["=:prop",["=:prop","=:args","=:j"],"=:i"]]]],"=:rval"]],{"usage":["list0:array","list1:array","listn?:array"],"description":"Returns a list containing a consecutive values from each list, in argument order.  I.e. list0.0 list1.0 listn.0 list0.1 list1.1 listn.1 ...","tags":["list","array","join","merge"]}],["=:trim",["=:function",["=:x"],["=:->","=:x","trim"]],{"description":"Removes leading and trailing spaces from the provided string value.","usage":["value:string"],"tags":["string","spaces","clean","squeeze","leading","trailing","space"]}],["=:assert",["=:function",["=:assertion_form","=:failure_message"],["=:if","=:assertion_form","=:assertion_form",["=:throw","=:EvalError",["=:or","=:failure_message","assertion failure"]]]],{"description":"If the evaluated assertion form is true, the result is returned, otherwise an EvalError is thrown with the optionally provided failure message.","usage":["form:*","failure_message:string?"],"tags":["true","error","check","debug","valid","assertion"]}],["=:unquotify",["=:fn",["=:val"],["=:let",[["=:dval","=:val"]],["=:if",["=:starts_with?","\"","=:dval"],["=:=","=:dval",["=:->","=:dval","substr",1,["=:-","=:dval.length",2]]]],["=:if",["=:starts_with?","=:","=:dval"],["=:=","=:dval",["=:->","=:dval","substr",2]]],"=:dval"]],{"description":"Removes binding symbols and quotes from a supplied value.  For use in compile time function such as macros.","usage":["val:string"],"tags":["macro","quote","quotes","desym"]}],["=:or_args",["=:fn",["=:argset"],["=:let",[["=:is_true",false]],["=:for_each",["elem","=:argset"],["=:if","=:elem",["=:do",["=:=","=:is_true",true],["=:break"]]]],"=:is_true"]],{"description":"Provided an array of values, returns true if any of the values are true, otherwise will return false.","usage":["argset:array"],"tags":["or","true","false","array","logic"]}],["=:special_operators",["=:fn",[],["=:make_set",["=:compiler",[],{"special_operators":true,"env":"=:Environment"}]]]],["=:defclog",["=:fn",["=:opts"],["=:let",[["style",["=:+","padding: 5px;",["=:if","=:opts.background",["=:+","background: ","=:opts.background",";"],""],["=:if","=:opts.color",["=:+","color: ","=:opts.color",";"]],""]]],["=:fn",["&","=:args"],["=:apply","=:console.log",["=:+","%c",["=:if","=:opts.prefix","=:opts.prefix",["=:take","=:args"]]],["=:conj",["=:style"],"=:args"]]]]],{"description":["=:+","Given a description object, containing specific keys, returns a customized console logging ","function implements the given requested properties.<br>Options<br>","prefix:string:The prefix to log prior to any supplied user arguments.<br>","color:string:The text color to use on the prefix (or initial argument if no prefix)<br>","background:string:The background coloe to use on the prefix (or initial argument if no prefix)<br>"],"usage":["options:object"],"tags":["log","logging","console","utility"]}],["=:NOT_FOUND",["=:new","=:ReferenceError","not found"]],["=:check_external_env_default",["=:if",["=:==","=:namespace","core"],true,false]],["=:*namespace*","=:namespace"],["=:pending_ns_loads",{}],["=:pend_load",["=:fn",["=:from_namespace","=:target_namespace","=:symbol","=:initializer"],["=:progn",["=:when",["=:eq","=:nil",["=:prop","=:pending_ns_loads","=:from_namespace"]],["=:set_prop","=:pending_ns_loads","=:from_namespace",[]]],["=:push",["=:prop","=:pending_ns_loads","=:from_namespace"],{"symbol":"=:symbol","source_ns":"=:from_namespace","target_ns":"=:target_namespace","initializer":[["=:quote","=:quote"],"=:initializer"]}],"=:initializer"]],{"description":["=:+","When used as an initializer wrapper via the use_symbols macro, the wrapped ","initializer will not be loaded until the from_namespace is loaded to ensure ","that the wrapped initializer won't fail due to not yet loaded dependencies."],"usage":["from_namespace:string","target_namespace:string","symbol:string","initializer:array"],"tags":["symbol","definitions","namespace","scope","dependency","dependencies","require"]}],["=:load_pends",["=:fn",["=:from_namespace"],["=:when",["=:prop","=:pending_ns_loads","=:from_namespace"],["=:defvar","=:acc",[]],["=:setq","=:acc",["=:for_each",["load_instruction",["=:prop","=:pending_ns_loads","=:from_namespace"]],["=:quotem",["=:use_symbols","=:##","=:load_instruction.source_ns",["=:##","=:load_instruction.symbol"],"=:##","=:load_instruction.target_ns"]]]],["=:console.log","load_pends: ","=:from_namespace","->","=:acc"],["=:eval","=:acc"],true]]],["=:symbols",["=:fn",["=:opts"],["=:cond",["=:eq","=:nil","=:opts"],["=:keys","=:Environment.global_ctx.scope"],"=:opts.unique",["=:progn",["=:defvar","=:no_includes",["=:make_set",["=:conj",["meta_for_symbol","describe","undefine","*namespace*","pend_load","symbols","set_global","get_global","symbol_definition","compile","env_log","evaluate_local","evaluate","eval_struct","set_compiler","clone","eval","add_escape_encoding","get_outside_global","as_lisp","lisp_writer","clone_to_new","save_env","null","compiler"],"=:built_ins"]]],["=:reduce",["=:sym",["=:keys","=:Environment.global_ctx.scope"]],["=:if",["=:->","=:no_includes","has","=:sym"],"=:nil","=:sym"]]]]],{"description":["=:+","Returns an array of the defined global symbols for the local environment.  ","If opts.unique is true, only symbols that are not part of the built ins are ","included."],"usage":["opts:object"],"tags":["symbol","names","definitions","values","scope"]}],["=:set_global",["=:function",["=:refname","=:value","=:meta","=:is_constant","=:target_namespace","=:contained_req"],["=:progn",["=:cond",["=:not",["=:==",["=:typeof","=:refname"],"string"]],["=:throw","=:TypeError","reference name must be a string type"],["=:or",["=:==","=:Environment","=:value"],["=:==","=:Environment.global_ctx","=:value"],["=:==","=:Environment.global_ctx.scope","=:value"]],["=:do",["=:throw","=:EvalError","cannot set the environment scope as a global value"]]],["=:when",["=:resolve_path",["=:refname","constant"],"=:Environment.definitions"],["=:throw","=:TypeError",["=:+","Assignment to constant variable ","=:refname"]]],["=:defvar","=:namespace_identity",["=:if","=:target_namespace",["=:target_namespace","=:refname"],["=:split_by","/","=:refname"]]],["=:cond",["=:and","=:parent_environment",["=:>","=:namespace_identity.length",1],["=:not",["=:==","=:namespace","=:namespace_identity.0"]]],["=:->","=:parent_environment","set_global","=:namespace_identity.1","=:value","=:meta","=:is_constant","=:namespace_identity.0",["=:or","=:contained","=:contained_req"]],["=:and",["=:>","=:namespace_identity.length",1],["=:not",["=:==","=:namespace_identity.0","=:namespace"]]],["=:do",["=:if",["=:and",["=:prop","=:children","=:namespace_identity.0"],["=:not","=:contained_req"]],["=:->",["=:prop","=:children","=:namespace_identity.0"],"set_global","=:namespace_identity.1","=:value","=:meta","=:is_constant","=:namespace_identity.0"],["=:throw","=:EvalError",["=:+","namespace ","=:namespace_identity.0"," doesn't exist"]]]],"=:else",["=:do",["=:defvar","=:comps",["=:get_object_path",["=:if",["=:==",1,"=:namespace_identity.length"],"=:namespace_identity.0","=:namespace_identity.1"]]],["=:set_prop","=:Environment.global_ctx.scope","=:comps.0","=:value"],["=:if",["=:and",["=:is_object?","=:meta"],["=:not",["=:is_array?","=:meta"]]],["=:do",["=:when","=:is_constant",["=:set_prop","=:meta","constant",true]],["=:set_prop","=:Environment.definitions","=:comps.0","=:meta"]],["=:when","=:is_constant",["=:set_prop","=:Environment.definitions","=:comps.0",{"constant":true}]]],["=:prop","=:Environment.global_ctx.scope","=:comps.0"]]]]]],["=:get_global",["=:function",["=:refname","=:value_if_not_found","=:suppress_check_external_env","=:target_namespace","=:path_comps","=:contained_req"],["=:cond",["=:not",["=:==",["=:typeof","=:refname"],"string"]],["=:throw","=:TypeError","reference name must be a string type"],["=:==","=:refname","Environment"],"=:Environment",["=:->","=:compiler_operators","has","=:refname"],"=:special_identity","=:else",["=:let",[["namespace_identity",["=:if","=:target_namespace",["=:target_namespace","=:refname"],["=:split_by","/","=:refname"]]],["comps",["=:or","=:path_comps",["=:get_object_path",["=:if",["=:==",1,"=:namespace_identity.length"],"=:namespace_identity.0","=:namespace_identity.1"]]]],["refval","=:nil"],["symbol_name","=:nil"],["check_external_env",["=:if","=:suppress_check_external_env",false,"=:check_external_env_default"]]],["=:cond",["=:and","=:parent_environment",["=:>","=:namespace_identity.length",1],["=:not",["=:==","=:namespace_identity.0","=:namespace"]]],["=:->","=:parent_environment","get_global","=:namespace_identity.1","=:value_if_not_found","=:suppress_check_external_env","=:namespace_identity.0","=:comps",["=:or","=:contained","=:contained_req"]],["=:and",["=:>","=:namespace_identity.length",1],["=:not",["=:==","=:namespace_identity.0","=:namespace"]]],["=:do",["=:if",["=:and",["=:prop","=:children","=:namespace_identity.0"],["=:not","=:contained_req"]],["=:->",["=:prop","=:children","=:namespace_identity.0"],"get_global","=:namespace_identity.1","=:value_if_not_found","=:suppress_check_external_env","=:namespace_identity.0","=:comps"],["=:do",["=:throw","=:EvalError",["=:+","namespace ","=:namespace_identity.0"," doesn't exist"]]]]],"=:else",["=:do",["=:=","=:refval",["=:prop","=:Environment.global_ctx.scope","=:comps.0"]],["=:if",["=:and",["=:==","=:undefined","=:refval"],["=:==","=:namespace_identity.length",1],"=:parent_environment"],["=:do",["=:defvar","=:rval",["=:->","=:parent_environment","get_global","=:refname","=:value_if_not_found","=:suppress_check_external_env","=:nil","=:comps",["=:or","=:contained","=:contained_req"]]],"=:rval"],["=:do",["=:if",["=:and",["=:==","=:undefined","=:refval"],"=:check_external_env"],["=:=","=:refval",["=:if","=:check_external_env",["=:or",["=:get_outside_global","=:comps.0"],"=:NOT_FOUND"],"=:NOT_FOUND"]]],["=:cond",["=:and",["=:==","=:NOT_FOUND","=:refval"],["=:not",["=:==","=:undefined","=:value_if_not_found"]]],"=:value_if_not_found",["=:==","=:NOT_FOUND","=:refval"],["=:do",["=:throw","=:ReferenceError",["=:+","symbol not found: ",["=:if",["=:>","=:namespace_identity.length",1],["=:+","=:namespace","/","=:namespace_identity.1"],["=:+","=:namespace","/","=:namespace_identity.0"]]]]],["=:==","=:comps.length",1],"=:refval",["=:>","=:comps.length",1],["=:do",["=:resolve_path",["=:rest","=:comps"],"=:refval"]],"=:else",["=:do",["=:console.warn","get_global: condition fall through: ","=:comps"],"=:NOT_FOUND"]]]]]]]]]],["=:symbol_definition",["=:fn",["=:symname","=:target_namespace"],["=:let",[["=:namespace_identity",["=:if","=:target_namespace",["=:target_namespace","=:symname"],["=:if",["=:>",["=:length","=:symname"],2],["=:split_by","/","=:symname"],["=:symname"]]]]],["=:cond",["=:==","=:namespace_identity.length",1],["=:aif",["=:prop","=:Environment.definitions","=:symname"],"=:it",["=:if","=:parent_environment",["=:->","=:parent_environment","symbol_definition","=:symname"]]],["=:==","=:namespace_identity.0","=:namespace"],["=:prop","=:Environment.definitions","=:symname"],"=:parent_environment",["=:->","=:parent_environment","symbol_definition","=:namespace_identity.1","=:namespace_identity.0"],["=:==","=:namespace_identity.length",2],["=:->",["=:prop","=:children","=:namespace_identity.0"],"symbol_definition","=:namespace_identity.1"],"=:else","=:undefined"]]],{"description":["=:+","Given a symbol name and an optional namespace, either as a fully qualified path ","or via the target_namespace argument, returns definition information about the ","retquested symbol.  ","Used primarily by the compiler to find metadata for a specific symbol during compilation."],"usage":["symname:string","namespace:string"],"tags":["compiler","symbols","namespace","search","context","environment"]}],["=:compile",["=:fn",["=:json_expression","=:opts"],["=:let",[["=:opts",["=:+",{"env":"=:Environment"},"=:opts",{"meta":["=:if",["=:and","=:opts","=:opts.meta"],true,false]}]],["=:out","=:nil"]],["=:=","=:out",["=:compiler","=:json_expression","=:opts"]],["=:cond",["=:and",["=:is_array?","=:out"],"=:out.0.ctype",["=:==","=:out.0.ctype","FAIL"]],"=:out","=:opts.meta","=:out","=:else","=:out.1"]]],{"description":["=:+","Compiles the given JSON or quoted lisp and returns a string containing ","the lisp form or expression as javascript.<br>","If passed the option { meta: true } , an array is returned containing compilation metadata ","in element 0 and the compiled code in element 1."],"usage":["json_expression:*","opts:object"],"tags":["macro","quote","quotes","desym","compiler"]}],["=:env_log",["=:defclog",{"prefix":["=:+","env","=:id"],"background":"#B0F0C0"}],{"description":"The environment logging function used by the environment.","usage":["arg0:*","argN:*"]}],["=:evaluate_local",["=:fn",["=:expression","=:ctx","=:opts"],["=:let",[["=:opts",["=:or","=:opts",{}]],["=:compiled","=:nil"],["=:error_data","=:nil"],["=:requires","=:nil"],["=:result","=:nil"]],["=:if","=:opts.compiled_source",["=:=","=:compiled","=:expression"],["=:try",["=:=","=:compiled",["=:compiler",["=:if","=:opts.json_in","=:expression",["=:->","=:Environment","read_lisp","=:expression",{"source_name":"=:opts.source_name"}]],{"env":"=:Environment","ctx":"=:ctx","formatted_output":true,"source_name":"=:opts.source_name","throw_on_error":"=:opts.throw_on_error","error_report":["=:or","=:opts.error_report","=:nil"],"quiet_mode":["=:or","=:opts.quiet_mode",false]}]],["=:catch","=:Error",["e"],["=:do",["=:when","=:opts.throw_on_error",["=:throw","=:e"]],["=:when",["=:instanceof","=:e","=:LispSyntaxError"],["=:set_prop","=:e","message",["=:JSON.parse","=:e.message"]]],["=:cond",["=:instanceof","=:e","=:LispSyntaxError"],["=:=","=:error_data",["=:+",{"error":"LispSyntaxError"},"=:e.message"]],"=:else",["=:=","=:error_data",{"error":["=:sub_type","=:e"],"message":"=:e.message","stack":"=:e.stack","form":["=:cond",["=:and",["=:is_string?","=:expression"],["=:>","=:expression.length",100]],["=:+",["=:->","=:expression","substr",0,100],"..."],"=:else",["=:as_lisp","=:expression"]],"parent_forms":[],"source_name":"=:opts.source_name","invalid":true}]],["=:if","=:opts.error_report",["=:opts.error_report","=:error_data"],["=:console.error","Compilation Error: ","=:error_data"]],["=:=","=:compiled",[{"error":true},"=:nil"]]]]]],["=:cond",["=:eq","=:nil","=:compiled"],"=:nil",["=:==","=:compiled.0.ctype","FAIL"],["=:progn",["=:when","=:opts.error_report",["=:opts.error_report","=:compiled.1"]],["=:cond",["=:instanceof","=:compiled.1","=:Error"],["=:throw","=:compiled.1"],["=:instanceof","=:compiled.1.0","=:Error"],["=:throw","=:compiled.1.0"],["=:and",["=:is_object?","=:compiled.1.0"],["=:==","=:compiled.1.0.error","SyntaxError"]],["=:progn",["=:defvar","=:new_error",["=:new","=:SyntaxError","=:compiled.1.0.message"]],["=:set_prop","=:new_error","from","=:compiled.1.0"],["=:throw","=:new_error"]],"=:else","=:compiled.1"]],["=:and","=:compiled.0.namespace",["=:not",["=:==","=:compiled.0.namespace","=:namespace"]],"=:parent_environment"],["=:->","=:parent_environment","evaluate_local","=:compiled","=:ctx",["=:+",{},"=:opts",{"compiled_source":true}]],["=:and","=:compiled.0.namespace",["=:not",["=:==","=:compiled.0.namespace","=:namespace"]]],["=:if",["=:prop","=:children","=:compiled.0.namespace"],["=:->",["=:prop","=:children","=:compiled.0.namespace"],"evaluate_local","=:compiled","=:ctx",["=:+",{},"=:opts",{"compiled_source":true}]],["=:throw","=:EvalError",["=:+","unknown namespace ","=:compiled.0.namespace"," assignment"]]],"=:else",["=:do",["=:if","=:opts.on_compilation_complete",["=:opts.on_compilation_complete","=:compiled"]],["=:try",["=:do",["=:when",["=:and",["=:is_array?","=:compiled"],["=:is_object?","=:compiled.0"],"=:compiled.0.ctype",["=:not",["=:is_string?","=:compiled.0.ctype"]]],["=:set_prop","=:compiled.0","ctype",["=:subtype","=:compiled.0.ctype"]]],["=:=","=:result",["=:cond","=:compiled.error",["=:throw",["=:new","=:compiled.error","=:compiled.message"]],["=:and","=:compiled.0.ctype",["=:or",["=:contains?","block","=:compiled.0.ctype"],["=:==","=:compiled.0.ctype","assignment"],["=:==","=:compiled.0.ctype","__!NOT_FOUND!__"]]],["=:if",["=:compiled.0.has_lisp_globals"],["=:do",["=:set_prop","=:compiled",1,["=:new","=:AsyncFunction","Environment",["=:+","{ ","=:compiled.1","}"]]],["=:compiled.1","=:Environment"]],["=:do",["=:set_prop","=:compiled",1,["=:new","=:AsyncFunction",["=:+","{","=:compiled.1","}"]]],["=:compiled.1"]]],["=:and","=:compiled.0.ctype",["=:or",["=:==","AsyncFunction","=:compiled.0.ctype"],["=:==","statement","=:compiled.0.ctype"],["=:==","objliteral","=:compiled.0.ctype"]]],["=:do",["=:if",["=:compiled.0.has_lisp_globals"],["=:do",["=:set_prop","=:compiled",1,["=:new","=:AsyncFunction","Environment",["=:+","{ return ","=:compiled.1","} "]]],["=:compiled.1","=:Environment"]],["=:do",["=:set_prop","=:compiled",1,["=:new","=:AsyncFunction",["=:+","{ return ","=:compiled.1","}"]]],["=:compiled.1"]]]],["=:and","=:compiled.0.ctype",["=:==","Function","=:compiled.0.ctype"]],["=:do",["=:if",["=:compiled.0.has_lisp_globals"],["=:do",["=:set_prop","=:compiled",1,["=:new","=:Function","Environment",["=:+","{ return ","=:compiled.1","} "]]],["=:compiled.1","=:Environment"]],["=:do",["=:set_prop","=:compiled",1,["=:new","=:Function",["=:+","{ return ","=:compiled.1","}"]]],["=:compiled.1"]]]],"=:else","=:compiled.1"]]],["=:catch","=:Error",["=:e"],["=:do",["=:when",["=:or","=:opts.log_errors",["=:>","=:Environment.context.scope.__VERBOSITY__",4]],["=:if","=:e.details",["=:env_log","caught error: ","=:e.details"],["=:env_log","caught error: ","=:e.name","=:e.message","=:e"]]],["=:if",["=:and",["=:==",["=:sub_type","=:e"],"SyntaxError"],["=:or","=:opts.log_errors",["=:>","=:Environment.context.scope.__VERBOSITY__",4]]],["=:console.log","=:compiled.1"]],["=:when","=:opts.error_report",["=:opts.error_report",["=:if","=:e.details","=:e.details",{"error":"=:e.name","message":"=:e.message","form":"=:nil","parent_forms":"=:nil","invalid":true,"text":"=:e.stack"}]]],["=:=","=:result","=:e"],["=:if",["=:or",["=:not","=:opts.catch_errors"],["=:and","=:ctx","=:ctx.in_try"]],["=:progn",["=:throw","=:result"]]]]]],"=:result"]]]]],["=:evaluate",["=:fn",["=:expression","=:ctx","=:opts"],["=:progn",["=:cond",["=:==","=:namespace","=:active_namespace"],["=:evaluate_local","=:expression","=:ctx","=:opts"],["=:==","=:namespace","core"],["=:->",["=:prop","=:children","=:active_namespace"],"evaluate","=:expression","=:ctx","=:opts"]]]]],["=:eval_struct",["=:fn",["=:lisp_struct","=:ctx","=:opts"],["=:let",[["=:rval","=:nil"]],["=:if",["=:is_function?","=:lisp_struct"],["=:=","=:rval",["=:lisp_struct"]],["=:=","=:rval",["=:evaluate","=:lisp_struct","=:ctx",["=:+",{"json_in":true},["=:or","=:opts",{}]]]]],"=:rval"]]]],["=:defvar","=:built_ins",["MAX_SAFE_INTEGER","LispSyntaxError","sub_type","__VERBOSITY__","int","float","values","pairs","keys","take","prepend","first","last","length","conj","reverse","map","bind","to_object","to_array","slice","rest","second","third","chop","chomp","not","push","pop","list","flatten","jslambda","join","lowercase","uppercase","log","split","split_by","is_object?","is_array?","is_number?","is_function?","is_set?","is_element?","is_string?","is_nil?","is_regex?","is_date?","ends_with?","starts_with?","blank?","contains?","make_set","eval_exp","indirect_new","get_import_entry","range","add","merge_objects","index_of","resolve_path","delete_prop","load_pends","min_value","max_value","interlace","trim","assert","unquotify","or_args","pending_ns_loads","special_operators","defclog","NOT_FOUND","check_external_env_default","built_ins","reader"]],["=:set_prop","=:Environment.global_ctx.scope","built_ins","=:built_ins"],["=:defvar","=:set_compiler",["=:fn",["=:compiler_function"],["=:let",[["=:new_ops",["=:compiler_function",[],{"special_operators":true,"env":"=:Environment"}]]],["=:if",["=:is_set?","=:new_ops"],["=:do",["=:=","=:compiler_operators","=:new_ops"],["=:=","=:compiler","=:compiler_function"],["=:set_prop","=:Environment.global_ctx.scope","compiler","=:compiler"],["=:register_feature","compiler"]],["=:do",["=:console.error","Invalid compiler function: invalid operators returned. Not installing."],["=:throw","=:EvalError","Invalid compiler function"]]],"=:compiler"]]],["=:set_prop","=:Environment.global_ctx.scope","set_compiler","=:set_compiler"],["=:set_prop","=:Environment.global_ctx.scope","clone",["=:fn",["=:val"],["=:if",["=:==","=:val","=:Environment"],"=:Environment",["=:clone","=:val",0,"=:Environment"]]]],["=:set_prop","=:Environment","get_global","=:get_global","set_global","=:set_global","symbol_definition","=:symbol_definition","namespace","=:namespace"],["=:defvar","=:children",["=:or","=:opts.children",{}]],["=:defvar","=:children_declarations",["=:or","=:opts.children_declarations",{}]],["=:when",["=:==","=:namespace","core"],["=:when",["=:not",["=:prop","=:Environment.global_ctx.scope","*env_config*"]],["=:set_prop","=:Environment.global_ctx.scope","*env_config*",{"export":{"save_path":"js/juno.js","default_namespace":"core","include_source":false},"features":[],"build":["=:javascript","=:DLISP_ENV_VERSION"],"imports":{}}]],["=:defvar","=:current_namespace",["=:function",[],"=:active_namespace"]],["=:defvar","=:create_namespace",["=:fn",["=:name","=:options","=:defer_initialization"],["=:cond",["=:not",["=:is_string?","=:name"]],["=:throw","=:TypeError","namespace name must be a string"],["=:prop","=:children","=:name"],["=:throw","=:EvalError","namespace already exists"],"=:else",["=:let",[["=:options",["=:or","=:options",{}]],["=:child_env",["=:dlisp_env",{"parent_environment":"=:Environment","namespace":"=:name","contained":"=:options.contained","defer_initialization":"=:defer_initialization"}]]],["=:if","=:child_env.evaluate",["=:do",["=:->","=:child_env","set_compiler","=:compiler"],["=:set_prop","=:children","=:name","=:child_env"],["=:set_prop","=:children_declarations","=:name",{}],["=:->","=:child_env","evaluate_local","(for_each (sym built_ins) (delete_prop Environment.context.scope sym))"],["=:->","=:child_env","evaluate_local","(for_each (sym built_ins) (delete_prop Environment.definitions sym))"],["=:if","=:options.contained",["=:set_prop",["=:prop","=:children_declarations","=:name"],"contained",true]],["=:set_prop",["=:prop","=:children_declarations","=:name"],"serialize_with_image",["=:if",["=:==",false,"=:options.serialize_with_image"],false,true]],"=:name"],["=:do",["=:console.error","ENV: couldn't create the child environment. Received: ","=:child_env"],["=:throw","=:EvalError",["=:+","unable to create namespace ","=:name"]]]]]]]],["=:defvar","=:set_namespace",["=:fn",["=:name"],["=:cond",["=:not",["=:is_string?","=:name"]],["=:throw","=:TypeError","namespace name must be a string"],["=:and",["=:not",["=:==","core","=:name"]],["=:eq","=:nil",["=:prop","=:children","=:name"]]],["=:throw","=:EvalError",["=:+","namespace ","=:name"," doesn't exist"]],"=:else",["=:do",["=:if",["=:==","=:name","core"],["=:do",["=:=","=:active_namespace","core"]],["=:do",["=:=","=:active_namespace","=:name"]]],"=:name"]]]],["=:defvar","=:delete_namespace",["=:fn",["=:name"],["=:cond",["=:not",["=:is_string?","=:name"]],["=:throw","=:TypeError","namespace name must be a string"],["=:==","core","=:name"],["=:throw","=:EvalError","core namespace cannot be removed"],["=:eq","=:nil",["=:prop","=:children","=:name"]],["=:throw","=:EvalError",["=:+","namespace ","=:name","doesn't exist"]],["=:==","=:name",["=:current_namespace"]],["=:throw","=:EvalError","namespace is the current namespace"],"=:else",["=:do",["=:remove_prop","=:children","=:name"],["=:for_each",["k",["=:or",["=:resolve_path",["global_ctx","scope","*env_config*","imports"],"=:Environment"],[]]],["=:when",["=:starts_with?","=:k","=:name"],["=:remove_prop","=:Environment.global_ctx.*env_config*.imports","=:k"]]],"=:name"]]]],["=:set_prop","=:Environment.global_ctx.scope","create_namespace","=:create_namespace","set_namespace","=:set_namespace","delete_namespace","=:delete_namespace","namespaces",["=:function",[],["=:+",["=:keys","=:children"],"core"]],"current_namespace","=:current_namespace"]],["=:defvar","=:get_namespace_handle",["=:fn",["=:name"],["=:progn",["=:cond",["=:==","=:namespace","=:name"],"=:Environment",["=:==","=:namespace","core"],["=:if",["=:and",["=:is_string?","=:name"],["=:prop","=:children","=:name"]],["=:prop","=:children","=:name"]],"=:parent_environment",["=:->","=:parent_environment","get_namespace_handle","=:name"],"=:else",["=:throw","invalid namespace handle requested"]]]]],["=:defvar","=:included_globals","=:nil"],["=:defvar","=:imps","=:nil"],["=:defvar","=:rehydrated_children",false],["=:when",["=:and","=:included_globals",["=:==","=:namespace","core"]],["=:=","=:included_globals",["=:included_globals"]],["=:when",["=:resolve_path",["symbols","compiler"],"=:included_globals"],["=:set_prop","=:Environment.global_ctx.scope","compiler",["=:resolve_path",["symbols","compiler"],"=:included_globals"]],["=:=","=:compiler","=:Environment.global_ctx.scope.compiler"]],["=:when",["=:is_object?",["=:prop","=:included_globals","config"]],["=:set_prop","=:Environment.global_ctx.scope","*env_config*","=:included_globals.config"]],["=:when",["=:is_object?",["=:prop","=:included_globals","imports"]],["=:=","=:imps",["=:prop","=:included_globals","imports"]],["=:when","=:imps",["=:for_each",["=:imp_source",["=:values","=:imps"]],["=:progn",["=:cond",["=:==","=:imp_source.namespace","=:namespace"],["=:progn",["=:set_prop","=:Environment.global_ctx.scope","=:imp_source.symbol","=:imp_source.initializer"]]]]]]],["=:when",["=:is_object?",["=:prop","=:included_globals","symbols"]],["=:for_each",["=:symset",["=:pairs","=:included_globals.symbols"]],["=:when",["=:eq","=:nil",["=:prop","=:Environment.global_ctx.scope","=:symset.0"]],["=:set_prop","=:Environment.global_ctx.scope","=:symset.0","=:symset.1"]]]],["=:when",["=:is_object?",["=:prop","=:included_globals","definitions"]],["=:for_each",["=:symset",["=:pairs","=:included_globals.definitions"]],["=:when",["=:eq","=:nil",["=:prop","=:Environment.definitions","=:symset.0"]],["=:set_prop","=:Environment.definitions","=:symset.0","=:symset.1"]]]],["=:when",["=:is_object?",["=:prop","=:included_globals","declarations"]],["=:for_each",["=:symset",["=:pairs","=:included_globals.declarations"]],["=:when",["=:eq","=:nil",["=:prop","=:Environment.declarations","=:symset.0"]],["=:set_prop","=:Environment.declarations","=:symset.0",["=:quotel","=:symset.1"]]]]],["=:when",["=:prop","=:Environment.global_ctx.scope","compiler"],["=:set_compiler",["=:prop","=:Environment.global_ctx.scope","compiler"]]],["=:when",["=:is_object?",["=:prop","=:included_globals","children"]],["=:=","=:rehydrated_children",true],["=:for_each",["=:childset",["=:pairs","=:included_globals.children"]],["=:do",["=:create_namespace","=:childset.0",["=:if",["=:prop","=:included_globals.children_declarations","=:childset.0"],["=:prop","=:included_globals.children_declarations","=:childset.0"],{}],true]]]]],["=:defvar","=:clone_to_new",["=:fn",["=:options"],["=:let",[["=:new_env","=:nil"],["=:my_children","=:nil"],["=:my_children_declarations","=:nil"]],["=:env_log","=:namespace","cloning: # children: ",["=:length","=:children"]],["=:=","=:new_env",["=:dlisp_env",{"env":["=:clone","=:Environment"],"children":["=:clone","=:children"],"children_declarations":["=:clone","=:children_declarations"]}]],["=:env_log","=:namespace","constructed: ",["=:->","=:new_env","id"]],"=:new_env"]]],["=:defvar","=:export_symbol_set",["=:fn",["=:options"],["=:reduce",["=:symset",["=:pairs",["=:clone","=:Environment.global_ctx.scope"]]],["=:do",["=:cond",["=:and","=:options","=:options.no_compiler",["=:==","=:symset.0","compiler"]],"=:nil",["=:starts_with?","$","=:symset.0"],"=:nil",["=:==",["=:resolve_path",["=:symset.0","serialize_with_image"],"=:Environment.definitions"],false],"=:nil",["=:and","=:options","=:options.do_not_include",["=:contains?","=:symset.0","=:options.do_not_include"]],"=:nil",["=:==","=:symset.0","*env_skeleton*"],["=:symset.0",[["=:quote","=:quotel"],["=:prop","=:Environment.global_ctx.scope","*env_skeleton*"]]],["=:resolve_path",["=:symset.0","initializer"],"=:Environment.definitions"],["=:do",["=:symset.0",[["=:quote","=:quotel"],"placeholder"]]],["=:==","=:nil","=:symset.1"],["=:symset.0",["=:quote","=:nil"]],["=:==","=:undefined","=:symset.1"],["=:symset.0",["=:quote","=:undefined"]],["=:is_string?","=:symset.1"],["=:progn",["=:symset.0",["=:env_encode_string","=:symset.1"]]],"=:else",["=:symset.0","=:symset.1"]]]]]],["=:defvar","=:save_env",["=:fn",["=:options"],["=:let",[["=:new_env","=:nil"],["=:my_children","=:nil"],["=:env_constructor","=:nil"],["=:dcomps",["=:date_components",["=:new","=:Date"]]],["=:options",["=:or","=:options",{}]],["=:version_tag",["=:if",["=:not",["=:blank?","=:opts.version_tag"]],"=:opts.version_tag",["=:join",".",["=:dcomps.year","=:dcomps.month","=:dcomps.day","=:dcomps.hour","=:dcomps.minute"]]]],["=:build_time",["=:formatted_date",["=:new","=:Date"]]],["=:build_headers",[]],["=:child_env","=:nil"],["=:want_buffer",["=:or","=:options.want_buffer",false]],["=:comp_buffer","=:nil"],["=:sorted_dependencies",["=:sort_dependencies"]],["=:child_export_order","=:nil"],["=:preserve_imports",["=:if",["=:and","=:options",["=:==","=:options.preserve_imports",false]],false,true]],["=:include_source",false],["=:exports",[]],["=:src",["=:if",["=:->","=:Environment","get_global","*env_skeleton*","=:nil"],["=:clone",["=:->","=:Environment","get_global","*env_skeleton*"]],["=:reader",["=:read_text_file","./src/environment.lisp"]]]],["=:target_insertion_path","=:nil"],["=:output_path","=:nil"]],["=:when",["=:prop","=:Environment.global_ctx.scope","*env_skeleton*"],["=:register_feature","*env_skeleton*"]],["=:=","=:target_insertion_path",["=:first",["=:findpaths",["=:quote","=:included_globals"],"=:src"]]],["=:if",["=:not",["=:is_array?","=:target_insertion_path"]],["=:throw","=:EvalError","Unable to find the first included_globals symbol"]],["=:=","=:target_insertion_path",["=:conj",["=:chop","=:target_insertion_path"],[2]]],["=:when","=:options.include_source",["=:=","=:include_source",true]],["=:env_log","=:namespace","cloning: # children: ",["=:length","=:children"]],["=:env_log","=:namespace","preserve_imports: ","=:preserve_imports"],["=:=","=:exports",["=:export_symbol_set",["=:if","=:options.do_not_include",{"do_not_include":"=:options.do_not_include"}]]],["=:=","=:child_export_order",["=:reduce",["=:cname","=:sorted_dependencies.namespaces"],["=:unless",["=:==","=:cname","core"],["=:cname",["=:prop","=:children","=:cname"]]]]],["=:console.log","save_env: child_export_order: ",["=:each","=:child_export_order",0]],["=:=","=:my_children",["=:to_object",["=:reduce",["=:child","=:child_export_order"],["=:if",["=:resolve_path",["=:child.0","serialize_with_image"],"=:children_declarations"],["=:progn",["=:=","=:child_env",["=:->","=:child.1","compile",["=:->","=:child.1","export_symbol_set",["=:+",{},{"no_compiler":true}]],{"throw_on_error":true}]],["=:child.0",[[["=:quote","=:quotel"],"=:child.1.definitions"],["=:quotem",["=:javascript","=:##","=:child_env"]]]]]]]]],["=:set_path","=:target_insertion_path","=:src",["=:quotem",["=:fn",[],"=:##",["=:to_object",[["definitions",[["=:quotel","=:quote"],["=:if","=:options.do_not_include",["=:to_object",["=:reduce",["=:defset",["=:pairs","=:Environment.definitions"]],["=:if",["=:not",["=:contains?","=:defset.0","=:options.do_not_include"]],["=:defset.0","=:defset.1"]]]],["=:clone","=:Environment.definitions"]]]],["declarations",["=:clone","=:Environment.declarations"]],["config",["=:let",[["=:exp_conf",["=:clone",["=:prop","=:Environment.global_ctx.scope","*env_config*"]]]],["=:when",["=:not","=:preserve_imports"],["=:set_prop","=:exp_conf","imports",{}]],["=:when","=:options.features",["=:set_prop","=:exp_conf","features","=:options.features"]],"=:exp_conf"]],["imports",["=:if","=:preserve_imports",["=:to_object",["=:for_each",["=:imp_source",["=:values",["=:or",["=:resolve_path",["*env_config*","imports"],"=:Environment.global_ctx.scope"],{}]]],["=:imp_source.symbol",{"initializer":["=:quotem",["=:javascript","new function () { return ","=:##","=:imp_source.symbol"," }"]],"symbol":"=:imp_source.symbol","namespace":"=:imp_source.namespace"}]]],{}]],["symbols",[["=:quote","=:javascript"],["=:compile",["=:to_object","=:exports"],{"throw_on_error":true}]]],["children_declarations",["=:quotem",["=:fn",[],"=:##",["=:clone","=:children_declarations"]]]],["child_load_order",["=:each","=:child_export_order",0]],["children","=:my_children"]]]]]],["=:=","=:output_path",["=:if","=:options.want_buffer","=:nil",["=:or","=:options.save_as",["=:resolve_path",["*env_config*","export","save_path"],"=:Environment.global_ctx.scope"]]]],["=:if",["=:is_function?","=:output_path"],["=:=","=:output_path",["=:output_path"]]],["=:if",["=:and",["=:not",["=:is_string?","=:output_path"]],"=:output_path"],["=:throw","=:EvalError","invalid name for target for saving the environment.  Must be a string or function"]],["=:cond",["=:or","=:want_buffer",["=:and","=:output_path",["=:ends_with?",".js","=:output_path"]]],["=:do",["=:push","=:build_headers",["=:+","// Build Time: ","=:build_time"]],["=:push","=:build_headers",["=:+","// Version: ","=:version_tag"]],["=:push","=:build_headers",["=:+","export const DLISP_ENV_VERSION='","=:version_tag","';"]],["=:env_log","saving to: ","=:output_path"],["=:compile_buffer","=:src","init_dlisp",{"namespace":"=:namespace","toplevel":true,"include_boilerplate":false,"verbose":false,"bundle":true,"want_buffer":"=:want_buffer","imports":["=:if","=:preserve_imports",["=:resolve_path",["*env_config*","imports"],"=:Environment.global_ctx.scope"]],"js_headers":[["=:show","=:check_true"],["=:show","=:get_next_environment_id"],["=:show","=:get_outside_global"],["=:show","=:subtype"],["=:show","=:lisp_writer"],["=:show","=:clone"],["=:show","=:LispSyntaxError"]],"bundle_options":{"default_namespace":["=:resolve_path",["*env_config*","export","default_namespace"],"=:Environment.global_ctx.scope"]},"output_file":"=:output_path","include_source":["=:or","=:options.include_source",["=:resolve_path",["*env_config*","export","include_source"],"=:Environment.global_ctx.scope"]],"build_headers":"=:build_headers"}]],["=:and","=:output_path",["=:ends_with?",".lisp","=:output_path"]],["=:write_text_file","=:output_path",["=:JSON.stringify","=:src","=:nil",4]],"=:else","=:src"]]]],["=:declare",["=:local","=:lisp_writer"],["=:include","=:reader","=:add_escape_encoding","=:do_deferred_splice","=:safe_access","=:embed_compiled_quote"]],["=:defvar","=:as_lisp","=:lisp_writer"],["=:defvar","=:read_lisp","=:reader"],["=:set_prop","=:Environment.global_ctx.scope","eval","=:eval_exp","reader","=:reader","add_escape_encoding","=:add_escape_encoding","get_outside_global","=:get_outside_global","as_lisp","=:lisp_writer","lisp_writer","=:lisp_writer","clone_to_new","=:clone_to_new","save_env","=:save_env","null","=:null"],["=:defvar","=:inlines",["=:if","=:parent_environment",["=:+",{},"=:parent_environment.inlines",["=:if","=:opts.inlines","=:opts.inlines",{}]],["=:+",{},["=:if","=:opts.inlines","=:opts.inlines",{}],{"pop":["=:fn",["=:args"],["(","=:args.0",")",".","pop()"]],"push":["=:fn",["=:args"],["(","=:args.0",")",".push","(","=:args.1",")"]],"chomp":["=:fn",["=:args"],["(","=:args.0",")",".substr","(",0,",","(","=:args.0",".length","-",1,")",")"]],"join":["=:fn",["=:args"],["=:if",["=:==","=:args.length",1],["(","=:args.0",")",".join","('')"],["(","=:args.1",")",".join","(","=:args.0",")"]]],"take":["=:fn",["=:args"],["(","=:args.0",")",".shift","()"]],"prepend":["=:fn",["=:args"],["(","=:args.0",")",".unshift","(","=:args.1",")"]],"trim":["=:fn",["=:args"],["(","=:args.0",")",".trim()"]],"lowercase":["=:fn",["=:args"],["(","=:args.0",")",".toLowerCase()"]],"uppercase":["=:fn",["=:args"],["(","=:args.0",")",".toUpperCase()"]],"islice":["=:fn",["=:args"],["=:cond",["=:==","=:args.length",3],["(","=:args.0",")",".slice(","=:args.1",",","=:args.2",")"],["=:==","=:args.length",2],["(","=:args.0",")",".slice(","=:args.1",")"],"=:else",["=:throw","=:SyntaxError","slice requires 2 or 3 arguments"]]],"split_by":["=:fn",["=:args"],["(","=:args.1",")",".split","(","=:args.0",")"]],"bindf":["=:fn",["=:args"],["=:args.0",".bind(","=:args.1",")"]],"is_array?":["=:fn",["=:args"],["(","=:args.0"," instanceof Array",")"]],"is_object?":["=:fn",["=:args"],["(","=:args.0"," instanceof Object",")"]],"is_string?":["=:fn",["=:args"],["(","=:args.0"," instanceof String || typeof ","=:args.0","===","'string'",")"]],"is_function?":["=:fn",["=:args"],["=:args.0"," instanceof Function"]],"is_element?":["=:fn",["=:args"],["=:args.0"," instanceof Element"]],"log":["=:fn",["=:args"],["console.log","(",["=:map",["=:fn",["=:val","=:idx","=:tl"],["=:if",["=:<","=:idx",["=:-","=:tl",1]],["=:val",","],["=:val"]]],"=:args"],")"]],"reverse":["=:fn",["=:args"],["(","=:args.0",")",".slice(0).reverse()"]],"int":["=:fn",["=:args"],["=:cond",["=:==","=:args.length",1],["parseInt(","=:args.0",")"],["=:==","=:args.length",2],["parseInt(","=:args.0",",","=:args.1",")"],"=:else",["=:throw","SyntaxError",["=:+","invalid number of arguments to int: received ","=:args.length"]]]],"float":["=:fn",["=:args"],["parseFloat(","=:args.0",")"]]}]]],["=:set_prop","=:Environment","eval","=:eval_struct","identify","=:subtype","meta_for_symbol","=:meta_for_symbol","set_compiler","=:set_compiler","read_lisp","=:reader","as_lisp","=:as_lisp","symbols","=:symbols","inlines","=:inlines","clone_to_new","=:clone_to_new","export_symbol_set","=:export_symbol_set","save_env","=:save_env","special_operators","=:special_operators","definitions","=:Environment.definitions","declarations","=:Environment.declarations","get_namespace_handle","=:get_namespace_handle","compile","=:compile","evaluate","=:evaluate","evaluate_local","=:evaluate_local","do_deferred_splice","=:do_deferred_splice","id",["=:fn",[],"=:id"],"set_check_external_env",["=:fn",["=:state"],["=:do",["=:=","=:check_external_env_default","=:state"],"=:check_external_env_default"]],"check_external_env",["=:fn",[],"=:check_external_env_default"]],["=:setq","=:in_boot",false],["=:defvar","=:sys_init",["=:prop","=:Environment.global_ctx.scope","*system_initializer*"]],["=:defvar","=:init",["=:prop","=:Environment.global_ctx.scope","*initializer*"]],["=:when",["=:and","=:opts.default_namespace",["=:not",["=:==","=:compiler","=:unset_compiler"]],["=:prop","=:children","=:opts.default_namespace"]],["=:set_namespace","=:opts.default_namespace"]],["=:when",["=:==","=:namespace","core"],["=:for_each",["=:symname",["=:keys","=:Environment.definitions"]],["=:progn",["=:aif",["=:and",["=:not",["=:and","=:included_globals",["=:prop","=:included_globals.imports","=:symname"]]],["=:resolve_path",["=:symname","initializer"],"=:Environment.definitions"]],["=:progn",["=:try",["=:set_prop","=:Environment.global_ctx.scope","=:symname",["=:eval_struct","=:it",{},{"throw_on_error":true}]],["=:catch","=:Error",["=:e"],["=:progn",["=:console.error","core environment cannot initialize: ","=:symname","error:","=:e"]]]]]]]],["=:when","=:sys_init",["=:eval","=:sys_init"]],["=:when",["=:and","=:rehydrated_children",["=:is_object?",["=:prop","=:included_globals","children"]]],["=:console.log","env: child load order: ","=:included_globals.child_load_order"],["=:for_each",["=:childname",["=:or","=:included_globals.child_load_order",[]]],["=:when",["=:prop","=:included_globals.children","=:childname"],["=:console.log","env: loading child: ","=:childname"],["=:defvar","=:childset",["=:childname",["=:prop","=:included_globals.children","=:childname"]]],["=:defvar","=:childenv",["=:prop","=:children","=:childset.0"]],["=:defvar","=:imported_defs","=:childset.1.0"],["=:when",["=:is_object?",["=:prop","=:included_globals","imports"]],["=:=","=:imps",["=:prop","=:included_globals","imports"]],["=:when","=:imps",["=:for_each",["=:imp_source",["=:values","=:imps"]],["=:progn",["=:if",["=:prop","=:children","=:imp_source.namespace"],["=:progn",["=:set_global",["=:+","","=:imp_source.namespace","/","=:imp_source.symbol"],"=:imp_source.initializer"]]]]]]],["=:try",["=:progn",["=:set_prop","=:childset.1",1,["=:->","=:childenv","eval","=:childset.1.1",{"throw_on_error":true}]],["=:for_each",["=:symset","=:childset.1.1"],["=:when",["=:eq","=:nil",["=:resolve_path",["=:childset.0","context","scope","=:symset.0"],"=:children"]],["=:when",["=:prop","=:imported_defs","=:symset.0"],["=:set_path",["=:childset.0","definitions","=:symset.0"],"=:children",["=:prop","=:imported_defs","=:symset.0"]]],["=:aif",["=:resolve_path",["=:childset.0","definitions","=:symset.0","initializer"],"=:children"],["=:progn",["=:try",["=:set_path",["=:childset.0","context","scope","=:symset.0"],"=:children",["=:->","=:childenv","eval","=:it"]],["=:catch","=:Error",["=:e"],["=:console.error","env: unable to evaluate: symbol: ","=:symset.0","=:e"]]]],["=:set_path",["=:childset.0","context","scope","=:symset.0"],"=:children","=:symset.1"]]]]],["=:catch","=:Error",["=:e"],["=:console.error","env: unable to load child: ",["=:clone","=:childset"]]]]]]],["=:when","=:init",["=:eval","=:init"]],["=:for_each",["=:child","=:children"],["=:progn",["=:->","=:child","evaluate_local",["=:+","(progn (debug) (console.log \"child running initialization..\" *namespace*) (if (prop Environment.global_ctx.scope `*system_initializer*) (eval *system_initializer*)) (if (prop Environment.global_ctx.scope `*initializer*) (eval *initializer*)))"],"=:nil",{"log_errors":true}]]]],"=:Environment"]]]] })();__obj__1["*initializer*"]=async function() {
    return await (await Environment.get_global("repl"))(null,null,{
        use_console:true
    })
};return __obj__1;})(),children_declarations:async function() {
    return {
        user:{
            serialize_with_image:true
        }
    }
},child_load_order:["user"],children:{
    user:await (async function(){
         return [{"meta_for_symbol":{"core_lang":true,"description":"Given a quoted symbol and a boolean indicating whether or not all namespaces should be searched, returns the meta data associated with the symbol for each environment.  If search mode is requested, the value returned is an array, since there can be symbols with the same name in different environments. If no values are found an empty array is returned.  If not in search mode, meta_for_symbol searches the current namespace only, and if a matching symbol is found, returns an object with all found metadata, otherwise nil is returned.","usage":["quoted_symbol:string","search_mode:boolean"],"tags":["describe","meta","help","definition","symbol","metadata"]},"describe":{"core_lang":true,"description":"Given a quoted symbol returns the relevant metadata pertinent to the current namespace context.","usage":["quoted_symbol:string","search_mode:boolean"],"tags":["meta","help","definition","symbol","metadata","info","meta_for_symbol"]},"undefine":{"core_lang":true,"description":"Given a quoted symbol removes the symbol and any definition information from the namespace. If the namespace is fully-qualified, then the symbol will be removed from the specified namespace instead of the currently active namespace. If the symbol is successfully removed, the function will return true, otherwise if it is not found, false will be returned.  Note that if the specified symbol is non-qualified, but exists in a different, accessible namespace, but the symbol isn't present in the current namespace, the symbol will not be deleted.  The environment is not searched and therefore symbols have to be explicitly fully-qualified for any effect of this function outside the current namespace.","usage":["quoted_symbol:string"],"tags":["symbol","delete","remove","unintern","reference","value"]},"*namespace*":{"core_lang":true},"pend_load":{"core_lang":true,"description":"When used as an initializer wrapper via the use_symbols macro, the wrapped initializer will not be loaded until the from_namespace is loaded to ensure that the wrapped initializer won't fail due to not yet loaded dependencies.","usage":["from_namespace:string","target_namespace:string","symbol:string","initializer:array"],"tags":["symbol","definitions","namespace","scope","dependency","dependencies","require"]},"symbols":{"core_lang":true,"description":"Returns an array of the defined global symbols for the local environment.  If opts.unique is true, only symbols that are not part of the built ins are included.","usage":["opts:object"],"tags":["symbol","names","definitions","values","scope"]},"set_global":{"core_lang":true},"get_global":{"core_lang":true},"symbol_definition":{"core_lang":true,"description":"Given a symbol name and an optional namespace, either as a fully qualified path or via the target_namespace argument, returns definition information about the retquested symbol.  Used primarily by the compiler to find metadata for a specific symbol during compilation.","usage":["symname:string","namespace:string"],"tags":["compiler","symbols","namespace","search","context","environment"]},"compile":{"core_lang":true,"description":"Compiles the given JSON or quoted lisp and returns a string containing the lisp form or expression as javascript.<br>If passed the option { meta: true } , an array is returned containing compilation metadata in element 0 and the compiled code in element 1.","usage":["json_expression:*","opts:object"],"tags":["macro","quote","quotes","desym","compiler"]},"env_log":{"core_lang":true,"description":"The environment logging function used by the environment.","usage":["arg0:*","argN:*"]},"evaluate_local":{"core_lang":true},"evaluate":{"core_lang":true},"eval_struct":{"core_lang":true}},[["meta_for_symbol",function(quoted_symbol,search_mode) {
                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){
                            {
                                let local_data=Environment.global_ctx.scope[quoted_symbol];
                                ;
                                let acc=[];
                                ;
                                if (check_true (search_mode)){
                                    {
                                        if (check_true (local_data)){
                                            {
                                                (acc).push( ( get_global("add"))({
                                                    namespace:namespace,name:quoted_symbol,type: subtype(local_data)
                                                }, ( function(){
                                                    let it;
                                                    it=Environment.definitions[quoted_symbol];
                                                    if (check_true (it)){
                                                        return it
                                                    } else {
                                                        return new Object()
                                                    }
                                                })()))
                                            }
                                        };
                                        if (check_true (parent_environment)){
                                            {
                                                {
                                                    let __collector;
                                                    let __result;
                                                    let __action;
                                                    __collector=[];
                                                    __result=null;
                                                    __action=function(info) {
                                                        return (acc).push(info)
                                                    };
                                                    ;
                                                     ( function() {
                                                        let __for_body__122=function(__item) {
                                                            __result= __action(__item);
                                                            if (check_true (__result)){
                                                                return (__collector).push(__result)
                                                            }
                                                        };
                                                        let __array__123=[],__elements__121= ( function() {
                                                            {
                                                                 let __call_target__= parent_environment["meta_for_symbol"].call(parent_environment,quoted_symbol,true), __call_method__="flat";
                                                                return  __call_target__[__call_method__].call(__call_target__,1)
                                                            } 
                                                        })();
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__120 in __elements__121) {
                                                            __array__123.push( __for_body__122(__elements__121[__iter__120]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__123.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__123;
                                                         
                                                    })();
                                                    __collector
                                                }
                                            }
                                        };
                                        if (check_true (( length( keys(children))>0))){
                                            {
                                                {
                                                    let __collector;
                                                    let __result;
                                                    let __action;
                                                    __collector=[];
                                                    __result=null;
                                                    __action=function(details) {
                                                        return (acc).push(details)
                                                    };
                                                    ;
                                                     ( function() {
                                                        let __for_body__126=function(__item) {
                                                            __result= __action(__item);
                                                            if (check_true (__result)){
                                                                return (__collector).push(__result)
                                                            }
                                                        };
                                                        let __array__127=[],__elements__125= ( function(){
                                                            let ____collector__128=  function(){
                                                                return []
                                                            };
                                                            let ____result__129=  function(){
                                                                return null
                                                            };
                                                            let ____action__130=  function(){
                                                                return function(child_data) {
                                                                    if (check_true ( not((child_data['0']=== ( get_global("current_namespace"))())))){
                                                                        {
                                                                            return  child_data['1']["meta_for_symbol"].call(child_data['1'],quoted_symbol)
                                                                        }
                                                                    }
                                                                }
                                                            };
                                                            {
                                                                let __collector= ____collector__128();
                                                                ;
                                                                let __result= ____result__129();
                                                                ;
                                                                let __action= ____action__130();
                                                                ;
                                                                ;
                                                                 ( function() {
                                                                    let __for_body__133=function(__item) {
                                                                        __result= __action(__item);
                                                                        if (check_true (__result)){
                                                                            return (__collector).push(__result)
                                                                        }
                                                                    };
                                                                    let __array__134=[],__elements__132= pairs(children);
                                                                    let __BREAK__FLAG__=false;
                                                                    for(let __iter__131 in __elements__132) {
                                                                        __array__134.push( __for_body__133(__elements__132[__iter__131]));
                                                                        if(__BREAK__FLAG__) {
                                                                             __array__134.pop();
                                                                            break;
                                                                            
                                                                        }
                                                                    }return __array__134;
                                                                     
                                                                })();
                                                                return __collector
                                                            }
                                                        })();
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__124 in __elements__125) {
                                                            __array__127.push( __for_body__126(__elements__125[__iter__124]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__127.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__127;
                                                         
                                                    })();
                                                    __collector
                                                }
                                            }
                                        };
                                        return acc
                                    }
                                } else {
                                    {
                                        quoted_symbol= ( function(){
                                            if (check_true ( starts_with_ques_( ( function(){
                                                 return "=:" 
                                            })(),quoted_symbol))){
                                                return  quoted_symbol["substr"].call(quoted_symbol,2)
                                            } else {
                                                return quoted_symbol
                                            }
                                        })();
                                        {
                                            let it;
                                            it=Environment.definitions[quoted_symbol];
                                            if (check_true (it)){
                                                return  ( get_global("add"))({
                                                    namespace:namespace,type: sub_type(local_data),name:quoted_symbol
                                                },it)
                                            } else {
                                                return null
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }],["describe",async function(quoted_symbol,search_mode) {
                        let internal_results=await meta_for_symbol(quoted_symbol,true);
                        ;
                        if (check_true (((internal_results instanceof Array)&& internal_results['0']))){
                            if (check_true (search_mode)){
                                return internal_results
                            } else {
                                return await first(internal_results)
                            }
                        } else {
                            {
                                let external_results=await get_outside_global(quoted_symbol);
                                ;
                                if (check_true (external_results)){
                                    return {
                                        location:"external",type:await subtype(external_results)
                                    }
                                } else {
                                    return null
                                }
                            }
                        }
                    }],["undefine",function(quoted_symbol) {
                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){
                            {
                                let namespace_identity;
                                let parent_call;
                                let child_call;
                                let target_symbol;
                                namespace_identity=(quoted_symbol).split("/");
                                parent_call=null;
                                child_call=null;
                                target_symbol=null;
                                ;
                                return   (function(){
                                    if (check_true ((((namespace_identity.length===1)&& Environment.global_ctx.scope[namespace_identity['0']])|| ((namespace_identity.length>1)&& (namespace_identity['0']===namespace))))) {
                                        {
                                            target_symbol= ( function(){
                                                if (check_true ((namespace_identity.length>1))){
                                                    return namespace_identity['1']
                                                } else {
                                                    return namespace_identity['0']
                                                }
                                            })();
                                             delete_prop(Environment.definitions,target_symbol);
                                            if (check_true (Environment.global_ctx.scope[target_symbol])){
                                                return  delete_prop(Environment.global_ctx.scope,target_symbol)
                                            } else {
                                                return false
                                            }
                                        }
                                    } else if (check_true (((namespace_identity.length>1)&& parent_environment))) {
                                        {
                                            parent_call= parent_environment["get_global"].call(parent_environment,"undefine");
                                            return (parent_call)(quoted_symbol)
                                        }
                                    } else if (check_true (((namespace_identity.length>1)&& children[namespace_identity['0']]))) {
                                        {
                                            child_call= ( function() {
                                                {
                                                     let __call_target__=children[namespace_identity['0']], __call_method__="get_global";
                                                    return  __call_target__[__call_method__].call(__call_target__,"undefine")
                                                } 
                                            })();
                                            return  child_call(quoted_symbol)
                                        }
                                    } else {
                                        return false
                                    }
                                } )()
                            }
                        } else {
                            throw new SyntaxError("undefine requires a quoted symbol");
                            
                        }
                    }],["*namespace*","user"],["pend_load",async function(from_namespace,target_namespace,symbol,initializer) {
                        if (check_true ((null==pending_ns_loads[from_namespace]))){
                            {
                                await async function(){
                                    pending_ns_loads[from_namespace]=[];
                                    return pending_ns_loads;
                                    
                                }()
                            }
                        };
                        (pending_ns_loads[from_namespace]).push({
                            symbol:symbol,source_ns:from_namespace,target_ns:target_namespace,initializer:await (async function(){
                                 return ["=:quote",initializer] 
                            })()
                        });
                        return initializer
                    }],["symbols",async function(opts) {
                        return await async function(){
                            if (check_true ((null==opts))) {
                                return await keys(Environment.global_ctx.scope)
                            } else if (check_true (opts.unique)) {
                                {
                                    let no_includes=await make_set(await conj(["meta_for_symbol","describe","undefine","*namespace*","pend_load","symbols","set_global","get_global","symbol_definition","compile","env_log","evaluate_local","evaluate","eval_struct","set_compiler","clone","eval","add_escape_encoding","get_outside_global","as_lisp","lisp_writer","clone_to_new","save_env","null","compiler"],built_ins));
                                    ;
                                    {
                                        let __collector;
                                        let __result;
                                        let __action;
                                        __collector=[];
                                        __result=null;
                                        __action=async function(sym) {
                                            if (check_true (await no_includes["has"].call(no_includes,sym))){
                                                return null
                                            } else {
                                                return sym
                                            }
                                        };
                                        ;
                                        await (async function() {
                                            let __for_body__213=async function(__item) {
                                                __result=await __action(__item);
                                                if (check_true (__result)){
                                                    return (__collector).push(__result)
                                                }
                                            };
                                            let __array__214=[],__elements__212=await keys(Environment.global_ctx.scope);
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__211 in __elements__212) {
                                                __array__214.push(await __for_body__213(__elements__212[__iter__211]));
                                                if(__BREAK__FLAG__) {
                                                     __array__214.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__214;
                                             
                                        })();
                                        return __collector
                                    }
                                }
                            }
                        } ()
                    }],["set_global",function(refname,value,meta,is_constant,target_namespace,contained_req) {
                          (function(){
                            if (check_true ( not((typeof refname==="string")))) {
                                throw new TypeError("reference name must be a string type");
                                
                            } else if (check_true (((Environment===value)|| (Environment.global_ctx===value)|| (Environment.global_ctx.scope===value)))) {
                                {
                                    throw new EvalError("cannot set the environment scope as a global value");
                                    
                                }
                            }
                        } )();
                        if (check_true ( resolve_path( ( function(){
                            let __array_op_rval__217=refname;
                             if (__array_op_rval__217 instanceof Function){
                                return  __array_op_rval__217("constant") 
                            } else {
                                return [__array_op_rval__217,"constant"]
                            }
                        })(),Environment.definitions))){
                            {
                                throw new TypeError(("Assignment to constant variable "+ refname));
                                
                            }
                        };
                        let namespace_identity= ( function(){
                            if (check_true (target_namespace)){
                                return  ( function(){
                                    let __array_op_rval__218=target_namespace;
                                     if (__array_op_rval__218 instanceof Function){
                                        return  __array_op_rval__218(refname) 
                                    } else {
                                        return [__array_op_rval__218,refname]
                                    }
                                })()
                            } else {
                                return (refname).split("/")
                            }
                        })();
                        ;
                        return   (function(){
                            if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace===namespace_identity['0']))))) {
                                return  parent_environment["set_global"].call(parent_environment,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'],(contained|| contained_req))
                            } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {
                                {
                                    if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){
                                        return  ( function() {
                                            {
                                                 let __call_target__=children[namespace_identity['0']], __call_method__="set_global";
                                                return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'])
                                            } 
                                        })()
                                    } else {
                                        throw new EvalError(("namespace "+ namespace_identity['0']+ " doesn't exist"));
                                        
                                    }
                                }
                            } else {
                                {
                                    let comps= get_object_path( ( function(){
                                        if (check_true ((1===namespace_identity.length))){
                                            return namespace_identity['0']
                                        } else {
                                            return namespace_identity['1']
                                        }
                                    })());
                                    ;
                                      (function(){
                                        Environment.global_ctx.scope[comps['0']]=value;
                                        return Environment.global_ctx.scope;
                                        
                                    })();
                                    if (check_true (((meta instanceof Object)&&  not((meta instanceof Array))))){
                                        {
                                            if (check_true (is_constant)){
                                                {
                                                      (function(){
                                                        meta["constant"]=true;
                                                        return meta;
                                                        
                                                    })()
                                                }
                                            };
                                              (function(){
                                                Environment.definitions[comps['0']]=meta;
                                                return Environment.definitions;
                                                
                                            })()
                                        }
                                    } else {
                                        if (check_true (is_constant)){
                                            {
                                                  (function(){
                                                    Environment.definitions[comps['0']]={
                                                        constant:true
                                                    };
                                                    return Environment.definitions;
                                                    
                                                })()
                                            }
                                        }
                                    };
                                    return Environment.global_ctx.scope[comps['0']]
                                }
                            }
                        } )()
                    }],["get_global",function(refname,value_if_not_found,suppress_check_external_env,target_namespace,path_comps,contained_req) {
                        return   (function(){
                            if (check_true ( not((typeof refname==="string")))) {
                                throw new TypeError("reference name must be a string type");
                                
                            } else if (check_true ((refname==="Environment"))) {
                                return Environment
                            } else if (check_true ( compiler_operators["has"].call(compiler_operators,refname))) {
                                return special_identity
                            } else {
                                {
                                    let namespace_identity;
                                    let comps;
                                    let refval;
                                    let symbol_name;
                                    let check_external_env;
                                    namespace_identity= ( function(){
                                        if (check_true (target_namespace)){
                                            return  ( function(){
                                                let __array_op_rval__225=target_namespace;
                                                 if (__array_op_rval__225 instanceof Function){
                                                    return  __array_op_rval__225(refname) 
                                                } else {
                                                    return [__array_op_rval__225,refname]
                                                }
                                            })()
                                        } else {
                                            return (refname).split("/")
                                        }
                                    })();
                                    comps=(path_comps||  get_object_path( ( function(){
                                        if (check_true ((1===namespace_identity.length))){
                                            return namespace_identity['0']
                                        } else {
                                            return namespace_identity['1']
                                        }
                                    })()));
                                    refval=null;
                                    symbol_name=null;
                                    check_external_env= ( function(){
                                        if (check_true (suppress_check_external_env)){
                                            return false
                                        } else {
                                            return check_external_env_default
                                        }
                                    })();
                                    return   (function(){
                                        if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {
                                            return  parent_environment["get_global"].call(parent_environment,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps,(contained|| contained_req))
                                        } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {
                                            {
                                                if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){
                                                    return  ( function() {
                                                        {
                                                             let __call_target__=children[namespace_identity['0']], __call_method__="get_global";
                                                            return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps)
                                                        } 
                                                    })()
                                                } else {
                                                    {
                                                        throw new EvalError(("namespace "+ namespace_identity['0']+ " doesn't exist"));
                                                        
                                                    }
                                                }
                                            }
                                        } else {
                                            {
                                                refval=Environment.global_ctx.scope[comps['0']];
                                                if (check_true (((undefined===refval)&& (namespace_identity.length===1)&& parent_environment))){
                                                    {
                                                        let rval= parent_environment["get_global"].call(parent_environment,refname,value_if_not_found,suppress_check_external_env,null,comps,(contained|| contained_req));
                                                        ;
                                                        return rval
                                                    }
                                                } else {
                                                    {
                                                        if (check_true (((undefined===refval)&& check_external_env))){
                                                            refval= ( function(){
                                                                if (check_true (check_external_env)){
                                                                    return ( get_outside_global(comps['0'])|| NOT_FOUND)
                                                                } else {
                                                                    return NOT_FOUND
                                                                }
                                                            })()
                                                        };
                                                        return   (function(){
                                                            if (check_true (((NOT_FOUND===refval)&&  not((undefined===value_if_not_found))))) {
                                                                return value_if_not_found
                                                            } else if (check_true ((NOT_FOUND===refval))) {
                                                                {
                                                                    throw new ReferenceError(("symbol not found: "+  ( function(){
                                                                        if (check_true ((namespace_identity.length>1))){
                                                                            return  add(namespace,"/",namespace_identity['1'])
                                                                        } else {
                                                                            return  add(namespace,"/",namespace_identity['0'])
                                                                        }
                                                                    })()));
                                                                    
                                                                }
                                                            } else if (check_true ((comps.length===1))) {
                                                                return refval
                                                            } else if (check_true ((comps.length>1))) {
                                                                {
                                                                    return  resolve_path( rest(comps),refval)
                                                                }
                                                            } else {
                                                                {
                                                                     console.warn("get_global: condition fall through: ",comps);
                                                                    return NOT_FOUND
                                                                }
                                                            }
                                                        } )()
                                                    }
                                                }
                                            }
                                        }
                                    } )()
                                }
                            }
                        } )()
                    }],["symbol_definition",async function(symname,target_namespace) {
                        let namespace_identity;
                        namespace_identity=await (async function(){
                            if (check_true (target_namespace)){
                                return await (async function(){
                                    let __array_op_rval__228=target_namespace;
                                     if (__array_op_rval__228 instanceof Function){
                                        return await __array_op_rval__228(symname) 
                                    } else {
                                        return [__array_op_rval__228,symname]
                                    }
                                })()
                            } else {
                                if (check_true ((await length(symname)>2))){
                                    return (symname).split("/")
                                } else {
                                    return await (async function(){
                                        let __array_op_rval__229=symname;
                                         if (__array_op_rval__229 instanceof Function){
                                            return await __array_op_rval__229() 
                                        } else {
                                            return [__array_op_rval__229]
                                        }
                                    })()
                                }
                            }
                        })();
                        return await async function(){
                            if (check_true ((namespace_identity.length===1))) {
                                {
                                    let it;
                                    it=Environment.definitions[symname];
                                    if (check_true (it)){
                                        return it
                                    } else {
                                        if (check_true (parent_environment)){
                                            return await parent_environment["symbol_definition"].call(parent_environment,symname)
                                        }
                                    }
                                }
                            } else if (check_true ((namespace_identity['0']===namespace))) {
                                return Environment.definitions[symname]
                            } else if (check_true (parent_environment)) {
                                return await parent_environment["symbol_definition"].call(parent_environment,namespace_identity['1'],namespace_identity['0'])
                            } else if (check_true ((namespace_identity.length===2))) {
                                return await (async function() {
                                    {
                                         let __call_target__=children[namespace_identity['0']], __call_method__="symbol_definition";
                                        return await __call_target__[__call_method__].call(__call_target__,namespace_identity['1'])
                                    } 
                                })()
                            } else {
                                return undefined
                            }
                        } ()
                    }],["compile",async function(json_expression,opts) {
                        let out;
                        opts=await add({
                            env:Environment
                        },opts,{
                            meta:await (async function(){
                                if (check_true ((opts&& opts.meta))){
                                    return true
                                } else {
                                    return false
                                }
                            })()
                        });
                        out=null;
                        out=await (async function(){
                             return await compiler(json_expression,opts) 
                        })();
                        return await async function(){
                            if (check_true (((out instanceof Array)&& out['0'].ctype&& (out['0'].ctype==="FAIL")))) {
                                return out
                            } else if (check_true (opts.meta)) {
                                return out
                            } else {
                                return out['1']
                            }
                        } ()
                    }],["env_log",async function(...args) {
                            return await (async function(){
                                let __target_arg__189=[].concat(await conj(await (async function(){
                                    let __array_op_rval__190=style;
                                     if (__array_op_rval__190 instanceof Function){
                                        return await __array_op_rval__190() 
                                    } else {
                                        return [__array_op_rval__190]
                                    }
                                })(),args));
                                if(!__target_arg__189 instanceof Array){
                                    throw new TypeError("Invalid final argument to apply - an array is required")
                                }let __pre_arg__191=("%c"+ await (async function(){
                                    if (check_true (opts.prefix)){
                                        return opts.prefix
                                    } else {
                                        return (args).shift()
                                    }
                                })());
                                __target_arg__189.unshift(__pre_arg__191);
                                return (console.log).apply(this,__target_arg__189)
                            })()
                        }],["evaluate_local",async function(expression,ctx,opts) {
                        let compiled;
                        let error_data;
                        let requires;
                        let result;
                        opts=(opts|| new Object());
                        compiled=null;
                        error_data=null;
                        requires=null;
                        result=null;
                        if (check_true (opts.compiled_source)){
                            compiled=expression
                        } else {
                            try {
                                compiled=await (async function(){
                                     return await compiler(await (async function(){
                                        if (check_true (opts.json_in)){
                                            return expression
                                        } else {
                                            return await Environment["read_lisp"].call(Environment,expression,{
                                                source_name:opts.source_name
                                            })
                                        }
                                    })(),{
                                        env:Environment,ctx:ctx,formatted_output:true,source_name:opts.source_name,throw_on_error:opts.throw_on_error,error_report:(opts.error_report|| null),quiet_mode:(opts.quiet_mode|| false)
                                    }) 
                                })()
                            } catch (__exception__236) {
                                if (__exception__236 instanceof Error) {
                                    let e=__exception__236;
                                    {
                                        {
                                            if (check_true (opts.throw_on_error)){
                                                {
                                                    throw e;
                                                    
                                                }
                                            };
                                            if (check_true ((e instanceof LispSyntaxError))){
                                                {
                                                    await async function(){
                                                        e["message"]=await JSON.parse(e.message);
                                                        return e;
                                                        
                                                    }()
                                                }
                                            };
                                            await async function(){
                                                if (check_true ((e instanceof LispSyntaxError))) {
                                                    return error_data=await add({
                                                        error:"LispSyntaxError"
                                                    },e.message)
                                                } else {
                                                    error_data={
                                                        error:await sub_type(e),message:e.message,stack:e.stack,form:await (async function(){
                                                             return await async function(){
                                                                if (check_true (((expression instanceof String || typeof expression==='string')&& (expression.length>100)))) {
                                                                    return await add(await expression["substr"].call(expression,0,100),"...")
                                                                } else {
                                                                    return await (await get_global("as_lisp"))(expression)
                                                                }
                                                            } () 
                                                        })(),parent_forms:[],source_name:opts.source_name,invalid:true
                                                    }
                                                }
                                            } ();
                                            if (check_true (opts.error_report)){
                                                await (async function(){
                                                    let __array_op_rval__238=opts.error_report;
                                                     if (__array_op_rval__238 instanceof Function){
                                                        return await __array_op_rval__238(error_data) 
                                                    } else {
                                                        return [__array_op_rval__238,error_data]
                                                    }
                                                })()
                                            } else {
                                                await console.error("Compilation Error: ",error_data)
                                            };
                                            compiled=await (async function(){
                                                 return [{
                                                    error:true
                                                },null] 
                                            })()
                                        }
                                    }
                                }
                            }
                        };
                        return await async function(){
                            if (check_true ((null==compiled))) {
                                return null
                            } else if (check_true ((compiled['0'].ctype==="FAIL"))) {
                                {
                                    if (check_true (opts.error_report)){
                                        {
                                            await (async function(){
                                                let __array_op_rval__239=opts.error_report;
                                                 if (__array_op_rval__239 instanceof Function){
                                                    return await __array_op_rval__239(compiled['1']) 
                                                } else {
                                                    return [__array_op_rval__239,compiled['1']]
                                                }
                                            })()
                                        }
                                    };
                                    return await async function(){
                                        if (check_true ((compiled['1'] instanceof Error))) {
                                            throw compiled['1'];
                                            
                                        } else if (check_true ((compiled['1']['0'] instanceof Error))) {
                                            throw compiled['1']['0'];
                                            
                                        } else if (check_true (((compiled['1']['0'] instanceof Object)&& (compiled['1']['0'].error==="SyntaxError")))) {
                                            {
                                                let new_error=new SyntaxError(compiled['1']['0'].message);
                                                ;
                                                await async function(){
                                                    new_error["from"]=compiled['1']['0'];
                                                    return new_error;
                                                    
                                                }();
                                                throw new_error;
                                                
                                            }
                                        } else {
                                            return compiled['1']
                                        }
                                    } ()
                                }
                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))&& parent_environment))) {
                                return await parent_environment["evaluate_local"].call(parent_environment,compiled,ctx,await add(new Object(),opts,{
                                    compiled_source:true
                                }))
                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))))) {
                                if (check_true (children[compiled['0'].namespace])){
                                    return await (async function() {
                                        {
                                             let __call_target__=children[compiled['0'].namespace], __call_method__="evaluate_local";
                                            return await __call_target__[__call_method__].call(__call_target__,compiled,ctx,await add(new Object(),opts,{
                                                compiled_source:true
                                            }))
                                        } 
                                    })()
                                } else {
                                    throw new EvalError(("unknown namespace "+ compiled['0'].namespace+ " assignment"));
                                    
                                }
                            } else {
                                {
                                    if (check_true (opts.on_compilation_complete)){
                                        await (async function(){
                                            let __array_op_rval__241=opts.on_compilation_complete;
                                             if (__array_op_rval__241 instanceof Function){
                                                return await __array_op_rval__241(compiled) 
                                            } else {
                                                return [__array_op_rval__241,compiled]
                                            }
                                        })()
                                    };
                                    try {
                                        if (check_true (((compiled instanceof Array)&& (compiled['0'] instanceof Object)&& compiled['0'].ctype&& await not((compiled['0'].ctype instanceof String || typeof compiled['0'].ctype==='string'))))){
                                            {
                                                await async function(){
                                                    compiled['0']["ctype"]=await subtype(compiled['0'].ctype);
                                                    return compiled['0'];
                                                    
                                                }()
                                            }
                                        };
                                        result=await (async function(){
                                             return await async function(){
                                                if (check_true (compiled.error)) {
                                                    throw new Error((await get_global("indirect_new"))(compiled.error,compiled.message));
                                                    
                                                } else if (check_true ((compiled['0'].ctype&& (await contains_ques_("block",compiled['0'].ctype)|| (compiled['0'].ctype==="assignment")|| (compiled['0'].ctype==="__!NOT_FOUND!__"))))) {
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__244=compiled['0'].has_lisp_globals;
                                                         if (__array_op_rval__244 instanceof Function){
                                                            return await __array_op_rval__244() 
                                                        } else {
                                                            return [__array_op_rval__244]
                                                        }
                                                    })())){
                                                        {
                                                            await async function(){
                                                                compiled[1]=new AsyncFunction("Environment",("{ "+ compiled['1']+ "}"));
                                                                return compiled;
                                                                
                                                            }();
                                                            return await (async function(){
                                                                let __array_op_rval__246=compiled['1'];
                                                                 if (__array_op_rval__246 instanceof Function){
                                                                    return await __array_op_rval__246(Environment) 
                                                                } else {
                                                                    return [__array_op_rval__246,Environment]
                                                                }
                                                            })()
                                                        }
                                                    } else {
                                                        {
                                                            await async function(){
                                                                compiled[1]=new AsyncFunction(("{"+ compiled['1']+ "}"));
                                                                return compiled;
                                                                
                                                            }();
                                                            return await (async function(){
                                                                let __array_op_rval__248=compiled['1'];
                                                                 if (__array_op_rval__248 instanceof Function){
                                                                    return await __array_op_rval__248() 
                                                                } else {
                                                                    return [__array_op_rval__248]
                                                                }
                                                            })()
                                                        }
                                                    }
                                                } else if (check_true ((compiled['0'].ctype&& (("AsyncFunction"===compiled['0'].ctype)|| ("statement"===compiled['0'].ctype)|| ("objliteral"===compiled['0'].ctype))))) {
                                                    {
                                                        if (check_true (await (async function(){
                                                            let __array_op_rval__249=compiled['0'].has_lisp_globals;
                                                             if (__array_op_rval__249 instanceof Function){
                                                                return await __array_op_rval__249() 
                                                            } else {
                                                                return [__array_op_rval__249]
                                                            }
                                                        })())){
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new AsyncFunction("Environment",("{ return "+ compiled['1']+ "} "));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__251=compiled['1'];
                                                                     if (__array_op_rval__251 instanceof Function){
                                                                        return await __array_op_rval__251(Environment) 
                                                                    } else {
                                                                        return [__array_op_rval__251,Environment]
                                                                    }
                                                                })()
                                                            }
                                                        } else {
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new AsyncFunction(("{ return "+ compiled['1']+ "}"));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__253=compiled['1'];
                                                                     if (__array_op_rval__253 instanceof Function){
                                                                        return await __array_op_rval__253() 
                                                                    } else {
                                                                        return [__array_op_rval__253]
                                                                    }
                                                                })()
                                                            }
                                                        }
                                                    }
                                                } else if (check_true ((compiled['0'].ctype&& ("Function"===compiled['0'].ctype)))) {
                                                    {
                                                        if (check_true (await (async function(){
                                                            let __array_op_rval__254=compiled['0'].has_lisp_globals;
                                                             if (__array_op_rval__254 instanceof Function){
                                                                return await __array_op_rval__254() 
                                                            } else {
                                                                return [__array_op_rval__254]
                                                            }
                                                        })())){
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new Function("Environment",("{ return "+ compiled['1']+ "} "));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__256=compiled['1'];
                                                                     if (__array_op_rval__256 instanceof Function){
                                                                        return await __array_op_rval__256(Environment) 
                                                                    } else {
                                                                        return [__array_op_rval__256,Environment]
                                                                    }
                                                                })()
                                                            }
                                                        } else {
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new Function(("{ return "+ compiled['1']+ "}"));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__258=compiled['1'];
                                                                     if (__array_op_rval__258 instanceof Function){
                                                                        return await __array_op_rval__258() 
                                                                    } else {
                                                                        return [__array_op_rval__258]
                                                                    }
                                                                })()
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    return compiled['1']
                                                }
                                            } () 
                                        })()
                                    } catch (__exception__242) {
                                        if (__exception__242 instanceof Error) {
                                            let e=__exception__242;
                                            {
                                                {
                                                    if (check_true ((opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4)))){
                                                        {
                                                            if (check_true (e.details)){
                                                                await env_log("caught error: ",e.details)
                                                            } else {
                                                                await env_log("caught error: ",e.name,e.message,e)
                                                            }
                                                        }
                                                    };
                                                    if (check_true (((await sub_type(e)==="SyntaxError")&& (opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4))))){
                                                        await console.log(compiled['1'])
                                                    };
                                                    if (check_true (opts.error_report)){
                                                        {
                                                            await (async function(){
                                                                let __array_op_rval__259=opts.error_report;
                                                                 if (__array_op_rval__259 instanceof Function){
                                                                    return await __array_op_rval__259(await (async function(){
                                                                        if (check_true (e.details)){
                                                                            return e.details
                                                                        } else {
                                                                            return {
                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack
                                                                            }
                                                                        }
                                                                    })()) 
                                                                } else {
                                                                    return [__array_op_rval__259,await (async function(){
                                                                        if (check_true (e.details)){
                                                                            return e.details
                                                                        } else {
                                                                            return {
                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack
                                                                            }
                                                                        }
                                                                    })()]
                                                                }
                                                            })()
                                                        }
                                                    };
                                                    result=e;
                                                    if (check_true ((await not(opts.catch_errors)|| (ctx&& ctx.in_try)))){
                                                        {
                                                            throw result;
                                                            
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    };
                                    return result
                                }
                            }
                        } ()
                    }],["evaluate",async function(expression,ctx,opts) {
                        return await async function(){
                            if (check_true ((namespace===active_namespace))) {
                                return await evaluate_local(expression,ctx,opts)
                            } else if (check_true ((namespace==="core"))) {
                                return await (async function() {
                                    {
                                         let __call_target__=children[active_namespace], __call_method__="evaluate";
                                        return await __call_target__[__call_method__].call(__call_target__,expression,ctx,opts)
                                    } 
                                })()
                            }
                        } ()
                    }],["eval_struct",async function(lisp_struct,ctx,opts) {
                        let rval;
                        rval=null;
                        if (check_true (lisp_struct instanceof Function)){
                            rval=await (async function(){
                                let __array_op_rval__264=lisp_struct;
                                 if (__array_op_rval__264 instanceof Function){
                                    return await __array_op_rval__264() 
                                } else {
                                    return [__array_op_rval__264]
                                }
                            })()
                        } else {
                            rval=await (async function(){
                                 return await evaluate(lisp_struct,ctx,await add({
                                    json_in:true
                                },(opts|| new Object()))) 
                            })()
                        };
                        return rval
                    }],["set_compiler",async function(compiler_function) {
                        let new_ops;
                        new_ops=await (async function(){
                            let __array_op_rval__268=compiler_function;
                             if (__array_op_rval__268 instanceof Function){
                                return await __array_op_rval__268([],{
                                    special_operators:true,env:Environment
                                }) 
                            } else {
                                return [__array_op_rval__268,[],{
                                    special_operators:true,env:Environment
                                }]
                            }
                        })();
                        if (check_true (await is_set_ques_(new_ops))){
                            {
                                compiler_operators=new_ops;
                                compiler=compiler_function;
                                await async function(){
                                    Environment.global_ctx.scope["compiler"]=compiler;
                                    return Environment.global_ctx.scope;
                                    
                                }();
                                await (await get_global("register_feature"))("compiler")
                            }
                        } else {
                            {
                                await console.error("Invalid compiler function: invalid operators returned. Not installing.");
                                throw new EvalError("Invalid compiler function");
                                
                            }
                        };
                        return compiler
                    }],["clone",async function(val) {
                            if (check_true ((val===Environment))){
                                return Environment
                            } else {
                                return await clone(val,0,Environment)
                            }
                        }],["eval",async function(expression) {
                        return await (async function(){
                            let __array_op_rval__141=expression;
                             if (__array_op_rval__141 instanceof Function){
                                return await __array_op_rval__141() 
                            } else {
                                return [__array_op_rval__141]
                            }
                        })()
                    }],["add_escape_encoding",async function(text) {        if (check_true ((text instanceof String || typeof text==='string'))){            let chars;            let acc;            chars=(text).split("");            acc=[];            await (async function() {                let __for_body__3=async function(c) {                     return  await async function(){                        if (check_true( ((await c["charCodeAt"].call(c,0)===34)))) {                            (acc).push(await String.fromCharCode(92));                             return  (acc).push(c)                        } else  {                             return (acc).push(c)                        }                    } ()                };                let __array__4=[],__elements__2=chars;                let __BREAK__FLAG__=false;                for(let __iter__1 in __elements__2) {                    __array__4.push(await __for_body__3(__elements__2[__iter__1]));                    if(__BREAK__FLAG__) {                         __array__4.pop();                        break;                                            }                }return __array__4;                             })();             return  (acc).join("")        } else {              return text        }    }],["get_outside_global",function get_outside_global(refname) {  try {    let tfn = new Function("{ if (typeof " + refname + " === 'undefined') { return undefined } else { return "+refname+" } }");    return tfn();  } catch (ex) {    return undefined;  }}],["as_lisp",lisp_writer],["lisp_writer",lisp_writer],["clone_to_new",async function(options) {
                        let new_env;
                        let my_children;
                        let my_children_declarations;
                        new_env=null;
                        my_children=null;
                        my_children_declarations=null;
                        await env_log(namespace,"cloning: # children: ",await length(children));
                        new_env=await (async function(){
                             return await dlisp_env({
                                env:await (async function(){
                                     return await clone(Environment) 
                                })(),children:await (async function(){
                                     return await clone(children) 
                                })(),children_declarations:await (async function(){
                                     return await clone(children_declarations) 
                                })()
                            }) 
                        })();
                        await env_log(namespace,"constructed: ",await new_env["id"]());
                        return new_env
                    }],["save_env",async function(options) {
                        let new_env;
                        let my_children;
                        let env_constructor;
                        let dcomps;
                        let version_tag;
                        let build_time;
                        let build_headers;
                        let child_env;
                        let want_buffer;
                        let comp_buffer;
                        let sorted_dependencies;
                        let child_export_order;
                        let preserve_imports;
                        let include_source;
                        let exports;
                        let src;
                        let target_insertion_path;
                        let output_path;
                        new_env=null;
                        my_children=null;
                        env_constructor=null;
                        dcomps=await (async function(){
                             return await (await get_global("date_components"))(new Date()) 
                        })();
                        options=(options|| new Object());
                        version_tag=await (async function(){
                            if (check_true (await not(await blank_ques_(opts.version_tag)))){
                                return opts.version_tag
                            } else {
                                return (await (async function(){
                                    let __array_op_rval__322=dcomps.year;
                                     if (__array_op_rval__322 instanceof Function){
                                        return await __array_op_rval__322(dcomps.month,dcomps.day,dcomps.hour,dcomps.minute) 
                                    } else {
                                        return [__array_op_rval__322,dcomps.month,dcomps.day,dcomps.hour,dcomps.minute]
                                    }
                                })()).join(".")
                            }
                        })();
                        build_time=await (async function(){
                             return await (await get_global("formatted_date"))(new Date()) 
                        })();
                        build_headers=[];
                        child_env=null;
                        want_buffer=(options.want_buffer|| false);
                        comp_buffer=null;
                        sorted_dependencies=await (async function(){
                             return await (await get_global("sort_dependencies"))() 
                        })();
                        child_export_order=null;
                        preserve_imports=await (async function(){
                            if (check_true ((options&& (options.preserve_imports===false)))){
                                return false
                            } else {
                                return true
                            }
                        })();
                        include_source=false;
                        exports=[];
                        src=await (async function(){
                            if (check_true (await Environment["get_global"].call(Environment,"*env_skeleton*",null))){
                                return await clone(await Environment["get_global"].call(Environment,"*env_skeleton*"))
                            } else {
                                return await (await get_global("reader"))(await (async function(){
                                     return await (await get_global("read_text_file"))("./src/environment.lisp") 
                                })())
                            }
                        })();
                        target_insertion_path=null;
                        output_path=null;
                        if (check_true (Environment.global_ctx.scope["*env_skeleton*"])){
                            {
                                await (await get_global("register_feature"))("*env_skeleton*")
                            }
                        };
                        target_insertion_path=await first(await (async function(){
                             return await (await get_global("findpaths"))(await (async function(){
                                 return "=:included_globals" 
                            })(),src) 
                        })());
                        if (check_true (await not((target_insertion_path instanceof Array)))){
                            throw new EvalError("Unable to find the first included_globals symbol");
                            
                        };
                        target_insertion_path=await conj(await chop(target_insertion_path),[2]);
                        if (check_true (options.include_source)){
                            {
                                include_source=true
                            }
                        };
                        await env_log(namespace,"cloning: # children: ",await length(children));
                        await env_log(namespace,"preserve_imports: ",preserve_imports);
                        exports=await export_symbol_set(await (async function(){
                            if (check_true (options.do_not_include)){
                                return {
                                    do_not_include:options.do_not_include
                                }
                            }
                        })());
                        child_export_order=await (async function(){
                            let __collector;
                            let __result;
                            let __action;
                            __collector=[];
                            __result=null;
                            __action=async function(cname) {
                                if (check_true (await not((cname==="core")))){
                                    {
                                        return await (async function(){
                                            let __array_op_rval__323=cname;
                                             if (__array_op_rval__323 instanceof Function){
                                                return await __array_op_rval__323(children[cname]) 
                                            } else {
                                                return [__array_op_rval__323,children[cname]]
                                            }
                                        })()
                                    }
                                }
                            };
                            ;
                            await (async function() {
                                let __for_body__326=async function(__item) {
                                    __result=await __action(__item);
                                    if (check_true (__result)){
                                        return (__collector).push(__result)
                                    }
                                };
                                let __array__327=[],__elements__325=sorted_dependencies.namespaces;
                                let __BREAK__FLAG__=false;
                                for(let __iter__324 in __elements__325) {
                                    __array__327.push(await __for_body__326(__elements__325[__iter__324]));
                                    if(__BREAK__FLAG__) {
                                         __array__327.pop();
                                        break;
                                        
                                    }
                                }return __array__327;
                                 
                            })();
                            return __collector
                        })();
                        await console.log("save_env: child_export_order: ",await (async function(){
                             return await (await get_global("each"))(child_export_order,0) 
                        })());
                        my_children=await to_object(await (async function(){
                            let __collector;
                            let __result;
                            let __action;
                            __collector=[];
                            __result=null;
                            __action=async function(child) {
                                if (check_true (await resolve_path(await (async function(){
                                    let __array_op_rval__328=child['0'];
                                     if (__array_op_rval__328 instanceof Function){
                                        return await __array_op_rval__328("serialize_with_image") 
                                    } else {
                                        return [__array_op_rval__328,"serialize_with_image"]
                                    }
                                })(),children_declarations))){
                                    {
                                        child_env=await child['1']["compile"].call(child['1'],await child['1']["export_symbol_set"].call(child['1'],await add(new Object(),{
                                            no_compiler:true
                                        })),{
                                            throw_on_error:true
                                        });
                                        return await (async function(){
                                            let __array_op_rval__329=child['0'];
                                             if (__array_op_rval__329 instanceof Function){
                                                return await __array_op_rval__329(await (async function(){
                                                     return [["=:quotel",child['1'].definitions],await (async function(){
                                                         return ["=:javascript",child_env] 
                                                    })()] 
                                                })()) 
                                            } else {
                                                return [__array_op_rval__329,await (async function(){
                                                     return [["=:quotel",child['1'].definitions],await (async function(){
                                                         return ["=:javascript",child_env] 
                                                    })()] 
                                                })()]
                                            }
                                        })()
                                    }
                                }
                            };
                            ;
                            await (async function() {
                                let __for_body__332=async function(__item) {
                                    __result=await __action(__item);
                                    if (check_true (__result)){
                                        return (__collector).push(__result)
                                    }
                                };
                                let __array__333=[],__elements__331=child_export_order;
                                let __BREAK__FLAG__=false;
                                for(let __iter__330 in __elements__331) {
                                    __array__333.push(await __for_body__332(__elements__331[__iter__330]));
                                    if(__BREAK__FLAG__) {
                                         __array__333.pop();
                                        break;
                                        
                                    }
                                }return __array__333;
                                 
                            })();
                            return __collector
                        })());
                        await (await get_global("set_path"))(target_insertion_path,src,await (async function(){
                             return ["=:fn",[],await to_object(await (async function(){
                                 return [["definitions",await (async function(){
                                     return ["=:quote",await (async function(){
                                        if (check_true (options.do_not_include)){
                                            return await to_object(await (async function(){
                                                let __collector;
                                                let __result;
                                                let __action;
                                                __collector=[];
                                                __result=null;
                                                __action=async function(defset) {
                                                    if (check_true (await not(await contains_ques_(defset['0'],options.do_not_include)))){
                                                        return await (async function(){
                                                            let __array_op_rval__334=defset['0'];
                                                             if (__array_op_rval__334 instanceof Function){
                                                                return await __array_op_rval__334(defset['1']) 
                                                            } else {
                                                                return [__array_op_rval__334,defset['1']]
                                                            }
                                                        })()
                                                    }
                                                };
                                                ;
                                                await (async function() {
                                                    let __for_body__337=async function(__item) {
                                                        __result=await __action(__item);
                                                        if (check_true (__result)){
                                                            return (__collector).push(__result)
                                                        }
                                                    };
                                                    let __array__338=[],__elements__336=await pairs(Environment.definitions);
                                                    let __BREAK__FLAG__=false;
                                                    for(let __iter__335 in __elements__336) {
                                                        __array__338.push(await __for_body__337(__elements__336[__iter__335]));
                                                        if(__BREAK__FLAG__) {
                                                             __array__338.pop();
                                                            break;
                                                            
                                                        }
                                                    }return __array__338;
                                                     
                                                })();
                                                return __collector
                                            })())
                                        } else {
                                            return await clone(Environment.definitions)
                                        }
                                    })()] 
                                })()],["declarations",await (async function(){
                                     return await clone(Environment.declarations) 
                                })()],["config",await (async function(){
                                    let exp_conf;
                                    exp_conf=await (async function(){
                                         return await clone(Environment.global_ctx.scope["*env_config*"]) 
                                    })();
                                    if (check_true (await not(preserve_imports))){
                                        {
                                            await async function(){
                                                exp_conf["imports"]=new Object();
                                                return exp_conf;
                                                
                                            }()
                                        }
                                    };
                                    if (check_true (options.features)){
                                        {
                                            await async function(){
                                                exp_conf["features"]=options.features;
                                                return exp_conf;
                                                
                                            }()
                                        }
                                    };
                                    return exp_conf
                                })()],["imports",await (async function(){
                                    if (check_true (preserve_imports)){
                                        return await to_object(await (async function() {
                                            let __for_body__343=async function(imp_source) {
                                                return await (async function(){
                                                    let __array_op_rval__345=imp_source.symbol;
                                                     if (__array_op_rval__345 instanceof Function){
                                                        return await __array_op_rval__345({
                                                            initializer:await (async function(){
                                                                 return ["=:javascript","new function () { return ",imp_source.symbol," }"] 
                                                            })(),symbol:imp_source.symbol,namespace:imp_source.namespace
                                                        }) 
                                                    } else {
                                                        return [__array_op_rval__345,{
                                                            initializer:await (async function(){
                                                                 return ["=:javascript","new function () { return ",imp_source.symbol," }"] 
                                                            })(),symbol:imp_source.symbol,namespace:imp_source.namespace
                                                        }]
                                                    }
                                                })()
                                            };
                                            let __array__344=[],__elements__342=await values((await resolve_path(["*env_config*","imports"],Environment.global_ctx.scope)|| new Object()));
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__341 in __elements__342) {
                                                __array__344.push(await __for_body__343(__elements__342[__iter__341]));
                                                if(__BREAK__FLAG__) {
                                                     __array__344.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__344;
                                             
                                        })())
                                    } else {
                                        return new Object()
                                    }
                                })()],["symbols",await (async function(){
                                     return ["=:javascript",await compile(await to_object(exports),{
                                        throw_on_error:true
                                    })] 
                                })()],["children_declarations",await (async function(){
                                     return ["=:fn",[],await clone(children_declarations)] 
                                })()],["child_load_order",await (async function(){
                                     return await (await get_global("each"))(child_export_order,0) 
                                })()],["children",my_children]] 
                            })())] 
                        })());
                        output_path=await (async function(){
                            if (check_true (options.want_buffer)){
                                return null
                            } else {
                                return (options.save_as|| await resolve_path(["*env_config*","export","save_path"],Environment.global_ctx.scope))
                            }
                        })();
                        if (check_true (output_path instanceof Function)){
                            output_path=await (async function(){
                                let __array_op_rval__346=output_path;
                                 if (__array_op_rval__346 instanceof Function){
                                    return await __array_op_rval__346() 
                                } else {
                                    return [__array_op_rval__346]
                                }
                            })()
                        };
                        if (check_true ((await not((output_path instanceof String || typeof output_path==='string'))&& output_path))){
                            throw new EvalError("invalid name for target for saving the environment.  Must be a string or function");
                            
                        };
                        return await async function(){
                            if (check_true ((want_buffer|| (output_path&& await ends_with_ques_(".js",output_path))))) {
                                {
                                    (build_headers).push(("// Build Time: "+ build_time));
                                    (build_headers).push(("// Version: "+ version_tag));
                                    (build_headers).push(("export const DLISP_ENV_VERSION='"+ version_tag+ "';"));
                                    await env_log("saving to: ",output_path);
                                    return await (await get_global("compile_buffer"))(src,"init_dlisp",{
                                        namespace:namespace,toplevel:true,include_boilerplate:false,verbose:false,bundle:true,want_buffer:want_buffer,imports:await (async function(){
                                            if (check_true (preserve_imports)){
                                                return await resolve_path(["*env_config*","imports"],Environment.global_ctx.scope)
                                            }
                                        })(),js_headers:await (async function(){
                                             return [await (await get_global("show"))(check_true),await (async function(){
                                                 return await (await get_global("show"))(get_next_environment_id) 
                                            })(),await (async function(){
                                                 return await (await get_global("show"))(get_outside_global) 
                                            })(),await (async function(){
                                                 return await (await get_global("show"))(subtype) 
                                            })(),await (async function(){
                                                 return await (await get_global("show"))(lisp_writer) 
                                            })(),await (async function(){
                                                 return await (await get_global("show"))(clone) 
                                            })(),await (async function(){
                                                 return await (await get_global("show"))(LispSyntaxError) 
                                            })()] 
                                        })(),bundle_options:{
                                            default_namespace:await resolve_path(["*env_config*","export","default_namespace"],Environment.global_ctx.scope)
                                        },output_file:output_path,include_source:(options.include_source|| await resolve_path(["*env_config*","export","include_source"],Environment.global_ctx.scope)),build_headers:build_headers
                                    })
                                }
                            } else if (check_true ((output_path&& await ends_with_ques_(".lisp",output_path)))) {
                                return await (await get_global("write_text_file"))(output_path,await JSON.stringify(src,null,4))
                            } else {
                                return src
                            }
                        } ()
                    }],["null",null]]] 
    })()
}
}
};
;
let imps=null;
;
let rehydrated_children=false;
;
if (check_true ((included_globals&& (namespace==="core")))){
    {
        included_globals=await included_globals();
        if (check_true (await resolve_path(["symbols","compiler"],included_globals))){
            {
                await async function(){
                    Environment.global_ctx.scope["compiler"]=await resolve_path(["symbols","compiler"],included_globals);
                    return Environment.global_ctx.scope;
                    
                }();
                compiler=Environment.global_ctx.scope.compiler
            }
        };
        if (check_true ((included_globals["config"] instanceof Object))){
            {
                await async function(){
                    Environment.global_ctx.scope["*env_config*"]=included_globals.config;
                    return Environment.global_ctx.scope;
                    
                }()
            }
        };
        if (check_true ((included_globals["imports"] instanceof Object))){
            {
                imps=included_globals["imports"];
                if (check_true (imps)){
                    {
                        await (async function() {
                            let __for_body__288=async function(imp_source) {
                                return await async function(){
                                    if (check_true ((imp_source.namespace===namespace))) {
                                        {
                                            return await async function(){
                                                Environment.global_ctx.scope[imp_source.symbol]=imp_source.initializer;
                                                return Environment.global_ctx.scope;
                                                
                                            }()
                                        }
                                    }
                                } ()
                            };
                            let __array__289=[],__elements__287=await values(imps);
                            let __BREAK__FLAG__=false;
                            for(let __iter__286 in __elements__287) {
                                __array__289.push(await __for_body__288(__elements__287[__iter__286]));
                                if(__BREAK__FLAG__) {
                                     __array__289.pop();
                                    break;
                                    
                                }
                            }return __array__289;
                             
                        })()
                    }
                }
            }
        };
        if (check_true ((included_globals["symbols"] instanceof Object))){
            {
                await (async function() {
                    let __for_body__293=async function(symset) {
                        if (check_true ((null==Environment.global_ctx.scope[symset['0']]))){
                            {
                                return await async function(){
                                    Environment.global_ctx.scope[symset['0']]=symset['1'];
                                    return Environment.global_ctx.scope;
                                    
                                }()
                            }
                        }
                    };
                    let __array__294=[],__elements__292=await pairs(included_globals.symbols);
                    let __BREAK__FLAG__=false;
                    for(let __iter__291 in __elements__292) {
                        __array__294.push(await __for_body__293(__elements__292[__iter__291]));
                        if(__BREAK__FLAG__) {
                             __array__294.pop();
                            break;
                            
                        }
                    }return __array__294;
                     
                })()
            }
        };
        if (check_true ((included_globals["definitions"] instanceof Object))){
            {
                await (async function() {
                    let __for_body__298=async function(symset) {
                        if (check_true ((null==Environment.definitions[symset['0']]))){
                            {
                                return await async function(){
                                    Environment.definitions[symset['0']]=symset['1'];
                                    return Environment.definitions;
                                    
                                }()
                            }
                        }
                    };
                    let __array__299=[],__elements__297=await pairs(included_globals.definitions);
                    let __BREAK__FLAG__=false;
                    for(let __iter__296 in __elements__297) {
                        __array__299.push(await __for_body__298(__elements__297[__iter__296]));
                        if(__BREAK__FLAG__) {
                             __array__299.pop();
                            break;
                            
                        }
                    }return __array__299;
                     
                })()
            }
        };
        if (check_true ((included_globals["declarations"] instanceof Object))){
            {
                await (async function() {
                    let __for_body__303=async function(symset) {
                        if (check_true ((null==Environment.declarations[symset['0']]))){
                            {
                                return await async function(){
                                    Environment.declarations[symset['0']]=await (async function(){
                                         return "=:symset.1" 
                                    })();
                                    return Environment.declarations;
                                    
                                }()
                            }
                        }
                    };
                    let __array__304=[],__elements__302=await pairs(included_globals.declarations);
                    let __BREAK__FLAG__=false;
                    for(let __iter__301 in __elements__302) {
                        __array__304.push(await __for_body__303(__elements__302[__iter__301]));
                        if(__BREAK__FLAG__) {
                             __array__304.pop();
                            break;
                            
                        }
                    }return __array__304;
                     
                })()
            }
        };
        if (check_true (Environment.global_ctx.scope["compiler"])){
            {
                await set_compiler(Environment.global_ctx.scope["compiler"])
            }
        };
        if (check_true ((included_globals["children"] instanceof Object))){
            {
                rehydrated_children=true;
                await (async function() {
                    let __for_body__308=async function(childset) {
                        return await (await get_global("create_namespace"))(childset['0'],await (async function(){
                            if (check_true (included_globals.children_declarations[childset['0']])){
                                return included_globals.children_declarations[childset['0']]
                            } else {
                                return new Object()
                            }
                        })(),true)
                    };
                    let __array__309=[],__elements__307=await pairs(included_globals.children);
                    let __BREAK__FLAG__=false;
                    for(let __iter__306 in __elements__307) {
                        __array__309.push(await __for_body__308(__elements__307[__iter__306]));
                        if(__BREAK__FLAG__) {
                             __array__309.pop();
                            break;
                            
                        }
                    }return __array__309;
                     
                })()
            }
        }
    }
};
let clone_to_new=async function(options) {
    let new_env;
    let my_children;
    let my_children_declarations;
    new_env=null;
    my_children=null;
    my_children_declarations=null;
    await env_log(namespace,"cloning: # children: ",await length(children));
    new_env=await (async function(){
         return await dlisp_env({
            env:await (async function(){
                 return await clone(Environment) 
            })(),children:await (async function(){
                 return await clone(children) 
            })(),children_declarations:await (async function(){
                 return await clone(children_declarations) 
            })()
        }) 
    })();
    await env_log(namespace,"constructed: ",await new_env["id"]());
    return new_env
};
;
let export_symbol_set=async function(options) {
    let __collector;
    let __result;
    let __action;
    __collector=[];
    __result=null;
    __action=async function(symset) {
        return await async function(){
            if (check_true ((options&& options.no_compiler&& (symset['0']==="compiler")))) {
                return null
            } else if (check_true (await starts_with_ques_("$",symset['0']))) {
                return null
            } else if (check_true ((await resolve_path(await (async function(){
                let __array_op_rval__310=symset['0'];
                 if (__array_op_rval__310 instanceof Function){
                    return await __array_op_rval__310("serialize_with_image") 
                } else {
                    return [__array_op_rval__310,"serialize_with_image"]
                }
            })(),Environment.definitions)===false))) {
                return null
            } else if (check_true ((options&& options.do_not_include&& await contains_ques_(symset['0'],options.do_not_include)))) {
                return null
            } else if (check_true ((symset['0']==="*env_skeleton*"))) {
                return await (async function(){
                    let __array_op_rval__311=symset['0'];
                     if (__array_op_rval__311 instanceof Function){
                        return await __array_op_rval__311(await (async function(){
                             return ["=:quotel",Environment.global_ctx.scope["*env_skeleton*"]] 
                        })()) 
                    } else {
                        return [__array_op_rval__311,await (async function(){
                             return ["=:quotel",Environment.global_ctx.scope["*env_skeleton*"]] 
                        })()]
                    }
                })()
            } else if (check_true (await resolve_path(await (async function(){
                let __array_op_rval__312=symset['0'];
                 if (__array_op_rval__312 instanceof Function){
                    return await __array_op_rval__312("initializer") 
                } else {
                    return [__array_op_rval__312,"initializer"]
                }
            })(),Environment.definitions))) {
                {
                    return await (async function(){
                        let __array_op_rval__313=symset['0'];
                         if (__array_op_rval__313 instanceof Function){
                            return await __array_op_rval__313(await (async function(){
                                 return ["=:quotel","placeholder"] 
                            })()) 
                        } else {
                            return [__array_op_rval__313,await (async function(){
                                 return ["=:quotel","placeholder"] 
                            })()]
                        }
                    })()
                }
            } else if (check_true ((null===symset['1']))) {
                return await (async function(){
                    let __array_op_rval__314=symset['0'];
                     if (__array_op_rval__314 instanceof Function){
                        return await __array_op_rval__314(await (async function(){
                             return "=:nil" 
                        })()) 
                    } else {
                        return [__array_op_rval__314,await (async function(){
                             return "=:nil" 
                        })()]
                    }
                })()
            } else if (check_true ((undefined===symset['1']))) {
                return await (async function(){
                    let __array_op_rval__315=symset['0'];
                     if (__array_op_rval__315 instanceof Function){
                        return await __array_op_rval__315(await (async function(){
                             return "=:undefined" 
                        })()) 
                    } else {
                        return [__array_op_rval__315,await (async function(){
                             return "=:undefined" 
                        })()]
                    }
                })()
            } else if (check_true ((symset['1'] instanceof String || typeof symset['1']==='string'))) {
                {
                    return await (async function(){
                        let __array_op_rval__316=symset['0'];
                         if (__array_op_rval__316 instanceof Function){
                            return await __array_op_rval__316(await (async function(){
                                 return await (await get_global("env_encode_string"))(symset['1']) 
                            })()) 
                        } else {
                            return [__array_op_rval__316,await (async function(){
                                 return await (await get_global("env_encode_string"))(symset['1']) 
                            })()]
                        }
                    })()
                }
            } else {
                return await (async function(){
                    let __array_op_rval__317=symset['0'];
                     if (__array_op_rval__317 instanceof Function){
                        return await __array_op_rval__317(symset['1']) 
                    } else {
                        return [__array_op_rval__317,symset['1']]
                    }
                })()
            }
        } ()
    };
    ;
    await (async function() {
        let __for_body__320=async function(__item) {
            __result=await __action(__item);
            if (check_true (__result)){
                return (__collector).push(__result)
            }
        };
        let __array__321=[],__elements__319=await pairs(await (async function(){
             return await clone(Environment.global_ctx.scope) 
        })());
        let __BREAK__FLAG__=false;
        for(let __iter__318 in __elements__319) {
            __array__321.push(await __for_body__320(__elements__319[__iter__318]));
            if(__BREAK__FLAG__) {
                 __array__321.pop();
                break;
                
            }
        }return __array__321;
         
    })();
    return __collector
};
;
let save_env=async function(options) {
    let new_env;
    let my_children;
    let env_constructor;
    let dcomps;
    let version_tag;
    let build_time;
    let build_headers;
    let child_env;
    let want_buffer;
    let comp_buffer;
    let sorted_dependencies;
    let child_export_order;
    let preserve_imports;
    let include_source;
    let exports;
    let src;
    let target_insertion_path;
    let output_path;
    new_env=null;
    my_children=null;
    env_constructor=null;
    dcomps=await (async function(){
         return await (await get_global("date_components"))(new Date()) 
    })();
    options=(options|| new Object());
    version_tag=await (async function(){
        if (check_true (await not(await blank_ques_(opts.version_tag)))){
            return opts.version_tag
        } else {
            return (await (async function(){
                let __array_op_rval__322=dcomps.year;
                 if (__array_op_rval__322 instanceof Function){
                    return await __array_op_rval__322(dcomps.month,dcomps.day,dcomps.hour,dcomps.minute) 
                } else {
                    return [__array_op_rval__322,dcomps.month,dcomps.day,dcomps.hour,dcomps.minute]
                }
            })()).join(".")
        }
    })();
    build_time=await (async function(){
         return await (await get_global("formatted_date"))(new Date()) 
    })();
    build_headers=[];
    child_env=null;
    want_buffer=(options.want_buffer|| false);
    comp_buffer=null;
    sorted_dependencies=await (async function(){
         return await (await get_global("sort_dependencies"))() 
    })();
    child_export_order=null;
    preserve_imports=await (async function(){
        if (check_true ((options&& (options.preserve_imports===false)))){
            return false
        } else {
            return true
        }
    })();
    include_source=false;
    exports=[];
    src=await (async function(){
        if (check_true (await Environment["get_global"].call(Environment,"*env_skeleton*",null))){
            return await clone(await Environment["get_global"].call(Environment,"*env_skeleton*"))
        } else {
            return await (await get_global("reader"))(await (async function(){
                 return await (await get_global("read_text_file"))("./src/environment.lisp") 
            })())
        }
    })();
    target_insertion_path=null;
    output_path=null;
    if (check_true (Environment.global_ctx.scope["*env_skeleton*"])){
        {
            await (await get_global("register_feature"))("*env_skeleton*")
        }
    };
    target_insertion_path=await first(await (async function(){
         return await (await get_global("findpaths"))(await (async function(){
             return "=:included_globals" 
        })(),src) 
    })());
    if (check_true (await not((target_insertion_path instanceof Array)))){
        throw new EvalError("Unable to find the first included_globals symbol");
        
    };
    target_insertion_path=await conj(await chop(target_insertion_path),[2]);
    if (check_true (options.include_source)){
        {
            include_source=true
        }
    };
    await env_log(namespace,"cloning: # children: ",await length(children));
    await env_log(namespace,"preserve_imports: ",preserve_imports);
    exports=await export_symbol_set(await (async function(){
        if (check_true (options.do_not_include)){
            return {
                do_not_include:options.do_not_include
            }
        }
    })());
    child_export_order=await (async function(){
        let __collector;
        let __result;
        let __action;
        __collector=[];
        __result=null;
        __action=async function(cname) {
            if (check_true (await not((cname==="core")))){
                {
                    return await (async function(){
                        let __array_op_rval__323=cname;
                         if (__array_op_rval__323 instanceof Function){
                            return await __array_op_rval__323(children[cname]) 
                        } else {
                            return [__array_op_rval__323,children[cname]]
                        }
                    })()
                }
            }
        };
        ;
        await (async function() {
            let __for_body__326=async function(__item) {
                __result=await __action(__item);
                if (check_true (__result)){
                    return (__collector).push(__result)
                }
            };
            let __array__327=[],__elements__325=sorted_dependencies.namespaces;
            let __BREAK__FLAG__=false;
            for(let __iter__324 in __elements__325) {
                __array__327.push(await __for_body__326(__elements__325[__iter__324]));
                if(__BREAK__FLAG__) {
                     __array__327.pop();
                    break;
                    
                }
            }return __array__327;
             
        })();
        return __collector
    })();
    await console.log("save_env: child_export_order: ",await (async function(){
         return await (await get_global("each"))(child_export_order,0) 
    })());
    my_children=await to_object(await (async function(){
        let __collector;
        let __result;
        let __action;
        __collector=[];
        __result=null;
        __action=async function(child) {
            if (check_true (await resolve_path(await (async function(){
                let __array_op_rval__328=child['0'];
                 if (__array_op_rval__328 instanceof Function){
                    return await __array_op_rval__328("serialize_with_image") 
                } else {
                    return [__array_op_rval__328,"serialize_with_image"]
                }
            })(),children_declarations))){
                {
                    child_env=await child['1']["compile"].call(child['1'],await child['1']["export_symbol_set"].call(child['1'],await add(new Object(),{
                        no_compiler:true
                    })),{
                        throw_on_error:true
                    });
                    return await (async function(){
                        let __array_op_rval__329=child['0'];
                         if (__array_op_rval__329 instanceof Function){
                            return await __array_op_rval__329(await (async function(){
                                 return [["=:quotel",child['1'].definitions],await (async function(){
                                     return ["=:javascript",child_env] 
                                })()] 
                            })()) 
                        } else {
                            return [__array_op_rval__329,await (async function(){
                                 return [["=:quotel",child['1'].definitions],await (async function(){
                                     return ["=:javascript",child_env] 
                                })()] 
                            })()]
                        }
                    })()
                }
            }
        };
        ;
        await (async function() {
            let __for_body__332=async function(__item) {
                __result=await __action(__item);
                if (check_true (__result)){
                    return (__collector).push(__result)
                }
            };
            let __array__333=[],__elements__331=child_export_order;
            let __BREAK__FLAG__=false;
            for(let __iter__330 in __elements__331) {
                __array__333.push(await __for_body__332(__elements__331[__iter__330]));
                if(__BREAK__FLAG__) {
                     __array__333.pop();
                    break;
                    
                }
            }return __array__333;
             
        })();
        return __collector
    })());
    await (await get_global("set_path"))(target_insertion_path,src,await (async function(){
         return ["=:fn",[],await to_object(await (async function(){
             return [["definitions",await (async function(){
                 return ["=:quote",await (async function(){
                    if (check_true (options.do_not_include)){
                        return await to_object(await (async function(){
                            let __collector;
                            let __result;
                            let __action;
                            __collector=[];
                            __result=null;
                            __action=async function(defset) {
                                if (check_true (await not(await contains_ques_(defset['0'],options.do_not_include)))){
                                    return await (async function(){
                                        let __array_op_rval__334=defset['0'];
                                         if (__array_op_rval__334 instanceof Function){
                                            return await __array_op_rval__334(defset['1']) 
                                        } else {
                                            return [__array_op_rval__334,defset['1']]
                                        }
                                    })()
                                }
                            };
                            ;
                            await (async function() {
                                let __for_body__337=async function(__item) {
                                    __result=await __action(__item);
                                    if (check_true (__result)){
                                        return (__collector).push(__result)
                                    }
                                };
                                let __array__338=[],__elements__336=await pairs(Environment.definitions);
                                let __BREAK__FLAG__=false;
                                for(let __iter__335 in __elements__336) {
                                    __array__338.push(await __for_body__337(__elements__336[__iter__335]));
                                    if(__BREAK__FLAG__) {
                                         __array__338.pop();
                                        break;
                                        
                                    }
                                }return __array__338;
                                 
                            })();
                            return __collector
                        })())
                    } else {
                        return await clone(Environment.definitions)
                    }
                })()] 
            })()],["declarations",await (async function(){
                 return await clone(Environment.declarations) 
            })()],["config",await (async function(){
                let exp_conf;
                exp_conf=await (async function(){
                     return await clone(Environment.global_ctx.scope["*env_config*"]) 
                })();
                if (check_true (await not(preserve_imports))){
                    {
                        await async function(){
                            exp_conf["imports"]=new Object();
                            return exp_conf;
                            
                        }()
                    }
                };
                if (check_true (options.features)){
                    {
                        await async function(){
                            exp_conf["features"]=options.features;
                            return exp_conf;
                            
                        }()
                    }
                };
                return exp_conf
            })()],["imports",await (async function(){
                if (check_true (preserve_imports)){
                    return await to_object(await (async function() {
                        let __for_body__343=async function(imp_source) {
                            return await (async function(){
                                let __array_op_rval__345=imp_source.symbol;
                                 if (__array_op_rval__345 instanceof Function){
                                    return await __array_op_rval__345({
                                        initializer:await (async function(){
                                             return ["=:javascript","new function () { return ",imp_source.symbol," }"] 
                                        })(),symbol:imp_source.symbol,namespace:imp_source.namespace
                                    }) 
                                } else {
                                    return [__array_op_rval__345,{
                                        initializer:await (async function(){
                                             return ["=:javascript","new function () { return ",imp_source.symbol," }"] 
                                        })(),symbol:imp_source.symbol,namespace:imp_source.namespace
                                    }]
                                }
                            })()
                        };
                        let __array__344=[],__elements__342=await values((await resolve_path(["*env_config*","imports"],Environment.global_ctx.scope)|| new Object()));
                        let __BREAK__FLAG__=false;
                        for(let __iter__341 in __elements__342) {
                            __array__344.push(await __for_body__343(__elements__342[__iter__341]));
                            if(__BREAK__FLAG__) {
                                 __array__344.pop();
                                break;
                                
                            }
                        }return __array__344;
                         
                    })())
                } else {
                    return new Object()
                }
            })()],["symbols",await (async function(){
                 return ["=:javascript",await compile(await to_object(exports),{
                    throw_on_error:true
                })] 
            })()],["children_declarations",await (async function(){
                 return ["=:fn",[],await clone(children_declarations)] 
            })()],["child_load_order",await (async function(){
                 return await (await get_global("each"))(child_export_order,0) 
            })()],["children",my_children]] 
        })())] 
    })());
    output_path=await (async function(){
        if (check_true (options.want_buffer)){
            return null
        } else {
            return (options.save_as|| await resolve_path(["*env_config*","export","save_path"],Environment.global_ctx.scope))
        }
    })();
    if (check_true (output_path instanceof Function)){
        output_path=await (async function(){
            let __array_op_rval__346=output_path;
             if (__array_op_rval__346 instanceof Function){
                return await __array_op_rval__346() 
            } else {
                return [__array_op_rval__346]
            }
        })()
    };
    if (check_true ((await not((output_path instanceof String || typeof output_path==='string'))&& output_path))){
        throw new EvalError("invalid name for target for saving the environment.  Must be a string or function");
        
    };
    return await async function(){
        if (check_true ((want_buffer|| (output_path&& await ends_with_ques_(".js",output_path))))) {
            {
                (build_headers).push(("// Build Time: "+ build_time));
                (build_headers).push(("// Version: "+ version_tag));
                (build_headers).push(("export const DLISP_ENV_VERSION='"+ version_tag+ "';"));
                await env_log("saving to: ",output_path);
                return await (await get_global("compile_buffer"))(src,"init_dlisp",{
                    namespace:namespace,toplevel:true,include_boilerplate:false,verbose:false,bundle:true,want_buffer:want_buffer,imports:await (async function(){
                        if (check_true (preserve_imports)){
                            return await resolve_path(["*env_config*","imports"],Environment.global_ctx.scope)
                        }
                    })(),js_headers:await (async function(){
                         return [await (await get_global("show"))(check_true),await (async function(){
                             return await (await get_global("show"))(get_next_environment_id) 
                        })(),await (async function(){
                             return await (await get_global("show"))(get_outside_global) 
                        })(),await (async function(){
                             return await (await get_global("show"))(subtype) 
                        })(),await (async function(){
                             return await (await get_global("show"))(lisp_writer) 
                        })(),await (async function(){
                             return await (await get_global("show"))(clone) 
                        })(),await (async function(){
                             return await (await get_global("show"))(LispSyntaxError) 
                        })()] 
                    })(),bundle_options:{
                        default_namespace:await resolve_path(["*env_config*","export","default_namespace"],Environment.global_ctx.scope)
                    },output_file:output_path,include_source:(options.include_source|| await resolve_path(["*env_config*","export","include_source"],Environment.global_ctx.scope)),build_headers:build_headers
                })
            }
        } else if (check_true ((output_path&& await ends_with_ques_(".lisp",output_path)))) {
            return await (await get_global("write_text_file"))(output_path,await JSON.stringify(src,null,4))
        } else {
            return src
        }
    } ()
};
;
let reader=async function(text,opts) {     return  await async function(){        if (check_true( (undefined==text))) {             throw new EvalError(("reader: received undefined, text must be a string."));                    } else if (check_true( await (await Environment.get_global("not"))((text instanceof String || typeof text==='string')))) {             throw new EvalError(("reader: received "+await (await Environment.get_global("sub_type"))(text)+": text must be a string."));                    } else  {            let output_structure;            let idx;            let line_number;            let column_number;            let source_name;            let len;            let debugmode;            let in_buffer;            let in_code;            let in_quotes;            let in_long_text;            let in_comment;            let in_single_quote;            let reading_object;            let mode;            let local_text;            let position;            let read_table;            let get_char;            let error;            let handle_escape_char;            let process_word;            let registered_stop_char;            let handler_stack;            let handler;            let c;            let next_c;            let depth;            let stop;            let read_block;            output_structure=[];            idx=-1;            line_number=1;            column_number=0;            source_name=await (async function () {                 if (check_true ((opts && opts["source_name"]))){                      return (opts && opts["source_name"])                } else {                      return "anonymous"                }             })();            opts=(opts||new Object());            len=(await (await Environment.get_global("length"))(text)-1);            debugmode=await async function(){                if (check_true((opts && opts["verbose"]))) {                     return true                } else if (check_true( ((opts && opts["verbose"])===false))) {                     return false                } else if (check_true( ((await Environment.get_global("__VERBOSITY__"))>6))) {                     return true                } else  {                     return false                }            } ();            in_buffer=(text).split("");            in_code=0;            in_quotes=1;            in_long_text=2;            in_comment=3;            in_single_quote=4;            reading_object=false;            mode=in_code;            local_text=async function() {                let start;                let end;                start=await Math.max(0,(idx-10));                end=await Math.min(await (await Environment.get_global("length"))(in_buffer),(idx+10));                 return  (await (await Environment.get_global("slice"))(in_buffer,start,end)).join("")            };            position=async function(offset) {                 return  ("line: "+line_number+" column: "+await (async function () {                     if (check_true (offset)){                          return (column_number+offset)                    } else {                          return column_number                    }                 })())            };            read_table=await (await Environment.get_global("add"))(new Object(),await (async function() {                 if (check_true ((opts && opts["read_table_entries"]))){                      return (opts && opts["read_table_entries"])                } else {                      return new Object()                }             } )(),await ( async function(){                let __obj__1=new Object();                __obj__1["("]=[")",async function(block) {                     return  block                }];                __obj__1["["]=["]",async function(block) {                     return  block                }];                __obj__1["{"]=["}",async function(block) {                    let obj;                    let __idx__2= async function(){                        return -1                    };                    let key_mode;                    let need_colon;                    let value_mode;                    let key;                    let value;                    let cpos;                    let state;                    let block_length;                    {                        obj=new Object();                        let idx=await __idx__2();                        ;                        key_mode=0;                        need_colon=1;                        value_mode=2;                        key=null;                        value=null;                        cpos=null;                        state=key_mode;                        block_length=(await (await Environment.get_global("length"))(block)-1);                        reading_object=false;                        await (async function(){                             let __test_condition__3=async function() {                                 return  (idx<block_length)                            };                            let __body_ref__4=async function() {                                (idx=idx+1);                                key=block[idx];                                if (check_true (((key instanceof Array)&&((key && key.length)===2)&&((key && key["0"])==="=:quotem")&&((key && key["1"]) instanceof String || typeof (key && key["1"])==='string')))){                                     key=(key && key["1"])                                };                                if (check_true (((key instanceof String || typeof key==='string')&&await (await Environment.get_global("starts_with?"))("=:",key)&&(await (await Environment.get_global("length"))(key)>2)))){                                     key=await key["substr"].call(key,2)                                };                                 return  await async function(){                                    if (check_true( await (await Environment.get_global("blank?"))(key))) {                                         return await error("missing object key",("blank or nil key: "+block[idx]))                                    } else if (check_true( await (await Environment.get_global("is_number?"))(key))) {                                        (idx=idx+1);                                         return  await async function(){                                            obj[key]=block[idx];                                            return obj;                                                                                    }()                                    } else if (check_true( ((key instanceof String || typeof key==='string')&&await (await Environment.get_global("contains?"))(":",key)&&await (await Environment.get_global("not"))(await (await Environment.get_global("ends_with?"))(":",key))))) {                                        cpos=await key["indexOf"].call(key,":");                                        value=await key["substr"].call(key,(cpos+1));                                        key=await key["substr"].call(key,0,cpos);                                        value=await process_word((value).split(""),0);                                         return  await async function(){                                            obj[key]=value;                                            return obj;                                                                                    }()                                    } else  {                                        (idx=idx+1);                                        if (check_true (await (await Environment.get_global("ends_with?"))(":",key))){                                             key=await (await Environment.get_global("chop"))(key)                                        } else {                                            if (check_true ((block[idx]===":"))){                                                 (idx=idx+1)                                            } else {                                                 await error("missing colon",("expected colon for: "+key))                                            }                                        };                                         return  await async function(){                                            obj[key]=block[idx];                                            return obj;                                                                                    }()                                    }                                } ()                            };                            let __BREAK__FLAG__=false;                            while(await __test_condition__3()) {                                await __body_ref__4();                                 if(__BREAK__FLAG__) {                                     break;                                                                    }                            } ;                                                    })();                         return  obj                    }                },async function() {                     return  reading_object=true                }];                __obj__1["\""]=["\"",async function(block) {                     return  ["quotes",block]                }];                return __obj__1;                            })());            get_char=async function(pos) {                 return  in_buffer[pos]            };            error=async function(type,message,offset) {                throw new LispSyntaxError({                    message:message,position:await position(offset),pos:{                        line:line_number,column:(column_number+(offset||0))                    },depth:depth,local_text:await local_text(),source_name:source_name,type:type                });                            };            handle_escape_char=async function(c) {                let ccode;                ccode=await c["charCodeAt"].call(c,0);                 return  await async function(){                    if (check_true( (ccode===34))) {                         return c                    } else if (check_true( (ccode===92))) {                         return c                    } else if (check_true( (c==="t"))) {                         return await String.fromCharCode(9)                    } else if (check_true( (c==="n"))) {                         return await String.fromCharCode(10)                    } else if (check_true( (c==="r"))) {                         return await String.fromCharCode(13)                    } else if (check_true( (c==="f"))) {                         return c                    } else if (check_true( (c==="b"))) {                         return c                    } else  {                         return c                    }                } ()            };            process_word=async function(word_acc,backtick_mode) {                let word;                let word_as_number;                word=(word_acc).join("");                word_as_number=await Number(word);                if (check_true (debugmode)){                     console.log("process_word: ",word,word_as_number,backtick_mode)                };                 return  await async function(){                    if (check_true( ("true"===word))) {                         return true                    } else if (check_true( ("false"===word))) {                         return false                    } else if (check_true( (":"===word))) {                         return word                    } else if (check_true( (",@"===word))) {                         return "=$,@"                    } else if (check_true( ((",#"===word)||("##"===word)))) {                         return "=:##"                    } else if (check_true( ("=$,@"===word))) {                         return "=$,@"                    } else if (check_true( ("=:##"===word))) {                         return "=:##"                    } else if (check_true( await isNaN(word_as_number))) {                         return  await async function(){                            if (check_true( (word==="=:"))) {                                 return  "=:"                            } else if (check_true( ((backtick_mode===0)&&await (await Environment.get_global("ends_with?"))(")",word)))) {                                 return await error("trailing character","unexpected trailing parenthesis")                            } else if (check_true( ((backtick_mode===0)&&await (await Environment.get_global("ends_with?"))("]",word)))) {                                 return await error("trailing character","unexpected trailing bracket")                            } else if (check_true( await (await Environment.get_global("contains?"))(word,["=:(","=:)","=:'"]))) {                                 return  word                            } else if (check_true( (backtick_mode===1))) {                                 return word                            } else  {                                 return await (await Environment.get_global("add"))("=:",word)                            }                        } ()                    } else if (check_true( await (await Environment.get_global("is_number?"))(word_as_number))) {                         return word_as_number                    } else  {                        console.log("reader: ",await position()," what is this?",word,word_acc,await local_text());                         return  word                    }                } ()            };            registered_stop_char=null;            handler_stack=[];            handler=null;            c=null;            next_c=null;            depth=0;            stop=false;            read_block=async function(_depth,_prefix_op) {                let acc;                let word_acc;                let backtick_mode;                let escape_mode;                let last_c;                let block_return;                acc=[];                word_acc=[];                backtick_mode=0;                escape_mode=0;                last_c=null;                block_return=null;                if (check_true (_prefix_op)){                     (acc).push(_prefix_op)                };                depth=_depth;                await (async function(){                     let __test_condition__8=async function() {                         return  (await (await Environment.get_global("not"))(stop)&&(idx<len))                    };                    let __body_ref__9=async function() {                        idx+=1;                        escape_mode=await Math.max(0,(escape_mode-1));                        c=await get_char(idx);                        next_c=await get_char((idx+1));                        if (check_true ((c==="\n"))){                            line_number+=1;                             column_number=0                        };                        if (check_true (debugmode)){                             await console.log(_depth,"C->",c,next_c,mode,escape_mode,await clone(acc),await clone(word_acc),(handler_stack && handler_stack.length))                        };                        await async function(){                            if (check_true( ((next_c===undefined)&&await (await Environment.get_global("not"))((await (async function(){                                let __targ__10=await (await Environment.get_global("last"))(handler_stack);                                if (__targ__10){                                     return(__targ__10)[0]                                }                             })()===undefined))&&(await (await Environment.get_global("not"))((c===await (async function(){                                let __targ__11=await (await Environment.get_global("last"))(handler_stack);                                if (__targ__11){                                     return(__targ__11)[0]                                }                             })()))||((handler_stack && handler_stack.length)>1))))) {                                 return await error("premature end",("premature end: expected: "+await (async function(){                                    let __targ__12=await (await Environment.get_global("last"))(handler_stack);                                    if (__targ__12){                                         return(__targ__12)[0]                                    }                                 })()))                            } else if (check_true( ((next_c===undefined)&&(mode===in_quotes)&&await (await Environment.get_global("not"))((await c["charCodeAt"]()===34))))) {                                 return await error("premature end","premature end: expected: \"")                            } else if (check_true( ((next_c===undefined)&&(mode===in_long_text)&&await (await Environment.get_global("not"))((c==="|"))))) {
                                 return await error("premature end","premature end: expected: |")
                            } else if (check_true( ((mode===in_code)&&(_depth===1)&&(next_c===")")&&(c===")")))) {
                                 return  await error("trailing character","unexpected trailing parenthesis")
                            }
                        } ();
                        await async function(){
                            if (check_true( ((c==="\n")&&(mode===in_comment)))) {
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((92===await c["charCodeAt"].call(c,0))&&(mode===in_long_text)))) {
                                (word_acc).push(c);
                                 return  (word_acc).push(c)
                            } else if (check_true( ((mode>0)&&(escape_mode===1)&&(92===await c["charCodeAt"].call(c,0))))) {
                                 return  (word_acc).push(c)
                            } else if (check_true( ((mode>0)&&(92===await c["charCodeAt"].call(c,0))))) {
                                 return  escape_mode=2
                            } else if (check_true( ((mode>0)&&(escape_mode===1)))) {
                                 return  (word_acc).push(await handle_escape_char(c))
                            } else if (check_true( ((mode===in_long_text)&&(escape_mode===0)&&(c==="|")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_quotes)&&(escape_mode===0)&&(c==="\"")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_single_quote)&&(escape_mode===0)&&(c==="'")))) {
                                acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                word_acc=[];
                                mode=in_code;
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((c==="|")&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_long_text;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                    block_return=["=:quotem",block_return];
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( ((c==="\"")&&(escape_mode===0)&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_quotes;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( ((c==="'")&&(escape_mode===0)&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_single_quote;
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                if (check_true ((backtick_mode===1))){
                                     backtick_mode=0
                                };
                                 return  (acc).push(block_return)
                            } else if (check_true( (mode===in_comment))) {
                                 return false
                            } else if (check_true( ((c===";")&&(mode===in_code)))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                mode=in_comment;
                                 return  await read_block(await (await Environment.get_global("add"))(_depth,1))
                            } else if (check_true( ((mode===in_code)&&(await (await Environment.get_global("length"))(handler_stack)>0)&&(c===await (async function(){
                                let __targ__13=await (await Environment.get_global("last"))(handler_stack);
                                if (__targ__13){
                                     return(__targ__13)[0]
                                } 
                            })())))) {
                                __BREAK__FLAG__=true;
                                return
                            } else if (check_true( ((mode===in_code)&&read_table[c]&&await (await Environment.get_global("first"))(read_table[c])))) {
                                if (check_true (await (async function(){
                                    let __targ__14=read_table[c];
                                    if (__targ__14){
                                         return(__targ__14)[2]
                                    } 
                                })())){
                                    handler=await (async function(){
                                        let __targ__15=read_table[c];
                                        if (__targ__15){
                                             return(__targ__15)[2]
                                        } 
                                    })();
                                    await (async function(){
                                        let __array_op_rval__16=handler;
                                         if (__array_op_rval__16 instanceof Function){
                                            return await __array_op_rval__16() 
                                        } else {
                                            return[__array_op_rval__16]
                                        }
                                    })();
                                     handler=null
                                };
                                (handler_stack).push(read_table[c]);
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc,backtick_mode));
                                    backtick_mode=0;
                                     word_acc=[]
                                };
                                block_return=await read_block(await (await Environment.get_global("add"))(_depth,1));
                                handler=await (async function(){
                                    let __targ__17=(handler_stack).pop();
                                    if (__targ__17){
                                         return(__targ__17)[1]
                                    } 
                                })();
                                block_return=await (async function(){
                                    let __array_op_rval__18=handler;
                                     if (__array_op_rval__18 instanceof Function){
                                        return await __array_op_rval__18(block_return) 
                                    } else {
                                        return[__array_op_rval__18,block_return]
                                    }
                                })();
                                if (check_true (await (await Environment.get_global("not"))((undefined===block_return)))){
                                    if (check_true ((backtick_mode===1))){
                                        block_return=["=:quotem",block_return];
                                         backtick_mode=0
                                    };
                                     return  (acc).push(block_return)
                                }
                            } else if (check_true( ((mode===in_code)&&(c==="`")))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    (acc).push(await process_word(word_acc));
                                     word_acc=[]
                                };
                                 return  backtick_mode=1
                            } else if (check_true( ((mode===in_code)&&(c===":")&&((word_acc && word_acc.length)===0)&&((acc && acc.length)>0)&&(await (await Environment.get_global("last"))(acc) instanceof String || typeof await (await Environment.get_global("last"))(acc)==='string')))) {
                                 return (acc).push(await (await Environment.get_global("add"))((acc).pop(),":"))
                            } else if (check_true( ((mode===in_code)&&(last_c===",")&&((c==="#")||(c==="@"))))) {
                                (word_acc).push(c);
                                (acc).push(await process_word(word_acc));
                                 return  word_acc=[]
                            } else if (check_true( ((mode===in_code)&&((c===" ")||(await c["charCodeAt"].call(c,0)===10)||(await c["charCodeAt"].call(c,0)===9)||((c===",")&&await (await Environment.get_global("not"))((next_c==="@"))&&await (await Environment.get_global("not"))((next_c==="#"))))))) {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    if (check_true ((backtick_mode===1))){
                                        (acc).push(await process_word(word_acc,backtick_mode));
                                         backtick_mode=0
                                    } else {
                                         (acc).push(await process_word(word_acc))
                                    };
                                     return  word_acc=[]
                                }
                            } else if (check_true( ((mode===in_code)&&(await c["charCodeAt"].call(c,0)===13)))) {
                                 return false
                            } else  {
                                 return  (word_acc).push(c)
                            }
                        } ();
                        column_number+=1;
                         return  last_c=c
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__8()) {
                        await __body_ref__9();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                if (check_true (((word_acc && word_acc.length)>0))){
                    (acc).push(await process_word(word_acc,backtick_mode));
                     word_acc=[]
                };
                 return  acc
            };
            if (check_true (debugmode)){
                 await console.log("read->",in_buffer)
            };
            output_structure=await read_block(0);
            if (check_true (debugmode)){
                 await console.log("read<-",await clone(output_structure))
            };
            if (check_true (((output_structure instanceof Array)&&(await (await Environment.get_global("length"))(output_structure)>1)))){
                (output_structure).unshift("=:iprogn");
                 return  await (await Environment.get_global("first"))(await (async function(){
                    let __array_op_rval__19=output_structure;
                     if (__array_op_rval__19 instanceof Function){
                        return await __array_op_rval__19() 
                    } else {
                        return[__array_op_rval__19]
                    }
                })())
            } else {
                  return await (await Environment.get_global("first"))(output_structure)
            }
        }
    } ()
};
let add_escape_encoding=async function(text) {        if (check_true ((text instanceof String || typeof text==='string'))){            let chars;            let acc;            chars=(text).split("");            acc=[];            await (async function() {                let __for_body__3=async function(c) {                     return  await async function(){                        if (check_true( ((await c["charCodeAt"].call(c,0)===34)))) {                            (acc).push(await String.fromCharCode(92));                             return  (acc).push(c)                        } else  {                             return (acc).push(c)                        }                    } ()                };                let __array__4=[],__elements__2=chars;                let __BREAK__FLAG__=false;                for(let __iter__1 in __elements__2) {                    __array__4.push(await __for_body__3(__elements__2[__iter__1]));                    if(__BREAK__FLAG__) {                         __array__4.pop();                        break;                                            }                }return __array__4;                             })();             return  (acc).join("")        } else {              return text        }    };
let do_deferred_splice=async function(tree) {    let rval;
    let idx;
    let tval;
    let deferred_operator;
    rval=null;
    idx=0;
    tval=null;
    deferred_operator=(["=","$","&","!"]).join("");
    return await async function(){
        if (check_true ((tree instanceof Array))) {
            {
                rval=[];
                await (async function(){
                     let __test_condition__15=async function() {
                        return (idx<(tree && tree.length))
                    };
                    let __body_ref__16=async function() {
                        tval=tree[idx];
                        if (check_true ((tval===deferred_operator))){
                            {
                                idx+=1;
                                tval=tree[idx];
                                rval=await rval["concat"].call(rval,await (async function(){
                                     return await do_deferred_splice(tval) 
                                })())
                            }
                        } else {
                            (rval).push(await (async function(){
                                 return await do_deferred_splice(tval) 
                            })())
                        };
                        return idx+=1
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__15()) {
                        await __body_ref__16();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                return rval
            }
        } else if (check_true ((tree instanceof Object))) {
            {
                rval=new Object();
                await (async function() {
                    let __for_body__19=async function(pset) {
                        return await async function(){
                            rval[(pset && pset["0"])]=await (async function(){
                                 return await do_deferred_splice((pset && pset["1"])) 
                            })();
                            return rval;
                            
                        }()
                    };
                    let __array__20=[],__elements__18=await (await Environment.get_global("pairs"))(tree);
                    let __BREAK__FLAG__=false;
                    for(let __iter__17 in __elements__18) {
                        __array__20.push(await __for_body__19(__elements__18[__iter__17]));
                        if(__BREAK__FLAG__) {
                             __array__20.pop();
                            break;
                            
                        }
                    }return __array__20;
                     
                })();
                return rval
            }
        } else {
            return tree
        }
    } ()
};
let safe_access=async function(token,ctx,sanitizer_fn) {    let comps;
    let acc;
    let acc_full;
    let pos;
    let rval;
    comps=null;
    acc=[];
    acc_full=[];
    pos=null;
    rval=null;
    comps=((token && token.name)).split(".");
    if (check_true (((comps && comps.length)===1))){
        return (token && token.name)
    } else {
        {
            await async function(){
                comps[0]=await (async function(){
                    let __array_op_rval__180=sanitizer_fn;
                     if (__array_op_rval__180 instanceof Function){
                        return await __array_op_rval__180((comps && comps["0"])) 
                    } else {
                        return [__array_op_rval__180,(comps && comps["0"])]
                    }
                })();
                return comps;
                
            }();
            await (async function(){
                 let __test_condition__181=async function() {
                    return ((comps && comps.length)>0)
                };
                let __body_ref__182=async function() {
                    (acc).push((comps).shift());
                    return (acc_full).push(await (async function(){
                         return await (await Environment.get_global("expand_dot_accessor"))((acc).join("."),ctx) 
                    })())
                };
                let __BREAK__FLAG__=false;
                while(await __test_condition__181()) {
                    await __body_ref__182();
                     if(__BREAK__FLAG__) {
                         break;
                        
                    }
                } ;
                
            })();
            rval=await (await Environment.get_global("flatten"))(["(",(acc_full).join(" && "),")"]);
            return rval
        }
    }
};
;
let as_lisp=lisp_writer;
;
let read_lisp=reader;
;
await async function(){
    Environment.global_ctx.scope["eval"]=eval_exp;
    Environment.global_ctx.scope["reader"]=reader;
    Environment.global_ctx.scope["add_escape_encoding"]=add_escape_encoding;
    Environment.global_ctx.scope["get_outside_global"]=get_outside_global;
    Environment.global_ctx.scope["as_lisp"]=lisp_writer;
    Environment.global_ctx.scope["lisp_writer"]=lisp_writer;
    Environment.global_ctx.scope["clone_to_new"]=clone_to_new;
    Environment.global_ctx.scope["save_env"]=save_env;
    Environment.global_ctx.scope["null"]=null;
    return Environment.global_ctx.scope;
    
}();
let inlines=await (async function(){
    if (check_true (parent_environment)){
        return await add(new Object(),parent_environment.inlines,await (async function(){
            if (check_true (opts.inlines)){
                return opts.inlines
            } else {
                return new Object()
            }
        })())
    } else {
        return await add(new Object(),await (async function(){
            if (check_true (opts.inlines)){
                return opts.inlines
            } else {
                return new Object()
            }
        })(),await ( async function(){
            let __obj__348=new Object();
            __obj__348["pop"]=async function(args) {
                return ["(",args['0'],")",".","pop()"]
            };
            __obj__348["push"]=async function(args) {
                return ["(",args['0'],")",".push","(",args['1'],")"]
            };
            __obj__348["chomp"]=async function(args) {
                return ["(",args['0'],")",".substr","(",0,",","(",args['0'],".length","-",1,")",")"]
            };
            __obj__348["join"]=async function(args) {
                if (check_true ((args.length===1))){
                    return ["(",args['0'],")",".join","('')"]
                } else {
                    return ["(",args['1'],")",".join","(",args['0'],")"]
                }
            };
            __obj__348["take"]=async function(args) {
                return ["(",args['0'],")",".shift","()"]
            };
            __obj__348["prepend"]=async function(args) {
                return ["(",args['0'],")",".unshift","(",args['1'],")"]
            };
            __obj__348["trim"]=async function(args) {
                return ["(",args['0'],")",".trim()"]
            };
            __obj__348["lowercase"]=async function(args) {
                return ["(",args['0'],")",".toLowerCase()"]
            };
            __obj__348["uppercase"]=async function(args) {
                return ["(",args['0'],")",".toUpperCase()"]
            };
            __obj__348["islice"]=async function(args) {
                return await async function(){
                    if (check_true ((args.length===3))) {
                        return ["(",args['0'],")",".slice(",args['1'],",",args['2'],")"]
                    } else if (check_true ((args.length===2))) {
                        return ["(",args['0'],")",".slice(",args['1'],")"]
                    } else {
                        throw new SyntaxError("slice requires 2 or 3 arguments");
                        
                    }
                } ()
            };
            __obj__348["split_by"]=async function(args) {
                return ["(",args['1'],")",".split","(",args['0'],")"]
            };
            __obj__348["bindf"]=async function(args) {
                return await (async function(){
                    let __array_op_rval__349=args['0'];
                     if (__array_op_rval__349 instanceof Function){
                        return await __array_op_rval__349(".bind(",args['1'],")") 
                    } else {
                        return [__array_op_rval__349,".bind(",args['1'],")"]
                    }
                })()
            };
            __obj__348["is_array?"]=async function(args) {
                return ["(",args['0']," instanceof Array",")"]
            };
            __obj__348["is_object?"]=async function(args) {
                return ["(",args['0']," instanceof Object",")"]
            };
            __obj__348["is_string?"]=async function(args) {
                return ["(",args['0']," instanceof String || typeof ",args['0'],"===","'string'",")"]
            };
            __obj__348["is_function?"]=async function(args) {
                return await (async function(){
                    let __array_op_rval__350=args['0'];
                     if (__array_op_rval__350 instanceof Function){
                        return await __array_op_rval__350(" instanceof Function") 
                    } else {
                        return [__array_op_rval__350," instanceof Function"]
                    }
                })()
            };
            __obj__348["is_element?"]=async function(args) {
                return await (async function(){
                    let __array_op_rval__351=args['0'];
                     if (__array_op_rval__351 instanceof Function){
                        return await __array_op_rval__351(" instanceof Element") 
                    } else {
                        return [__array_op_rval__351," instanceof Element"]
                    }
                })()
            };
            __obj__348["log"]=async function(args) {
                return ["console.log","(",await (async function(){
                     return await map(async function(val,idx,tl) {
                        if (check_true ((idx<(tl- 1)))){
                            return await (async function(){
                                let __array_op_rval__352=val;
                                 if (__array_op_rval__352 instanceof Function){
                                    return await __array_op_rval__352(",") 
                                } else {
                                    return [__array_op_rval__352,","]
                                }
                            })()
                        } else {
                            return await (async function(){
                                let __array_op_rval__353=val;
                                 if (__array_op_rval__353 instanceof Function){
                                    return await __array_op_rval__353() 
                                } else {
                                    return [__array_op_rval__353]
                                }
                            })()
                        }
                    },args) 
                })(),")"]
            };
            __obj__348["reverse"]=async function(args) {
                return ["(",args['0'],")",".slice(0).reverse()"]
            };
            __obj__348["int"]=async function(args) {
                return await async function(){
                    if (check_true ((args.length===1))) {
                        return ["parseInt(",args['0'],")"]
                    } else if (check_true ((args.length===2))) {
                        return ["parseInt(",args['0'],",",args['1'],")"]
                    } else {
                        throw new "SyntaxError"(("invalid number of arguments to int: received "+ args.length));
                        
                    }
                } ()
            };
            __obj__348["float"]=async function(args) {
                return ["parseFloat(",args['0'],")"]
            };
            return __obj__348;
            
        })())
    }
})();
;
await async function(){
    Environment["eval"]=eval_struct;
    Environment["identify"]=subtype;
    Environment["meta_for_symbol"]=meta_for_symbol;
    Environment["set_compiler"]=set_compiler;
    Environment["read_lisp"]=reader;
    Environment["as_lisp"]=as_lisp;
    Environment["symbols"]=symbols;
    Environment["inlines"]=inlines;
    Environment["clone_to_new"]=clone_to_new;
    Environment["export_symbol_set"]=export_symbol_set;
    Environment["save_env"]=save_env;
    Environment["special_operators"]=special_operators;
    Environment["definitions"]=Environment.definitions;
    Environment["declarations"]=Environment.declarations;
    Environment["get_namespace_handle"]=get_namespace_handle;
    Environment["compile"]=compile;
    Environment["evaluate"]=evaluate;
    Environment["evaluate_local"]=evaluate_local;
    Environment["do_deferred_splice"]=do_deferred_splice;
    Environment["id"]=async function() {
        return id
    };
    Environment["set_check_external_env"]=async function(state) {
        check_external_env_default=state;
        return check_external_env_default
    };
    Environment["check_external_env"]=async function() {
        return check_external_env_default
    };
    return Environment;
    
}();
in_boot=false;
let sys_init=Environment.global_ctx.scope["*system_initializer*"];
;
let init=Environment.global_ctx.scope["*initializer*"];
;
if (check_true ((opts.default_namespace&& await not((compiler===unset_compiler))&& children[opts.default_namespace]))){
    {
        await (await get_global("set_namespace"))(opts.default_namespace)
    }
};
if (check_true ((namespace==="core"))){
    {
        await (async function() {
            let __for_body__357=async function(symname) {
                {
                    let it;
                    it=(await not((included_globals&& included_globals.imports[symname]))&& await resolve_path(await (async function(){
                        let __array_op_rval__359=symname;
                         if (__array_op_rval__359 instanceof Function){
                            return await __array_op_rval__359("initializer") 
                        } else {
                            return [__array_op_rval__359,"initializer"]
                        }
                    })(),Environment.definitions));
                    if (check_true (it)){
                        {
                            try {
                                return await async function(){
                                    Environment.global_ctx.scope[symname]=await (async function(){
                                         return await eval_struct(it,new Object(),{
                                            throw_on_error:true
                                        }) 
                                    })();
                                    return Environment.global_ctx.scope;
                                    
                                }()
                            } catch (__exception__360) {
                                if (__exception__360 instanceof Error) {
                                    let e=__exception__360;
                                    {
                                        {
                                            return await console.error("core environment cannot initialize: ",symname,"error:",e)
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        return 
                    }
                }
            };
            let __array__358=[],__elements__356=await keys(Environment.definitions);
            let __BREAK__FLAG__=false;
            for(let __iter__355 in __elements__356) {
                __array__358.push(await __for_body__357(__elements__356[__iter__355]));
                if(__BREAK__FLAG__) {
                     __array__358.pop();
                    break;
                    
                }
            }return __array__358;
             
        })();
        if (check_true (sys_init)){
            {
                (await Environment.eval(await async function(){
                    return sys_init
                }()))
            }
        };
        if (check_true ((rehydrated_children&& (included_globals["children"] instanceof Object)))){
            {
                await console.log("env: child load order: ",included_globals.child_load_order);
                await (async function() {
                    let __for_body__364=async function(childname) {
                        if (check_true (included_globals.children[childname])){
                            {
                                await console.log("env: loading child: ",childname);
                                let childset=await (async function(){
                                    let __array_op_rval__366=childname;
                                     if (__array_op_rval__366 instanceof Function){
                                        return await __array_op_rval__366(included_globals.children[childname]) 
                                    } else {
                                        return [__array_op_rval__366,included_globals.children[childname]]
                                    }
                                })();
                                ;
                                let childenv=children[childset['0']];
                                ;
                                let imported_defs=childset['1']['0'];
                                ;
                                if (check_true ((included_globals["imports"] instanceof Object))){
                                    {
                                        imps=included_globals["imports"];
                                        if (check_true (imps)){
                                            {
                                                await (async function() {
                                                    let __for_body__369=async function(imp_source) {
                                                        if (check_true (children[imp_source.namespace])){
                                                            {
                                                                return await set_global((""+ imp_source.namespace+ "/"+ imp_source.symbol),imp_source.initializer)
                                                            }
                                                        }
                                                    };
                                                    let __array__370=[],__elements__368=await values(imps);
                                                    let __BREAK__FLAG__=false;
                                                    for(let __iter__367 in __elements__368) {
                                                        __array__370.push(await __for_body__369(__elements__368[__iter__367]));
                                                        if(__BREAK__FLAG__) {
                                                             __array__370.pop();
                                                            break;
                                                            
                                                        }
                                                    }return __array__370;
                                                     
                                                })()
                                            }
                                        }
                                    }
                                };
                                try {
                                    await async function(){
                                        childset['1'][1]=await childenv["eval"].call(childenv,childset['1']['1'],{
                                            throw_on_error:true
                                        });
                                        return childset['1'];
                                        
                                    }();
                                    return await (async function() {
                                        let __for_body__375=async function(symset) {
                                            if (check_true ((null==await resolve_path(await (async function(){
                                                let __array_op_rval__377=childset['0'];
                                                 if (__array_op_rval__377 instanceof Function){
                                                    return await __array_op_rval__377("context","scope",symset['0']) 
                                                } else {
                                                    return [__array_op_rval__377,"context","scope",symset['0']]
                                                }
                                            })(),children)))){
                                                {
                                                    if (check_true (imported_defs[symset['0']])){
                                                        {
                                                            await (await get_global("set_path"))(await (async function(){
                                                                let __array_op_rval__378=childset['0'];
                                                                 if (__array_op_rval__378 instanceof Function){
                                                                    return await __array_op_rval__378("definitions",symset['0']) 
                                                                } else {
                                                                    return [__array_op_rval__378,"definitions",symset['0']]
                                                                }
                                                            })(),children,imported_defs[symset['0']])
                                                        }
                                                    };
                                                    {
                                                        let it;
                                                        it=await resolve_path(await (async function(){
                                                            let __array_op_rval__379=childset['0'];
                                                             if (__array_op_rval__379 instanceof Function){
                                                                return await __array_op_rval__379("definitions",symset['0'],"initializer") 
                                                            } else {
                                                                return [__array_op_rval__379,"definitions",symset['0'],"initializer"]
                                                            }
                                                        })(),children);
                                                        if (check_true (it)){
                                                            {
                                                                try {
                                                                    return await (await get_global("set_path"))(await (async function(){
                                                                        let __array_op_rval__381=childset['0'];
                                                                         if (__array_op_rval__381 instanceof Function){
                                                                            return await __array_op_rval__381("context","scope",symset['0']) 
                                                                        } else {
                                                                            return [__array_op_rval__381,"context","scope",symset['0']]
                                                                        }
                                                                    })(),children,await childenv["eval"].call(childenv,it))
                                                                } catch (__exception__380) {
                                                                    if (__exception__380 instanceof Error) {
                                                                        let e=__exception__380;
                                                                        {
                                                                            return await console.error("env: unable to evaluate: symbol: ",symset['0'],e)
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            return await (await get_global("set_path"))(await (async function(){
                                                                let __array_op_rval__382=childset['0'];
                                                                 if (__array_op_rval__382 instanceof Function){
                                                                    return await __array_op_rval__382("context","scope",symset['0']) 
                                                                } else {
                                                                    return [__array_op_rval__382,"context","scope",symset['0']]
                                                                }
                                                            })(),children,symset['1'])
                                                        }
                                                    }
                                                }
                                            }
                                        };
                                        let __array__376=[],__elements__374=childset['1']['1'];
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__373 in __elements__374) {
                                            __array__376.push(await __for_body__375(__elements__374[__iter__373]));
                                            if(__BREAK__FLAG__) {
                                                 __array__376.pop();
                                                break;
                                                
                                            }
                                        }return __array__376;
                                         
                                    })()
                                } catch (__exception__371) {
                                    if (__exception__371 instanceof Error) {
                                        let e=__exception__371;
                                        {
                                            return await console.error("env: unable to load child: ",await (async function(){
                                                 return await clone(childset) 
                                            })())
                                        }
                                    }
                                }
                            }
                        }
                    };
                    let __array__365=[],__elements__363=(included_globals.child_load_order|| []);
                    let __BREAK__FLAG__=false;
                    for(let __iter__362 in __elements__363) {
                        __array__365.push(await __for_body__364(__elements__363[__iter__362]));
                        if(__BREAK__FLAG__) {
                             __array__365.pop();
                            break;
                            
                        }
                    }return __array__365;
                     
                })()
            }
        };
        if (check_true (init)){
            {
                (await Environment.eval(await async function(){
                    return init
                }()))
            }
        };
        await (async function() {
            let __for_body__385=async function(child) {
                return await child["evaluate_local"].call(child,("(progn (debug) (console.log \"child running initialization..\" *namespace*) (if (prop Environment.global_ctx.scope `*system_initializer*) (eval *system_initializer*)) (if (prop Environment.global_ctx.scope `*initializer*) (eval *initializer*)))"),null,{
                    log_errors:true
                })
            };
            let __array__386=[],__elements__384=children;
            let __BREAK__FLAG__=false;
            for(let __iter__383 in __elements__384) {
                __array__386.push(await __for_body__385(__elements__384[__iter__383]));
                if(__BREAK__FLAG__) {
                     __array__386.pop();
                    break;
                    
                }
            }return __array__386;
             
        })()
    }
};
return Environment
};
return globalThis;

}();
return globalThis[symname]
}
}
}
}
await init_dlisp();
let env = await dlisp_env({"default_namespace":"user"});