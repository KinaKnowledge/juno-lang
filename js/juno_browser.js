// Source: undefined  
// Build Time: 2023-04-19 16:24:31
// Version: 2023.04.19.16.24
export const DLISP_ENV_VERSION='2023.04.19.16.24';




function check_true(val) {
  return val||0===val
}
function get_next_environment_id() {
    globalThis.dlisp_environment_count++;
    return globalThis.dlisp_environment_count;
}
function get_outside_global(refname) {  try {    let tfn = new Function("{ if (typeof " + refname + " === 'undefined') { return undefined } else { return "+refname+" } }");    return tfn();  } catch (ex) {    return undefined;  }}
function subtype(value) {  if (value === null) return "null";
  else if (value === undefined) return "undefined";
  else if (value instanceof Array) return "array";
  else if (value.constructor && value.constructor!=null && value.constructor.name!=='Object') {
    return value.constructor.name;
  }
  return typeof value;
}
function lisp_writer(obj,depth,max_depth,env) {
  if (depth===undefined) depth=0;
  if (max_depth===undefined) max_depth=1502;
  const bracketStyles=['[',']','(',')','{','}'];
  let bracketStyle=0;
  let text='';
  let type = subtype(obj);
  //if (depth === 0) console.log("lisp_writer:->",obj);
  if (type === undefined) {
    type = "UNKNOWN"
  }
  if (max_depth && (depth > max_depth)) {
    return "...";
  }
  if (depth > 500) {
    console.warn("lisp_writer: depth bomb: object: ",type);
    throw new Error("recursion too deep");
  }
 
  if (obj===undefined) return 'undefined';
  if (obj===null) return 'null';
  if (typeof obj==='number') return obj;
  if (typeof obj==='function') {
    return "(javascript "+JSON.stringify(obj.toString())+")";
  } // technically this shouldn't be a JSON object but this is a convenience for us..
  if (obj instanceof Array) {
      
    if (obj.length > 0 && (typeof obj[0] === 'string' || obj[0] instanceof String) && obj[0].startsWith("=:")) { // && env && (typeof env.get_global(obj[0].substr(2), null) ) === 'function') {
      bracketStyle = 2;
    }
    text += bracketStyles[bracketStyle];
    // determine if we have any objects or arrays in the list
    for (let i in obj) {
      if (i > 0) text += ' ';
      
      text += lisp_writer(obj[i],depth+4,max_depth, env);
    }
    text += bracketStyles[bracketStyle+1];
    return text;
  } else if (obj instanceof RegExp) {
    return "(new RegExp "+JSON.stringify(obj.source)+" `"+obj.flags+")";
  } else if (obj instanceof Date) {
    return "(new Date \""+obj.toISOString()+"\")";
  } else if (typeof obj ==='object') {
    // object {}
    if (obj.constructor && obj.constructor.name !== "Object") {
      if (typeof Element != 'undefined') {
        if (obj instanceof Element) {
          let clist = Array.from(obj.classList).join(" ");
          if (obj.id) {
            return obj.constructor.name+"/"+obj.tagName.toLowerCase()+"#"+obj.id;
          } else {
            return obj.constructor.name+"/"+obj.tagName.toLowerCase()+"."+clist;
          }
        } else {
          return "" + obj.constructor.name + "";
        }
      } else {
        return "" + obj.constructor.name + "";
      }
    }
    bracketStyle=4;
    text+=bracketStyles[bracketStyle];
    let keys = Object.keys(obj);
    for (let i in keys) {
      if (i > 0) text+= ' ';
      if (typeof obj[keys[i]]=="symbol") {
	      text+=lisp_writer(keys[i], depth+4, max_depth, env)+": \"<symbol>\"";
      } else {
          if ((typeof keys[i] === 'string' || keys[i] instanceof String) && keys[i].indexOf(" ")==-1 && keys[i].indexOf("/")==-1 && !keys[i].startsWith("=:")) {
             text+=keys[i]+":"+lisp_writer(obj[keys[i]],depth+4, max_depth, env);
          } else {
    	     text+=lisp_writer(keys[i], depth+4, max_depth, env)+":"+lisp_writer(obj[keys[i]],depth+4, max_depth, env)
          }
      }
    }
    text += bracketStyles[bracketStyle+1];
    //if (depth === 0) console.log("lisp_writer: <- [ object ]",text);
    return text;
  } else if (typeof obj === 'string') {
    // string    
    if (obj==="=:") return obj;
    else if (obj==="=:##") return ",#";
    else if (obj==="=$,@") return "=$,@";
    else if (obj.startsWith("=:")) return obj.substr(2);
    
    obj = obj.replaceAll("\"","\\\"");        
    obj = obj.replaceAll("'","\\'");        
    obj = obj.replaceAll("\n",'\\n');
    obj = obj.replaceAll("\r",'\\r');
    obj = obj.replaceAll("\f",'\\f');
    obj = obj.replaceAll("\b",'\\b');			         
    
    //if (depth == 0) console.log("lisp_writer: <-",'"'+obj+'"');
    
    return '"'+obj+'"';
    
    
  } else {
    //if (depth === 0) console.log("lisp_writer: <- [ other ]",obj);
    return obj; // numbers and booleans
  }
}
function clone(src,depth) {
        if (src===null) {
            return null;
        }
        depth = depth || 0;
        if (depth >= 500) {
          throw new EvalError("too deep");
        }
        if (src===undefined) {
            return undefined;
        } else if (src === null) {
	    return null;
	} else if (src instanceof Function ) {
            return src; 
        } else if (src==this) {
          return this;	
        } else if (src.constructor===String) {	  
	  return src.toString();
	} else if (src.constructor===Number) {
	  return src;
	} else if (src.constructor===Boolean) {
	  return src;
	} else if ((src.constructor===Array)||(src.constructor===Object)) {
	  let obj;
	  if (src.constructor===Array) {
	    obj=[];
	  } else {
	    obj={}
	  }
          for (let idx in src) {
	    obj[idx]=clone(src[idx],depth+1);
	  }
	  return obj;
	} else {
	  return src;
	}
}
class LispSyntaxError extends SyntaxError {
  constructor(json_structure) {
    super(JSON.stringify(json_structure));
    this.name = 'LispSyntaxError';
  }
}


if (typeof AsyncFunction === "undefined") {
  globalThis.AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;
}
export async function init_dlisp(Environment)  {
{
    await async function(){
        globalThis["subtype"]=subtype;
        globalThis["check_true"]=check_true;
        globalThis["clone"]=clone;
        globalThis["lisp_writer"]=lisp_writer;
        globalThis["get_next_environment_id"]=get_next_environment_id;
        globalThis["LispSyntaxError"]=LispSyntaxError;
        return globalThis;
        
    }();
    if (check_true (("undefined"===typeof dlisp_environment_count))){
        await async function(){
            globalThis["dlisp_environment_count"]=0;
            return globalThis;
            
        }()
    };
    {
        let symname;
        symname=await (async function(){
             return "dlisp_env" 
        })();
        {
            await async function(){
                globalThis[symname]=async function(opts) {
                    let subtype=function subtype(value) {  if (value === null) return "null";
  else if (value === undefined) return "undefined";
  else if (value instanceof Array) return "array";
  else if (value.constructor && value.constructor!=null && value.constructor.name!=='Object') {
    return value.constructor.name;
  }
  return typeof value;
};
                    let get_object_path=function(refname) {        if (check_true ((( refname["indexOf"].call(refname,".")>-1)|| ( refname["indexOf"].call(refname,"[")>-1)))){
            {
                let chars;
                let comps;
                let mode;
                let name_acc;
                chars=(refname).split("");
                comps=[];
                mode=0;
                name_acc=[];
                 ( function() {
                    let __for_body__23=function(c) {
                        return   (function(){
                            if (check_true (((c===".")&& (mode===0)))) {
                                {
                                    if (check_true (((name_acc && name_acc.length)>0))){
                                        {
                                            (comps).push((name_acc).join(""))
                                        }
                                    };
                                    return name_acc=[]
                                }
                            } else if (check_true (((mode===0)&& (c==="[")))) {
                                {
                                    mode=1;
                                    if (check_true (((name_acc && name_acc.length)>0))){
                                        {
                                            (comps).push((name_acc).join(""))
                                        }
                                    };
                                    return name_acc=[]
                                }
                            } else if (check_true (((mode===1)&& (c==="]")))) {
                                {
                                    mode=0;
                                    (comps).push((name_acc).join(""));
                                    return name_acc=[]
                                }
                            } else {
                                return (name_acc).push(c)
                            }
                        } )()
                    };
                    let __array__24=[],__elements__22=chars;
                    let __BREAK__FLAG__=false;
                    for(let __iter__21 in __elements__22) {
                        __array__24.push( __for_body__23(__elements__22[__iter__21]));
                        if(__BREAK__FLAG__) {
                             __array__24.pop();
                            break;
                            
                        }
                    }return __array__24;
                     
                })();
                if (check_true (((name_acc && name_acc.length)>0))){
                    (comps).push((name_acc).join(""))
                };
                return comps
            }
        } else {
            return  ( function(){
                let __array_op_rval__25=refname;
                 if (__array_op_rval__25 instanceof Function){
                    return  __array_op_rval__25() 
                } else {
                    return [__array_op_rval__25]
                }
            })()
        }
    };
                    let get_outside_global=function get_outside_global(refname) {  try {    let tfn = new Function("{ if (typeof " + refname + " === 'undefined') { return undefined } else { return "+refname+" } }");    return tfn();  } catch (ex) {    return undefined;  }};
                    ;
                    opts=await (async function(){
                        if (check_true ((opts===undefined))){
                            return new Object()
                        } else {
                            return opts
                        }
                    })();
                    let namespace=(opts.namespace|| "core");
                    ;
                    let in_boot=true;
                    ;
                    let pending_loads=new Object();
                    ;
                    let parent_environment=await (async function(){
                        if (check_true ((namespace==="core"))){
                            return null
                        } else {
                            return opts.parent_environment
                        }
                    })();
                    ;
                    let active_namespace=namespace;
                    ;
                    let contained=(opts.contained|| false);
                    ;
                    let Environment={
                        global_ctx:{
                            scope:new Object(),name:namespace
                        },build_version:(opts.env_version|| DLISP_ENV_VERSION),definitions:(opts.definitions|| new Object()),declarations:(opts.declarations|| {
                            safety:{
                                level:2
                            }
                        })
                    };
                    ;
                    if (check_true (("undefined"===typeof Element))){
                        await async function(){
                            globalThis["Element"]=function() {
                                return false
                            };
                            return globalThis;
                            
                        }()
                    };
                    let id=await get_next_environment_id();
                    ;
                    await async function(){
                        Environment["context"]=Environment.global_ctx;
                        return Environment;
                        
                    }();
                    let unset_compiler=async function() {
                        throw new EvalError(("compiler must be set for "+ namespace));
                        
                    };
                    ;
                    let compiler=unset_compiler;
                    ;
                    let compiler_operators=new Set();
                    ;
                    let special_identity=async function(v) {
                        return v
                    };
                    ;
                    let MAX_SAFE_INTEGER=9007199254740991;
                    ;
                    await async function(){
                        Environment.global_ctx.scope["MAX_SAFE_INTEGER"]=MAX_SAFE_INTEGER;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["MAX_SAFE_INTEGER"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let LispSyntaxError=globalThis.LispSyntaxError;
                    ;
                    await async function(){
                        Environment.global_ctx.scope["LispSyntaxError"]=LispSyntaxError;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["LispSyntaxError"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let sub_type=subtype;
                    ;
                    await async function(){
                        Environment.global_ctx.scope["sub_type"]=sub_type;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["sub_type"]={
                            core_lang:true,description:"Returns a string the determined actual type of the provided value.",usage:["value:*"],tags:["type","class","prototype","typeof","instanceof"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let __VERBOSITY__=0;
                    ;
                    await async function(){
                        Environment.global_ctx.scope["__VERBOSITY__"]=__VERBOSITY__;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["__VERBOSITY__"]={
                            core_lang:true,description:"Set __VERBOSITY__ to a positive integer for verbose console output of system activity.",tags:["debug","compiler","environment","global"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let int=parseInt;
                    ;
                    await async function(){
                        Environment.global_ctx.scope["int"]=int;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["int"]={
                            core_lang:true,usage:"value:string|number",description:"Convenience method for parseInt, should be used in map vs. directly calling parseInt, which will not work directly",tags:["conversion","number"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let float=parseFloat;
                    ;
                    await async function(){
                        Environment.global_ctx.scope["float"]=float;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["float"]={
                            core_lang:true,usage:"value:string|number",description:"Convenience method for parseFloat, should be used in map vs. directly calling parseFloat, which will not work directly",tags:["conversion","number"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let values=new Function("...args","{\n                         let acc = [];\n                         for (let _i in args) {\n                                let value = args[_i];\n                                let type = subtype(value);\n                                if (value instanceof Set)  {\n                                     acc = acc.concat(Array.from(value));\n                                     } else if (type==='array') {\n                                      acc = acc.concat(value);\n                                      } else if (type==='object') {\n                                       acc = acc.concat(Object.values(value))\n                                       } else {\n                                        acc = acc.concat(value);\n                                        }\n                                }\n                         return acc;\n                         }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["values"]=values;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["values"]={
                            core_lang:true,description:("Given a container, returns a list containing the values of each supplied argument. Note that for objects, only the values are returned, not the keys. "+ "If given multiple values, the returned value is a concatentation of all containers provided in the arguments."),usage:["arg0:*","argn:*"],tags:["array","container","object","keys","elements"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let pairs=new Function("obj","{\n                        if (subtype(obj)==='array') {\n                             let rval = [];\n                             for (let i = 0; i < obj.length; i+=2) {\n                                    rval.push([obj[i],obj[i+1]]);\n                                    }\n                             return rval;\n                             } else {\n                              let keys = Object.keys(obj);\n                              let rval = keys.reduce(function(acc,x,i) {\n                                                               acc.push([x,obj[x]])\n                                                               return acc;\n                                                               },[]);\n                              return rval;\n                              }\n                        }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["pairs"]=pairs;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["pairs"]={
                            core_lang:true,description:"Given a passed object or array, returns a list containing a 2 element list for each key/value pair of the supplied object.",tags:["array","container","object"],usage:["obj:object"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let keys=new Function("obj","{  return Object.keys(obj);  }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["keys"]=keys;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["keys"]={
                            core_lang:true,description:"Given an object, returns the keys of the object.",tags:["object","values","keys","indexes","container"],usage:["obj:object"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let take=new Function("place","{ return place.shift() }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["take"]=take;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["take"]={
                            core_lang:true,description:"Takes the first value off the list, and returns the value.",tags:["array","container","mutate","first"],usage:["place:container"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let prepend=new Function("place","thing","{ return place.unshift(thing) }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["prepend"]=prepend;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["prepend"]={
                            core_lang:true,description:"Places the value argument onto the first of the list (unshift) and returns the list.",tags:["array","mutate","container"],usage:["place:array","thing:*"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let first=new Function("x","{ return x[0] }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["first"]=first;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["first"]={
                            core_lang:true,description:"Given an array, returns the first element in the array.",usage:["x:array"],tags:["array","container","elements"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let last=new Function("x","{ return x[x.length - 1] }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["last"]=last;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["last"]={
                            core_lang:true,description:"Given an array, returns the last element in the array.",usage:["x:array"],tags:["array","container","elements","end"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let length=new Function("obj","{\n                         if(obj instanceof Array) {\n                             return obj.length;\n                             } else if (obj instanceof Set) {\n                              return obj.size;\n                              } else if ((obj === undefined)||(obj===null)) {\n                               return 0;\n                               } else if (typeof obj==='object') {\n                                return Object.keys(obj).length;\n                                } else if (typeof obj==='string') {\n                                 return obj.length;\n                                 }\n                         return 0;\n                         }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["length"]=length;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["length"]={
                            core_lang:true,description:("Returns the length of the supplied type (array, object, set, string, number). "+ "If the supplied value is nil or a non-container type, returns 0."),tags:["size","elements","container","dimension","array","set","string","number"],usage:["thing:container"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let conj=new Function("...args","{   let list = [];\n                       if (args[0] instanceof Array) {\n                            list = args[0];\n                            } else {\n                             list = [args[0]];\n                             }\n                       args.slice(1).map(function(x) {\n                                          list = list.concat(x);\n                                          });\n                       return list;\n                       }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["conj"]=conj;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["conj"]={
                            core_lang:true,description:("Conjoins or concatenates things (typically arrays) together and returns an array. "+ "Examples:<br>"+ "(conj [ 1 2 ] [ 3 4 ]) => [ 1 2 3 4 ]<br>"+ "(conj [ 1 2 ] 3 4 ) => [ 1 2 3 4 ]<br>"+ "(conj 1 2 [ 3 4 ]) => [ 1 2 3 4 ]<br>"+ "(conj { `abc: 123 } [ 2 3]) => [ { abc: 123 }, 2, 3 ]<br>"+ "(conj [ 1 2 3 [ 4 ]] [ 5 6 [ 7 ]]) => [ 1 2 3 [ 4 ] 5 6 [ 7 ] ]"),tags:["elements","concat","array","conjoin","append"],usage:["arg0:*","argN:*"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let reverse=new Function("container","{ return container.slice(0).reverse() }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["reverse"]=reverse;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["reverse"]={
                            core_lang:true,usage:["container:list"],description:"Returns a copy of the passed list as reversed.  The original is not changed.",tags:["list","sort","order"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let map=new AsyncFunction("lambda","array_values","{ try {\n                      let rval = [],\n                      tl = array_values.length;\n                      for (let i = 0; i < array_values.length; i++) {\n                             rval.push(await lambda.apply(this,[array_values[i], i, tl]));\n                             }\n                      return rval;\n                      } catch (ex) {\n                       if (lambda === undefined || lambda === null) {\n                             throw new ReferenceError(\"map: lambda argument (position 0) is undefined or nil\")\n                             } else if (array_values === undefined || array_values === null) {\n                              throw new ReferenceError(\"map: container argument (position 1) is undefined or nil\")\n                              } else if (!(lambda instanceof Function)) {\n                               throw new ReferenceError(\"map: lambda argument must be a function: received: \"+ typeof lambda)\n                               } else if (!(array_values instanceof Array)) {\n                                throw new ReferenceError(\"map: invalid array argument, received: \" + typeof array_values)\n                                } else {\n                                 // something else just pass on the error\n                                 throw ex;\n                                 }\n                       }\n                 }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["map"]=map;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["map"]={
                            core_lang:true,description:("Provided a function as a first argument, map calls the function "+ "(item, current_index, total_length) with each element from the second argument, which should be a list. Returns a new list containing the return values resulting from evaluating."),tags:["array","container","elements","iteration"],usage:["lambda:function","elements:array"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let bind=new Function("func,this_arg","{ return func.bind(this_arg) }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["bind"]=bind;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["bind"]={
                            core_lang:true,description:"Given a function and a this value, the bind function returns a new function that has its this keyword set to the provided value in this_arg.",usage:["func:function","this_arg:*"],tags:["bind","this","function"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let to_object=new Function("array_values","{\n                         let obj={}\n                         array_values.forEach((pair)=>{\n                                                 obj[pair[0]]=pair[1]\n                                                 });\n                         return obj;\n                         }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["to_object"]=to_object;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["to_object"]={
                            core_lang:true,description:("Given an array of pairs in the form of [[key value] [key value] ...], constructs an "+ "object with the first array element of the pair as the key and the second "+ "element as the value. A single object is returned."),usage:["paired_array:array"],tags:["conversion","object","array","list","pairs"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let to_array=async function(container) {
                        return await async function(){
                            if (check_true ((container instanceof Array))) {
                                return container
                            } else if (check_true (await (await get_global("is_set?"))(container))) {
                                {
                                    let acc=[];
                                    ;
                                    await container["forEach"].call(container,async function(v) {
                                        return (acc).push(v)
                                    });
                                    return acc
                                }
                            } else if (check_true ((container instanceof String || typeof container==='string'))) {
                                return (container).split("")
                            } else if (check_true ((container instanceof Object))) {
                                return await pairs(container)
                            } else {
                                return await (async function(){
                                    let __array_op_rval__44=container;
                                     if (__array_op_rval__44 instanceof Function){
                                        return await __array_op_rval__44() 
                                    } else {
                                        return [__array_op_rval__44]
                                    }
                                })()
                            }
                        } ()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["to_array"]=to_array;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["to_array"]={
                            core_lang:true,description:("Given a container of type Array, Set, Object, or a string, "+ "it will convert the members of the container to an array form, "+ "and return a new array with the values of the provided container. "+ "In the case of an object, the keys and values will be contained in "+ "paired arrays in the returned array.  A string will be split into "+ "individual characters. If provided a different "+ "type other than the listed values above, the value will be placed "+ "in an array as a single element."),usage:["container:*"],tags:["array","conversion","set","object","string","pairs"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let slice=function(target,from,to) {
                        return   (function(){
                            if (check_true (to)) {
                                return  target["slice"].call(target,from,to)
                            } else if (check_true (from)) {
                                return  target["slice"].call(target,from)
                            } else {
                                throw new SyntaxError("slice requires 2 or 3 arguments");
                                
                            }
                        } )()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["slice"]=slice;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["slice"]={
                            core_lang:true,description:"Given an array, with a starting index and an optional ending index, slice returns a new array containing the elements in the range of provided indices.",usage:["target:array","from:number","to:number"],tags:["array","slicing","dimensions","subset"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let rest=function(x) {
                        return   (function(){
                            if (check_true ((x instanceof Array))) {
                                return  x["slice"].call(x,1)
                            } else if (check_true ((x instanceof String || typeof x==='string'))) {
                                return  x["substr"].call(x,1)
                            } else {
                                return null
                            }
                        } )()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["rest"]=rest;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["rest"]={
                            core_lang:true,description:"Returns a new array containing the elements in the 2nd through last position (the tail) of the provided array.",usage:["x:array"],tags:["array","subset","slice","tail","end"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let second=new Function("x","{ return x[1] }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["second"]=second;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["second"]={
                            core_lang:true,description:"Returns the second element in the provided array (the element at index 1)",tags:["array","subset","element","first"],usage:["x:array"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let third=new Function("x","{ return x[2] }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["third"]=third;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["third"]={
                            core_lang:true,description:"Returns the third element in the provided array (the element at index 2)",tags:["array","subset","element","first"],usage:["x:array"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let chop=new Function("x","{ if (x instanceof Array) { return x.slice(0, x.length-1) } else { return x.substr(0,x.length-1) } }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["chop"]=chop;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["chop"]={
                            core_lang:true,description:"Returns a new container containing all items except the last item.  This function takes either an array or a string.",usage:["container:array|string"],tags:["array","slice","subset","first","string"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let chomp=new Function("x","{ return x.substr(x.length-1) }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["chomp"]=chomp;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["chomp"]={
                            core_lang:true,description:"Given a string returns a new string containing all characters except the last character.",usage:["x:string"],tags:["slice","subset","string"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let not=new Function("x","{ if (check_true(x)) { return false } else { return true } }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["not"]=not;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["not"]={
                            core_lang:true,description:"Returns the logical opposite of the given value.  If given a truthy value, a false is returned.  If given a falsey value, true is returned.",usage:["x:*"],tags:["logic","not","inverse"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let push=new Function("place","thing","{ return place.push(thing) }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["push"]=push;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["push"]={
                            core_lang:true,description:"Given an array as a place, and an arbitrary value, appends (pushes) the value to the end of the array.",usage:["place:array","thing:*"],tags:["array","mutate","append","concat","pop"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let pop=new Function("place","{ return place.pop() }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["pop"]=pop;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["pop"]={
                            core_lang:true,description:"Given an array as an arguments, removes the last value from the given array and returns it.",usage:["place:array"],tags:["array","mutate","take","remove","push"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let list=async function(...args) {
                        return args
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["list"]=list;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["list"]={
                            core_lang:true,description:"Given a set of arbitrary arguments, returns an array containing the provided arguments. If no arguments are provided, returns an empty array.",usage:["arg0:*","argN:*"],tags:["array","container","elements"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let flatten=new Function("x","{ return x.flat(999999999999) } ");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["flatten"]=flatten;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["flatten"]={
                            core_lang:true,description:"Given a nested array structure, returns a flattened version of the array",usage:["x:array"],tags:["array","container","flat","tree"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let jslambda=function(...args) {
                        return  ( function(){
                            let __apply_args__69= flatten(args);
                            return ( Function).apply(this,__apply_args__69)
                        })()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["jslambda"]=jslambda;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["jslambda"]={
                            core_lang:true,description:("Proxy for Javascript Function.  Given a set of string based arguments, all but the last are considered arguments to the "+ "function to be defined.  The last argument is considered the body of the function and should be provided as a string of "+ "javascript. Returns a javascript function. <br>"+ "(jslambda (`a `b) \"{ return a+b }\")<br>"+ "(jslambda () \"{ return new Date() }\")"),usage:["argument_list:array","argn:string"],tags:["javascript","embed","function"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let join=function(...args) {
                        return   (function(){
                            if (check_true ((args.length===1))) {
                                return  args['0']["join"].call(args['0'],"")
                            } else {
                                return  args['1']["join"].call(args['1'],args['0'])
                            }
                        } )()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["join"]=join;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["join"]={
                            core_lang:true,description:("Given an optional joining string and an array of strings, returns a string containing the "+ "elements of the array interlaced with the optional joining string.<br>"+ "(join \",\" [ \"red\" \"fox\" ]) -> \"red,fox\"<br>"+ "(join [\"red\" \"fox\"]) -> redfox"),tags:["array","combine","split","string","text"],usage:["joining_string?:string","container:array"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let lowercase=function(x) {
                        return  x["toLowerCase"]()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["lowercase"]=lowercase;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["lowercase"]={
                            core_lang:true,description:"Given a string, converts all capital characters to lowercase characters.",tags:["string","text","uppercase","case","convert"],usage:["text:string"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let uppercase=function(x) {
                        return  x["toUpperCase"]()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["uppercase"]=uppercase;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["uppercase"]={
                            core_lang:true,description:"Given a string, converts all capital characters to uppercase characters.",tags:["string","text","lowercase","case","convert"],usage:["text:string"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let log=function(...args) {
                        return  ( function(){
                            return ( console.log).apply(this,args)
                        })()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["log"]=log;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["log"]={
                            core_lang:true,description:("log is a shorthand call for console.log by default, and serves to provide a base "+ "abstraction for logging.  Log behavior can be changed by redefining log to "+ "better suit the environmental context.  For example, writing log output to a file "+ "or HTML container."),usage:["args0:*","argsN:*"],tags:["logging","console","output"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let split=new Function("container","token","{ return container.split(token) }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["split"]=split;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["split"]={
                            core_lang:true,description:("Given a string to partition and a string for a splitting token, return an array whose elements "+ "are the text found between each splitting token. <br>"+ "(split \"red,fox\" \",\") => [ \"red\" \"fox\" ]"),tags:["partition","join","separate","string","array"],usage:["string_to_split:string","split_token:string"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let split_by=new Function("token","container","{ return container.split(token) }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["split_by"]=split_by;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["split_by"]={
                            core_lang:true,description:("Given a string for a splitting token and a string to partition, return an array whose elements "+ "are the text found between each splitting token. <br>"+ "(split_by \",\" \"red,fox\") => [ \"red\" \"fox\" ]"),tags:["partition","join","separate","string","array"],usage:["split_token:string","string_to_split:string"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_object_ques_=new Function("x","{ return x instanceof Object }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_object?"]=is_object_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_object?"]={
                            core_lang:true,description:"for the given value x, returns true if x is an Javascript object type.",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_array_ques_=new Function("x","{ return x instanceof Array }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_array?"]=is_array_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_array?"]={
                            core_lang:true,description:"for the given value x, returns true if x is an array.",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_number_ques_=function(x) {
                        return ( subtype(x)==="Number")
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_number?"]=is_number_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_number?"]={
                            core_lang:true,description:"for the given value x, returns true if x is a number.",usage:["arg:value"],tags:["type","condition","subtype","value","what","function"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_function_ques_=function(x) {
                        return (x instanceof Function)
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_function?"]=is_function_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_function?"]={
                            core_lang:true,description:"for the given value x, returns true if x is a function.",usage:["arg:value"],tags:["type","condition","subtype","value","what","function"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_set_ques_=new Function("x","{ return x instanceof Set }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_set?"]=is_set_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_set?"]={
                            core_lang:true,description:"for the given value x, returns true if x is a set.",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_element_ques_=new Function("x","{ return x instanceof Element }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_element?"]=is_element_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_element?"]={
                            core_lang:true,description:"for the given value x, returns true if x is an Element object",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_string_ques_=function(x) {
                        return ((x instanceof String)|| (typeof x==="string"))
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_string?"]=is_string_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_string?"]={
                            core_lang:true,description:"for the given value x, returns true if x is a String object",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_nil_ques_=function(x) {
                        return (x===null)
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_nil?"]=is_nil_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_nil?"]={
                            core_lang:true,description:"for the given value x, returns true if x is exactly equal to nil.",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_regex_ques_=function(x) {
                        return ( sub_type(x)==="RegExp")
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_regex?"]=is_regex_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_regex?"]={
                            core_lang:true,description:"for the given value x, returns true if x is a Javascript regex object",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let is_date_ques_=function(x) {
                        return ( sub_type(x)==="Date")
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["is_date?"]=is_date_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["is_date?"]={
                            core_lang:true,description:"for the given value x, returns true if x is a Date object.",usage:["arg:value"],tags:["type","condition","subtype","value","what"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let ends_with_ques_=new Function("val","text","{ if (text instanceof Array) { return text[text.length-1]===val } else if (subtype(text)=='String') { return text.endsWith(val) } else { return false }}");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["ends_with?"]=ends_with_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["ends_with?"]={
                            core_lang:true,description:"for a given string or array, checks to see if it ends with the given start_value.  Non string args return false.",usage:["end_value:value","collection:array|string"],tags:["string","text","list","array","filter","reduce"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let starts_with_ques_=new Function("val","text","{ if (text instanceof Array) { return text[0]===val } else if (subtype(text)=='String') { return text.startsWith(val) } else { return false }}");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["starts_with?"]=starts_with_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["starts_with?"]={
                            core_lang:true,description:"for a given string or array, checks to see if it starts with the given start_value.  Non string args return false.",usage:["start_value:value","collection:array|string"],tags:["string","text","list","array","filter","reduce","begin"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let delete_prop=new Function("obj","...args","{\n                           if (args.length == 1) {\n                                return delete obj[args[0]];\n                                } else {\n                                 while (args.length > 0) {\n                                         let prop = args.shift();\n                                         delete obj[prop];\n                                         }\n                                 }\n                           return obj;\n                           }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["delete_prop"]=delete_prop;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["delete_prop"]={
                            core_lang:true,description:("Removes the key or keys of the provided object, and returns the modified object.<br>Example:<br>"+ "(defglobal foo { abc: 123 def: 456 ghi: 789 })<br>"+ "(delete_prop foo `abc `def) => { ghi: 789 }<br>"),usage:["obj:objects","key0:string","keyN?:string"],tags:["delete","keys","object","remove","remove_prop","mutate"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let blank_ques_=function(val) {
                        return ((val==null)|| ((val instanceof String || typeof val==='string')&& (val==="")))
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["blank?"]=blank_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["blank?"]={
                            core_lang:true,description:"Given a value, if it is equal (via eq) to nil or to \"\" (an empty string), returns true, otherwise false.",usage:["val:*"],tags:["string","empty","text"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let contains_ques_=new Function("value","container","{ if (!value && !container) { return false }\n                         else if (container === null) { throw new TypeError(\"contains?: passed nil/undefined container value\"); }\n                                            else if (container instanceof Array) return container.includes(value);\n                                            else if (container instanceof Set) return container.has(value);\n                                            else if ((container instanceof String) || typeof container === \"string\") {\n                                                     if (subtype(value) === \"Number\") return container.indexOf(\"\"+value)>-1;\n                                                     else return container.indexOf(value)>-1;\n                                                     }\n                                            else throw new TypeError(\"contains?: passed invalid container type: \"+subtype(container)) }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["contains?"]=contains_ques_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["contains?"]={
                            core_lang:true,description:("Given a target value and container value (array, set, or string), checks if the container has the value. "+ "If it is found, true is returned, otherwise false if returned.  "),tags:["string","array","set","has","includes","indexOf"],usage:["value:*","container:array|set|string"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let make_set=function(vals) {
                        if (check_true ((vals instanceof Array))){
                            return new Set(vals)
                        } else {
                            {
                                let vtype;
                                vtype= sub_type(vals);
                                return   (function(){
                                    if (check_true ((vtype==="Set"))) {
                                        return new Set(vals)
                                    } else if (check_true ((vtype==="object"))) {
                                        return new Set( values(vals))
                                    }
                                } )()
                            }
                        }
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["make_set"]=make_set;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["make_set"]={
                            core_lang:true,description:("If given an array, a new Set is returned containing the elements of the array. "+ "If given an object, a new Set is returned containing the values of the object, and the keys are discarded. "+ "If given a set, new Set is created and returend  from the values of the old set."),usage:["vals:array|object|set"],tags:["array","set","object","values","convert"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let meta_for_symbol=function(quoted_symbol,search_mode) {
                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){
                            {
                                let local_data=(Environment.global_ctx.scope[quoted_symbol]|| Environment.definitions[quoted_symbol]);
                                ;
                                let acc=[];
                                ;
                                if (check_true (search_mode)){
                                    {
                                        if (check_true (local_data)){
                                            {
                                                (acc).push( ( get_global("add"))({
                                                    namespace:namespace,name:quoted_symbol,type: subtype(local_data)
                                                }, ( function(){
                                                    let it;
                                                    it=Environment.definitions[quoted_symbol];
                                                    if (check_true (it)){
                                                        return it
                                                    } else {
                                                        return new Object()
                                                    }
                                                })()))
                                            }
                                        };
                                        if (check_true (parent_environment)){
                                            {
                                                {
                                                    let __collector;
                                                    let __result;
                                                    let __action;
                                                    __collector=[];
                                                    __result=null;
                                                    __action=function(info) {
                                                        return (acc).push(info)
                                                    };
                                                    ;
                                                     ( function() {
                                                        let __for_body__121=function(__item) {
                                                            __result= __action(__item);
                                                            if (check_true (__result)){
                                                                return (__collector).push(__result)
                                                            }
                                                        };
                                                        let __array__122=[],__elements__120= ( function() {
                                                            {
                                                                 let __call_target__= parent_environment["meta_for_symbol"].call(parent_environment,quoted_symbol,true), __call_method__="flat";
                                                                return  __call_target__[__call_method__].call(__call_target__,1)
                                                            } 
                                                        })();
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__119 in __elements__120) {
                                                            __array__122.push( __for_body__121(__elements__120[__iter__119]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__122.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__122;
                                                         
                                                    })();
                                                    __collector
                                                }
                                            }
                                        };
                                        if (check_true (( length( keys(children))>0))){
                                            {
                                                {
                                                    let __collector;
                                                    let __result;
                                                    let __action;
                                                    __collector=[];
                                                    __result=null;
                                                    __action=function(details) {
                                                        return (acc).push(details)
                                                    };
                                                    ;
                                                     ( function() {
                                                        let __for_body__125=function(__item) {
                                                            __result= __action(__item);
                                                            if (check_true (__result)){
                                                                return (__collector).push(__result)
                                                            }
                                                        };
                                                        let __array__126=[],__elements__124= ( function(){
                                                            let ____collector__127=  function(){
                                                                return []
                                                            };
                                                            let ____result__128=  function(){
                                                                return null
                                                            };
                                                            let ____action__129=  function(){
                                                                return function(child_data) {
                                                                    if (check_true ( not((child_data['0']=== ( get_global("current_namespace"))())))){
                                                                        {
                                                                            return  child_data['1']["meta_for_symbol"].call(child_data['1'],quoted_symbol)
                                                                        }
                                                                    }
                                                                }
                                                            };
                                                            {
                                                                let __collector= ____collector__127();
                                                                ;
                                                                let __result= ____result__128();
                                                                ;
                                                                let __action= ____action__129();
                                                                ;
                                                                ;
                                                                 ( function() {
                                                                    let __for_body__132=function(__item) {
                                                                        __result= __action(__item);
                                                                        if (check_true (__result)){
                                                                            return (__collector).push(__result)
                                                                        }
                                                                    };
                                                                    let __array__133=[],__elements__131= pairs(children);
                                                                    let __BREAK__FLAG__=false;
                                                                    for(let __iter__130 in __elements__131) {
                                                                        __array__133.push( __for_body__132(__elements__131[__iter__130]));
                                                                        if(__BREAK__FLAG__) {
                                                                             __array__133.pop();
                                                                            break;
                                                                            
                                                                        }
                                                                    }return __array__133;
                                                                     
                                                                })();
                                                                return __collector
                                                            }
                                                        })();
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__123 in __elements__124) {
                                                            __array__126.push( __for_body__125(__elements__124[__iter__123]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__126.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__126;
                                                         
                                                    })();
                                                    __collector
                                                }
                                            }
                                        };
                                        return acc
                                    }
                                } else {
                                    {
                                        quoted_symbol= ( function(){
                                            if (check_true ( starts_with_ques_( ( function(){
                                                 return "=:" 
                                            })(),quoted_symbol))){
                                                return  quoted_symbol["substr"].call(quoted_symbol,2)
                                            } else {
                                                return quoted_symbol
                                            }
                                        })();
                                        {
                                            let it;
                                            it=Environment.definitions[quoted_symbol];
                                            if (check_true (it)){
                                                return  ( get_global("add"))({
                                                    namespace:namespace,type: sub_type(local_data),name:quoted_symbol
                                                },it)
                                            } else {
                                                return null
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["meta_for_symbol"]=meta_for_symbol;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["meta_for_symbol"]={
                            core_lang:true,description:("Given a quoted symbol and a boolean indicating whether or not all namespaces should be searched, returns "+ "the meta data associated with the symbol for each environment.  If search mode is requested, the value returned "+ "is an array, since there can be symbols with the same name in different environments. If no values are found "+ "an empty array is returned.  If not in search mode, meta_for_symbol searches the current namespace "+ "only, and if a matching symbol is found, returns an object with all found metadata, otherwise nil is returned."),usage:["quoted_symbol:string","search_mode:boolean"],tags:["describe","meta","help","definition","symbol","metadata"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let describe=async function(quoted_symbol,search_mode) {
                        let internal_results=await meta_for_symbol(quoted_symbol,true);
                        ;
                        if (check_true (((internal_results instanceof Array)&& internal_results['0']))){
                            if (check_true (search_mode)){
                                return internal_results
                            } else {
                                return await first(internal_results)
                            }
                        } else {
                            {
                                let external_results=await get_outside_global(quoted_symbol);
                                ;
                                if (check_true (external_results)){
                                    {
                                        let detail={
                                            location:"external",type:await subtype(external_results),name:quoted_symbol,namespace:"EXTERNAL",description:("This is not a bound symbol within the Juno Environment.  "+ "If it is to be used, it is recommended to create a reference to it with "+ "`(defglobal "+ quoted_symbol+ " "+ quoted_symbol+ " { `description: \"...\" })`")
                                        };
                                        ;
                                        if (check_true (search_mode)){
                                            return await (async function(){
                                                let __array_op_rval__136=detail;
                                                 if (__array_op_rval__136 instanceof Function){
                                                    return await __array_op_rval__136() 
                                                } else {
                                                    return [__array_op_rval__136]
                                                }
                                            })()
                                        } else {
                                            return detail
                                        }
                                    }
                                } else {
                                    return null
                                }
                            }
                        }
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["describe"]=describe;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["describe"]={
                            core_lang:true,description:"Given a quoted symbol returns the relevant metadata pertinent to the current namespace context.",usage:["quoted_symbol:string","search_mode:boolean"],tags:["meta","help","definition","symbol","metadata","info","meta_for_symbol"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let undefine=function(quoted_symbol) {
                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){
                            {
                                let namespace_identity;
                                let parent_call;
                                let child_call;
                                let target_symbol;
                                namespace_identity=(quoted_symbol).split("/");
                                parent_call=null;
                                child_call=null;
                                target_symbol=null;
                                ;
                                return   (function(){
                                    if (check_true ((((namespace_identity.length===1)&& Environment.global_ctx.scope[namespace_identity['0']])|| ((namespace_identity.length>1)&& (namespace_identity['0']===namespace))))) {
                                        {
                                            target_symbol= ( function(){
                                                if (check_true ((namespace_identity.length>1))){
                                                    return namespace_identity['1']
                                                } else {
                                                    return namespace_identity['0']
                                                }
                                            })();
                                             delete_prop(Environment.definitions,target_symbol);
                                            if (check_true (Environment.global_ctx.scope[target_symbol])){
                                                return  delete_prop(Environment.global_ctx.scope,target_symbol)
                                            } else {
                                                return false
                                            }
                                        }
                                    } else if (check_true (((namespace_identity.length>1)&& parent_environment))) {
                                        {
                                            parent_call= parent_environment["get_global"].call(parent_environment,"undefine");
                                            return (parent_call)(quoted_symbol)
                                        }
                                    } else if (check_true (((namespace_identity.length>1)&& children[namespace_identity['0']]))) {
                                        {
                                            child_call= ( function() {
                                                {
                                                     let __call_target__=children[namespace_identity['0']], __call_method__="get_global";
                                                    return  __call_target__[__call_method__].call(__call_target__,"undefine")
                                                } 
                                            })();
                                            return  child_call(quoted_symbol)
                                        }
                                    } else {
                                        return false
                                    }
                                } )()
                            }
                        } else {
                            throw new SyntaxError("undefine requires a quoted symbol");
                            
                        }
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["undefine"]=undefine;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["undefine"]={
                            core_lang:true,description:("Given a quoted symbol removes the symbol and any definition information from the namespace. "+ "If the namespace is fully-qualified, then the symbol will be removed from the specified namespace "+ "instead of the currently active namespace. If the symbol is successfully removed, the function "+ "will return true, otherwise if it is not found, false will be returned.  Note that if the "+ "specified symbol is non-qualified, but exists in a different, accessible namespace, but the "+ "symbol isn't present in the current namespace, the symbol will not be deleted.  The environment "+ "is not searched and therefore symbols have to be explicitly fully-qualified for any effect "+ "of this function outside the current namespace."),usage:["quoted_symbol:string"],tags:["symbol","delete","remove","unintern","reference","value"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let eval_exp=async function(expression) {
                        return await (async function(){
                            let __array_op_rval__141=expression;
                             if (__array_op_rval__141 instanceof Function){
                                return await __array_op_rval__141() 
                            } else {
                                return [__array_op_rval__141]
                            }
                        })()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["eval_exp"]=eval_exp;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["eval_exp"]={
                            core_lang:true,description:("Evaluates the given expression and returns the value."),usage:["expression:*"],tags:["eval","evaluation","expression"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let indirect_new=function(...args) {
                        
                             {
                               let targetClass = args[0];
                               if (subtype(targetClass)==="String") {
                                    let tmpf=new Function("{ return "+targetClass+" }");
                                    targetClass = tmpf();
                                    }
                               if (args.length==1) {
                                    let f = function(Class) {
                                                      return new (Function.prototype.bind.apply(Class, args));
                                                      }
                                    let rval = f.apply(this,[targetClass]);
                                    return rval;
                                    } else {
                                     let f = function(Class) {
                                                       return new (Function.prototype.bind.apply(Class, args));
                                                       }
                                     let rval = f.apply(this,[targetClass].concat(args.slice(1)));
                                     return rval;
                                     }
                               } 
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["indirect_new"]=indirect_new;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["indirect_new"]={
                            core_lang:true,description:("Used by the compiler for implementation of the new operator and shouldn't be directly called by "+ "user programs.  The new operator should be called instead."),usage:["arg0:*","argsN:*"],tags:["system","compiler","internal"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let range=function(...args) {
                        let from_to;
                        let step;
                        let idx;
                        let acc;
                        from_to= ( function(){
                            if (check_true (args['1'])){
                                return [parseInt(args['0']),parseInt(args['1'])]
                            } else {
                                return [0,parseInt(args['0'])]
                            }
                        })();
                        step= ( function(){
                            if (check_true (args['2'])){
                                return parseFloat(args['2'])
                            } else {
                                return 1
                            }
                        })();
                        idx=from_to['0'];
                        acc=[];
                         ( get_global("assert"))((step>0),"range: step must be > 0");
                         ( get_global("assert"))((from_to['1']>=from_to['0']),"range: lower bound must be greater or equal than upper bound");
                         ( function(){
                             let __test_condition__146=function() {
                                return (idx<from_to['1'])
                            };
                            let __body_ref__147=function() {
                                (acc).push(idx);
                                return idx+=step
                            };
                            let __BREAK__FLAG__=false;
                            while( __test_condition__146()) {
                                  __body_ref__147();
                                 if(__BREAK__FLAG__) {
                                     break;
                                    
                                }
                            } ;
                            
                        })();
                        return acc
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["range"]=range;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["range"]={
                            core_lang:true,usage:["start_or_end:number","end:number","step:number"],description:("Range has a variable form depending on the amount of arguments provided to the function when "+ "calling it. If provided one argument, range will produce an array from 0 up to, but not including "+ "the provided value. If given two arguments, the first argument will be the starging value and "+ "the last value will be used as the upper bounding value, returning an array with elements starting "+ "at the start value and up to, but not including the bounding value. If given a third value, the "+ "value will be interpreted as the step value, and the returned array will contain values that "+ "increment by the step amount.  Range will throw an error if a negative range is specified. "+ "For negative ranges see neg_range."+ "<br><br>Examples:<br>"+ "(range 5) -> [ 0 1 2 3 4 ]<br>"+ "(range 10 15) -> [ 10 11 12 13 14 ]<br>"+ "(range 10 20) -> [ 10 12 14 16 18 ]<br>"+ "(range -5 0) -> [ -5 -4 -3 -2 -1 ]<br>"+ "(range -3 3) -> [ -3, -2, -1, 0, 1, 2 ]<br>")
                        };
                        return Environment.definitions;
                        
                    }()];
                    let add=new Function("...args","{\n                   let acc;\n                   if (typeof args[0]===\"number\") {\n                        acc = 0;\n                        } else if (args[0] instanceof Array) {\n                         return args[0].concat(args.slice(1));\n                         } else if (typeof args[0]==='object') {\n                          let rval = {};\n                          for (let i in args) {\n                                 if (typeof args[i] === 'object') {\n                                      for (let k in args[i]) {\n                                             rval[k] = args[i][k];\n                                             }\n                                      }\n                                 }\n                          return rval;\n                          } else {\n                           acc = \"\";\n                           }\n                   for (let i in args) {\n                          acc += args[i];\n                          }\n                   return acc;\n                   }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["add"]=add;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["add"]={
                            core_lang:true,description:("Add is an overloaded function that, based on the first argument provided, determines how to 'add' the arguments. "+ "If provided a number as a first argument, then it will assume the rest of the arguments are numbers and add them "+ "to the first, returning the numerical sum of the arguments. If an object, it will merge the keys of the provided "+ "arguments, returning a combined object.  Be aware that if merging objects, if arguments that have the same keys "+ "the argument who appears last with the key will prevail.  If called with an array as a first argument, the "+ "subsequent arguments will be added to the first via 'concat'.  If strings, the strings will be joined into a "+ "single string and returned.<br>"+ "(add 1 2 3) => 6<br>"+ "(add { `abc: 123 `def: 345 } { `def: 456 }) => { abc: 123, def: 456 }"+ "(add [ 1 2 3 ] [ 4 5 6] 7) => [ 1, 2, 3, [ 4, 5, 6 ], 7 ]<br>"+ "(add \"abc\" \"def\") => \"abcdef\"<br><br>"+ "Note that add doesn't typically need to explicily called.  The compiler will try and determine the best "+ "way to handle adding based on the arguments to be added, so the + operator should be used instead, since "+ "it gives the compiler an opportunity to inline if possible."),usage:["arg0:*","argN:*"],tags:["add","+","sum","number","addition","merge","join","concat"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let merge_objects=new Function("x","{\n                             let rval = {};\n                             for (let i in x) {\n                                    if (typeof i === 'object') {\n                                         for (let k in x[i]) {\n                                                rval[k] = x[i][k];\n                                                }\n                                         }\n                                    }\n                             return rval;\n                             }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["merge_objects"]=merge_objects;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["merge_objects"]={
                            core_lang:true,description:("Merge objects takes an array of objects and returns an object whose keys and values are "+ "the sum of the provided objects (same behavior as add with objects).  If objects have the "+ "same keys, the last element in the array with the duplicate key will be used to provide the "+ "value for that key."),usage:["objects:array"],tags:["add","merge","keys","values","objects","value"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let index_of=new Function("value","container",("{ return container.indexOf(value) }"));
                    ;
                    await async function(){
                        Environment.global_ctx.scope["index_of"]=index_of;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["index_of"]={
                            core_lang:true,description:"Given a value and an array container, returns the index of the value in the array, or -1 if not found.",usage:["value:number|string|boolean","container:array"],tags:["find","position","index","array","contains"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let resolve_path=new Function("path,obj","{\n                            if (typeof path==='string') {\n                                 path = path.split(\".\");\n                                 }\n                            let s=obj;\n                            return path.reduce(function(prev, curr) {\n                                                         return prev ? prev[curr] : undefined\n                                                         }, obj || {})\n                            }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["resolve_path"]=resolve_path;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["resolve_path"]={
                            core_lang:true,description:("Given a path and a tree structure, which can be either an array or an object, "+ "traverse the tree structure and return the value at the path if it exists, otherwise "+ "undefined is returned.<br>"+ "(resolve_path [ 2 1 ] [ 1 2 [ 3 4 5 ] 6 7]) => 4)"),usage:["path:array","tree_structure:array|object"],tags:["find","position","index","path","array","tree","contains","set_path"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let min_value=new Function("elements","{ return Math.min(...elements); }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["min_value"]=min_value;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["min_value"]={
                            core_lang:true,description:"Returns the minimum value in the provided array of numbers.",usage:["elements:array"],tags:["min","max_value","array","elements","minimum","number"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let max_value=new Function("elements","{ return Math.max(...elements); }");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["max_value"]=max_value;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["max_value"]={
                            core_lang:true,description:"Returns the maximum value in the provided array of numbers.",usage:["elements:array"],tags:["min","max_value","array","elements","minimum","number"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let interlace=async function(...args) {
                        let min_length;
                        let rlength_args;
                        let rval;
                        min_length=await (async function(){
                             return await min_value(await (async function(){
                                 return await map(length,args) 
                            })()) 
                        })();
                        rlength_args=await range(await length(args));
                        rval=[];
                        await (async function() {
                            let __for_body__164=async function(i) {
                                return await (async function() {
                                    let __for_body__168=async function(j) {
                                        return (rval).push(await (async function(){
                                            let __targ__170=args[j];
                                            if (__targ__170){
                                                 return(__targ__170)[i]
                                            } 
                                        })())
                                    };
                                    let __array__169=[],__elements__167=rlength_args;
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__166 in __elements__167) {
                                        __array__169.push(await __for_body__168(__elements__167[__iter__166]));
                                        if(__BREAK__FLAG__) {
                                             __array__169.pop();
                                            break;
                                            
                                        }
                                    }return __array__169;
                                     
                                })()
                            };
                            let __array__165=[],__elements__163=await range(min_length);
                            let __BREAK__FLAG__=false;
                            for(let __iter__162 in __elements__163) {
                                __array__165.push(await __for_body__164(__elements__163[__iter__162]));
                                if(__BREAK__FLAG__) {
                                     __array__165.pop();
                                    break;
                                    
                                }
                            }return __array__165;
                             
                        })();
                        return rval
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["interlace"]=interlace;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["interlace"]={
                            core_lang:true,usage:["list0:array","list1:array","listn?:array"],description:"Returns a list containing a consecutive values from each list, in argument order.  I.e. list0.0 list1.0 listn.0 list0.1 list1.1 listn.1 ...",tags:["list","array","join","merge"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let trim=function(x) {
                        return  x["trim"]()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["trim"]=trim;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["trim"]={
                            core_lang:true,description:"Removes leading and trailing spaces from the provided string value.",usage:["value:string"],tags:["string","spaces","clean","squeeze","leading","trailing","space"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let assert=function(assertion_form,failure_message) {
                        if (check_true (assertion_form)){
                            return assertion_form
                        } else {
                            throw new EvalError((failure_message|| "assertion failure"));
                            
                        }
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["assert"]=assert;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["assert"]={
                            core_lang:true,description:"If the evaluated assertion form is true, the result is returned, otherwise an EvalError is thrown with the optionally provided failure message.",usage:["form:*","failure_message:string?"],tags:["true","error","check","debug","valid","assertion"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let unquotify=async function(val) {
                        let dval;
                        dval=val;
                        if (check_true (await starts_with_ques_("\"",dval))){
                            dval=await dval["substr"].call(dval,1,(dval.length- 2))
                        };
                        if (check_true (await starts_with_ques_("=:",dval))){
                            dval=await dval["substr"].call(dval,2)
                        };
                        return dval
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["unquotify"]=unquotify;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["unquotify"]={
                            core_lang:true,description:"Removes binding symbols and quotes from a supplied value.  For use in compile time function such as macros.",usage:["val:string"],tags:["macro","quote","quotes","desym"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let or_args=async function(argset) {
                        let is_true;
                        is_true=false;
                        await (async function() {
                            let __for_body__181=async function(elem) {
                                if (check_true (elem)){
                                    {
                                        is_true=true;
                                        return __BREAK__FLAG__=true;
                                        return
                                    }
                                }
                            };
                            let __array__182=[],__elements__180=argset;
                            let __BREAK__FLAG__=false;
                            for(let __iter__179 in __elements__180) {
                                __array__182.push(await __for_body__181(__elements__180[__iter__179]));
                                if(__BREAK__FLAG__) {
                                     __array__182.pop();
                                    break;
                                    
                                }
                            }return __array__182;
                             
                        })();
                        return is_true
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["or_args"]=or_args;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["or_args"]={
                            core_lang:true,description:"Provided an array of values, returns true if any of the values are true, otherwise will return false.",usage:["argset:array"],tags:["or","true","false","array","logic"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let special_operators=async function() {
                        return await make_set(await (async function(){
                             return await compiler([],{
                                special_operators:true,env:Environment
                            }) 
                        })())
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["special_operators"]=special_operators;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["special_operators"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let defclog=async function(opts) {
                        let style;
                        style=("padding: 5px;"+ await (async function(){
                            if (check_true (opts.background)){
                                return ("background: "+ opts.background+ ";")
                            } else {
                                return ""
                            }
                        })()+ await (async function(){
                            if (check_true (opts.color)){
                                return ("color: "+ opts.color+ ";")
                            }
                        })()+ "");
                        return async function(...args) {
                            return await (async function(){
                                let __target_arg__189=[].concat(await conj(await (async function(){
                                    let __array_op_rval__190=style;
                                     if (__array_op_rval__190 instanceof Function){
                                        return await __array_op_rval__190() 
                                    } else {
                                        return [__array_op_rval__190]
                                    }
                                })(),args));
                                if(!__target_arg__189 instanceof Array){
                                    throw new TypeError("Invalid final argument to apply - an array is required")
                                }let __pre_arg__191=("%c"+ await (async function(){
                                    if (check_true (opts.prefix)){
                                        return opts.prefix
                                    } else {
                                        return (args).shift()
                                    }
                                })());
                                __target_arg__189.unshift(__pre_arg__191);
                                return (console.log).apply(this,__target_arg__189)
                            })()
                        }
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["defclog"]=defclog;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["defclog"]={
                            core_lang:true,description:("Given a description object, containing specific keys, returns a customized console logging "+ "function implements the given requested properties.<br>Options<br>"+ "prefix:string:The prefix to log prior to any supplied user arguments.<br>"+ "color:string:The text color to use on the prefix (or initial argument if no prefix)<br>"+ "background:string:The background coloe to use on the prefix (or initial argument if no prefix)<br>"),usage:["options:object"],tags:["log","logging","console","utility"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let NOT_FOUND=new ReferenceError("not found");
                    ;
                    await async function(){
                        Environment.global_ctx.scope["NOT_FOUND"]=NOT_FOUND;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["NOT_FOUND"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let check_external_env_default=await (async function(){
                        if (check_true ((namespace==="core"))){
                            return true
                        } else {
                            return false
                        }
                    })();
                    ;
                    await async function(){
                        Environment.global_ctx.scope["check_external_env_default"]=check_external_env_default;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["check_external_env_default"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let _star_namespace_star_=namespace;
                    ;
                    await async function(){
                        Environment.global_ctx.scope["*namespace*"]=_star_namespace_star_;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["*namespace*"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let pending_ns_loads=new Object();
                    ;
                    await async function(){
                        Environment.global_ctx.scope["pending_ns_loads"]=pending_ns_loads;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["pending_ns_loads"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let pend_load=async function(from_namespace,target_namespace,symbol,initializer) {
                        if (check_true ((null==pending_ns_loads[from_namespace]))){
                            {
                                await async function(){
                                    pending_ns_loads[from_namespace]=[];
                                    return pending_ns_loads;
                                    
                                }()
                            }
                        };
                        (pending_ns_loads[from_namespace]).push({
                            symbol:symbol,source_ns:from_namespace,target_ns:target_namespace,initializer:await (async function(){
                                 return ["=:quote",initializer] 
                            })()
                        });
                        return initializer
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["pend_load"]=pend_load;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["pend_load"]={
                            core_lang:true,description:("When used as an initializer wrapper via the use_symbols macro, the wrapped "+ "initializer will not be loaded until the from_namespace is loaded to ensure "+ "that the wrapped initializer won't fail due to not yet loaded dependencies."),usage:["from_namespace:string","target_namespace:string","symbol:string","initializer:array"],tags:["symbol","definitions","namespace","scope","dependency","dependencies","require"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let load_pends=async function(from_namespace) {
                        if (check_true (pending_ns_loads[from_namespace])){
                            {
                                let acc=[];
                                ;
                                acc=await (async function() {
                                    let __for_body__207=async function(load_instruction) {
                                        return ["=:use_symbols",load_instruction.source_ns,[load_instruction.symbol],load_instruction.target_ns]
                                    };
                                    let __array__208=[],__elements__206=pending_ns_loads[from_namespace];
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__205 in __elements__206) {
                                        __array__208.push(await __for_body__207(__elements__206[__iter__205]));
                                        if(__BREAK__FLAG__) {
                                             __array__208.pop();
                                            break;
                                            
                                        }
                                    }return __array__208;
                                     
                                })();
                                await console.log("load_pends: ",from_namespace,"->",acc);
                                (await Environment.eval(await async function(){
                                    return acc
                                }(),null));
                                return true
                            }
                        }
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["load_pends"]=load_pends;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["load_pends"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let symbols=async function(opts) {
                        return await async function(){
                            if (check_true ((null==opts))) {
                                return await keys(Environment.global_ctx.scope)
                            } else if (check_true (opts.unique)) {
                                {
                                    let no_includes=await make_set(await conj(["meta_for_symbol","describe","undefine","*namespace*","pend_load","symbols","set_global","get_global","symbol_definition","compile","env_log","evaluate_local","evaluate","eval_struct","set_compiler","clone","eval","add_escape_encoding","get_outside_global","as_lisp","lisp_writer","clone_to_new","save_env","null","compiler"],built_ins));
                                    ;
                                    {
                                        let __collector;
                                        let __result;
                                        let __action;
                                        __collector=[];
                                        __result=null;
                                        __action=async function(sym) {
                                            if (check_true (await no_includes["has"].call(no_includes,sym))){
                                                return null
                                            } else {
                                                return sym
                                            }
                                        };
                                        ;
                                        await (async function() {
                                            let __for_body__213=async function(__item) {
                                                __result=await __action(__item);
                                                if (check_true (__result)){
                                                    return (__collector).push(__result)
                                                }
                                            };
                                            let __array__214=[],__elements__212=await keys(Environment.global_ctx.scope);
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__211 in __elements__212) {
                                                __array__214.push(await __for_body__213(__elements__212[__iter__211]));
                                                if(__BREAK__FLAG__) {
                                                     __array__214.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__214;
                                             
                                        })();
                                        return __collector
                                    }
                                }
                            }
                        } ()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["symbols"]=symbols;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["symbols"]={
                            core_lang:true,description:("Returns an array of the defined global symbols for the local environment.  "+ "If opts.unique is true, only symbols that are not part of the built ins are "+ "included."),usage:["opts:object"],tags:["symbol","names","definitions","values","scope"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let set_global=function(refname,value,meta,is_constant,target_namespace,contained_req) {
                          (function(){
                            if (check_true ( not((typeof refname==="string")))) {
                                throw new TypeError("reference name must be a string type");
                                
                            } else if (check_true (((Environment===value)|| (Environment.global_ctx===value)|| (Environment.global_ctx.scope===value)))) {
                                {
                                    throw new EvalError("cannot set the environment scope as a global value");
                                    
                                }
                            }
                        } )();
                        if (check_true ( resolve_path( ( function(){
                            let __array_op_rval__217=refname;
                             if (__array_op_rval__217 instanceof Function){
                                return  __array_op_rval__217("constant") 
                            } else {
                                return [__array_op_rval__217,"constant"]
                            }
                        })(),Environment.definitions))){
                            {
                                throw new TypeError(("Assignment to constant variable "+ refname));
                                
                            }
                        };
                        let namespace_identity= ( function(){
                            if (check_true (target_namespace)){
                                return  ( function(){
                                    let __array_op_rval__218=target_namespace;
                                     if (__array_op_rval__218 instanceof Function){
                                        return  __array_op_rval__218(refname) 
                                    } else {
                                        return [__array_op_rval__218,refname]
                                    }
                                })()
                            } else {
                                return (refname).split("/")
                            }
                        })();
                        ;
                        return   (function(){
                            if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace===namespace_identity['0']))))) {
                                return  parent_environment["set_global"].call(parent_environment,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'],(contained|| contained_req))
                            } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {
                                {
                                    if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){
                                        return  ( function() {
                                            {
                                                 let __call_target__=children[namespace_identity['0']], __call_method__="set_global";
                                                return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'])
                                            } 
                                        })()
                                    } else {
                                        throw new EvalError(("namespace "+ namespace_identity['0']+ " doesn't exist"));
                                        
                                    }
                                }
                            } else {
                                try {
                                    let comps= get_object_path( ( function(){
                                        if (check_true ((1===namespace_identity.length))){
                                            return namespace_identity['0']
                                        } else {
                                            return namespace_identity['1']
                                        }
                                    })());
                                    ;
                                      (function(){
                                        Environment.global_ctx.scope[comps['0']]=value;
                                        return Environment.global_ctx.scope;
                                        
                                    })();
                                    if (check_true (((meta instanceof Object)&&  not((meta instanceof Array))))){
                                        {
                                            if (check_true (is_constant)){
                                                {
                                                      (function(){
                                                        meta["constant"]=true;
                                                        return meta;
                                                        
                                                    })()
                                                }
                                            };
                                              (function(){
                                                Environment.definitions[comps['0']]=meta;
                                                return Environment.definitions;
                                                
                                            })()
                                        }
                                    } else {
                                        if (check_true (is_constant)){
                                            {
                                                  (function(){
                                                    Environment.definitions[comps['0']]={
                                                        constant:true
                                                    };
                                                    return Environment.definitions;
                                                    
                                                })()
                                            }
                                        }
                                    };
                                    return Environment.global_ctx.scope[comps['0']]
                                } catch (__exception__219) {
                                    if (__exception__219 instanceof Error) {
                                        let e=__exception__219;
                                        {
                                            {
                                                let message=("Error: set_global: "+ _star_namespace_star_+ "symbol name: "+ refname+ ": "+ e.message);
                                                ;
                                                 console.error(message,[]);
                                                  (function(){
                                                    e["message"]=message;
                                                    return e;
                                                    
                                                })();
                                                throw e;
                                                
                                            }
                                        }
                                    }
                                }
                            }
                        } )()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["set_global"]=set_global;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["set_global"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let get_global=function(refname,value_if_not_found,suppress_check_external_env,target_namespace,path_comps,contained_req) {
                        return   (function(){
                            if (check_true ( not((typeof refname==="string")))) {
                                throw new TypeError("reference name must be a string type");
                                
                            } else if (check_true ((refname==="Environment"))) {
                                return Environment
                            } else if (check_true ( compiler_operators["has"].call(compiler_operators,refname))) {
                                return special_identity
                            } else {
                                {
                                    let namespace_identity;
                                    let comps;
                                    let refval;
                                    let symbol_name;
                                    let check_external_env;
                                    namespace_identity= ( function(){
                                        if (check_true (target_namespace)){
                                            return  ( function(){
                                                let __array_op_rval__227=target_namespace;
                                                 if (__array_op_rval__227 instanceof Function){
                                                    return  __array_op_rval__227(refname) 
                                                } else {
                                                    return [__array_op_rval__227,refname]
                                                }
                                            })()
                                        } else {
                                            return (refname).split("/")
                                        }
                                    })();
                                    comps=(path_comps||  get_object_path( ( function(){
                                        if (check_true ((1===namespace_identity.length))){
                                            return namespace_identity['0']
                                        } else {
                                            return namespace_identity['1']
                                        }
                                    })()));
                                    refval=null;
                                    symbol_name=null;
                                    check_external_env= ( function(){
                                        if (check_true (suppress_check_external_env)){
                                            return false
                                        } else {
                                            return check_external_env_default
                                        }
                                    })();
                                    return   (function(){
                                        if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {
                                            return  parent_environment["get_global"].call(parent_environment,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps,(contained|| contained_req))
                                        } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {
                                            {
                                                if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){
                                                    return  ( function() {
                                                        {
                                                             let __call_target__=children[namespace_identity['0']], __call_method__="get_global";
                                                            return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps)
                                                        } 
                                                    })()
                                                } else {
                                                    {
                                                        throw new EvalError(("namespace "+ namespace_identity['0']+ " doesn't exist"));
                                                        
                                                    }
                                                }
                                            }
                                        } else {
                                            {
                                                refval=Environment.global_ctx.scope[comps['0']];
                                                if (check_true (((undefined===refval)&& (namespace_identity.length===1)&& parent_environment))){
                                                    {
                                                        let rval= parent_environment["get_global"].call(parent_environment,refname,value_if_not_found,suppress_check_external_env,null,comps,(contained|| contained_req));
                                                        ;
                                                        return rval
                                                    }
                                                } else {
                                                    {
                                                        if (check_true (((undefined===refval)&& check_external_env))){
                                                            refval= ( function(){
                                                                if (check_true (check_external_env)){
                                                                    return ( get_outside_global(comps['0'])|| NOT_FOUND)
                                                                } else {
                                                                    return NOT_FOUND
                                                                }
                                                            })()
                                                        };
                                                        return   (function(){
                                                            if (check_true (((NOT_FOUND===refval)&&  not((undefined===value_if_not_found))))) {
                                                                return value_if_not_found
                                                            } else if (check_true ((NOT_FOUND===refval))) {
                                                                {
                                                                    throw new ReferenceError(("symbol not found: "+  ( function(){
                                                                        if (check_true ((namespace_identity.length>1))){
                                                                            return  add(namespace,"/",namespace_identity['1'])
                                                                        } else {
                                                                            return  add(namespace,"/",namespace_identity['0'])
                                                                        }
                                                                    })()));
                                                                    
                                                                }
                                                            } else if (check_true ((comps.length===1))) {
                                                                return refval
                                                            } else if (check_true ((comps.length>1))) {
                                                                {
                                                                    return  resolve_path( rest(comps),refval)
                                                                }
                                                            } else {
                                                                {
                                                                     console.warn("get_global: condition fall through: ",comps);
                                                                    return NOT_FOUND
                                                                }
                                                            }
                                                        } )()
                                                    }
                                                }
                                            }
                                        }
                                    } )()
                                }
                            }
                        } )()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["get_global"]=get_global;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["get_global"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let symbol_definition=async function(symname,target_namespace) {
                        let namespace_identity;
                        namespace_identity=await (async function(){
                            if (check_true (target_namespace)){
                                return await (async function(){
                                    let __array_op_rval__230=target_namespace;
                                     if (__array_op_rval__230 instanceof Function){
                                        return await __array_op_rval__230(symname) 
                                    } else {
                                        return [__array_op_rval__230,symname]
                                    }
                                })()
                            } else {
                                if (check_true ((await length(symname)>2))){
                                    return (symname).split("/")
                                } else {
                                    return await (async function(){
                                        let __array_op_rval__231=symname;
                                         if (__array_op_rval__231 instanceof Function){
                                            return await __array_op_rval__231() 
                                        } else {
                                            return [__array_op_rval__231]
                                        }
                                    })()
                                }
                            }
                        })();
                        return await async function(){
                            if (check_true ((namespace_identity.length===1))) {
                                {
                                    let it;
                                    it=Environment.definitions[symname];
                                    if (check_true (it)){
                                        return it
                                    } else {
                                        if (check_true (parent_environment)){
                                            return await parent_environment["symbol_definition"].call(parent_environment,symname)
                                        }
                                    }
                                }
                            } else if (check_true ((namespace_identity['0']===namespace))) {
                                return Environment.definitions[symname]
                            } else if (check_true (parent_environment)) {
                                return await parent_environment["symbol_definition"].call(parent_environment,namespace_identity['1'],namespace_identity['0'])
                            } else if (check_true ((namespace_identity.length===2))) {
                                return await (async function() {
                                    {
                                         let __call_target__=children[namespace_identity['0']], __call_method__="symbol_definition";
                                        return await __call_target__[__call_method__].call(__call_target__,namespace_identity['1'])
                                    } 
                                })()
                            } else {
                                return undefined
                            }
                        } ()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["symbol_definition"]=symbol_definition;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["symbol_definition"]={
                            core_lang:true,description:("Given a symbol name and an optional namespace, either as a fully qualified path "+ "or via the target_namespace argument, returns definition information about the "+ "retquested symbol.  "+ "Used primarily by the compiler to find metadata for a specific symbol during compilation."),usage:["symname:string","namespace:string"],tags:["compiler","symbols","namespace","search","context","environment"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let compile=async function(json_expression,opts) {
                        let out;
                        opts=await add({
                            env:Environment
                        },opts,{
                            meta:await (async function(){
                                if (check_true ((opts&& opts.meta))){
                                    return true
                                } else {
                                    return false
                                }
                            })()
                        });
                        out=null;
                        out=await (async function(){
                             return await compiler(json_expression,opts) 
                        })();
                        return await async function(){
                            if (check_true (((out instanceof Array)&& out['0'].ctype&& (out['0'].ctype==="FAIL")))) {
                                return out
                            } else if (check_true (opts.meta)) {
                                return out
                            } else {
                                return out['1']
                            }
                        } ()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["compile"]=compile;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["compile"]={
                            core_lang:true,description:("Compiles the given JSON or quoted lisp and returns a string containing "+ "the lisp form or expression as javascript.<br>"+ "If passed the option { meta: true } , an array is returned containing compilation metadata "+ "in element 0 and the compiled code in element 1."),usage:["json_expression:*","opts:object"],tags:["macro","quote","quotes","desym","compiler"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let env_log=await (async function(){
                         return await defclog({
                            prefix:("env"+ id),background:"#B0F0C0"
                        }) 
                    })();
                    ;
                    await async function(){
                        Environment.global_ctx.scope["env_log"]=env_log;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["env_log"]={
                            core_lang:true,description:"The environment logging function used by the environment.",usage:["arg0:*","argN:*"]
                        };
                        return Environment.definitions;
                        
                    }()];
                    let evaluate_local=async function(expression,ctx,opts) {
                        let compiled;
                        let error_data;
                        let requires;
                        let precompiled_assembly;
                        let result;
                        opts=(opts|| new Object());
                        compiled=null;
                        error_data=null;
                        requires=null;
                        precompiled_assembly=null;
                        result=null;
                        if (check_true (opts.compiled_source)){
                            compiled=expression
                        } else {
                            try {
                                compiled=await (async function(){
                                     return await compiler(await (async function(){
                                        if (check_true (opts.json_in)){
                                            return expression
                                        } else {
                                            return await Environment["read_lisp"].call(Environment,expression,{
                                                source_name:opts.source_name
                                            })
                                        }
                                    })(),{
                                        env:Environment,ctx:ctx,throttle:opts.throttle,formatted_output:true,source_name:opts.source_name,throw_on_error:opts.throw_on_error,on_final_token_assembly:async function(val) {
                                            return precompiled_assembly=val
                                        },error_report:(opts.error_report|| null),quiet_mode:(opts.quiet_mode|| false)
                                    }) 
                                })()
                            } catch (__exception__238) {
                                if (__exception__238 instanceof Error) {
                                    let e=__exception__238;
                                    {
                                        {
                                            if (check_true (opts.throw_on_error)){
                                                {
                                                    throw e;
                                                    
                                                }
                                            };
                                            if (check_true ((e instanceof LispSyntaxError))){
                                                {
                                                    await async function(){
                                                        e["message"]=await JSON.parse(e.message);
                                                        return e;
                                                        
                                                    }()
                                                }
                                            };
                                            await async function(){
                                                if (check_true ((e instanceof LispSyntaxError))) {
                                                    return error_data=await add({
                                                        error:"LispSyntaxError"
                                                    },e.message)
                                                } else {
                                                    error_data={
                                                        error:await sub_type(e),message:e.message,stack:e.stack,form:await (async function(){
                                                             return await async function(){
                                                                if (check_true (((expression instanceof String || typeof expression==='string')&& (expression.length>100)))) {
                                                                    return await add(await expression["substr"].call(expression,0,100),"...")
                                                                } else {
                                                                    return await (await get_global("as_lisp"))(expression)
                                                                }
                                                            } () 
                                                        })(),parent_forms:[],source_name:opts.source_name,invalid:true
                                                    }
                                                }
                                            } ();
                                            if (check_true (opts.error_report)){
                                                await (async function(){
                                                    let __array_op_rval__240=opts.error_report;
                                                     if (__array_op_rval__240 instanceof Function){
                                                        return await __array_op_rval__240(error_data) 
                                                    } else {
                                                        return [__array_op_rval__240,error_data]
                                                    }
                                                })()
                                            } else {
                                                await console.error("Compilation Error: ",error_data)
                                            };
                                            compiled=await (async function(){
                                                 return [{
                                                    error:true
                                                },null] 
                                            })()
                                        }
                                    }
                                }
                            }
                        };
                        return await async function(){
                            if (check_true ((null==compiled))) {
                                return null
                            } else if (check_true ((compiled['0'].ctype==="FAIL"))) {
                                {
                                    if (check_true (opts.error_report)){
                                        {
                                            await (async function(){
                                                let __array_op_rval__241=opts.error_report;
                                                 if (__array_op_rval__241 instanceof Function){
                                                    return await __array_op_rval__241(compiled['1']) 
                                                } else {
                                                    return [__array_op_rval__241,compiled['1']]
                                                }
                                            })()
                                        }
                                    };
                                    return await async function(){
                                        if (check_true ((compiled['1'] instanceof Error))) {
                                            throw compiled['1'];
                                            
                                        } else if (check_true ((compiled['1']['0'] instanceof Error))) {
                                            throw compiled['1']['0'];
                                            
                                        } else if (check_true (((compiled['1']['0'] instanceof Object)&& (compiled['1']['0'].error==="SyntaxError")))) {
                                            {
                                                let new_error=new SyntaxError(compiled['1']['0'].message);
                                                ;
                                                await async function(){
                                                    new_error["from"]=compiled['1']['0'];
                                                    return new_error;
                                                    
                                                }();
                                                throw new_error;
                                                
                                            }
                                        } else {
                                            return compiled['1']
                                        }
                                    } ()
                                }
                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))&& parent_environment))) {
                                return await parent_environment["evaluate_local"].call(parent_environment,compiled,ctx,await add(new Object(),opts,{
                                    compiled_source:true
                                }))
                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))))) {
                                if (check_true (children[compiled['0'].namespace])){
                                    return await (async function() {
                                        {
                                             let __call_target__=children[compiled['0'].namespace], __call_method__="evaluate_local";
                                            return await __call_target__[__call_method__].call(__call_target__,compiled,ctx,await add(new Object(),opts,{
                                                compiled_source:true
                                            }))
                                        } 
                                    })()
                                } else {
                                    throw new EvalError(("unknown namespace "+ compiled['0'].namespace+ " assignment"));
                                    
                                }
                            } else {
                                {
                                    if (check_true (opts.on_compilation_complete)){
                                        await (async function(){
                                            let __array_op_rval__243=opts.on_compilation_complete;
                                             if (__array_op_rval__243 instanceof Function){
                                                return await __array_op_rval__243(compiled) 
                                            } else {
                                                return [__array_op_rval__243,compiled]
                                            }
                                        })()
                                    };
                                    try {
                                        if (check_true (((compiled instanceof Array)&& (compiled['0'] instanceof Object)&& compiled['0'].ctype&& await not((compiled['0'].ctype instanceof String || typeof compiled['0'].ctype==='string'))))){
                                            {
                                                await async function(){
                                                    compiled['0']["ctype"]=await subtype(compiled['0'].ctype);
                                                    return compiled['0'];
                                                    
                                                }()
                                            }
                                        };
                                        result=await (async function(){
                                             return await async function(){
                                                if (check_true (compiled.error)) {
                                                    throw new Error((await get_global("indirect_new"))(compiled.error,compiled.message));
                                                    
                                                } else if (check_true ((compiled['0'].ctype&& (await contains_ques_("block",compiled['0'].ctype)|| (compiled['0'].ctype==="assignment")|| (compiled['0'].ctype==="__!NOT_FOUND!__"))))) {
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__246=compiled['0'].has_lisp_globals;
                                                         if (__array_op_rval__246 instanceof Function){
                                                            return await __array_op_rval__246() 
                                                        } else {
                                                            return [__array_op_rval__246]
                                                        }
                                                    })())){
                                                        {
                                                            await async function(){
                                                                compiled[1]=new AsyncFunction("Environment",("{ "+ compiled['1']+ "}"));
                                                                return compiled;
                                                                
                                                            }();
                                                            return await (async function(){
                                                                let __array_op_rval__248=compiled['1'];
                                                                 if (__array_op_rval__248 instanceof Function){
                                                                    return await __array_op_rval__248(Environment) 
                                                                } else {
                                                                    return [__array_op_rval__248,Environment]
                                                                }
                                                            })()
                                                        }
                                                    } else {
                                                        {
                                                            await async function(){
                                                                compiled[1]=new AsyncFunction(("{"+ compiled['1']+ "}"));
                                                                return compiled;
                                                                
                                                            }();
                                                            return await (async function(){
                                                                let __array_op_rval__250=compiled['1'];
                                                                 if (__array_op_rval__250 instanceof Function){
                                                                    return await __array_op_rval__250() 
                                                                } else {
                                                                    return [__array_op_rval__250]
                                                                }
                                                            })()
                                                        }
                                                    }
                                                } else if (check_true ((compiled['0'].ctype&& (("AsyncFunction"===compiled['0'].ctype)|| ("statement"===compiled['0'].ctype)|| ("objliteral"===compiled['0'].ctype))))) {
                                                    {
                                                        if (check_true (await (async function(){
                                                            let __array_op_rval__251=compiled['0'].has_lisp_globals;
                                                             if (__array_op_rval__251 instanceof Function){
                                                                return await __array_op_rval__251() 
                                                            } else {
                                                                return [__array_op_rval__251]
                                                            }
                                                        })())){
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new AsyncFunction("Environment",("{ return "+ compiled['1']+ "} "));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__253=compiled['1'];
                                                                     if (__array_op_rval__253 instanceof Function){
                                                                        return await __array_op_rval__253(Environment) 
                                                                    } else {
                                                                        return [__array_op_rval__253,Environment]
                                                                    }
                                                                })()
                                                            }
                                                        } else {
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new AsyncFunction(("{ return "+ compiled['1']+ "}"));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__255=compiled['1'];
                                                                     if (__array_op_rval__255 instanceof Function){
                                                                        return await __array_op_rval__255() 
                                                                    } else {
                                                                        return [__array_op_rval__255]
                                                                    }
                                                                })()
                                                            }
                                                        }
                                                    }
                                                } else if (check_true ((compiled['0'].ctype&& ("Function"===compiled['0'].ctype)))) {
                                                    {
                                                        if (check_true (await (async function(){
                                                            let __array_op_rval__256=compiled['0'].has_lisp_globals;
                                                             if (__array_op_rval__256 instanceof Function){
                                                                return await __array_op_rval__256() 
                                                            } else {
                                                                return [__array_op_rval__256]
                                                            }
                                                        })())){
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new Function("Environment",("{ return "+ compiled['1']+ "} "));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__258=compiled['1'];
                                                                     if (__array_op_rval__258 instanceof Function){
                                                                        return await __array_op_rval__258(Environment) 
                                                                    } else {
                                                                        return [__array_op_rval__258,Environment]
                                                                    }
                                                                })()
                                                            }
                                                        } else {
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new Function(("{ return "+ compiled['1']+ "}"));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__260=compiled['1'];
                                                                     if (__array_op_rval__260 instanceof Function){
                                                                        return await __array_op_rval__260() 
                                                                    } else {
                                                                        return [__array_op_rval__260]
                                                                    }
                                                                })()
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    return compiled['1']
                                                }
                                            } () 
                                        })()
                                    } catch (__exception__244) {
                                        if (__exception__244 instanceof Error) {
                                            let e=__exception__244;
                                            {
                                                {
                                                    if (check_true (true)){
                                                        {
                                                            let details={
                                                                error:e.name,message:e.message,expanded_source:await (await get_global("pretty_print"))(await (async function(){
                                                                     return await (await get_global("detokenize"))(precompiled_assembly) 
                                                                })()),compiled:compiled['1']
                                                            };
                                                            ;
                                                            console.log("Syntax Error: ",details);
                                                            await async function(){
                                                                e["details"]=details;
                                                                return e;
                                                                
                                                            }()
                                                        }
                                                    };
                                                    if (check_true ((opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4)))){
                                                        {
                                                            if (check_true (e.details)){
                                                                await env_log("caught error: ",e.details)
                                                            } else {
                                                                await env_log("caught error: ",e.name,e.message,e)
                                                            }
                                                        }
                                                    };
                                                    if (check_true ((false&& (await sub_type(e)==="SyntaxError")&& (opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4))))){
                                                        await console.log(compiled['1'])
                                                    };
                                                    if (check_true (opts.error_report)){
                                                        {
                                                            await (async function(){
                                                                let __array_op_rval__262=opts.error_report;
                                                                 if (__array_op_rval__262 instanceof Function){
                                                                    return await __array_op_rval__262(await (async function(){
                                                                        if (check_true (e.details)){
                                                                            return e.details
                                                                        } else {
                                                                            return {
                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack
                                                                            }
                                                                        }
                                                                    })()) 
                                                                } else {
                                                                    return [__array_op_rval__262,await (async function(){
                                                                        if (check_true (e.details)){
                                                                            return e.details
                                                                        } else {
                                                                            return {
                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack
                                                                            }
                                                                        }
                                                                    })()]
                                                                }
                                                            })()
                                                        }
                                                    };
                                                    result=e;
                                                    if (check_true ((await not(opts.catch_errors)|| (ctx&& ctx.in_try)))){
                                                        {
                                                            throw result;
                                                            
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    };
                                    return result
                                }
                            }
                        } ()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["evaluate_local"]=evaluate_local;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["evaluate_local"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let evaluate=async function(expression,ctx,opts) {
                        return await async function(){
                            if (check_true ((namespace===active_namespace))) {
                                return await evaluate_local(expression,ctx,opts)
                            } else if (check_true ((namespace==="core"))) {
                                return await (async function() {
                                    {
                                         let __call_target__=children[active_namespace], __call_method__="evaluate";
                                        return await __call_target__[__call_method__].call(__call_target__,expression,ctx,opts)
                                    } 
                                })()
                            }
                        } ()
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["evaluate"]=evaluate;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["evaluate"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let eval_struct=async function(lisp_struct,ctx,opts) {
                        let rval;
                        rval=null;
                        if (check_true (lisp_struct instanceof Function)){
                            rval=await (async function(){
                                let __array_op_rval__267=lisp_struct;
                                 if (__array_op_rval__267 instanceof Function){
                                    return await __array_op_rval__267() 
                                } else {
                                    return [__array_op_rval__267]
                                }
                            })()
                        } else {
                            rval=await (async function(){
                                 return await evaluate(lisp_struct,ctx,await add({
                                    json_in:true
                                },(opts|| new Object()))) 
                            })()
                        };
                        return rval
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["eval_struct"]=eval_struct;
                        return Environment.global_ctx.scope;
                        
                    }();
                    [await async function(){
                        Environment.definitions["eval_struct"]={
                            core_lang:true
                        };
                        return Environment.definitions;
                        
                    }()];
                    let built_ins=["MAX_SAFE_INTEGER","LispSyntaxError","sub_type","__VERBOSITY__","int","float","values","pairs","keys","take","prepend","first","last","length","conj","reverse","map","bind","to_object","to_array","slice","rest","second","third","chop","chomp","not","push","pop","list","flatten","jslambda","join","lowercase","uppercase","log","split","split_by","is_object?","is_array?","is_number?","is_function?","is_set?","is_element?","is_string?","is_nil?","is_regex?","is_date?","ends_with?","starts_with?","blank?","contains?","make_set","eval_exp","indirect_new","get_import_entry","range","add","merge_objects","index_of","resolve_path","delete_prop","load_pends","min_value","max_value","interlace","trim","assert","unquotify","or_args","pending_ns_loads","special_operators","defclog","NOT_FOUND","check_external_env_default","built_ins","reader"];
                    ;
                    await async function(){
                        Environment.global_ctx.scope["built_ins"]=built_ins;
                        return Environment.global_ctx.scope;
                        
                    }();
                    let set_compiler=async function(compiler_function) {
                        let new_ops;
                        new_ops=await (async function(){
                            let __array_op_rval__271=compiler_function;
                             if (__array_op_rval__271 instanceof Function){
                                return await __array_op_rval__271([],{
                                    special_operators:true,env:Environment
                                }) 
                            } else {
                                return [__array_op_rval__271,[],{
                                    special_operators:true,env:Environment
                                }]
                            }
                        })();
                        if (check_true (await is_set_ques_(new_ops))){
                            {
                                compiler_operators=new_ops;
                                compiler=compiler_function;
                                await async function(){
                                    Environment.global_ctx.scope["compiler"]=compiler;
                                    return Environment.global_ctx.scope;
                                    
                                }();
                                await (await get_global("register_feature"))("compiler")
                            }
                        } else {
                            {
                                await console.error("Invalid compiler function: invalid operators returned. Not installing.");
                                throw new EvalError("Invalid compiler function");
                                
                            }
                        };
                        return compiler
                    };
                    ;
                    await async function(){
                        Environment.global_ctx.scope["set_compiler"]=set_compiler;
                        return Environment.global_ctx.scope;
                        
                    }();
                    await async function(){
                        Environment.global_ctx.scope["clone"]=async function(val) {
                            if (check_true ((val===Environment))){
                                return Environment
                            } else {
                                return await clone(val,0,Environment)
                            }
                        };
                        return Environment.global_ctx.scope;
                        
                    }();
                    await async function(){
                        Environment["get_global"]=get_global;
                        Environment["set_global"]=set_global;
                        Environment["symbol_definition"]=symbol_definition;
                        Environment["namespace"]=namespace;
                        return Environment;
                        
                    }();
                    let children=(opts.children|| new Object());
                    ;
                    let children_declarations=(opts.children_declarations|| new Object());
                    ;
                    if (check_true ((namespace==="core"))){
                        {
                            if (check_true (await not(Environment.global_ctx.scope["*env_config*"]))){
                                {
                                    await async function(){
                                        Environment.global_ctx.scope["*env_config*"]={
                                            export:{
                                                save_path:"js/juno.js",default_namespace:"core",include_source:false
                                            },features:[],build:DLISP_ENV_VERSION,imports:new Object()
                                        };
                                        return Environment.global_ctx.scope;
                                        
                                    }()
                                }
                            };
                            let current_namespace=function() {
                                return active_namespace
                            };
                            ;
                            let create_namespace=async function(name,options,defer_initialization) {
                                return await async function(){
                                    if (check_true (await not((name instanceof String || typeof name==='string')))) {
                                        throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true (children[name])) {
                                        throw new EvalError("namespace already exists");
                                        
                                    } else {
                                        {
                                            let child_env;
                                            options=(options|| new Object());
                                            child_env=await (async function(){
                                                 return await dlisp_env({
                                                    parent_environment:Environment,namespace:name,contained:options.contained,defer_initialization:defer_initialization
                                                }) 
                                            })();
                                            if (check_true (child_env.evaluate)){
                                                {
                                                    await child_env["set_compiler"].call(child_env,compiler);
                                                    await async function(){
                                                        children[name]=child_env;
                                                        return children;
                                                        
                                                    }();
                                                    await async function(){
                                                        children_declarations[name]=new Object();
                                                        return children_declarations;
                                                        
                                                    }();
                                                    await child_env["evaluate_local"].call(child_env,"(for_each (sym built_ins) (delete_prop Environment.context.scope sym))");
                                                    await child_env["evaluate_local"].call(child_env,"(for_each (sym built_ins) (delete_prop Environment.definitions sym))");
                                                    if (check_true (options.contained)){
                                                        await async function(){
                                                            let __target_obj__279=children_declarations[name];
                                                            __target_obj__279["contained"]=true;
                                                            return __target_obj__279;
                                                            
                                                        }()
                                                    };
                                                    await async function(){
                                                        let __target_obj__280=children_declarations[name];
                                                        __target_obj__280["serialize_with_image"]=await (async function(){
                                                            if (check_true ((false===options.serialize_with_image))){
                                                                return false
                                                            } else {
                                                                return true
                                                            }
                                                        })();
                                                        return __target_obj__280;
                                                        
                                                    }();
                                                    return name
                                                }
                                            } else {
                                                {
                                                    await console.error("ENV: couldn't create the child environment. Received: ",child_env);
                                                    throw new EvalError(("unable to create namespace "+ name));
                                                    
                                                }
                                            }
                                        }
                                    }
                                } ()
                            };
                            ;
                            let set_namespace=async function(name) {
                                return await async function(){
                                    if (check_true (await not((name instanceof String || typeof name==='string')))) {
                                        throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true ((await not(("core"===name))&& (null==children[name])))) {
                                        throw new EvalError(("namespace "+ name+ " doesn't exist"));
                                        
                                    } else {
                                        {
                                            if (check_true ((name==="core"))){
                                                {
                                                    active_namespace="core"
                                                }
                                            } else {
                                                {
                                                    active_namespace=name
                                                }
                                            };
                                            return name
                                        }
                                    }
                                } ()
                            };
                            ;
                            let delete_namespace=async function(name) {
                                return await async function(){
                                    if (check_true (await not((name instanceof String || typeof name==='string')))) {
                                        throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true (("core"===name))) {
                                        throw new EvalError("core namespace cannot be removed");
                                        
                                    } else if (check_true ((null==children[name]))) {
                                        throw new EvalError(("namespace "+ name+ "doesn't exist"));
                                        
                                    } else if (check_true ((name===await current_namespace()))) {
                                        throw new EvalError("namespace is the current namespace");
                                        
                                    } else {
                                        {
                                            await (await get_global("remove_prop"))(children,name);
                                            await (async function() {
                                                let __for_body__283=async function(k) {
                                                    if (check_true (await starts_with_ques_(k,name))){
                                                        {
                                                            return await (await get_global("remove_prop"))(Environment.global_ctx._star_env_config_star_.imports,k)
                                                        }
                                                    }
                                                };
                                                let __array__284=[],__elements__282=(await resolve_path(["global_ctx","scope","*env_config*","imports"],Environment)|| []);
                                                let __BREAK__FLAG__=false;
                                                for(let __iter__281 in __elements__282) {
                                                    __array__284.push(await __for_body__283(__elements__282[__iter__281]));
                                                    if(__BREAK__FLAG__) {
                                                         __array__284.pop();
                                                        break;
                                                        
                                                    }
                                                }return __array__284;
                                                 
                                            })();
                                            return name
                                        }
                                    }
                                } ()
                            };
                            ;
                            await async function(){
                                Environment.global_ctx.scope["create_namespace"]=create_namespace;
                                Environment.global_ctx.scope["set_namespace"]=set_namespace;
                                Environment.global_ctx.scope["delete_namespace"]=delete_namespace;
                                Environment.global_ctx.scope["namespaces"]=function() {
                                    return  add( keys(children),"core")
                                };
                                Environment.global_ctx.scope["current_namespace"]=current_namespace;
                                return Environment.global_ctx.scope;
                                
                            }()
                        }
                    };
                    let get_namespace_handle=function(name) {
                        return   (function(){
                            if (check_true ((namespace===name))) {
                                return Environment
                            } else if (check_true ((namespace==="core"))) {
                                if (check_true (((name instanceof String || typeof name==='string')&& children[name]))){
                                    return children[name]
                                }
                            } else if (check_true (parent_environment)) {
                                return  parent_environment["get_namespace_handle"].call(parent_environment,name)
                            } else {
                                throw new Error("invalid namespace handle requested");
                                
                            }
                        } )()
                    };
                    ;
                    let included_globals=async function() {
                        return {
                            definitions:await (async function(){
                                 return { "MAX_SAFE_INTEGER":{ "core_lang":true
                            },"LispSyntaxError":{ "core_lang":true
                        },"sub_type":{ "core_lang":true,"description":"Returns a string the determined actual type of the provided value.","usage":["value:*"],"tags":["type","class","prototype","typeof","instanceof"]
                    },"__VERBOSITY__":{ "core_lang":true,"description":"Set __VERBOSITY__ to a positive integer for verbose console output of system activity.","tags":["debug","compiler","environment","global"]
                },"int":{ "core_lang":true,"usage":"value:string|number","description":"Convenience method for parseInt, should be used in map vs. directly calling parseInt, which will not work directly","tags":["conversion","number"]
            },"float":{ "core_lang":true,"usage":"value:string|number","description":"Convenience method for parseFloat, should be used in map vs. directly calling parseFloat, which will not work directly","tags":["conversion","number"]
        },"values":{ "core_lang":true,"description":"Given a container, returns a list containing the values of each supplied argument. Note that for objects, only the values are returned, not the keys. If given multiple values, the returned value is a concatentation of all containers provided in the arguments.","usage":["arg0:*","argn:*"],"tags":["array","container","object","keys","elements"]
    },"pairs":{ "core_lang":true,"description":"Given a passed object or array, returns a list containing a 2 element list for each key/value pair of the supplied object.","tags":["array","container","object"],"usage":["obj:object"]
},"keys":{ "core_lang":true,"description":"Given an object, returns the keys of the object.","tags":["object","values","keys","indexes","container"],"usage":["obj:object"]
},"take":{ "core_lang":true,"description":"Takes the first value off the list, and returns the value.","tags":["array","container","mutate","first"],"usage":["place:container"]
},"prepend":{ "core_lang":true,"description":"Places the value argument onto the first of the list (unshift) and returns the list.","tags":["array","mutate","container"],"usage":["place:array","thing:*"]
},"first":{ "core_lang":true,"description":"Given an array, returns the first element in the array.","usage":["x:array"],"tags":["array","container","elements"]
},"last":{ "core_lang":true,"description":"Given an array, returns the last element in the array.","usage":["x:array"],"tags":["array","container","elements","end"]
},"length":{ "core_lang":true,"description":"Returns the length of the supplied type (array, object, set, string, number). If the supplied value is nil or a non-container type, returns 0.","tags":["size","elements","container","dimension","array","set","string","number"],"usage":["thing:container"]
},"conj":{ "core_lang":true,"description":"Conjoins or concatenates things (typically arrays) together and returns an array. Examples:<br>(conj [ 1 2 ] [ 3 4 ]) => [ 1 2 3 4 ]<br>(conj [ 1 2 ] 3 4 ) => [ 1 2 3 4 ]<br>(conj 1 2 [ 3 4 ]) => [ 1 2 3 4 ]<br>(conj { `abc: 123 } [ 2 3]) => [ { abc: 123 }, 2, 3 ]<br>(conj [ 1 2 3 [ 4 ]] [ 5 6 [ 7 ]]) => [ 1 2 3 [ 4 ] 5 6 [ 7 ] ]","tags":["elements","concat","array","conjoin","append"],"usage":["arg0:*","argN:*"]
},"reverse":{ "core_lang":true,"usage":["container:list"],"description":"Returns a copy of the passed list as reversed.  The original is not changed.","tags":["list","sort","order"]
},"map":{ "core_lang":true,"description":"Provided a function as a first argument, map calls the function (item, current_index, total_length) with each element from the second argument, which should be a list. Returns a new list containing the return values resulting from evaluating.","tags":["array","container","elements","iteration"],"usage":["lambda:function","elements:array"]
},"bind":{ "core_lang":true,"description":"Given a function and a this value, the bind function returns a new function that has its this keyword set to the provided value in this_arg.","usage":["func:function","this_arg:*"],"tags":["bind","this","function"]
},"to_object":{ "core_lang":true,"description":"Given an array of pairs in the form of [[key value] [key value] ...], constructs an object with the first array element of the pair as the key and the second element as the value. A single object is returned.","usage":["paired_array:array"],"tags":["conversion","object","array","list","pairs"]
},"to_array":{ "core_lang":true,"description":"Given a container of type Array, Set, Object, or a string, it will convert the members of the container to an array form, and return a new array with the values of the provided container. In the case of an object, the keys and values will be contained in paired arrays in the returned array.  A string will be split into individual characters. If provided a different type other than the listed values above, the value will be placed in an array as a single element.","usage":["container:*"],"tags":["array","conversion","set","object","string","pairs"]
},"slice":{ "core_lang":true,"description":"Given an array, with a starting index and an optional ending index, slice returns a new array containing the elements in the range of provided indices.","usage":["target:array","from:number","to:number"],"tags":["array","slicing","dimensions","subset"]
},"rest":{ "core_lang":true,"description":"Returns a new array containing the elements in the 2nd through last position (the tail) of the provided array.","usage":["x:array"],"tags":["array","subset","slice","tail","end"]
},"second":{ "core_lang":true,"description":"Returns the second element in the provided array (the element at index 1)","tags":["array","subset","element","first"],"usage":["x:array"]
},"third":{ "core_lang":true,"description":"Returns the third element in the provided array (the element at index 2)","tags":["array","subset","element","first"],"usage":["x:array"]
},"chop":{ "core_lang":true,"description":"Returns a new container containing all items except the last item.  This function takes either an array or a string.","usage":["container:array|string"],"tags":["array","slice","subset","first","string"]
},"chomp":{ "core_lang":true,"description":"Given a string returns a new string containing all characters except the last character.","usage":["x:string"],"tags":["slice","subset","string"]
},"not":{ "core_lang":true,"description":"Returns the logical opposite of the given value.  If given a truthy value, a false is returned.  If given a falsey value, true is returned.","usage":["x:*"],"tags":["logic","not","inverse"]
},"push":{ "core_lang":true,"description":"Given an array as a place, and an arbitrary value, appends (pushes) the value to the end of the array.","usage":["place:array","thing:*"],"tags":["array","mutate","append","concat","pop"]
},"pop":{ "core_lang":true,"description":"Given an array as an arguments, removes the last value from the given array and returns it.","usage":["place:array"],"tags":["array","mutate","take","remove","push"]
},"list":{ "description":"Unlike languages like Common-Lisp and other lisps that use proper lists, the Juno language doesn't have a true list type.  All sequential collections are in arrays because the underlying language, Javascript, doesn't have a true list structure.  The list operator here is for backward compatibility with older versions of this language that explicitly used the term as part of a way to construct an array.","usage":["item0:*","item1:*","itemN:*"],"tags":[],"type":"Special"
},"flatten":{ "core_lang":true,"description":"Given a nested array structure, returns a flattened version of the array","usage":["x:array"],"tags":["array","container","flat","tree"]
},"jslambda":{ "core_lang":true,"description":"Proxy for Javascript Function.  Given a set of string based arguments, all but the last are considered arguments to the function to be defined.  The last argument is considered the body of the function and should be provided as a string of javascript. Returns a javascript function. <br>(jslambda (`a `b) \"{ return a+b }\")<br>(jslambda () \"{ return new Date() }\")","usage":["argument_list:array","argn:string"],"tags":["javascript","embed","function"]
},"join":{ "core_lang":true,"description":"Given an optional joining string and an array of strings, returns a string containing the elements of the array interlaced with the optional joining string.<br>(join \",\" [ \"red\" \"fox\" ]) -> \"red,fox\"<br>(join [\"red\" \"fox\"]) -> redfox","tags":["array","combine","split","string","text"],"usage":["joining_string?:string","container:array"]
},"lowercase":{ "core_lang":true,"description":"Given a string, converts all capital characters to lowercase characters.","tags":["string","text","uppercase","case","convert"],"usage":["text:string"]
},"uppercase":{ "core_lang":true,"description":"Given a string, converts all capital characters to uppercase characters.","tags":["string","text","lowercase","case","convert"],"usage":["text:string"]
},"log":{ "core_lang":true,"description":"log is a shorthand call for console.log by default, and serves to provide a base abstraction for logging.  Log behavior can be changed by redefining log to better suit the environmental context.  For example, writing log output to a file or HTML container.","usage":["args0:*","argsN:*"],"tags":["logging","console","output"]
},"split":{ "core_lang":true,"description":"Given a string to partition and a string for a splitting token, return an array whose elements are the text found between each splitting token. <br>(split \"red,fox\" \",\") => [ \"red\" \"fox\" ]","tags":["partition","join","separate","string","array"],"usage":["string_to_split:string","split_token:string"]
},"split_by":{ "core_lang":true,"description":"Given a string for a splitting token and a string to partition, return an array whose elements are the text found between each splitting token. <br>(split_by \",\" \"red,fox\") => [ \"red\" \"fox\" ]","tags":["partition","join","separate","string","array"],"usage":["split_token:string","string_to_split:string"]
},"is_object?":{ "core_lang":true,"description":"for the given value x, returns true if x is an Javascript object type.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_array?":{ "core_lang":true,"description":"for the given value x, returns true if x is an array.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_number?":{ "core_lang":true,"description":"for the given value x, returns true if x is a number.","usage":["arg:value"],"tags":["type","condition","subtype","value","what","function"]
},"is_function?":{ "core_lang":true,"description":"for the given value x, returns true if x is a function.","usage":["arg:value"],"tags":["type","condition","subtype","value","what","function"]
},"is_set?":{ "core_lang":true,"description":"for the given value x, returns true if x is a set.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_element?":{ "core_lang":true,"description":"for the given value x, returns true if x is an Element object","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_string?":{ "core_lang":true,"description":"for the given value x, returns true if x is a String object","usage":["arg:value"],"tags":["type","condition","subtype","value","what"]
},"is_nil?":{ "name":"is_nil?","fn_args":"[\"value\"]","description":"for the given value x, returns true if x is exactly equal to nil.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"is_regex?":{ "name":"is_regex?","fn_args":"(x)","description":"for the given value x, returns true if x is a Javascript regex object","usage":["arg:value"],"tags":["type","condition","subtype","value","what"],"requires":["sub_type"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"is_date?":{ "name":"is_date?","fn_args":"(x)","description":"for the given value x, returns true if x is a Date object.","usage":["arg:value"],"tags":["type","condition","subtype","value","what"],"requires":["sub_type"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"ends_with?":{ "core_lang":true,"description":"for a given string or array, checks to see if it ends with the given start_value.  Non string args return false.","usage":["end_value:value","collection:array|string"],"tags":["string","text","list","array","filter","reduce"]
},"starts_with?":{ "core_lang":true,"description":"for a given string or array, checks to see if it starts with the given start_value.  Non string args return false.","usage":["start_value:value","collection:array|string"],"tags":["string","text","list","array","filter","reduce","begin"]
},"delete_prop":{ "core_lang":true,"description":"Removes the key or keys of the provided object, and returns the modified object.<br>Example:<br>(defglobal foo { abc: 123 def: 456 ghi: 789 })<br>(delete_prop foo `abc `def) => { ghi: 789 }<br>","usage":["obj:objects","key0:string","keyN?:string"],"tags":["delete","keys","object","remove","remove_prop","mutate"]
},"blank?":{ "core_lang":true,"description":"Given a value, if it is equal (via eq) to nil or to \"\" (an empty string), returns true, otherwise false.","usage":["val:*"],"tags":["string","empty","text"]
},"contains?":{ "core_lang":true,"description":"Given a target value and container value (array, set, or string), checks if the container has the value. If it is found, true is returned, otherwise false if returned.  ","tags":["string","array","set","has","includes","indexOf"],"usage":["value:*","container:array|set|string"]
},"make_set":{ "core_lang":true,"description":"If given an array, a new Set is returned containing the elements of the array. If given an object, a new Set is returned containing the values of the object, and the keys are discarded. If given a set, new Set is created and returend  from the values of the old set.","usage":["vals:array|object|set"],"tags":["array","set","object","values","convert"]
},"meta_for_symbol":{ "core_lang":true,"description":"Given a quoted symbol and a boolean indicating whether or not all namespaces should be searched, returns the meta data associated with the symbol for each environment.  If search mode is requested, the value returned is an array, since there can be symbols with the same name in different environments. If no values are found an empty array is returned.  If not in search mode, meta_for_symbol searches the current namespace only, and if a matching symbol is found, returns an object with all found metadata, otherwise nil is returned.","usage":["quoted_symbol:string","search_mode:boolean"],"tags":["describe","meta","help","definition","symbol","metadata"]
},"describe":{ "core_lang":true,"description":"Given a quoted symbol returns the relevant metadata pertinent to the current namespace context.","usage":["quoted_symbol:string","search_mode:boolean"],"tags":["meta","help","definition","symbol","metadata","info","meta_for_symbol"]
},"undefine":{ "core_lang":true,"description":"Given a quoted symbol removes the symbol and any definition information from the namespace. If the namespace is fully-qualified, then the symbol will be removed from the specified namespace instead of the currently active namespace. If the symbol is successfully removed, the function will return true, otherwise if it is not found, false will be returned.  Note that if the specified symbol is non-qualified, but exists in a different, accessible namespace, but the symbol isn't present in the current namespace, the symbol will not be deleted.  The environment is not searched and therefore symbols have to be explicitly fully-qualified for any effect of this function outside the current namespace.","usage":["quoted_symbol:string"],"tags":["symbol","delete","remove","unintern","reference","value"]
},"eval_exp":{ "core_lang":true,"description":"Evaluates the given expression and returns the value.","usage":["expression:*"],"tags":["eval","evaluation","expression"]
},"indirect_new":{ "core_lang":true,"description":"Used by the compiler for implementation of the new operator and shouldn't be directly called by user programs.  The new operator should be called instead.","usage":["arg0:*","argsN:*"],"tags":["system","compiler","internal"]
},"range":{ "core_lang":true,"usage":["start_or_end:number","end:number","step:number"],"description":"Range has a variable form depending on the amount of arguments provided to the function when calling it. If provided one argument, range will produce an array from 0 up to, but not including the provided value. If given two arguments, the first argument will be the starging value and the last value will be used as the upper bounding value, returning an array with elements starting at the start value and up to, but not including the bounding value. If given a third value, the value will be interpreted as the step value, and the returned array will contain values that increment by the step amount.  Range will throw an error if a negative range is specified. For negative ranges see neg_range.<br><br>Examples:<br>(range 5) -> [ 0 1 2 3 4 ]<br>(range 10 15) -> [ 10 11 12 13 14 ]<br>(range 10 20) -> [ 10 12 14 16 18 ]<br>(range -5 0) -> [ -5 -4 -3 -2 -1 ]<br>(range -3 3) -> [ -3, -2, -1, 0, 1, 2 ]<br>"
},"add":{ "core_lang":true,"description":"Add is an overloaded function that, based on the first argument provided, determines how to 'add' the arguments. If provided a number as a first argument, then it will assume the rest of the arguments are numbers and add them to the first, returning the numerical sum of the arguments. If an object, it will merge the keys of the provided arguments, returning a combined object.  Be aware that if merging objects, if arguments that have the same keys the argument who appears last with the key will prevail.  If called with an array as a first argument, the subsequent arguments will be added to the first via 'concat'.  If strings, the strings will be joined into a single string and returned.<br>(add 1 2 3) => 6<br>(add { `abc: 123 `def: 345 } { `def: 456 }) => { abc: 123, def: 456 }(add [ 1 2 3 ] [ 4 5 6] 7) => [ 1, 2, 3, [ 4, 5, 6 ], 7 ]<br>(add \"abc\" \"def\") => \"abcdef\"<br><br>Note that add doesn't typically need to explicily called.  The compiler will try and determine the best way to handle adding based on the arguments to be added, so the + operator should be used instead, since it gives the compiler an opportunity to inline if possible.","usage":["arg0:*","argN:*"],"tags":["add","+","sum","number","addition","merge","join","concat"]
},"merge_objects":{ "core_lang":true,"description":"Merge objects takes an array of objects and returns an object whose keys and values are the sum of the provided objects (same behavior as add with objects).  If objects have the same keys, the last element in the array with the duplicate key will be used to provide the value for that key.","usage":["objects:array"],"tags":["add","merge","keys","values","objects","value"]
},"index_of":{ "core_lang":true,"description":"Given a value and an array container, returns the index of the value in the array, or -1 if not found.","usage":["value:number|string|boolean","container:array"],"tags":["find","position","index","array","contains"]
},"resolve_path":{ "core_lang":true,"description":"Given a path and a tree structure, which can be either an array or an object, traverse the tree structure and return the value at the path if it exists, otherwise undefined is returned.<br>(resolve_path [ 2 1 ] [ 1 2 [ 3 4 5 ] 6 7]) => 4)","usage":["path:array","tree_structure:array|object"],"tags":["find","position","index","path","array","tree","contains","set_path"]
},"min_value":{ "name":"min_value","fn_args":"(v)","usage":["values:list"],"description":"Given an array of numbers, returns the smallest value found.  Any non-numbers in the array are ignored.  If there are no numbers in the list, 0 is returned.","requires":["MAX_SAFE_INTEGER","not","sub_type"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"max_value":{ "name":"max_value","fn_args":"(v)","usage":["values:list"],"description":"Given an array of numbers, returns the largest value found.  Any non-numbers in the array are ignored.  If there are no numbers in the list, 0 is returned.","requires":["not","sub_type"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"interlace":{ "core_lang":true,"usage":["list0:array","list1:array","listn?:array"],"description":"Returns a list containing a consecutive values from each list, in argument order.  I.e. list0.0 list1.0 listn.0 list0.1 list1.1 listn.1 ...","tags":["list","array","join","merge"]
},"trim":{ "core_lang":true,"description":"Removes leading and trailing spaces from the provided string value.","usage":["value:string"],"tags":["string","spaces","clean","squeeze","leading","trailing","space"]
},"assert":{ "core_lang":true,"description":"If the evaluated assertion form is true, the result is returned, otherwise an EvalError is thrown with the optionally provided failure message.","usage":["form:*","failure_message:string?"],"tags":["true","error","check","debug","valid","assertion"]
},"unquotify":{ "core_lang":true,"description":"Removes binding symbols and quotes from a supplied value.  For use in compile time function such as macros.","usage":["val:string"],"tags":["macro","quote","quotes","desym"]
},"or_args":{ "core_lang":true,"description":"Provided an array of values, returns true if any of the values are true, otherwise will return false.","usage":["argset:array"],"tags":["or","true","false","array","logic"]
},"special_operators":{ "core_lang":true
},"defclog":{ "core_lang":true,"description":"Given a description object, containing specific keys, returns a customized console logging function implements the given requested properties.<br>Options<br>prefix:string:The prefix to log prior to any supplied user arguments.<br>color:string:The text color to use on the prefix (or initial argument if no prefix)<br>background:string:The background coloe to use on the prefix (or initial argument if no prefix)<br>","usage":["options:object"],"tags":["log","logging","console","utility"]
},"NOT_FOUND":{ "core_lang":true
},"check_external_env_default":{ "core_lang":true
},"*namespace*":{ "core_lang":true
},"pending_ns_loads":{ "core_lang":true
},"pend_load":{ "core_lang":true,"description":"When used as an initializer wrapper via the use_symbols macro, the wrapped initializer will not be loaded until the from_namespace is loaded to ensure that the wrapped initializer won't fail due to not yet loaded dependencies.","usage":["from_namespace:string","target_namespace:string","symbol:string","initializer:array"],"tags":["symbol","definitions","namespace","scope","dependency","dependencies","require"]
},"load_pends":{ "core_lang":true
},"symbols":{ "core_lang":true,"description":"Returns an array of the defined global symbols for the local environment.  If opts.unique is true, only symbols that are not part of the built ins are included.","usage":["opts:object"],"tags":["symbol","names","definitions","values","scope"]
},"set_global":{ "core_lang":true
},"get_global":{ "core_lang":true
},"symbol_definition":{ "core_lang":true,"description":"Given a symbol name and an optional namespace, either as a fully qualified path or via the target_namespace argument, returns definition information about the retquested symbol.  Used primarily by the compiler to find metadata for a specific symbol during compilation.","usage":["symname:string","namespace:string"],"tags":["compiler","symbols","namespace","search","context","environment"]
},"compile":{ "core_lang":true,"description":"Compiles the given JSON or quoted lisp and returns a string containing the lisp form or expression as javascript.<br>If passed the option { meta: true } , an array is returned containing compilation metadata in element 0 and the compiled code in element 1.","usage":["json_expression:*","opts:object"],"tags":["macro","quote","quotes","desym","compiler"]
},"env_log":{ "core_lang":true,"description":"The environment logging function used by the environment.","usage":["arg0:*","argN:*"]
},"evaluate_local":{ "core_lang":true
},"evaluate":{ "core_lang":true
},"eval_struct":{ "core_lang":true
},"+":{ "description":"The plus operator takes an arbitrary number of arguments and attempts to 'add' them together. Of all the mathematical operators, this is the only one that is overloaded in terms of the type of values it can take.  The adding operation undertaken by the + operator is determined by the first argument in the argument list. The operator accepts the following types: <br>numbers, Objects, arrays and Strings.<br> If the argument type is a number (or declared to be a number), then the normal infix mathematical expression will be constructed in the emitted javascript, otherwise the synchronous add function will be used to handle the addition in a dynamic fashion during execution. <br><br>Adding Objects<br>When two objects are added together, a new Object is constructed with the keys and values from each object in successive order from the argument list.  If a later object contains the same key as an earlier object, the later object's value will be used and will overwrite the earlier value of the same key. <br>Example: (+ { abc: 123 def: 456 } { abc: 789 }) -> { abc: 789 def: 456 }<br>If a non-object type is encountered after starting with an object it is ignored.<br><br>Adding Arrays<br>If an array is the first argument to the operator, all subsequent argument values are appended to the first array and the first array is returned as the result.  The types of the subsequent arguments are not interrogated unlike with Object addition, and are simply concatenated to the first argument.  <br>Example: (+ [ 1 2 3 ] [ 4 5 6] 7 8) <-  [ 1 2 3 [ 4 5 6 ] 7 8 ]<br><br>Adding Strings<br>A new string is returned as a result of adding all subsequent arguments together.  If a subsequent argument is a string, or is an object with a toString method defined, it is appended to the result as expected.  Otherwise, the default string representation in the prototype chain will be used, which may not be what is expected.<br>Example: ```(+ \"This is the result: \" (fn (v) (+ 1 2))) <- \"This is the result: async function(v) {\n return (1+ 2)\n}\"```<\nExample: ( + \"1\" \"2\" ) <- \"12\" <br>Example: (+ \"John\" \"Jingleheimer\") <- \"JohnJingleheimer\"<br>Example: (+ \"An object:\" { abc: 123 }) <- \"An object: [object Object]\"<br>","usage":["arg0:*","argN:*"],"tags":["special","add","+","addition","arithmetic"],"type":"Special"
},"-":{ "description":"Subtracts from the first argument all subsequent arguments and returns the result.","usage":["arg0:*","argN:*"],"tags":["special","subtract","-","arithmetic"],"type":"Special"
},"/":{ "description":"Arithmetically divides the first argument (dividend) by all subsequent arguments (divisors) and returns the result.","usage":["dividend:number","argN:number"],"tags":["special","division","divide","arithmetic"],"type":"Special"
},"*":{ "description":"Multiplies the first argument with all subsequent arguments, returning the result.","usage":["arg0:number","argN:number"],"tags":["special","multiplication","arithmetic"],"type":"Special"
},"**":{ "description":"The exponentiation operator raises the first argument to the power of the second argument.","usage":["base:number","exponent:number"],"tags":["special","exponent","base","power","arithmetic"],"type":"Special"
},"%":{ "description":"Modulo (Remainder) divides the first argument by the second argument and returns the remainder from the division operation.","usage":["dividend:number","divisor:number"],"tags":["special","remainder","modulo","division","arithmetic"],"type":"Special"
},"<<":{ "description":"The << operator performs a leftward shift of the bits of the first argument by the amount of the second argument.","usage":["value:number","amount_to_shift_left:number"],"tags":["special","shift","bit","left"],"type":"Special"
},">>":{ "description":"The << operator performs a rightward shift of the bits of the first argument by the amount of the second argument.","usage":["value:number","amount_to_shift_right:number"],"tags":["special","shift","bit","right"],"type":"Special"
},"and":{ "description":"Each argument to the and operator is evaluated, and upon the first value that is a Javascript false (or an equivalent false, such as nil, undefined or 0), the encountered false is returned.  If all values are equivalent to true , then the final argument is returned. Equivalent to && in Javascript.","usage":["arg0:*","argN:*"],"tags":["logic","condition","true","false","&&"],"type":"Special"
},"or":{ "description":"","usage":["arg0:*","argN:*"],"tags":["logic","condition","true","false","||"],"type":"Special"
},"apply":{ "description":"Apply calls the specified function (first argument) with the subsequent arguments.  The last argument must be an array, which contains the remaining arguments. <br>Example: (apply add 1 2 [ 3 4 5]) <- 15<br>","usage":["function_to_call:function","arg0:*","argN:array"],"tags":["function","arguments","array","call"],"type":"Special"
},"call":{ "description":"Given a target object, a function to call, calls the function in the target object with the target object as the this value. The remaining arguments are provided as arguments to the method being called. A synonym for call is the -> operation.The result of the call is returned.","usage":["target:object","function_to_call:text","argsN:*"],"tags":["function","call","->","this","object"],"type":"Special"
},"->":{ "description":"Given a target object, a function to call, calls the function in the target object with the target object as the this value. The remaining arguments are provided as arguments to the method being called. A synonym for -> is the call operation.The result of the call is returned.","usage":["target:object","function_to_call:text","argsN:*"],"tags":["object","function","call","->","this"],"type":"Special"
},"set_prop":{ "description":"Sets a property on the designated place (an object) using the key as the property name and the provided value as the value.The operator returns the object that was modified.","usage":["place:object","key0:string|number","value0:*","keyN:string","valueN:*"],"tags":[],"type":"Special"
},"prop":{ "description":"Returns a property on the designated place (an object) using the key as the property name.  If the key isn't found, undefined is returned.","usage":["place:object","key:string|number"],"tags":[],"type":"Special"
},"=":{ "description":"Sets the target symbol to the provided value and returns the value.   A Reference error is thrown if the symbol is undeclared.","usage":["target:symbol","value:*"],"tags":["assignment","set","value"],"type":"Special"
},"setq":{ "description":"Sets the target symbol to the provided value and returns the value.   A Reference error is thrown if the symbol is undeclared.","usage":["target:symbol","value:*"],"tags":["assignment","set","value"],"type":"Special"
},"==":{ "description":"Represents the Javascript === operator and returns true if the operands are equal and of the same type, otherwise false.","usage":["value0:*","value1:*"],"tags":["equality","equivalence","equal","eq"],"type":"Special"
},"eq":{ "description":"Represents the Javascript == operator and returns true if the operands are \"equal\".  This is a looser definition of equality then ===, and different types can be considered equal if the underlying value is the same.<br>Example: (== 5 \"5\") is considered the same.","usage":["value0:*","value1:*"],"tags":["equality","equivalence","equal","eq"],"type":"Special"
},">":{ "description":"Returns true if the left value is greater than the right value, otherwise returns false.","usage":["value_left:number","value_right:number"],"tags":["equivalence","equal","comparison","gt"],"type":"Special"
},"<":{ "description":"Returns true if the left value is smaller than the right value, otherwise returns false.","usage":["value_left:number","value_right:number"],"tags":["equivalence","equal","comparison","lt"],"type":"Special"
},">=":{ "description":"Returns true if the left value is greater than or equal to the right value, otherwise returns false.","usage":["value_left:number","value_right:number"],"tags":["equivalence","equal","comparison","gt"],"type":"Special"
},"<=":{ "description":"Returns true if the left value is less than or equal to the right value, otherwise returns false.","usage":["value_left:number","value_right:number"],"tags":["equivalence","equal","comparison","gt"],"type":"Special"
},"new":{ "description":"Given a constructor function and arguments, returns an instantiated object of the requested type.","usage":["constructor:function","argN:*"],"tags":["constructor","instantiation","object","class"],"type":"Special"
},"progn":{ "description":["=:+","The block operator evaluates all forms in the order they were provided and returns the last value.","If the block operator is a top level form, then the forms are evaluated as top level forms, in ","which the form is compiled and immediately evaluated. The results of any side effects of the ","compiled form are therefore available to subsequent processing.<br>","The block operator introduces a new lexical scope boundary (in JS the equivalence { } ) such that symbols ","defined locally to the block via defvar will not be visible to blocks above it, only subforms and ","blocks defined within it."],"usage":["form0:*","form1:*","formN:*"],"tags":["block","progn","do","scope"],"type":"Special"
},"do":{ "description":["=:resolve_path",["definitions","progn"],["=:Environment.get_namespace_handle","core"]],"usage":["form0:*","form1:*","formN:*"],"tags":["block","progn","do","scope"],"type":"Special"
},"progl":{ "description":"Like progn, progl is a block operator, but doesn't establish a new scope boundary in the contained forms.It also doesn't return any values, but acts as a means by which to manipulate quoted forms (for example in a macro).","usage":["form0:*","form1:*","formN:*"],"tags":["block","progn","do"],"type":"Special"
},"break":{ "description":"The break operator is a flow control mechanism used to stop the iteration of a for_each or while loop. It should be used as a direct subform of the for_each or while.","usage":[],"tags":["block","flow","control"],"type":"Special"
},"inc":{ "description":"Increment the target symbol by the default value of 1 or the provided amount as a second argument. The operator returns the new value of the target symbol.","usage":["target:symbol","amount:?number"],"tags":["increment","count","dec"],"type":"Special"
},"dec":{ "description":"Decrement the target symbol by the default value of 1 or the provided amount as a second argument. The operator returns the new value of the target symbol.","usage":["target:symbol","amount:?number"],"tags":["decrement","count","inc"],"type":"Special"
},"try":{ "description":"An expression or block surrounded by a try-catch error clause which throws an Error or subclass of Error is checked against all (but at least 1) catch expressions that match the type of error which has been thrown. If the error type is matched by a handler for that type, the catch expression is evaluated. If a handler for the error type or the error's prototype chain isn't found, the exception is rethrown, for potential interception by handlers further up the stack heirarchy.  In the following example, the specific error thrown is caught locally.  If an error was thrown that wasn't specifically Deno.errors.NotFound, the error would be rethrown: ```(try\n   (write_text_file \"/will/not/work.txt\" \"No permissions\")\n   (catch Deno.errors.NotFound (e)\n     (+ \"CAUGHT: type: \" (subtype e) \"MESSAGE: \" e.message)))```<- \"CAUGHT: type:  NotFound MESSAGE:  No such file or directory (os error 2), open '/will/not/work.txt'\"<br>\nAn example of multiple catches for the same try block:```(try\n  (throw Error \"ERROR MESSAGE\")\n  (catch TypeError (e)\n    (progn\n      (log \"Caught TypeError: \" e.message)\n      \"ERROR 1\"))\n  (catch Error (e)\n    (progn\n        (log \"Caught BaseError: \" e.message)\n        \"ERROR 2\")))```<- \"ERROR 2\"<br><br>The try-catch constructs returns the last value of the try block or the return value from a matched catch block, otherwise there is no local return.<br>Example:```(let\n   ((result (try\n              (throw Error \"Invalid!\") ; just throw to demonstrate the catch return\n              (catch Error (e)\n                  e.message))))\n   result)```<- \"Invalid!\"","usage":["expression:*","error-clause0:array","error-clauseN:array"],"tags":["catch","error","throw","flow","control"],"type":"Special"
},"throw":{ "description":"Given a type as a symbol and a message, constructs an object instance of the specified type and then throws the object.  The thrown object should be lexically enclosed in a try-catch form otherwise the unhandled throw may cause an exit of the runtime (dependent on the runtime environment behavior for uncaught objects.<br>See also: try<br>","usage":["type:symbol","message:string"],"tags":["flow","control","error","exceptions","try","catch"],"type":"Special"
},"catch":{ "description":["=:resolve_path",["definitions","try"],["=:Environment.get_namespace_handle","core"]],"usage":["error_type:*","allocation:array","expression:*"],"tags":["flow","control","error","exceptions","try","throw"],"type":"Special"
},"let":{ "description":"Let is the primary means in which to allocate new bindings, and operate on the declared bindings. The binding forms are evaluated sequentially, but the declared symbols are available for all allocation forms, regardless of position in the sequence of binding forms.  Once all the bindings have been evaluated, the expressions are evaluated in an implicit progn block, with the result of the evaluation of the last expression being returned to the caller.  Note that even though a symbol binding may be accessible to all expressions in the allocation forms, the referenced symbol may not be initialized and have a value of undefined, so caution must be taken to not reference values in prior to initialization.  Syntactically, all symbols allocated in let must be defined an initial value, and so the form (let ((a)) (= a 1)) is invalid.<br><br>Example:```(let\n  ((a 2)      ; b, and f are visible at this point but b and f are undefined\n   (f (fn ()  ; when f is called, a and b will be defined and have value\n        (* a b)))\n   (b 21))    ; once b's init form completes b will be set to the value 21\n  (log \"a is: \" a \" b is: \" b)   ; first block expression - all allocatoins complete\n  (f))         ; last block expression, f will be called and return 42```<- 42<br>Note that the above example doesn't contain an optional declaration form, which must come after the allocations and before the block expressions.<br><br>Another consideration when using let is that within the allocation forms, any references to symbols that are lexically scoped outside the let have their values available.  If the contained let re-binds an existing symbol, the new binding will have lexical precedence and the value of the rebound symbol will be determined by the result of the init-form of the allocation.This same rule applies to global values: if a let rebinds a global symbol in an allocation, the symbol referenced in the let scope will be the local value, and not the global.  This is defined as shadowing.<br>Example: ```(let\n  ((a_binding 1))\n  (log \"outer: a_binding: \" a_binding)\n  (let ;; start inner let\n     ((b_binding 2)\n      (a_binding 3))  ;  a is rebound to 3\n     (log \"inner: a_binding: \" a_binding \" b_binding: \" b_binding)\n     a_binding)\n  (log \"outer: a_binding: \" a_binding) ; outer binding again\n  a_binding)\nout: \"outer: a_binding: \" 1 \nout: \"inner: a_binding: \" 2 \"b_binding: \" 3\nout: \"outer: a_binding: \" 1 ```<br>Declarations can be placed after the allocation form and prior to the expressions comprising the block:```(defun handler (options)\n   (let\n      ((validator options.validator)\n       (user_input (request_user_input \"Enter your value\")))\n      (declare (function validator))\n      (validator user_input)))```<br>In the above the declare provides an optimization hint for the compiler.  Without the declare, the compiler would have to insert code that checks at runtime whether or not the options.validator value is a function prior to calling it, resulting in less execution efficiency. ","usage":["allocations:array","declarations:?expression","expression0:*","expressionN:*"],"tags":["compiler","allocation","symbol","initializing","scope","declaration"],"type":"Special"
},"defvar":{ "description":"Define a symbol in the local block scope. The operation doesn't have a return value and a SyntaxError will be thrown by the compiler if the result of a defvar operation is used as part of an assignment form.","usage":["name:symbol","value:*"],"tags":["allocation","define","var","reference","symbol"],"type":"Special"
},"defconst":{ "description":"Define a constant in either the local scope or global scope.  The defconst operator can be used in both subforms and at the toplevel to specify that a symbol value be treated as a constant.  When top-level, the metadata will indicate that the defined symbol is a constant.  Any attempted changes to the value of the symbol will result in a TypeError being thrown.<br>Example:```(defconst ghi \"Unchanging\")\n<- \"Unchanging\"\n\n(= ghi \"Hi there\")\n<- TypeError Assignment to constant variable ghi```<br>","usage":["name:symbol","value:*"],"tags":["allocation","symbol","define","constant","const"],"type":"Special"
},"while":{ "description":"The while operator checks the return value of a test_expression and if the result of the test is true (or a result equivalent to true), it will then evaluate the body expression. If the result is false, then the while loop doesn't evaluate the body_expression and completes.  Once the body expression is evaluated, the test expression will be evaluated again and the cycle will continue, potentially forever, so it is important to be careful to have a means to break out or the execution environment may not ever return.  The body of the while is not a block, so if there are multiple expressions to be evaluated as part of the body expression they must be wrapped in a progn block operator. The break operator can be used to `break out` of the loop in addition to the test expression returning false.<br>There is no return value from a while loop; it should be considered undefined.<br>Example:```(let\n  ((i 10)\n   (count 0))\n  (while (> i 0)\n    (progn\n      (inc count i)\n      (dec i)))\n  ; note: there is no return value from while\n  count)\n<- 55```","usage":["test_expression:*","body_expression:array"],"tags":["flow","control","loop","break","for_each"],"type":"Special"
},"for_each":{ "description":"The for_each operator provides a simple loop variable that allocates a symbol which is assigned the next value in the returned array from the init form in the allocation. It then evaluates the body expression with the symbol in scope.  It will continue to loop, with the allocated symbol being defined successive values until the end of the array is reached, or a (break) operator is encountered in the body expression. Unlike while, the for_each operator is a collector, and all values returned from the body_expression will be returned as an array from for_each.<br>Example:```(for_each (r (range 5))\n     (* r 2))\n<- [0 2 4 6 8]```<br>","usage":["allocation_form","body_expression:array"],"tags":["flow","control","loop","break","while"],"type":"Special"
},"if":{ "description":"The conditional if operator evaluates the provided test form and if the result of the evaluation is true, evaluates and returns the results of the if_true form, otherwise the if form will evaluate and return the result of the if_false form.<br>Example:```(progn\n   (defvar name (request_user_input \"Enter your name:\"))\n   (if (blank? name)\n        \"No Name Entered\"\n        (+ \"Hello \" name)))\n```","usage":["test_form:*","if_true:*","if_false:*"],"tags":["flow","control","condition","logic","cond","branching"],"type":"Special"
},"cond":{ "description":"The cond operator evaluates test expressions sequentially, until either a true value is returned or the end of the test expressions are reached.  If a test expression returns true, the if_true expression following the test expression is evaluated and the result returned.  If no expressions match, then nil is returned.  There is a special keyword available in the cond form, else, which is syntactic sugar for true, that can be used to always have a default value.  The else or true test expression should always be the final test expression otherwise a SyntaxError will result. <br>Example:```(let\n  ((name (request_user_input \"Enter your first name name:\")))\n  (cond\n    (blank? name)  ; first test\n    \"Hello there no-name!\"\n    (< (length name) 12)  ; second test\n    (+ \"Hello there \" name \"!\")\n    else  ; the default\n    (+ \"Hello there \" name \"! Your first name is long.\")))```<br>","usage":["test_expr0:*","if_true_expr0:*","test_expr1:*","if_true_expr1:*","test_exprN:*","if_true_exprN:*"],"tags":["flow","control","condition","logic","if","branching"],"type":"Special"
},"fn":{ "description":"There are multiple types of functions that can be created depending on the requirements of the use case:<br>The lambda and fn operators create asynchronous functions. The fn is shorthand for lambda and can be used interchangably.<br>The function keyword creates a synchronous function. <br>The => operator creates Javascript arrow functions.<br>All definitions return a form which contains the compiled body expression. The provided argument array maps  the symbol names to bound symbols available within the body expression. The body expression is evaluated with the bound symbols containing the values of arguments provided at time the function is called and the result of the body expression is returned from the function call.<br>Typically, the body expression is a progn with multiple forms, however, this is not always necessary if the function being defined can be contained in a single form.  With the exception of arrow functions, functions always establish a new block scope, and any arguments that have the same symbolic names as globals or variables in the closure that defines the function will be shadowed.<br><br>Once defined, the function is stored in compiled form, meaning that if inspected, the javascript that comprises function will be returned as opposed to the source code of the function.<br>There is a special operator for the arguments that can be used to capture all remaining arguments of a function, the quoted &.  If the `& is included in the argument list of a function, all remaining run time values at the index of the `& operator will be returned as part of the symbol following the `& operator.  This symbol should be the last symbol in a argument list.<br>Example of an asynchronous function:```(fn (a b)     ;; a and b are the arguments that are bound\n   (/ (+ a b) 2)) ;; the body expression that acts on the bound arguments a and b```<br><br>Example with the ampersand argument operator used in a synchronous function:```(function (initial `& vals)\n   (/ (+ initial (apply add vals))\n      (+ 1 (length vals))))```<br>In the above example, add was used in the apply because the + operator isn't a true function.<br>Arrow functions do not define their own scope and should be used as anonymous functions within let and scoped blocks.<br>Example:```(let\n  ((i 0)\n   (my_incrementor (=> (v)\n                     (inc i v)))\n   (my_decrementor (=> (v)\n                     (dec i v))))\n  (my_incrementor 4)\n  (my_decrementor 2)\n  i)```<- 2<br><br>","usage":["arguments:array","body_expression:*"],"tags":["function","lambda","fn","call","apply","scope","arrow","lambda"],"type":"Special"
},"function":{ "description":["=:resolve_path",["definitions","fn"],["=:Environment.get_namespace_handle","core"]],"usage":["arguments:array","body_expression:*"],"tags":["function","lambda","fn","call","apply","scope","arrow","lambda"],"type":"Special"
},"=>":{ "description":["=:resolve_path",["definitions","fn"],["=:Environment.get_namespace_handle","core"]],"usage":["arguments:array","body_expression:*"],"tags":["function","lambda","fn","call","apply","scope","arrow","lambda"],"type":"Special"
},"lambda":{ "description":["=:resolve_path",["definitions","fn"],["=:Environment.get_namespace_handle","core"]],"usage":["arguments:array","body_expression:*"],"tags":["function","lambda","fn","call","apply","scope","arrow","lambda"],"type":"Special"
},"defglobal":{ "description":"Defines a global variable in the current namespace, or if preceded by a namespace qualifier, will place the variable in the designated namespace.  The metadata value is an optional object that provides information about the defined symbol for purposes of help, rehydration, and other context.  The metadata object tags are arbitrary, but depending on the type of value being referenced by the symbol, there are some reserved keys that are used by the system itself.<br>Example:```(defglobal *global_var* \"The value of the global.\"\n           { description: \"This is a global in the current namespace\"\n             tags: [ `keywords `for `grouping ] }\n```<br>The key/value pairs attached to a symbol are arbitrary and can be provided for purposes of description or use by users or programatic elements.","usage":["name:symbol","value:*","metadata:object"],"tags":["function","lambda","fn","call","apply","scope","arrow","lambda"],"type":"Special"
},"yield":{ "description":"Note that the yield operator and generator functions aren't official yet and are still requiring development work and testing due to how to structure the emitted code to ensure that the yield is placed within a function* structure vs. a typical function.","usage":["value:*"],"tags":["generator","experimental"],"type":"Special"
},"for_with":{ "description":"The for_with operator provides a simple loop variable that allocates a symbol which is assigned the next value from the iterator function in the init form in the allocation. It then evaluates the body expression with the symbol in scope.  It will continue to loop, with the allocated symbol being defined successive values until the end of the array is reached, or a (break) operator is encountered in the body expression. Unlike for_each, the for_with operator is not a collector, and there is no return value and attempting to assign the return value will not work.<br>Example:```(for_with (next_val (generator instream))\n     (log (-> text_decoder `decode next_val)))\n```<br>","usage":["allocation_form","body_expression:array"],"tags":["iteration","generator","loop","flow","control"],"type":"Special"
},"Environment":{ "description":"The Environment object facilitates the runtime capabilities of the Juno system.","usage":[],"tags":[],"type":"Special","license":"Copyright (c) 2022-2023, Kina, LLC\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
},"defmacro":{ "description":"Defines the provided name as a compile time macro function in the current namespace environment. The parameters in the lambda list are destructured and bound to the provided names which are then available in the macro function.  The forms are used as the basis for the function with the final form expected to return a quoted form which is then as the expansion of the macro by the compiler. The body of forms are explicitly placed in a progn block.  Like with functions and defglobal, if the final argument to defmacro is an object, this will be used for the metadata associated with with the bound symbol provided as name.<br><br>#### Example <br>```(defmacro unless (condition `& forms)\n  `(if (not ,#condition)\n       (progn \n         ,@forms))) ```<br><br><br>In the above example the macro unless is defined.  Passed arguments must be explicitly unquoted or an error may be thrown because the arguments condition and forms *may* not be defined in the final compilation environment.  Note that if the symbols used by the macro are defined in the final compilation scope, that this may cause unexpected behavior due to the form being placed into the compilation tree and then acting on those symbols. <br>Be aware that if a macro being defined returns an object (not an array) you should explicitly add the final metadata form to explictly ensure appropriate interpretation of the argument positions.<br>Since a macro is a function that is defined to operate at compile time vs. run time, the rules of declare apply.  Declaration operate normally and should be the first form in the block, or if using let, the first form after the allocation block of the let. ","usage":["name:symbol","lambda_list:array","forms:array","meta?:object"],"eval_when":{ "compile_time":true
},"tags":["macro","define","compile","function"],"requires":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"read_lisp":{ "requires":["reader"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"desym":{ "eval_when":{ "compile_time":true
},"name":"desym","macro":true,"fn_args":"(val)","description":"Given a value or arrays of values, return the provided symbol in it's literal, quoted form, e.g. (desym myval) => \"myval\"","usage":["val:string|array"],"tags":["symbol","reference","literal","desymbolize","dereference","deref","desym_ref"],"requires":["as_lisp","is_string?","is_array?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"desym_ref":{ "eval_when":{ "compile_time":true
},"name":"desym_ref","macro":true,"fn_args":"(val)","description":["=:+","Given a value will return the a string containing the desymbolized value or values. ","Example: <br>","(defglobal myvar \"foo\")<br>","(defglobal myarr [ (quote myvar) ])<br>","(desym_ref myarr) <- (myvar)<br>","(desym_ref myarr.0) <- myvar<br>","(subtype (desym_ref myarr.0)) <- \"String\""],"usage":["val:*"],"tags":["symbol","reference","syntax","dereference","desym","desym_ref"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"deref":{ "eval_when":{ "compile_time":true
},"name":"deref","macro":true,"fn_args":"(val)","description":["=:+","If the value that the symbol references is a binding value, aka starting with '=:', then return the symbol value ","instead of the value that is referenced by the symbol. This is useful in macros where a value in a form is ","to be used for it's symbolic name vs. it's referenced value, which may be undefined if the symbol being ","de-referenced is not bound to any value. <br>","Example:<br>","Dereference the symbolic value being held in array element 0:<br>","(defglobal myvar \"foo\")<br>","(defglobal myarr [ (quote myvar) ])<br>","(deref my_array.0) => \"my_var\"<br>","(deref my_array) => [ \"=:my_var\" ]<br>","<br>In the last example, the input to deref isn't a string and so it returns the value as is.  See also desym_ref."],"tags":["symbol","reference","syntax","dereference","desym","desym_ref"],"usage":["symbol:string"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"when":{ "eval_when":{ "compile_time":true
},"name":"when","macro":true,"fn_args":"(condition \"&\" mbody)","description":["=:+","Similar to if, but the body forms are evaluated in an implicit progn, if the condition form or expression is true. ","The function when will return the last form value.  There is no evaluation of the body if the conditional expression ","is false."],"usage":["condition:*","body:*"],"tags":["if","condition","logic","true","progn","conditional"],"requires":["slice"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"if_compile_time_defined":{ "eval_when":{ "compile_time":true
},"name":"if_compile_time_defined","macro":true,"fn_args":"(quoted_symbol exists_form not_exists_form)","description":"If the provided quoted symbol is a defined symbol at compilation time, the exists_form will be compiled, otherwise the not_exists_form will be compiled.","tags":["compile","defined","global","symbol","reference"],"usage":["quoted_symbol:string","exists_form:*","not_exists_form:*"],"requires":["describe"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"defexternal":{ "eval_when":{ "compile_time":true
},"name":"defexternal","macro":true,"fn_args":"(name value)","description":"Given a name and a value, defexternal will add a globalThis property with the symbol name thereby creating a global variable in the javascript environment.","tags":["global","javascript","globalThis","value"],"usage":["name:string","value:*"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"defun":{ "eval_when":{ "compile_time":true
},"name":"defun","macro":true,"fn_args":"(name lambda_list body meta)","description":["=:+","Defines a top level function in the current environment.  Given a name, lambda_list,","body, and a meta data description, builds, compiles and installs the function in the","environment under the provided name.  The body isn't an explicit progn, and must be","within a block structure, such as progn, let or do."],"usage":["name:string:required","lambda_list:array:required","body:array:required","meta:object"],"tags":["function","lambda","define","environment"],"requires":["or_args","length","flatten","destructure_list","decomp_symbol","unquotify","add","as_lisp"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"decomp_symbol":{ "name":"decomp_symbol","fn_args":"(quoted_sym full_resolution)","requires":["split_by","first","not","push","describe","each"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"defun_sync":{ "eval_when":{ "compile_time":true
},"name":"defun_sync","macro":true,"fn_args":"(name args body meta)","description":["=:+","Creates a top level synchronous function as opposed to the default via defun, which creates an asynchronous top level function.","Doesn't support destructuring bind in the lambda list (args). ","Given a name, an argument list, a body and symbol metadata, will establish a top level synchronous function.  If the name is ","fully qualified, the function will be compiled in the current namespace (and it's lexical environment) and placed in the ","specified namespace."],"usage":["name:string","args:array","body:*","meta:object"],"tags":["define","function","synchronous","toplevel"],"requires":["add","unquotify","as_lisp"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"macroexpand":{ "name":"macroexpand","fn_args":"(quoted_form)","description":"Given a quoted form, will perform the macro expansion and return the expanded form.","usage":["quoted_form:*"],"tags":["macro","expansion","debug","compile","compilation"],"requires":["current_namespace","first","meta_for_symbol","is_function?","resolve_path"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"macroexpand_all":{ "name":"macroexpand_all","fn_args":"(quoted_form)","description":["=:+","Given a quoted form, will recursively expand all macros in the quoted form ","and return the expanded form structure"],"usage":["quoted_form:*"],"tags":["macro","expansion","debug","compile","compilation"],"requires":["detokenize","tokenize_lisp"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"check_type":{ "eval_when":{ "compile_time":true
},"name":"check_type","macro":true,"fn_args":"(thing type_name error_string)","description":"If the type of thing (ascertained by sub_type) are not of the type type_name, will throw a TypeError with the optional error_string as the error message.","usage":["thing:*","type_name:string","error_string:string"],"tags":["types","validation","type","assert"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"get_object_path":{ "name":"get_object_path","fn_args":"(refname)","description":"get_object_path is used by the compiler to take a string based notation in the form of p[a][b] or p.a.b and returns an array of the components.","tags":["compiler"],"usage":["refname:string"],"requires":["split_by","push","join"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"do_deferred_splice":{ "name":"do_deferred_splice","fn_args":"(tree)","description":"Internally used by the compiler to facilitate splice operations on arrays.","usage":["tree:*"],"tags":["compiler","build"],"requires":["join","is_array?","push","is_object?","pairs"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"define":{ "eval_when":{ "compile_time":true
},"name":"define","macro":true,"fn_args":"[\"&\" defs]","usage":["declaration:array","declaration:array*"],"description":["=:+","Given 1 or more declarations in the form of (symbol value ?metadata), ","creates a symbol in global scope referencing the provided value.  If a ","metadata object is provided, this is stored as a the symbol's metadata."],"tags":["symbol","reference","definition","metadata","environment"],"requires":["slice","push","as_lisp","is_object?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"defbinding":{ "eval_when":{ "compile_time":true
},"name":"defbinding","macro":true,"fn_args":"[\"&\" args]","description":["=:+","Defines a global binding to a potentially native function.  This macro ","facilitates the housekeeping by keeping track of the source form ","used (and stored in the environment) so that the save environment ","facility can capture the source bindings and recreate it in the initializer ","function on rehydration.<br>","The macro can take an arbitrary amount of binding arguments, with the form: ","(symbol_name (fn_to_bind_to this))"],"usage":["binding_set0:array","binding_setN:array"],"tags":["toplevel","global","bind","environment","initialize"],"requires":["slice","is_array?","push","*namespace*","is_string?","starts_with?","is_object?","add"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"define_env":{ "eval_when":{ "compile_time":true
},"name":"define_env","macro":true,"fn_args":"[\"&\" defs]","description":["=:+","define_env is a macro used to provide a dual definition on the top level: it creates a symbol via defvar in the ","constructed scope as well as placing a reference to the defined symbol in the scope object."],"usage":["definitions:array"],"tags":["environment","core","build"],"requires":["slice","push","as_lisp","is_object?","add"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"type":{ "name":"type","fn_args":"(x)","usage":["value:*"],"description":"returns the type of value that has been passed.  Deprecated, and the sub_type function should be used.","tags":["types","value","what"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"destructure_list":{ "name":"destructure_list","fn_args":"(elems)","description":"Destructure list takes a nested array and returns the paths of each element in the provided array.","usage":["elems:array"],"tags":["destructuring","path","array","nested","tree"],"requires":["push","is_array?","map","add","is_object?","pairs","is_string?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"destructuring_bind":{ "eval_when":{ "compile_time":true
},"name":"destructuring_bind","macro":true,"fn_args":"(bind_vars expression \"&\" forms)","description":["=:+","The macro destructuring_bind binds the variable symbols specified in bind_vars to the corresponding ","values in the tree structure resulting from the evaluation of the provided expression.  The bound ","variables are then available within the provided forms, which are then evaluated.  Note that ","destructuring_bind only supports destructuring arrays. Destructuring objects is not supported."],"usage":["bind_vars:array","expression:array","forms:*"],"tags":["destructure","array","list","bind","variables","allocation","symbols"],"requires":["slice","random_int","destructure_list","is_array?","starts_with?","push","assert","is_value?","first","resolve_path","add","is_object?","second","join","conj","range","length"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"split_by_recurse":{ "name":"split_by_recurse","fn_args":"(token container)","usage":["token:string","container:string|array"],"description":["=:+","Like split_by, splits the provided container at ","each token, returning an array of the split ","items.  If the container is an array, the function ","will recursively split the strings in the array ","and return an array containing the split values ","of that array.  The final returned array may contain ","strings and arrays."],"tags":["split","nested","recursion","array","string"],"requires":["is_string?","split_by","is_array?","map","split_by_recurse"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"defun_sync_ds":{ "eval_when":{ "compile_time":true
},"name":"defun_sync_ds","macro":true,"fn_args":"(name lambda_list body meta)","description":["=:+","Defines a top level function in the current environment.  Given a name, lambda_list,","body, and a meta data description, builds, compiles and installs the function in the","environment under the provided name.  The body isn't an explicit progn, and must be","within a block structure, such as progn, let or do."],"usage":["name:string:required","lambda_list:array:required","body:array:required","meta:object"],"tags":["function","lambda","define","environment"],"requires":["or_args","length","flatten","destructure_list","decomp_symbol","unquotify","add","as_lisp"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"no_await":{ "eval_when":{ "compile_time":true
},"name":"no_await","macro":true,"fn_args":"(form)","description":["=:+","For the provided form in an asynchronous context, forces the compiler flag ","to treat the form as synchronous, thus avoiding an await call.  The return ","value may be impacted and result in a promise being returned ","as opposed to a resolved promise value."],"usage":["no_await:array"],"tags":["compiler","synchronous","await","promise"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"reduce":{ "eval_when":{ "compile_time":true
},"name":"reduce","macro":true,"fn_args":"[(elem item_list) form]","description":["=:+","Provided a first argument as a list which contains a binding variable name and a list, ","returns a list of all non-null return values that result from the evaluation of the second list."],"usage":["allocator:array","forms:*"],"tags":["filter","remove","select","list","array"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"reduce_sync":{ "eval_when":{ "compile_time":true
},"name":"reduce_sync","macro":true,"fn_args":"[(elem item_list) form]","description":"Provided a first argument as a list which contains a binding variable name and a list, returns a list of all non-null return values that result from the evaluation of the second list.","usage":["allocator:array","forms:*"],"tags":["filter","remove","select","list","array"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"bind_function":{ "description":"Reference bind and so has the exact same behavior.  Used for Kina legacy code. See bind description.","requires":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"is_error?":{ "name":"is_error?","fn_args":"(val)","description":"Returns true if the passed value is a instance of an Error type, otherwise returns false.","usage":["val:*"],"tags":["Error","types","predicate","type","instanceof"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"is_reference?":{ "eval_when":{ "compile_time":true
},"name":"is_reference?","macro":true,"fn_args":"(val)","description":["=:+","Returns true if the quoted value is a binding string; in JSON notation this would be a string starting with \"=:\". ","Note that this function doesn't check if the provided value is a defined symbol, but only if it has been ","described in the JSON structure as a bounding string."],"usage":["val:string"],"tags":["reference","JSON","binding","symbol","predicate"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"scan_str":{ "name":"scan_str","fn_args":"(regex search_string)","description":["=:+","Using a provided regex and a search string, performs a regex ","exec using the provided regex argument on the string argument. ","Returns an array of results or an empty array, with matched ","text, index, and any capture groups."],"usage":["regex:RegExp","text:string"],"tags":["regex","string","match","exec","array"],"requires":["is_regex?","not","push","to_object","keys","log"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"remove_prop":{ "name":"remove_prop","fn_args":"(obj key)","usage":["obj:object","key:*"],"description":["=:+","If the provided key exists, removes the key from the provided object, ","and returns the removed value if the key exists, otherwise returned undefined."],"tags":["object","key","value","mutate","delete_prop","remove"],"requires":["not","delete_prop"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"object_methods":{ "name":"object_methods","fn_args":"(obj)","description":"Given a instantiated object, get all methods (functions) that the object and it's prototype chain contains.","usage":["obj:object"],"tags":["object","methods","functions","introspection","keys"],"requires":["map","is_function?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"expand_dot_accessor":{ "name":"expand_dot_accessor","fn_args":"(val ctx)","description":"Used for compilation. Expands dotted notation of a.b.0.1 to a[\"b\"][0][1]","usage":["val:string","ctx:object"],"tags":["compiler","system"],"requires":["split_by","take","is_object?","contains?","object_methods","not","join","conj","flatten","is_number?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"from_mixed_case":{ "name":"from_mixed_case","fn_args":"(mixed_case_key)","description":["=:+","<br><br>Given a mixed case string, will return the standardized key format ","representation of the string.  For example,  the string `myVariable` will be ","returned as `my_variable` with this function.  A TypeError will be thrown if a ","non-string argument is provided. "],"usage":["mixed_case_key:string"],"tags":["key","convert","snake","mixed","case","format"],"requires":["is_string?","split_by","push","lowercase","join"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"to_mixed_case":{ "name":"to_mixed_case","fn_args":"(snake_case_key)","description":["=:+","<br><br>Given a snake case string, will return a mixed case key format ","representation of the string.  For example,  the string `my_variable` will be ","returned as `myVariable` with this function.  A TypeError will be thrown if a ","non-string argument is provided. "],"usage":["snake_case_key:string"],"tags":["key","convert","snake","mixed","case","format"],"requires":["is_string?","split_by","push","uppercase","join"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"new_ctx":{ "name":"new_ctx","fn_args":"(ctx)","description":"Used for compilation. Given a context structure, provides a utility function for retrieving a context value based on a provided identifier.","usage":["ctx:?object"],"tags":["compiler","system","context","ctx","setf_ctx"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"getf_ctx":{ "name":"getf_ctx","fn_args":"(ctx name _value)","description":"Used for compilation. Given a context structure, provides a utility function for retrieving a context value based on a provided identifier.","usage":["ctx:object","name:string"],"tags":["compiler","system","context","ctx","new_ctx","setf_ctx"],"requires":["is_string?","not","getf_ctx"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"setf_ctx":{ "name":"setf_ctx","fn_args":"(ctx name value)","description":"Used for compilation. Given a context structure, provides a utility function for setting a context place with value.","usage":["ctx:object","name:string","value:*"],"tags":["compiler","system","context","ctx","new_ctx","getf_ctx"],"requires":["getf_ctx"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"set_path":{ "name":"set_path","fn_args":"(path obj value)","description":["=:+","Given a path value as an array, a tree structure, and a value, ","sets the value within the tree at the path value, potentially overriding any existing value at that path.<br><br>","(defglobal foo [ 0 2 [ { `foo: [ 1 4 3 ] `bar: [ 0 1 2 ] } ] 3 ])<br>","(set_path [ 2 0 `bar 1 ] foo 10) => [ 0 10 2 ]<br>","foo => [ 0 2 [ { foo: [ 1 4 3 ] bar: [ 0 10 2 ] } ] 3 ]"],"tags":["resolve_path","make_path","path","set","tree","mutate"],"usage":["path:array","tree:array|object","value:*"],"requires":["pop","resolve_path"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"make_path":{ "name":"make_path","fn_args":"(target_path root_obj value _pos)","description":["=:+","Given a target_path array, a target object and a value to set, ","constructs the path to the object, constructing where ","required.  If the path cannot be made due to a ","non-nil, non-object value encountered at one of ","the path segments, the function will throw a TypeError, ","otherwise it will return the provided value if successful."],"usage":["path:array","root_obj:object","value:*"],"tags":["set_path","path","set","object","resolve_path","mutate"],"requires":["take","push","set_path","resolve_path","is_object?","first","make_path","as_lisp","add"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"minmax":{ "name":"minmax","fn_args":"(container)","usage":["container:array"],"description":"Given an array of numbers returns an array containing the smallest and the largest values found in the provided array. ","tags":["list","number","range","value"],"requires":["MAX_SAFE_INTEGER","is_array?","length","is_number?"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"aif":{ "eval_when":{ "compile_time":true
},"name":"aif","macro":true,"fn_args":"(test_expr eval_when_true eval_when_false)","description":["=:+","Anaphoric If - This macro defines a scope in which the symbol `it is used ","to store the evaluation of the test form or expression.  It is then available ","in the eval_when_true form and, if provided, the eval_when_false expression."],"usage":["test_expression:*","eval_when_true:*","eval_when_false:*?"],"tags":["conditional","logic","anaphoric","if","it"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"ifa":{ "eval_when":{ "compile_time":true
},"name":"ifa","macro":true,"fn_args":"(test thenclause elseclause)","description":"Similar to if, the ifa macro is anaphoric in binding, where the it value is defined as the return value of the test form. Use like if, but the it reference is bound within the bodies of the thenclause or elseclause.","usage":["test:*","thenclause:*","elseclause:*"],"tags":["cond","it","if","anaphoric"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"map_range":{ "name":"map_range","fn_args":"(n from_range to_range)","usage":["n:number","from_range:array","to_range:array"],"tags":["range","scale","conversion"],"description":["=:+","Given an initial number n, and two numeric ranges, maps n from the first range ","to the second range, returning the value of n as scaled into the second range. "],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"range_inc":{ "name":"range_inc","fn_args":"(start end step)","description":["=:+","Similar to range, but is end inclusive: [start end] returning an array containing values from start, including end. ","vs. the regular range function that returns [start end).  ","If just 1 argument is provided, the function returns an array starting from 0, up to and including the provided value."],"usage":["start:number","end?:number","step?:number"],"tags":["range","iteration","loop"],"requires":["range","add"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"HSV_to_RGB":{ "name":"HSV_to_RGB","fn_args":"(h s v)","description":["=:+","Given a hue, saturation and brightness, all of which ","should be values between 0 and 1, returns an object ","containing 3 keys: r, g, b, with values between 0 and 255, ","representing the corresponding red, green and blue values ","for the provided hue, saturation and brightness."],"usage":["hue:number","saturation:number","value:number"],"tags":["color","conversion","hue","saturation","brightness","red","green","blue","rgb"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"color_for_number":{ "name":"color_for_number","fn_args":"(num saturation brightness)","usage":["number:number","saturation:float","brightness:float"],"description":"Given an arbitrary integer, a saturation between 0 and 1 and a brightness between 0 and 1, return an RGB color string","tags":["ui","color","view"],"requires":["map_range","HSV_to_RGB"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"flatten_ctx":{ "name":"flatten_ctx","fn_args":"(ctx _var_table)","description":"Internal usage by the compiler, flattens the hierarchical context structure to a single level. Shadowing rules apply.","usage":["ctx_object:object"],"tags":["system","compiler"],"requires":["keys","not","contains?","flatten_ctx"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"identify_symbols":{ "name":"identify_symbols","fn_args":"(quoted_form _state)","requires":["is_array?","push","identify_symbols","is_string?","starts_with?","as_lisp","describe","is_object?","values"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"unless":{ "eval_when":{ "compile_time":true
},"name":"unless","macro":true,"fn_args":"(condition \"&\" forms)","description":"opposite of if, if the condition is false then the forms are evaluated","usage":["condition:array","forms:array"],"tags":["if","not","ifnot","logic","conditional"],"requires":["slice"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"use_quoted_initializer":{ "eval_when":{ "compile_time":true
},"name":"use_quoted_initializer","macro":true,"fn_args":"[\"&\" forms]","description":["=:+","The macro `use_quoted_initializer` preserves the source form in the ","symbol definition object.  When the environment is saved, any source forms that ","wish to be preserved through the serialization process should be in the body of ","this macro.  This is a necessity for global objects that hold callable ","functions, or functions or structures that require initializers, such as things ","that connect or use environmental resources.  "],"usage":["forms:array"],"tags":["compilation","save_env","export","source","use","compiler","compile"],"requires":["slice","is_array?","is_object?","resolve_path","set_path","warn","is_string?","macroexpand"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"but_last":{ "name":"but_last","fn_args":"(arr)","description":["=:+","Given an array, returns all elements except the final element.  This ","function is the inverse of `last`.  If there are less than 2 elements in the ","array (0 or 1 elements), then an empty array is returned.  If a non-array is ","provided, the function will throw a `TypeError`. "],"usage":["arr:array"],"tags":["array","last","elements","front","head","rest"],"requires":["is_array?","slice","sub_type"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"random_int":{ "name":"random_int","fn_args":"[\"&\" \"args\"]","description":["=:+","Returns a random integer between 0 and the argument. ","If two arguments are provided then returns an integer ","between the first argument and the second argument."],"usage":["arg1:number","arg2?:number"],"tags":["rand","number","integer"],"requires":["length","add"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"resolve_multi_path":{ "name":"resolve_multi_path","fn_args":"(path obj not_found)","tags":["path","wildcard","tree","structure"],"usage":["path:array","obj:object","not_found:?*"],"description":["=:+","Given a list containing a path to a value in a nested array, return the value at the given ","path. If the value * is in the path, the path value is a wild card if the passed object ","structure at the path position is a vector or list."],"requires":["is_object?","length","first","not","is_array?","resolve_multi_path","rest","values"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"delete_path":{ "name":"delete_path","fn_args":"(path obj)","description":["=:+","Given a path and an target object, removes the specified value ","at the path and returns the original object, which will have been modified. ","If the value isn't found, there are no modifications to the object and the ","object is returned.  Will throw a TypeError if the obj argument isn't an ","object type, of if the path isn't an array with at least one element."],"usage":["path:array","obj:object"],"tags":["path","delete","remove","object","resolve","modify","value"],"requires":["pop","not","is_array?","is_object?","length","is_value?","delete_prop","resolve_path"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"symbol_tree":{ "name":"symbol_tree","fn_args":"(quoted_form _state _current_path)","description":"Given a quoted form as input, isolates the symbols of the form in a tree structure so dependencies can be seen.","usage":["quoted_form:quote"],"tags":["structure","development","analysis"],"requires":["unquotify","resolve_multi_path","is_array?","push","map","symbol_tree","conj","add","is_string?","starts_with?","is_object?","pairs"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"except_nil":{ "name":"except_nil","fn_args":"[\"items\"]","description":"Takes the passed list or set and returns a new list that doesn't contain any undefined or nil values.  Unlike no_empties, false values and blank strings will pass through.","usage":["items:list|set"],"tags":["filter","nil","undefined","remove","no_empties"],"requires":["not","sub_type","push"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"each":{ "name":"each","fn_args":"(items property)","description":["=:+","Provided a list of items, provide a property name or ","a list of property names to be extracted and returned from the source array as a new list.","If property is an array, and contains values that are arrays, those arrays will be treated as a path."],"usage":["items:list","property:string|list|function|AsyncFunction"],"tags":["pluck","element","only","list","object","property"],"requires":["is_string?","is_number?","except_nil","sub_type","is_array?","push","resolve_path","is_function?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"replace":{ "name":"replace","fn_args":"[\"&\" args]","description":["=:+","Given at least 3 arguments, finds the first  argument, and replaces with the second argument, operating on the third plus argument.  ","This function will act to replace and find values in strings, arrays and objects.  When replacing values in strings, be aware that ","only the first matching value will be replaced.  To replace ALL values in strings, use a RegExp with the `g flag set, such as ","(new RegExp \"Target String\" `g).  For example, the following replaces all target values in the target string:<br>","(replace (new RegExp \"Indiana\" `g) \"Illinois\" \"The address of the location in Indiana has now been changed to 123 Main Street, Townville, Indiana.\")"],"usage":["target:string|regexp","replacement:string|number","container:string|array|object"],"tags":["replace","find","change","edit","string","array","object"],"requires":["slice","push","replace","keys","not","first"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"get_symbol_details_for_ns":{ "name":"get_symbol_details_for_ns","fn_args":"(namespace symbol_name)","description":"Given a namespace and a symbol name returns the details for the specific symbol in the namespace if found, or nil if not.","tags":["namespace","symbol","find","meta","details"],"usage":["namespace:string","symbol_name:string"],"requires":["is_string?","first","push","meta_for_symbol"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"env_encode_string":{ "name":"env_encode_string","fn_args":"(text)","requires":["push"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"cl_encode_string":{ "name":"cl_encode_string","fn_args":"(text)","requires":["is_string?","replace","add","split_by","join"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"fn_signature":{ "name":"fn_signature","fn_args":"(f)","description":["=:+","For a given function as an argument, returns an object with a ","type key containing the function type (async, sync) and an args ","key with an array for the arguments.  Note that a string value which ","is the result of a function serialized with the function's ","toString() method can also be passed."],"usage":["f:function|string"],"tags":["function","signature","arity","inspect"],"requires":["is_function?","is_string?","trim","first","split_by","replace","starts_with?","second","chop","index_of"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"path_to_js_syntax":{ "name":"path_to_js_syntax","fn_args":"(comps)","description":"Used by the compiler, converts an array containing the components of a path to Javascript syntax, which is then returned as a string.","usage":["comps:array"],"tags":["compiler","path","js","javascript"],"requires":["is_array?","join","map","int","starts_with?","sub_type"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"first_is_upper_case?":{ "name":"first_is_upper_case?","fn_args":"(str_val)","description":"Returns true if the first character of the provided string is an uppercase value in the range [A-Z]. ","usage":["str_val:string"],"tags":["string","case","uppercase","capitalized"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"safe_access_2":{ "name":"safe_access_2","fn_args":"(token ctx sanitizer_fn)","requires":["split_by","push","take","join","expand_dot_accessor","flatten"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"safe_access":{ "name":"safe_access","fn_args":"(token ctx sanitizer_fn)","requires":["split_by","push","take","expand_dot_accessor","join","flatten"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"compile_to_js":{ "eval_when":{ "compile_time":true
},"name":"compile_to_js","macro":true,"fn_args":"(quoted_form)","description":["=:+","Given a quoted form, returns an array with two elements, element 0 is the compilation metadata, ","and element 1 is the output Javascript as a string."],"usage":["quoted_form:*"],"tags":["compilation","source","javascript","environment"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"evaluate_compiled_source":{ "eval_when":{ "compile_time":true
},"name":"evaluate_compiled_source","macro":true,"fn_args":"(compiled_source)","description":["=:+","The macro evaluate_compiled_source takes the direct output of the compiler, ","which can be captured using the macro compile_to_js, and performs the ","evaluation of the compiled source, thereby handling the second half of the ","compile then evaluate cycle.  This call will return the results of ","the evaluation of the compiled code assembly."],"usage":["compiled_source:array"],"tags":["compilation","compile","eval","pre-compilation"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"form_structure":{ "name":"form_structure","fn_args":"(quoted_form max_depth)","description":["=:+","Given a form and an optional max_depth positive number, ","traverses the passed JSON form and produces a nested array structure that contains","the contents of the form classified as either a \"symbol\", \"number\", \"string\", \"boolean\", \"array\", \"object\", or the elem itself. ","The returned structure will mirror the passed structure in form, except with the leaf contents ","being replaced with generalized categorizations."],"tags":["validation","compilation","structure"],"usage":["quoted_form:*","max_depth:?number"],"requires":["MAX_SAFE_INTEGER","is_array?","is_object?","map","add","pairs","is_string?","starts_with?","is_number?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"validate_form_structure":{ "name":"validate_form_structure","fn_args":"(validation_rules quoted_form)","description":["=:+","Given a validation rule structure and a quoted form to analyze returns an object with ","two keys, valid and invalid, which are arrays containing the outcome of the rule ","evaluation, a rule_count key containing the total rules passed, and an all_passed key","which will be set to true if all rules passed, otherwise it will fail.","If the rule evaluates successfully, valid is populated with the rule path, ","otherwise the rule path is placed in the invalid array.<br><br>","Rule structure is as follows:<br><code>","[ [path [validation validation ...] \"rule_name\"] [path [validation ...] \"rule_name\"] ]<br>","</code>","where path is an array with the index path and ","validation is a single argument lambda (fn (v) v) that must either ","return true or false. If true, the validation is considered correct, ","false for incorrect.  The result of the rule application will be put in the valid array, ","otherwise the result will be put in invalid."],"tags":["validation","rules","form","structure"],"usage":["validation_rules:array","quoted_form:*"],"requires":["length","is_array?","resolve_path","not","push"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"*compiler_syntax_rules*":{ "requires":["is_array?","not","length","rest"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"tokenize_lisp":{ "name":"tokenize_lisp","fn_args":"(quoted_source)","description":["=:+","Given a quoted source, returns the compilation tokens for the source, prior ","to the actual compilation step.  Any functions that are specified as ","compile_time for eval_when, such as macros, will be expanded and the results of ","the expansions will be in the returned token form. "],"usage":["quoted_source:*"],"tags":["compilation","compiler","tokenize","token","tokens","precompiler"],"requires":["current_namespace","compiler"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"detokenize":{ "name":"detokenize","fn_args":"(token)","description":["=:+","Converts the provided compiler tokens to a JSON structure representing ","the original source tree. "],"usage":["token_structure:object|array"],"tags":["compilation","compiler","tokenize","token","tokens","precompiler"],"requires":["is_array?","detokenize","is_object?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"describe_all":{ "name":"describe_all","fn_args":"[]","description":"Returns an object with all defined symbols as the keys and their corresponding descriptions.","usage":[],"tags":["env","environment","symbol","symbols","global","globals"],"requires":["add","to_object","describe","symbols"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"is_value?":{ "name":"is_value?","fn_args":"(val)","description":"Returns true for anything that is not nil or undefined or false.","usage":["val:*"],"tags":["if","value","truthy",false,true],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"sort":{ "name":"sort","fn_args":"(elems options)","description":["=:+","Given an array of elements, and an optional options object, returns a new sorted array.","With no options provided, the elements are sorted in ascending order.  If the key ","reversed is set to true in options, then the elements are reverse sorted. ","<br>","An optional synchronous function can be provided (defined by the comparitor key) which is expected to take ","two values and return the difference between them as can be used by the sort method of ","JS Array.  Additionally a key value can be provided as either a string (separated by dots) or as an array ","which will be used to bind (destructure) the a and b values to be compared to nested values in the elements ","of the array.","<br>","<br>","Options:<br>","reversed:boolean:if true, the elements are reverse sorted.  Note that if a comparitor function is provided, then ","this key cannot be present, as the comparitor should deal with the sorting order.<br>","key:string|array:A path to the comparison values in the provided elements. If a string, it is provided as period ","separated values.  If it is an array, each component of the array is a successive path value in the element to be ","sorted. <br>","comparitor:function:A synchronous function that is to be provided for comparison of two elements.  It should take ","two arguments, and return the difference between the arguments, either a positive or negative."],"usage":["elements:array","options:object?"],"tags":["array","sorting","order","reverse","comparison","objects"],"requires":["is_object?","is_function?","is_string?","assert","is_array?","not","path_to_js_syntax","get_object_path","conj"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"and*":{ "name":"and*","fn_args":"[\"&\" vals]","description":["=:+","Similar to and, but unlike and, values that ","are \"\" (blank) or NaN are considered to be true.","Uses is_value? to determine if the value should be considered to be true.","Returns true if the given arguments all are considered a value, ","otherwise false.  If no arguments are provided, returns undefined."],"usage":["val0:*","val1:*","val2:*"],"tags":["truth","and","logic","truthy"],"requires":["slice","not","is_value?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"or*":{ "name":"or*","fn_args":"[\"&\" vals]","description":["=:+","Similar to or, but unlike or, values that ","are \"\" (blank) or NaN are considered to be true.","Uses is_value? to determine if the value should be considered to be true.","Returns true if the given arguments all are considered a value, ","otherwise false.  If no arguments are provided, returns undefined."],"usage":["val0:*","val1:*","val2:*"],"tags":["truth","or","logic","truthy"],"requires":["slice","is_value?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"either":{ "name":"either","fn_args":"[\"&\" args]","description":["=:+","Similar to or, but unlike or, returns the first non nil ","or undefined value in the argument list whereas or returns ","the first truthy value."],"usage":["values:*"],"tags":["nil","truthy","logic","or","undefined"],"requires":["slice","not"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"sanitize_js_ref_name":{ "name":"sanitize_js_ref_name","fn_args":"(symname)","requires":["not","is_string?","split_by","push","contains?","join"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"is_symbol?":{ "eval_when":{ "compile_time":true
},"name":"is_symbol?","macro":true,"fn_args":"(symbol_to_find)","usage":["symbol:string|*"],"description":["=:+","If provided a quoted symbol, will return true if the symbol can be found ","in the local or global contexts."],"tags":["context","env","def"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"defvalue":{ "eval_when":{ "compile_time":true
},"name":"defvalue","macro":true,"fn_args":"(sym value meta)","description":["=:+","If the provided symbol is already defined as an accessible ","global value from the current namespace it will return the ","defined value, otherwise it will define the global in the ","current (implicit) namespace or the explicitly referenced ","namespace.  Returns the newly defined value or previously ","defined value."],"usage":["sym:symbol|string","value:*","meta:?object"],"tags":["allocation","reference","symbol","value","set","reference","global"],"requires":["is_object?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"defparameter":{ "eval_when":{ "compile_time":true
},"name":"defparameter","macro":true,"fn_args":"(sym value meta)","description":["=:+","Defines a global that is always reset to the provided value, ","when called or when the image is reloaded, ensuring that the ","initial value is always set to a specific value.  If the value ","is already defined, it will be overwritten.  To set a symbol in ","an explicit namespace, provide a fully qualified symbol name ","in the form of namspace/symname as the symbol to be defined. ","Returns the defined value."],"usage":["sym:symbol|string","value:*","meta:?object"],"tags":["allocation","reference","symbol","value","set","reference","global"],"requires":["is_object?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"get_function_args":{ "name":"get_function_args","fn_args":"(f)","description":"Given a javascript function, return a list of arg names for that function","usage":["function:function"],"tags":["function","introspect","introspection","arguments"],"requires":["scan_str","is_object?","map","ends_with?","chop","split_by","second"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"findpaths":{ "name":"findpaths","fn_args":"(value structure)","requires":["is_array?","map","is_object?","conj","push","pairs"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"warn":{ "description":"Prefixes a warning symbol prior to the arguments to the console.  Otherwise the same as console.log.","usage":["args0:*","argsN:*"],"tags":["log","warning","error","signal","output","notify","defclog"],"initializer":["=:defclog",{ "prefix":"⚠️  "
}],"requires":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"success":{ "description":"Prefixes a green checkmark symbol prior to the arguments to the console.  Otherwise the same as console.log.","usage":["args0:*","argsN:*"],"tags":["log","warning","notify","signal","output","ok","success","defclog"],"initializer":["=:defclog",{ "color":"green","prefix":"✓  "
}],"requires":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"in_background":{ "eval_when":{ "compile_time":true
},"name":"in_background","macro":true,"fn_args":"[\"&\" forms]","description":["=:+","Given a form or forms, evaluates the forms in the background, with ","the function returning true immediately prior to starting the forms."],"usage":["forms:*"],"tags":["eval","background","promise","evaluation"],"requires":["slice"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"set_compiler":{ "name":"set_compiler","fn_args":"(compiler_function)","description":["=:+","Given a compiled compiler function, installs the provided function as the ","environment's compiler, and returns the compiler function."],"usage":["compiler_function:function"],"tags":["compilation","environment","compiler"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"show":{ "name":"show","fn_args":"(thing)","usage":["thing:function"],"description":"Given a name to a compiled function, returns the source of the compiled function.  Otherwise just returns the passed argument.","tags":["compile","source","javascript","js","display"],"requires":["is_function?"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"export_symbols":{ "eval_when":{ "compile_time":true
},"name":"export_symbols","macro":true,"fn_args":"[\"&\" args]","usage":["arg0:string|array","argN:string|array"],"description":["=:+","The export_symbols macro facilitates the Javascript module export functionality.  ","To make available defined lisp symbols from the current module the export_symbols ","macro is called with it's arguments being either the direct symbols or, if an ","argument is an array, the first is the defined symbol within the lisp environment ","or current module and the second element in the array is the name to be exported ","as.  For example: <br> ","(export lisp_symbol1 lisp_symbol2) ;; exports lisp_symbol1 and lisp_symbol2 directly. <br>","(export (lisp_symbol1 external_name)) ;; exports lisp_symbol1 as 'external_name`. <br>","(export (initialize default) symbol2) ;; exports initialize as default and symbol2 as itself."],"tags":["env","enviroment","module","export","import","namespace","scope"],"requires":["slice","length","is_array?","push","is_string?","starts_with?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"register_feature":{ "name":"register_feature","fn_args":"(feature)","description":"Adds the provided string to the *env_config* features.  Features are used to mark what functionality is present in the environment.","tags":["environment","modules","libraries","namespaces"],"usage":["feature:string"],"requires":["not","contains?","*env_config*","push"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"uniq":{ "name":"uniq","fn_args":"(values)","description":["=:+","Given a list of values, returns a new list with unique, deduplicated values. ","If the values list contains complex types such as objects or arrays, set the ","handle_complex_types argument to true so they are handled appropriately. "],"usage":["values:list"],"tags":["list","dedup","duplicates","unique","values"],"requires":["map","to_array"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"time_in_millis":{ "eval_when":{ "compile_time":true
},"name":"time_in_millis","macro":true,"fn_args":"[]","usage":[],"tags":["time","milliseconds","number","integer","date"],"description":"Returns the current time in milliseconds as an integer","requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"defns":{ "name":"defns","fn_args":"(name options)","usage":["name:string","options:object"],"description":["=:+","Given a name and an optional options object, creates a new namespace ","identified by the name argument.  If the options object is provided, the following keys are available:","<br>","ignore_if_exists:boolean:If set to true, if the namespace is already defined, do not return an error ","and instead just return with the name of the requested namespace. Any other options are ignored and ","the existing namespace isn't altered.","contained:boolean:If set to true, the newly defined namespace will not have visibility to other namespaces ","beyond 'core' and itself.  Any fully qualified symbols that reference other non-core namespaces will ","fail.","serialize_with_image:boolean:If set to false, if the environment is saved, the namespace will not be ","included in the saved image file.  Default is true."],"tags":["namespace","environment","define","scope","context"],"requires":["is_string?","contains?","namespaces","create_namespace"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"use_ns":{ "eval_when":{ "compile_time":true
},"name":"use_ns","macro":true,"fn_args":"(name)","usage":["name:symbol"],"description":"Sets the current namespace to the provided name.  Returns the name of the new namespace if succesful, otherwise an Eval error is thrown","tags":["namespace","environment","scope","change","set"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"bind_and_call":{ "name":"bind_and_call","fn_args":"(target_object this_object method \"&\" args)","usage":["target_object:object","this_object:object","method:string","args0:*","argsn:*"],"description":"Binds the provided method of the target object with the this_object context, and then calls the object method with the optional provided arguments.","tags":["bind","object","this","context","call"],"requires":["slice","bind"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"clamp":{ "name":"clamp","fn_args":"(value min max)","description":["=:+","Given a numeric value, along with minimum and maximum values for the provided value, ","the function will return the value if between the bounding values, otherwise ","the closest bounding value will be returned.  If the value is above the provided ","maximum, then the maximum will be returned.  If the value is below the minimum, then ","the minimum value is returned."],"tags":["value","number","min","max","bounds","boundary","range"],"usage":["value:number","min:number","max:number"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"save_locally":{ "name":"save_locally","fn_args":"(fname data content_type)","description":["=:+","Provided a filename, a data buffer, and a MIME type, such as \"text/javascript\", ","triggers a browser download of the provided data with the filename.  Depending ","on the browser configuration, the data will be saved to the configured ","user download directory, or prompt the user for a save location. "],"usage":["filename:string","data:*","content_type:string"],"tags":["save","download","browser"],"requires":["document"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"fetch_text":{ "name":"fetch_text","fn_args":"(url)","description":["=:+","Given a url, returns the text content of that url. ","This function is a helper function for the import macro."],"usage":["url:string"],"tags":["fetch","text","string"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"import":{ "eval_when":{ "compile_time":true
},"name":"import","macro":true,"fn_args":"[\"&\" args]","description":["=:+","Dynamically load the contents of the specified source file (including ","path) into the Lisp environment in the current namespace.<br>If the file is a ","Lisp source, it will be evaluated as part of the load and the final result ","returned.  <br>If the file is a JS source, it will be loaded into the ","environment and a handle returned.  When importing non-Lisp sources (javascript ","or typescript), import requires a binding symbol in an array as the first ","argument.  <br>The allowed extensions are `.lisp`, `.js`, `.json`, `.juno`, and ","if the JS platform is Deno, `.ts` is allowed.  Otherwise an `EvalError` will be ","thrown due to a non-handled file type.<br><br>#### Examples - Server ","<br><br>When on a server instance the path can be relative:```(import ","\"tests/compiler_tests.lisp\")```<br><br>For a remote Javascript/Typescript ","resource:```(import (logger) ","\"https://deno.land/std@0.148.0/log/mod.ts\")```<br><br>For a local ","Javascript/Typescript resource:```(import (logger) ","\"/absolute/path/to/library.js\")\n```<br><br>Note that this is a dynamic import. ","<br><br>#### Example - Browser <br><br>With the browser, to import, the ","environment should be hosted for access to served resources:```(import ","\"/pkg/doc_generation.juno\")```<br><br><br> "],"tags":["compile","read","io","file","get","fetch","load","dynamic_import"],"usage":["binding_symbols:array","filename:string"],"requires":["slice","last","contains?","not","starts_with?","ends_with?","length","is_array?","push","current_namespace"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"system_date_format":{ "description":"The system date format structure that is used by the system_date_formatter.If modified, the system_date_formatter, which is a Intl.DateTimeFormat object should be reinitialized by calling (new Intl.DateTimeFormat [] system_date_format).","tags":["time","date","system"],"requires":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"system_date_formatter":{ "initializer":["=:new","=:Intl.DateTimeFormat",[],{ "weekday":"long","year":"numeric","month":"2-digit","day":"2-digit","hour":"numeric","minute":"numeric","second":"numeric","fractionalSecondDigits":3,"hourCycle":"h24","hour12":false,"timeZoneName":"short"
}],"tags":["time","date","system"],"description":"The instantiation of the system_date_format.  See system_date_format for additional information.","requires":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"tzoffset":{ "name":"tzoffset","fn_args":"[]","description":"Returns the number of seconds the local timezone is offset from GMT","usage":[],"tags":["time","date","timezone"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"date_components":{ "name":"date_components","fn_args":"(date_value date_formatter)","usage":["date_value:Date","date_formatter:DateTimeFormat?"],"description":"Given a date value, returns an object containing a the current time information broken down by time component. Optionally pass a Intl.DateTimeFormat object as a second argument.","tags":["date","time","object","component"],"requires":["is_date?","to_object","map","bind_and_call","system_date_formatter"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"formatted_date":{ "name":"formatted_date","fn_args":"(dval date_formatter)","usage":["dval:Date","date_formatter:DateTimeFormat?"],"description":"Given a date object, return a formatted string in the form of: \"yyyy-MM-d HH:mm:ss\".  Optionally pass a Intl.DateTimeFormat object as a second argument.","tags":["date","format","time","string"],"requires":["date_components","join","values"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"*LANGUAGE*":{ "requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"dtext":{ "name":"dtext","fn_args":"(default_text)","usage":["text:string","key:string?"],"description":["=:+","Given a default text string and an optional key, if a key ","exists in the global object *LANGUAGE*, return the text associated with the key. ","If no key is provided, attempts to find the default text as a key in the *LANGUAGE* object. ","If that is a nil entry, returns the default text."],"tags":["text","multi-lingual","language","translation","translate"],"requires":["*LANGUAGE*"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"nth":{ "name":"nth","fn_args":"(idx collection)","description":["=:+","Based on the index or index list passed as the first argument, ","and a collection as a second argument, return the specified values ","from the collection. If an index value is negative, the value ","retrieved will be at the offset starting from the end of the array, ","i.e. -1 will return the last value in the array."],"tags":["filter","select","pluck","object","list","key","array"],"usage":["idx:string|number|array","collection:list|object"],"requires":["is_array?","map","nth","is_number?","length","add"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"max_index":{ "name":"max_index","fn_args":"(container)","description":["=:+","Given a container, typically an Array or derivative, ","return the max index value, calculated as length - 1.<br>"],"usage":["container:array"],"tags":["length","array","container","max","index","range","limit"],"requires":["length"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"decode_text":{ "name":"decode_text","fn_args":"(buffer)","description":"Given a source buffer, such as a Uint8Array, decode into utf-8 text.","usage":["buffer:ArrayBuffer"],"tags":["decode","encode","string","array","text"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"encode_text":{ "name":"encode_text","fn_args":"(text)","description":"Given a source buffer, such as a Uint8Array, decode into utf-8 text.","usage":["buffer:ArrayBuffer"],"tags":["decode","encode","string","array","text"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"hostname":{ "name":"hostname","fn_args":"[]","description":"Returns the hostname of the system the environment is running on.","usage":[],"tags":["hostname","server","environment"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"use_symbols":{ "eval_when":{ "compile_time":true
},"name":"use_symbols","macro":true,"fn_args":"(namespace symbol_list target_namespace)","description":["=:+","Given a namespace and an array of symbols (quoted or unquoted), ","the macro will faciltate the binding of the symbols into the ","current namespace."],"usage":["namespace:string|symbol","symbol_list:array","target_namespace?:string"],"tags":["namespace","binding","import","use","symbols"],"requires":["is_string?","starts_with?","push","current_namespace"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"use_unique_symbols":{ "name":"use_unique_symbols","fn_args":"(namespace)","description":["=:+","This function binds all symbols unique to the provided ","namespace identifier into the current namespace. Returns ","the amount of symbol bound."],"usage":["namespace:string"],"tags":["namespace","binding","import","use","symbols"],"requires":["is_string?","length"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"common_symbols":{ "name":"common_symbols","fn_args":"[]","description":"Returns a list of symbols that are common to all namespaces.","usage":[],"tags":["symbol","symbols","namespaces","common","namespace"],"requires":["keys","namespaces","push","pairs"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"sort_dependencies":{ "name":"sort_dependencies","fn_args":"[]","description":["=:+","Returns an object containing two keys, `namespaces` and `symbols`, each ","being arrays that contains the needed load order to satisfy the dependencies ","for the current environment with all namespaces.  For symbols, the array is ","sorted in terms of dependencies: a symbol appearing with a higher index value ","will mean that it is dependent on symbols at a lower index value, with the ","first symbol having no dependencies, and the final element having the most ","dependencies.  For example, if the final symbol in the returned array is to be ","compiled, symbols at a lower index must be defined prior to compiling the final ","symbol.<br>The namespaces reflect the same rule: a lower indexed namespace must ","be loaded prior to a higher indexed namespace. "],"usage":[],"tags":["symbol","symbols","dependencies","requirements","order","compile"],"requires":["make_set","conj","to_array","compiler","common_symbols","not","index_of","push","contains?","decomp_symbol","pairs","namespaces","log"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"symbols_by_namespace":{ "name":"symbols_by_namespace","fn_args":"(options)","description":["=:+","<br><br>By default, when called with no options, the `symbols_by_namespace` ","function returns an object with a key for each namespace, with an array ","containing the symbols (in a string format) defined in that ","namespace. <br>There is an optional `options` object argument which can modify ","the returned results and format.  <br><br>#### Options ","<br><br>include_meta:function -If true, will return the meta data associated ","with each symbol from the Environment definitions.  The output format is ","changed in this situation: instead of an array being returned, an object with ","the symbol names as keys and the meta data values as their value is returned.   "],"usage":["options:object"],"tags":["symbols","namespace"],"requires":["to_object","conj","add","pairs","sub_type","sort","push","uniq","keys","namespaces"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"*formatting_rules*":{ "requires":["flatten","resolve_multi_path","conj","resolve_path"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"all_globals":{ "name":"all_globals","fn_args":"[]","usage":[],"description":"Returns a set of all global symbols, regardless of namespace.","tags":["editor","globals","autocomplete"],"requires":["keys","resolve_path","namespaces"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"sleep":{ "name":"sleep","fn_args":"(seconds)","usage":["seconds:number"],"tags":["time","timing","pause","control"],"description":"Pauses execution for the number of seconds provided to the function.","requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"process_tree_symbols":{ "name":"process_tree_symbols","fn_args":"(tree prefix _ctx)","usage":["tree:*"],"description":["=:+","Given a JSON structure, such as produced by the reader, returns an object containing the various determined types of the provided structure:<br>","allocations:array - All locally allocated symbols<br>","symbols:array - All identified symbols<br>","keywords:array - All keywords used in the structure","literals:array - All identified literals (i.e. not a symbol)","globals:array - All referenced globals"],"tags":["editor","usage","scope","structure"],"requires":["as_lisp","not","is_array?","process_tree_symbols","contains?","*formatting_rules*","meta_for_symbol","length","is_string?","starts_with?","is_number?","is_function?","is_object?","pairs","to_array"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"keys*":{ "name":"keys*","fn_args":"(obj)","description":["=:+","Like keys, but where keys uses Object.keys, keys* uses the function Object.getOwnpropertynames and returns the ","prototype keys as well."],"usage":["obj:Object"],"tags":["object","array","keys","property","properties","introspection"],"requires":["is_object?","first","push","flatten"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"pairs*":{ "name":"pairs*","fn_args":"(obj)","description":"Like pairs, but where keys uses Object.keys, pairs* returns the key-value pairs prototype heirarchy as well.","usage":["obj:Object"],"tags":["object","array","keys","property","properties","introspection","values"],"requires":["is_object?","keys*"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"for":{ "eval_when":{ "compile_time":true
},"name":"for","macro":true,"fn_args":"[(symbol_list array_ref) \"&\" body_forms]","description":["=:+","The for macro provides a facility for looping through arrays, ","destructuring their contents into local symbols that can be used in a block.  ","The `for` macro is a higher level construct than the `for_each` operator, as it ","allows for multiple symbols to be mapped into the contents iteratively, vs. ","for_each allowing only a single symbol to be bound to each top level element in ","the provided array.<br>The symbol_list is provided as the lambda list to a ","`destructuring_bind` if multiple symbols are provided, otherwise, if only a ","single variable is provided, the `for` macro will convert to  a for_each call, ","with the `body_forms` enclosed in a `progn` block.  <br><br>#### Examples ","<br><br>An example of a multiple bindings is below.  The values of `positions` ","are mapped (destructured) into x, y, w and h, respectively, each iteration ","through the loop mapping to the next structured element of the array:```(let\n ","((positions\n      [[[1 2] [5 3]]\n       [[6 3] [10 2]]]))\n  (for ([[x y] [w h]] ","positions)\n       (log \"x,y,w,h=\" x y w h)\n       (+ \"\" x \",\" y \"+\"  w \",\" h ",")))```<br><br>Upon evaluation the log output is as follows:```\"x,y,w,h=\" 1 2 5 ","3```<br>```\"x,y,w,h=\" 6 3 10 2```<br><br>The results returned from the ","call:```[\"1,2+5,3\"\n \"6,3+10,2\"]```<br><br>Notice that the `for` body is wrapped ","in an explicit `progn` such that the last value is accumulated and returned ","from the `for` operation.<br>An example of single bindings, which essentially ","transforms into a `for_each` call with an implicit `progn` around the body ","forms.  This form is essentially a convenience call around `for_each`.  ```(for ","(x [1 2 3])\n     (log \"x is: \" x) \n     (+ x 2))```<br><br>Both the log form ","and the final body form `(+ x 2)` are the body forms and will be evaluated in ","sequence, the final form results accumulating to be returned to the ","caller.<br>Log output from the above:```\"x is: \" 1\n\"x is: \" 2\n\"x is: \" ","3```<br><br>Return value:```[3 4 5]```<br>"],"usage":["allocations_and_values:array","body_forms:*"],"tags":["iteration","loop","for","array","destructuring"],"requires":["slice","is_array?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"for_items":{ "eval_when":{ "compile_time":true
},"name":"for_items","macro":true,"fn_args":"[(iteration_symbol collection) \"&\" body_forms]","description":["=:+","The `for_items` macro takes a collection, checks the length property ","and then iterates through the collection assigning each value in the collection ","to the provided iterator symbol.  The behavior is similar to `for_each` where ","the final result of the body forms is accumulated and returned as an ","array.  <br>The `for_items` macro provides a `progn` wrapper around the body ","forms so it is not required to provide a block specifier in the body forms ","provided.<br> "],"usage":["allocation_and_collection:array","body:array"],"tags":["iteration","for","loop","iterator","collection"],"requires":["slice"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"word_wrap":{ "name":"word_wrap","fn_args":"(text ncols)","description":["=:+","Given a string of text and an optional column length ","returns an array of lines wrapped at or before the ","column length.  If no column length is provided, ","the default is 80."],"usage":["text:string","ncols:?number"],"tags":["text","string","wrap","format"],"requires":["split_by","length","push","join","add"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"progc":{ "eval_when":{ "compile_time":true
},"name":"progc","macro":true,"fn_args":"[\"&\" forms]","description":["=:+","This macro wraps the provided forms in a ","try-catch, and returns the last value if ","no errors, like progn, or if an error ","occurs, logs to the console.  Simple ","help for debugging."],"tags":["debug","error","catch","handler","progn","eval"],"usage":["forms:*"],"requires":["slice"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"reverse_string":{ "name":"reverse_string","fn_args":"(text)","description":"Given a string, returns the characters in reverse order.","usage":["text:string"],"tags":["string","text","reverse","modify"],"requires":["join","split_by"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"last_n_chars":{ "name":"last_n_chars","fn_args":"(n text)","description":"For a given string, returns the last n characters as a string.","usage":["n:number","text:string"],"tags":["string","text","last","amount","end","tail"],"requires":["is_string?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"last_n":{ "name":"last_n","fn_args":"(n arr)","description":"For a given array, returns the last n elements as an array.","usage":["n:number","arr:array"],"tags":["array","list","last","amount","end","tail"],"requires":["is_array?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"from_last":{ "name":"from_last","fn_args":"(amount arr)","description":["=:+","Given an offset amount and an array, `from_last` returns the value at ","the offset amount from the end of the array. "],"usage":["amount:number","arr:array"],"tags":["array","list","last","amount","end","tail"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"analyze_text_line":{ "name":"analyze_text_line","fn_args":"(line)","description":["=:+","Given a line of text, analyzes the text for form/block openers, identified as ","(,{,[ and their corresponding closers, which correspod to ),},].  It then returns ","an object containing the following: <br><br>","{ delta:int   - a positive or negative integer that is represents the positive or negative depth change, <br>","  final_type: string - the final delimiter character found which can either be an opener or a closer, <br>","  final_pos: int - the position of the final delimiter, <br>","  line: string - the line of text analyzed, <br>","  indent: int - the indentation space count found in the line, <br>","  openers: array - an array of integers representing all column positions of found openers in the line.<br>","  closers: array - an array of integers representing all column positions of found closers in the line. }<br><br>","The function does not count opening and closing tokens if they appear in a string."],"tags":["text","tokens","form","block","formatting","indentation"],"usage":["line:string"],"requires":["not","push","split_by"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"calculate_indent_rule":{ "name":"calculate_indent_rule","fn_args":"(delta movement_needed)","description":["=:+","Given a delta object as returned from analyze_text_line, and an integer representing the ","the amount of tree depth to change, calculates the line indentation required for the ","given delta object, and creates an indent property in the delta object containing ","the given amount of spaces to prepend to the line.  References the *formatting_rules* ","object as needed to determine minor indentation from standard indentation, as well as ","which symbols are identified as keywords.  Returns the provided delta object with the ","indent key added."],"tags":["indentation","text","formatting"],"usage":["delta:object","movement_needed:int"],"requires":["first","not","blank?","push","split_by","contains?","meta_for_symbol","starts_with?","*formatting_rules*","length","built_ins"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"format_lisp_line":{ "name":"format_lisp_line","fn_args":"(line_number get_line)","description":["=:+","Given a line number and an accessor function (synchronous), returns a","a text string representing the computed indentation for the provided ","line number. The get_line function to be provided will be called with ","a single integer argument representing a requested line number from ","the text buffer being analyzed.  The provided get_line function should ","return a string representing the line of text from the buffer containing ","the requested line. Once the string is returned, it is mandatory to update ","the line buffer with the updated indented string, otherwise the function ","will not work properly."],"tags":["formatting","indentation","text","indent"],"usage":["line_number:integer","get_line:function"],"requires":["is_function?","trim","analyze_text_line","calculate_indent_rule","join","range"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"set_default":{ "eval_when":{ "compile_time":true
},"name":"set_default","macro":true,"fn_args":"(path value)","description":["=:+","Given a path to a value in the *env_config* object, and a value to set, creates or sets the value ","at the provided path position.  The path can be in the following forms:<br>","path.to.default_value:symbol - A period delimited non-quoted symbol<br>","[ `path `to `default_value ] - An array with quoted values or strings, in the standard path format.<br>","\"path.to.default_value\" - A string delimited by periods<br>","\"path~to~default_value\" - A string delimited by the path delimiter ~<br>","<br>","The value returned from the macro is the new default value as set in the *env_config*.<br>"],"tags":["default","defaults","set","application","editor","repl"],"usage":["path:symbol|string|array","value:*"],"requires":["is_string?","starts_with?","contains?","split_by","as_lisp"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"get_default":{ "name":"get_default","fn_args":"(key alt_val)","description":["=:+","Given a path (array form) to a key in `*env_config*` , returns the ","value at the path.  If the value cannot be found, will return `undefined`.  If ","the second argument is provided, `alt_val`, that value will be returned if the ","provided path isn't found. "],"usage":["key:array","alt_val:*"],"tags":["settings","config","defaults","default","environment","env","application"],"requires":["is_array?","resolve_multi_path","*env_config*"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"traverse":{ "name":"traverse","fn_args":"(structure operator_function _path)","description":["=:+","Given a structure such as an object or an array, and an operator ","function argument, the function will recursively call the operator function ","with the value and the path to each value in the structure.   The operator ","function can choose to operate on the value at the path by calling `set_path` ","for the root object, or otherwise examine the value and the path.  The return ","value of the operator function is ignored.  The operator function signature is ","called with `(value path_to_value)` as a signature.<br><br> "],"usage":["structure:object","operator_function:function"],"tags":["recursion","recurse","structure","object","array","search","find"],"requires":["is_array?","map","traverse","conj","is_object?","pairs"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"truncate":{ "name":"truncate","fn_args":"(len value trailer)","description":["=:+","Given a length and a string or an array, return the value ","with a length no more than then the provided value. If ","the value is a string an optional trailer string can be ","provided that will be appeneded to the truncated string."],"usage":["len:number","value:array|string","trailer:string?"],"tags":["array","string","length","max","min"],"requires":["is_string?","add","is_array?"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"all_global_functions":{ "name":"all_global_functions","fn_args":"[]","description":"Returns a Set object of all accessible functions in the environment, including all namespaces.","usage":[],"tags":["global","function","scope","environment"],"requires":["is_function?","pairs","namespaces"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"pretty_print":{ "name":"pretty_print","fn_args":"(in_struct report_callout)","description":["=:+","The pretty_print function attempts to format the presented input, provided ","either as a string or JSON. The return is a string with the formatted input."],"tags":["format","pretty","lisp","display","output"],"usage":["input:array|string"],"requires":["is_object?","as_lisp","is_string?","split_by","*formatting_rules*","all_global_functions","push","join","contains?","ends_with?","not","starts_with?","last","last_n","format_lisp_line","range"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"get_dependencies":{ "name":"get_dependencies","fn_args":"(global_symbol _deps _req_ns _externs)","description":["=:+","<br><br>Given a symbol in string form, returns the global dependencies that the ","symbol is dependent on in the runtime environment.  The return structure is in ","the form:```{\n  dependencies: []\n  namespaces: []   \n  externals: ","[]\n}```<br><br>The return structure will contain all the qualified and ","non-qualified symbols referenced by the provided target symbol, plus the ","dependencies of the required symbols.  <br>The needed namespace environments ","are also returned in the `namespaces` value.\n<br>References to external global ","Javascript values are listed in the `externals` result.  These values are ","defined as dependencies for the provided symbol, but are not defined in a Juno ","Environment.<br> "],"usage":["quoted_symbol:string"],"tags":["dependencies","tree","required","dependency"],"requires":["split_by","second","first","current_namespace","not","get_dependencies","to_array"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"pad_left":{ "name":"pad_left","fn_args":"(value pad_amount padchar)","description":["=:+","<br><br>Given a value (number or text). an amount to pad, and an optional ","character to use a padding value, returns a string that will contain pad amount ","leading characters of the padchar value.<br><br>#### Example <br>```(pad_left ","23 5 `0)\n<- \"00023\"\n\n(pad_left 4 5)\n<- \"    4\"```<br> "],"usage":["value:number|string","pad_amount:number","padchar:?string"],"tags":["pad","string","text","left"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"symbol_dependencies":{ "name":"symbol_dependencies","fn_args":"(symbol_array)","description":["=:+","Given an array of symbols in string form, returns the global dependencies that the ","symbols are dependent on in the runtime environment.  The return structure is in ","the form:```{\n  dependencies: []\n  namespaces: []\n}```<br><br>The return ","structure will contain all the qualified and non-qualified symbols referenced ","by the provided target symbol, plus the dependencies of the required ","symbols.  <br>The needed namespace environments are also returned in the ","namespaces value.<br> "],"usage":["quoted_symbol:array"],"tags":["dependencies","tree","required","dependency"],"requires":["is_array?","get_dependencies","to_array"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"keyword_mapper":{ "name":"keyword_mapper","fn_args":"(token)","requires":["contains?","*formatting_rules*"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"with_each_entry":{ "eval_when":{ "compile_time":true
},"name":"with_each_entry","macro":true,"fn_args":"[(binding_sym) iteration_form \"&\" body_forms]","description":["=:+","Given a binding symbol, a form or symbol that resolves to an iteration ","object with a `next` function, and the body forms to be used with the ","binding_symbol, will call the binding forms for every value in the iterator, ","with the binding symbol being set to the next value each time through the ","loop.<br><br>#### Example <br>```(with_each_value (entries)\n   (-> ","request_headers `entries) ;; will return an iterator\n   (if (== entries.0 ","\"content-type\")\n       (= content_type entries.1)))```<br><br><br> "],"usage":["binding_sym:array","iteration_form:*","body_forms:*"],"tags":["iteration","loop","iterator","entries","flow","values"],"requires":["slice"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"operating_system":{ "name":"operating_system","fn_args":"[]","description":"Returns a text string of the operating system name: darwin, linux, windows","usage":[],"tags":["os","environment","build","platform","env"],"requires":["resolve_path"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"platform_architecture":{ "name":"platform_architecture","fn_args":"[]","description":"Returns a text string of the underlying hardware architecture, for example aarch64 or X86_64.","usage":[],"tags":["os","platform","architecture","hardware","type","build"],"requires":["resolve_path"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"platform":{ "name":"platform","fn_args":"[]","description":"Returns an object with keys for 'target', 'arch', 'os' and 'vendor'.  ","usage":[],"tags":["os","platform","architecture","hardware","type","build"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"exit":{ "name":"exit","fn_args":"(return_code)","description":"Exits the system and returns the provided integer return code","usage":["return_code:?number"],"tags":["exit","quit","return","leave"],"requires":[],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"permissions":{ "name":"permissions","fn_args":"[]","requires":["to_object"],"externals":["Error","SyntaxError","Array","ReferenceError","Set","Object","TypeError","clone","RangeError","Math","parseInt","console","subtype","TextEncoder","TextDecoder","Uint8Array","RegExp","String","isNaN","Function","LispSyntaxError","window","Blob","fetch","EvalError","URL","Intl","Date","Deno","Promise","setTimeout"],"source_name":"core.lisp"
},"compiler":{ "requires":["take","is_array?","is_string?","is_function?","get_object_path","is_object?","blank?","delete_prop","scan_str","keys","is_element?","chop","as_lisp","resolve_path","push","split_by","safe_access","expand_dot_accessor","pairs","pop","assert","rest","setf_ctx","prepend","ends_with?","range","join","path_to_js_syntax","get_outside_global","to_array","bind_function","each","read_lisp","warn","make_set","truncate","sleep"],"externals":["clone","LispSyntaxError","console","Object","Set","Function","AsyncFunction","Array","Boolean","SyntaxError","TypeError","RegExp","Error","JSON","ReferenceError","EvalError","subtype","String","parseInt","isNaN","globalThis","Math","check_true"],"source_name":"compiler.lisp"
},"set_repl":{ "name":"set_repl","fn_args":"(key value)","description":"Given a configuration key and a value, sets the provided REPL config key to the value.","usage":["key:string","value:*"],"tags":["repl","config"],"requires":["set_path","*env_config*"],"externals":["Deno","TextDecoder","TextEncoder","prompt","JSON","console","Error","LispSyntaxError"],"source_name":"./src/repl.lisp"
},"repl_config":{ "name":"repl_config","fn_args":"[]","description":["=:+","Returns the environment configuration options that are ","available for the repl and their current settings."],"tags":["repl","config"],"usage":[],"requires":["add","resolve_path","*env_config*"],"externals":["Deno","TextDecoder","TextEncoder","prompt","JSON","console","Error","LispSyntaxError"],"source_name":"./src/repl.lisp"
},"$":{ "requires":[],"externals":["Deno","TextDecoder","TextEncoder","prompt","JSON","console","Error","LispSyntaxError"],"source_name":"./src/repl.lisp"
},"$$":{ "requires":[],"externals":["Deno","TextDecoder","TextEncoder","prompt","JSON","console","Error","LispSyntaxError"],"source_name":"./src/repl.lisp"
},"$$$":{ "requires":[],"externals":["Deno","TextDecoder","TextEncoder","prompt","JSON","console","Error","LispSyntaxError"],"source_name":"./src/repl.lisp"
},"if_undefined":{ "eval_when":{ "compile_time":true
},"name":"if_undefined","macro":true,"fn_args":"(value replacer)","description":"If the first value is undefined, return the second value","usage":["value:*","replacer:*"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"str":{ "name":"str","fn_args":"[\"&\" \"args\"]","description":"Joins arguments into a single string separated by spaces and returns a single string.","usage":["arg0:string","argn:string"],"tags":["string","join","text"],"requires":["slice","join"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"COPY_DATA":{ "requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"on_nil":{ "eval_when":{ "compile_time":true
},"name":"on_nil","macro":true,"fn_args":"(nil_form value)","usage":["nil_form:form","value:*"],"description":"If the value argument is not nil or not undefined, return the value, otherwise evaluate the provided nil_form and return the results of the evaluation of the nil_form.","tags":["condition","nil","eval","undefined"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"on_empty":{ "eval_when":{ "compile_time":true
},"name":"on_empty","macro":true,"fn_args":"(on_empty_form value)","usage":["empty_form:form","value:*"],"description":"If the value argument is not an empty array, an empty object, nil or undefined, return the value, otherwise evaluate the provided empty_form and return the results of the evaluation of the empty_form.","tags":["condition","empty","list","array","object","eval","undefined"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"sum":{ "eval_when":{ "compile_time":true
},"name":"sum","macro":true,"fn_args":"(vals)","description":["=:+","Given an array of values, add up the contents of the array in an applied add operation.  ","If these are numbers, they will be added arithmetically.  ","If given strings, they will be joined together (appended). ","If given a first value of an array, all subsequent values will be added into the array. ","If given an array of objects, all the keys/values will be merged and a single object retuned."],"usage":["vals:array"],"tags":["add","join","summation","numbers"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"options_and_args":{ "name":"options_and_args","fn_args":"(arg_array)","usage":["arg_array:array"],"tags":["arguments","options"],"description":["=:+","Given an array of values, returns an array containing two values.  ","If the value at position 0 in the provided array is an non nil object, ","it will be in the position 0 of the returned value and the remaining ","values will be in position 1 of the returned array.","If the value at position 0 in the provided array is not an object type,","the value in position 0 of the returned array will be nil and ","all values will be placed in the returned array in position 1."],"requires":["is_array?","type","slice","null"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"enum":{ "name":"enum","fn_args":"(value_list)","usage":["value_list:array"],"description":"Given a list of string values, returns an object with each value in the list corresponding to a numerical value.","tags":["enumeration","values"],"requires":["assert","is_array?"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"gen_id":{ "name":"gen_id","fn_args":"(prefix)","usage":["prefix:string"],"tags":["web","html","identification"],"description":"Given a prefix returns a element safe unique id","requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"macros":{ "name":"macros","fn_args":"[]","usage":[],"description":"Returns the list of currently defined macros.  This function takes no arguments.","tags":["environment","macro","defined"],"requires":["push","pairs"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"pluck":{ "eval_when":{ "compile_time":true
},"name":"pluck","macro":true,"fn_args":"(fields data)","description":"Similar to the 'each' commmand, given the set of desired fields as a first argument, and the data as the second argument, return only the specified fields from the supplied list of data","usage":["fields:string|array","data:array"],"tags":["list","each","filter","only","object"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"objects_from_list":{ "name":"objects_from_list","fn_args":"(key_path objects)","usage":["key_path:string|array","objects:array"],"description":"Given a path (string or array), and an array of object values, the function returns a new object with keys named via the value at the given path, and the object as the value.","tags":["list","object","conversion","transform"],"requires":["is_array?","resolve_path"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"pairs_from_list":{ "name":"pairs_from_list","fn_args":"(value_list size)","usage":["value:list","size?:number"],"description":"Given a list, segment the passed list into sub list (default in pairs) or as otherwise specified in the optional size","tags":["list","pairs","collect"],"requires":["push","length"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"reorder_keys":{ "name":"reorder_keys","fn_args":"(key_list obj)","description":"Given a list of keys, returns a new object that has the keys in the order of the provided key list.","usage":["key_list:array","obj:object"],"tags":["list","object","key","order"],"requires":["keys","nth","to_object","pairs_from_list","interlace"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"only":{ "name":"only","fn_args":"(fields data)","usage":["fields:array","data:array|object"],"description":"Given an array of objects, or a single object, return objects only containing the specified keys and the corresponging value.","tags":["pluck","filter","select","object","each","list","objects","keys"],"requires":["is_array?","map","reorder_keys","is_object?"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"from_universal_time":{ "name":"from_universal_time","fn_args":"(seconds)","description":"Given a universal_time_value (i.e. seconds from Jan 1 1900) returns a Date object.","usage":["seconds:number"],"tags":["date","time","universal","1900"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"+=":{ "eval_when":{ "compile_time":true
},"name":"+=","macro":true,"fn_args":"(symbol \"&\" args)","usage":["symbol:*","arg0:*","argn?:*"],"description":"Appends in place the arguments to the symbol, adding the values of the arguments to the end.","tags":["append","mutate","text","add","number"],"requires":["slice"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"minmax_index":{ "name":"minmax_index","fn_args":"(container)","usage":["container:array"],"description":"Given an array of numbers returns an array containing the indexes of the smallest and the largest values found in the provided array.","tags":["list","number","range","value","index"],"requires":["MAX_SAFE_INTEGER","is_array?","length","is_number?"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"invert_pairs":{ "name":"invert_pairs","fn_args":"(value)","description":"Given an array value containing pairs of value, as in [[1 2] [3 4]], invert the positions to be: [[2 1] [4 3]]","usage":["value:array"],"tags":["array","list","invert","flip","reverse","swap"],"requires":["is_array?","map"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"noop":{ "name":"noop","fn_args":"(val)","usage":["val:*"],"description":"No operation, just returns the value.  To be used as a placeholder operation, such as in apply_operator_list.","tags":["apply","value"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"apply_list_to_list":{ "name":"apply_list_to_list","fn_args":"(operator list1 list2)","usage":["operator:function","modifier_list:array","target_list:array"],"description":["=:+","Given an operator (function), a list of values to be applied (modifier list), and a list of source values (the target), ","returns a new list (array) that contains the result of calling the operator function with ","each value from the target list with the values from the modifier list. The operator function is called ","with <code>(operator source_value modifer_value)</code>."],"tags":["map","list","array","apply","range","index"],"requires":["map","length"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"apply_operator_list":{ "name":"apply_operator_list","fn_args":"(modifier_list target_list)","usage":["operator_list:array","target_list:array"],"description":["=:+","<p>Note: Deprecated.Given a list containing quoted functions (modifier list), and a list of source values (the target), ","returns a new list (array) that contains the result of calling the relative index of the modifier functions with ","the value from the relative index from the target list. The modifiers are applied in the following form: ","<code>(modifier_function target_value)</code>.</p>","<p>If the modifer_list is shorter than the target list, the modifer_list index cycles back to 0 (modulus).</p>"],"tags":["map","list","array","apply","range","index"],"example":["=:quote",["=:apply_operator_list",["first","+"],["John","Smith"]]],"deprecated":true,"requires":["map","length"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"range_overlap?":{ "name":"range_overlap?","fn_args":"(range_a range_b)","description":"Given two ranges in the form of [low_val high_val], returns true if they overlap, otherwise false.  The results are undefined if the range values are not ordered from low to high.","usage":["range_a:array","range_b:array"],"tags":["range","iteration","loop"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"remaining_in_range":{ "name":"remaining_in_range","fn_args":"(value check_range)","usage":["value:number","check_range:array"],"description":"Given a value, and an array containing a start and end value, returns the remaining amount of positions in the given range.  If the value isn't in range, the function will return nil.","tags":["range","iteration","loop"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"form_id":{ "name":"form_id","fn_args":"(name)","usage":["name:string"],"description":"Given a standard string returns a compliant HTML ID suitable for forms.","requires":["replace","join","split","lowercase"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"from_key":{ "name":"from_key","fn_args":"(value sep? ignore?)","usage":["value:string","separator?:string"],"description":["=:+","Takes a key formatted value such as \"last_name\" and returns a \"prettier\" string that contains spaces ","in place of the default separator, '_' and each word's first letter is capitalized. ","An optional separator argument can be provided to use an alternative separator token.<br>E.G. last_name becomes \"Last Name\"."],"tags":["string","split","key","hash","record","form","ui"],"requires":["is_string?","dtext","join","split_by"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"from_key1":{ "name":"from_key1","fn_args":"(v)","description":"Useful for calling with map, since this function prevents the other values being passed as arguments by map from being passed to the from_key function.","tags":["map","function","key","pretty","ui","to_key"],"usage":["value:string"],"requires":["from_key"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"to_key":{ "name":"to_key","fn_args":"(value sep? ignore?)","usage":["value:string","separator?:string"],"description":["=:+","Takes a value such as \"Last Name\" and returns a string that has the spaces removed and the characters replaced ","by the default separator, '_'.  Each word is converted to lowercase characters as well.","An optional separator argument can be provided to use an alternative separator token.<br>E.G. \"Last Name\" becomes \"last_name\"."],"tags":["string","split","key","hash","record","form","ui"],"requires":["is_string?","lowercase","split_by","join"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"is_object_or_function?":{ "requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"extend":{ "name":"extend","fn_args":"(target_object source_object)","description":"Given a target object and a source object, add the keys and values of the source object to the target object.","usage":["target_object:object","source_object:object"],"tags":["object","extension","keys","add","values"],"requires":["is_object?","pairs"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"no_empties":{ "name":"no_empties","fn_args":"[\"items\"]","description":"Takes the passed list or set and returns a new list that doesn't contain any undefined, nil or empty values","usage":["items:list|set"],"tags":["filter","nil","undefined","remove","except_nil"],"requires":["sub_type","not","push"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"first_with":{ "name":"first_with","fn_args":"(prop_list data_value)","usage":["property_list:array","data:object|array"],"description":"Given a list of properties or indexes and a data value, sequentially looks through the property list and returns the first non-null result.","tags":["list","array","index","properties","search","find"],"requires":["not"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"fixed":{ "name":"fixed","fn_args":"(v p)","description":"Given a floating point value and an optional precision value, return a string corresponding to the desired precision.  If precision is left out, defaults to 3.","usage":["value:number","precision?:number"],"tags":["format","conversion"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"hide":{ "name":"hide","fn_args":"(value)","requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"array_to_object":{ "name":"array_to_object","fn_args":"(input_array)","usage":["list_to_process:array"],"tags":["list","array","object","convert"],"description":"Takes the provided list and returns an object with the even indexed items as keys and odd indexed items as values.","requires":["length","take","type","add"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"split_text_in_array":{ "name":"split_text_in_array","fn_args":"(split_element input_array)","usage":["split_element:text","input_array:array"],"tags":["text","string","split","separate","parse"],"description":"Takes the provided array, and split_element, and returns an array of arrays which contain the split text strings of the input list.","requires":["is_string?","push","split","null"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"words_and_quotes":{ "name":"words_and_quotes","fn_args":"(text)","description":"Given a text string, separates the words and quoted words, returning quoted words as their isolated string.","tags":["text","string","split","separate","parse"],"usage":["text:string"],"requires":["not","map","join","no_empties","split_by","trim"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"split_words":{ "name":"split_words","fn_args":"(text_string)","description":"Like words and quotes, splits the text string into words and quoted words, but the unquoted words are split by spaces.  Both the unquoted words and the quoted words inhabit their own array.","usage":["text:string"],"tags":["text","string","split","separate","words","parse"],"requires":["no_empties","map","split_by","trim","words_and_quotes"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"from_style_text":{ "name":"from_style_text","fn_args":"(text)","usage":["text:string"],"description":"Given a string or text in the format of an Element style attribute: \"css_attrib:value; css_attrib2:value\", split into pairs containing attribute name and value.","tags":["text","css","style","pairs","string","array","list","ui","html"],"requires":["no_empties","map","trim","split_by","replace","flatten","words_and_quotes"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"sha1":{ "name":"sha1","fn_args":"(text)","description":"Given a text string as input, returns a SHA-1 hash digest string of the given input.","usage":["text:string"],"tags":["digest","crypto","hash","comparison"],"requires":["is_string?","push","range","join"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"remove_if":{ "name":"remove_if","fn_args":"(f container)","usage":["f:function","container:array"],"tags":["collections","reduce","filter","where","list","array","reduce"],"description":"Given a function with a single argument, if that function returns true, the value will excluded from the returned array.  Opposite of filter.","requires":["not","push"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"filter":{ "name":"filter","fn_args":"(f container)","usage":["f:function","container:array"],"tags":["collections","reduce","reject","where","list","array","reduce"],"description":"Given a function with a single argument, if that function returns true, the value will included in the returned array, otherwise it will not.  Opposite of reject.","requires":["push"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"add_days":{ "name":"add_days","fn_args":"(date_obj num_days)","usage":["date_obj:Date","num_days:number"],"description":"Given a date object and the number of days (either positive or negative) modifies the given date object to the appropriate date value, and returns the date object.","tags":["date","time","duration","days","add"],"requires":["add"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"day_of_week":{ "name":"day_of_week","fn_args":"(dval)","description":"Given a date object, returns the day of the week for that date object","usage":["date:Date"],"tags":["time","week","date","day"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"add_hours":{ "name":"add_hours","fn_args":"(date_obj hours)","usage":["date_obj:Date","hours:number"],"description":"Given a date object and the number of hours (either positive or negative) modifies the given date object to the appropriate date value, and returns the date object.","tags":["date","time","duration","hours","add"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"clear_time":{ "name":"clear_time","fn_args":"(date_obj)","usage":["date_obj:Date"],"description":"Given a date object, modifies the date object by clearing the time value and leaving the date value.  Returns the date object.","tags":["date","time","duration","midnight","add"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"yesterday":{ "name":"yesterday","fn_args":"[]","description":"This function returns an array with two Date values.  The first, in index 0, is the start of the prior day (yesterday midnight), and the second is 24 hours later, i.e. midnight from last night.","usage":[],"tags":["time","date","range","prior","hours","24"],"requires":["clear_time","add_days","add_hours"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"next_sunday":{ "name":"next_sunday","fn_args":"(dval)","usage":["date:Date?"],"description":"Called with no arguments returns a date representing the upcoming sunday at midnight, 12:00 AM.  If given a date, returns the next sunday from the given date.","tags":["time","date","range","next","week","24"],"requires":["clear_time","add_days","day_of_week"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"last_sunday":{ "name":"last_sunday","fn_args":"(dval)","usage":["date:Date?"],"description":"Called with no arguments returns a date representing the prior sunday at midnight, 12:00 AM.  If given a date, returns the prior sunday from the given date.","tags":["time","date","range","prior","week","24"],"requires":["clear_time","add_days","day_of_week"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"day_before_yesterday":{ "name":"day_before_yesterday","fn_args":"[]","description":"This function returns an array with two Date values.  The first, in index 0, is the start of the day before yesterday (midnight), and the second is 24 later.","usage":[],"tags":["time","date","range","prior","hours","24"],"requires":["clear_time","add_days"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"last_week":{ "name":"last_week","fn_args":"[]","description":"This function returns an array with two Date values.  The first, in index 0, is the start of the prior week at midnight, and the second is 7 days later, at midnight.","usage":[],"tags":["time","date","range","prior","hours","24"],"requires":["clear_time","add_days","next_sunday","last_sunday"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"midnight-to-midnight":{ "name":"midnight-to-midnight","fn_args":"(dval)","description":"This function returns an array with two Date values.  The first, in index 0, is the start of the prior day (yesterday midnight), and the second is 24 hours later, i.e. midnight from last night.","usage":["val:Date"],"tags":["time","date","range","prior","hours","24"],"requires":["clear_time","add_hours"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"date_to_string":{ "name":"date_to_string","fn_args":"(date_val str_layout)","description":["=:+","Given a date value and a formatted template string, return a string representation of the date based on the formatted template string.","<br>","E.g. (date_to_string (new Date) \"yyyy-MM-dd HH:mm:ss\")<br>","<table>","<tr><td>","yyyy","</td><td>","Four position formatted year, e.g. 2021","</td></tr>","<tr><td>","yy","</td><td>","Two position formatted year, e.g. 21","</td></tr>","<tr><td>","dd","</td><td>","Two position formatted day of month, e.g. 03","</td></tr>","<tr><td>","d","</td><td>","1 position numeric day of month, e.g. 3","</td></tr>","<tr><td>","MM","</td><td>","Two position formatted month number, e.g. 06","</td></tr>","<tr><td>","M","</td><td>","One or two position formatted month number, e.g. 6 or 10","</td></tr>","<tr><td>","HH","</td><td>","Two position formatted 24 hour number, e.g. 08","</td></tr>","<tr><td>","H","</td><td>","One position formatted 24 hour, e.g 8","</td></tr>","<tr><td>","hh","</td><td>","Two position formatted 12 hour clock, e.g. 08","</td></tr>","<tr><td>","h","</td><td>","One position formatted 12 hour clock, e.g 8","</td></tr>","<tr><td>","mm","</td><td>","Minutes with 2 position width, eg. 05","</td></tr>","<tr><td>","m","</td><td>","Minutes with 1 or 2 positions, e.g 5 or 15.","</td></tr>","<tr><td>","ss","</td><td>","Seconds with 2 positions, e.g 03 or 25.","</td></tr>","<tr><td>","s","</td><td>","Seconds with 1 or 2 positions, e.g 3 or 25.","</td></tr>","<tr><td>","sss","</td><td>","Milliseconds with 3 digits, such as 092 or 562.","</td></tr>","<tr><td>","TZ","</td><td>","Include timezone abbreviated, e.g. GMT+1.","</td></tr>","<tr><td>","D","</td><td>","Weekday abbreviated to 1 position, such as T for Tuesday or Thursday, or W for Wednesday (in certain locales)","</td></tr>","<tr><td>","DD","</td><td>","Weekday shortened to 3 positions, such as Fri for Friday.","</td></tr>","<tr><td>","DDD","</td><td>","Full name of weekday, such as Saturday.","</td></tr>","</table>"],"usage":["date_val:Date","formatted_string:string"],"tags":["time","date","string","text","format","formatted"],"requires":["is_string?","split_by","push","date_components","join"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"is_even?":{ "name":"is_even?","fn_args":"(x)","usage":["value:number"],"description":"If the argument passed is an even number, return true, else returns false.","tags":["list","filter","modulus","odd","number"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"is_odd?":{ "name":"is_odd?","fn_args":"(x)","usage":["value:number"],"description":"If the argument passed is an odd number, return true, else returns false.","tags":["list","filter","modulus","even","number"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"set_path_value":{ "name":"set_path_value","fn_args":"(root path value)","description":"Given an object (the root), a path array, and a value to set, sets the value at the path point in the root object.","usage":["root:object","path:list","value:*"],"tags":["object","path","resolve","assign"],"requires":["is_array?","last","resolve_path","chop"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"has_items?":{ "name":"has_items?","fn_args":"(value)","usage":["value:list"],"description":"Returns true if the list provided has a length greater than one, or false if the list is 0 or nil","tags":["list","values","contains"],"requires":["not","length"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"match_all_js":{ "requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"match_all":{ "name":"match_all","fn_args":"(regex_str search_string)","usage":["regex_str:string","search_string:string"],"description":"Given a regex expression as a string, and the string to search through, returns all matched items via matchAll.","tags":["match","regex","string","find","scan"],"requires":["match_all_js"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"chop_front":{ "name":"chop_front","fn_args":"(container amount)","usage":["container:array|string","amount:integer"],"mutates":false,"tags":["text","string","list","reduce"],"description":"Given a string or array, returns a new container with the first value removed from the provided container.  An optional amount can be provided to remove more than one value from the container.","requires":["is_string?","is_array?"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"compile_lisp":{ "name":"compile_lisp","fn_args":"(text)","usage":["text:string"],"description":"Given an input string of lisp text, returns a JSON structure ready for evaluation.","requires":["reader"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"has_the_keys?":{ "name":"has_the_keys?","fn_args":"(key_list obj)","usage":["key_list:list","object_to_check:object"],"description":"Given a provided key_list, validate that each listed key or dotted-path-notation value exist in the object.","example":[[["=:quotem",["=:has_the_keys?",["type","values.sub_transaction_id"],{ "type":"Transaction","group":"Receivables","values":{ "sub_transaction_id":1242424
}
}]],true]],"requires":["resolve_path"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"demarked_number":{ "name":"demarked_number","fn_args":"(value separator precision no_show_sign)","usage":["value:number","separator:string","precision:number","no_show_sign:boolean"],"description":["=:+","Given a numeric value, a separator string, such as \",\" and a precision value ","for the fractional-part or mantissa of the value, the demarked_number function will return a string with a formatted value. ","Default value for precision is 2 if not provided.","If no_show_sign is true, there will be no negative sign returned, which can be useful for alternative formatting.  See compile_format."],"tags":["format","conversion","currency"],"requires":["reverse","split","length","not","range","join","chop_front"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"measure_time":{ "eval_when":{ "compile_time":true
},"name":"measure_time","macro":true,"fn_args":"[\"&\" forms]","usage":["form:list"],"tags":["time","measurement","debug","timing"],"description":"Given a form as input, returns an object containing time taken to evaluate the form in milliseconds with the key time and a result key with the evaluation results.","requires":["slice"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"compare_list_ends":{ "name":"compare_list_ends","fn_args":"(l1 l2)","usage":["array1:array","array2:array"],"tags":["comparision","values","list","array"],"description":"Compares the ends of the provided flat arrays, where the shortest list must match completely the tail end of the longer list. Returns true if the comparison matches, false if they don't.","requires":["length","reverse","map"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"hsv_to_rgb":{ "usage":["hsv_values:array"],"description":"Takes an array with three values corresponding to hue, saturation and brightness. Each value should be between 0 and 1.  The function returns an array with three values corresponding to red, green and blue.","tags":["colors","graphics","rgb","conversion"],"requires":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"rgb_to_text":{ "name":"rgb_to_text","fn_args":"(rgb)","usage":["rgb_values:array"],"description":["=:+","Given an array with 3 values ranging from 0 to 1, corresponding to the \"red\",\"green\",\"blue\" values of the described color, ","the function returns a string in the form of FFFFFF."],"tags":["colors","graphics"],"requires":["join","length"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"text_to_rgb":{ "name":"text_to_rgb","fn_args":"(rgb_string)","usage":["rgb_string:string"],"description":"Given an RGB hex color string in the form of \"FFFFFF\", returns an array containing [ red green blue ] in the set [ 0 1 ].","tags":["colors","graphics"],"requires":["join","nth"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"rgb_to_hsv":{ "name":"rgb_to_hsv","fn_args":"(rgb)","description":["=:+","Takes an array with three values corresponding to red, green and blue: [red green blue].","Each value should be between 0 and 1 (i.e the set [0 1]) ","The function returns an array with three values corresponding to [hue saturation value] in the set [0 1]."],"usage":["rgb_values:array"],"tags":["colors","graphics","rgb","conversion","hsv"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"tint_rgb":{ "name":"tint_rgb","fn_args":"(rgb tint_factor)","description":["=:+","Given an array containing three values between 0 and 1 corresponding to red, ","green and blue, apply the provided tint factor to the color and return the result as an rgb array.","The provided tint factor should be in the range 0 (for no tint) to 1 (full tint)."],"usage":["rgb_value:array","tint_factor:number"],"tags":["colors","graphics"],"requires":["add"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"shade_rgb":{ "name":"shade_rgb","fn_args":"(rgb shade_factor)","description":["=:+","Given an array containing three values between 0 and 1 corresponding to red, ","green and blue, apply the provided tint factor to the color and return the result as an rgb array.","The provided tint factor should be in the range 0 (for no tint) to 1 (full tint)."],"usage":["rgb_value:array","tint_factor:number"],"tags":["colors","graphics"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"modify_color_ts":{ "name":"modify_color_ts","fn_args":"(rgb factor)","description":["=:+","Given an array containing three values between 0 and 1 corresponding to red, ","green and blue, apply the provided factor to the color and return the result as an rgb array.","The provided factor should be in the range -1 to 1: -1 to 0 applies shade to the color and 0 to 1 applies tinting to the color."],"usage":["rgb_value:array","tint_factor:number"],"tags":["colors","graphics"],"requires":["tint_rgb","shade_rgb"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"is_lower?":{ "name":"is_lower?","fn_args":"(v)","usage":["value:string"],"description":"Given a string as an argument, returns true if the first character of the string is a lowercase character value (ASCII), and false otherwise.","tags":["text","string","lowercase","uppercase"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"is_upper?":{ "name":"is_upper?","fn_args":"(v)","usage":["value:string"],"description":"Given a string as an argument, returns true if the first character of the string is an uppercase character value (ASCII), and false otherwise.","tags":["text","string","lowercase","uppercase"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"camel_case_to_lower":{ "name":"camel_case_to_lower","fn_args":"(val)","usage":[],"description":"Given a camel case string such as camelCase, returns the equivalent lowercase/underscore: camel_case.","tags":["text","string","conversion","lowercase","uppercase"],"requires":["join","map","is_upper?","lowercase","is_lower?","split"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"scan_list":{ "name":"scan_list","fn_args":"(regex container)","description":["=:+","Scans a list for the provided regex expression and returns the indexes in the list where it is found.  ","The provided regex expression can be a plain string or a RegExp object."],"usage":["regex:string","container:list"],"tags":["search","index","list","regex","array","string"],"requires":["not","sub_type","is_string?","push"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"gather_up_prop":{ "name":"gather_up_prop","fn_args":"(key values)","usage":["key:string","values:array|object"],"description":"Given a key and an object or array of objects, return all the values associated with the provided key.","tags":["key","property","objects","iteration"],"requires":["is_array?","no_empties","map","gather_up_prop","is_object?"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"sum_up_prop":{ "name":"sum_up_prop","fn_args":"(key values)","usage":["key:string","values:array|object"],"description":"Given a key and an object or array of objects, return the total sum amount of the given key.","tags":["sum","key","property","objects","iteration"],"requires":["sum","flatten","gather_up_prop"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"scan_for":{ "name":"scan_for","fn_args":"(non_nil_prop list_of_objects)","description":"Given a property name and a list of objects, find the first object with the non-nil property value specified by non_nil_prop. Returns the value of the non-nil property.","usage":["non_nil_prop:string","list_of_objects:array"],"tags":["find","scan","object","list","array","value"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"make_sort_buckets":{ "name":"make_sort_buckets","fn_args":"[]","usage":[],"description":["=:+","Called with no arguments, this function returns a function that when called with a ","category and a value, will store that value under the category name in an array, ","which acts as an accumulator of items for that category.  In this mode, the function ","returns the passed item to be stored.<br><br>","When the returned function is called with no arguments, the function returns the ","object containing all passed categories as its keys, with the values being the accumulated","items passed in previous calls."],"tags":["objects","accumulator","values","sorting","categorize","categorization","buckets"],"requires":["push"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"bytes_from_int_16":{ "requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"int_16_from_bytes":{ "requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"parse_csv":{ "name":"parse_csv","fn_args":"(csv_data options)","description":["=:+","Given a text file of CSV data and an optional options value, parse and return a JSON structure of the CSV data as nested arrays.","<br>","Options can contain the following values:<br>","<table><tr><td>separator</td><td>A text value for the separator to use.  ","The default is a comma.</td></tr><tr><td>interruptions</td><td>If set to true, ","will pause regularly during processing for 1/10th of a second to allow other event queue activities to occur.</td>","</tr><tr><td>notifier</td><td>If interruptions is true, notifier will be triggered with ","the progress of work as a percentage of completion (0 - 1), the current count and the total rows.</td></tr></table>"],"usage":["csv_data:string","options:object?"],"tags":["parse","list","values","table","tabular","csv"],"requires":["is_array?","is_string?","split_by","replace","sleep","reverse","scan_str","push","length"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"to_csv":{ "name":"to_csv","fn_args":"[\"rows\" delimiter]","description":["=:+","Given a list of rows, which are expected to be lists themselves, ","join the contents of the rows together via , and then join the rows ","together into a csv buffer using a newline, then returned as a string."],"usage":["rows:list","delimiter:string"],"tags":["csv","values","report","comma","serialize","list"],"requires":["join","map","is_string?","contains?","replace"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"squeeze":{ "name":"squeeze","fn_args":"(s)","usage":["string_value:string"],"description":"Returns a string that has all spaces removed from the supplied string value.","tags":["text","space","trim","remove"],"requires":["replace"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"ensure_keys":{ "name":"ensure_keys","fn_args":"(keylist obj default_value)","description":["=:+","Given a list of key values, an object (or nil) and an optional default value to be ","assigned each key, ensures that the object returned has the specified keys (if not already set) set to either ","the specified default value, or nil."],"usage":["keylist","obj:object","default_value:*?"],"tags":["object","keys","values","required","key"],"requires":[],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"show_time_in_words":{ "description":"Given an integer value representing seconds of a time duration, return a string representing the time in words, such as 2 mins.  If the key longForm is set to true in options return full words instead of contracted forms.  For example min vs. minute.","usage":["seconds:integer","options:object"],"tags":["time","date","format","string","elapsed"],"requires":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"ago":{ "name":"ago","fn_args":"(dval)","usage":["dval:Date"],"description":"Given a date object, return a formatted string in English with the amount of time elapsed from the provided date.","tags":["date","format","time","string","elapsed"],"requires":["show_time_in_words"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"lifespan":{ "name":"lifespan","fn_args":"(dval)","usage":["dval:Date"],"description":"Given a date object, return a formatted string in English with the amount of time until the specified date.","tags":["date","format","time","string","elapsed"],"requires":["show_time_in_words"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"rotate_right":{ "name":"rotate_right","fn_args":"(array_obj)","description":["=:+","Given an array, takes the element at the last ","position (highest index), removes it and places ","it at the front (index 0) and returns the array. "],"usage":["array_obj:array"],"tags":["array","rotation","shift","right"],"requires":["prepend","pop"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"rotate_left":{ "name":"rotate_left","fn_args":"(array_obj)","description":["=:+","Given an array, takes the element at the first ","position (index 0), removes it and places ","it at the front (highest index) and returns the array. "],"usage":["array_obj:array"],"tags":["array","rotation","shift","left"],"requires":["push","take"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"interpolate":{ "name":"interpolate","fn_args":"(from to steps)","description":"Returns an array of length steps which has ascending or descending values inclusive of from and to.","usage":["from:number","to:number","steps:number"],"tags":["range","interpolation","fill"],"requires":["assert","is_number?","push"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"encode_to_base64":{ "name":"encode_to_base64","fn_args":"(array_buffer_data)","description":["=:+","Given a value of type `ArrayBuffer` as input, returns a base64 encoded ","string, suitable for use in image URLs or serialized storage.<br>#### Example ","<br>```(defun file_to_img (file)\n   (img { src: (+ \"data:\" file.type \";base64,\" ","\n        (encode_to_base64 (read_file file { `read_as: \"binary\" }))) ","}))```<br>"],"usage":["array_buffer_data:ArrayBuffer"],"tags":["encode","base64","b64","ArrayBuffer","array","convert","conversion"],"requires":["second","split_by"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"unload_core_ext":{ "name":"unload_core_ext","fn_args":"[]","requires":["log"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"documentation_coverage":{ "name":"documentation_coverage","fn_args":"(ns)","description":["=:+","This function returns the coverage details for the documentation of ","global symbols by assessing how many descriptions are registered as part of a ","namespace's symbol meta data.  The lower the coverage score the less documented ","a namespace is.  The returned data is contained in an object with the total ","symbol count, the coverage ratio (number-of-documented-symbols / ","total-symbols), the amounts of good and missing documentation and the symbols ","grouped as arrays that represent completed and missing documentation ","respectively. "],"usage":["namespace:?string"],"tags":["documentation","coverage","help","namespace"],"requires":["push","pairs"],"externals":["ReferenceError","Object","Date","Math","Error","RegExp","Function","parseFloat","clone","TextEncoder","crypto","DataView","TypeError","subtype","isNaN","Intl","parseInt","console","Promise","FileReader","Blob"],"source_name":"src/core-ext.lisp"
},"*lz_string_contents*":{ "requires":["read_text_file"],"externals":[],"source_name":"pkg/lz-string.juno"
},"LZString":{ "initializer":["=:eval",["=:function",[],["=:javascript"," {// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.4\n\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nconst LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\nreturn LZString;\n\n\n\n\n}"]]],"license":"Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\nThis work is free. You can redistribute it and/or modify it\nunder the terms of the WTFPL, Version 2\nFor more information see LICENSE.txt or http://www.wtfpl.net/\n\nFor more information, the home page:\nhttp://pieroxy.net/blog/pages/lz-string/testing.html","requires":["*lz_string_contents*"],"source_name":"pkg/lz-string.juno"
},"html_package":{ "requires":["env_encode_string","read_text_file"],"externals":[],"source_name":"pkg/save_browser_env.juno"
},"style_css":{ "requires":["read_text_file"],"externals":[],"source_name":"pkg/save_browser_env.juno"
},"*global_themes*":{ "requires":["read_text_file"],"externals":[],"source_name":"pkg/save_browser_env.juno"
},"browser_initializer":{ "requires":["LZString","read_text_file"],"externals":[],"source_name":"pkg/save_browser_env.juno"
},"browser_repl_package":{ "requires":["read_text_file"],"externals":[],"source_name":"pkg/save_browser_env.juno"
},"load":{ "name":"load","fn_args":"(filename)","description":["=:+","Compile and load the contents of the specified lisp filename (including path) into the Lisp environment. ","The file contents are expected to be Lisp source code in text format."],"tags":["compile","read","io","file"],"usage":["filename:string"],"requires":["path","evaluate","read_text_file"],"externals":["Deno","EvalError","JSON"],"source_name":"src/base-io.lisp"
},"with_fs_events":{ "eval_when":{ "compile_time":true
},"name":"with_fs_events","macro":true,"fn_args":"[(event_binding location) body]","description":["=:+","This function sets up a watcher scope for events on a filesystem. ","The symbol passed to the event_binding is bound to new events that occur ","at the provided location.  Once an event occurs, the body forms are executed."],"usage":["event_binding:symbol","location:string","body:array"],"tags":["file","filesystem","events","io","watch"],"requires":[],"externals":["Deno","EvalError","JSON"],"source_name":"src/base-io.lisp"
},"compile_buffer":{ "name":"compile_buffer","fn_args":"(input_buffer export_function_name options)","description":["=:+","Given an input lisp file, and an optional initalizer function name and options ","object, compile the lisp file into a javascript file. The options object will ","allow the specification of an output path and filename, given by the key ","output_file.  If the initializer function isn't specified it is named ","initializer, which when used with load, will be automatically called ","one the file is loaded.  Otherwise the initializer function should be ","called when after dynamically importing, using dynamic_import. If the ","options object is to be used, with a default initializer, nil should be ","used as a placeholder for the initializer_function name.<br><br>","Options are as follows:<br><br>","js_headers: array: If provided, this is an array of strings that represent","lines to be inserted at the top of the file.","include_source: boolean: If provided will append the block forms and ","expressions within the text as comments.","output_file: string: If provided the path and filename of the compiled ","javascript file to be produced.","include_boilerplate: boolean: If set to false explicity, the boilerplate","code will be not be included in the build.","<br><br>","NOTE: this function's API is unstable and subject to change due to ","the early phase of this language."],"usage":["input_file:string","initializer_function:string?","options:object?"],"tags":["compile","environment","building","javascript","lisp","file","export"],"requires":["add","is_object?","map","pairs","length","scan_str","push","is_array?","compiler","warn","contains?","is_string?","join","not","write_text_file","success"],"externals":["Date","RegExp","SyntaxError","console","JSON"],"source_name":"src/build-tools.lisp"
},"compile_file":{ "name":"compile_file","fn_args":"(lisp_file export_function_name options)","requires":["path","read_text_file","read_lisp","compile_buffer","add"],"externals":["Date","RegExp","SyntaxError","console","JSON"],"source_name":"src/build-tools.lisp"
},"rebuild_env":{ "name":"rebuild_env","fn_args":"(opts)","description":["=:+","Builds the lisp environment from the Lisp sources and produces the Javascript output files ","necessary for initializing the environment. Options: <br>","source_dir:string:The directory of the Lisp sources, the default is './src'.<br>","output_dir:string:The directory to where the output Javascript files are placed.  The default is './js'.<br>","include_source:boolean:If true, the compiler will include comments of the lisp source (not fully supported yet).<br>","version_tag:string:A string based label signifying the text to use as the version.  If not specified, the version ","tag uses the format year.month.day.hour.minute.<br>"],"usage":["options:object?"],"tags":["compile","export","build","environment","javascript"],"requires":["date_components","not","blank?","join","formatted_date","path","*namespace*","push","success","compile_file"],"externals":["Date","RegExp","SyntaxError","console","JSON"],"source_name":"src/build-tools.lisp"
},"*system_initializer*":{ "name":"*system_initializer*","fn_args":"[]","requires":["namespaces","*namespace*","reader","browser_repl_package"],"externals":["console","clone","globalThis"],"source_name":"pkg/save_browser_env.juno"
},"*env_template*":{ "requires":["LZString","read_text_file"],"externals":["console","clone","globalThis"],"source_name":"pkg/save_browser_env.juno"
},"included_libs":{ "requires":[],"externals":["console","clone","globalThis","Error","RegExp"],"source_name":"pkg/save_browser_env.juno"
},"included_editor_assets":{ "requires":[],"externals":["console","clone","globalThis","Error","RegExp"],"source_name":"pkg/save_browser_env.juno"
}
} 
})(),declarations:{
    safety:{
        level:2
    }
},config:{
    export:{
        save_path:"js/juno.js",default_namespace:"user",include_source:false,save_executable:"bin/juno"
    },features:["compiler","repl","core-ext","html","build-tools","browser","http_client"],build:"2023.04.19.16.15",imports:new Object(),repl:new Object(),editor:{
        default_theme:"juno_light",font_size:14,themes:["chrome","cobalt","crimson_editor","dracula","earth_tones","gruvbox","ice","idle_fingers","juno_light","katzenmilch","kuroir","solarized_dark","solarized_light"]
    },application:{
        menu_timeout:2500,global_theme:"juno_light",max_log_lines:100,name:"Seedling",quick_alerts:{
            display:true,default_display_time:750
        },on_ready:"seedling_ready"
    }
},imports:new Object(),symbols:await ( async function(){let __obj__1=new Object();__obj__1["MAX_SAFE_INTEGER"]=9007199254740991;__obj__1["LispSyntaxError"]=LispSyntaxError;__obj__1["sub_type"]=subtype;__obj__1["__VERBOSITY__"]=0;__obj__1["int"]=parseInt;__obj__1["float"]=parseFloat;__obj__1["values"]=function anonymous(...args
) {
{
                         let acc = [];
                         for (let _i in args) {
                                let value = args[_i];
                                let type = subtype(value);
                                if (value instanceof Set)  {
                                     acc = acc.concat(Array.from(value));
                                     } else if (type==='array') {
                                      acc = acc.concat(value);
                                      } else if (type==='object') {
                                       acc = acc.concat(Object.values(value))
                                       } else {
                                        acc = acc.concat(value);
                                        }
                                }
                         return acc;
                         }
};__obj__1["pairs"]=function anonymous(obj
) {
{
                        if (subtype(obj)==='array') {
                             let rval = [];
                             for (let i = 0; i < obj.length; i+=2) {
                                    rval.push([obj[i],obj[i+1]]);
                                    }
                             return rval;
                             } else {
                              let keys = Object.keys(obj);
                              let rval = keys.reduce(function(acc,x,i) {
                                                               acc.push([x,obj[x]])
                                                               return acc;
                                                               },[]);
                              return rval;
                              }
                        }
};__obj__1["keys"]=function anonymous(obj
) {
{  return Object.keys(obj);  }
};__obj__1["take"]=function anonymous(place
) {
{ return place.shift() }
};__obj__1["prepend"]=function anonymous(place,thing
) {
{ return place.unshift(thing) }
};__obj__1["first"]=function anonymous(x
) {
{ return x[0] }
};__obj__1["last"]=function anonymous(x
) {
{ return x[x.length - 1] }
};__obj__1["length"]=function anonymous(obj
) {
{
                         if(obj instanceof Array) {
                             return obj.length;
                             } else if (obj instanceof Set) {
                              return obj.size;
                              } else if ((obj === undefined)||(obj===null)) {
                               return 0;
                               } else if (typeof obj==='object') {
                                return Object.keys(obj).length;
                                } else if (typeof obj==='string') {
                                 return obj.length;
                                 }
                         return 0;
                         }
};__obj__1["conj"]=function anonymous(...args
) {
{   let list = [];
                       if (args[0] instanceof Array) {
                            list = args[0];
                            } else {
                             list = [args[0]];
                             }
                       args.slice(1).map(function(x) {
                                          list = list.concat(x);
                                          });
                       return list;
                       }
};__obj__1["reverse"]=function anonymous(container
) {
{ return container.slice(0).reverse() }
};__obj__1["map"]=async function anonymous(lambda,array_values
) {
{ try {
                      let rval = [],
                      tl = array_values.length;
                      for (let i = 0; i < array_values.length; i++) {
                             rval.push(await lambda.apply(this,[array_values[i], i, tl]));
                             }
                      return rval;
                      } catch (ex) {
                       if (lambda === undefined || lambda === null) {
                             throw new ReferenceError("map: lambda argument (position 0) is undefined or nil")
                             } else if (array_values === undefined || array_values === null) {
                              throw new ReferenceError("map: container argument (position 1) is undefined or nil")
                              } else if (!(lambda instanceof Function)) {
                               throw new ReferenceError("map: lambda argument must be a function: received: "+ typeof lambda)
                               } else if (!(array_values instanceof Array)) {
                                throw new ReferenceError("map: invalid array argument, received: " + typeof array_values)
                                } else {
                                 // something else just pass on the error
                                 throw ex;
                                 }
                       }
                 }
};__obj__1["bind"]=function anonymous(func,this_arg
) {
{ return func.bind(this_arg) }
};__obj__1["to_object"]=function anonymous(array_values
) {
{
                         let obj={}
                         array_values.forEach((pair)=>{
                                                 obj[pair[0]]=pair[1]
                                                 });
                         return obj;
                         }
};__obj__1["to_array"]=async function(container) {
                        return await async function(){
                            if (check_true ((container instanceof Array))) {
                                return container
                            } else if (check_true (await (await get_global("is_set?"))(container))) {
                                {
                                    let acc=[];
                                    ;
                                    await container["forEach"].call(container,async function(v) {
                                        return (acc).push(v)
                                    });
                                    return acc
                                }
                            } else if (check_true ((container instanceof String || typeof container==='string'))) {
                                return (container).split("")
                            } else if (check_true ((container instanceof Object))) {
                                return await pairs(container)
                            } else {
                                return await (async function(){
                                    let __array_op_rval__44=container;
                                     if (__array_op_rval__44 instanceof Function){
                                        return await __array_op_rval__44() 
                                    } else {
                                        return [__array_op_rval__44]
                                    }
                                })()
                            }
                        } ()
                    };__obj__1["slice"]=function(target,from,to) {
                        return   (function(){
                            if (check_true (to)) {
                                return  target["slice"].call(target,from,to)
                            } else if (check_true (from)) {
                                return  target["slice"].call(target,from)
                            } else {
                                throw new SyntaxError("slice requires 2 or 3 arguments");
                                
                            }
                        } )()
                    };__obj__1["rest"]=function(x) {
                        return   (function(){
                            if (check_true ((x instanceof Array))) {
                                return  x["slice"].call(x,1)
                            } else if (check_true ((x instanceof String || typeof x==='string'))) {
                                return  x["substr"].call(x,1)
                            } else {
                                return null
                            }
                        } )()
                    };__obj__1["second"]=function anonymous(x
) {
{ return x[1] }
};__obj__1["third"]=function anonymous(x
) {
{ return x[2] }
};__obj__1["chop"]=function anonymous(x
) {
{ if (x instanceof Array) { return x.slice(0, x.length-1) } else { return x.substr(0,x.length-1) } }
};__obj__1["chomp"]=function anonymous(x
) {
{ return x.substr(x.length-1) }
};__obj__1["not"]=function anonymous(x
) {
{ if (check_true(x)) { return false } else { return true } }
};__obj__1["push"]=function anonymous(place,thing
) {
{ return place.push(thing) }
};__obj__1["pop"]=function anonymous(place
) {
{ return place.pop() }
};__obj__1["list"]=async function(...args) {
                        return args
                    };__obj__1["flatten"]=function anonymous(x
) {
{ return x.flat(999999999999) } 
};__obj__1["jslambda"]=function(...args) {
                        return  ( function(){
                            let __apply_args__69= flatten(args);
                            return ( Function).apply(this,__apply_args__69)
                        })()
                    };__obj__1["join"]=function(...args) {
                        return   (function(){
                            if (check_true ((args.length===1))) {
                                return  args['0']["join"].call(args['0'],"")
                            } else {
                                return  args['1']["join"].call(args['1'],args['0'])
                            }
                        } )()
                    };__obj__1["lowercase"]=function(x) {
                        return  x["toLowerCase"]()
                    };__obj__1["uppercase"]=function(x) {
                        return  x["toUpperCase"]()
                    };__obj__1["log"]=function(...args) {
                        return  ( function(){
                            return ( console.log).apply(this,args)
                        })()
                    };__obj__1["split"]=function anonymous(container,token
) {
{ return container.split(token) }
};__obj__1["split_by"]=function anonymous(token,container
) {
{ return container.split(token) }
};__obj__1["is_object?"]=function anonymous(x
) {
{ return x instanceof Object }
};__obj__1["is_array?"]=function anonymous(x
) {
{ return x instanceof Array }
};__obj__1["is_number?"]=function(x) {
                        return ( subtype(x)==="Number")
                    };__obj__1["is_function?"]=function(x) {
                        return (x instanceof Function)
                    };__obj__1["is_set?"]=function anonymous(x
) {
{ return x instanceof Set }
};__obj__1["is_element?"]=function anonymous(x
) {
{ return x instanceof Element }
};__obj__1["is_string?"]=function(x) {
                        return ((x instanceof String)|| (typeof x==="string"))
                    };__obj__1["is_nil?"]=async function(value) {
    return (null===value)
};__obj__1["is_regex?"]=async function(x) {
    return (await (await Environment.get_global("sub_type"))(x)==="RegExp")
};__obj__1["is_date?"]=async function(x) {
    return (await (await Environment.get_global("sub_type"))(x)==="Date")
};__obj__1["ends_with?"]=function anonymous(val,text
) {
{ if (text instanceof Array) { return text[text.length-1]===val } else if (subtype(text)=='String') { return text.endsWith(val) } else { return false }}
};__obj__1["starts_with?"]=function anonymous(val,text
) {
{ if (text instanceof Array) { return text[0]===val } else if (subtype(text)=='String') { return text.startsWith(val) } else { return false }}
};__obj__1["delete_prop"]=function anonymous(obj,...args
) {
{
                           if (args.length == 1) {
                                return delete obj[args[0]];
                                } else {
                                 while (args.length > 0) {
                                         let prop = args.shift();
                                         delete obj[prop];
                                         }
                                 }
                           return obj;
                           }
};__obj__1["blank?"]=function(val) {
                        return ((val==null)|| ((val instanceof String || typeof val==='string')&& (val==="")))
                    };__obj__1["contains?"]=function anonymous(value,container
) {
{ if (!value && !container) { return false }
                         else if (container === null) { throw new TypeError("contains?: passed nil/undefined container value"); }
                                            else if (container instanceof Array) return container.includes(value);
                                            else if (container instanceof Set) return container.has(value);
                                            else if ((container instanceof String) || typeof container === "string") {
                                                     if (subtype(value) === "Number") return container.indexOf(""+value)>-1;
                                                     else return container.indexOf(value)>-1;
                                                     }
                                            else throw new TypeError("contains?: passed invalid container type: "+subtype(container)) }
};__obj__1["make_set"]=function(vals) {
                        if (check_true ((vals instanceof Array))){
                            return new Set(vals)
                        } else {
                            {
                                let vtype;
                                vtype= sub_type(vals);
                                return   (function(){
                                    if (check_true ((vtype==="Set"))) {
                                        return new Set(vals)
                                    } else if (check_true ((vtype==="object"))) {
                                        return new Set( values(vals))
                                    }
                                } )()
                            }
                        }
                    };__obj__1["meta_for_symbol"]=function(quoted_symbol,search_mode) {
                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){
                            {
                                let local_data=(Environment.global_ctx.scope[quoted_symbol]|| Environment.definitions[quoted_symbol]);
                                ;
                                let acc=[];
                                ;
                                if (check_true (search_mode)){
                                    {
                                        if (check_true (local_data)){
                                            {
                                                (acc).push( ( get_global("add"))({
                                                    namespace:namespace,name:quoted_symbol,type: subtype(local_data)
                                                }, ( function(){
                                                    let it;
                                                    it=Environment.definitions[quoted_symbol];
                                                    if (check_true (it)){
                                                        return it
                                                    } else {
                                                        return new Object()
                                                    }
                                                })()))
                                            }
                                        };
                                        if (check_true (parent_environment)){
                                            {
                                                {
                                                    let __collector;
                                                    let __result;
                                                    let __action;
                                                    __collector=[];
                                                    __result=null;
                                                    __action=function(info) {
                                                        return (acc).push(info)
                                                    };
                                                    ;
                                                     ( function() {
                                                        let __for_body__121=function(__item) {
                                                            __result= __action(__item);
                                                            if (check_true (__result)){
                                                                return (__collector).push(__result)
                                                            }
                                                        };
                                                        let __array__122=[],__elements__120= ( function() {
                                                            {
                                                                 let __call_target__= parent_environment["meta_for_symbol"].call(parent_environment,quoted_symbol,true), __call_method__="flat";
                                                                return  __call_target__[__call_method__].call(__call_target__,1)
                                                            } 
                                                        })();
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__119 in __elements__120) {
                                                            __array__122.push( __for_body__121(__elements__120[__iter__119]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__122.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__122;
                                                         
                                                    })();
                                                    __collector
                                                }
                                            }
                                        };
                                        if (check_true (( length( keys(children))>0))){
                                            {
                                                {
                                                    let __collector;
                                                    let __result;
                                                    let __action;
                                                    __collector=[];
                                                    __result=null;
                                                    __action=function(details) {
                                                        return (acc).push(details)
                                                    };
                                                    ;
                                                     ( function() {
                                                        let __for_body__125=function(__item) {
                                                            __result= __action(__item);
                                                            if (check_true (__result)){
                                                                return (__collector).push(__result)
                                                            }
                                                        };
                                                        let __array__126=[],__elements__124= ( function(){
                                                            let ____collector__127=  function(){
                                                                return []
                                                            };
                                                            let ____result__128=  function(){
                                                                return null
                                                            };
                                                            let ____action__129=  function(){
                                                                return function(child_data) {
                                                                    if (check_true ( not((child_data['0']=== ( get_global("current_namespace"))())))){
                                                                        {
                                                                            return  child_data['1']["meta_for_symbol"].call(child_data['1'],quoted_symbol)
                                                                        }
                                                                    }
                                                                }
                                                            };
                                                            {
                                                                let __collector= ____collector__127();
                                                                ;
                                                                let __result= ____result__128();
                                                                ;
                                                                let __action= ____action__129();
                                                                ;
                                                                ;
                                                                 ( function() {
                                                                    let __for_body__132=function(__item) {
                                                                        __result= __action(__item);
                                                                        if (check_true (__result)){
                                                                            return (__collector).push(__result)
                                                                        }
                                                                    };
                                                                    let __array__133=[],__elements__131= pairs(children);
                                                                    let __BREAK__FLAG__=false;
                                                                    for(let __iter__130 in __elements__131) {
                                                                        __array__133.push( __for_body__132(__elements__131[__iter__130]));
                                                                        if(__BREAK__FLAG__) {
                                                                             __array__133.pop();
                                                                            break;
                                                                            
                                                                        }
                                                                    }return __array__133;
                                                                     
                                                                })();
                                                                return __collector
                                                            }
                                                        })();
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__123 in __elements__124) {
                                                            __array__126.push( __for_body__125(__elements__124[__iter__123]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__126.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__126;
                                                         
                                                    })();
                                                    __collector
                                                }
                                            }
                                        };
                                        return acc
                                    }
                                } else {
                                    {
                                        quoted_symbol= ( function(){
                                            if (check_true ( starts_with_ques_( ( function(){
                                                 return "=:" 
                                            })(),quoted_symbol))){
                                                return  quoted_symbol["substr"].call(quoted_symbol,2)
                                            } else {
                                                return quoted_symbol
                                            }
                                        })();
                                        {
                                            let it;
                                            it=Environment.definitions[quoted_symbol];
                                            if (check_true (it)){
                                                return  ( get_global("add"))({
                                                    namespace:namespace,type: sub_type(local_data),name:quoted_symbol
                                                },it)
                                            } else {
                                                return null
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    };__obj__1["describe"]=async function(quoted_symbol,search_mode) {
                        let internal_results=await meta_for_symbol(quoted_symbol,true);
                        ;
                        if (check_true (((internal_results instanceof Array)&& internal_results['0']))){
                            if (check_true (search_mode)){
                                return internal_results
                            } else {
                                return await first(internal_results)
                            }
                        } else {
                            {
                                let external_results=await get_outside_global(quoted_symbol);
                                ;
                                if (check_true (external_results)){
                                    {
                                        let detail={
                                            location:"external",type:await subtype(external_results),name:quoted_symbol,namespace:"EXTERNAL",description:("This is not a bound symbol within the Juno Environment.  "+ "If it is to be used, it is recommended to create a reference to it with "+ "`(defglobal "+ quoted_symbol+ " "+ quoted_symbol+ " { `description: \"...\" })`")
                                        };
                                        ;
                                        if (check_true (search_mode)){
                                            return await (async function(){
                                                let __array_op_rval__136=detail;
                                                 if (__array_op_rval__136 instanceof Function){
                                                    return await __array_op_rval__136() 
                                                } else {
                                                    return [__array_op_rval__136]
                                                }
                                            })()
                                        } else {
                                            return detail
                                        }
                                    }
                                } else {
                                    return null
                                }
                            }
                        }
                    };__obj__1["undefine"]=function(quoted_symbol) {
                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){
                            {
                                let namespace_identity;
                                let parent_call;
                                let child_call;
                                let target_symbol;
                                namespace_identity=(quoted_symbol).split("/");
                                parent_call=null;
                                child_call=null;
                                target_symbol=null;
                                ;
                                return   (function(){
                                    if (check_true ((((namespace_identity.length===1)&& Environment.global_ctx.scope[namespace_identity['0']])|| ((namespace_identity.length>1)&& (namespace_identity['0']===namespace))))) {
                                        {
                                            target_symbol= ( function(){
                                                if (check_true ((namespace_identity.length>1))){
                                                    return namespace_identity['1']
                                                } else {
                                                    return namespace_identity['0']
                                                }
                                            })();
                                             delete_prop(Environment.definitions,target_symbol);
                                            if (check_true (Environment.global_ctx.scope[target_symbol])){
                                                return  delete_prop(Environment.global_ctx.scope,target_symbol)
                                            } else {
                                                return false
                                            }
                                        }
                                    } else if (check_true (((namespace_identity.length>1)&& parent_environment))) {
                                        {
                                            parent_call= parent_environment["get_global"].call(parent_environment,"undefine");
                                            return (parent_call)(quoted_symbol)
                                        }
                                    } else if (check_true (((namespace_identity.length>1)&& children[namespace_identity['0']]))) {
                                        {
                                            child_call= ( function() {
                                                {
                                                     let __call_target__=children[namespace_identity['0']], __call_method__="get_global";
                                                    return  __call_target__[__call_method__].call(__call_target__,"undefine")
                                                } 
                                            })();
                                            return  child_call(quoted_symbol)
                                        }
                                    } else {
                                        return false
                                    }
                                } )()
                            }
                        } else {
                            throw new SyntaxError("undefine requires a quoted symbol");
                            
                        }
                    };__obj__1["eval_exp"]=async function(expression) {
                        return await (async function(){
                            let __array_op_rval__141=expression;
                             if (__array_op_rval__141 instanceof Function){
                                return await __array_op_rval__141() 
                            } else {
                                return [__array_op_rval__141]
                            }
                        })()
                    };__obj__1["indirect_new"]=function(...args) {
                        
                             {
                               let targetClass = args[0];
                               if (subtype(targetClass)==="String") {
                                    let tmpf=new Function("{ return "+targetClass+" }");
                                    targetClass = tmpf();
                                    }
                               if (args.length==1) {
                                    let f = function(Class) {
                                                      return new (Function.prototype.bind.apply(Class, args));
                                                      }
                                    let rval = f.apply(this,[targetClass]);
                                    return rval;
                                    } else {
                                     let f = function(Class) {
                                                       return new (Function.prototype.bind.apply(Class, args));
                                                       }
                                     let rval = f.apply(this,[targetClass].concat(args.slice(1)));
                                     return rval;
                                     }
                               } 
                    };__obj__1["range"]=function(...args) {
                        let from_to;
                        let step;
                        let idx;
                        let acc;
                        from_to= ( function(){
                            if (check_true (args['1'])){
                                return [parseInt(args['0']),parseInt(args['1'])]
                            } else {
                                return [0,parseInt(args['0'])]
                            }
                        })();
                        step= ( function(){
                            if (check_true (args['2'])){
                                return parseFloat(args['2'])
                            } else {
                                return 1
                            }
                        })();
                        idx=from_to['0'];
                        acc=[];
                         ( get_global("assert"))((step>0),"range: step must be > 0");
                         ( get_global("assert"))((from_to['1']>=from_to['0']),"range: lower bound must be greater or equal than upper bound");
                         ( function(){
                             let __test_condition__146=function() {
                                return (idx<from_to['1'])
                            };
                            let __body_ref__147=function() {
                                (acc).push(idx);
                                return idx+=step
                            };
                            let __BREAK__FLAG__=false;
                            while( __test_condition__146()) {
                                  __body_ref__147();
                                 if(__BREAK__FLAG__) {
                                     break;
                                    
                                }
                            } ;
                            
                        })();
                        return acc
                    };__obj__1["add"]=function anonymous(...args
) {
{
                   let acc;
                   if (typeof args[0]==="number") {
                        acc = 0;
                        } else if (args[0] instanceof Array) {
                         return args[0].concat(args.slice(1));
                         } else if (typeof args[0]==='object') {
                          let rval = {};
                          for (let i in args) {
                                 if (typeof args[i] === 'object') {
                                      for (let k in args[i]) {
                                             rval[k] = args[i][k];
                                             }
                                      }
                                 }
                          return rval;
                          } else {
                           acc = "";
                           }
                   for (let i in args) {
                          acc += args[i];
                          }
                   return acc;
                   }
};__obj__1["merge_objects"]=function anonymous(x
) {
{
                             let rval = {};
                             for (let i in x) {
                                    if (typeof i === 'object') {
                                         for (let k in x[i]) {
                                                rval[k] = x[i][k];
                                                }
                                         }
                                    }
                             return rval;
                             }
};__obj__1["index_of"]=function anonymous(value,container
) {
{ return container.indexOf(value) }
};__obj__1["resolve_path"]=function anonymous(path,obj
) {
{
                            if (typeof path==='string') {
                                 path = path.split(".");
                                 }
                            let s=obj;
                            return path.reduce(function(prev, curr) {
                                                         return prev ? prev[curr] : undefined
                                                         }, obj || {})
                            }
};__obj__1["min_value"]=async function(v) {
    let m;
    m=(await Environment.get_global("MAX_SAFE_INTEGER"));
    if (check_true (await (await Environment.get_global("not"))((await (await Environment.get_global("sub_type"))(v)==="array")))){
        throw new TypeError("argument is not an array");
        
    };
    await (async function() {
        let __for_body__91=async function(x) {
            if (check_true (await (await Environment.get_global("not"))(await isNaN(x)))){
                return m=await Math.min(x,m)
            }
        };
        let __array__92=[],__elements__90=v;
        let __BREAK__FLAG__=false;
        for(let __iter__89 in __elements__90) {
            __array__92.push(await __for_body__91(__elements__90[__iter__89]));
            if(__BREAK__FLAG__) {
                 __array__92.pop();
                break;
                
            }
        }return __array__92;
         
    })();
    if (check_true ((m===(await Environment.get_global("MAX_SAFE_INTEGER"))))){
        return 0
    } else {
        return m
    }
};__obj__1["max_value"]=async function(v) {
    let m;
    m=0;
    if (check_true (await (await Environment.get_global("not"))((await (await Environment.get_global("sub_type"))(v)==="array")))){
        throw new TypeError("argument is not an array");
        
    };
    await (async function() {
        let __for_body__87=async function(x) {
            if (check_true (await (await Environment.get_global("not"))(await isNaN(x)))){
                return m=await Math.max(x,m)
            }
        };
        let __array__88=[],__elements__86=v;
        let __BREAK__FLAG__=false;
        for(let __iter__85 in __elements__86) {
            __array__88.push(await __for_body__87(__elements__86[__iter__85]));
            if(__BREAK__FLAG__) {
                 __array__88.pop();
                break;
                
            }
        }return __array__88;
         
    })();
    return m
};__obj__1["interlace"]=async function(...args) {
                        let min_length;
                        let rlength_args;
                        let rval;
                        min_length=await min_value(await (async function(){
                             return await map(length,args) 
                        })());
                        rlength_args=await range(await length(args));
                        rval=[];
                        await (async function() {
                            let __for_body__164=async function(i) {
                                return await (async function() {
                                    let __for_body__168=async function(j) {
                                        return (rval).push(await (async function(){
                                            let __targ__170=args[j];
                                            if (__targ__170){
                                                 return(__targ__170)[i]
                                            } 
                                        })())
                                    };
                                    let __array__169=[],__elements__167=rlength_args;
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__166 in __elements__167) {
                                        __array__169.push(await __for_body__168(__elements__167[__iter__166]));
                                        if(__BREAK__FLAG__) {
                                             __array__169.pop();
                                            break;
                                            
                                        }
                                    }return __array__169;
                                     
                                })()
                            };
                            let __array__165=[],__elements__163=await range(min_length);
                            let __BREAK__FLAG__=false;
                            for(let __iter__162 in __elements__163) {
                                __array__165.push(await __for_body__164(__elements__163[__iter__162]));
                                if(__BREAK__FLAG__) {
                                     __array__165.pop();
                                    break;
                                    
                                }
                            }return __array__165;
                             
                        })();
                        return rval
                    };__obj__1["trim"]=function(x) {
                        return  x["trim"]()
                    };__obj__1["assert"]=function(assertion_form,failure_message) {
                        if (check_true (assertion_form)){
                            return assertion_form
                        } else {
                            throw new EvalError((failure_message|| "assertion failure"));
                            
                        }
                    };__obj__1["unquotify"]=async function(val) {
                        let dval;
                        dval=val;
                        if (check_true (await starts_with_ques_("\"",dval))){
                            dval=await dval["substr"].call(dval,1,(dval.length- 2))
                        };
                        if (check_true (await starts_with_ques_("=:",dval))){
                            dval=await dval["substr"].call(dval,2)
                        };
                        return dval
                    };__obj__1["or_args"]=async function(argset) {
                        let is_true;
                        is_true=false;
                        await (async function() {
                            let __for_body__181=async function(elem) {
                                if (check_true (elem)){
                                    {
                                        is_true=true;
                                        return __BREAK__FLAG__=true;
                                        return
                                    }
                                }
                            };
                            let __array__182=[],__elements__180=argset;
                            let __BREAK__FLAG__=false;
                            for(let __iter__179 in __elements__180) {
                                __array__182.push(await __for_body__181(__elements__180[__iter__179]));
                                if(__BREAK__FLAG__) {
                                     __array__182.pop();
                                    break;
                                    
                                }
                            }return __array__182;
                             
                        })();
                        return is_true
                    };__obj__1["special_operators"]=async function() {
                        return await make_set(await (async function(){
                             return await compiler([],{
                                special_operators:true,env:Environment
                            }) 
                        })())
                    };__obj__1["defclog"]=async function(opts) {
                        let style;
                        style=("padding: 5px;"+ await (async function(){
                            if (check_true (opts.background)){
                                return ("background: "+ opts.background+ ";")
                            } else {
                                return ""
                            }
                        })()+ await (async function(){
                            if (check_true (opts.color)){
                                return ("color: "+ opts.color+ ";")
                            }
                        })()+ "");
                        return async function(...args) {
                            return await (async function(){
                                let __target_arg__189=[].concat(await conj(await (async function(){
                                    let __array_op_rval__190=style;
                                     if (__array_op_rval__190 instanceof Function){
                                        return await __array_op_rval__190() 
                                    } else {
                                        return [__array_op_rval__190]
                                    }
                                })(),args));
                                if(!__target_arg__189 instanceof Array){
                                    throw new TypeError("Invalid final argument to apply - an array is required")
                                }let __pre_arg__191=("%c"+ await (async function(){
                                    if (check_true (opts.prefix)){
                                        return opts.prefix
                                    } else {
                                        return (args).shift()
                                    }
                                })());
                                __target_arg__189.unshift(__pre_arg__191);
                                return (console.log).apply(this,__target_arg__189)
                            })()
                        }
                    };__obj__1["NOT_FOUND"]=new Object();__obj__1["check_external_env_default"]=true;__obj__1["*namespace*"]="core";__obj__1["pending_ns_loads"]=new Object();__obj__1["pend_load"]=async function(from_namespace,target_namespace,symbol,initializer) {
                        if (check_true ((null==pending_ns_loads[from_namespace]))){
                            {
                                await async function(){
                                    pending_ns_loads[from_namespace]=[];
                                    return pending_ns_loads;
                                    
                                }()
                            }
                        };
                        (pending_ns_loads[from_namespace]).push({
                            symbol:symbol,source_ns:from_namespace,target_ns:target_namespace,initializer:await (async function(){
                                 return ["=:quote",initializer] 
                            })()
                        });
                        return initializer
                    };__obj__1["load_pends"]=async function(from_namespace) {
                        if (check_true (pending_ns_loads[from_namespace])){
                            {
                                let acc=[];
                                ;
                                acc=await (async function() {
                                    let __for_body__207=async function(load_instruction) {
                                        return ["=:use_symbols",load_instruction.source_ns,[load_instruction.symbol],load_instruction.target_ns]
                                    };
                                    let __array__208=[],__elements__206=pending_ns_loads[from_namespace];
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__205 in __elements__206) {
                                        __array__208.push(await __for_body__207(__elements__206[__iter__205]));
                                        if(__BREAK__FLAG__) {
                                             __array__208.pop();
                                            break;
                                            
                                        }
                                    }return __array__208;
                                     
                                })();
                                await console.log("load_pends: ",from_namespace,"->",acc);
                                (await Environment.eval(await async function(){
                                    return acc
                                }(),null));
                                return true
                            }
                        }
                    };__obj__1["symbols"]=async function(opts) {
                        return await async function(){
                            if (check_true ((null==opts))) {
                                return await keys(Environment.global_ctx.scope)
                            } else if (check_true (opts.unique)) {
                                {
                                    let no_includes=await make_set(await conj(["meta_for_symbol","describe","undefine","*namespace*","pend_load","symbols","set_global","get_global","symbol_definition","compile","env_log","evaluate_local","evaluate","eval_struct","set_compiler","clone","eval","add_escape_encoding","get_outside_global","as_lisp","lisp_writer","clone_to_new","save_env","null","compiler"],built_ins));
                                    ;
                                    {
                                        let __collector;
                                        let __result;
                                        let __action;
                                        __collector=[];
                                        __result=null;
                                        __action=async function(sym) {
                                            if (check_true (await no_includes["has"].call(no_includes,sym))){
                                                return null
                                            } else {
                                                return sym
                                            }
                                        };
                                        ;
                                        await (async function() {
                                            let __for_body__213=async function(__item) {
                                                __result=await __action(__item);
                                                if (check_true (__result)){
                                                    return (__collector).push(__result)
                                                }
                                            };
                                            let __array__214=[],__elements__212=await keys(Environment.global_ctx.scope);
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__211 in __elements__212) {
                                                __array__214.push(await __for_body__213(__elements__212[__iter__211]));
                                                if(__BREAK__FLAG__) {
                                                     __array__214.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__214;
                                             
                                        })();
                                        return __collector
                                    }
                                }
                            }
                        } ()
                    };__obj__1["set_global"]=function(refname,value,meta,is_constant,target_namespace,contained_req) {
                          (function(){
                            if (check_true ( not((typeof refname==="string")))) {
                                throw new TypeError("reference name must be a string type");
                                
                            } else if (check_true (((Environment===value)|| (Environment.global_ctx===value)|| (Environment.global_ctx.scope===value)))) {
                                {
                                    throw new EvalError("cannot set the environment scope as a global value");
                                    
                                }
                            }
                        } )();
                        if (check_true ( resolve_path( ( function(){
                            let __array_op_rval__217=refname;
                             if (__array_op_rval__217 instanceof Function){
                                return  __array_op_rval__217("constant") 
                            } else {
                                return [__array_op_rval__217,"constant"]
                            }
                        })(),Environment.definitions))){
                            {
                                throw new TypeError(("Assignment to constant variable "+ refname));
                                
                            }
                        };
                        let namespace_identity= ( function(){
                            if (check_true (target_namespace)){
                                return  ( function(){
                                    let __array_op_rval__218=target_namespace;
                                     if (__array_op_rval__218 instanceof Function){
                                        return  __array_op_rval__218(refname) 
                                    } else {
                                        return [__array_op_rval__218,refname]
                                    }
                                })()
                            } else {
                                return (refname).split("/")
                            }
                        })();
                        ;
                        return   (function(){
                            if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace===namespace_identity['0']))))) {
                                return  parent_environment["set_global"].call(parent_environment,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'],(contained|| contained_req))
                            } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {
                                {
                                    if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){
                                        return  ( function() {
                                            {
                                                 let __call_target__=children[namespace_identity['0']], __call_method__="set_global";
                                                return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'])
                                            } 
                                        })()
                                    } else {
                                        throw new EvalError(("namespace "+ namespace_identity['0']+ " doesn't exist"));
                                        
                                    }
                                }
                            } else {
                                try {
                                    let comps= get_object_path( ( function(){
                                        if (check_true ((1===namespace_identity.length))){
                                            return namespace_identity['0']
                                        } else {
                                            return namespace_identity['1']
                                        }
                                    })());
                                    ;
                                      (function(){
                                        Environment.global_ctx.scope[comps['0']]=value;
                                        return Environment.global_ctx.scope;
                                        
                                    })();
                                    if (check_true (((meta instanceof Object)&&  not((meta instanceof Array))))){
                                        {
                                            if (check_true (is_constant)){
                                                {
                                                      (function(){
                                                        meta["constant"]=true;
                                                        return meta;
                                                        
                                                    })()
                                                }
                                            };
                                              (function(){
                                                Environment.definitions[comps['0']]=meta;
                                                return Environment.definitions;
                                                
                                            })()
                                        }
                                    } else {
                                        if (check_true (is_constant)){
                                            {
                                                  (function(){
                                                    Environment.definitions[comps['0']]={
                                                        constant:true
                                                    };
                                                    return Environment.definitions;
                                                    
                                                })()
                                            }
                                        }
                                    };
                                    return Environment.global_ctx.scope[comps['0']]
                                } catch (__exception__219) {
                                    if (__exception__219 instanceof Error) {
                                        let e=__exception__219;
                                        {
                                            {
                                                let message=("Error: set_global: "+ _star_namespace_star_+ "symbol name: "+ refname+ ": "+ e.message);
                                                ;
                                                 console.error(message,[]);
                                                  (function(){
                                                    e["message"]=message;
                                                    return e;
                                                    
                                                })();
                                                throw e;
                                                
                                            }
                                        }
                                    }
                                }
                            }
                        } )()
                    };__obj__1["get_global"]=function(refname,value_if_not_found,suppress_check_external_env,target_namespace,path_comps,contained_req) {
                        return   (function(){
                            if (check_true ( not((typeof refname==="string")))) {
                                throw new TypeError("reference name must be a string type");
                                
                            } else if (check_true ((refname==="Environment"))) {
                                return Environment
                            } else if (check_true ( compiler_operators["has"].call(compiler_operators,refname))) {
                                return special_identity
                            } else {
                                {
                                    let namespace_identity;
                                    let comps;
                                    let refval;
                                    let symbol_name;
                                    let check_external_env;
                                    namespace_identity= ( function(){
                                        if (check_true (target_namespace)){
                                            return  ( function(){
                                                let __array_op_rval__227=target_namespace;
                                                 if (__array_op_rval__227 instanceof Function){
                                                    return  __array_op_rval__227(refname) 
                                                } else {
                                                    return [__array_op_rval__227,refname]
                                                }
                                            })()
                                        } else {
                                            return (refname).split("/")
                                        }
                                    })();
                                    comps=(path_comps||  get_object_path( ( function(){
                                        if (check_true ((1===namespace_identity.length))){
                                            return namespace_identity['0']
                                        } else {
                                            return namespace_identity['1']
                                        }
                                    })()));
                                    refval=null;
                                    symbol_name=null;
                                    check_external_env= ( function(){
                                        if (check_true (suppress_check_external_env)){
                                            return false
                                        } else {
                                            return check_external_env_default
                                        }
                                    })();
                                    return   (function(){
                                        if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {
                                            return  parent_environment["get_global"].call(parent_environment,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps,(contained|| contained_req))
                                        } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {
                                            {
                                                if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){
                                                    return  ( function() {
                                                        {
                                                             let __call_target__=children[namespace_identity['0']], __call_method__="get_global";
                                                            return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps)
                                                        } 
                                                    })()
                                                } else {
                                                    {
                                                        throw new EvalError(("namespace "+ namespace_identity['0']+ " doesn't exist"));
                                                        
                                                    }
                                                }
                                            }
                                        } else {
                                            {
                                                refval=Environment.global_ctx.scope[comps['0']];
                                                if (check_true (((undefined===refval)&& (namespace_identity.length===1)&& parent_environment))){
                                                    {
                                                        let rval= parent_environment["get_global"].call(parent_environment,refname,value_if_not_found,suppress_check_external_env,null,comps,(contained|| contained_req));
                                                        ;
                                                        return rval
                                                    }
                                                } else {
                                                    {
                                                        if (check_true (((undefined===refval)&& check_external_env))){
                                                            refval= ( function(){
                                                                if (check_true (check_external_env)){
                                                                    return ( get_outside_global(comps['0'])|| NOT_FOUND)
                                                                } else {
                                                                    return NOT_FOUND
                                                                }
                                                            })()
                                                        };
                                                        return   (function(){
                                                            if (check_true (((NOT_FOUND===refval)&&  not((undefined===value_if_not_found))))) {
                                                                return value_if_not_found
                                                            } else if (check_true ((NOT_FOUND===refval))) {
                                                                {
                                                                    throw new ReferenceError(("symbol not found: "+  ( function(){
                                                                        if (check_true ((namespace_identity.length>1))){
                                                                            return  add(namespace,"/",namespace_identity['1'])
                                                                        } else {
                                                                            return  add(namespace,"/",namespace_identity['0'])
                                                                        }
                                                                    })()));
                                                                    
                                                                }
                                                            } else if (check_true ((comps.length===1))) {
                                                                return refval
                                                            } else if (check_true ((comps.length>1))) {
                                                                {
                                                                    return  resolve_path( rest(comps),refval)
                                                                }
                                                            } else {
                                                                {
                                                                     console.warn("get_global: condition fall through: ",comps);
                                                                    return NOT_FOUND
                                                                }
                                                            }
                                                        } )()
                                                    }
                                                }
                                            }
                                        }
                                    } )()
                                }
                            }
                        } )()
                    };__obj__1["symbol_definition"]=async function(symname,target_namespace) {
                        let namespace_identity;
                        namespace_identity=await (async function(){
                            if (check_true (target_namespace)){
                                return await (async function(){
                                    let __array_op_rval__230=target_namespace;
                                     if (__array_op_rval__230 instanceof Function){
                                        return await __array_op_rval__230(symname) 
                                    } else {
                                        return [__array_op_rval__230,symname]
                                    }
                                })()
                            } else {
                                if (check_true ((await length(symname)>2))){
                                    return (symname).split("/")
                                } else {
                                    return await (async function(){
                                        let __array_op_rval__231=symname;
                                         if (__array_op_rval__231 instanceof Function){
                                            return await __array_op_rval__231() 
                                        } else {
                                            return [__array_op_rval__231]
                                        }
                                    })()
                                }
                            }
                        })();
                        return await async function(){
                            if (check_true ((namespace_identity.length===1))) {
                                {
                                    let it;
                                    it=Environment.definitions[symname];
                                    if (check_true (it)){
                                        return it
                                    } else {
                                        if (check_true (parent_environment)){
                                            return await parent_environment["symbol_definition"].call(parent_environment,symname)
                                        }
                                    }
                                }
                            } else if (check_true ((namespace_identity['0']===namespace))) {
                                return Environment.definitions[symname]
                            } else if (check_true (parent_environment)) {
                                return await parent_environment["symbol_definition"].call(parent_environment,namespace_identity['1'],namespace_identity['0'])
                            } else if (check_true ((namespace_identity.length===2))) {
                                return await (async function() {
                                    {
                                         let __call_target__=children[namespace_identity['0']], __call_method__="symbol_definition";
                                        return await __call_target__[__call_method__].call(__call_target__,namespace_identity['1'])
                                    } 
                                })()
                            } else {
                                return undefined
                            }
                        } ()
                    };__obj__1["compile"]=async function(json_expression,opts) {
                        let out;
                        opts=await add({
                            env:Environment
                        },opts,{
                            meta:await (async function(){
                                if (check_true ((opts&& opts.meta))){
                                    return true
                                } else {
                                    return false
                                }
                            })()
                        });
                        out=null;
                        out=await (async function(){
                             return await compiler(json_expression,opts) 
                        })();
                        return await async function(){
                            if (check_true (((out instanceof Array)&& out['0'].ctype&& (out['0'].ctype==="FAIL")))) {
                                return out
                            } else if (check_true (opts.meta)) {
                                return out
                            } else {
                                return out['1']
                            }
                        } ()
                    };__obj__1["env_log"]=async function(...args) {
                            return await (async function(){
                                let __target_arg__189=[].concat(await conj(await (async function(){
                                    let __array_op_rval__190=style;
                                     if (__array_op_rval__190 instanceof Function){
                                        return await __array_op_rval__190() 
                                    } else {
                                        return [__array_op_rval__190]
                                    }
                                })(),args));
                                if(!__target_arg__189 instanceof Array){
                                    throw new TypeError("Invalid final argument to apply - an array is required")
                                }let __pre_arg__191=("%c"+ await (async function(){
                                    if (check_true (opts.prefix)){
                                        return opts.prefix
                                    } else {
                                        return (args).shift()
                                    }
                                })());
                                __target_arg__189.unshift(__pre_arg__191);
                                return (console.log).apply(this,__target_arg__189)
                            })()
                        };__obj__1["evaluate_local"]=async function(expression,ctx,opts) {
                        let compiled;
                        let error_data;
                        let requires;
                        let precompiled_assembly;
                        let result;
                        opts=(opts|| new Object());
                        compiled=null;
                        error_data=null;
                        requires=null;
                        precompiled_assembly=null;
                        result=null;
                        if (check_true (opts.compiled_source)){
                            compiled=expression
                        } else {
                            try {
                                compiled=await (async function(){
                                     return await compiler(await (async function(){
                                        if (check_true (opts.json_in)){
                                            return expression
                                        } else {
                                            return await Environment["read_lisp"].call(Environment,expression,{
                                                source_name:opts.source_name
                                            })
                                        }
                                    })(),{
                                        env:Environment,ctx:ctx,throttle:opts.throttle,formatted_output:true,source_name:opts.source_name,throw_on_error:opts.throw_on_error,on_final_token_assembly:async function(val) {
                                            return precompiled_assembly=val
                                        },error_report:(opts.error_report|| null),quiet_mode:(opts.quiet_mode|| false)
                                    }) 
                                })()
                            } catch (__exception__238) {
                                if (__exception__238 instanceof Error) {
                                    let e=__exception__238;
                                    {
                                        {
                                            if (check_true (opts.throw_on_error)){
                                                {
                                                    throw e;
                                                    
                                                }
                                            };
                                            if (check_true ((e instanceof LispSyntaxError))){
                                                {
                                                    await async function(){
                                                        e["message"]=await JSON.parse(e.message);
                                                        return e;
                                                        
                                                    }()
                                                }
                                            };
                                            await async function(){
                                                if (check_true ((e instanceof LispSyntaxError))) {
                                                    return error_data=await add({
                                                        error:"LispSyntaxError"
                                                    },e.message)
                                                } else {
                                                    error_data={
                                                        error:await sub_type(e),message:e.message,stack:e.stack,form:await (async function(){
                                                             return await async function(){
                                                                if (check_true (((expression instanceof String || typeof expression==='string')&& (expression.length>100)))) {
                                                                    return await add(await expression["substr"].call(expression,0,100),"...")
                                                                } else {
                                                                    return await (await get_global("as_lisp"))(expression)
                                                                }
                                                            } () 
                                                        })(),parent_forms:[],source_name:opts.source_name,invalid:true
                                                    }
                                                }
                                            } ();
                                            if (check_true (opts.error_report)){
                                                await (async function(){
                                                    let __array_op_rval__240=opts.error_report;
                                                     if (__array_op_rval__240 instanceof Function){
                                                        return await __array_op_rval__240(error_data) 
                                                    } else {
                                                        return [__array_op_rval__240,error_data]
                                                    }
                                                })()
                                            } else {
                                                await console.error("Compilation Error: ",error_data)
                                            };
                                            compiled=await (async function(){
                                                 return [{
                                                    error:true
                                                },null] 
                                            })()
                                        }
                                    }
                                }
                            }
                        };
                        return await async function(){
                            if (check_true ((null==compiled))) {
                                return null
                            } else if (check_true ((compiled['0'].ctype==="FAIL"))) {
                                {
                                    if (check_true (opts.error_report)){
                                        {
                                            await (async function(){
                                                let __array_op_rval__241=opts.error_report;
                                                 if (__array_op_rval__241 instanceof Function){
                                                    return await __array_op_rval__241(compiled['1']) 
                                                } else {
                                                    return [__array_op_rval__241,compiled['1']]
                                                }
                                            })()
                                        }
                                    };
                                    return await async function(){
                                        if (check_true ((compiled['1'] instanceof Error))) {
                                            throw compiled['1'];
                                            
                                        } else if (check_true ((compiled['1']['0'] instanceof Error))) {
                                            throw compiled['1']['0'];
                                            
                                        } else if (check_true (((compiled['1']['0'] instanceof Object)&& (compiled['1']['0'].error==="SyntaxError")))) {
                                            {
                                                let new_error=new SyntaxError(compiled['1']['0'].message);
                                                ;
                                                await async function(){
                                                    new_error["from"]=compiled['1']['0'];
                                                    return new_error;
                                                    
                                                }();
                                                throw new_error;
                                                
                                            }
                                        } else {
                                            return compiled['1']
                                        }
                                    } ()
                                }
                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))&& parent_environment))) {
                                return await parent_environment["evaluate_local"].call(parent_environment,compiled,ctx,await add(new Object(),opts,{
                                    compiled_source:true
                                }))
                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))))) {
                                if (check_true (children[compiled['0'].namespace])){
                                    return await (async function() {
                                        {
                                             let __call_target__=children[compiled['0'].namespace], __call_method__="evaluate_local";
                                            return await __call_target__[__call_method__].call(__call_target__,compiled,ctx,await add(new Object(),opts,{
                                                compiled_source:true
                                            }))
                                        } 
                                    })()
                                } else {
                                    throw new EvalError(("unknown namespace "+ compiled['0'].namespace+ " assignment"));
                                    
                                }
                            } else {
                                {
                                    if (check_true (opts.on_compilation_complete)){
                                        await (async function(){
                                            let __array_op_rval__243=opts.on_compilation_complete;
                                             if (__array_op_rval__243 instanceof Function){
                                                return await __array_op_rval__243(compiled) 
                                            } else {
                                                return [__array_op_rval__243,compiled]
                                            }
                                        })()
                                    };
                                    try {
                                        if (check_true (((compiled instanceof Array)&& (compiled['0'] instanceof Object)&& compiled['0'].ctype&& await not((compiled['0'].ctype instanceof String || typeof compiled['0'].ctype==='string'))))){
                                            {
                                                await async function(){
                                                    compiled['0']["ctype"]=await subtype(compiled['0'].ctype);
                                                    return compiled['0'];
                                                    
                                                }()
                                            }
                                        };
                                        result=await (async function(){
                                             return await async function(){
                                                if (check_true (compiled.error)) {
                                                    throw new Error((await get_global("indirect_new"))(compiled.error,compiled.message));
                                                    
                                                } else if (check_true ((compiled['0'].ctype&& (await contains_ques_("block",compiled['0'].ctype)|| (compiled['0'].ctype==="assignment")|| (compiled['0'].ctype==="__!NOT_FOUND!__"))))) {
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__246=compiled['0'].has_lisp_globals;
                                                         if (__array_op_rval__246 instanceof Function){
                                                            return await __array_op_rval__246() 
                                                        } else {
                                                            return [__array_op_rval__246]
                                                        }
                                                    })())){
                                                        {
                                                            await async function(){
                                                                compiled[1]=new AsyncFunction("Environment",("{ "+ compiled['1']+ "}"));
                                                                return compiled;
                                                                
                                                            }();
                                                            return await (async function(){
                                                                let __array_op_rval__248=compiled['1'];
                                                                 if (__array_op_rval__248 instanceof Function){
                                                                    return await __array_op_rval__248(Environment) 
                                                                } else {
                                                                    return [__array_op_rval__248,Environment]
                                                                }
                                                            })()
                                                        }
                                                    } else {
                                                        {
                                                            await async function(){
                                                                compiled[1]=new AsyncFunction(("{"+ compiled['1']+ "}"));
                                                                return compiled;
                                                                
                                                            }();
                                                            return await (async function(){
                                                                let __array_op_rval__250=compiled['1'];
                                                                 if (__array_op_rval__250 instanceof Function){
                                                                    return await __array_op_rval__250() 
                                                                } else {
                                                                    return [__array_op_rval__250]
                                                                }
                                                            })()
                                                        }
                                                    }
                                                } else if (check_true ((compiled['0'].ctype&& (("AsyncFunction"===compiled['0'].ctype)|| ("statement"===compiled['0'].ctype)|| ("objliteral"===compiled['0'].ctype))))) {
                                                    {
                                                        if (check_true (await (async function(){
                                                            let __array_op_rval__251=compiled['0'].has_lisp_globals;
                                                             if (__array_op_rval__251 instanceof Function){
                                                                return await __array_op_rval__251() 
                                                            } else {
                                                                return [__array_op_rval__251]
                                                            }
                                                        })())){
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new AsyncFunction("Environment",("{ return "+ compiled['1']+ "} "));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__253=compiled['1'];
                                                                     if (__array_op_rval__253 instanceof Function){
                                                                        return await __array_op_rval__253(Environment) 
                                                                    } else {
                                                                        return [__array_op_rval__253,Environment]
                                                                    }
                                                                })()
                                                            }
                                                        } else {
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new AsyncFunction(("{ return "+ compiled['1']+ "}"));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__255=compiled['1'];
                                                                     if (__array_op_rval__255 instanceof Function){
                                                                        return await __array_op_rval__255() 
                                                                    } else {
                                                                        return [__array_op_rval__255]
                                                                    }
                                                                })()
                                                            }
                                                        }
                                                    }
                                                } else if (check_true ((compiled['0'].ctype&& ("Function"===compiled['0'].ctype)))) {
                                                    {
                                                        if (check_true (await (async function(){
                                                            let __array_op_rval__256=compiled['0'].has_lisp_globals;
                                                             if (__array_op_rval__256 instanceof Function){
                                                                return await __array_op_rval__256() 
                                                            } else {
                                                                return [__array_op_rval__256]
                                                            }
                                                        })())){
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new Function("Environment",("{ return "+ compiled['1']+ "} "));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__258=compiled['1'];
                                                                     if (__array_op_rval__258 instanceof Function){
                                                                        return await __array_op_rval__258(Environment) 
                                                                    } else {
                                                                        return [__array_op_rval__258,Environment]
                                                                    }
                                                                })()
                                                            }
                                                        } else {
                                                            {
                                                                await async function(){
                                                                    compiled[1]=new Function(("{ return "+ compiled['1']+ "}"));
                                                                    return compiled;
                                                                    
                                                                }();
                                                                return await (async function(){
                                                                    let __array_op_rval__260=compiled['1'];
                                                                     if (__array_op_rval__260 instanceof Function){
                                                                        return await __array_op_rval__260() 
                                                                    } else {
                                                                        return [__array_op_rval__260]
                                                                    }
                                                                })()
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    return compiled['1']
                                                }
                                            } () 
                                        })()
                                    } catch (__exception__244) {
                                        if (__exception__244 instanceof Error) {
                                            let e=__exception__244;
                                            {
                                                {
                                                    if (check_true (true)){
                                                        {
                                                            let details={
                                                                error:e.name,message:e.message,expanded_source:await (await get_global("pretty_print"))(await (async function(){
                                                                     return await (await get_global("detokenize"))(precompiled_assembly) 
                                                                })()),compiled:compiled['1']
                                                            };
                                                            ;
                                                            console.log("Syntax Error: ",details);
                                                            await async function(){
                                                                e["details"]=details;
                                                                return e;
                                                                
                                                            }()
                                                        }
                                                    };
                                                    if (check_true ((opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4)))){
                                                        {
                                                            if (check_true (e.details)){
                                                                await env_log("caught error: ",e.details)
                                                            } else {
                                                                await env_log("caught error: ",e.name,e.message,e)
                                                            }
                                                        }
                                                    };
                                                    if (check_true ((false&& (await sub_type(e)==="SyntaxError")&& (opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4))))){
                                                        await console.log(compiled['1'])
                                                    };
                                                    if (check_true (opts.error_report)){
                                                        {
                                                            await (async function(){
                                                                let __array_op_rval__262=opts.error_report;
                                                                 if (__array_op_rval__262 instanceof Function){
                                                                    return await __array_op_rval__262(await (async function(){
                                                                        if (check_true (e.details)){
                                                                            return e.details
                                                                        } else {
                                                                            return {
                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack
                                                                            }
                                                                        }
                                                                    })()) 
                                                                } else {
                                                                    return [__array_op_rval__262,await (async function(){
                                                                        if (check_true (e.details)){
                                                                            return e.details
                                                                        } else {
                                                                            return {
                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack
                                                                            }
                                                                        }
                                                                    })()]
                                                                }
                                                            })()
                                                        }
                                                    };
                                                    result=e;
                                                    if (check_true ((await not(opts.catch_errors)|| (ctx&& ctx.in_try)))){
                                                        {
                                                            throw result;
                                                            
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    };
                                    return result
                                }
                            }
                        } ()
                    };__obj__1["evaluate"]=async function(expression,ctx,opts) {
                        return await async function(){
                            if (check_true ((namespace===active_namespace))) {
                                return await evaluate_local(expression,ctx,opts)
                            } else if (check_true ((namespace==="core"))) {
                                return await (async function() {
                                    {
                                         let __call_target__=children[active_namespace], __call_method__="evaluate";
                                        return await __call_target__[__call_method__].call(__call_target__,expression,ctx,opts)
                                    } 
                                })()
                            }
                        } ()
                    };__obj__1["eval_struct"]=async function(lisp_struct,ctx,opts) {
                        let rval;
                        rval=null;
                        if (check_true (lisp_struct instanceof Function)){
                            rval=await (async function(){
                                let __array_op_rval__267=lisp_struct;
                                 if (__array_op_rval__267 instanceof Function){
                                    return await __array_op_rval__267() 
                                } else {
                                    return [__array_op_rval__267]
                                }
                            })()
                        } else {
                            rval=await (async function(){
                                 return await evaluate(lisp_struct,ctx,await add({
                                    json_in:true
                                },(opts|| new Object()))) 
                            })()
                        };
                        return rval
                    };__obj__1["built_ins"]=["MAX_SAFE_INTEGER","LispSyntaxError","sub_type","__VERBOSITY__","int","float","values","pairs","keys","take","prepend","first","last","length","conj","reverse","map","bind","to_object","to_array","slice","rest","second","third","chop","chomp","not","push","pop","list","flatten","jslambda","join","lowercase","uppercase","log","split","split_by","is_object?","is_array?","is_number?","is_function?","is_set?","is_element?","is_string?","is_nil?","is_regex?","is_date?","ends_with?","starts_with?","blank?","contains?","make_set","eval_exp","indirect_new","get_import_entry","range","add","merge_objects","index_of","resolve_path","delete_prop","load_pends","min_value","max_value","interlace","trim","assert","unquotify","or_args","pending_ns_loads","special_operators","defclog","NOT_FOUND","check_external_env_default","built_ins","reader"];__obj__1["set_compiler"]=async function(compiler_function) {
    await Environment["set_compiler"].call(Environment,compiler_function);
    return compiler_function
};__obj__1["clone"]=async function(val) {
                            if (check_true ((val===Environment))){
                                return Environment
                            } else {
                                return await clone(val,0,Environment)
                            }
                        };__obj__1["*env_config*"]={export:{save_path:"js/juno.js",default_namespace:"user",include_source:false,save_executable:"bin/juno"},features:["compiler","repl","core-ext","io","Deno","build-tools","system","http_client"],build:"2023.04.19.16.15",imports:await ( async function(){let __obj__2=new Object();__obj__2["core/readline_mod"]={symbol:"readline_mod",namespace:"core",location:"https://deno.land/x/readline/mod.ts"};__obj__2["core/streams"]={symbol:"streams",namespace:"core",location:"https://deno.land/std@0.170.0/streams/conversion.ts"};__obj__2["core/path"]={symbol:"path",namespace:"core",location:"https://deno.land/std@0.110.0/path/mod.ts"};return __obj__2;})(),repl:new Object(),editor:{default_theme:"juno_light",font_size:14,themes:["chrome","cobalt","crimson_editor","dracula","earth_tones","gruvbox","ice","idle_fingers","juno_light","katzenmilch","kuroir","solarized_dark","solarized_light"]},application:{menu_timeout:2500,global_theme:"juno_light",max_log_lines:100,name:"Seedling",quick_alerts:{display:true,default_display_time:750},on_ready:"seedling_ready"}};__obj__1["create_namespace"]=async function(name,options,defer_initialization) {
                                return await async function(){
                                    if (check_true (await not((name instanceof String || typeof name==='string')))) {
                                        throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true (children[name])) {
                                        throw new EvalError("namespace already exists");
                                        
                                    } else {
                                        {
                                            let child_env;
                                            options=(options|| new Object());
                                            child_env=await (async function(){
                                                 return await dlisp_env({
                                                    parent_environment:Environment,namespace:name,contained:options.contained,defer_initialization:defer_initialization
                                                }) 
                                            })();
                                            if (check_true (child_env.evaluate)){
                                                {
                                                    await child_env["set_compiler"].call(child_env,compiler);
                                                    await async function(){
                                                        children[name]=child_env;
                                                        return children;
                                                        
                                                    }();
                                                    await async function(){
                                                        children_declarations[name]=new Object();
                                                        return children_declarations;
                                                        
                                                    }();
                                                    await child_env["evaluate_local"].call(child_env,"(for_each (sym built_ins) (delete_prop Environment.context.scope sym))");
                                                    await child_env["evaluate_local"].call(child_env,"(for_each (sym built_ins) (delete_prop Environment.definitions sym))");
                                                    if (check_true (options.contained)){
                                                        await async function(){
                                                            let __target_obj__279=children_declarations[name];
                                                            __target_obj__279["contained"]=true;
                                                            return __target_obj__279;
                                                            
                                                        }()
                                                    };
                                                    await async function(){
                                                        let __target_obj__280=children_declarations[name];
                                                        __target_obj__280["serialize_with_image"]=await (async function(){
                                                            if (check_true ((false===options.serialize_with_image))){
                                                                return false
                                                            } else {
                                                                return true
                                                            }
                                                        })();
                                                        return __target_obj__280;
                                                        
                                                    }();
                                                    return name
                                                }
                                            } else {
                                                {
                                                    await console.error("ENV: couldn't create the child environment. Received: ",child_env);
                                                    throw new EvalError(("unable to create namespace "+ name));
                                                    
                                                }
                                            }
                                        }
                                    }
                                } ()
                            };__obj__1["set_namespace"]=async function(name) {
                                return await async function(){
                                    if (check_true (await not((name instanceof String || typeof name==='string')))) {
                                        throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true ((await not(("core"===name))&& (null==children[name])))) {
                                        throw new EvalError(("namespace "+ name+ " doesn't exist"));
                                        
                                    } else {
                                        {
                                            if (check_true ((name==="core"))){
                                                {
                                                    active_namespace="core"
                                                }
                                            } else {
                                                {
                                                    active_namespace=name
                                                }
                                            };
                                            return name
                                        }
                                    }
                                } ()
                            };__obj__1["delete_namespace"]=async function(name) {
                                return await async function(){
                                    if (check_true (await not((name instanceof String || typeof name==='string')))) {
                                        throw new TypeError("namespace name must be a string");
                                        
                                    } else if (check_true (("core"===name))) {
                                        throw new EvalError("core namespace cannot be removed");
                                        
                                    } else if (check_true ((null==children[name]))) {
                                        throw new EvalError(("namespace "+ name+ "doesn't exist"));
                                        
                                    } else if (check_true ((name===await current_namespace()))) {
                                        throw new EvalError("namespace is the current namespace");
                                        
                                    } else {
                                        {
                                            await (await get_global("remove_prop"))(children,name);
                                            await (async function() {
                                                let __for_body__283=async function(k) {
                                                    if (check_true (await starts_with_ques_(k,name))){
                                                        {
                                                            return await (await get_global("remove_prop"))(Environment.global_ctx._star_env_config_star_.imports,k)
                                                        }
                                                    }
                                                };
                                                let __array__284=[],__elements__282=(await resolve_path(["global_ctx","scope","*env_config*","imports"],Environment)|| []);
                                                let __BREAK__FLAG__=false;
                                                for(let __iter__281 in __elements__282) {
                                                    __array__284.push(await __for_body__283(__elements__282[__iter__281]));
                                                    if(__BREAK__FLAG__) {
                                                         __array__284.pop();
                                                        break;
                                                        
                                                    }
                                                }return __array__284;
                                                 
                                            })();
                                            return name
                                        }
                                    }
                                } ()
                            };__obj__1["namespaces"]=function() {
                                    return  add( keys(children),"core")
                                };__obj__1["current_namespace"]=function() {
                                return active_namespace
                            };__obj__1["eval"]=async function(expression) {
                        return await (async function(){
                            let __array_op_rval__141=expression;
                             if (__array_op_rval__141 instanceof Function){
                                return await __array_op_rval__141() 
                            } else {
                                return [__array_op_rval__141]
                            }
                        })()
                    };__obj__1["reader"]=async function(text,opts) {    return await async function(){
        if (check_true ((undefined==text))) {
            throw new EvalError(("reader: received undefined, text must be a string."));
            
        } else if (check_true (await (await Environment.get_global("not"))((text instanceof String || typeof text==='string')))) {
            throw new EvalError(("reader: received "+ await (await Environment.get_global("sub_type"))(text)+ ": text must be a string."));
            
        } else {
            {
                let output_structure;
                let idx;
                let error_collector;
                let symbol_collector;
                let throw_on_error;
                let line_number;
                let column_number;
                let source_name;
                let len;
                let debugmode;
                let in_buffer;
                let in_code;
                let in_quotes;
                let in_long_text;
                let in_comment;
                let in_single_quote;
                let reading_object;
                let mode;
                let symbol_start;
                let pause_time;
                let cpath;
                let ctx;
                let last_final_column_num;
                let symbol_receiver;
                let add_symbol;
                let local_text;
                let position;
                let read_table;
                let get_char;
                let error;
                let handle_escape_char;
                let process_word;
                let registered_stop_char;
                let handler_stack;
                let handler;
                let c;
                let next_c;
                let depth;
                let stop;
                let processing_time_marker;
                let read_block;
                output_structure=[];
                idx=-1;
                error_collector=[];
                symbol_collector=new Object();
                throw_on_error=await (await Environment.get_global("not"))((opts && opts["suppress_throw_on_error"]));
                line_number=0;
                column_number=0;
                source_name=await (async function(){
                    if (check_true ((opts && opts["source_name"]))){
                        return (opts && opts["source_name"])
                    } else {
                        return "anonymous"
                    }
                })();
                opts=(opts|| new Object());
                len=(await (await Environment.get_global("length"))(text)- 1);
                debugmode=await (async function(){
                     return await async function(){
                        if (check_true ((opts && opts["verbose"]))) {
                            return true
                        } else if (check_true (((opts && opts["verbose"])===false))) {
                            return false
                        } else if (check_true (((await Environment.get_global("__VERBOSITY__"))>6))) {
                            return true
                        } else {
                            return false
                        }
                    } () 
                })();
                in_buffer=(text).split("");
                in_code=0;
                in_quotes=1;
                in_long_text=2;
                in_comment=3;
                in_single_quote=4;
                reading_object=false;
                mode=in_code;
                symbol_start=null;
                pause_time=await (async function(){
                    if (check_true (await (await Environment.get_global("is_number?"))((opts && opts["pause_time"])))){
                        return (opts && opts["pause_time"])
                    } else {
                        return null
                    }
                })();
                cpath=[];
                ctx={
                    scope:{
                        op_chain:[]
                    },parent:null
                };
                last_final_column_num=0;
                symbol_receiver=await (async function(){
                    if (check_true ((opts && opts["symbol_receiver"]) instanceof Function)){
                        return (opts && opts["symbol_receiver"])
                    }
                })();
                add_symbol=async function(symbol,_ctx) {
                    if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("ends_with?"))(":",symbol)))){
                        {
                            {
                                let ccol;
                                let cline;
                                let real_sym;
                                ccol=await (async function(){
                                    if (check_true ((column_number===0))){
                                        return (last_final_column_num- (symbol && symbol.length))
                                    } else {
                                        return (column_number- (symbol && symbol.length))
                                    }
                                })();
                                cline=await (async function(){
                                    if (check_true ((column_number===0))){
                                        return (line_number- 1)
                                    } else {
                                        return line_number
                                    }
                                })();
                                real_sym=await (await Environment.get_global("first"))((symbol).split("."));
                                if (check_true ((null==symbol_collector[real_sym]))){
                                    return await async function(){
                                        symbol_collector[real_sym]=await (async function(){
                                             return [await (async function(){
                                                let __array_op_rval__2=cline;
                                                 if (__array_op_rval__2 instanceof Function){
                                                    return await __array_op_rval__2(ccol,await (async function(){
                                                        if (check_true (_ctx)){
                                                            return await (await Environment.get_global("getf_ctx"))(_ctx,"op_chain")
                                                        } else {
                                                            return null
                                                        }
                                                    })(),await (await Environment.get_global("but_last"))(cpath)) 
                                                } else {
                                                    return [__array_op_rval__2,ccol,await (async function(){
                                                        if (check_true (_ctx)){
                                                            return await (await Environment.get_global("getf_ctx"))(_ctx,"op_chain")
                                                        } else {
                                                            return null
                                                        }
                                                    })(),await (await Environment.get_global("but_last"))(cpath)]
                                                }
                                            })()] 
                                        })();
                                        return symbol_collector;
                                        
                                    }()
                                } else {
                                    return (symbol_collector[real_sym]).push(await (async function(){
                                        let __array_op_rval__3=cline;
                                         if (__array_op_rval__3 instanceof Function){
                                            return await __array_op_rval__3(ccol,await (async function(){
                                                if (check_true (_ctx)){
                                                    return await (await Environment.get_global("getf_ctx"))(_ctx,"op_chain")
                                                } else {
                                                    return null
                                                }
                                            })(),await (await Environment.get_global("but_last"))(cpath)) 
                                        } else {
                                            return [__array_op_rval__3,ccol,await (async function(){
                                                if (check_true (_ctx)){
                                                    return await (await Environment.get_global("getf_ctx"))(_ctx,"op_chain")
                                                } else {
                                                    return null
                                                }
                                            })(),await (await Environment.get_global("but_last"))(cpath)]
                                        }
                                    })())
                                }
                            }
                        }
                    }
                };
                local_text=async function() {
                    let start;
                    let end;
                    start=await Math.max(0,(idx- 10));
                    end=await Math.min(await (await Environment.get_global("length"))(in_buffer),(idx+ 10));
                    return (await (await Environment.get_global("slice"))(in_buffer,start,end)).join("")
                };
                position=async function(offset) {
                    return ("line: "+ line_number+ " column: "+ await (async function(){
                        if (check_true (offset)){
                            return (column_number+ offset)
                        } else {
                            return column_number
                        }
                    })())
                };
                read_table=await (await Environment.get_global("add"))(new Object(),await (async function(){
                    if (check_true ((opts && opts["read_table_entries"]))){
                        return (opts && opts["read_table_entries"])
                    } else {
                        return new Object()
                    }
                })(),await ( async function(){
                    let __obj__4=new Object();
                    __obj__4["("]=[")",async function(block,_ctx) {
                        return block
                    }];
                    __obj__4["["]=["]",async function(block,_ctx) {
                        return block
                    }];
                    __obj__4["{"]=["}",async function(block,_ctx) {
                        let obj;
                        let __idx__5= async function(){
                            return -1
                        };
                        let key_mode;
                        let need_colon;
                        let value_mode;
                        let key;
                        let value;
                        let cpos;
                        let state;
                        let block_length;
                        {
                            obj=new Object();
                            let idx=await __idx__5();
                            ;
                            key_mode=0;
                            need_colon=1;
                            value_mode=2;
                            key=null;
                            value=null;
                            cpos=null;
                            state=key_mode;
                            block_length=(await (await Environment.get_global("length"))(block)- 1);
                            reading_object=false;
                            await (async function(){
                                 let __test_condition__6=async function() {
                                    return (idx<block_length)
                                };
                                let __body_ref__7=async function() {
                                    idx+=1;
                                    key=block[idx];
                                    if (check_true (((key instanceof Array)&& ((key && key.length)===2)&& ((key && key["0"])==="=:quotem")&& ((key && key["1"]) instanceof String || typeof (key && key["1"])==='string')))){
                                        {
                                            key=(key && key["1"])
                                        }
                                    };
                                    if (check_true (((key instanceof String || typeof key==='string')&& await (await Environment.get_global("starts_with?"))("=:",key)&& (await (await Environment.get_global("length"))(key)>2)))){
                                        key=await key["substr"].call(key,2)
                                    };
                                    return await async function(){
                                        if (check_true (await (await Environment.get_global("blank?"))(key))) {
                                            return await error("missing object key",("blank or nil key: "+ block[idx]))
                                        } else if (check_true (await (await Environment.get_global("is_number?"))(key))) {
                                            {
                                                idx+=1;
                                                return await async function(){
                                                    obj[key]=block[idx];
                                                    return obj;
                                                    
                                                }()
                                            }
                                        } else if (check_true (((key instanceof String || typeof key==='string')&& await (await Environment.get_global("contains?"))(":",key)&& await (await Environment.get_global("not"))(await (await Environment.get_global("ends_with?"))(":",key))))) {
                                            {
                                                cpos=await key["indexOf"].call(key,":");
                                                value=await key["substr"].call(key,(cpos+ 1));
                                                key=await key["substr"].call(key,0,cpos);
                                                value=await process_word((value).split(""),0,_ctx);
                                                return await async function(){
                                                    obj[key]=value;
                                                    return obj;
                                                    
                                                }()
                                            }
                                        } else {
                                            {
                                                idx+=1;
                                                if (check_true (await (await Environment.get_global("ends_with?"))(":",key))){
                                                    key=await (await Environment.get_global("chop"))(key)
                                                } else {
                                                    {
                                                        if (check_true ((block[idx]===":"))){
                                                            idx+=1
                                                        } else {
                                                            await error("missing colon",("expected colon for: "+ key))
                                                        }
                                                    }
                                                };
                                                return await async function(){
                                                    obj[key]=block[idx];
                                                    return obj;
                                                    
                                                }()
                                            }
                                        }
                                    } ()
                                };
                                let __BREAK__FLAG__=false;
                                while(await __test_condition__6()) {
                                     await __body_ref__7();
                                     if(__BREAK__FLAG__) {
                                         break;
                                        
                                    }
                                } ;
                                
                            })();
                            return obj
                        }
                    },async function() {
                        return reading_object=true
                    }];
                    __obj__4["\""]=["\"",async function(block) {
                        return ["quotes",block]
                    }];
                    return __obj__4;
                    
                })());
                get_char=async function(pos) {
                    return in_buffer[pos]
                };
                error=async function(type,message,offset) {
                    if (check_true (throw_on_error)){
                        throw new LispSyntaxError({
                            message:message,position:await position(offset),pos:{
                                line:line_number,column:(column_number+ (offset|| 0))
                            },depth:depth,local_text:await local_text(),source_name:source_name,type:type
                        });
                        
                    } else {
                        if (check_true ((opts && opts["on_error"]) instanceof Function)){
                            {
                                return await (async function(){
                                    let __array_op_rval__11=(opts && opts["on_error"]);
                                     if (__array_op_rval__11 instanceof Function){
                                        return await __array_op_rval__11({
                                            message:message,position:await position(offset),pos:{
                                                line:line_number,column:(column_number+ (offset|| 0))
                                            },depth:depth,local_text:await local_text(),source_name:source_name,type:type
                                        }) 
                                    } else {
                                        return [__array_op_rval__11,{
                                            message:message,position:await position(offset),pos:{
                                                line:line_number,column:(column_number+ (offset|| 0))
                                            },depth:depth,local_text:await local_text(),source_name:source_name,type:type
                                        }]
                                    }
                                })()
                            }
                        }
                    }
                };
                handle_escape_char=async function(c) {
                    let ccode;
                    ccode=await c["charCodeAt"].call(c,0);
                    return await async function(){
                        if (check_true ((ccode===34))) {
                            return c
                        } else if (check_true ((ccode===92))) {
                            return c
                        } else if (check_true ((c==="t"))) {
                            return await String.fromCharCode(9)
                        } else if (check_true ((c==="n"))) {
                            return await String.fromCharCode(10)
                        } else if (check_true ((c==="r"))) {
                            return await String.fromCharCode(13)
                        } else if (check_true ((c==="f"))) {
                            return c
                        } else if (check_true ((c==="b"))) {
                            return c
                        } else {
                            return c
                        }
                    } ()
                };
                process_word=async function(word_acc,backtick_mode,_ctx) {
                    let word;
                    let word_as_number;
                    word=(word_acc).join("");
                    word_as_number=await Number(word);
                    if (check_true (debugmode)){
                        {
                            await console.log("process_word: ",word,word_as_number,backtick_mode)
                        }
                    };
                    return await async function(){
                        if (check_true (("true"===word))) {
                            return true
                        } else if (check_true (("false"===word))) {
                            return false
                        } else if (check_true ((":"===word))) {
                            return word
                        } else if (check_true ((",@"===word))) {
                            return "=$,@"
                        } else if (check_true (((",#"===word)|| ("##"===word)))) {
                            return "=:##"
                        } else if (check_true (("=$,@"===word))) {
                            return "=$,@"
                        } else if (check_true (("=:##"===word))) {
                            return "=:##"
                        } else if (check_true (await isNaN(word_as_number))) {
                            {
                                return await async function(){
                                    if (check_true ((word==="=:"))) {
                                        {
                                            return "=:"
                                        }
                                    } else if (check_true (((backtick_mode===0)&& await (await Environment.get_global("ends_with?"))(")",word)))) {
                                        {
                                            await error("trailing character","unexpected trailing parenthesis 2");
                                            return ""
                                        }
                                    } else if (check_true (((backtick_mode===0)&& await (await Environment.get_global("ends_with?"))("]",word)))) {
                                        {
                                            await error("trailing character","unexpected trailing bracket 2");
                                            return ""
                                        }
                                    } else if (check_true (await (await Environment.get_global("contains?"))(word,await (async function(){
                                         return ["=:(",await (async function(){
                                             return "=:)" 
                                        })(),await (async function(){
                                             return "=:'" 
                                        })()] 
                                    })()))) {
                                        {
                                            return word
                                        }
                                    } else if (check_true ((backtick_mode===1))) {
                                        return word
                                    } else {
                                        {
                                            if (check_true (symbol_receiver)){
                                                {
                                                    await add_symbol(word,_ctx)
                                                }
                                            };
                                            return await (await Environment.get_global("add"))(await (async function(){
                                                 return "=:" 
                                            })(),word)
                                        }
                                    }
                                } ()
                            }
                        } else if (check_true (await (await Environment.get_global("is_number?"))(word_as_number))) {
                            return word_as_number
                        } else {
                            {
                                console.log("reader: ",await position()," what is this?",word,word_acc,await local_text());
                                return word
                            }
                        }
                    } ()
                };
                registered_stop_char=null;
                handler_stack=[];
                handler=null;
                c=null;
                next_c=null;
                depth=0;
                stop=false;
                processing_time_marker=await Date.now();
                read_block=async function(_depth,_ctx) {
                    let acc;
                    let word_acc;
                    let operator;
                    let old_ctx;
                    let backtick_mode;
                    let escape_mode;
                    let last_c;
                    let block_return;
                    acc=[];
                    word_acc=[];
                    operator=null;
                    old_ctx=null;
                    backtick_mode=0;
                    escape_mode=0;
                    last_c=null;
                    _ctx=_ctx;
                    block_return=null;
                    depth=_depth;
                    if (check_true (pause_time)){
                        if (check_true (((await Date.now()- processing_time_marker)>50))){
                            {
                                await (await Environment.get_global("sleep"))(pause_time);
                                processing_time_marker=await Date.now()
                            }
                        }
                    };
                    await (async function(){
                         let __test_condition__12=async function() {
                            return (await (await Environment.get_global("not"))(stop)&& (idx<len))
                        };
                        let __body_ref__13=async function() {
                            idx+=1;
                            escape_mode=await Math.max(0,(escape_mode- 1));
                            c=await get_char(idx);
                            next_c=await get_char((idx+ 1));
                            if (check_true ((c==="\n"))){
                                {
                                    line_number+=1;
                                    last_final_column_num=column_number;
                                    column_number=0
                                }
                            };
                            if (check_true (debugmode)){
                                {
                                    await console.log(_depth,"  ",c," ",next_c," ",mode,"",escape_mode," ",await (await Environment.get_global("as_lisp"))(acc),await (await Environment.get_global("as_lisp"))(word_acc),(acc && acc.length),(cpath).join("."))
                                }
                            };
                            await async function(){
                                if (check_true (((next_c===undefined)&& await (await Environment.get_global("not"))((await (async function(){
                                    let __targ__14=await (await Environment.get_global("last"))(handler_stack);
                                    if (__targ__14){
                                         return(__targ__14)[0]
                                    } 
                                })()===undefined))&& (await (await Environment.get_global("not"))((c===await (async function(){
                                    let __targ__15=await (await Environment.get_global("last"))(handler_stack);
                                    if (__targ__15){
                                         return(__targ__15)[0]
                                    } 
                                })()))|| ((handler_stack && handler_stack.length)>1))))) {
                                    return await error("premature end",("premature end: expected: "+ await (async function(){
                                        let __targ__16=await (await Environment.get_global("last"))(handler_stack);
                                        if (__targ__16){
                                             return(__targ__16)[0]
                                        } 
                                    })()))
                                } else if (check_true (((next_c===undefined)&& (mode===in_quotes)&& await (await Environment.get_global("not"))((await c["charCodeAt"]()===34))))) {
                                    await error("premature end","premature end: expected: \"")
                                } else if (check_true (((next_c===undefined)&& (mode===in_long_text)&& await (await Environment.get_global("not"))((c==="|"))))) {
                                    await error("premature end","premature end: expected: |")
                                } else if (check_true (((mode===in_code)&& (_depth===1)&& (next_c===")")&& (c===")")))) {
                                    {
                                        await error("trailing character","unexpected trailing parenthesis")
                                    }
                                }
                            } ();
                            await async function(){
                                if (check_true (((c==="\n")&& (mode===in_comment)))) {
                                    {
                                        mode=in_code;
                                        return __BREAK__FLAG__=true;
                                        return
                                    }
                                } else if (check_true (((92===await c["charCodeAt"].call(c,0))&& (mode===in_long_text)))) {
                                    {
                                        (word_acc).push(c);
                                        (word_acc).push(c)
                                    }
                                } else if (check_true (((mode>0)&& (escape_mode===1)&& (92===await c["charCodeAt"].call(c,0))))) {
                                    {
                                        (word_acc).push(c)
                                    }
                                } else if (check_true (((mode>0)&& (92===await c["charCodeAt"].call(c,0))))) {
                                    {
                                        escape_mode=2
                                    }
                                } else if (check_true (((mode>0)&& (escape_mode===1)))) {
                                    {
                                        (word_acc).push(await handle_escape_char(c))
                                    }
                                } else if (check_true (((mode===in_long_text)&& (escape_mode===0)&& (c==="|")))) {
                                    {
                                        acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                        word_acc=[];
                                        mode=in_code;
                                        __BREAK__FLAG__=true;
                                        return
                                    }
                                } else if (check_true (((mode===in_quotes)&& (escape_mode===0)&& (c==="\"")))) {
                                    {
                                        acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                        word_acc=[];
                                        mode=in_code;
                                        __BREAK__FLAG__=true;
                                        return
                                    }
                                } else if (check_true (((mode===in_single_quote)&& (escape_mode===0)&& (c==="'")))) {
                                    {
                                        acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                        word_acc=[];
                                        mode=in_code;
                                        __BREAK__FLAG__=true;
                                        return
                                    }
                                } else if (check_true (((c==="|")&& (mode===in_code)))) {
                                    {
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,null,_ctx));
                                                word_acc=[]
                                            }
                                        };
                                        mode=in_long_text;
                                        block_return=await read_block(await (await Environment.get_global("add"))(_depth,1),_ctx);
                                        if (check_true ((backtick_mode===1))){
                                            {
                                                block_return=await (async function(){
                                                     return ["=:quotem",block_return] 
                                                })();
                                                backtick_mode=0
                                            }
                                        };
                                        (acc).push(block_return)
                                    }
                                } else if (check_true (((c==="\"")&& (escape_mode===0)&& (mode===in_code)))) {
                                    {
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,null,_ctx));
                                                word_acc=[]
                                            }
                                        };
                                        mode=in_quotes;
                                        block_return=await read_block(await (await Environment.get_global("add"))(_depth,1),_ctx);
                                        if (check_true ((backtick_mode===1))){
                                            {
                                                backtick_mode=0
                                            }
                                        };
                                        (acc).push(block_return)
                                    }
                                } else if (check_true (((c==="'")&& (escape_mode===0)&& (mode===in_code)))) {
                                    {
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,null,_ctx));
                                                word_acc=[]
                                            }
                                        };
                                        mode=in_single_quote;
                                        block_return=await read_block(await (await Environment.get_global("add"))(_depth,1),_ctx);
                                        if (check_true ((backtick_mode===1))){
                                            {
                                                backtick_mode=0
                                            }
                                        };
                                        (acc).push(block_return)
                                    }
                                } else if (check_true ((mode===in_comment))) {
                                    false
                                } else if (check_true (((c===";")&& (mode===in_code)))) {
                                    {
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,null,_ctx));
                                                word_acc=[]
                                            }
                                        };
                                        mode=in_comment;
                                        await read_block(await (await Environment.get_global("add"))(_depth,1),_ctx)
                                    }
                                } else if (check_true (((mode===in_code)&& (await (await Environment.get_global("length"))(handler_stack)>0)&& (c===await (async function(){
                                    let __targ__17=await (await Environment.get_global("last"))(handler_stack);
                                    if (__targ__17){
                                         return(__targ__17)[0]
                                    } 
                                })())))) {
                                    {
                                        __BREAK__FLAG__=true;
                                        return
                                    }
                                } else if (check_true (((mode===in_code)&& read_table[c]&& await (await Environment.get_global("first"))(read_table[c])))) {
                                    {
                                        if (check_true (await (async function(){
                                            let __targ__18=read_table[c];
                                            if (__targ__18){
                                                 return(__targ__18)[2]
                                            } 
                                        })())){
                                            {
                                                handler=await (async function(){
                                                    let __targ__19=read_table[c];
                                                    if (__targ__19){
                                                         return(__targ__19)[2]
                                                    } 
                                                })();
                                                await (async function(){
                                                    let __array_op_rval__20=handler;
                                                     if (__array_op_rval__20 instanceof Function){
                                                        return await __array_op_rval__20() 
                                                    } else {
                                                        return [__array_op_rval__20]
                                                    }
                                                })();
                                                handler=null
                                            }
                                        };
                                        (handler_stack).push(read_table[c]);
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,backtick_mode,_ctx));
                                                backtick_mode=0;
                                                word_acc=[]
                                            }
                                        };
                                        old_ctx=_ctx;
                                        _ctx=await (async function(){
                                             return await (await Environment.get_global("new_ctx"))(_ctx) 
                                        })();
                                        (cpath).push(0);
                                        block_return=await read_block(await (await Environment.get_global("add"))(_depth,1),_ctx);
                                        handler=await (async function(){
                                            let __targ__21=(handler_stack).pop();
                                            if (__targ__21){
                                                 return(__targ__21)[1]
                                            } 
                                        })();
                                        block_return=await (async function(){
                                            let __array_op_rval__22=handler;
                                             if (__array_op_rval__22 instanceof Function){
                                                return await __array_op_rval__22(block_return,_ctx) 
                                            } else {
                                                return [__array_op_rval__22,block_return,_ctx]
                                            }
                                        })();
                                        (cpath).pop();
                                        _ctx=old_ctx;
                                        if (check_true (await (await Environment.get_global("not"))((undefined===block_return)))){
                                            {
                                                if (check_true ((backtick_mode===1))){
                                                    {
                                                        block_return=await (async function(){
                                                             return ["=:quotem",block_return] 
                                                        })();
                                                        backtick_mode=0
                                                    }
                                                };
                                                (acc).push(block_return)
                                            }
                                        }
                                    }
                                } else if (check_true (((mode===in_code)&& (c==="`")))) {
                                    {
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,null,_ctx));
                                                word_acc=[]
                                            }
                                        };
                                        backtick_mode=1
                                    }
                                } else if (check_true (((mode===in_code)&& (c===":")&& ((word_acc && word_acc.length)===0)&& ((acc && acc.length)>0)&& (await (await Environment.get_global("last"))(acc) instanceof String || typeof await (await Environment.get_global("last"))(acc)==='string')))) {
                                    (acc).push(await (await Environment.get_global("add"))((acc).pop(),":"))
                                } else if (check_true (((mode===in_code)&& (last_c===",")&& ((c==="#")|| (c==="@"))))) {
                                    {
                                        (word_acc).push(c);
                                        (acc).push(await process_word(word_acc,null,_ctx));
                                        word_acc=[]
                                    }
                                } else if (check_true (((mode===in_code)&& ((c===" ")|| (await c["charCodeAt"].call(c,0)===10)|| (await c["charCodeAt"].call(c,0)===9)|| ((c===",")&& await (await Environment.get_global("not"))((next_c==="@"))&& await (await Environment.get_global("not"))((next_c==="#"))))))) {
                                    {
                                        if (check_true ((((acc && acc.length)===0)&& ((word_acc && word_acc.length)>0)))){
                                            {
                                                await async function(){
                                                    let __target_obj__23=(_ctx && _ctx["scope"]);
                                                    __target_obj__23["op_chain"]=await (await Environment.get_global("conj"))(await (async function(){
                                                         return await (await Environment.get_global("getf_ctx"))(_ctx,"op_chain") 
                                                    })(),(word_acc).join(""));
                                                    return __target_obj__23;
                                                    
                                                }()
                                            }
                                        };
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                if (check_true ((backtick_mode===1))){
                                                    {
                                                        (acc).push(await process_word(word_acc,backtick_mode,_ctx));
                                                        backtick_mode=0
                                                    }
                                                } else {
                                                    (acc).push(await process_word(word_acc,null,_ctx))
                                                };
                                                word_acc=[]
                                            }
                                        };
                                        (cpath).pop();
                                        (cpath).push(await (await Environment.get_global("length"))(acc))
                                    }
                                } else if (check_true (((mode===in_code)&& (await c["charCodeAt"].call(c,0)===13)))) {
                                    false
                                } else {
                                    {
                                        (word_acc).push(c)
                                    }
                                }
                            } ();
                            column_number+=1;
                            return last_c=c
                        };
                        let __BREAK__FLAG__=false;
                        while(await __test_condition__12()) {
                             await __body_ref__13();
                             if(__BREAK__FLAG__) {
                                 break;
                                
                            }
                        } ;
                        
                    })();
                    if (check_true (((word_acc && word_acc.length)>0))){
                        {
                            (acc).push(await process_word(word_acc,backtick_mode,_ctx));
                            word_acc=[]
                        }
                    };
                    return acc
                };
                if (check_true (debugmode)){
                    {
                        await console.log("read->",in_buffer);
                        await console.log("D  CHAR NC "," M","ESC","ACC","WORDACC","ACCL")
                    }
                };
                output_structure=await read_block(0,ctx);
                if (check_true (debugmode)){
                    {
                        await console.log("read<-",await (async function(){
                             return await clone(output_structure) 
                        })())
                    }
                };
                if (check_true ((opts && opts["symbol_receiver"]))){
                    {
                        await (async function(){
                            let __array_op_rval__24=(opts && opts["symbol_receiver"]);
                             if (__array_op_rval__24 instanceof Function){
                                return await __array_op_rval__24({
                                    source_name:source_name,symbols:symbol_collector
                                }) 
                            } else {
                                return [__array_op_rval__24,{
                                    source_name:source_name,symbols:symbol_collector
                                }]
                            }
                        })()
                    }
                };
                if (check_true (((output_structure instanceof Array)&& (await (await Environment.get_global("length"))(output_structure)>1)))){
                    {
                        (output_structure).unshift(await (async function(){
                             return "=:iprogn" 
                        })());
                        return await (await Environment.get_global("first"))(await (async function(){
                            let __array_op_rval__25=output_structure;
                             if (__array_op_rval__25 instanceof Function){
                                return await __array_op_rval__25() 
                            } else {
                                return [__array_op_rval__25]
                            }
                        })())
                    }
                } else {
                    return await (await Environment.get_global("first"))(output_structure)
                }
            }
        }
    } ()
};__obj__1["add_escape_encoding"]=async function(text) {        if (check_true ((text instanceof String || typeof text==='string'))){            let chars;            let acc;            chars=(text).split("");            acc=[];            await (async function() {                let __for_body__3=async function(c) {                     return  await async function(){                        if (check_true( ((await c["charCodeAt"].call(c,0)===34)))) {                            (acc).push(await String.fromCharCode(92));                             return  (acc).push(c)                        } else  {                             return (acc).push(c)                        }                    } ()                };                let __array__4=[],__elements__2=chars;                let __BREAK__FLAG__=false;                for(let __iter__1 in __elements__2) {                    __array__4.push(await __for_body__3(__elements__2[__iter__1]));                    if(__BREAK__FLAG__) {                         __array__4.pop();                        break;                                            }                }return __array__4;                             })();             return  (acc).join("")        } else {              return text        }    };__obj__1["get_outside_global"]=function get_outside_global(refname) {  try {    let tfn = new Function("{ if (typeof " + refname + " === 'undefined') { return undefined } else { return "+refname+" } }");    return tfn();  } catch (ex) {    return undefined;  }};__obj__1["as_lisp"]=lisp_writer;__obj__1["lisp_writer"]=lisp_writer;__obj__1["clone_to_new"]=async function(options) {
                        let new_env;
                        let my_children;
                        let my_children_declarations;
                        new_env=null;
                        my_children=null;
                        my_children_declarations=null;
                        await env_log(namespace,"cloning: # children: ",await length(children));
                        new_env=await (async function(){
                             return await dlisp_env({
                                env:await (async function(){
                                     return await clone(Environment) 
                                })(),children:await (async function(){
                                     return await clone(children) 
                                })(),children_declarations:await (async function(){
                                     return await clone(children_declarations) 
                                })()
                            }) 
                        })();
                        await env_log(namespace,"constructed: ",await new_env["id"]());
                        return new_env
                    };__obj__1["save_env"]=async function(options) {
                        let new_env;
                        let my_children;
                        let env_constructor;
                        let dcomps;
                        let version_tag;
                        let build_time;
                        let build_headers;
                        let child_env;
                        let want_buffer;
                        let comp_buffer;
                        let sorted_dependencies;
                        let child_export_order;
                        let preserve_imports;
                        let include_source;
                        let exports;
                        let src;
                        let target_insertion_path;
                        let output_path;
                        new_env=null;
                        my_children=null;
                        env_constructor=null;
                        dcomps=await (async function(){
                             return await (await get_global("date_components"))(new Date()) 
                        })();
                        options=(options|| new Object());
                        version_tag=await (async function(){
                            if (check_true (await not(await blank_ques_(opts.version_tag)))){
                                return opts.version_tag
                            } else {
                                return (await (async function(){
                                    let __array_op_rval__328=dcomps.year;
                                     if (__array_op_rval__328 instanceof Function){
                                        return await __array_op_rval__328(dcomps.month,dcomps.day,dcomps.hour,dcomps.minute) 
                                    } else {
                                        return [__array_op_rval__328,dcomps.month,dcomps.day,dcomps.hour,dcomps.minute]
                                    }
                                })()).join(".")
                            }
                        })();
                        build_time=await (async function(){
                             return await (await get_global("formatted_date"))(new Date()) 
                        })();
                        build_headers=[];
                        child_env=null;
                        want_buffer=(options.want_buffer|| false);
                        comp_buffer=null;
                        sorted_dependencies=await (async function(){
                             return await (await get_global("sort_dependencies"))() 
                        })();
                        child_export_order=null;
                        preserve_imports=await (async function(){
                            if (check_true ((options&& (options.preserve_imports===false)))){
                                return false
                            } else {
                                return true
                            }
                        })();
                        include_source=false;
                        exports=[];
                        src=await (async function(){
                            if (check_true (await Environment["get_global"].call(Environment,"*env_skeleton*",null))){
                                return await clone(await Environment["get_global"].call(Environment,"*env_skeleton*"))
                            } else {
                                return await (await get_global("reader"))(await (async function(){
                                     return await (await get_global("read_text_file"))("./src/environment.lisp") 
                                })())
                            }
                        })();
                        target_insertion_path=null;
                        output_path=null;
                        if (check_true (Environment.global_ctx.scope["*env_skeleton*"])){
                            {
                                await (await get_global("register_feature"))("*env_skeleton*")
                            }
                        };
                        target_insertion_path=await first(await (async function(){
                             return await (await get_global("findpaths"))(await (async function(){
                                 return "=:included_globals" 
                            })(),src) 
                        })());
                        if (check_true (await not((target_insertion_path instanceof Array)))){
                            throw new EvalError("Unable to find the first included_globals symbol");
                            
                        };
                        target_insertion_path=await conj(await chop(target_insertion_path),[2]);
                        if (check_true (options.include_source)){
                            {
                                include_source=true
                            }
                        };
                        await env_log(namespace,"cloning: # children: ",await length(children));
                        await env_log(namespace,"preserve_imports: ",preserve_imports);
                        exports=await export_symbol_set(await (async function(){
                            if (check_true (options.do_not_include)){
                                return {
                                    do_not_include:options.do_not_include
                                }
                            }
                        })());
                        child_export_order=await (async function(){
                            let __collector;
                            let __result;
                            let __action;
                            __collector=[];
                            __result=null;
                            __action=async function(cname) {
                                if (check_true (await not((cname==="core")))){
                                    {
                                        return await (async function(){
                                            let __array_op_rval__329=cname;
                                             if (__array_op_rval__329 instanceof Function){
                                                return await __array_op_rval__329(children[cname]) 
                                            } else {
                                                return [__array_op_rval__329,children[cname]]
                                            }
                                        })()
                                    }
                                }
                            };
                            ;
                            await (async function() {
                                let __for_body__332=async function(__item) {
                                    __result=await __action(__item);
                                    if (check_true (__result)){
                                        return (__collector).push(__result)
                                    }
                                };
                                let __array__333=[],__elements__331=sorted_dependencies.namespaces;
                                let __BREAK__FLAG__=false;
                                for(let __iter__330 in __elements__331) {
                                    __array__333.push(await __for_body__332(__elements__331[__iter__330]));
                                    if(__BREAK__FLAG__) {
                                         __array__333.pop();
                                        break;
                                        
                                    }
                                }return __array__333;
                                 
                            })();
                            return __collector
                        })();
                        await console.log("save_env: child_export_order: ",await (async function(){
                             return await (await get_global("each"))(child_export_order,0) 
                        })());
                        my_children=await to_object(await (async function(){
                            let __collector;
                            let __result;
                            let __action;
                            __collector=[];
                            __result=null;
                            __action=async function(child) {
                                if (check_true (await resolve_path(await (async function(){
                                    let __array_op_rval__334=child['0'];
                                     if (__array_op_rval__334 instanceof Function){
                                        return await __array_op_rval__334("serialize_with_image") 
                                    } else {
                                        return [__array_op_rval__334,"serialize_with_image"]
                                    }
                                })(),children_declarations))){
                                    {
                                        await env_log("checking ",namespace,"checking for: ",await add(child['0'],"/*on_serialization*"));
                                        if (check_true (await not(((typeof await add(child['0'],"/*on_serialization*")==="undefined")|| (await Environment["get_global"].call(Environment,await add(child['0'],"/*on_serialization*"),ReferenceError)===ReferenceError))))){
                                            {
                                                await child['1']["evaluate"].call(child['1'],("("+ child['0']+ "/*on_serialization*)"))
                                            }
                                        };
                                        child_env=await child['1']["compile"].call(child['1'],await child['1']["export_symbol_set"].call(child['1'],await add(new Object(),await (async function(){
                                            if (check_true (options.do_not_include)){
                                                return {
                                                    do_not_include:await (async function(){
                                                        let comps;
                                                        comps=null;
                                                        {
                                                            let ____collector__335= async function(){
                                                                return []
                                                            };
                                                            let ____result__336= async function(){
                                                                return null
                                                            };
                                                            let ____action__337= async function(){
                                                                return async function(symbol) {
                                                                    return await async function(){
                                                                        if (check_true (await contains_ques_("/",symbol))) {
                                                                            {
                                                                                comps=(symbol).split("/");
                                                                                if (check_true ((comps['0']===child['0']))){
                                                                                    return comps['1']
                                                                                }
                                                                            }
                                                                        } else {
                                                                            return symbol
                                                                        }
                                                                    } ()
                                                                }
                                                            };
                                                            {
                                                                let __collector=await ____collector__335();
                                                                ;
                                                                let __result=await ____result__336();
                                                                ;
                                                                let __action=await ____action__337();
                                                                ;
                                                                ;
                                                                await (async function() {
                                                                    let __for_body__340=async function(__item) {
                                                                        __result=await __action(__item);
                                                                        if (check_true (__result)){
                                                                            return (__collector).push(__result)
                                                                        }
                                                                    };
                                                                    let __array__341=[],__elements__339=options.do_not_include;
                                                                    let __BREAK__FLAG__=false;
                                                                    for(let __iter__338 in __elements__339) {
                                                                        __array__341.push(await __for_body__340(__elements__339[__iter__338]));
                                                                        if(__BREAK__FLAG__) {
                                                                             __array__341.pop();
                                                                            break;
                                                                            
                                                                        }
                                                                    }return __array__341;
                                                                     
                                                                })();
                                                                return __collector
                                                            }
                                                        }
                                                    })()
                                                }
                                            } else {
                                                return new Object()
                                            }
                                        })(),{
                                            no_compiler:true
                                        })),{
                                            throw_on_error:true
                                        });
                                        return await (async function(){
                                            let __array_op_rval__342=child['0'];
                                             if (__array_op_rval__342 instanceof Function){
                                                return await __array_op_rval__342(await (async function(){
                                                     return [["=:quotel",child['1'].definitions],await (async function(){
                                                         return ["=:quotel",await (async function(){
                                                             return ["=:javascript",child_env] 
                                                        })()] 
                                                    })()] 
                                                })()) 
                                            } else {
                                                return [__array_op_rval__342,await (async function(){
                                                     return [["=:quotel",child['1'].definitions],await (async function(){
                                                         return ["=:quotel",await (async function(){
                                                             return ["=:javascript",child_env] 
                                                        })()] 
                                                    })()] 
                                                })()]
                                            }
                                        })()
                                    }
                                }
                            };
                            ;
                            await (async function() {
                                let __for_body__345=async function(__item) {
                                    __result=await __action(__item);
                                    if (check_true (__result)){
                                        return (__collector).push(__result)
                                    }
                                };
                                let __array__346=[],__elements__344=child_export_order;
                                let __BREAK__FLAG__=false;
                                for(let __iter__343 in __elements__344) {
                                    __array__346.push(await __for_body__345(__elements__344[__iter__343]));
                                    if(__BREAK__FLAG__) {
                                         __array__346.pop();
                                        break;
                                        
                                    }
                                }return __array__346;
                                 
                            })();
                            return __collector
                        })());
                        await (await get_global("set_path"))(target_insertion_path,src,await (async function(){
                             return ["=:fn",[],await to_object(await (async function(){
                                 return [["definitions",await (async function(){
                                     return ["=:quote",await (async function(){
                                        if (check_true (options.do_not_include)){
                                            return await to_object(await (async function(){
                                                let __collector;
                                                let __result;
                                                let __action;
                                                __collector=[];
                                                __result=null;
                                                __action=async function(defset) {
                                                    if (check_true (await not(await contains_ques_(defset['0'],options.do_not_include)))){
                                                        return await (async function(){
                                                            let __array_op_rval__347=defset['0'];
                                                             if (__array_op_rval__347 instanceof Function){
                                                                return await __array_op_rval__347(defset['1']) 
                                                            } else {
                                                                return [__array_op_rval__347,defset['1']]
                                                            }
                                                        })()
                                                    }
                                                };
                                                ;
                                                await (async function() {
                                                    let __for_body__350=async function(__item) {
                                                        __result=await __action(__item);
                                                        if (check_true (__result)){
                                                            return (__collector).push(__result)
                                                        }
                                                    };
                                                    let __array__351=[],__elements__349=await pairs(Environment.definitions);
                                                    let __BREAK__FLAG__=false;
                                                    for(let __iter__348 in __elements__349) {
                                                        __array__351.push(await __for_body__350(__elements__349[__iter__348]));
                                                        if(__BREAK__FLAG__) {
                                                             __array__351.pop();
                                                            break;
                                                            
                                                        }
                                                    }return __array__351;
                                                     
                                                })();
                                                return __collector
                                            })())
                                        } else {
                                            return await clone(Environment.definitions)
                                        }
                                    })()] 
                                })()],["declarations",await (async function(){
                                     return await clone(Environment.declarations) 
                                })()],["config",await (async function(){
                                    let exp_conf;
                                    exp_conf=await (async function(){
                                         return await clone(Environment.global_ctx.scope["*env_config*"]) 
                                    })();
                                    if (check_true (await not(preserve_imports))){
                                        {
                                            await async function(){
                                                exp_conf["imports"]=new Object();
                                                return exp_conf;
                                                
                                            }()
                                        }
                                    };
                                    if (check_true (options.features)){
                                        {
                                            await async function(){
                                                exp_conf["features"]=options.features;
                                                return exp_conf;
                                                
                                            }()
                                        }
                                    };
                                    return exp_conf
                                })()],["imports",await (async function(){
                                    if (check_true (preserve_imports)){
                                        return await to_object(await (async function() {
                                            let __for_body__356=async function(imp_source) {
                                                return await (async function(){
                                                    let __array_op_rval__358=imp_source.symbol;
                                                     if (__array_op_rval__358 instanceof Function){
                                                        return await __array_op_rval__358({
                                                            initializer:await (async function(){
                                                                 return ["=:javascript","new function () { return ",imp_source.symbol," }"] 
                                                            })(),symbol:imp_source.symbol,namespace:imp_source.namespace
                                                        }) 
                                                    } else {
                                                        return [__array_op_rval__358,{
                                                            initializer:await (async function(){
                                                                 return ["=:javascript","new function () { return ",imp_source.symbol," }"] 
                                                            })(),symbol:imp_source.symbol,namespace:imp_source.namespace
                                                        }]
                                                    }
                                                })()
                                            };
                                            let __array__357=[],__elements__355=await values((await resolve_path(["*env_config*","imports"],Environment.global_ctx.scope)|| new Object()));
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__354 in __elements__355) {
                                                __array__357.push(await __for_body__356(__elements__355[__iter__354]));
                                                if(__BREAK__FLAG__) {
                                                     __array__357.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__357;
                                             
                                        })())
                                    } else {
                                        return new Object()
                                    }
                                })()],["symbols",await (async function(){
                                     return ["=:javascript",await compile(await to_object(exports),{
                                        throw_on_error:true
                                    })] 
                                })()],["children_declarations",await (async function(){
                                     return ["=:fn",[],await clone(children_declarations)] 
                                })()],["child_load_order",await (async function(){
                                     return await (await get_global("each"))(child_export_order,0) 
                                })()],["children",my_children]] 
                            })())] 
                        })());
                        output_path=await (async function(){
                            if (check_true (options.want_buffer)){
                                return null
                            } else {
                                return (options.save_as|| await resolve_path(["*env_config*","export","save_path"],Environment.global_ctx.scope))
                            }
                        })();
                        if (check_true (output_path instanceof Function)){
                            output_path=await (async function(){
                                let __array_op_rval__359=output_path;
                                 if (__array_op_rval__359 instanceof Function){
                                    return await __array_op_rval__359() 
                                } else {
                                    return [__array_op_rval__359]
                                }
                            })()
                        };
                        if (check_true ((await not((output_path instanceof String || typeof output_path==='string'))&& output_path))){
                            throw new EvalError("invalid name for target for saving the environment.  Must be a string or function");
                            
                        };
                        return await async function(){
                            if (check_true ((want_buffer|| (output_path&& await ends_with_ques_(".js",output_path))))) {
                                {
                                    (build_headers).push(("// Build Time: "+ build_time));
                                    (build_headers).push(("// Version: "+ version_tag));
                                    (build_headers).push(("export const DLISP_ENV_VERSION='"+ version_tag+ "';"));
                                    await env_log("saving to: ",output_path);
                                    return await (await get_global("compile_buffer"))(src,"init_dlisp",{
                                        namespace:namespace,toplevel:true,include_boilerplate:false,verbose:false,bundle:true,want_buffer:want_buffer,imports:await (async function(){
                                            if (check_true (preserve_imports)){
                                                return await resolve_path(["*env_config*","imports"],Environment.global_ctx.scope)
                                            }
                                        })(),js_headers:await (async function(){
                                             return [await (await get_global("show"))(check_true),await (async function(){
                                                 return await (await get_global("show"))(get_next_environment_id) 
                                            })(),await (async function(){
                                                 return await (await get_global("show"))(get_outside_global) 
                                            })(),await (async function(){
                                                 return await (await get_global("show"))(subtype) 
                                            })(),await (async function(){
                                                 return await (await get_global("show"))(lisp_writer) 
                                            })(),await (async function(){
                                                 return await (await get_global("show"))(clone) 
                                            })(),await (async function(){
                                                 return await (await get_global("show"))(LispSyntaxError) 
                                            })()] 
                                        })(),bundle_options:{
                                            default_namespace:await resolve_path(["*env_config*","export","default_namespace"],Environment.global_ctx.scope)
                                        },output_file:output_path,include_source:(options.include_source|| await resolve_path(["*env_config*","export","include_source"],Environment.global_ctx.scope)),build_headers:build_headers
                                    })
                                }
                            } else if (check_true ((output_path&& await ends_with_ques_(".lisp",output_path)))) {
                                return await (await get_global("write_text_file"))(output_path,await JSON.stringify(src,null,4))
                            } else {
                                return src
                            }
                        } ()
                    };__obj__1["null"]=null;__obj__1["namespace_declarations"]=function() {
                                    return children_declarations
                                };__obj__1["set_namespace_declaration"]=function(namespace,key,value) {
                                    return  ( get_global("set_path"))( ( function(){
                                        let __array_op_rval__362=namespace;
                                         if (__array_op_rval__362 instanceof Function){
                                            return  __array_op_rval__362(key) 
                                        } else {
                                            return [__array_op_rval__362,key]
                                        }
                                    })(),children_declarations,value)
                                };__obj__1["defmacro"]=async function(name,lambda_list,...forms) {
    let macro_name;
    let macro_args;
    let macro_body;
    let final_form;
    let macro_meta;
    let complex_lambda_list;
    let source_details;
    macro_name=name;
    macro_args=lambda_list;
    macro_body=forms;
    final_form=await (await Environment.get_global("last"))(forms);
    macro_meta=await (async function(){
        if (check_true (((final_form instanceof Object)&& await (await Environment.get_global("not"))(await (await Environment.get_global("blank?"))((final_form && final_form["description"])))&& await (await Environment.get_global("not"))(await (await Environment.get_global("blank?"))((final_form && final_form["usage"])))))){
            return (forms).pop()
        }
    })();
    complex_lambda_list=await (async function(){
         return await (await Environment.get_global("or_args"))(await (async function() {
            let __for_body__56=async function(elem) {
                return (await (await Environment.get_global("length"))(await (await Environment.get_global("flatten"))(await (await Environment.get_global("destructure_list"))(elem)))>0)
            };
            let __array__57=[],__elements__55=lambda_list;
            let __BREAK__FLAG__=false;
            for(let __iter__54 in __elements__55) {
                __array__57.push(await __for_body__56(__elements__55[__iter__54]));
                if(__BREAK__FLAG__) {
                     __array__57.pop();
                    break;
                    
                }
            }return __array__57;
             
        })()) 
    })();
    source_details=await (await Environment.get_global("add"))({
        eval_when:{
            compile_time:true
        },name:await (async function(){
            if (check_true (await (await Environment.get_global("starts_with?"))("=:",name))){
                return await name["substr"].call(name,2)
            } else {
                return name
            }
        })(),macro:true,fn_args:await (await Environment.get_global("as_lisp"))(macro_args)
    },await (async function(){
        if (check_true (macro_meta)){
            return macro_meta
        } else {
            return new Object()
        }
    })());
    if (check_true (complex_lambda_list)){
        return ["=:defglobal",macro_name,["=:fn",["&","=:args"],["=:destructuring_bind",macro_args,"=:args",].concat(macro_body)],["=:quote",source_details]]
    } else {
        return ["=:defglobal",macro_name,["=:fn",macro_args,].concat(macro_body),["=:quote",source_details]]
    }
};__obj__1["read_lisp"]=async function(text,opts) {    return await async function(){
        if (check_true ((undefined==text))) {
            throw new EvalError(("reader: received undefined, text must be a string."));
            
        } else if (check_true (await (await Environment.get_global("not"))((text instanceof String || typeof text==='string')))) {
            throw new EvalError(("reader: received "+ await (await Environment.get_global("sub_type"))(text)+ ": text must be a string."));
            
        } else {
            {
                let output_structure;
                let idx;
                let error_collector;
                let symbol_collector;
                let throw_on_error;
                let line_number;
                let column_number;
                let source_name;
                let len;
                let debugmode;
                let in_buffer;
                let in_code;
                let in_quotes;
                let in_long_text;
                let in_comment;
                let in_single_quote;
                let reading_object;
                let mode;
                let symbol_start;
                let pause_time;
                let cpath;
                let ctx;
                let last_final_column_num;
                let symbol_receiver;
                let add_symbol;
                let local_text;
                let position;
                let read_table;
                let get_char;
                let error;
                let handle_escape_char;
                let process_word;
                let registered_stop_char;
                let handler_stack;
                let handler;
                let c;
                let next_c;
                let depth;
                let stop;
                let processing_time_marker;
                let read_block;
                output_structure=[];
                idx=-1;
                error_collector=[];
                symbol_collector=new Object();
                throw_on_error=await (await Environment.get_global("not"))((opts && opts["suppress_throw_on_error"]));
                line_number=0;
                column_number=0;
                source_name=await (async function(){
                    if (check_true ((opts && opts["source_name"]))){
                        return (opts && opts["source_name"])
                    } else {
                        return "anonymous"
                    }
                })();
                opts=(opts|| new Object());
                len=(await (await Environment.get_global("length"))(text)- 1);
                debugmode=await (async function(){
                     return await async function(){
                        if (check_true ((opts && opts["verbose"]))) {
                            return true
                        } else if (check_true (((opts && opts["verbose"])===false))) {
                            return false
                        } else if (check_true (((await Environment.get_global("__VERBOSITY__"))>6))) {
                            return true
                        } else {
                            return false
                        }
                    } () 
                })();
                in_buffer=(text).split("");
                in_code=0;
                in_quotes=1;
                in_long_text=2;
                in_comment=3;
                in_single_quote=4;
                reading_object=false;
                mode=in_code;
                symbol_start=null;
                pause_time=await (async function(){
                    if (check_true (await (await Environment.get_global("is_number?"))((opts && opts["pause_time"])))){
                        return (opts && opts["pause_time"])
                    } else {
                        return null
                    }
                })();
                cpath=[];
                ctx={
                    scope:{
                        op_chain:[]
                    },parent:null
                };
                last_final_column_num=0;
                symbol_receiver=await (async function(){
                    if (check_true ((opts && opts["symbol_receiver"]) instanceof Function)){
                        return (opts && opts["symbol_receiver"])
                    }
                })();
                add_symbol=async function(symbol,_ctx) {
                    if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("ends_with?"))(":",symbol)))){
                        {
                            {
                                let ccol;
                                let cline;
                                let real_sym;
                                ccol=await (async function(){
                                    if (check_true ((column_number===0))){
                                        return (last_final_column_num- (symbol && symbol.length))
                                    } else {
                                        return (column_number- (symbol && symbol.length))
                                    }
                                })();
                                cline=await (async function(){
                                    if (check_true ((column_number===0))){
                                        return (line_number- 1)
                                    } else {
                                        return line_number
                                    }
                                })();
                                real_sym=await (await Environment.get_global("first"))((symbol).split("."));
                                if (check_true ((null==symbol_collector[real_sym]))){
                                    return await async function(){
                                        symbol_collector[real_sym]=await (async function(){
                                             return [await (async function(){
                                                let __array_op_rval__2=cline;
                                                 if (__array_op_rval__2 instanceof Function){
                                                    return await __array_op_rval__2(ccol,await (async function(){
                                                        if (check_true (_ctx)){
                                                            return await (await Environment.get_global("getf_ctx"))(_ctx,"op_chain")
                                                        } else {
                                                            return null
                                                        }
                                                    })(),await (await Environment.get_global("but_last"))(cpath)) 
                                                } else {
                                                    return [__array_op_rval__2,ccol,await (async function(){
                                                        if (check_true (_ctx)){
                                                            return await (await Environment.get_global("getf_ctx"))(_ctx,"op_chain")
                                                        } else {
                                                            return null
                                                        }
                                                    })(),await (await Environment.get_global("but_last"))(cpath)]
                                                }
                                            })()] 
                                        })();
                                        return symbol_collector;
                                        
                                    }()
                                } else {
                                    return (symbol_collector[real_sym]).push(await (async function(){
                                        let __array_op_rval__3=cline;
                                         if (__array_op_rval__3 instanceof Function){
                                            return await __array_op_rval__3(ccol,await (async function(){
                                                if (check_true (_ctx)){
                                                    return await (await Environment.get_global("getf_ctx"))(_ctx,"op_chain")
                                                } else {
                                                    return null
                                                }
                                            })(),await (await Environment.get_global("but_last"))(cpath)) 
                                        } else {
                                            return [__array_op_rval__3,ccol,await (async function(){
                                                if (check_true (_ctx)){
                                                    return await (await Environment.get_global("getf_ctx"))(_ctx,"op_chain")
                                                } else {
                                                    return null
                                                }
                                            })(),await (await Environment.get_global("but_last"))(cpath)]
                                        }
                                    })())
                                }
                            }
                        }
                    }
                };
                local_text=async function() {
                    let start;
                    let end;
                    start=await Math.max(0,(idx- 10));
                    end=await Math.min(await (await Environment.get_global("length"))(in_buffer),(idx+ 10));
                    return (await (await Environment.get_global("slice"))(in_buffer,start,end)).join("")
                };
                position=async function(offset) {
                    return ("line: "+ line_number+ " column: "+ await (async function(){
                        if (check_true (offset)){
                            return (column_number+ offset)
                        } else {
                            return column_number
                        }
                    })())
                };
                read_table=await (await Environment.get_global("add"))(new Object(),await (async function(){
                    if (check_true ((opts && opts["read_table_entries"]))){
                        return (opts && opts["read_table_entries"])
                    } else {
                        return new Object()
                    }
                })(),await ( async function(){
                    let __obj__4=new Object();
                    __obj__4["("]=[")",async function(block,_ctx) {
                        return block
                    }];
                    __obj__4["["]=["]",async function(block,_ctx) {
                        return block
                    }];
                    __obj__4["{"]=["}",async function(block,_ctx) {
                        let obj;
                        let __idx__5= async function(){
                            return -1
                        };
                        let key_mode;
                        let need_colon;
                        let value_mode;
                        let key;
                        let value;
                        let cpos;
                        let state;
                        let block_length;
                        {
                            obj=new Object();
                            let idx=await __idx__5();
                            ;
                            key_mode=0;
                            need_colon=1;
                            value_mode=2;
                            key=null;
                            value=null;
                            cpos=null;
                            state=key_mode;
                            block_length=(await (await Environment.get_global("length"))(block)- 1);
                            reading_object=false;
                            await (async function(){
                                 let __test_condition__6=async function() {
                                    return (idx<block_length)
                                };
                                let __body_ref__7=async function() {
                                    idx+=1;
                                    key=block[idx];
                                    if (check_true (((key instanceof Array)&& ((key && key.length)===2)&& ((key && key["0"])==="=:quotem")&& ((key && key["1"]) instanceof String || typeof (key && key["1"])==='string')))){
                                        {
                                            key=(key && key["1"])
                                        }
                                    };
                                    if (check_true (((key instanceof String || typeof key==='string')&& await (await Environment.get_global("starts_with?"))("=:",key)&& (await (await Environment.get_global("length"))(key)>2)))){
                                        key=await key["substr"].call(key,2)
                                    };
                                    return await async function(){
                                        if (check_true (await (await Environment.get_global("blank?"))(key))) {
                                            return await error("missing object key",("blank or nil key: "+ block[idx]))
                                        } else if (check_true (await (await Environment.get_global("is_number?"))(key))) {
                                            {
                                                idx+=1;
                                                return await async function(){
                                                    obj[key]=block[idx];
                                                    return obj;
                                                    
                                                }()
                                            }
                                        } else if (check_true (((key instanceof String || typeof key==='string')&& await (await Environment.get_global("contains?"))(":",key)&& await (await Environment.get_global("not"))(await (await Environment.get_global("ends_with?"))(":",key))))) {
                                            {
                                                cpos=await key["indexOf"].call(key,":");
                                                value=await key["substr"].call(key,(cpos+ 1));
                                                key=await key["substr"].call(key,0,cpos);
                                                value=await process_word((value).split(""),0,_ctx);
                                                return await async function(){
                                                    obj[key]=value;
                                                    return obj;
                                                    
                                                }()
                                            }
                                        } else {
                                            {
                                                idx+=1;
                                                if (check_true (await (await Environment.get_global("ends_with?"))(":",key))){
                                                    key=await (await Environment.get_global("chop"))(key)
                                                } else {
                                                    {
                                                        if (check_true ((block[idx]===":"))){
                                                            idx+=1
                                                        } else {
                                                            await error("missing colon",("expected colon for: "+ key))
                                                        }
                                                    }
                                                };
                                                return await async function(){
                                                    obj[key]=block[idx];
                                                    return obj;
                                                    
                                                }()
                                            }
                                        }
                                    } ()
                                };
                                let __BREAK__FLAG__=false;
                                while(await __test_condition__6()) {
                                     await __body_ref__7();
                                     if(__BREAK__FLAG__) {
                                         break;
                                        
                                    }
                                } ;
                                
                            })();
                            return obj
                        }
                    },async function() {
                        return reading_object=true
                    }];
                    __obj__4["\""]=["\"",async function(block) {
                        return ["quotes",block]
                    }];
                    return __obj__4;
                    
                })());
                get_char=async function(pos) {
                    return in_buffer[pos]
                };
                error=async function(type,message,offset) {
                    if (check_true (throw_on_error)){
                        throw new LispSyntaxError({
                            message:message,position:await position(offset),pos:{
                                line:line_number,column:(column_number+ (offset|| 0))
                            },depth:depth,local_text:await local_text(),source_name:source_name,type:type
                        });
                        
                    } else {
                        if (check_true ((opts && opts["on_error"]) instanceof Function)){
                            {
                                return await (async function(){
                                    let __array_op_rval__11=(opts && opts["on_error"]);
                                     if (__array_op_rval__11 instanceof Function){
                                        return await __array_op_rval__11({
                                            message:message,position:await position(offset),pos:{
                                                line:line_number,column:(column_number+ (offset|| 0))
                                            },depth:depth,local_text:await local_text(),source_name:source_name,type:type
                                        }) 
                                    } else {
                                        return [__array_op_rval__11,{
                                            message:message,position:await position(offset),pos:{
                                                line:line_number,column:(column_number+ (offset|| 0))
                                            },depth:depth,local_text:await local_text(),source_name:source_name,type:type
                                        }]
                                    }
                                })()
                            }
                        }
                    }
                };
                handle_escape_char=async function(c) {
                    let ccode;
                    ccode=await c["charCodeAt"].call(c,0);
                    return await async function(){
                        if (check_true ((ccode===34))) {
                            return c
                        } else if (check_true ((ccode===92))) {
                            return c
                        } else if (check_true ((c==="t"))) {
                            return await String.fromCharCode(9)
                        } else if (check_true ((c==="n"))) {
                            return await String.fromCharCode(10)
                        } else if (check_true ((c==="r"))) {
                            return await String.fromCharCode(13)
                        } else if (check_true ((c==="f"))) {
                            return c
                        } else if (check_true ((c==="b"))) {
                            return c
                        } else {
                            return c
                        }
                    } ()
                };
                process_word=async function(word_acc,backtick_mode,_ctx) {
                    let word;
                    let word_as_number;
                    word=(word_acc).join("");
                    word_as_number=await Number(word);
                    if (check_true (debugmode)){
                        {
                            await console.log("process_word: ",word,word_as_number,backtick_mode)
                        }
                    };
                    return await async function(){
                        if (check_true (("true"===word))) {
                            return true
                        } else if (check_true (("false"===word))) {
                            return false
                        } else if (check_true ((":"===word))) {
                            return word
                        } else if (check_true ((",@"===word))) {
                            return "=$,@"
                        } else if (check_true (((",#"===word)|| ("##"===word)))) {
                            return "=:##"
                        } else if (check_true (("=$,@"===word))) {
                            return "=$,@"
                        } else if (check_true (("=:##"===word))) {
                            return "=:##"
                        } else if (check_true (await isNaN(word_as_number))) {
                            {
                                return await async function(){
                                    if (check_true ((word==="=:"))) {
                                        {
                                            return "=:"
                                        }
                                    } else if (check_true (((backtick_mode===0)&& await (await Environment.get_global("ends_with?"))(")",word)))) {
                                        {
                                            await error("trailing character","unexpected trailing parenthesis 2");
                                            return ""
                                        }
                                    } else if (check_true (((backtick_mode===0)&& await (await Environment.get_global("ends_with?"))("]",word)))) {
                                        {
                                            await error("trailing character","unexpected trailing bracket 2");
                                            return ""
                                        }
                                    } else if (check_true (await (await Environment.get_global("contains?"))(word,await (async function(){
                                         return ["=:(",await (async function(){
                                             return "=:)" 
                                        })(),await (async function(){
                                             return "=:'" 
                                        })()] 
                                    })()))) {
                                        {
                                            return word
                                        }
                                    } else if (check_true ((backtick_mode===1))) {
                                        return word
                                    } else {
                                        {
                                            if (check_true (symbol_receiver)){
                                                {
                                                    await add_symbol(word,_ctx)
                                                }
                                            };
                                            return await (await Environment.get_global("add"))(await (async function(){
                                                 return "=:" 
                                            })(),word)
                                        }
                                    }
                                } ()
                            }
                        } else if (check_true (await (await Environment.get_global("is_number?"))(word_as_number))) {
                            return word_as_number
                        } else {
                            {
                                console.log("reader: ",await position()," what is this?",word,word_acc,await local_text());
                                return word
                            }
                        }
                    } ()
                };
                registered_stop_char=null;
                handler_stack=[];
                handler=null;
                c=null;
                next_c=null;
                depth=0;
                stop=false;
                processing_time_marker=await Date.now();
                read_block=async function(_depth,_ctx) {
                    let acc;
                    let word_acc;
                    let operator;
                    let old_ctx;
                    let backtick_mode;
                    let escape_mode;
                    let last_c;
                    let block_return;
                    acc=[];
                    word_acc=[];
                    operator=null;
                    old_ctx=null;
                    backtick_mode=0;
                    escape_mode=0;
                    last_c=null;
                    _ctx=_ctx;
                    block_return=null;
                    depth=_depth;
                    if (check_true (pause_time)){
                        if (check_true (((await Date.now()- processing_time_marker)>50))){
                            {
                                await (await Environment.get_global("sleep"))(pause_time);
                                processing_time_marker=await Date.now()
                            }
                        }
                    };
                    await (async function(){
                         let __test_condition__12=async function() {
                            return (await (await Environment.get_global("not"))(stop)&& (idx<len))
                        };
                        let __body_ref__13=async function() {
                            idx+=1;
                            escape_mode=await Math.max(0,(escape_mode- 1));
                            c=await get_char(idx);
                            next_c=await get_char((idx+ 1));
                            if (check_true ((c==="\n"))){
                                {
                                    line_number+=1;
                                    last_final_column_num=column_number;
                                    column_number=0
                                }
                            };
                            if (check_true (debugmode)){
                                {
                                    await console.log(_depth,"  ",c," ",next_c," ",mode,"",escape_mode," ",await (await Environment.get_global("as_lisp"))(acc),await (await Environment.get_global("as_lisp"))(word_acc),(acc && acc.length),(cpath).join("."))
                                }
                            };
                            await async function(){
                                if (check_true (((next_c===undefined)&& await (await Environment.get_global("not"))((await (async function(){
                                    let __targ__14=await (await Environment.get_global("last"))(handler_stack);
                                    if (__targ__14){
                                         return(__targ__14)[0]
                                    } 
                                })()===undefined))&& (await (await Environment.get_global("not"))((c===await (async function(){
                                    let __targ__15=await (await Environment.get_global("last"))(handler_stack);
                                    if (__targ__15){
                                         return(__targ__15)[0]
                                    } 
                                })()))|| ((handler_stack && handler_stack.length)>1))))) {
                                    return await error("premature end",("premature end: expected: "+ await (async function(){
                                        let __targ__16=await (await Environment.get_global("last"))(handler_stack);
                                        if (__targ__16){
                                             return(__targ__16)[0]
                                        } 
                                    })()))
                                } else if (check_true (((next_c===undefined)&& (mode===in_quotes)&& await (await Environment.get_global("not"))((await c["charCodeAt"]()===34))))) {
                                    await error("premature end","premature end: expected: \"")
                                } else if (check_true (((next_c===undefined)&& (mode===in_long_text)&& await (await Environment.get_global("not"))((c==="|"))))) {
                                    await error("premature end","premature end: expected: |")
                                } else if (check_true (((mode===in_code)&& (_depth===1)&& (next_c===")")&& (c===")")))) {
                                    {
                                        await error("trailing character","unexpected trailing parenthesis")
                                    }
                                }
                            } ();
                            await async function(){
                                if (check_true (((c==="\n")&& (mode===in_comment)))) {
                                    {
                                        mode=in_code;
                                        return __BREAK__FLAG__=true;
                                        return
                                    }
                                } else if (check_true (((92===await c["charCodeAt"].call(c,0))&& (mode===in_long_text)))) {
                                    {
                                        (word_acc).push(c);
                                        (word_acc).push(c)
                                    }
                                } else if (check_true (((mode>0)&& (escape_mode===1)&& (92===await c["charCodeAt"].call(c,0))))) {
                                    {
                                        (word_acc).push(c)
                                    }
                                } else if (check_true (((mode>0)&& (92===await c["charCodeAt"].call(c,0))))) {
                                    {
                                        escape_mode=2
                                    }
                                } else if (check_true (((mode>0)&& (escape_mode===1)))) {
                                    {
                                        (word_acc).push(await handle_escape_char(c))
                                    }
                                } else if (check_true (((mode===in_long_text)&& (escape_mode===0)&& (c==="|")))) {
                                    {
                                        acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                        word_acc=[];
                                        mode=in_code;
                                        __BREAK__FLAG__=true;
                                        return
                                    }
                                } else if (check_true (((mode===in_quotes)&& (escape_mode===0)&& (c==="\"")))) {
                                    {
                                        acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                        word_acc=[];
                                        mode=in_code;
                                        __BREAK__FLAG__=true;
                                        return
                                    }
                                } else if (check_true (((mode===in_single_quote)&& (escape_mode===0)&& (c==="'")))) {
                                    {
                                        acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                        word_acc=[];
                                        mode=in_code;
                                        __BREAK__FLAG__=true;
                                        return
                                    }
                                } else if (check_true (((c==="|")&& (mode===in_code)))) {
                                    {
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,null,_ctx));
                                                word_acc=[]
                                            }
                                        };
                                        mode=in_long_text;
                                        block_return=await read_block(await (await Environment.get_global("add"))(_depth,1),_ctx);
                                        if (check_true ((backtick_mode===1))){
                                            {
                                                block_return=await (async function(){
                                                     return ["=:quotem",block_return] 
                                                })();
                                                backtick_mode=0
                                            }
                                        };
                                        (acc).push(block_return)
                                    }
                                } else if (check_true (((c==="\"")&& (escape_mode===0)&& (mode===in_code)))) {
                                    {
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,null,_ctx));
                                                word_acc=[]
                                            }
                                        };
                                        mode=in_quotes;
                                        block_return=await read_block(await (await Environment.get_global("add"))(_depth,1),_ctx);
                                        if (check_true ((backtick_mode===1))){
                                            {
                                                backtick_mode=0
                                            }
                                        };
                                        (acc).push(block_return)
                                    }
                                } else if (check_true (((c==="'")&& (escape_mode===0)&& (mode===in_code)))) {
                                    {
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,null,_ctx));
                                                word_acc=[]
                                            }
                                        };
                                        mode=in_single_quote;
                                        block_return=await read_block(await (await Environment.get_global("add"))(_depth,1),_ctx);
                                        if (check_true ((backtick_mode===1))){
                                            {
                                                backtick_mode=0
                                            }
                                        };
                                        (acc).push(block_return)
                                    }
                                } else if (check_true ((mode===in_comment))) {
                                    false
                                } else if (check_true (((c===";")&& (mode===in_code)))) {
                                    {
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,null,_ctx));
                                                word_acc=[]
                                            }
                                        };
                                        mode=in_comment;
                                        await read_block(await (await Environment.get_global("add"))(_depth,1),_ctx)
                                    }
                                } else if (check_true (((mode===in_code)&& (await (await Environment.get_global("length"))(handler_stack)>0)&& (c===await (async function(){
                                    let __targ__17=await (await Environment.get_global("last"))(handler_stack);
                                    if (__targ__17){
                                         return(__targ__17)[0]
                                    } 
                                })())))) {
                                    {
                                        __BREAK__FLAG__=true;
                                        return
                                    }
                                } else if (check_true (((mode===in_code)&& read_table[c]&& await (await Environment.get_global("first"))(read_table[c])))) {
                                    {
                                        if (check_true (await (async function(){
                                            let __targ__18=read_table[c];
                                            if (__targ__18){
                                                 return(__targ__18)[2]
                                            } 
                                        })())){
                                            {
                                                handler=await (async function(){
                                                    let __targ__19=read_table[c];
                                                    if (__targ__19){
                                                         return(__targ__19)[2]
                                                    } 
                                                })();
                                                await (async function(){
                                                    let __array_op_rval__20=handler;
                                                     if (__array_op_rval__20 instanceof Function){
                                                        return await __array_op_rval__20() 
                                                    } else {
                                                        return [__array_op_rval__20]
                                                    }
                                                })();
                                                handler=null
                                            }
                                        };
                                        (handler_stack).push(read_table[c]);
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,backtick_mode,_ctx));
                                                backtick_mode=0;
                                                word_acc=[]
                                            }
                                        };
                                        old_ctx=_ctx;
                                        _ctx=await (async function(){
                                             return await (await Environment.get_global("new_ctx"))(_ctx) 
                                        })();
                                        (cpath).push(0);
                                        block_return=await read_block(await (await Environment.get_global("add"))(_depth,1),_ctx);
                                        handler=await (async function(){
                                            let __targ__21=(handler_stack).pop();
                                            if (__targ__21){
                                                 return(__targ__21)[1]
                                            } 
                                        })();
                                        block_return=await (async function(){
                                            let __array_op_rval__22=handler;
                                             if (__array_op_rval__22 instanceof Function){
                                                return await __array_op_rval__22(block_return,_ctx) 
                                            } else {
                                                return [__array_op_rval__22,block_return,_ctx]
                                            }
                                        })();
                                        (cpath).pop();
                                        _ctx=old_ctx;
                                        if (check_true (await (await Environment.get_global("not"))((undefined===block_return)))){
                                            {
                                                if (check_true ((backtick_mode===1))){
                                                    {
                                                        block_return=await (async function(){
                                                             return ["=:quotem",block_return] 
                                                        })();
                                                        backtick_mode=0
                                                    }
                                                };
                                                (acc).push(block_return)
                                            }
                                        }
                                    }
                                } else if (check_true (((mode===in_code)&& (c==="`")))) {
                                    {
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,null,_ctx));
                                                word_acc=[]
                                            }
                                        };
                                        backtick_mode=1
                                    }
                                } else if (check_true (((mode===in_code)&& (c===":")&& ((word_acc && word_acc.length)===0)&& ((acc && acc.length)>0)&& (await (await Environment.get_global("last"))(acc) instanceof String || typeof await (await Environment.get_global("last"))(acc)==='string')))) {
                                    (acc).push(await (await Environment.get_global("add"))((acc).pop(),":"))
                                } else if (check_true (((mode===in_code)&& (last_c===",")&& ((c==="#")|| (c==="@"))))) {
                                    {
                                        (word_acc).push(c);
                                        (acc).push(await process_word(word_acc,null,_ctx));
                                        word_acc=[]
                                    }
                                } else if (check_true (((mode===in_code)&& ((c===" ")|| (await c["charCodeAt"].call(c,0)===10)|| (await c["charCodeAt"].call(c,0)===9)|| ((c===",")&& await (await Environment.get_global("not"))((next_c==="@"))&& await (await Environment.get_global("not"))((next_c==="#"))))))) {
                                    {
                                        if (check_true ((((acc && acc.length)===0)&& ((word_acc && word_acc.length)>0)))){
                                            {
                                                await async function(){
                                                    let __target_obj__23=(_ctx && _ctx["scope"]);
                                                    __target_obj__23["op_chain"]=await (await Environment.get_global("conj"))(await (async function(){
                                                         return await (await Environment.get_global("getf_ctx"))(_ctx,"op_chain") 
                                                    })(),(word_acc).join(""));
                                                    return __target_obj__23;
                                                    
                                                }()
                                            }
                                        };
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                if (check_true ((backtick_mode===1))){
                                                    {
                                                        (acc).push(await process_word(word_acc,backtick_mode,_ctx));
                                                        backtick_mode=0
                                                    }
                                                } else {
                                                    (acc).push(await process_word(word_acc,null,_ctx))
                                                };
                                                word_acc=[]
                                            }
                                        };
                                        (cpath).pop();
                                        (cpath).push(await (await Environment.get_global("length"))(acc))
                                    }
                                } else if (check_true (((mode===in_code)&& (await c["charCodeAt"].call(c,0)===13)))) {
                                    false
                                } else {
                                    {
                                        (word_acc).push(c)
                                    }
                                }
                            } ();
                            column_number+=1;
                            return last_c=c
                        };
                        let __BREAK__FLAG__=false;
                        while(await __test_condition__12()) {
                             await __body_ref__13();
                             if(__BREAK__FLAG__) {
                                 break;
                                
                            }
                        } ;
                        
                    })();
                    if (check_true (((word_acc && word_acc.length)>0))){
                        {
                            (acc).push(await process_word(word_acc,backtick_mode,_ctx));
                            word_acc=[]
                        }
                    };
                    return acc
                };
                if (check_true (debugmode)){
                    {
                        await console.log("read->",in_buffer);
                        await console.log("D  CHAR NC "," M","ESC","ACC","WORDACC","ACCL")
                    }
                };
                output_structure=await read_block(0,ctx);
                if (check_true (debugmode)){
                    {
                        await console.log("read<-",await (async function(){
                             return await clone(output_structure) 
                        })())
                    }
                };
                if (check_true ((opts && opts["symbol_receiver"]))){
                    {
                        await (async function(){
                            let __array_op_rval__24=(opts && opts["symbol_receiver"]);
                             if (__array_op_rval__24 instanceof Function){
                                return await __array_op_rval__24({
                                    source_name:source_name,symbols:symbol_collector
                                }) 
                            } else {
                                return [__array_op_rval__24,{
                                    source_name:source_name,symbols:symbol_collector
                                }]
                            }
                        })()
                    }
                };
                if (check_true (((output_structure instanceof Array)&& (await (await Environment.get_global("length"))(output_structure)>1)))){
                    {
                        (output_structure).unshift(await (async function(){
                             return "=:iprogn" 
                        })());
                        return await (await Environment.get_global("first"))(await (async function(){
                            let __array_op_rval__25=output_structure;
                             if (__array_op_rval__25 instanceof Function){
                                return await __array_op_rval__25() 
                            } else {
                                return [__array_op_rval__25]
                            }
                        })())
                    }
                } else {
                    return await (await Environment.get_global("first"))(output_structure)
                }
            }
        }
    } ()
};__obj__1["desym"]=async function(val) {
        let strip;
        strip=async function(v) {
            return (""+ await (await Environment.get_global("as_lisp"))(v))
        };
        return await async function(){
            if (check_true ((val instanceof String || typeof val==='string'))) {
                return await strip(val)
            } else if (check_true ((val instanceof Array))) {
                return await (async function() {
                    let __for_body__9=async function(v) {
                        return await strip(v)
                    };
                    let __array__10=[],__elements__8=val;
                    let __BREAK__FLAG__=false;
                    for(let __iter__7 in __elements__8) {
                        __array__10.push(await __for_body__9(__elements__8[__iter__7]));
                        if(__BREAK__FLAG__) {
                             __array__10.pop();
                            break;
                            
                        }
                    }return __array__10;
                     
                })()
            } else {
                return val
            }
        } ()
    };__obj__1["desym_ref"]=async function(val) {
    return ["=:+","",["=:as_lisp",val]]
};__obj__1["deref"]=async function(val) {
    return ["=:let",[["=:mval",val]],["=:if",["=:and",["=:is_string?","=:mval"],["=:starts_with?","=:","=:mval"]],["=:->","=:mval","substr",2],"=:mval"]]
};__obj__1["when"]=async function(...args) {
    let condition;
    let mbody;
    condition=(args && args["0"]);
    mbody=await (await Environment.get_global("slice"))(args,1);
    return ["=:if",condition,["=:do",].concat(mbody)]
};__obj__1["if_compile_time_defined"]=async function(quoted_symbol,exists_form,not_exists_form) {
    if (check_true (await (await Environment.get_global("describe"))(quoted_symbol))){
        return exists_form
    } else {
        return (not_exists_form|| [])
    }
};__obj__1["defexternal"]=async function(name,value) {
    return ["=:let",[["=:symname",["=:desym",].concat(name)]],["=:do",["=:set_prop","=:globalThis","=:symname",value],["=:prop","=:globalThis","=:symname"]]]
};__obj__1["defun"]=async function(name,lambda_list,body,meta) {
    let fn_name;
    let fn_args;
    let fn_body;
    let fn_meta;
    let complex_lambda_list;
    let symbol_details;
    let source_details;
    fn_name=name;
    fn_args=lambda_list;
    fn_body=body;
    fn_meta=meta;
    complex_lambda_list=await (async function(){
         return await (await Environment.get_global("or_args"))(await (async function() {
            let __for_body__60=async function(elem) {
                return (await (await Environment.get_global("length"))(await (await Environment.get_global("flatten"))(await (await Environment.get_global("destructure_list"))(elem)))>0)
            };
            let __array__61=[],__elements__59=lambda_list;
            let __BREAK__FLAG__=false;
            for(let __iter__58 in __elements__59) {
                __array__61.push(await __for_body__60(__elements__59[__iter__58]));
                if(__BREAK__FLAG__) {
                     __array__61.pop();
                    break;
                    
                }
            }return __array__61;
             
        })()) 
    })();
    symbol_details=await (async function(){
         return await (await Environment.get_global("decomp_symbol"))(await (async function(){
             return await (await Environment.get_global("unquotify"))(name) 
        })()) 
    })();
    source_details=await (await Environment.get_global("add"))({
        name:(symbol_details && symbol_details["0"]),fn_args:await (await Environment.get_global("as_lisp"))(fn_args)
    },await (async function(){
        if (check_true (fn_meta)){
            {
                if (check_true ((fn_meta && fn_meta["description"]))){
                    await async function(){
                        fn_meta["description"]=(fn_meta && fn_meta["description"]);
                        return fn_meta;
                        
                    }()
                };
                return fn_meta
            }
        } else {
            return new Object()
        }
    })());
    if (check_true (complex_lambda_list)){
        return ["=:defglobal",fn_name,["=:fn",["&","=:args"],["=:destructuring_bind",fn_args,"=:args",fn_body]],["=:quote",source_details]]
    } else {
        return ["=:defglobal",fn_name,["=:fn",fn_args,fn_body],["=:quote",source_details]]
    }
};__obj__1["decomp_symbol"]=async function(quoted_sym,full_resolution) {
    let comps;
    let ns;
    comps=(quoted_sym).split("/");
    ns=null;
    return await async function(){
        if (check_true ((full_resolution&& ((comps && comps.length)===1)))) {
            {
                ns=await (await Environment.get_global("first"))(await (async function(){
                    let __collector;
                    let __result;
                    let __action;
                    __collector=[];
                    __result=null;
                    __action=async function(symdata) {
                        if (check_true (await (await Environment.get_global("not"))((symdata && symdata["require_ns"])))){
                            {
                                return (symdata && symdata["namespace"])
                            }
                        }
                    };
                    ;
                    await (async function() {
                        let __for_body__13=async function(__item) {
                            __result=await __action(__item);
                            if (check_true (__result)){
                                return (__collector).push(__result)
                            }
                        };
                        let __array__14=[],__elements__12=await (async function(){
                             return await (await Environment.get_global("describe"))(quoted_sym,true) 
                        })();
                        let __BREAK__FLAG__=false;
                        for(let __iter__11 in __elements__12) {
                            __array__14.push(await __for_body__13(__elements__12[__iter__11]));
                            if(__BREAK__FLAG__) {
                                 __array__14.pop();
                                break;
                                
                            }
                        }return __array__14;
                         
                    })();
                    return __collector
                })());
                return await (async function(){
                    let __array_op_rval__15=(comps && comps["0"]);
                     if (__array_op_rval__15 instanceof Function){
                        return await __array_op_rval__15(ns,false) 
                    } else {
                        return [__array_op_rval__15,ns,false]
                    }
                })()
            }
        } else if (check_true (((comps && comps.length)===1))) {
            return await (async function(){
                let __array_op_rval__16=(comps && comps["0"]);
                 if (__array_op_rval__16 instanceof Function){
                    return await __array_op_rval__16(await (await Environment.get_global("first"))(await (async function(){
                         return await (await Environment.get_global("each"))(await (async function(){
                             return await (await Environment.get_global("describe"))(quoted_sym,true) 
                        })(),"namespace") 
                    })()),false) 
                } else {
                    return [__array_op_rval__16,await (await Environment.get_global("first"))(await (async function(){
                         return await (await Environment.get_global("each"))(await (async function(){
                             return await (await Environment.get_global("describe"))(quoted_sym,true) 
                        })(),"namespace") 
                    })()),false]
                }
            })()
        } else {
            return await (async function(){
                let __array_op_rval__17=(comps && comps["1"]);
                 if (__array_op_rval__17 instanceof Function){
                    return await __array_op_rval__17((comps && comps["0"]),true) 
                } else {
                    return [__array_op_rval__17,(comps && comps["0"]),true]
                }
            })()
        }
    } ()
};__obj__1["defun_sync"]=async function(name,args,body,meta) {
    let fn_name;
    let fn_args;
    let fn_body;
    let source_details;
    fn_name=name;
    fn_args=args;
    fn_body=body;
    source_details=await (await Environment.get_global("add"))({
        name:await (async function(){
             return await (await Environment.get_global("unquotify"))(name) 
        })(),fn_args:await (await Environment.get_global("as_lisp"))(fn_args)
    },await (async function(){
        if (check_true (meta)){
            return meta
        } else {
            return new Object()
        }
    })());
    return ["=:do",["=:defglobal",fn_name,["=:function",fn_args,fn_body],["=:quote",source_details]]]
};__obj__1["macroexpand"]=async function(quoted_form) {
    let macro_name;
    let working_env;
    let meta;
    let macro_func;
    macro_name=await (async function() { try {
        return await (quoted_form && quoted_form["0"])["substr"].call((quoted_form && quoted_form["0"]),2)
    } catch (__exception__18) {
        if (__exception__18 instanceof Error) {
            let e=__exception__18;
            {
                throw new Error("macroexpand: unable to determine macro: is the form quoted?");
                
            }
        }
    }
})();
working_env=await Environment["get_namespace_handle"].call(Environment,await (await Environment.get_global("current_namespace"))());
meta=await (await Environment.get_global("first"))(await (await Environment.get_global("meta_for_symbol"))(macro_name,true));
macro_func=await working_env["get_global"].call(working_env,((meta && meta["namespace"])+ "/"+ macro_name));
if (check_true ((macro_func instanceof Function&& await (await Environment.get_global("resolve_path"))(["eval_when","compile_time"],meta)))){
    {
        return await (async function(){
            let __apply_args__19=await (async function(){
                 return await quoted_form["slice"].call(quoted_form,1) 
            })();
            return ( macro_func).apply(this,__apply_args__19)
        })()
    }
} else {
    return quoted_form
}
};__obj__1["macroexpand_all"]=async function(quoted_form) {
    return await (await Environment.get_global("detokenize"))(await (async function(){
         return await (await Environment.get_global("tokenize_lisp"))(quoted_form) 
    })())
};__obj__1["check_type"]=async function(thing,type_name,error_string) {
    if (check_true (error_string)){
        return ["=:if",["=:not",["=:==",["=:sub_type",thing],type_name]],["=:throw","=:TypeError",error_string]]
    } else {
        return ["=:if",["=:not",["=:==",["=:sub_type",thing],type_name]],["=:throw","=:TypeError",["=:+","invalid type: required ",type_name," but got ",["=:sub_type",thing]]]]
    }
};__obj__1["get_object_path"]=function(refname) {
        if (check_true ((( refname["indexOf"].call(refname,".")>-1)|| ( refname["indexOf"].call(refname,"[")>-1)))){
            {
                let chars;
                let comps;
                let mode;
                let name_acc;
                chars=(refname).split("");
                comps=[];
                mode=0;
                name_acc=[];
                 ( function() {
                    let __for_body__23=function(c) {
                        return   (function(){
                            if (check_true (((c===".")&& (mode===0)))) {
                                {
                                    if (check_true (((name_acc && name_acc.length)>0))){
                                        {
                                            (comps).push((name_acc).join(""))
                                        }
                                    };
                                    return name_acc=[]
                                }
                            } else if (check_true (((mode===0)&& (c==="[")))) {
                                {
                                    mode=1;
                                    if (check_true (((name_acc && name_acc.length)>0))){
                                        {
                                            (comps).push((name_acc).join(""))
                                        }
                                    };
                                    return name_acc=[]
                                }
                            } else if (check_true (((mode===1)&& (c==="]")))) {
                                {
                                    mode=0;
                                    (comps).push((name_acc).join(""));
                                    return name_acc=[]
                                }
                            } else {
                                return (name_acc).push(c)
                            }
                        } )()
                    };
                    let __array__24=[],__elements__22=chars;
                    let __BREAK__FLAG__=false;
                    for(let __iter__21 in __elements__22) {
                        __array__24.push( __for_body__23(__elements__22[__iter__21]));
                        if(__BREAK__FLAG__) {
                             __array__24.pop();
                            break;
                            
                        }
                    }return __array__24;
                     
                })();
                if (check_true (((name_acc && name_acc.length)>0))){
                    (comps).push((name_acc).join(""))
                };
                return comps
            }
        } else {
            return  ( function(){
                let __array_op_rval__25=refname;
                 if (__array_op_rval__25 instanceof Function){
                    return  __array_op_rval__25() 
                } else {
                    return [__array_op_rval__25]
                }
            })()
        }
    };__obj__1["do_deferred_splice"]=async function(tree) {
    let rval;
    let idx;
    let tval;
    let deferred_operator;
    rval=null;
    idx=0;
    tval=null;
    deferred_operator=(["=","$","&","!"]).join("");
    return await async function(){
        if (check_true ((tree instanceof Array))) {
            {
                rval=[];
                await (async function(){
                     let __test_condition__26=async function() {
                        return (idx<(tree && tree.length))
                    };
                    let __body_ref__27=async function() {
                        tval=tree[idx];
                        if (check_true ((tval===deferred_operator))){
                            {
                                idx+=1;
                                tval=tree[idx];
                                rval=await rval["concat"].call(rval,await (async function(){
                                     return await do_deferred_splice(tval) 
                                })())
                            }
                        } else {
                            (rval).push(await (async function(){
                                 return await do_deferred_splice(tval) 
                            })())
                        };
                        return idx+=1
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__26()) {
                         await __body_ref__27();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                return rval
            }
        } else if (check_true ((tree instanceof Object))) {
            {
                rval=new Object();
                await (async function() {
                    let __for_body__30=async function(pset) {
                        return await async function(){
                            rval[(pset && pset["0"])]=await (async function(){
                                 return await do_deferred_splice((pset && pset["1"])) 
                            })();
                            return rval;
                            
                        }()
                    };
                    let __array__31=[],__elements__29=await (await Environment.get_global("pairs"))(tree);
                    let __BREAK__FLAG__=false;
                    for(let __iter__28 in __elements__29) {
                        __array__31.push(await __for_body__30(__elements__29[__iter__28]));
                        if(__BREAK__FLAG__) {
                             __array__31.pop();
                            break;
                            
                        }
                    }return __array__31;
                     
                })();
                return rval
            }
        } else {
            return tree
        }
    } ()
};__obj__1["define"]=async function(...args) {
    let defs;
    defs=await (await Environment.get_global("slice"))(args,0);
    {
        let acc;
        let symname;
        acc=await (async function(){
             return ["=:progl"] 
        })();
        symname=null;
        await (async function() {
            let __for_body__35=async function(defset) {
                (acc).push(await (async function(){
                     return ["=:defvar",(defset && defset["0"]),(defset && defset["1"])] 
                })());
                symname=(defset && defset["0"]);
                (acc).push(await (async function(){
                     return ["=:set_prop",await (async function(){
                         return "=:Environment.global_ctx.scope" 
                    })(),(""+ await (await Environment.get_global("as_lisp"))(symname)),symname] 
                })());
                if (check_true (((defset && defset["2"]) instanceof Object))){
                    {
                        return (acc).push(await (async function(){
                             return [["=:set_prop",await (async function(){
                                 return "=:Environment.definitions" 
                            })(),(""+ await (await Environment.get_global("as_lisp"))(symname)+ ""),(defset && defset["2"])]] 
                        })())
                    }
                }
            };
            let __array__36=[],__elements__34=defs;
            let __BREAK__FLAG__=false;
            for(let __iter__33 in __elements__34) {
                __array__36.push(await __for_body__35(__elements__34[__iter__33]));
                if(__BREAK__FLAG__) {
                     __array__36.pop();
                    break;
                    
                }
            }return __array__36;
             
        })();
        return acc
    }
};__obj__1["defbinding"]=async function(...args) {
    args=await (await Environment.get_global("slice"))(args,0);
    {
        let binding;
        let acc;
        binding=null;
        acc=await (async function(){
             return ["=:list"] 
        })();
        await (async function() {
            let __for_body__39=async function(bind_set) {
                return await async function(){
                    if (check_true (((bind_set instanceof Array)&& (((bind_set && bind_set.length)===2)|| ((bind_set && bind_set.length)===3))&& ((bind_set && bind_set["1"]) instanceof Array)&& ((bind_set && bind_set["1"] && bind_set["1"]["length"])===2)))) {
                        {
                            binding=await (async function(){
                                 return ["=:quotel",await (async function(){
                                     return ["=:bind",(bind_set && bind_set["1"] && bind_set["1"]["0"]),(bind_set && bind_set["1"] && bind_set["1"]["1"])] 
                                })()] 
                            })();
                            return (acc).push(await (async function(){
                                 return ["=:defglobal",((await Environment.get_global("*namespace*"))+ "/"+ await (async function(){
                                    let mval;
                                    mval=(bind_set && bind_set["0"]);
                                    if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                                        return await mval["substr"].call(mval,2)
                                    } else {
                                        return mval
                                    }
                                })()),await (async function(){
                                     return ["=:bind",(bind_set && bind_set["1"] && bind_set["1"]["0"]),(bind_set && bind_set["1"] && bind_set["1"]["1"])] 
                                })(),await (async function(){
                                    if (check_true (((bind_set && bind_set["2"]) instanceof Object))){
                                        return await (await Environment.get_global("add"))(new Object(),(bind_set && bind_set["2"]),{
                                            initializer:binding
                                        })
                                    } else {
                                        return {
                                            initializer:binding
                                        }
                                    }
                                })()] 
                            })())
                        }
                    } else {
                        throw new SyntaxError("defbinding received malform arguments");
                        
                    }
                } ()
            };
            let __array__40=[],__elements__38=args;
            let __BREAK__FLAG__=false;
            for(let __iter__37 in __elements__38) {
                __array__40.push(await __for_body__39(__elements__38[__iter__37]));
                if(__BREAK__FLAG__) {
                     __array__40.pop();
                    break;
                    
                }
            }return __array__40;
             
        })();
        return acc
    }
};__obj__1["define_env"]=async function(...args) {
    let defs;
    defs=await (await Environment.get_global("slice"))(args,0);
    {
        let acc;
        let symname;
        acc=await (async function(){
             return ["=:progl"] 
        })();
        symname=null;
        await (async function() {
            let __for_body__43=async function(defset) {
                (acc).push(await (async function(){
                     return ["=:defvar",(defset && defset["0"]),(defset && defset["1"])] 
                })());
                symname=(defset && defset["0"]);
                (acc).push(await (async function(){
                     return ["=:set_prop",await (async function(){
                         return "=:Environment.global_ctx.scope" 
                    })(),(""+ await (await Environment.get_global("as_lisp"))(symname)),symname] 
                })());
                if (check_true (((defset && defset["2"]) instanceof Object))){
                    return (acc).push(await (async function(){
                         return [["=:set_prop",await (async function(){
                             return "=:Environment.definitions" 
                        })(),(""+ await (await Environment.get_global("as_lisp"))(symname)+ ""),await (await Environment.get_global("add"))({
                            core_lang:true
                        },(defset && defset["2"]))]] 
                    })())
                } else {
                    return (acc).push(await (async function(){
                         return [["=:set_prop",await (async function(){
                             return "=:Environment.definitions" 
                        })(),(""+ await (await Environment.get_global("as_lisp"))(symname)+ ""),{
                            core_lang:true
                        }]] 
                    })())
                }
            };
            let __array__44=[],__elements__42=defs;
            let __BREAK__FLAG__=false;
            for(let __iter__41 in __elements__42) {
                __array__44.push(await __for_body__43(__elements__42[__iter__41]));
                if(__BREAK__FLAG__) {
                     __array__44.pop();
                    break;
                    
                }
            }return __array__44;
             
        })();
        return acc
    }
};__obj__1["type"]=async function(x) {
    return await async function(){
        if (check_true ((null===x))) {
            return "null"
        } else if (check_true ((undefined===x))) {
            return "undefined"
        } else if (check_true ((x instanceof Array))) {
            return "array"
        } else {
            return typeof x
        }
    } ()
};__obj__1["destructure_list"]=function(elems) {
        let idx;
        let acc;
        let passed_rest;
        let structure;
        let follow_tree;
        idx=0;
        acc=[];
        passed_rest=0;
        structure=elems;
        follow_tree=async function(elems,_path_prefix) {
            return   (function(){
                if (check_true ((passed_rest>0))) {
                    {
                        if (check_true ((passed_rest===1))){
                            (acc).push(_path_prefix)
                        };
                        return passed_rest+=1
                    }
                } else if (check_true ((elems instanceof Array))) {
                    return  ( Environment.get_global("map"))(async function(elem,idx) {
                        return  follow_tree(elem, ( Environment.get_global("add"))(_path_prefix,idx))
                    },elems)
                } else if (check_true ((elems instanceof Object))) {
                    return  ( function() {
                        let __for_body__47=function(pset) {
                            return  follow_tree((pset && pset["1"]), ( Environment.get_global("add"))(_path_prefix,(pset && pset["0"])))
                        };
                        let __array__48=[],__elements__46= ( Environment.get_global("pairs"))(elems);
                        let __BREAK__FLAG__=false;
                        for(let __iter__45 in __elements__46) {
                            __array__48.push( __for_body__47(__elements__46[__iter__45]));
                            if(__BREAK__FLAG__) {
                                 __array__48.pop();
                                break;
                                
                            }
                        }return __array__48;
                         
                    })()
                } else if (check_true (((elems instanceof String || typeof elems==='string')&& ("&"===elems)))) {
                    {
                        passed_rest+=1;
                        return (acc).push(["*",_path_prefix])
                    }
                } else {
                    return (acc).push(_path_prefix)
                }
            } )()
        };
         follow_tree(structure,[]);
        return acc
    };__obj__1["destructuring_bind"]=async function(...args) {
    let bind_vars;
    let expression;
    let forms;
    bind_vars=(args && args["0"]);
    expression=(args && args["1"]);
    forms=await (await Environment.get_global("slice"))(args,2);
    {
        let binding_vars;
        let preamble;
        let allocations;
        let passed_rest;
        let expr_result_var;
        let paths;
        let bound_expression;
        let acc;
        binding_vars=bind_vars;
        preamble=[];
        allocations=[];
        passed_rest=false;
        expr_result_var=("=:"+ "_expr_"+ await (await Environment.get_global("random_int"))(100000));
        paths=await (await Environment.get_global("destructure_list"))(binding_vars);
        bound_expression=await (async function(){
            if (check_true (((expression instanceof Array)&& await (await Environment.get_global("starts_with?"))("=:",(expression && expression["0"]))))){
                {
                    (allocations).push(await (async function(){
                         return [expr_result_var,expression] 
                    })());
                    return expr_result_var
                }
            } else {
                return expression
            }
        })();
        acc=await (async function(){
             return ["=:let"] 
        })();
        await (await Environment.get_global("assert"))(((bind_vars instanceof Array)&& await (async function(){
             return await (await Environment.get_global("is_value?"))(expression) 
        })()&& await (async function(){
             return await (await Environment.get_global("is_value?"))(forms) 
        })()),"destructuring_bind: requires 3 arguments");
        await (async function() {
            let __for_body__51=async function(idx) {
                if (check_true (("*"===await (await Environment.get_global("first"))(paths[idx])))){
                    {
                        (allocations).push(await (async function(){
                             return [await (await Environment.get_global("resolve_path"))(paths[await (await Environment.get_global("add"))(idx,1)],binding_vars),await (async function(){
                                 return await async function(){
                                    if (check_true ((bound_expression instanceof Object))) {
                                        return await (await Environment.get_global("slice"))(bound_expression,idx)
                                    } else {
                                        return ["=:slice",expression,await (await Environment.get_global("first"))(await (await Environment.get_global("second"))(paths[idx]))]
                                    }
                                } () 
                            })()] 
                        })());
                        return __BREAK__FLAG__=true;
                        return
                    }
                } else {
                    {
                        return (allocations).push(await (async function(){
                             return [await (await Environment.get_global("resolve_path"))(paths[idx],binding_vars),await (async function(){
                                 return await async function(){
                                    if (check_true ((bound_expression instanceof Object))) {
                                        return await (await Environment.get_global("resolve_path"))(paths[idx],bound_expression)
                                    } else {
                                        return (await (await Environment.get_global("conj"))(await (async function(){
                                            let __array_op_rval__53=bound_expression;
                                             if (__array_op_rval__53 instanceof Function){
                                                return await __array_op_rval__53() 
                                            } else {
                                                return [__array_op_rval__53]
                                            }
                                        })(),paths[idx])).join(".")
                                    }
                                } () 
                            })()] 
                        })())
                    }
                }
            };
            let __array__52=[],__elements__50=await (await Environment.get_global("range"))(await (await Environment.get_global("length"))(paths));
            let __BREAK__FLAG__=false;
            for(let __iter__49 in __elements__50) {
                __array__52.push(await __for_body__51(__elements__50[__iter__49]));
                if(__BREAK__FLAG__) {
                     __array__52.pop();
                    break;
                    
                }
            }return __array__52;
             
        })();
        (acc).push(allocations);
        acc=await (await Environment.get_global("conj"))(acc,forms);
        return acc
    }
};__obj__1["split_by_recurse"]=function(token,container) {
        return   (function(){
            if (check_true ((container instanceof String || typeof container==='string'))) {
                return (container).split(token)
            } else if (check_true ((container instanceof Array))) {
                return  ( Environment.get_global("map"))(async function(elem) {
                    return  ( Environment.get_global("split_by_recurse"))(token,elem)
                },container)
            }
        } )()
    };__obj__1["defun_sync_ds"]=async function(name,lambda_list,body,meta) {
    let fn_name;
    let fn_args;
    let fn_body;
    let fn_meta;
    let complex_lambda_list;
    let symbol_details;
    let source_details;
    fn_name=name;
    fn_args=lambda_list;
    fn_body=body;
    fn_meta=meta;
    complex_lambda_list=await (async function(){
         return await (await Environment.get_global("or_args"))(await (async function() {
            let __for_body__65=async function(elem) {
                return (await (await Environment.get_global("length"))(await (await Environment.get_global("flatten"))(await (await Environment.get_global("destructure_list"))(elem)))>0)
            };
            let __array__66=[],__elements__64=lambda_list;
            let __BREAK__FLAG__=false;
            for(let __iter__63 in __elements__64) {
                __array__66.push(await __for_body__65(__elements__64[__iter__63]));
                if(__BREAK__FLAG__) {
                     __array__66.pop();
                    break;
                    
                }
            }return __array__66;
             
        })()) 
    })();
    symbol_details=await (async function(){
         return await (await Environment.get_global("decomp_symbol"))(await (async function(){
             return await (await Environment.get_global("unquotify"))(name) 
        })()) 
    })();
    source_details=await (await Environment.get_global("add"))({
        name:(symbol_details && symbol_details["0"]),fn_args:await (await Environment.get_global("as_lisp"))(fn_args)
    },await (async function(){
        if (check_true (fn_meta)){
            {
                if (check_true ((fn_meta && fn_meta["description"]))){
                    await async function(){
                        fn_meta["description"]=(fn_meta && fn_meta["description"]);
                        return fn_meta;
                        
                    }()
                };
                return fn_meta
            }
        } else {
            return new Object()
        }
    })());
    if (check_true (complex_lambda_list)){
        return ["=:defglobal",fn_name,["=:function",["&","=:args"],["=:destructuring_bind",fn_args,"=:args",fn_body]],["=:quote",source_details]]
    } else {
        return ["=:defglobal",fn_name,["=:function",fn_args,fn_body],["=:quote",source_details]]
    }
};__obj__1["no_await"]=async function(form) {
    return ["=:progn",["=:defvar","=:__SYNCF__",true],form]
};__obj__1["reduce"]=async function(...args) {
    let elem;
    let item_list;
    let form;
    elem=(args && args["0"] && args["0"]["0"]);
    item_list=(args && args["0"] && args["0"]["1"]);
    form=(args && args["1"]);
    return ["=:let",[["=:__collector",[]],["=:__result","=:nil"],["=:__action",["=:fn",[].concat(elem),form]]],["=:declare",["=:function","=:__action"]],["=:for_each",["=:__item",item_list],["=:do",["=:=","=:__result",["=:__action","=:__item"]],["=:if","=:__result",["=:push","=:__collector","=:__result"]]]],"=:__collector"]
};__obj__1["reduce_sync"]=async function(...args) {
    let elem;
    let item_list;
    let form;
    elem=(args && args["0"] && args["0"]["0"]);
    item_list=(args && args["0"] && args["0"]["1"]);
    form=(args && args["1"]);
    return ["=:let",[["=:__collector",[]],["=:__result","=:nil"],["=:__action",["=:function",[].concat(elem),form]]],["=:declare",["=:function","=:__action"]],["=:for_each",["=:__item",item_list],["=:do",["=:=","=:__result",["=:__action","=:__item"]],["=:if","=:__result",["=:push","=:__collector","=:__result"]]]],"=:__collector"]
};__obj__1["bind_function"]=function anonymous(func,this_arg
) {
{ return func.bind(this_arg) }
};__obj__1["is_error?"]=function(val) {
        return (val instanceof Error)
    };__obj__1["is_reference?"]=async function(val) {
    return ["=:and",["=:is_string?",val],["=:>",["=:length",val],2],["=:starts_with?",["=:quote","=:"],val]]
};__obj__1["scan_str"]=function(regex,search_string) {
        let result;
        let last_result;
        let totals;
        let strs;
        result=null;
        last_result=new Object();
        totals=[];
        strs=(""+ search_string);
        if (check_true ( ( Environment.get_global("is_regex?"))(regex))){
            try {
                  (function(){
                    regex["lastIndex"]=0;
                    return regex;
                    
                })();
                 ( function(){
                     let __test_condition__70=function() {
                        result= regex["exec"].call(regex,strs);
                        return ( ( Environment.get_global("not"))(((result && result["index"])===(last_result && last_result["index"])))&& result)
                    };
                    let __body_ref__71=function() {
                        last_result=result;
                        return (totals).push( ( Environment.get_global("to_object"))( ( function() {
                            let __for_body__74=function(v) {
                                return  ( function(){
                                    let __array_op_rval__76=v;
                                     if (__array_op_rval__76 instanceof Function){
                                        return  __array_op_rval__76(result[v]) 
                                    } else {
                                        return [__array_op_rval__76,result[v]]
                                    }
                                })()
                            };
                            let __array__75=[],__elements__73= ( Environment.get_global("keys"))(result);
                            let __BREAK__FLAG__=false;
                            for(let __iter__72 in __elements__73) {
                                __array__75.push( __for_body__74(__elements__73[__iter__72]));
                                if(__BREAK__FLAG__) {
                                     __array__75.pop();
                                    break;
                                    
                                }
                            }return __array__75;
                             
                        })()))
                    };
                    let __BREAK__FLAG__=false;
                    while( __test_condition__70()) {
                          __body_ref__71();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })()
            } catch (__exception__68) {
                if (__exception__68 instanceof Error) {
                    let e=__exception__68;
                    {
                        console.log((e && e.message))
                    }
                }
            }
        } else {
            throw new Error(new ReferenceError(("scan_str: invalid RegExp provided: "+ regex)));
            
        };
        return totals
    };__obj__1["remove_prop"]=async function(obj,key) {
    if (check_true (await (await Environment.get_global("not"))((undefined===obj[key])))){
        {
            {
                let val;
                val=obj[key];
                await (await Environment.get_global("delete_prop"))(obj,key);
                return val
            }
        }
    }
};__obj__1["object_methods"]=async function(obj) {
    let properties;
    let current_obj;
    properties=new Set();
    current_obj=obj;
    await (async function(){
         let __body_ref__270=async function() {
            await (await Environment.get_global("map"))(async function(item) {
                return await properties["add"].call(properties,item)
            },await Object.getOwnPropertyNames(current_obj));
            return current_obj=await Object.getPrototypeOf(current_obj)
        };
        let __BREAK__FLAG__=false;
        while(current_obj) { await __body_ref__270();
         if(__BREAK__FLAG__) {
             break;
            
        }
    } ;
    
})();
return await (async function() {
    {
         let __call_target__=await Array.from(await properties["keys"]()), __call_method__="filter";
        return await __call_target__[__call_method__].call(__call_target__,async function(item) {
            return item instanceof Function
        })
    } 
})()
};__obj__1["expand_dot_accessor"]=async function(val,ctx) {
    let comps;
    let find_in_ctx;
    let reference;
    let idx;
    let val_type;
    comps=(val).split(".");
    find_in_ctx=async function(the_ctx) {
        return await async function(){
            if (check_true (await (async function(){
                let __targ__79=(the_ctx && the_ctx["scope"]);
                if (__targ__79){
                     return(__targ__79)[reference]
                } 
            })())) {
                return await (async function(){
                    let __targ__80=(the_ctx && the_ctx["scope"]);
                    if (__targ__80){
                         return(__targ__80)[reference]
                    } 
                })()
            } else if (check_true ((the_ctx && the_ctx["parent"]))) {
                return await find_in_ctx((the_ctx && the_ctx["parent"]))
            }
        } ()
    };
    reference=(comps).shift();
    idx=0;
    val_type=await find_in_ctx(ctx);
    return await async function(){
        if (check_true ((0===(comps && comps.length)))) {
            return reference
        } else if (check_true (((val_type instanceof Object)&& await (await Environment.get_global("contains?"))((comps && comps["0"]),await (async function(){
             return await (await Environment.get_global("object_methods"))(val_type) 
        })())&& await (await Environment.get_global("not"))(await val_type["propertyIsEnumerable"].call(val_type,(comps && comps["0"])))))) {
            return val
        } else {
            return (await (await Environment.get_global("conj"))(await (async function(){
                let __array_op_rval__81=reference;
                 if (__array_op_rval__81 instanceof Function){
                    return await __array_op_rval__81() 
                } else {
                    return [__array_op_rval__81]
                }
            })(),await (await Environment.get_global("flatten"))(await (async function() {
                let __for_body__84=async function(comp) {
                    idx+=1;
                    if (check_true (((idx===1)&& (reference==="this")))){
                        return [".",comp]
                    } else {
                        if (check_true (await (await Environment.get_global("is_number?"))(comp))){
                            return ["[",comp,"]"]
                        } else {
                            return ["[\"",comp,"\"]"]
                        }
                    }
                };
                let __array__85=[],__elements__83=comps;
                let __BREAK__FLAG__=false;
                for(let __iter__82 in __elements__83) {
                    __array__85.push(await __for_body__84(__elements__83[__iter__82]));
                    if(__BREAK__FLAG__) {
                         __array__85.pop();
                        break;
                        
                    }
                }return __array__85;
                 
            })()))).join("")
        }
    } ()
};__obj__1["from_mixed_case"]=function(mixed_case_key) {
        let tokens;
        let acc;
        let ccode;
        tokens= ( function(){
            if (check_true ((mixed_case_key instanceof String || typeof mixed_case_key==='string'))){
                return (mixed_case_key).split("")
            } else {
                throw new TypeError("from_mixed_case: key argument must be a string");
                
            }
        })();
        acc=[];
        ccode=null;
         ( function() {
            let __for_body__88=function(t) {
                ccode= t["charCodeAt"].call(t,0);
                if (check_true (((ccode>=65)&& (ccode<=90)))){
                    {
                        (acc).push("_");
                        return (acc).push((t).toLowerCase())
                    }
                } else {
                    return (acc).push(t)
                }
            };
            let __array__89=[],__elements__87=tokens;
            let __BREAK__FLAG__=false;
            for(let __iter__86 in __elements__87) {
                __array__89.push( __for_body__88(__elements__87[__iter__86]));
                if(__BREAK__FLAG__) {
                     __array__89.pop();
                    break;
                    
                }
            }return __array__89;
             
        })();
        return (acc).join("")
    };__obj__1["to_mixed_case"]=function(snake_case_key) {
        let tokens;
        let acc;
        let upmode;
        tokens= ( function(){
            if (check_true ((snake_case_key instanceof String || typeof snake_case_key==='string'))){
                return (snake_case_key).split("")
            } else {
                throw new TypeError("to_mixed_case: key argument must be a string");
                
            }
        })();
        acc=[];
        upmode=false;
         ( function() {
            let __for_body__92=function(t) {
                return   (function(){
                    if (check_true ((t==="_"))) {
                        return upmode=true
                    } else if (check_true (upmode)) {
                        {
                            (acc).push((t).toUpperCase());
                            return upmode=false
                        }
                    } else {
                        return (acc).push(t)
                    }
                } )()
            };
            let __array__93=[],__elements__91=tokens;
            let __BREAK__FLAG__=false;
            for(let __iter__90 in __elements__91) {
                __array__93.push( __for_body__92(__elements__91[__iter__90]));
                if(__BREAK__FLAG__) {
                     __array__93.pop();
                    break;
                    
                }
            }return __array__93;
             
        })();
        return (acc).join("")
    };__obj__1["new_ctx"]=async function(ctx) {
    let __new_ctx__94= async function(){
        return {
            scope:new Object(),parent:null
        }
    };
    {
        let new_ctx=await __new_ctx__94();
        ;
        if (check_true (ctx)){
            {
                await async function(){
                    new_ctx["parent"]=ctx;
                    return new_ctx;
                    
                }()
            }
        };
        return new_ctx
    }
};__obj__1["getf_ctx"]=async function(ctx,name,_value) {
    if (check_true ((ctx&& (name instanceof String || typeof name==='string')))){
        return await async function(){
            if (check_true (await (await Environment.get_global("not"))((undefined===await (async function(){
                let __targ__96=(ctx && ctx["scope"]);
                if (__targ__96){
                     return(__targ__96)[name]
                } 
            })())))) {
                if (check_true (await (await Environment.get_global("not"))((_value===undefined)))){
                    {
                        await async function(){
                            let __target_obj__97=(ctx && ctx["scope"]);
                            __target_obj__97[name]=_value;
                            return __target_obj__97;
                            
                        }();
                        return _value
                    }
                } else {
                    return await (async function(){
                        let __targ__98=(ctx && ctx["scope"]);
                        if (__targ__98){
                             return(__targ__98)[name]
                        } 
                    })()
                }
            } else if (check_true ((ctx && ctx["parent"]))) {
                return await (await Environment.get_global("getf_ctx"))((ctx && ctx["parent"]),name,_value)
            } else {
                return undefined
            }
        } ()
    } else {
        throw new Error("invalid call to getf_ctx: missing argument/s");
        
    }
};__obj__1["setf_ctx"]=async function(ctx,name,value) {
    let found_val;
    found_val=await (async function(){
         return await (await Environment.get_global("getf_ctx"))(ctx,name,value) 
    })();
    if (check_true ((found_val===undefined))){
        await async function(){
            let __target_obj__99=(ctx && ctx["scope"]);
            __target_obj__99[name]=value;
            return __target_obj__99;
            
        }()
    };
    return value
};__obj__1["set_path"]=async function(path,obj,value) {
    let fpath;
    let idx;
    let rpath;
    let target_obj;
    fpath=await (async function(){
         return await clone(path) 
    })();
    idx=(fpath).pop();
    rpath=fpath;
    target_obj=null;
    target_obj=await (await Environment.get_global("resolve_path"))(rpath,obj);
    if (check_true (target_obj)){
        {
            return await async function(){
                target_obj[idx]=value;
                return target_obj;
                
            }()
        }
    } else {
        throw new RangeError(("set_path: invalid path: "+ path));
        
    }
};__obj__1["make_path"]=async function(target_path,root_obj,value,_pos) {
    let segment;
    let cval;
    let pos;
    target_path=await (async function(){
        if (check_true (_pos)){
            return target_path
        } else {
            return await clone(target_path)
        }
    })();
    segment=(target_path).shift();
    cval=null;
    pos=(_pos|| []);
    (pos).push(segment);
    return await async function(){
        if (check_true (((target_path && target_path.length)===0))) {
            {
                await (await Environment.get_global("set_path"))(pos,root_obj,value);
                return value
            }
        } else if (check_true (cval=await (await Environment.get_global("resolve_path"))(pos,root_obj))) {
            return await async function(){
                if (check_true (((cval instanceof Object)&& ((null==cval[await (await Environment.get_global("first"))(target_path)])|| (cval[await (await Environment.get_global("first"))(target_path)] instanceof Object)|| ((target_path && target_path.length)===1))))) {
                    return await (await Environment.get_global("make_path"))(target_path,root_obj,value,pos)
                } else {
                    throw new TypeError(("make_path: non-object encountered at "+ await (await Environment.get_global("as_lisp"))(await (await Environment.get_global("add"))(pos,await (await Environment.get_global("first"))(target_path)))));
                    
                }
            } ()
        } else {
            {
                await (await Environment.get_global("set_path"))(pos,root_obj,new Object());
                return await (await Environment.get_global("make_path"))(target_path,root_obj,value,pos)
            }
        }
    } ()
};__obj__1["minmax"]=async function(container) {
    let value_found=false;
    ;
    let smallest=(await Environment.get_global("MAX_SAFE_INTEGER"));
    ;
    let biggest=(-1* (await Environment.get_global("MAX_SAFE_INTEGER")));
    ;
    if (check_true ((container&& (container instanceof Array)&& (await (await Environment.get_global("length"))(container)>0)))){
        {
            await (async function() {
                let __for_body__24=async function(value) {
                    return (await (await Environment.get_global("is_number?"))(value)&& await (async function(){
                        value_found=true;
                        smallest=await Math.min(value,smallest);
                        return biggest=await Math.max(value,biggest)
                    })())
                };
                let __array__25=[],__elements__23=container;
                let __BREAK__FLAG__=false;
                for(let __iter__22 in __elements__23) {
                    __array__25.push(await __for_body__24(__elements__23[__iter__22]));
                    if(__BREAK__FLAG__) {
                         __array__25.pop();
                        break;
                        
                    }
                }return __array__25;
                 
            })();
            if (check_true (value_found)){
                return await (async function(){
                    let __array_op_rval__26=smallest;
                     if (__array_op_rval__26 instanceof Function){
                        return await __array_op_rval__26(biggest) 
                    } else {
                        return [__array_op_rval__26,biggest]
                    }
                })()
            } else {
                return null
            }
        }
    } else {
        return null
    }
};__obj__1["aif"]=async function(test_expr,eval_when_true,eval_when_false) {
    return ["=:let",[["=:it",test_expr]],["=:if","=:it",eval_when_true,eval_when_false]]
};__obj__1["ifa"]=async function(test,thenclause,elseclause) {
    return ["=:let",[["=:it",test]],["=:if","=:it",thenclause,elseclause]]
};__obj__1["map_range"]=function(n,from_range,to_range) {
        ;
        return ((to_range && to_range["0"])+ (((n- (from_range && from_range["0"]))/ ((from_range && from_range["1"])- (from_range && from_range["0"])))* ((to_range && to_range["1"])- (to_range && to_range["0"]))))
    };__obj__1["range_inc"]=function(start,end,step) {
        if (check_true (end)){
            return  ( Environment.get_global("range"))(start, ( Environment.get_global("add"))(end,1),step)
        } else {
            return  ( Environment.get_global("range"))( ( Environment.get_global("add"))(start,1))
        }
    };__obj__1["HSV_to_RGB"]=async function(h,s,v) {
     {
             var r, g, b, i, f, p, q, t;
             if (arguments.length === 1) {
                s = h.s, v = h.v, h = h.h;
             }
             i = Math.floor(h * 6);
             f = h * 6 - i;
             p = v * (1 - s);
             q = v * (1 - f * s);
             t = v * (1 - (1 - f) * s);
             switch (i % 6) {
                              case 0: r = v, g = t, b = p; break;
                              case 1: r = q, g = v, b = p; break;
                              case 2: r = p, g = v, b = t; break;
                              case 3: r = p, g = q, b = v; break;
                              case 4: r = t, g = p, b = v; break;
                              case 5: r = v, g = p, b = q; break;
                              }
             return {
                      r: Math.round(r * 255),
                      g: Math.round(g * 255),
                      b: Math.round(b * 255)
                      }
             } 
};__obj__1["color_for_number"]=async function(num,saturation,brightness) {
    let h;
    let pos;
    let color_key;
    let rgb;
    let v;
    h=await Math.abs(await parseInt(num));
    pos=(8% h);
    color_key=[0,4,1,5,2,6,3,7];
    rgb=null;
    v=color_key[pos];
    ;
    h=await (await Environment.get_global("map_range"))(((20* h)% 360),[0,360],[0,1]);
    v=await (await Environment.get_global("map_range"))([v,[0,7],[0.92,1]]);
    rgb=await (async function(){
         return await (await Environment.get_global("HSV_to_RGB"))(h,saturation,brightness) 
    })();
    return ("#"+ await (async function() {
        {
             let __call_target__=await (rgb && rgb["r"])["toString"].call((rgb && rgb["r"]),16), __call_method__="padStart";
            return await __call_target__[__call_method__].call(__call_target__,2,"0")
        } 
    })()+ await (async function() {
        {
             let __call_target__=await (rgb && rgb["g"])["toString"].call((rgb && rgb["g"]),16), __call_method__="padStart";
            return await __call_target__[__call_method__].call(__call_target__,2,"0")
        } 
    })()+ await (async function() {
        {
             let __call_target__=await (rgb && rgb["b"])["toString"].call((rgb && rgb["b"]),16), __call_method__="padStart";
            return await __call_target__[__call_method__].call(__call_target__,2,"0")
        } 
    })())
};__obj__1["flatten_ctx"]=async function(ctx,_var_table) {
    let var_table;
    let ctx_keys;
    var_table=(_var_table|| new Object());
    ctx_keys=await (await Environment.get_global("keys"))(var_table);
    if (check_true ((ctx && ctx["scope"]))){
        {
            await (async function() {
                let __for_body__108=async function(k) {
                    if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("contains?"))(k,ctx_keys)))){
                        {
                            return await async function(){
                                var_table[k]=await (async function(){
                                    let __targ__111=(ctx && ctx["scope"]);
                                    if (__targ__111){
                                         return(__targ__111)[k]
                                    } 
                                })();
                                return var_table;
                                
                            }()
                        }
                    }
                };
                let __array__109=[],__elements__107=await (await Environment.get_global("keys"))((ctx && ctx["scope"]));
                let __BREAK__FLAG__=false;
                for(let __iter__106 in __elements__107) {
                    __array__109.push(await __for_body__108(__elements__107[__iter__106]));
                    if(__BREAK__FLAG__) {
                         __array__109.pop();
                        break;
                        
                    }
                }return __array__109;
                 
            })();
            if (check_true ((ctx && ctx["parent"]))){
                {
                    await (await Environment.get_global("flatten_ctx"))((ctx && ctx["parent"]),var_table)
                }
            };
            return var_table
        }
    }
};__obj__1["identify_symbols"]=async function(quoted_form,_state) {
    let acc;
    acc=[];
    _state=await (async function(){
        if (check_true (_state)){
            return _state
        } else {
            return new Object()
        }
    })();
    debugger;
    ;
    await async function(){
        if (check_true ((quoted_form instanceof Array))) {
            {
                return await (async function() {
                    let __for_body__114=async function(elem) {
                        return (acc).push(await (async function(){
                             return await (await Environment.get_global("identify_symbols"))(elem,_state) 
                        })())
                    };
                    let __array__115=[],__elements__113=quoted_form;
                    let __BREAK__FLAG__=false;
                    for(let __iter__112 in __elements__113) {
                        __array__115.push(await __for_body__114(__elements__113[__iter__112]));
                        if(__BREAK__FLAG__) {
                             __array__115.pop();
                            break;
                            
                        }
                    }return __array__115;
                     
                })()
            }
        } else if (check_true (((quoted_form instanceof String || typeof quoted_form==='string')&& await (await Environment.get_global("starts_with?"))("=:",quoted_form)))) {
            (acc).push({
                name:await (await Environment.get_global("as_lisp"))(quoted_form),where:await (async function(){
                     return await (await Environment.get_global("describe"))(await (await Environment.get_global("as_lisp"))(quoted_form)) 
                })()
            })
        } else if (check_true ((quoted_form instanceof Object))) {
            await (async function() {
                let __for_body__118=async function(elem) {
                    return (acc).push(await (async function(){
                         return await (await Environment.get_global("identify_symbols"))(elem,_state) 
                    })())
                };
                let __array__119=[],__elements__117=await (await Environment.get_global("values"))(quoted_form);
                let __BREAK__FLAG__=false;
                for(let __iter__116 in __elements__117) {
                    __array__119.push(await __for_body__118(__elements__117[__iter__116]));
                    if(__BREAK__FLAG__) {
                         __array__119.pop();
                        break;
                        
                    }
                }return __array__119;
                 
            })()
        }
    } ();
    return ["=:quote",acc]
};__obj__1["unless"]=async function(...args) {
    let condition;
    let forms;
    condition=(args && args["0"]);
    forms=await (await Environment.get_global("slice"))(args,1);
    return ["=:if",["=:not",condition],["=:do",].concat(forms)]
};__obj__1["use_quoted_initializer"]=async function(...args) {
    let forms;
    forms=await (await Environment.get_global("slice"))(args,0);
    {
        let insert_initializer;
        insert_initializer=async function(form) {
            let meta=form[3];
            ;
            if (check_true ((null==form[3]))){
                meta=await async function(){
                    form[3]=new Object();
                    return form;
                    
                }()
            };
            return await async function(){
                if (check_true (((meta instanceof Array)&& (await (await Environment.get_global("resolve_path"))([3,1],form) instanceof Object)))) {
                    {
                        await (await Environment.get_global("set_path"))([3,1,"initializer"],form,await (async function(){
                             return ["=:quotel",await (async function(){
                                 return ["=:try",(form && form["2"]),["=:catch","=:Error",["=:e"],"=:e"]] 
                            })()] 
                        })());
                        return form
                    }
                } else if (check_true ((meta instanceof Object))) {
                    {
                        await async function(){
                            let __target_obj__121=(form && form["3"]);
                            __target_obj__121["initializer"]=await (async function(){
                                 return ["=:quotel",await (async function(){
                                     return ["=:try",(form && form["2"]),["=:catch","=:Error",["=:e"],"=:e"]] 
                                })()] 
                            })();
                            return __target_obj__121;
                            
                        }();
                        return form
                    }
                } else {
                    {
                        await (await Environment.get_global("warn"))("use_quoted_initializer: cannot quote ",await (async function(){
                            if (check_true (((form && form["2"]) instanceof String || typeof (form && form["2"])==='string'))){
                                return (form && form["2"])
                            } else {
                                return form
                            }
                        })());
                        return form
                    }
                }
            } ()
        };
        return await (async function() {
            let __for_body__124=async function(form) {
                form=await (async function(){
                     return await (await Environment.get_global("macroexpand"))(form) 
                })();
                if (check_true (((form instanceof Array)&& ((form && form["0"])==="=:defglobal")))){
                    {
                        return await insert_initializer(form)
                    }
                } else {
                    return form
                }
            };
            let __array__125=[],__elements__123=forms;
            let __BREAK__FLAG__=false;
            for(let __iter__122 in __elements__123) {
                __array__125.push(await __for_body__124(__elements__123[__iter__122]));
                if(__BREAK__FLAG__) {
                     __array__125.pop();
                    break;
                    
                }
            }return __array__125;
             
        })()
    }
};__obj__1["but_last"]=function(arr) {
        if (check_true ((arr instanceof Array))){
            return  ( Environment.get_global("slice"))(arr,0,((arr && arr.length)- 1))
        } else {
            throw new TypeError(("but_last: expected array, but received "+  ( Environment.get_global("sub_type"))(arr)));
            
        }
    };__obj__1["random_int"]=function(...args) {
        let top;
        let bottom;
        top=0;
        bottom=0;
        if (check_true (( ( Environment.get_global("length"))(args)>1))){
            {
                top= parseInt((args && args["1"]));
                bottom= parseInt((args && args["0"]))
            }
        } else {
            top= parseInt((args && args["0"]))
        };
        return  parseInt( ( Environment.get_global("add"))(( Math.random()* (top- bottom)),bottom))
    };__obj__1["resolve_multi_path"]=function(path,obj,not_found) {
        return   (function(){
            if (check_true ((obj instanceof Object))) {
                return   (function(){
                    if (check_true ((( ( Environment.get_global("length"))(path)===1)&& ("*"=== ( Environment.get_global("first"))(path))))) {
                        return (obj|| not_found)
                    } else if (check_true ((( ( Environment.get_global("length"))(path)===1)&& (obj[ ( Environment.get_global("first"))(path)] instanceof Object)))) {
                        return (obj[ ( Environment.get_global("first"))(path)]|| not_found)
                    } else if (check_true ((( ( Environment.get_global("length"))(path)===1)&&  ( Environment.get_global("not"))((obj[ ( Environment.get_global("first"))(path)] instanceof Object))&&  ( Environment.get_global("not"))((null==obj[ ( Environment.get_global("first"))(path)]))))) {
                        return obj[ ( Environment.get_global("first"))(path)]
                    } else if (check_true (((obj instanceof Array)&& ("*"=== ( Environment.get_global("first"))(path))))) {
                        return  ( function() {
                            let __for_body__128=function(val) {
                                return  ( Environment.get_global("resolve_multi_path"))( ( Environment.get_global("rest"))(path),val,not_found)
                            };
                            let __array__129=[],__elements__127=obj;
                            let __BREAK__FLAG__=false;
                            for(let __iter__126 in __elements__127) {
                                __array__129.push( __for_body__128(__elements__127[__iter__126]));
                                if(__BREAK__FLAG__) {
                                     __array__129.pop();
                                    break;
                                    
                                }
                            }return __array__129;
                             
                        })()
                    } else if (check_true (((obj instanceof Object)&& ("*"=== ( Environment.get_global("first"))(path))))) {
                        return  ( function() {
                            let __for_body__132=function(val) {
                                return  ( Environment.get_global("resolve_multi_path"))( ( Environment.get_global("rest"))(path),val,not_found)
                            };
                            let __array__133=[],__elements__131= ( Environment.get_global("values"))(obj);
                            let __BREAK__FLAG__=false;
                            for(let __iter__130 in __elements__131) {
                                __array__133.push( __for_body__132(__elements__131[__iter__130]));
                                if(__BREAK__FLAG__) {
                                     __array__133.pop();
                                    break;
                                    
                                }
                            }return __array__133;
                             
                        })()
                    } else if (check_true (( ( Environment.get_global("length"))(path)>1))) {
                        return  ( Environment.get_global("resolve_multi_path"))( ( Environment.get_global("rest"))(path),obj[ ( Environment.get_global("first"))(path)],not_found)
                    }
                } )()
            } else {
                return not_found
            }
        } )()
    };__obj__1["delete_path"]=function(path,obj) {
        let mpath;
        let key;
        let place_path;
        let place;
        mpath= ( function(){
             return  clone(path) 
        })();
        key=(mpath).pop();
        place_path=mpath;
        place=null;
        if (check_true ( ( Environment.get_global("not"))((path instanceof Array)))){
            {
                throw new TypeError("path must be an array when provided to delete_path");
                
            }
        };
        if (check_true ( ( Environment.get_global("not"))((obj instanceof Object)))){
            {
                throw new TypeError("Invalid object provided to delete_path");
                
            }
        };
        return   (function(){
            if (check_true ((( ( Environment.get_global("length"))(place_path)===0)&&  ( function(){
                 return  ( Environment.get_global("is_value?"))(key) 
            })()))) {
                {
                     ( Environment.get_global("delete_prop"))(obj,key);
                    return obj
                }
            } else if (check_true ((( ( Environment.get_global("length"))(place_path)>0)&&  ( function(){
                 return  ( Environment.get_global("is_value?"))(key) 
            })()))) {
                {
                    place= ( Environment.get_global("resolve_path"))(place_path,obj);
                    if (check_true ((place instanceof Object))){
                        {
                             ( Environment.get_global("delete_prop"))(place,key)
                        }
                    };
                    return obj
                }
            } else {
                throw new TypeError("delete_path: invalid path or object provided");
                
            }
        } )()
    };__obj__1["symbol_tree"]=async function(quoted_form,_state,_current_path) {
    let acc;
    let allocators;
    let uop;
    let get_allocations;
    let idx;
    let fval;
    let sym_paths;
    let is_root;
    acc=[];
    allocators={
        let:await (async function(){
             return [[1,"*",0]] 
        })(),defun:await (async function(){
             return [[1],[2,"*"]] 
        })()
    };
    uop=null;
    get_allocations=async function() {
        sym_paths=allocators[await (async function(){
             return await (await Environment.get_global("unquotify"))((quoted_form && quoted_form["0"])) 
        })()];
        if (check_true (sym_paths)){
            {
                return await (async function() {
                    let __for_body__136=async function(sym_path) {
                        fval=await (await Environment.get_global("resolve_multi_path"))(sym_path,quoted_form);
                        await console.log("Fval is: ",fval,"sym_path: ",sym_path,"current_path: ",_current_path," ",quoted_form);
                        uop=await (async function(){
                             return await (await Environment.get_global("unquotify"))((quoted_form && quoted_form["0"])) 
                        })();
                        if (check_true ((fval instanceof Array))){
                            return await (async function() {
                                let __for_body__140=async function(s) {
                                    s=await (async function(){
                                         return await (await Environment.get_global("unquotify"))(s) 
                                    })();
                                    if (check_true ((null==await (async function(){
                                        let __targ__142=(_state && _state["definitions"]);
                                        if (__targ__142){
                                             return(__targ__142)[fval]
                                        } 
                                    })()))){
                                        {
                                            await async function(){
                                                let __target_obj__143=(_state && _state["definitions"]);
                                                __target_obj__143[s]=[];
                                                return __target_obj__143;
                                                
                                            }()
                                        }
                                    };
                                    return (await (async function(){
                                        let __targ__144=(_state && _state["definitions"]);
                                        if (__targ__144){
                                             return(__targ__144)[s]
                                        } 
                                    })()).push({
                                        path:_current_path,op:uop
                                    })
                                };
                                let __array__141=[],__elements__139=fval;
                                let __BREAK__FLAG__=false;
                                for(let __iter__138 in __elements__139) {
                                    __array__141.push(await __for_body__140(__elements__139[__iter__138]));
                                    if(__BREAK__FLAG__) {
                                         __array__141.pop();
                                        break;
                                        
                                    }
                                }return __array__141;
                                 
                            })()
                        } else {
                            {
                                if (check_true ((null==await (async function(){
                                    let __targ__145=(_state && _state["definitions"]);
                                    if (__targ__145){
                                         return(__targ__145)[fval]
                                    } 
                                })()))){
                                    {
                                        await async function(){
                                            let __target_obj__146=(_state && _state["definitions"]);
                                            __target_obj__146[fval]=[];
                                            return __target_obj__146;
                                            
                                        }()
                                    }
                                };
                                return (await (async function(){
                                    let __targ__147=(_state && _state["definitions"]);
                                    if (__targ__147){
                                         return(__targ__147)[fval]
                                    } 
                                })()).push({
                                    path:_current_path,op:uop
                                })
                            }
                        }
                    };
                    let __array__137=[],__elements__135=sym_paths;
                    let __BREAK__FLAG__=false;
                    for(let __iter__134 in __elements__135) {
                        __array__137.push(await __for_body__136(__elements__135[__iter__134]));
                        if(__BREAK__FLAG__) {
                             __array__137.pop();
                            break;
                            
                        }
                    }return __array__137;
                     
                })()
            }
        }
    };
    idx=-1;
    fval=null;
    sym_paths=null;
    is_root=await (async function(){
        if (check_true ((_state==undefined))){
            return true
        } else {
            return false
        }
    })();
    _state=await (async function(){
        if (check_true (_state)){
            return _state
        } else {
            return {
                definitions:new Object()
            }
        }
    })();
    _current_path=(_current_path|| []);
    ;
    await console.log("symbol_tree: quoted_form: ",quoted_form,_current_path);
    await get_allocations();
    return await async function(){
        if (check_true ((quoted_form instanceof Array))) {
            {
                await (await Environment.get_global("map"))(async function(elem,idx) {
                    {
                        let it;
                        it=await (async function(){
                             return await (await Environment.get_global("symbol_tree"))(elem,_state,await (await Environment.get_global("conj"))(_current_path,idx)) 
                        })();
                        if (check_true (it)){
                            return (acc).push(it)
                        } else {
                            return 
                        }
                    }
                },quoted_form);
                if (check_true (is_root)){
                    return await (await Environment.get_global("add"))({
                        tree:acc
                    },_state)
                } else {
                    return acc
                }
            }
        } else if (check_true (((quoted_form instanceof String || typeof quoted_form==='string')&& await (await Environment.get_global("starts_with?"))("=:",quoted_form)))) {
            {
                return await (await Environment.get_global("unquotify"))(quoted_form)
            }
        } else if (check_true ((quoted_form instanceof Object))) {
            {
                await (async function() {
                    let __for_body__150=async function(pset) {
                        {
                            let it;
                            it=await (async function(){
                                 return await (await Environment.get_global("symbol_tree"))((pset && pset["1"]),_state,await (await Environment.get_global("conj"))(_current_path,await (async function(){
                                    let __array_op_rval__152=(pset && pset["1"]);
                                     if (__array_op_rval__152 instanceof Function){
                                        return await __array_op_rval__152() 
                                    } else {
                                        return [__array_op_rval__152]
                                    }
                                })())) 
                            })();
                            if (check_true (it)){
                                return (acc).push(it)
                            } else {
                                return 
                            }
                        }
                    };
                    let __array__151=[],__elements__149=await (await Environment.get_global("pairs"))(quoted_form);
                    let __BREAK__FLAG__=false;
                    for(let __iter__148 in __elements__149) {
                        __array__151.push(await __for_body__150(__elements__149[__iter__148]));
                        if(__BREAK__FLAG__) {
                             __array__151.pop();
                            break;
                            
                        }
                    }return __array__151;
                     
                })();
                if (check_true (is_root)){
                    return await (await Environment.get_global("add"))({
                        tree:acc
                    },_state)
                } else {
                    return acc
                }
            }
        }
    } ()
};__obj__1["except_nil"]=async function(items) {
    let acc=[];
    ;
    if (check_true (await (await Environment.get_global("not"))((await (await Environment.get_global("sub_type"))(items)==="array")))){
        items=[items]
    };
    await (async function() {
        let __for_body__60=async function(value) {
            if (check_true (await (await Environment.get_global("not"))((null==value)))){
                return (acc).push(value)
            }
        };
        let __array__61=[],__elements__59=items;
        let __BREAK__FLAG__=false;
        for(let __iter__58 in __elements__59) {
            __array__61.push(await __for_body__60(__elements__59[__iter__58]));
            if(__BREAK__FLAG__) {
                 __array__61.pop();
                break;
                
            }
        }return __array__61;
         
    })();
    return acc
};__obj__1["each"]=async function(items,property) {
    return await async function(){
        if (check_true (((property instanceof String || typeof property==='string')|| await (await Environment.get_global("is_number?"))(property)))) {
            return await (await Environment.get_global("except_nil"))(await (async function() {
                let __for_body__159=async function(item) {
                    if (check_true (item)){
                        {
                            return item[property]
                        }
                    }
                };
                let __array__160=[],__elements__158=(items|| []);
                let __BREAK__FLAG__=false;
                for(let __iter__157 in __elements__158) {
                    __array__160.push(await __for_body__159(__elements__158[__iter__157]));
                    if(__BREAK__FLAG__) {
                         __array__160.pop();
                        break;
                        
                    }
                }return __array__160;
                 
            })())
        } else if (check_true ((await (await Environment.get_global("sub_type"))(property)=="array"))) {
            {
                let __collector;
                let __result;
                let __action;
                __collector=[];
                __result=null;
                __action=async function(item) {
                    let nl=[];
                    ;
                    await (async function() {
                        let __for_body__163=async function(p) {
                            return await async function(){
                                if (check_true ((p instanceof Array))) {
                                    return (nl).push(await (await Environment.get_global("resolve_path"))(p,item))
                                } else if (check_true (p instanceof Function)) {
                                    return (nl).push(await (async function(){
                                        let __array_op_rval__165=p;
                                         if (__array_op_rval__165 instanceof Function){
                                            return await __array_op_rval__165(item) 
                                        } else {
                                            return [__array_op_rval__165,item]
                                        }
                                    })())
                                } else {
                                    return (nl).push(item[p])
                                }
                            } ()
                        };
                        let __array__164=[],__elements__162=property;
                        let __BREAK__FLAG__=false;
                        for(let __iter__161 in __elements__162) {
                            __array__164.push(await __for_body__163(__elements__162[__iter__161]));
                            if(__BREAK__FLAG__) {
                                 __array__164.pop();
                                break;
                                
                            }
                        }return __array__164;
                         
                    })();
                    return nl
                };
                ;
                await (async function() {
                    let __for_body__168=async function(__item) {
                        __result=await __action(__item);
                        if (check_true (__result)){
                            return (__collector).push(__result)
                        }
                    };
                    let __array__169=[],__elements__167=items;
                    let __BREAK__FLAG__=false;
                    for(let __iter__166 in __elements__167) {
                        __array__169.push(await __for_body__168(__elements__167[__iter__166]));
                        if(__BREAK__FLAG__) {
                             __array__169.pop();
                            break;
                            
                        }
                    }return __array__169;
                     
                })();
                return __collector
            }
        } else if (check_true ((await (await Environment.get_global("sub_type"))(property)=="AsyncFunction"))) {
            {
                let __collector;
                let __result;
                let __action;
                __collector=[];
                __result=null;
                __action=async function(item) {
                    return await (async function(){
                        let __array_op_rval__170=property;
                         if (__array_op_rval__170 instanceof Function){
                            return await __array_op_rval__170(item) 
                        } else {
                            return [__array_op_rval__170,item]
                        }
                    })()
                };
                ;
                await (async function() {
                    let __for_body__173=async function(__item) {
                        __result=await __action(__item);
                        if (check_true (__result)){
                            return (__collector).push(__result)
                        }
                    };
                    let __array__174=[],__elements__172=items;
                    let __BREAK__FLAG__=false;
                    for(let __iter__171 in __elements__172) {
                        __array__174.push(await __for_body__173(__elements__172[__iter__171]));
                        if(__BREAK__FLAG__) {
                             __array__174.pop();
                            break;
                            
                        }
                    }return __array__174;
                     
                })();
                return __collector
            }
        } else if (check_true ((await (await Environment.get_global("sub_type"))(property)=="Function"))) {
            {
                let __collector;
                let __result;
                let __action;
                __collector=[];
                __result=null;
                __action=async function(item) {
                    return await (async function(){
                        let __array_op_rval__175=property;
                         if (__array_op_rval__175 instanceof Function){
                            return await __array_op_rval__175(item) 
                        } else {
                            return [__array_op_rval__175,item]
                        }
                    })()
                };
                ;
                await (async function() {
                    let __for_body__178=async function(__item) {
                        __result=await __action(__item);
                        if (check_true (__result)){
                            return (__collector).push(__result)
                        }
                    };
                    let __array__179=[],__elements__177=items;
                    let __BREAK__FLAG__=false;
                    for(let __iter__176 in __elements__177) {
                        __array__179.push(await __for_body__178(__elements__177[__iter__176]));
                        if(__BREAK__FLAG__) {
                             __array__179.pop();
                            break;
                            
                        }
                    }return __array__179;
                     
                })();
                return __collector
            }
        } else {
            throw new TypeError(("each: strings, arrays, and functions can be provided for the property name or names to extract - received: "+ await (await Environment.get_global("sub_type"))(property)));
            
        }
    } ()
};__obj__1["replace"]=function(...args) {
        if (check_true (((args && args.length)<3))){
            throw new SyntaxError("Invalid syntax for replace: requires at least three arguments, target value or regex, the replacement value, and at least one value (object list or string)");
            
        } else {
            try {
                {
                    let target;
                    let replacement;
                    let work_values;
                    let value_type;
                    let sr_val;
                    let arg_value_type;
                    let rval;
                    target=(args && args["0"]);
                    replacement=(args && args["1"]);
                    work_values= ( Environment.get_global("slice"))(args,2);
                    value_type=null;
                    sr_val=null;
                    arg_value_type= subtype((args && args["2"]));
                    rval=[];
                     ( function() {
                        let __for_body__183=function(value) {
                            value_type= subtype(value);
                            if (check_true ((value_type==="Number"))){
                                {
                                    value_type="String";
                                    value=(""+ value)
                                }
                            };
                            return   (function(){
                                if (check_true ((value_type==="String"))) {
                                    return (rval).push( value["replace"].call(value,target,replacement))
                                } else if (check_true ((value_type==="array"))) {
                                    return  ( function() {
                                        let __for_body__187=function(elem) {
                                            return (rval).push( ( Environment.get_global("replace"))(target,replacement,elem))
                                        };
                                        let __array__188=[],__elements__186=value;
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__185 in __elements__186) {
                                            __array__188.push( __for_body__187(__elements__186[__iter__185]));
                                            if(__BREAK__FLAG__) {
                                                 __array__188.pop();
                                                break;
                                                
                                            }
                                        }return __array__188;
                                         
                                    })()
                                } else if (check_true ((value_type==="object"))) {
                                    {
                                        sr_val=new Object();
                                         ( function() {
                                            let __for_body__191=function(k) {
                                                if (check_true ( value["hasOwnProperty"].call(value,k))){
                                                    {
                                                        return   (function(){
                                                            sr_val[k]= ( Environment.get_global("replace"))(target,replacement,value[k]);
                                                            return sr_val;
                                                            
                                                        })()
                                                    }
                                                }
                                            };
                                            let __array__192=[],__elements__190= ( Environment.get_global("keys"))(value);
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__189 in __elements__190) {
                                                __array__192.push( __for_body__191(__elements__190[__iter__189]));
                                                if(__BREAK__FLAG__) {
                                                     __array__192.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__192;
                                             
                                        })();
                                        return rval= rval["concat"].call(rval,sr_val)
                                    }
                                }
                            } )()
                        };
                        let __array__184=[],__elements__182=work_values;
                        let __BREAK__FLAG__=false;
                        for(let __iter__181 in __elements__182) {
                            __array__184.push( __for_body__183(__elements__182[__iter__181]));
                            if(__BREAK__FLAG__) {
                                 __array__184.pop();
                                break;
                                
                            }
                        }return __array__184;
                         
                    })();
                    if (check_true (( ( Environment.get_global("not"))((arg_value_type==="array"))&&  ( Environment.get_global("not"))((arg_value_type==="object"))))){
                        return  ( Environment.get_global("first"))(rval)
                    } else {
                        return rval
                    }
                }
            } catch (__exception__180) {
                if (__exception__180 instanceof Error) {
                    let e=__exception__180;
                    {
                        return  console.error(("replace: "+ e))
                    }
                }
            }
        }
    };__obj__1["get_symbol_details_for_ns"]=function(namespace,symbol_name) {
        if (check_true (((namespace instanceof String || typeof namespace==='string')&& (symbol_name instanceof String || typeof symbol_name==='string')))){
            return  ( Environment.get_global("first"))( ( function(){
                let __collector;
                let __result;
                let __action;
                __collector=[];
                __result=null;
                __action=function(entry) {
                    if (check_true (((entry && entry["namespace"])===namespace))){
                        {
                            return entry
                        }
                    }
                };
                ;
                 ( function() {
                    let __for_body__196=function(__item) {
                        __result= __action(__item);
                        if (check_true (__result)){
                            return (__collector).push(__result)
                        }
                    };
                    let __array__197=[],__elements__195= ( Environment.get_global("meta_for_symbol"))(symbol_name,true);
                    let __BREAK__FLAG__=false;
                    for(let __iter__194 in __elements__195) {
                        __array__197.push( __for_body__196(__elements__195[__iter__194]));
                        if(__BREAK__FLAG__) {
                             __array__197.pop();
                            break;
                            
                        }
                    }return __array__197;
                     
                })();
                return __collector
            })())
        } else {
            throw new TypeError("get_symbol_for_ns: invalid arguments: must both be strings");
            
        }
    };__obj__1["env_encode_string"]=async function(text) {
    let te;
    let enc;
    let decl;
    let de;
    let bl;
    te=new TextEncoder();
    enc=await te["encode"].call(te,text);
    decl=[];
    de=new TextDecoder();
    bl=null;
    await (async function() {
        let __for_body__200=async function(b) {
            if (check_true ((b===92))){
                {
                    (decl).push(92);
                    (decl).push(92);
                    (decl).push(92);
                    return (decl).push(92)
                }
            } else {
                {
                    return (decl).push(b)
                }
            }
        };
        let __array__201=[],__elements__199=enc;
        let __BREAK__FLAG__=false;
        for(let __iter__198 in __elements__199) {
            __array__201.push(await __for_body__200(__elements__199[__iter__198]));
            if(__BREAK__FLAG__) {
                 __array__201.pop();
                break;
                
            }
        }return __array__201;
         
    })();
    return await de["decode"].call(de,new Uint8Array(decl))
};__obj__1["cl_encode_string"]=async function(text) {
    if (check_true ((text instanceof String || typeof text==='string'))){
        {
            let escaped;
            let nq;
            let step1;
            let snq;
            escaped=await (await Environment.get_global("replace"))(new RegExp("\n","g"),await (await Environment.get_global("add"))(await String.fromCharCode(92),"n"),text);
            escaped=await (await Environment.get_global("replace"))(new RegExp("\r","g"),await (await Environment.get_global("add"))(await String.fromCharCode(92),"r"),escaped);
            nq=(escaped).split(await String.fromCharCode(34));
            step1=(nq).join(await (await Environment.get_global("add"))(await String.fromCharCode(92),await String.fromCharCode(34)));
            snq=(step1).split(await String.fromCharCode(39));
            return step1
        }
    } else {
        return text
    }
};__obj__1["fn_signature"]=function(f) {
        if (check_true ((f instanceof Function|| (f instanceof String || typeof f==='string')))){
            {
                let sig;
                let arg_text;
                let comps;
                let descriptor;
                let fname;
                let ftype;
                let extends_class;
                let keyword_idx;
                let args;
                sig=( ( Environment.get_global("first"))(( ( Environment.get_global("replace"))("\n","", ( function(){
                    if (check_true (f instanceof Function)){
                        return  f["toString"]()
                    } else {
                        return f
                    }
                })())).split("{"))).trim();
                arg_text=null;
                comps=null;
                descriptor=null;
                fname=null;
                ftype=null;
                extends_class=null;
                keyword_idx=null;
                args=null;
                return   (function(){
                    if (check_true ( ( Environment.get_global("starts_with?"))("class",sig))) {
                        {
                            ftype="class";
                            descriptor=(sig).split(" ");
                            fname= ( Environment.get_global("second"))(descriptor);
                            if (check_true ((descriptor[3]==="extends"))){
                                extends_class=descriptor[4]
                            };
                            return {
                                name:fname,type:ftype,extends:extends_class
                            }
                        }
                    } else {
                        {
                            if (check_true (sig)){
                                {
                                    comps=(sig).split("(");
                                    descriptor=(( ( Environment.get_global("first"))(comps)|| "")).split(" ");
                                    arg_text=( ( Environment.get_global("chop"))( ( Environment.get_global("second"))(comps))|| "")
                                }
                            };
                            if (check_true (((descriptor && descriptor.length)>0))){
                                {
                                    keyword_idx= ( Environment.get_global("index_of"))("function",descriptor);
                                    if (check_true (keyword_idx)){
                                        {
                                            fname=( ( Environment.get_global("first"))( descriptor["slice"].call(descriptor,(keyword_idx+ 1),(keyword_idx+ 2)))|| "anonymous");
                                            ftype= ( function(){
                                                if (check_true ((keyword_idx===0))){
                                                    return "sync"
                                                } else {
                                                    return descriptor[(keyword_idx- 1)]
                                                }
                                            })()
                                        }
                                    }
                                }
                            };
                            if (check_true (arg_text)){
                                args= ( function() {
                                    let __for_body__204=function(a) {
                                        return (a).trim()
                                    };
                                    let __array__205=[],__elements__203=((arg_text).split(",")|| []);
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__202 in __elements__203) {
                                        __array__205.push( __for_body__204(__elements__203[__iter__202]));
                                        if(__BREAK__FLAG__) {
                                             __array__205.pop();
                                            break;
                                            
                                        }
                                    }return __array__205;
                                     
                                })()
                            } else {
                                args=[]
                            };
                            return {
                                name:fname,type:ftype,args:args
                            }
                        }
                    }
                } )()
            }
        } else {
            throw new TypeError("non-function supplied to fn_signature");
            
        }
    };__obj__1["path_to_js_syntax"]=async function(comps) {
    if (check_true ((comps instanceof Array))){
        if (check_true (((comps && comps.length)>1))){
            return (await (async function(){
                 return await (await Environment.get_global("map"))(async function(comp,idx) {
                    if (check_true ((idx===0))){
                        return comp
                    } else {
                        return await async function(){
                            if (check_true ((await isNaN(parseInt(comp))&& await (await Environment.get_global("starts_with?"))("\"",comp)))) {
                                return ("["+ comp+ "]")
                            } else if (check_true (await isNaN(parseInt(comp)))) {
                                return ("."+ comp)
                            } else {
                                return ("["+ "'"+ comp+ "'"+ "]")
                            }
                        } ()
                    }
                },comps) 
            })()).join("")
        } else {
            return (comps && comps["0"])
        }
    } else {
        throw new TypeError(("path_to_js_syntax: need array - given "+ await (await Environment.get_global("sub_type"))(comps)));
        
    }
};__obj__1["first_is_upper_case?"]=async function(str_val) {
    let rval=await str_val["match"].call(str_val,new RegExp("^[A-Z]"));
    ;
    if (check_true ((rval&& (rval && rval["0"])))){
        return true
    } else {
        return false
    }
};__obj__1["safe_access_2"]=async function(token,ctx,sanitizer_fn) {
    let comps;
    let acc;
    let acc_full;
    let pos;
    let rval;
    comps=null;
    acc=[];
    acc_full=[];
    pos=null;
    rval=null;
    comps=((token && token.name)).split(".");
    if (check_true (((comps && comps.length)===1))){
        return (token && token.name)
    } else {
        {
            await async function(){
                comps[0]=await (async function(){
                    let __array_op_rval__207=sanitizer_fn;
                     if (__array_op_rval__207 instanceof Function){
                        return await __array_op_rval__207((comps && comps["0"])) 
                    } else {
                        return [__array_op_rval__207,(comps && comps["0"])]
                    }
                })();
                return comps;
                
            }();
            await (async function(){
                 let __test_condition__208=async function() {
                    return ((comps && comps.length)>0)
                };
                let __body_ref__209=async function() {
                    (acc).push((comps).shift());
                    if (check_true (((comps && comps.length)>0))){
                        return (acc_full).push((["check_true(",await (async function(){
                             return await (await Environment.get_global("expand_dot_accessor"))((acc).join("."),ctx) 
                        })(),")"]).join(""))
                    } else {
                        return (acc_full).push(await (async function(){
                             return await (await Environment.get_global("expand_dot_accessor"))((acc).join("."),ctx) 
                        })())
                    }
                };
                let __BREAK__FLAG__=false;
                while(await __test_condition__208()) {
                     await __body_ref__209();
                     if(__BREAK__FLAG__) {
                         break;
                        
                    }
                } ;
                
            })();
            rval=await (await Environment.get_global("flatten"))(["(",(acc_full).join(" && "),")"]);
            return rval
        }
    }
};__obj__1["safe_access"]=async function(token,ctx,sanitizer_fn) {
    let comps;
    let acc;
    let acc_full;
    let pos;
    let rval;
    comps=null;
    acc=[];
    acc_full=[];
    pos=null;
    rval=null;
    comps=((token && token.name)).split(".");
    if (check_true (((comps && comps.length)===1))){
        return (token && token.name)
    } else {
        {
            await async function(){
                comps[0]=await (async function(){
                    let __array_op_rval__211=sanitizer_fn;
                     if (__array_op_rval__211 instanceof Function){
                        return await __array_op_rval__211((comps && comps["0"])) 
                    } else {
                        return [__array_op_rval__211,(comps && comps["0"])]
                    }
                })();
                return comps;
                
            }();
            await (async function(){
                 let __test_condition__212=async function() {
                    return ((comps && comps.length)>0)
                };
                let __body_ref__213=async function() {
                    (acc).push((comps).shift());
                    return (acc_full).push(await (async function(){
                         return await (await Environment.get_global("expand_dot_accessor"))((acc).join("."),ctx) 
                    })())
                };
                let __BREAK__FLAG__=false;
                while(await __test_condition__212()) {
                     await __body_ref__213();
                     if(__BREAK__FLAG__) {
                         break;
                        
                    }
                } ;
                
            })();
            rval=await (await Environment.get_global("flatten"))(["(",(acc_full).join(" && "),")"]);
            return rval
        }
    }
};__obj__1["compile_to_js"]=async function(quoted_form) {
    return ["=:->","=:Environment","compile",quoted_form]
};__obj__1["evaluate_compiled_source"]=async function(compiled_source) {
    return ["=:->","=:Environment","evaluate",compiled_source,"=:nil",{ "compiled_source":true
}]
};__obj__1["form_structure"]=async function(quoted_form,max_depth) {
    let idx;
    let acc;
    let structure;
    let follow_tree;
    idx=0;
    acc=[];
    max_depth=(max_depth|| (await Environment.get_global("MAX_SAFE_INTEGER")));
    structure=quoted_form;
    follow_tree=async function(elems,acc,_depth) {
        return await async function(){
            if (check_true ((((elems instanceof Array)|| (elems instanceof Object))&& (_depth>=max_depth)))) {
                if (check_true ((elems instanceof Array))){
                    return "array"
                } else {
                    return "object"
                }
            } else if (check_true ((elems instanceof Array))) {
                return await (await Environment.get_global("map"))(async function(elem,idx) {
                    return await follow_tree(elem,[],await (await Environment.get_global("add"))(_depth,1))
                },elems)
            } else if (check_true ((elems instanceof Object))) {
                {
                    return await (async function() {
                        let __for_body__216=async function(pset) {
                            return await follow_tree((pset && pset["1"]),[],await (await Environment.get_global("add"))(_depth,1))
                        };
                        let __array__217=[],__elements__215=await (await Environment.get_global("pairs"))(elems);
                        let __BREAK__FLAG__=false;
                        for(let __iter__214 in __elements__215) {
                            __array__217.push(await __for_body__216(__elements__215[__iter__214]));
                            if(__BREAK__FLAG__) {
                                 __array__217.pop();
                                break;
                                
                            }
                        }return __array__217;
                         
                    })()
                }
            } else {
                return await async function(){
                    if (check_true (((elems instanceof String || typeof elems==='string')&& await (await Environment.get_global("starts_with?"))("=:",elems)))) {
                        return "symbol"
                    } else if (check_true (await (await Environment.get_global("is_number?"))(elems))) {
                        return "number"
                    } else if (check_true ((elems instanceof String || typeof elems==='string'))) {
                        return "string"
                    } else if (check_true (((elems===true)|| (elems===false)))) {
                        return "boolean"
                    } else {
                        return elems
                    }
                } ()
            }
        } ()
    };
    return await follow_tree(structure,[],0)
};__obj__1["validate_form_structure"]=async function(validation_rules,quoted_form) {
    let results;
    let all_valid;
    let target;
    results={
        valid:[],invalid:[],rule_count:await (await Environment.get_global("length"))(validation_rules),all_passed:false
    };
    all_valid=null;
    target=null;
    await (async function() {
        let __for_body__220=async function(rule) {
            if (check_true (((rule instanceof Array)&& ((rule && rule.length)>1)&& ((rule && rule["0"]) instanceof Array)&& ((rule && rule["1"]) instanceof Array)))){
                {
                    all_valid=true;
                    target=await (await Environment.get_global("resolve_path"))((rule && rule["0"]),quoted_form);
                    await (async function() {
                        let __for_body__224=async function(validation) {
                            if (check_true (await (await Environment.get_global("not"))(await (async function(){
                                let __array_op_rval__226=validation;
                                 if (__array_op_rval__226 instanceof Function){
                                    return await __array_op_rval__226(target) 
                                } else {
                                    return [__array_op_rval__226,target]
                                }
                            })()))){
                                {
                                    all_valid=false;
                                    return __BREAK__FLAG__=true;
                                    return
                                }
                            }
                        };
                        let __array__225=[],__elements__223=(rule && rule["1"]);
                        let __BREAK__FLAG__=false;
                        for(let __iter__222 in __elements__223) {
                            __array__225.push(await __for_body__224(__elements__223[__iter__222]));
                            if(__BREAK__FLAG__) {
                                 __array__225.pop();
                                break;
                                
                            }
                        }return __array__225;
                         
                    })();
                    if (check_true (all_valid)){
                        return ((results && results["valid"])).push(((rule && rule["2"])|| (rule && rule["0"])))
                    } else {
                        return ((results && results["invalid"])).push(((rule && rule["2"])|| (rule && rule["0"])))
                    }
                }
            }
        };
        let __array__221=[],__elements__219=(validation_rules|| []);
        let __BREAK__FLAG__=false;
        for(let __iter__218 in __elements__219) {
            __array__221.push(await __for_body__220(__elements__219[__iter__218]));
            if(__BREAK__FLAG__) {
                 __array__221.pop();
                break;
                
            }
        }return __array__221;
         
    })();
    await async function(){
        results["all_passed"]=(await (await Environment.get_global("length"))((results && results["valid"]))===(results && results["rule_count"]));
        return results;
        
    }();
    return results
};__obj__1["*compiler_syntax_rules*"]={compile_let:await (async function(){ return [[[0,1,"val"],(function anonymous(x
) {
{ return x instanceof Array }
})(),"let allocation section"],await (async function(){ return [[0,2],await (async function(){ return (async function(v) {
                return await (await Environment.get_global("not"))((v===undefined))
            })() })(),"let missing block"] })()] })(),compile_cond:await (async function(){ return [[[0],await (async function(){ return (async function(v) {
            return ((await (await Environment.get_global("length"))(await (await Environment.get_global("rest"))(v))% 2)===0)
        })() })(),"cond: odd number of arguments"]] })(),compile_assignment:await (async function(){ return [[[0,1],await (async function(){ return (async function(v) {
            return await (await Environment.get_global("not"))((v===undefined))
        })() })(),"assignment is missing target and values"],await (async function(){ return [[0,2],await (async function(){ return (async function(v) {
                return await (await Environment.get_global("not"))((v===undefined))
            })() })(),"assignment is missing value"] })()] })()};__obj__1["tokenize_lisp"]=async function(quoted_source) {
    let current_env;
    current_env=await Environment["get_namespace_handle"].call(Environment,await (await Environment.get_global("current_namespace"))());
    return await (await Environment.get_global("compiler"))(quoted_source,{
        only_tokens:true,env:current_env
    })
};__obj__1["detokenize"]=async function(token) {
    let rval;
    rval=null;
    return await async function(){
        if (check_true ((token instanceof Array))) {
            return await (async function() {
                let __for_body__230=async function(t) {
                    return await (await Environment.get_global("detokenize"))(t)
                };
                let __array__231=[],__elements__229=token;
                let __BREAK__FLAG__=false;
                for(let __iter__228 in __elements__229) {
                    __array__231.push(await __for_body__230(__elements__229[__iter__228]));
                    if(__BREAK__FLAG__) {
                         __array__231.pop();
                        break;
                        
                    }
                }return __array__231;
                 
            })()
        } else if (check_true (((token instanceof Object)&& ((token && token["type"])==="objlit")&& ((token && token["val"] && token["val"]["name"])==="{}")))) {
            return new Object()
        } else if (check_true (((token instanceof Object)&& ((token && token["type"])==="objlit")))) {
            {
                rval=new Object();
                await (async function() {
                    let __for_body__234=async function(t) {
                        return await async function(){
                            rval[(t && t["val"] && t["val"]["0"] && t["val"]["0"]["name"])]=await (async function(){
                                 return await (await Environment.get_global("detokenize"))((t && t["val"] && t["val"]["1"])) 
                            })();
                            return rval;
                            
                        }()
                    };
                    let __array__235=[],__elements__233=(token && token["val"]);
                    let __BREAK__FLAG__=false;
                    for(let __iter__232 in __elements__233) {
                        __array__235.push(await __for_body__234(__elements__233[__iter__232]));
                        if(__BREAK__FLAG__) {
                             __array__235.pop();
                            break;
                            
                        }
                    }return __array__235;
                     
                })();
                return rval
            }
        } else if (check_true (((token instanceof Object)&& ((token && token["type"])==="literal")))) {
            return await (await Environment.get_global("detokenize"))((token && token["val"]))
        } else if (check_true (((token instanceof Object)&& ((token && token["type"])==="arr")&& (token && token["source"])&& ((token && token["val"] && token["val"]["0"] && token["val"]["0"]["type"])==="special")&& (token && token["val"] && token["val"]["0"] && token["val"]["0"]["ref"])))) {
            {
                return await (async function(){
                    let __array_op_rval__237=(token && token["val"] && token["val"]["0"] && token["val"]["0"]["val"]);
                     if (__array_op_rval__237 instanceof Function){
                        return await __array_op_rval__237((token && token["val"] && token["val"]["1"])) 
                    } else {
                        return [__array_op_rval__237,(token && token["val"] && token["val"]["1"])]
                    }
                })()
            }
        } else if (check_true (((token instanceof Object)&& (token && token["ref"])))) {
            return ("=:"+ (token && token.name))
        } else if (check_true (((token instanceof Object)&& ((token && token["type"])==="arr")))) {
            {
                return await (await Environment.get_global("detokenize"))((token && token["val"]))
            }
        } else if (check_true (((token instanceof Object)&& (token && token["ref"])))) {
            {
                return (token && token["val"])
            }
        } else if (check_true ((token instanceof Object))) {
            return await (await Environment.get_global("detokenize"))((token && token["val"]))
        } else {
            {
                return token
            }
        }
    } ()
};__obj__1["describe_all"]=async function() {
    return await (async function(){
        let __apply_args__238=await (async function(){
             return await (async function() {
                let __for_body__242=async function(s) {
                    return await (await Environment.get_global("to_object"))(await (async function(){
                         return [await (async function(){
                            let __array_op_rval__244=s;
                             if (__array_op_rval__244 instanceof Function){
                                return await __array_op_rval__244(await (async function(){
                                     return await (await Environment.get_global("describe"))(s) 
                                })()) 
                            } else {
                                return [__array_op_rval__244,await (async function(){
                                     return await (await Environment.get_global("describe"))(s) 
                                })()]
                            }
                        })()] 
                    })())
                };
                let __array__243=[],__elements__241=await (async function(){
                     return await (await Environment.get_global("symbols"))() 
                })();
                let __BREAK__FLAG__=false;
                for(let __iter__240 in __elements__241) {
                    __array__243.push(await __for_body__242(__elements__241[__iter__240]));
                    if(__BREAK__FLAG__) {
                         __array__243.pop();
                        break;
                        
                    }
                }return __array__243;
                 
            })() 
        })();
        return ( (await Environment.get_global("add"))).apply(this,__apply_args__238)
    })()
};__obj__1["is_value?"]=async function(val) {
    if (check_true ((val===""))){
        return true
    } else {
        if (check_true ((val===undefined))){
            return false
        } else {
            if (check_true (await isNaN(val))){
                return true
            } else {
                if (check_true (val)){
                    return true
                } else {
                    return false
                }
            }
        }
    }
};__obj__1["sort"]=async function(elems,options) {
    let opts;
    let sort_fn;
    let sort_fn_inner;
    let keyed;
    let reverser;
    let comparitor;
    let key_path_a;
    let key_path_b;
    opts=(((options instanceof Object)&& options)|| new Object());
    sort_fn=null;
    sort_fn_inner=null;
    keyed=false;
    reverser=await (async function(){
        if (check_true ((opts && opts["reversed"]))){
            return -1
        } else {
            return 1
        }
    })();
    comparitor=await (async function(){
         return await async function(){
            if (check_true ((opts && opts["comparitor"]) instanceof Function)) {
                return (opts && opts["comparitor"])
            } else {
                return function(a,b) {
                    return   (function(){
                        if (check_true ((a instanceof String || typeof a==='string'))) {
                            if (check_true ((b instanceof String || typeof b==='string'))){
                                return (reverser*  a["localeCompare"].call(a,b))
                            } else {
                                return (reverser*  a["localeCompare"].call(a,(""+ b)))
                            }
                        } else if (check_true ((b instanceof String || typeof b==='string'))) {
                            return (reverser*  ( function() {
                                {
                                     let __call_target__=(""+ a), __call_method__="localeCompare";
                                    return  __call_target__[__call_method__].call(__call_target__,b)
                                } 
                            })())
                        } else if (check_true ((opts && opts["reversed"]))) {
                            return (b- a)
                        } else {
                            return (a- b)
                        }
                    } )()
                }
            }
        } () 
    })();
    key_path_a="aval";
    key_path_b="bval";
    await (await Environment.get_global("assert"))((elems instanceof Array),"sort: elements must be an array");
    await (await Environment.get_global("assert"))((await subtype(comparitor)==="Function"),("sort: invalid comparitor provided : "+ await subtype(comparitor)+ " - must be a synchronous function, or evaluate to a synchronous function."));
    await (await Environment.get_global("assert"))((((opts && opts["comparitor"])&& await (await Environment.get_global("not"))((opts && opts["reversed"])))|| (await (await Environment.get_global("not"))((opts && opts["comparitor"]))&& (opts && opts["reversed"]))|| (await (await Environment.get_global("not"))((opts && opts["comparitor"]))&& await (await Environment.get_global("not"))((opts && opts["reversed"])))),"sort: comparitor option cannot be combined with reversed option");
    await async function(){
        if (check_true (((opts && opts["key"]) instanceof String || typeof (opts && opts["key"])==='string'))) {
            {
                keyed=true;
                key_path_a=await (async function(){
                     return await (await Environment.get_global("path_to_js_syntax"))(await (await Environment.get_global("get_object_path"))(("aval."+ (opts && opts["key"])))) 
                })();
                return key_path_b=await (async function(){
                     return await (await Environment.get_global("path_to_js_syntax"))(await (await Environment.get_global("get_object_path"))(("bval."+ (opts && opts["key"])))) 
                })()
            }
        } else if (check_true (((opts && opts["key"]) instanceof Array))) {
            {
                keyed=true;
                key_path_a=await (async function(){
                     return await (await Environment.get_global("path_to_js_syntax"))(await (await Environment.get_global("conj"))(["aval"],(opts && opts["key"]))) 
                })();
                key_path_b=await (async function(){
                     return await (await Environment.get_global("path_to_js_syntax"))(await (await Environment.get_global("conj"))(["bval"],(opts && opts["key"]))) 
                })()
            }
        }
    } ();
    sort_fn_inner=new Function("aval","bval","comparitor",("return comparitor( "+ key_path_a+ ","+ key_path_b+ ")"));
    sort_fn=function(aval,bval) {
        return  sort_fn_inner(aval,bval,comparitor)
    };
    return await elems["sort"].call(elems,sort_fn)
};__obj__1["and*"]=async function(...args) {
    let vals;
    vals=await (await Environment.get_global("slice"))(args,0);
    if (check_true (((vals && vals.length)>0))){
        {
            let rval=true;
            ;
            await (async function() {
                let __for_body__247=async function(v) {
                    if (check_true (await (await Environment.get_global("not"))(await (async function(){
                         return await (await Environment.get_global("is_value?"))(v) 
                    })()))){
                        {
                            rval=false;
                            return __BREAK__FLAG__=true;
                            return
                        }
                    }
                };
                let __array__248=[],__elements__246=vals;
                let __BREAK__FLAG__=false;
                for(let __iter__245 in __elements__246) {
                    __array__248.push(await __for_body__247(__elements__246[__iter__245]));
                    if(__BREAK__FLAG__) {
                         __array__248.pop();
                        break;
                        
                    }
                }return __array__248;
                 
            })();
            return rval
        }
    }
};__obj__1["or*"]=async function(...args) {
    let vals;
    vals=await (await Environment.get_global("slice"))(args,0);
    if (check_true (((vals && vals.length)>0))){
        {
            let rval=false;
            ;
            await (async function() {
                let __for_body__251=async function(v) {
                    if (check_true (await (await Environment.get_global("is_value?"))(v))){
                        {
                            rval=true;
                            return __BREAK__FLAG__=true;
                            return
                        }
                    }
                };
                let __array__252=[],__elements__250=vals;
                let __BREAK__FLAG__=false;
                for(let __iter__249 in __elements__250) {
                    __array__252.push(await __for_body__251(__elements__250[__iter__249]));
                    if(__BREAK__FLAG__) {
                         __array__252.pop();
                        break;
                        
                    }
                }return __array__252;
                 
            })();
            return rval
        }
    }
};__obj__1["either"]=async function(...args) {
    args=await (await Environment.get_global("slice"))(args,0);
    {
        let rval;
        rval=null;
        await (async function() {
            let __for_body__255=async function(arg) {
                rval=arg;
                if (check_true ((await (await Environment.get_global("not"))((undefined===arg))&& await (await Environment.get_global("not"))((null===arg))))){
                    {
                        return __BREAK__FLAG__=true;
                        return
                    }
                }
            };
            let __array__256=[],__elements__254=args;
            let __BREAK__FLAG__=false;
            for(let __iter__253 in __elements__254) {
                __array__256.push(await __for_body__255(__elements__254[__iter__253]));
                if(__BREAK__FLAG__) {
                     __array__256.pop();
                    break;
                    
                }
            }return __array__256;
             
        })();
        return rval
    }
};__obj__1["sanitize_js_ref_name"]=function(symname) {
        return   (function(){
            if (check_true ( ( Environment.get_global("not"))((symname instanceof String || typeof symname==='string')))) {
                return symname
            } else {
                {
                    let text_chars;
                    let acc;
                    text_chars=(symname).split("");
                    acc=[];
                     ( function() {
                        let __for_body__259=function(t) {
                            return   (function(){
                                if (check_true ((t==="+"))) {
                                    return (acc).push("_plus_")
                                } else if (check_true ((t==="?"))) {
                                    return (acc).push("_ques_")
                                } else if (check_true ((t==="-"))) {
                                    return (acc).push("_")
                                } else if (check_true ((t==="&"))) {
                                    return (acc).push("_amper_")
                                } else if (check_true ((t==="^"))) {
                                    return (acc).push("_carot_")
                                } else if (check_true ((t==="#"))) {
                                    return (acc).push("_hash_")
                                } else if (check_true ((t==="!"))) {
                                    return (acc).push("_exclaim_")
                                } else if (check_true ((t==="*"))) {
                                    return (acc).push("_star_")
                                } else if (check_true ((t==="~"))) {
                                    return (acc).push("_tilde_")
                                } else if (check_true ((t==="~"))) {
                                    return (acc).push("_percent_")
                                } else if (check_true ((t==="|"))) {
                                    return (acc).push("_pipe_")
                                } else if (check_true ( ( Environment.get_global("contains?"))(t,"(){}"))) {
                                    throw new LispSyntaxError(("Invalid character in symbol: "+ symname));
                                    
                                } else {
                                    return (acc).push(t)
                                }
                            } )()
                        };
                        let __array__260=[],__elements__258=text_chars;
                        let __BREAK__FLAG__=false;
                        for(let __iter__257 in __elements__258) {
                            __array__260.push( __for_body__259(__elements__258[__iter__257]));
                            if(__BREAK__FLAG__) {
                                 __array__260.pop();
                                break;
                                
                            }
                        }return __array__260;
                         
                    })();
                    return (acc).join("")
                }
            }
        } )()
    };__obj__1["is_symbol?"]=async function(symbol_to_find) {
    return ["=:not",["=:or",["=:==",["=:typeof",symbol_to_find],"undefined"],["=:==",["=:->","=:Environment","get_global",symbol_to_find,"=:ReferenceError"],"=:ReferenceError"]]]
};__obj__1["defvalue"]=async function(sym,value,meta) {
    let meta_data;
    meta_data=await (async function(){
        if (check_true ((meta instanceof Object))){
            return meta
        } else {
            return new Object()
        }
    })();
    return ["=:let",[["=:unquoted_sym",["=:desym",sym]],["=:details",["=:describe","=:unquoted_sym"]]],["=:if","=:details",["=:->","=:Environment","get_global",["=:+","=:details.namespace","/","=:unquoted_sym"]],["=:defglobal",sym,value,meta_data]]]
};__obj__1["defparameter"]=async function(sym,value,meta) {
    let meta_data;
    meta_data=await (async function(){
        if (check_true ((meta instanceof Object))){
            return meta
        } else {
            return new Object()
        }
    })();
    return ["=:first",["=:use_quoted_initializer",["=:defglobal",sym,value,meta_data]]]
};__obj__1["get_function_args"]=async function(f) {
    let r;
    let s;
    r=new RegExp("^[a-zA-Z_]+ [a-zA-Z ]*\\\\(([a-zA-Z 0-9_,\\\\.\\\\n]*)\\\\)","gm");
    s=await f["toString"]();
    r=await (await Environment.get_global("scan_str"))(r,s);
    if (check_true ((((r && r.length)>0)&& ((r && r["0"]) instanceof Object)))){
        {
            return await (await Environment.get_global("map"))(async function(v) {
                if (check_true (await (await Environment.get_global("ends_with?"))("\n",v))){
                    return await (await Environment.get_global("chop"))(v)
                } else {
                    return v
                }
            },((await (await Environment.get_global("second"))((r && r["0"]))|| "")).split(","))
        }
    }
};__obj__1["findpaths"]=async function(value,structure) {
    let acc;
    let search;
    acc=[];
    search=async function(struct,_cpath) {
        return await async function(){
            if (check_true ((struct instanceof Array))) {
                return await (await Environment.get_global("map"))(async function(elem,idx) {
                    return await async function(){
                        if (check_true ((elem instanceof Object))) {
                            return await search(elem,await (await Environment.get_global("conj"))(_cpath,await (async function(){
                                let __array_op_rval__261=idx;
                                 if (__array_op_rval__261 instanceof Function){
                                    return await __array_op_rval__261() 
                                } else {
                                    return [__array_op_rval__261]
                                }
                            })()))
                        } else if (check_true ((elem===value))) {
                            return (acc).push(await (await Environment.get_global("conj"))(_cpath,await (async function(){
                                let __array_op_rval__262=idx;
                                 if (__array_op_rval__262 instanceof Function){
                                    return await __array_op_rval__262() 
                                } else {
                                    return [__array_op_rval__262]
                                }
                            })()))
                        }
                    } ()
                },struct)
            } else if (check_true ((struct instanceof Object))) {
                return await (await Environment.get_global("map"))(async function(pset) {
                    return await async function(){
                        if (check_true (((pset && pset["1"]) instanceof Object))) {
                            return await search((pset && pset["1"]),await (await Environment.get_global("conj"))(_cpath,await (async function(){
                                let __array_op_rval__263=(pset && pset["0"]);
                                 if (__array_op_rval__263 instanceof Function){
                                    return await __array_op_rval__263() 
                                } else {
                                    return [__array_op_rval__263]
                                }
                            })()))
                        } else if (check_true (((pset && pset["1"])===value))) {
                            return (acc).push(await (await Environment.get_global("conj"))(_cpath,await (async function(){
                                let __array_op_rval__264=(pset && pset["1"]);
                                 if (__array_op_rval__264 instanceof Function){
                                    return await __array_op_rval__264() 
                                } else {
                                    return [__array_op_rval__264]
                                }
                            })()))
                        }
                    } ()
                },await (await Environment.get_global("pairs"))(struct))
            } else if (check_true ((struct===value))) {
                return (acc).push(_cpath)
            }
        } ()
    };
    await search(structure,[]);
    return acc
};__obj__1["warn"]=await (async function(){ return "placeholder" })();__obj__1["success"]=await (async function(){ return "placeholder" })();__obj__1["in_background"]=async function(...args) {
    let forms;
    forms=await (await Environment.get_global("slice"))(args,0);
    return ["=:new","=:Promise",["=:fn",["=:resolve","=:reject"],["=:progn",["=:resolve",true],].concat(forms)]]
};__obj__1["show"]=async function(thing) {
    return await async function(){
        if (check_true (thing instanceof Function)) {
            return await thing["toString"]()
        } else {
            return thing
        }
    } ()
};__obj__1["export_symbols"]=async function(...args) {
    args=await (await Environment.get_global("slice"))(args,0);
    {
        let acc;
        let numargs;
        let idx;
        acc=await (async function(){
             return ["=:javascript","export","{"] 
        })();
        numargs=await (await Environment.get_global("length"))(args);
        idx=0;
        await (async function() {
            let __for_body__267=async function(symname) {
                await async function(){
                    if (check_true (((symname instanceof Array)&& ((symname && symname.length)===2)))) {
                        {
                            (acc).push(await (async function(){
                                let mval;
                                mval=(symname && symname["0"]);
                                if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                                    return await mval["substr"].call(mval,2)
                                } else {
                                    return mval
                                }
                            })());
                            (acc).push(" as ");
                            return (acc).push(await (async function(){
                                let mval;
                                mval=(symname && symname["1"]);
                                if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                                    return await mval["substr"].call(mval,2)
                                } else {
                                    return mval
                                }
                            })())
                        }
                    } else if (check_true ((symname instanceof String || typeof symname==='string'))) {
                        (acc).push(await (async function(){
                            let mval;
                            mval=symname;
                            if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                                return await mval["substr"].call(mval,2)
                            } else {
                                return mval
                            }
                        })())
                    } else {
                        throw new SyntaxError("Invalid argument for export");
                        
                    }
                } ();
                idx+=1;
                if (check_true ((idx<numargs))){
                    return (acc).push(", ")
                }
            };
            let __array__268=[],__elements__266=args;
            let __BREAK__FLAG__=false;
            for(let __iter__265 in __elements__266) {
                __array__268.push(await __for_body__267(__elements__266[__iter__265]));
                if(__BREAK__FLAG__) {
                     __array__268.pop();
                    break;
                    
                }
            }return __array__268;
             
        })();
        (acc).push("}");
        return acc
    }
};__obj__1["register_feature"]=async function(feature) {
    if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("contains?"))(feature,(await Environment.get_global("*env_config*.features")))))){
        {
            ((await Environment.get_global("*env_config*.features"))).push(feature);
            return true
        }
    } else {
        return false
    }
};__obj__1["uniq"]=async function(values) {
    let s;
    s=new Set();
    await (await Environment.get_global("map"))(async function(x) {
        return await s["add"].call(s,x)
    },(values|| []));
    return await (await Environment.get_global("to_array"))(s)
};__obj__1["time_in_millis"]=async function() {
    return ["=:Date.now"]
};__obj__1["defns"]=async function(name,options) {
    if (check_true ((options&& (options && options["ignore_if_exists"])&& (name instanceof String || typeof name==='string')&& await (await Environment.get_global("contains?"))(name,await (await Environment.get_global("namespaces"))())))){
        return name
    } else {
        return await (await Environment.get_global("create_namespace"))(name,options)
    }
};__obj__1["use_ns"]=async function(name) {
    return ["=:set_namespace",["=:desym",name]]
};__obj__1["bind_and_call"]=async function(...args) {
    let target_object;
    let this_object;
    let method;
    target_object=(args && args["0"]);
    this_object=(args && args["1"]);
    method=(args && args["2"]);
    args=await (await Environment.get_global("slice"))(args,3);
    {
        let boundf=await (await Environment.get_global("bind"))(target_object[method],this_object);
        ;
        if (check_true (boundf)){
            return await (async function(){
                return ( boundf).apply(this,args)
            })()
        } else {
            throw new Error("unable to bind target_object");
            
        }
    }
};__obj__1["clamp"]=function(value,min,max) {
        return  Math.min( Math.max(min,value),max)
    };__obj__1["save_locally"]=async function(fname,data,content_type) {
    if (check_true (window["document"])){
        {
            let blob;
            let elem;
            let dbody;
            blob=new Blob(await (async function(){
                let __array_op_rval__273=data;
                 if (__array_op_rval__273 instanceof Function){
                    return await __array_op_rval__273() 
                } else {
                    return [__array_op_rval__273]
                }
            })(),{
                type:content_type
            });
            elem=await (async function() {
                {
                     let __call_target__=window["document"], __call_method__="createElement";
                    return await __call_target__[__call_method__].call(__call_target__,"a")
                } 
            })();
            dbody=await (async function(){
                let __targ__274=(await Environment.get_global("document"));
                if (__targ__274){
                     return(__targ__274)["body"]
                } 
            })();
            ;
            await async function(){
                elem["href"]=await window.URL["createObjectURL"].call(window.URL,blob);
                elem["download"]=fname;
                return elem;
                
            }();
            await dbody["appendChild"].call(dbody,elem);
            await elem["click"]();
            await dbody["removeChild"].call(dbody,elem);
            return true
        }
    } else {
        return false
    }
};__obj__1["fetch_text"]=async function(url) {
    let resp;
    resp=await fetch(url);
    if (check_true ((resp && resp["ok"]))){
        return await resp["text"]()
    } else {
        throw new EvalError(("unable to fetch "+ url+ ": "+ (resp && resp["status"])+ ": "+ (resp && resp["statusText"])));
        
    }
};__obj__1["import"]=async function(...args) {
    args=await (await Environment.get_global("slice"))(args,0);
    {
        let filespec;
        let is_url_ques_;
        let js_mode;
        let url_comps;
        let js_mod;
        let load_fn;
        let target_symbols;
        let target_path;
        let acc;
        filespec=await (await Environment.get_global("last"))(args);
        is_url_ques_=await (await Environment.get_global("contains?"))("://",filespec);
        js_mode=null;
        url_comps=null;
        js_mod=null;
        load_fn=null;
        target_symbols=await (async function(){
            if (check_true (((args && args.length)>1))){
                return (args && args["0"])
            }
        })();
        target_path=null;
        acc=[];
        await async function(){
            if (check_true ((is_url_ques_|| await (await Environment.get_global("not"))((null==location))))) {
                {
                    load_fn="fetch_text";
                    url_comps=await (async function(){
                         return await async function(){
                            if (check_true (is_url_ques_)) {
                                return new URL(filespec)
                            } else if (check_true (await (await Environment.get_global("starts_with?"))("/",filespec))) {
                                return new URL((""+ location["origin"]+ filespec))
                            } else {
                                return new URL((""+ location["href"]+ "/"+ filespec))
                            }
                        } () 
                    })();
                    return target_path=(url_comps && url_comps["pathname"])
                }
            } else if (check_true (await (await Environment.get_global("not"))(((typeof "read_text_file"==="undefined")|| (await Environment["get_global"].call(Environment,"read_text_file",ReferenceError)===ReferenceError))))) {
                {
                    load_fn="read_text_file";
                    return target_path=filespec
                }
            } else {
                throw new EvalError(("unable to handle import of "+ filespec));
                
            }
        } ();
        return await async function(){
            if (check_true ((await (await Environment.get_global("ends_with?"))(".lisp",target_path)|| await (await Environment.get_global("ends_with?"))(".juno",target_path)))) {
                return ["=:evaluate",[await (async function(){
                     return ("=:"+ load_fn) 
                })(),filespec],"=:nil",["=:to_object",[["source_name",filespec],["throw_on_error",true]]]]
            } else if (check_true (await (await Environment.get_global("ends_with?"))(".json",target_path))) {
                return ["=:evaluate",["=:JSON.parse",[await (async function(){
                     return ("=:"+ load_fn) 
                })(),filespec]],"=:nil",["=:to_object",[["json_in",true],["source_name",filespec],["throw_on_error",true]]]]
            } else if (check_true ((await (await Environment.get_global("ends_with?"))(".js",target_path)|| (await (await Environment.get_global("not"))(((typeof "Deno"==="undefined")|| (await Environment["get_global"].call(Environment,"Deno",ReferenceError)===ReferenceError)))&& await (await Environment.get_global("ends_with?"))(".ts",target_path))))) {
                {
                    return await async function(){
                        if (check_true ((await (await Environment.get_global("length"))(target_symbols)===0))) {
                            throw new SyntaxError("imports of javascript sources require binding symbols as the first argument");
                            
                        } else if (check_true ((target_symbols instanceof Array))) {
                            {
                                (acc).push(await (async function(){
                                     return ["=:defglobal",(target_symbols && target_symbols["0"]),["=:dynamic_import",filespec],{ "is_import":true,"initializer":["=:quotem",["=:import",].concat(args)]
                                }] 
                            })());
                            (acc).push(await (async function(){
                                 return ["=:set_path",["imports",["=:+",await (await Environment.get_global("current_namespace"))(),"/",["=:desym",(target_symbols && target_symbols["0"])]]],"=:*env_config*",["=:to_object",[["symbol",["=:desym",(target_symbols && target_symbols["0"])]],["namespace",await (await Environment.get_global("current_namespace"))()],["location",filespec]]]] 
                            })());
                            (acc).push(await (async function(){
                                 return ["=:when",["=:prop",(target_symbols && target_symbols["0"]),"initializer"],["=:->",(target_symbols && target_symbols["0"]),"initializer","=:Environment"]] 
                            })());
                            (acc).push((target_symbols && target_symbols["0"]));
                            return ["=:iprogn",].concat(acc)
                        }
                    }
                } ()
            }
        } else {
            throw new EvalError("invalid extension: needs to be .lisp, .js, .json or .juno");
            
        }
    } ()
}
};__obj__1["system_date_format"]={weekday:"long",year:"numeric",month:"2-digit",day:"2-digit",hour:"numeric",minute:"numeric",second:"numeric",fractionalSecondDigits:3,hourCycle:"h24",hour12:false,timeZoneName:"short"};__obj__1["system_date_formatter"]=await (async function(){ return "placeholder" })();__obj__1["tzoffset"]=async function() {
    return (60* await (async function() {
        {
             let __call_target__=new Date(), __call_method__="getTimezoneOffset";
            return await __call_target__[__call_method__]()
        } 
    })())
};__obj__1["date_components"]=async function(date_value,date_formatter) {
    if (check_true (await (await Environment.get_global("is_date?"))(date_value))){
        return await (await Environment.get_global("to_object"))(await (async function(){
             return await (await Environment.get_global("map"))(async function(x) {
                return await (async function(){
                    let __array_op_rval__276=(x && x["type"]);
                     if (__array_op_rval__276 instanceof Function){
                        return await __array_op_rval__276((x && x["value"])) 
                    } else {
                        return [__array_op_rval__276,(x && x["value"])]
                    }
                })()
            },await (async function(){
                if (check_true (date_formatter)){
                    return await (await Environment.get_global("bind_and_call"))(date_formatter,date_formatter,"formatToParts",date_value)
                } else {
                    return await (await Environment.get_global("bind_and_call"))((await Environment.get_global("system_date_formatter")),(await Environment.get_global("system_date_formatter")),"formatToParts",date_value)
                }
            })()) 
        })())
    } else {
        return null
    }
};__obj__1["formatted_date"]=async function(dval,date_formatter) {
    let comps;
    comps=await (async function(){
         return await (await Environment.get_global("date_components"))(dval,date_formatter) 
    })();
    if (check_true (comps)){
        if (check_true (date_formatter)){
            return (await (await Environment.get_global("values"))(comps)).join("")
        } else {
            return (""+ (comps && comps["year"])+ "-"+ (comps && comps["month"])+ "-"+ (comps && comps["day"])+ " "+ (comps && comps["hour"])+ ":"+ (comps && comps["minute"])+ ":"+ (comps && comps["second"]))
        }
    } else {
        return null
    }
};__obj__1["*LANGUAGE*"]=new Object();__obj__1["dtext"]=function(default_text) {
        return ( ( function(){
            let __targ__277=( Environment.get_global("*LANGUAGE*"));
            if (__targ__277){
                 return(__targ__277)[default_text]
            } 
        })()|| default_text)
    };__obj__1["nth"]=async function(idx,collection) {
    return await async function(){
        if (check_true ((idx instanceof Array))) {
            return await (await Environment.get_global("map"))(async function(v) {
                return await (await Environment.get_global("nth"))(v,collection)
            },idx)
        } else if (check_true ((await (await Environment.get_global("is_number?"))(idx)&& (idx<0)&& (await (await Environment.get_global("length"))(collection)>=(-1* idx))))) {
            return collection[await (await Environment.get_global("add"))(await (await Environment.get_global("length"))(collection),idx)]
        } else if (check_true ((await (await Environment.get_global("is_number?"))(idx)&& (idx<0)&& (await (await Environment.get_global("length"))(collection)<(-1* idx))))) {
            return undefined
        } else {
            return collection[idx]
        }
    } ()
};__obj__1["max_index"]=function(container) {
        return  Math.max(0,( ( Environment.get_global("length"))(container)- 1))
    };__obj__1["decode_text"]=function(buffer) {
        return  ( function() {
            {
                 let __call_target__=new TextDecoder(), __call_method__="decode";
                return  __call_target__[__call_method__].call(__call_target__,buffer)
            } 
        })()
    };__obj__1["encode_text"]=function(text) {
        return  ( function() {
            {
                 let __call_target__=new TextEncoder(), __call_method__="encode";
                return  __call_target__[__call_method__].call(__call_target__,text)
            } 
        })()
    };__obj__1["hostname"]=async function() {
    return await Deno.hostname()
};__obj__1["use_symbols"]=async function(namespace,symbol_list,target_namespace) {
    let acc;
    let nspace;
    let nspace_handle;
    let decs;
    acc=await (async function(){
         return ["=:progn"] 
    })();
    nspace=await (async function(){
        if (check_true (namespace)){
            {
                let mval;
                mval=namespace;
                if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                    return await mval["substr"].call(mval,2)
                } else {
                    return mval
                }
            }
        }
    })();
    nspace_handle=null;
    decs=null;
    nspace_handle=await Environment["get_namespace_handle"].call(Environment,nspace);
    await (async function() {
        let __for_body__280=async function(sym) {
            decs=await (async function(){
                let __targ__282=(nspace_handle && nspace_handle["definitions"]);
                if (__targ__282){
                     return(__targ__282)[await (async function(){
                        let mval;
                        mval=sym;
                        if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                            return await mval["substr"].call(mval,2)
                        } else {
                            return mval
                        }
                    })()]
                } 
            })();
            return (acc).push(await (async function(){
                 return ["=:defglobal",await (async function(){
                    let mval;
                    mval=sym;
                    if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                        return await mval["substr"].call(mval,2)
                    } else {
                        return mval
                    }
                })(),await (async function(){
                     return ("=:"+ nspace+ "/"+ await (async function(){
                        let mval;
                        mval=sym;
                        if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                            return await mval["substr"].call(mval,2)
                        } else {
                            return mval
                        }
                    })()) 
                })(),["=:to_object",[["initializer",["=:quotem",["=:pend_load",nspace,await (async function(){
                     return (target_namespace|| await (await Environment.get_global("current_namespace"))()) 
                })(),await (async function(){
                    let mval;
                    mval=sym;
                    if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                        return await mval["substr"].call(mval,2)
                    } else {
                        return mval
                    }
                })(),await (async function(){
                     return ("=:"+ nspace+ "/"+ await (async function(){
                        let mval;
                        mval=sym;
                        if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                            return await mval["substr"].call(mval,2)
                        } else {
                            return mval
                        }
                    })()) 
                })()]]],["=:quotem",["require_ns",nspace]],["=:quotem",["requires",[await (async function(){
                     return (""+ nspace+ "/"+ await (async function(){
                        let mval;
                        mval=sym;
                        if (check_true (((mval instanceof String || typeof mval==='string')&& await (await Environment.get_global("starts_with?"))("=:",mval)))){
                            return await mval["substr"].call(mval,2)
                        } else {
                            return mval
                        }
                    })()) 
                })()]]],["eval_when",await (async function(){
                     return ((decs&& decs["eval_when"])|| new Object()) 
                })()]]]] 
            })())
        };
        let __array__281=[],__elements__279=symbol_list;
        let __BREAK__FLAG__=false;
        for(let __iter__278 in __elements__279) {
            __array__281.push(await __for_body__280(__elements__279[__iter__278]));
            if(__BREAK__FLAG__) {
                 __array__281.pop();
                break;
                
            }
        }return __array__281;
         
    })();
    return acc
};__obj__1["use_unique_symbols"]=async function(namespace) {
    if (check_true ((namespace instanceof String || typeof namespace==='string'))){
        {
            let symlist;
            symlist=await Environment["evaluate"].call(Environment,("("+ namespace+ "/symbols { `unique: true })"));
            (await Environment.eval(await async function(){
                return ["=:use_symbols",namespace,symlist]
            }(),null));
            return await (await Environment.get_global("length"))(symlist)
        }
    } else {
        throw new EvalError("provided namespace must be a string");
        
    }
};__obj__1["common_symbols"]=async function() {
    let acc;
    let ns;
    let ns_total;
    acc=new Object();
    ns=null;
    ns_total=0;
    await (async function() {
        let __for_body__285=async function(ns_name) {
            ns_total+=1;
            ns=await Environment["get_namespace_handle"].call(Environment,ns_name);
            return await (async function() {
                let __for_body__289=async function(symname) {
                    {
                        let it;
                        it=acc[symname];
                        if (check_true (it)){
                            return await async function(){
                                acc[symname]=(it+ 1);
                                return acc;
                                
                            }()
                        } else {
                            return await async function(){
                                acc[symname]=1;
                                return acc;
                                
                            }()
                        }
                    }
                };
                let __array__290=[],__elements__288=await (await Environment.get_global("keys"))((ns && ns["global_ctx"] && ns["global_ctx"]["scope"]));
                let __BREAK__FLAG__=false;
                for(let __iter__287 in __elements__288) {
                    __array__290.push(await __for_body__289(__elements__288[__iter__287]));
                    if(__BREAK__FLAG__) {
                         __array__290.pop();
                        break;
                        
                    }
                }return __array__290;
                 
            })()
        };
        let __array__286=[],__elements__284=await (await Environment.get_global("namespaces"))();
        let __BREAK__FLAG__=false;
        for(let __iter__283 in __elements__284) {
            __array__286.push(await __for_body__285(__elements__284[__iter__283]));
            if(__BREAK__FLAG__) {
                 __array__286.pop();
                break;
                
            }
        }return __array__286;
         
    })();
    {
        let __collector;
        let __result;
        let __action;
        __collector=[];
        __result=null;
        __action=async function(pset) {
            let symname;
            let count;
            symname=(pset && pset["0"]);
            count=(pset && pset["1"]);
            if (check_true ((count===ns_total))){
                {
                    return symname
                }
            }
        };
        ;
        await (async function() {
            let __for_body__295=async function(__item) {
                __result=await __action(__item);
                if (check_true (__result)){
                    return (__collector).push(__result)
                }
            };
            let __array__296=[],__elements__294=await (await Environment.get_global("pairs"))(acc);
            let __BREAK__FLAG__=false;
            for(let __iter__293 in __elements__294) {
                __array__296.push(await __for_body__295(__elements__294[__iter__293]));
                if(__BREAK__FLAG__) {
                     __array__296.pop();
                    break;
                    
                }
            }return __array__296;
             
        })();
        return __collector
    }
};__obj__1["sort_dependencies"]=async function() {
    let ordered;
    let invalids;
    let ns;
    let depends_on;
    let inverted;
    let namespace_order;
    let ensure_before;
    let symname;
    let ns_marker;
    let symbol_marker;
    let splice_before;
    let current_pos;
    ordered=[];
    invalids=await (await Environment.get_global("make_set"))(await (await Environment.get_global("conj"))(await (async function(){
         return await (await Environment.get_global("to_array"))(await (async function(){
             return await (await Environment.get_global("compiler"))([],{
                special_operators:true,env:Environment
            }) 
        })()) 
    })(),await (async function(){
         return await (await Environment.get_global("common_symbols"))() 
    })()));
    ns=null;
    depends_on=new Object();
    inverted=[];
    namespace_order=[];
    ensure_before=async function(before,after) {
        if (check_true (await (await Environment.get_global("not"))(((before==="EXTERNAL")|| (after==="EXTERNAL"))))){
            {
                {
                    let before_idx;
                    let after_idx;
                    before_idx=await (await Environment.get_global("index_of"))(before,namespace_order);
                    after_idx=await (await Environment.get_global("index_of"))(after,namespace_order);
                    return await async function(){
                        if (check_true ((-2===(before_idx+ after_idx)))) {
                            {
                                (namespace_order).push(before);
                                return (namespace_order).push(after)
                            }
                        } else if (check_true (((before_idx>-1)&& (after_idx===-1)))) {
                            return (namespace_order).push(after)
                        } else if (check_true (((before_idx===-1)&& (after_idx>-1)))) {
                            {
                                return await namespace_order["splice"].call(namespace_order,after_idx,0,before)
                            }
                        } else if (check_true ((before_idx>after_idx))) {
                            {
                                await namespace_order["splice"].call(namespace_order,before_idx,1);
                                return await namespace_order["splice"].call(namespace_order,after_idx,0,before)
                            }
                        }
                    } ()
                }
            }
        }
    };
    symname=null;
    ns_marker=function(ns) {
        return ("*NS:"+ ns)
    };
    symbol_marker=function(ns,symbol_name) {
        return (""+ ns+ "/"+ symbol_name)
    };
    splice_before=async function(target_name,value_to_insert) {
        let idx;
        let value_idx;
        idx=await (await Environment.get_global("index_of"))(target_name,ordered);
        value_idx=await (await Environment.get_global("index_of"))(value_to_insert,ordered);
        return await async function(){
            if (check_true (((value_idx>-1)&& (value_idx===idx)))) {
                return true
            } else if (check_true (((value_idx>-1)&& (value_idx<idx)))) {
                return true
            } else if (check_true (((idx>-1)&& (value_idx===-1)))) {
                return await ordered["splice"].call(ordered,idx,0,value_to_insert)
            } else if (check_true (((idx===-1)&& (value_idx>-1)))) {
                return (ordered).push(target_name)
            } else if (check_true ((idx===-1))) {
                {
                    (ordered).push(value_to_insert);
                    return (ordered).push(target_name)
                }
            } else if (check_true (((idx>-1)&& (value_idx>-1)&& (idx<value_idx)))) {
                {
                    await ordered["splice"].call(ordered,value_idx,1);
                    return await ordered["splice"].call(ordered,idx,0,value_to_insert)
                }
            } else {
                return await console.log("fall through: target: ",target_name,"@",idx,"  ",value_to_insert,"@",value_idx)
            }
        } ()
    };
    current_pos=null;
    await (async function() {
        let __for_body__299=async function(name) {
            ns=await Environment["get_namespace_handle"].call(Environment,name);
            return await (async function() {
                let __for_body__303=async function(pset) {
                    {
                        let __symname__305= async function(){
                            return (pset && pset["0"])
                        };
                        let symdef;
                        {
                            let symname=await __symname__305();
                            ;
                            symdef=(pset && pset["1"]);
                            return await async function(){
                                if (check_true (await invalids["has"].call(invalids,symname))) {
                                    return null
                                } else if (check_true ((symdef && symdef["require_ns"]))) {
                                    {
                                        if (check_true (await (await Environment.get_global("not"))(depends_on[(symdef && symdef["require_ns"])]))){
                                            {
                                                await async function(){
                                                    depends_on[(symdef && symdef["require_ns"])]=[];
                                                    return depends_on;
                                                    
                                                }()
                                            }
                                        };
                                        if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("contains?"))(name,depends_on[(symdef && symdef["require_ns"])])))){
                                            {
                                                return (depends_on[(symdef && symdef["require_ns"])]).push(name)
                                            }
                                        }
                                    }
                                } else if (check_true ((symdef && symdef["requires"]))) {
                                    return await (async function() {
                                        let __for_body__309=async function(req) {
                                            {
                                                let _expr_39427;
                                                let req_sym;
                                                let req_ns;
                                                let explicit;
                                                _expr_39427=await (async function(){
                                                     return await (await Environment.get_global("decomp_symbol"))(req,name) 
                                                })();
                                                req_sym=(_expr_39427 && _expr_39427["0"]);
                                                req_ns=(_expr_39427 && _expr_39427["1"]);
                                                explicit=(_expr_39427 && _expr_39427["2"]);
                                                if (check_true ((req_ns&& await (await Environment.get_global("not"))((req===symname))&& await (await Environment.get_global("not"))(await (await Environment.get_global("contains?"))(req,invalids))))){
                                                    {
                                                        if (check_true (await (await Environment.get_global("not"))((req_ns===name)))){
                                                            {
                                                                if (check_true (await (await Environment.get_global("not"))(depends_on[req_ns]))){
                                                                    {
                                                                        await async function(){
                                                                            depends_on[req_ns]=[];
                                                                            return depends_on;
                                                                            
                                                                        }()
                                                                    }
                                                                };
                                                                if (check_true ((await (await Environment.get_global("not"))(await (await Environment.get_global("contains?"))(name,depends_on[req_ns]))&& await (await Environment.get_global("not"))((name==="core"))))){
                                                                    {
                                                                        (depends_on[req_ns]).push(name)
                                                                    }
                                                                }
                                                            }
                                                        };
                                                        return await splice_before(await symbol_marker(name,symname),await symbol_marker(req_ns,req_sym))
                                                    }
                                                }
                                            }
                                        };
                                        let __array__310=[],__elements__308=(symdef && symdef["requires"]);
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__307 in __elements__308) {
                                            __array__310.push(await __for_body__309(__elements__308[__iter__307]));
                                            if(__BREAK__FLAG__) {
                                                 __array__310.pop();
                                                break;
                                                
                                            }
                                        }return __array__310;
                                         
                                    })()
                                } else {
                                    {
                                        if (check_true ((await (await Environment.get_global("index_of"))(await symbol_marker(name,symname),ordered)===-1))){
                                            {
                                                return (ordered).push(await symbol_marker(name,symname))
                                            }
                                        }
                                    }
                                }
                            } ()
                        }
                    }
                };
                let __array__304=[],__elements__302=await (await Environment.get_global("pairs"))((ns && ns["definitions"]));
                let __BREAK__FLAG__=false;
                for(let __iter__301 in __elements__302) {
                    __array__304.push(await __for_body__303(__elements__302[__iter__301]));
                    if(__BREAK__FLAG__) {
                         __array__304.pop();
                        break;
                        
                    }
                }return __array__304;
                 
            })()
        };
        let __array__300=[],__elements__298=await (await Environment.get_global("conj"))(["core"],await (async function(){
            let __collector;
            let __result;
            let __action;
            __collector=[];
            __result=null;
            __action=async function(name) {
                if (check_true (await (await Environment.get_global("not"))((name==="core")))){
                    {
                        return name
                    }
                }
            };
            ;
            await (async function() {
                let __for_body__314=async function(__item) {
                    __result=await __action(__item);
                    if (check_true (__result)){
                        return (__collector).push(__result)
                    }
                };
                let __array__315=[],__elements__313=await (await Environment.get_global("namespaces"))();
                let __BREAK__FLAG__=false;
                for(let __iter__312 in __elements__313) {
                    __array__315.push(await __for_body__314(__elements__313[__iter__312]));
                    if(__BREAK__FLAG__) {
                         __array__315.pop();
                        break;
                        
                    }
                }return __array__315;
                 
            })();
            return __collector
        })());
        let __BREAK__FLAG__=false;
        for(let __iter__297 in __elements__298) {
            __array__300.push(await __for_body__299(__elements__298[__iter__297]));
            if(__BREAK__FLAG__) {
                 __array__300.pop();
                break;
                
            }
        }return __array__300;
         
    })();
    let score=new Object();
    ;
    await (async function() {
        let __for_body__318=async function(_pset) {
            {
                let parent_namespace;
                let dependents;
                parent_namespace=(_pset && _pset["0"]);
                dependents=(_pset && _pset["1"]);
                return await (async function() {
                    let __for_body__322=async function(dependent) {
                        return (inverted).push(await (async function(){
                            let __array_op_rval__324=dependent;
                             if (__array_op_rval__324 instanceof Function){
                                return await __array_op_rval__324(parent_namespace) 
                            } else {
                                return [__array_op_rval__324,parent_namespace]
                            }
                        })())
                    };
                    let __array__323=[],__elements__321=dependents;
                    let __BREAK__FLAG__=false;
                    for(let __iter__320 in __elements__321) {
                        __array__323.push(await __for_body__322(__elements__321[__iter__320]));
                        if(__BREAK__FLAG__) {
                             __array__323.pop();
                            break;
                            
                        }
                    }return __array__323;
                     
                })()
            }
        };
        let __array__319=[],__elements__317=await (await Environment.get_global("pairs"))(depends_on);
        let __BREAK__FLAG__=false;
        for(let __iter__316 in __elements__317) {
            __array__319.push(await __for_body__318(__elements__317[__iter__316]));
            if(__BREAK__FLAG__) {
                 __array__319.pop();
                break;
                
            }
        }return __array__319;
         
    })();
    await (async function() {
        let __for_body__327=async function(_pset) {
            {
                let dependent;
                let parent_namespace;
                dependent=(_pset && _pset["0"]);
                parent_namespace=(_pset && _pset["1"]);
                return await ensure_before(parent_namespace,dependent)
            }
        };
        let __array__328=[],__elements__326=inverted;
        let __BREAK__FLAG__=false;
        for(let __iter__325 in __elements__326) {
            __array__328.push(await __for_body__327(__elements__326[__iter__325]));
            if(__BREAK__FLAG__) {
                 __array__328.pop();
                break;
                
            }
        }return __array__328;
         
    })();
    await (async function() {
        let __for_body__331=async function(ns) {
            if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("contains?"))(ns,namespace_order)))){
                {
                    return (namespace_order).push(ns)
                }
            }
        };
        let __array__332=[],__elements__330=await (await Environment.get_global("namespaces"))();
        let __BREAK__FLAG__=false;
        for(let __iter__329 in __elements__330) {
            __array__332.push(await __for_body__331(__elements__330[__iter__329]));
            if(__BREAK__FLAG__) {
                 __array__332.pop();
                break;
                
            }
        }return __array__332;
         
    })();
    console.log("sort_dependencies: namespace order: ",namespace_order);
    console.log("sort_dependencies: all namespaces: ",await (await Environment.get_global("namespaces"))());
    return {
        namespaces:namespace_order,symbols:ordered
    }
};__obj__1["symbols_by_namespace"]=async function(options) {
    let ns_handle;
    ns_handle=null;
    return await (await Environment.get_global("to_object"))(await (async function() {
        let __for_body__335=async function(ns) {
            ns_handle=await Environment["get_namespace_handle"].call(Environment,ns);
            if (check_true ((options && options["include_meta"]))){
                return await (async function(){
                    let __array_op_rval__348=ns;
                     if (__array_op_rval__348 instanceof Function){
                        return await __array_op_rval__348(await (await Environment.get_global("to_object"))(await (await Environment.get_global("conj"))(await (async function() {
                            let __for_body__339=async function(pset) {
                                {
                                    let sym_name;
                                    let val;
                                    sym_name=(pset && pset["0"]);
                                    val=(pset && pset["1"]);
                                    return await (async function(){
                                        let __array_op_rval__341=sym_name;
                                         if (__array_op_rval__341 instanceof Function){
                                            return await __array_op_rval__341(await (await Environment.get_global("add"))(new Object(),await (async function(){
                                                if (check_true ((null==(val && val["type"])))){
                                                    return {
                                                        type:"Unknown!"
                                                    }
                                                } else {
                                                    return new Object()
                                                }
                                            })(),val)) 
                                        } else {
                                            return [__array_op_rval__341,await (await Environment.get_global("add"))(new Object(),await (async function(){
                                                if (check_true ((null==(val && val["type"])))){
                                                    return {
                                                        type:"Unknown!"
                                                    }
                                                } else {
                                                    return new Object()
                                                }
                                            })(),val)]
                                        }
                                    })()
                                }
                            };
                            let __array__340=[],__elements__338=await (await Environment.get_global("pairs"))((ns_handle && ns_handle["definitions"]));
                            let __BREAK__FLAG__=false;
                            for(let __iter__337 in __elements__338) {
                                __array__340.push(await __for_body__339(__elements__338[__iter__337]));
                                if(__BREAK__FLAG__) {
                                     __array__340.pop();
                                    break;
                                    
                                }
                            }return __array__340;
                             
                        })(),await (async function() {
                            let __for_body__344=async function(pset) {
                                {
                                    let sym_name;
                                    let val;
                                    sym_name=(pset && pset["0"]);
                                    val=(pset && pset["1"]);
                                    return await (async function(){
                                        let __array_op_rval__347=sym_name;
                                         if (__array_op_rval__347 instanceof Function){
                                            return await __array_op_rval__347(await (await Environment.get_global("add"))({
                                                type:await (await Environment.get_global("sub_type"))(val)
                                            },await (async function(){
                                                let it;
                                                it=await (async function(){
                                                    let __targ__346=(ns_handle && ns_handle["definitions"]);
                                                    if (__targ__346){
                                                         return(__targ__346)[sym_name]
                                                    } 
                                                })();
                                                if (check_true (it)){
                                                    return it
                                                } else {
                                                    return new Object()
                                                }
                                            })())) 
                                        } else {
                                            return [__array_op_rval__347,await (await Environment.get_global("add"))({
                                                type:await (await Environment.get_global("sub_type"))(val)
                                            },await (async function(){
                                                let it;
                                                it=await (async function(){
                                                    let __targ__346=(ns_handle && ns_handle["definitions"]);
                                                    if (__targ__346){
                                                         return(__targ__346)[sym_name]
                                                    } 
                                                })();
                                                if (check_true (it)){
                                                    return it
                                                } else {
                                                    return new Object()
                                                }
                                            })())]
                                        }
                                    })()
                                }
                            };
                            let __array__345=[],__elements__343=await (await Environment.get_global("pairs"))((ns_handle && ns_handle["context"] && ns_handle["context"]["scope"]));
                            let __BREAK__FLAG__=false;
                            for(let __iter__342 in __elements__343) {
                                __array__345.push(await __for_body__344(__elements__343[__iter__342]));
                                if(__BREAK__FLAG__) {
                                     __array__345.pop();
                                    break;
                                    
                                }
                            }return __array__345;
                             
                        })()))) 
                    } else {
                        return [__array_op_rval__348,await (await Environment.get_global("to_object"))(await (await Environment.get_global("conj"))(await (async function() {
                            let __for_body__339=async function(pset) {
                                {
                                    let sym_name;
                                    let val;
                                    sym_name=(pset && pset["0"]);
                                    val=(pset && pset["1"]);
                                    return await (async function(){
                                        let __array_op_rval__341=sym_name;
                                         if (__array_op_rval__341 instanceof Function){
                                            return await __array_op_rval__341(await (await Environment.get_global("add"))(new Object(),await (async function(){
                                                if (check_true ((null==(val && val["type"])))){
                                                    return {
                                                        type:"Unknown!"
                                                    }
                                                } else {
                                                    return new Object()
                                                }
                                            })(),val)) 
                                        } else {
                                            return [__array_op_rval__341,await (await Environment.get_global("add"))(new Object(),await (async function(){
                                                if (check_true ((null==(val && val["type"])))){
                                                    return {
                                                        type:"Unknown!"
                                                    }
                                                } else {
                                                    return new Object()
                                                }
                                            })(),val)]
                                        }
                                    })()
                                }
                            };
                            let __array__340=[],__elements__338=await (await Environment.get_global("pairs"))((ns_handle && ns_handle["definitions"]));
                            let __BREAK__FLAG__=false;
                            for(let __iter__337 in __elements__338) {
                                __array__340.push(await __for_body__339(__elements__338[__iter__337]));
                                if(__BREAK__FLAG__) {
                                     __array__340.pop();
                                    break;
                                    
                                }
                            }return __array__340;
                             
                        })(),await (async function() {
                            let __for_body__344=async function(pset) {
                                {
                                    let sym_name;
                                    let val;
                                    sym_name=(pset && pset["0"]);
                                    val=(pset && pset["1"]);
                                    return await (async function(){
                                        let __array_op_rval__347=sym_name;
                                         if (__array_op_rval__347 instanceof Function){
                                            return await __array_op_rval__347(await (await Environment.get_global("add"))({
                                                type:await (await Environment.get_global("sub_type"))(val)
                                            },await (async function(){
                                                let it;
                                                it=await (async function(){
                                                    let __targ__346=(ns_handle && ns_handle["definitions"]);
                                                    if (__targ__346){
                                                         return(__targ__346)[sym_name]
                                                    } 
                                                })();
                                                if (check_true (it)){
                                                    return it
                                                } else {
                                                    return new Object()
                                                }
                                            })())) 
                                        } else {
                                            return [__array_op_rval__347,await (await Environment.get_global("add"))({
                                                type:await (await Environment.get_global("sub_type"))(val)
                                            },await (async function(){
                                                let it;
                                                it=await (async function(){
                                                    let __targ__346=(ns_handle && ns_handle["definitions"]);
                                                    if (__targ__346){
                                                         return(__targ__346)[sym_name]
                                                    } 
                                                })();
                                                if (check_true (it)){
                                                    return it
                                                } else {
                                                    return new Object()
                                                }
                                            })())]
                                        }
                                    })()
                                }
                            };
                            let __array__345=[],__elements__343=await (await Environment.get_global("pairs"))((ns_handle && ns_handle["context"] && ns_handle["context"]["scope"]));
                            let __BREAK__FLAG__=false;
                            for(let __iter__342 in __elements__343) {
                                __array__345.push(await __for_body__344(__elements__343[__iter__342]));
                                if(__BREAK__FLAG__) {
                                     __array__345.pop();
                                    break;
                                    
                                }
                            }return __array__345;
                             
                        })()))]
                    }
                })()
            } else {
                return await (async function(){
                    let __array_op_rval__354=ns;
                     if (__array_op_rval__354 instanceof Function){
                        return await __array_op_rval__354(await (async function(){
                             return await (await Environment.get_global("sort"))(await (async function(){
                                 return await async function(){
                                    if (check_true (false)) {
                                        {
                                            {
                                                let __collector;
                                                let __result;
                                                let __action;
                                                __collector=[];
                                                __result=null;
                                                __action=async function(pset) {
                                                    let name;
                                                    let val;
                                                    name=(pset && pset["0"]);
                                                    val=(pset && pset["1"]);
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__349=(options && options["filter_by"]);
                                                         if (__array_op_rval__349 instanceof Function){
                                                            return await __array_op_rval__349(name,{
                                                                type:await (await Environment.get_global("sub_type"))(val)
                                                            }) 
                                                        } else {
                                                            return [__array_op_rval__349,name,{
                                                                type:await (await Environment.get_global("sub_type"))(val)
                                                            }]
                                                        }
                                                    })())){
                                                        return name
                                                    }
                                                };
                                                ;
                                                await (async function() {
                                                    let __for_body__352=async function(__item) {
                                                        __result=await __action(__item);
                                                        if (check_true (__result)){
                                                            return (__collector).push(__result)
                                                        }
                                                    };
                                                    let __array__353=[],__elements__351=await (await Environment.get_global("pairs"))((ns_handle && ns_handle["context"] && ns_handle["context"]["scope"]));
                                                    let __BREAK__FLAG__=false;
                                                    for(let __iter__350 in __elements__351) {
                                                        __array__353.push(await __for_body__352(__elements__351[__iter__350]));
                                                        if(__BREAK__FLAG__) {
                                                             __array__353.pop();
                                                            break;
                                                            
                                                        }
                                                    }return __array__353;
                                                     
                                                })();
                                                return __collector
                                            }
                                        }
                                    } else {
                                        return await (await Environment.get_global("uniq"))(await (await Environment.get_global("conj"))(await (await Environment.get_global("keys"))((ns_handle && ns_handle["context"] && ns_handle["context"]["scope"])),await (await Environment.get_global("keys"))((ns_handle && ns_handle["definitions"]))))
                                    }
                                } () 
                            })()) 
                        })()) 
                    } else {
                        return [__array_op_rval__354,await (async function(){
                             return await (await Environment.get_global("sort"))(await (async function(){
                                 return await async function(){
                                    if (check_true (false)) {
                                        {
                                            {
                                                let __collector;
                                                let __result;
                                                let __action;
                                                __collector=[];
                                                __result=null;
                                                __action=async function(pset) {
                                                    let name;
                                                    let val;
                                                    name=(pset && pset["0"]);
                                                    val=(pset && pset["1"]);
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__349=(options && options["filter_by"]);
                                                         if (__array_op_rval__349 instanceof Function){
                                                            return await __array_op_rval__349(name,{
                                                                type:await (await Environment.get_global("sub_type"))(val)
                                                            }) 
                                                        } else {
                                                            return [__array_op_rval__349,name,{
                                                                type:await (await Environment.get_global("sub_type"))(val)
                                                            }]
                                                        }
                                                    })())){
                                                        return name
                                                    }
                                                };
                                                ;
                                                await (async function() {
                                                    let __for_body__352=async function(__item) {
                                                        __result=await __action(__item);
                                                        if (check_true (__result)){
                                                            return (__collector).push(__result)
                                                        }
                                                    };
                                                    let __array__353=[],__elements__351=await (await Environment.get_global("pairs"))((ns_handle && ns_handle["context"] && ns_handle["context"]["scope"]));
                                                    let __BREAK__FLAG__=false;
                                                    for(let __iter__350 in __elements__351) {
                                                        __array__353.push(await __for_body__352(__elements__351[__iter__350]));
                                                        if(__BREAK__FLAG__) {
                                                             __array__353.pop();
                                                            break;
                                                            
                                                        }
                                                    }return __array__353;
                                                     
                                                })();
                                                return __collector
                                            }
                                        }
                                    } else {
                                        return await (await Environment.get_global("uniq"))(await (await Environment.get_global("conj"))(await (await Environment.get_global("keys"))((ns_handle && ns_handle["context"] && ns_handle["context"]["scope"])),await (await Environment.get_global("keys"))((ns_handle && ns_handle["definitions"]))))
                                    }
                                } () 
                            })()) 
                        })()]
                    }
                })()
            }
        };
        let __array__336=[],__elements__334=await (await Environment.get_global("namespaces"))();
        let __BREAK__FLAG__=false;
        for(let __iter__333 in __elements__334) {
            __array__336.push(await __for_body__335(__elements__334[__iter__333]));
            if(__BREAK__FLAG__) {
                 __array__336.pop();
                break;
                
            }
        }return __array__336;
         
    })())
};__obj__1["*formatting_rules*"]={minor_indent:["defun","defun_sync","defmacro","define","when","let","destructuring_bind","while","for_each","fn","lambda","function","progn","do","reduce","cond","try","catch","macroexpand","compile","unless","for_with","no_await","reduce_sync"],keywords:["-","->","*","**","/","%","+","<","<<","<=","=","==","=>",">",">=",">>","and","apply","break","call","cond","debug","dec","declare","defconst","defglobal","defvar","do","dynamic_import","eq","eval","fn","for_each","for_with","function","function*","if","inc","instanceof","javascript","jslambda","lambda","let","list","new","or","progl","progn","prop","quote","quotel","quotem","return","set_prop","setq","static_import","throw","try","typeof","unquotem","while","yield"],functions:[],allocating_forms:new Object()};__obj__1["all_globals"]=async function() {
    let acc;
    acc=new Set();
    await (async function() {
        let __for_body__357=async function(ns) {
            return await (async function() {
                let __for_body__361=async function(k) {
                    return await acc["add"].call(acc,k)
                };
                let __array__362=[],__elements__360=await (await Environment.get_global("keys"))(await (await Environment.get_global("resolve_path"))(["global_ctx","scope"],await Environment["get_namespace_handle"].call(Environment,ns)));
                let __BREAK__FLAG__=false;
                for(let __iter__359 in __elements__360) {
                    __array__362.push(await __for_body__361(__elements__360[__iter__359]));
                    if(__BREAK__FLAG__) {
                         __array__362.pop();
                        break;
                        
                    }
                }return __array__362;
                 
            })()
        };
        let __array__358=[],__elements__356=await (await Environment.get_global("namespaces"))();
        let __BREAK__FLAG__=false;
        for(let __iter__355 in __elements__356) {
            __array__358.push(await __for_body__357(__elements__356[__iter__355]));
            if(__BREAK__FLAG__) {
                 __array__358.pop();
                break;
                
            }
        }return __array__358;
         
    })();
    return acc
};__obj__1["sleep"]=async function(seconds) {
    return new Promise(async function(resolve) {
        return await setTimeout(async function() {
            return await (async function(){
                let __array_op_rval__363=resolve;
                 if (__array_op_rval__363 instanceof Function){
                    return await __array_op_rval__363(true) 
                } else {
                    return [__array_op_rval__363,true]
                }
            })()
        },(seconds* 1000))
    })
};__obj__1["process_tree_symbols"]=async function(tree,prefix,_ctx) {
    let is_root;
    let rval;
    let symbol;
    let global_details;
    let allocator;
    let allocations;
    let sort_token;
    let format_token;
    is_root=(null==_ctx);
    rval=null;
    _ctx=(_ctx|| {
        acc:[],allocations:new Set(),symbols:new Set(),keywords:new Set(),literals:new Set(),globals:new Set(),global_detail:new Object()
    });
    symbol=null;
    global_details=null;
    allocator=null;
    allocations=null;
    sort_token=async function(t) {
        symbol=(""+ await (await Environment.get_global("as_lisp"))(t));
        if (check_true (await (await Environment.get_global("not"))((symbol===prefix)))){
            {
                return await async function(){
                    if (check_true ((t instanceof Array))) {
                        return await (await Environment.get_global("process_tree_symbols"))(t,prefix,_ctx)
                    } else if (check_true (await (await Environment.get_global("contains?"))(symbol,(await Environment.get_global("*formatting_rules*.keywords"))))) {
                        return await (_ctx && _ctx["keywords"])["add"].call((_ctx && _ctx["keywords"]),symbol)
                    } else if (check_true (await (async function(){
                        global_details=await (await Environment.get_global("meta_for_symbol"))(symbol,true);
                        return (await (await Environment.get_global("length"))(global_details)>0)
                    })())) {
                        {
                            return await (_ctx && _ctx["globals"])["add"].call((_ctx && _ctx["globals"]),symbol)
                        }
                    } else if (check_true (((t instanceof String || typeof t==='string')&& (await (await Environment.get_global("length"))(t)>2)&& await (await Environment.get_global("starts_with?"))(await (async function(){
                         return "=:" 
                    })(),t)))) {
                        return await (_ctx && _ctx["symbols"])["add"].call((_ctx && _ctx["symbols"]),(""+ await (await Environment.get_global("as_lisp"))(t)))
                    } else if (check_true ((await (await Environment.get_global("is_number?"))(t)|| (true===t)|| (false===t)|| ("nil"===(""+ await (await Environment.get_global("as_lisp"))(t)))))) {
                        return await (_ctx && _ctx["literals"])["add"].call((_ctx && _ctx["literals"]),(""+ t))
                    }
                } ()
            }
        }
    };
    format_token=async function(token) {
        return {
            value:(token && token.name),score:0,meta:await (async function(){
                if (check_true (((token && token["type"])==="arg"))){
                    return "local"
                } else {
                    return (token && token["type"])
                }
            })()
        }
    };
    await async function(){
        if (check_true (((tree instanceof Array)&& ((tree && tree.length)>0)))) {
            {
                allocator=await (async function(){
                    let __targ__364=(await Environment.get_global("*formatting_rules*.allocating_forms"));
                    if (__targ__364){
                         return(__targ__364)[(""+ await (await Environment.get_global("as_lisp"))(tree[0]))]
                    } 
                })();
                if (check_true (allocator instanceof Function)){
                    {
                        allocations=await (async function(){
                            let __array_op_rval__365=allocator;
                             if (__array_op_rval__365 instanceof Function){
                                return await __array_op_rval__365(tree) 
                            } else {
                                return [__array_op_rval__365,tree]
                            }
                        })();
                        await (async function() {
                            let __for_body__368=async function(allocation) {
                                symbol=(""+ await (await Environment.get_global("as_lisp"))(allocation));
                                if (check_true (await (await Environment.get_global("not"))(((symbol===prefix)|| (symbol==="\"&\""))))){
                                    {
                                        return await (_ctx && _ctx["allocations"])["add"].call((_ctx && _ctx["allocations"]),symbol)
                                    }
                                }
                            };
                            let __array__369=[],__elements__367=allocations;
                            let __BREAK__FLAG__=false;
                            for(let __iter__366 in __elements__367) {
                                __array__369.push(await __for_body__368(__elements__367[__iter__366]));
                                if(__BREAK__FLAG__) {
                                     __array__369.pop();
                                    break;
                                    
                                }
                            }return __array__369;
                             
                        })()
                    }
                };
                return await (async function() {
                    let __for_body__372=async function(t) {
                        return await sort_token(t)
                    };
                    let __array__373=[],__elements__371=tree;
                    let __BREAK__FLAG__=false;
                    for(let __iter__370 in __elements__371) {
                        __array__373.push(await __for_body__372(__elements__371[__iter__370]));
                        if(__BREAK__FLAG__) {
                             __array__373.pop();
                            break;
                            
                        }
                    }return __array__373;
                     
                })()
            }
        } else if (check_true ((tree instanceof Object))) {
            {
                await (async function() {
                    let __for_body__376=async function(pset) {
                        await (_ctx && _ctx["literals"])["add"].call((_ctx && _ctx["literals"]),(pset && pset["0"]));
                        return await sort_token((pset && pset["1"]))
                    };
                    let __array__377=[],__elements__375=await (await Environment.get_global("pairs"))(tree);
                    let __BREAK__FLAG__=false;
                    for(let __iter__374 in __elements__375) {
                        __array__377.push(await __for_body__376(__elements__375[__iter__374]));
                        if(__BREAK__FLAG__) {
                             __array__377.pop();
                            break;
                            
                        }
                    }return __array__377;
                     
                })()
            }
        } else {
            await sort_token(tree)
        }
    } ();
    if (check_true (is_root)){
        {
            rval={
                allocations:await (async function(){
                     return await (await Environment.get_global("to_array"))((_ctx && _ctx["allocations"])) 
                })(),symbols:await (async function(){
                     return await (await Environment.get_global("to_array"))((_ctx && _ctx["symbols"])) 
                })(),keywords:await (async function(){
                     return await (await Environment.get_global("to_array"))((_ctx && _ctx["keywords"])) 
                })(),literals:await (async function(){
                     return await (await Environment.get_global("to_array"))((_ctx && _ctx["literals"])) 
                })(),globals:await (async function(){
                     return await (await Environment.get_global("to_array"))((_ctx && _ctx["globals"])) 
                })()
            }
        }
    };
    return rval
};__obj__1["keys*"]=function(obj) {
        if (check_true ((obj instanceof Object))){
            {
                let current_obj;
                let prototypes;
                let properties;
                current_obj=obj;
                prototypes=[];
                properties= ( Environment.get_global("first"))(prototypes);
                 ( function(){
                     let __body_ref__379=function() {
                        properties=new Set();
                        (prototypes).push(properties);
                         ( function() {
                            let __for_body__382=function(item) {
                                return  properties["add"].call(properties,item)
                            };
                            let __array__383=[],__elements__381= Object.getOwnPropertyNames(current_obj);
                            let __BREAK__FLAG__=false;
                            for(let __iter__380 in __elements__381) {
                                __array__383.push( __for_body__382(__elements__381[__iter__380]));
                                if(__BREAK__FLAG__) {
                                     __array__383.pop();
                                    break;
                                    
                                }
                            }return __array__383;
                             
                        })();
                        return current_obj= Object.getPrototypeOf(current_obj)
                    };
                    let __BREAK__FLAG__=false;
                    while(current_obj) {  __body_ref__379();
                     if(__BREAK__FLAG__) {
                         break;
                        
                    }
                } ;
                
            })();
            return  ( Environment.get_global("flatten"))( ( function() {
                let __for_body__386=function(s) {
                    return  ( function() {
                        {
                             let __call_target__= Array.from(s), __call_method__="sort";
                            return  __call_target__[__call_method__]()
                        } 
                    })()
                };
                let __array__387=[],__elements__385=prototypes;
                let __BREAK__FLAG__=false;
                for(let __iter__384 in __elements__385) {
                    __array__387.push( __for_body__386(__elements__385[__iter__384]));
                    if(__BREAK__FLAG__) {
                         __array__387.pop();
                        break;
                        
                    }
                }return __array__387;
                 
            })())
        }
    } else {
        throw new TypeError("keys*: invalid object as argument");
        
    }
};__obj__1["pairs*"]=function(obj) {
        if (check_true ((obj instanceof Object))){
            return  ( function() {
                let __for_body__390=function(k) {
                    return  ( function(){
                        let __array_op_rval__392=k;
                         if (__array_op_rval__392 instanceof Function){
                            return  __array_op_rval__392(obj[k]) 
                        } else {
                            return [__array_op_rval__392,obj[k]]
                        }
                    })()
                };
                let __array__391=[],__elements__389= ( Environment.get_global("keys*"))(obj);
                let __BREAK__FLAG__=false;
                for(let __iter__388 in __elements__389) {
                    __array__391.push( __for_body__390(__elements__389[__iter__388]));
                    if(__BREAK__FLAG__) {
                         __array__391.pop();
                        break;
                        
                    }
                }return __array__391;
                 
            })()
        }
    };__obj__1["for"]=async function(...args) {
    let symbol_list;
    let array_ref;
    let body_forms;
    symbol_list=(args && args["0"] && args["0"]["0"]);
    array_ref=(args && args["0"] && args["0"]["1"]);
    body_forms=await (await Environment.get_global("slice"))(args,1);
    {
        let sym_list;
        sym_list=symbol_list;
        if (check_true ((sym_list instanceof Array))){
            return ["=:for_each",["=:_pset",array_ref],["=:destructuring_bind",sym_list,"=:_pset",].concat(body_forms)]
        } else {
            return ["=:for_each",[sym_list,array_ref],["=:progn",].concat(body_forms)]
        }
    }
};__obj__1["for_items"]=async function(...args) {
    let iteration_symbol;
    let collection;
    let body_forms;
    iteration_symbol=(args && args["0"] && args["0"]["0"]);
    collection=(args && args["0"] && args["0"]["1"]);
    body_forms=await (await Environment.get_global("slice"))(args,1);
    return ["=:let",[["=:__collection",collection]],["=:for_each",["=:__idx",["=:range","=:__collection.length"]],["=:progn",["=:defvar",iteration_symbol,["=:->","=:__collection","item","=:__idx"]],].concat(body_forms)]]
};__obj__1["word_wrap"]=function(text,ncols) {
        let line_length;
        let words;
        let max_cols;
        let current_line;
        let lines;
        line_length=0;
        words=(text).split(" ");
        max_cols=(ncols|| 80);
        current_line=[];
        lines=[];
         ( function() {
            let __for_body__395=function(word) {
                return   (function(){
                    if (check_true (((line_length+  ( Environment.get_global("length"))(word))>=max_cols))) {
                        {
                            (lines).push((current_line).join(" "));
                            current_line= ( function(){
                                let __array_op_rval__397=word;
                                 if (__array_op_rval__397 instanceof Function){
                                    return  __array_op_rval__397() 
                                } else {
                                    return [__array_op_rval__397]
                                }
                            })();
                            return line_length= ( Environment.get_global("add"))( ( Environment.get_global("length"))(word),1)
                        }
                    } else {
                        {
                            (current_line).push(word);
                            return line_length+= ( Environment.get_global("add"))( ( Environment.get_global("length"))(word),1)
                        }
                    }
                } )()
            };
            let __array__396=[],__elements__394=(words|| []);
            let __BREAK__FLAG__=false;
            for(let __iter__393 in __elements__394) {
                __array__396.push( __for_body__395(__elements__394[__iter__393]));
                if(__BREAK__FLAG__) {
                     __array__396.pop();
                    break;
                    
                }
            }return __array__396;
             
        })();
        if (check_true (((current_line && current_line.length)>0))){
            (lines).push((current_line).join(" "))
        };
        return lines
    };__obj__1["progc"]=async function(...args) {
    let forms;
    forms=await (await Environment.get_global("slice"))(args,0);
    return ["=:try",["=:progn",].concat(forms),["=:catch","=:Error",["=:e"],["=:log","=:e.message"]]]
};__obj__1["reverse_string"]=function(text) {
        return ( ( function() {
            {
                 let __call_target__=(text).split(""), __call_method__="reverse";
                return  __call_target__[__call_method__]()
            } 
        })()).join("")
    };__obj__1["last_n_chars"]=function(n,text) {
        if (check_true ((text instanceof String || typeof text==='string'))){
            return  text["substr"].call(text,(-1* n))
        } else {
            return null
        }
    };__obj__1["last_n"]=function(n,arr) {
        if (check_true (((n>0)&& (arr instanceof Array)))){
            return  arr["slice"].call(arr,(-1* n))
        } else {
            return null
        }
    };__obj__1["from_last"]=function(amount,arr) {
        return arr[((arr && arr.length)- (1+ amount))]
    };__obj__1["analyze_text_line"]=function(line) {
        let delta;
        let indent_spaces;
        let base_indent;
        let idx;
        let openers;
        let closers;
        let code_mode;
        let cpos;
        let last_c;
        let last_delim;
        delta=0;
        indent_spaces=0;
        base_indent=null;
        idx=-1;
        openers=[];
        closers=[];
        code_mode=true;
        cpos=null;
        last_c=null;
        last_delim=null;
         ( function() {
            let __for_body__400=function(c) {
                idx+=1;
                  (function(){
                    if (check_true (((c==="\"")&& ((null==last_c)|| (last_c&&  ( Environment.get_global("not"))((92=== last_c["charCodeAt"]()))))))) {
                        return code_mode= ( Environment.get_global("not"))(code_mode)
                    } else if (check_true ((code_mode&& (c===";")))) {
                        {
                            __BREAK__FLAG__=true;
                            return
                        }
                    } else if (check_true ((code_mode&& ((c==="(")|| (c==="{")|| (c==="["))))) {
                        {
                            delta+=1;
                            (openers).push(idx);
                            base_indent=indent_spaces;
                            cpos=idx;
                            last_delim=c
                        }
                    } else if (check_true ((code_mode&& ((c===")")|| (c==="]")|| (c==="}"))))) {
                        {
                            delta-=1;
                            (closers).push(idx);
                            cpos=idx;
                            last_delim=c
                        }
                    } else if (check_true ((code_mode&& (c===" ")&&  ( Environment.get_global("not"))(base_indent)))) {
                        {
                            indent_spaces+=1
                        }
                    } else if (check_true ( ( Environment.get_global("not"))(base_indent))) {
                        base_indent=indent_spaces
                    }
                } )();
                return last_c=c
            };
            let __array__401=[],__elements__399=(line).split("");
            let __BREAK__FLAG__=false;
            for(let __iter__398 in __elements__399) {
                __array__401.push( __for_body__400(__elements__399[__iter__398]));
                if(__BREAK__FLAG__) {
                     __array__401.pop();
                    break;
                    
                }
            }return __array__401;
             
        })();
        if (check_true ((undefined==base_indent))){
            {
                base_indent=indent_spaces
            }
        };
        return {
            delta:delta,final_type:last_delim,final_pos:cpos,line:line,indent:base_indent,openers:openers,closers:closers
        }
    };__obj__1["calculate_indent_rule"]=function(delta,movement_needed) {
        let lisp_line;
        let remainder_pos;
        let remainder;
        let comps;
        let symbol_details;
        lisp_line= (delta && delta["line"])["substr"].call((delta && delta["line"]), ( Environment.get_global("first"))((delta && delta["openers"])));
        remainder_pos= ( function(){
            if (check_true (((delta && delta["openers"] && delta["openers"]["length"])>0))){
                return ( ( function(){
                    let __targ__402=(delta && delta["openers"]);
                    if (__targ__402){
                         return(__targ__402)[(movement_needed- 1)]
                    } 
                })()||  ( Environment.get_global("first"))((delta && delta["openers"]))|| (delta && delta["indent"]))
            } else {
                return 0
            }
        })();
        remainder= (delta && delta["line"])["substr"].call((delta && delta["line"]),(1+ remainder_pos));
        comps= ( function(){
            let __collector;
            let __result;
            let __action;
            __collector=[];
            __result=null;
            __action=function(c) {
                if (check_true ( ( Environment.get_global("not"))( ( Environment.get_global("blank?"))(c)))){
                    {
                        return c
                    }
                }
            };
            ;
             ( function() {
                let __for_body__405=function(__item) {
                    __result= __action(__item);
                    if (check_true (__result)){
                        return (__collector).push(__result)
                    }
                };
                let __array__406=[],__elements__404=(remainder).split(" ");
                let __BREAK__FLAG__=false;
                for(let __iter__403 in __elements__404) {
                    __array__406.push( __for_body__405(__elements__404[__iter__403]));
                    if(__BREAK__FLAG__) {
                         __array__406.pop();
                        break;
                        
                    }
                }return __array__406;
                 
            })();
            return __collector
        })();
        symbol_details= ( function(){
            if (check_true ((((comps && comps.length)>0)&&  ( Environment.get_global("not"))( ( Environment.get_global("contains?"))("(",(comps && comps["0"])))&&  ( Environment.get_global("not"))( ( Environment.get_global("contains?"))("{",(comps && comps["0"])))&&  ( Environment.get_global("not"))( ( Environment.get_global("contains?"))("[",(comps && comps["0"])))))){
                return ( ( Environment.get_global("first"))( ( Environment.get_global("meta_for_symbol"))((comps && comps["0"]),true))|| {
                    type:"-"
                })
            } else {
                return {
                    type:"-"
                }
            }
        })();
          (function(){
            if (check_true ((movement_needed===0))) {
                return true
            } else if (check_true ((((comps && comps.length)===0)&& ((delta && delta["openers"] && delta["openers"]["length"])===0)&& ((delta && delta["closers"] && delta["closers"]["length"])===0)))) {
                true
            } else if (check_true (( ( Environment.get_global("starts_with?"))("def",(comps && comps["0"]))||  ( Environment.get_global("contains?"))((comps && comps["0"]),( Environment.get_global("*formatting_rules*.minor_indent")))))) {
                {
                      (function(){
                        delta["indent"]=(remainder_pos+ 3);
                        return delta;
                        
                    })()
                }
            } else if (check_true (((((symbol_details && symbol_details["type"])&&  ( Environment.get_global("contains?"))("Function",(symbol_details && symbol_details["type"])))||  ( Environment.get_global("contains?"))((comps && comps["0"]),( Environment.get_global("*formatting_rules*.keywords"))))&&  ( Environment.get_global("contains?"))((delta && delta["final_type"]),["(","[",")","]"])))) {
                {
                    if (check_true ((( ( Environment.get_global("length"))((delta && delta["closers"]))===0)&& ( ( Environment.get_global("length"))((delta && delta["openers"]))===1)))){
                        {
                              (function(){
                                delta["indent"]=(remainder_pos+ 3);
                                return delta;
                                
                            })()
                        }
                    } else {
                        {
                              (function(){
                                delta["indent"]=(remainder_pos+ (comps && comps["0"] && comps["0"]["length"])+ 2);
                                return delta;
                                
                            })()
                        }
                    }
                }
            } else if (check_true ( ( Environment.get_global("contains?"))((comps && comps["0"]),( Environment.get_global("built_ins"))))) {
                {
                      (function(){
                        delta["indent"]=(remainder_pos+ (comps && comps["0"] && comps["0"]["length"])+ 2);
                        return delta;
                        
                    })()
                }
            } else if (check_true (((delta && delta["final_type"])==="["))) {
                {
                      (function(){
                        delta["indent"]=(remainder_pos+ 1);
                        return delta;
                        
                    })()
                }
            } else if (check_true (( ( Environment.get_global("starts_with?"))("[",(comps && comps["0"]))||  ( Environment.get_global("starts_with?"))("(",(comps && comps["0"]))))) {
                {
                      (function(){
                        delta["indent"]=(remainder_pos+ 1);
                        return delta;
                        
                    })()
                }
            } else if (check_true (((comps && comps.length)===1))) {
                {
                      (function(){
                        delta["indent"]=(remainder_pos+ 3);
                        return delta;
                        
                    })()
                }
            } else if (check_true ((((delta && delta["final_type"])==="{")&& (movement_needed>0)))) {
                {
                      (function(){
                        delta["indent"]=(remainder_pos+ 2);
                        return delta;
                        
                    })()
                }
            } else if (check_true (((comps && comps.length)===0))) {
                {
                      (function(){
                        delta["indent"]=(1+ remainder_pos);
                        return delta;
                        
                    })()
                }
            } else {
                {
                      (function(){
                        delta["indent"]=(remainder_pos+ (comps && comps["0"] && comps["0"]["length"])+ 2);
                        return delta;
                        
                    })()
                }
            }
        } )();
        return delta
    };__obj__1["format_lisp_line"]=function(line_number,get_line) {
        if (check_true (((line_number>0)&& get_line instanceof Function))){
            {
                let current_row;
                let prior_line;
                let delta;
                let movement_needed;
                let orig_movement_needed;
                let comps;
                let final;
                let in_seek;
                current_row=(line_number- 1);
                prior_line= ( function(){
                    let v= ( function(){
                        let __array_op_rval__417=get_line;
                         if (__array_op_rval__417 instanceof Function){
                            return  __array_op_rval__417(current_row) 
                        } else {
                            return [__array_op_rval__417,current_row]
                        }
                    })();
                    ;
                     ( function(){
                         let __test_condition__418=function() {
                            return (((v).trim()==="")&& (current_row>0))
                        };
                        let __body_ref__419=function() {
                            current_row-=1;
                            return v= ( function(){
                                let __array_op_rval__420=get_line;
                                 if (__array_op_rval__420 instanceof Function){
                                    return  __array_op_rval__420(current_row) 
                                } else {
                                    return [__array_op_rval__420,current_row]
                                }
                            })()
                        };
                        let __BREAK__FLAG__=false;
                        while( __test_condition__418()) {
                              __body_ref__419();
                             if(__BREAK__FLAG__) {
                                 break;
                                
                            }
                        } ;
                        
                    })();
                    return (v|| "")
                })();
                delta= ( Environment.get_global("analyze_text_line"))(prior_line);
                movement_needed=0;
                orig_movement_needed=0;
                comps=null;
                final=(delta && delta["final_type"]);
                in_seek=((delta && delta["openers"] && delta["openers"]["length"])<(delta && delta["closers"] && delta["closers"]["length"]));
                movement_needed=(delta && delta["delta"]);
                orig_movement_needed=movement_needed;
                  (function(){
                    if (check_true ((movement_needed<0))) {
                        {
                            let lisp_line;
                            let remainder_pos;
                            let remainder;
                            let symbol_details;
                            lisp_line=null;
                            remainder_pos=null;
                            remainder=null;
                            symbol_details=null;
                             ( function(){
                                 let __test_condition__421=function() {
                                    return ((movement_needed<0)&& (current_row>0))
                                };
                                let __body_ref__422=function() {
                                    current_row-=1;
                                    prior_line= ( function(){
                                        let __array_op_rval__423=get_line;
                                         if (__array_op_rval__423 instanceof Function){
                                            return  __array_op_rval__423(current_row) 
                                        } else {
                                            return [__array_op_rval__423,current_row]
                                        }
                                    })();
                                     ( function(){
                                         let __test_condition__424=function() {
                                            return ((current_row>0)&& ((prior_line).trim()===""))
                                        };
                                        let __body_ref__425=function() {
                                            current_row-=1;
                                            return prior_line= ( function(){
                                                let __array_op_rval__426=get_line;
                                                 if (__array_op_rval__426 instanceof Function){
                                                    return  __array_op_rval__426(current_row) 
                                                } else {
                                                    return [__array_op_rval__426,current_row]
                                                }
                                            })()
                                        };
                                        let __BREAK__FLAG__=false;
                                        while( __test_condition__424()) {
                                              __body_ref__425();
                                             if(__BREAK__FLAG__) {
                                                 break;
                                                
                                            }
                                        } ;
                                        
                                    })();
                                    delta= ( Environment.get_global("analyze_text_line"))(prior_line);
                                    return movement_needed=(movement_needed+ (delta && delta["delta"]))
                                };
                                let __BREAK__FLAG__=false;
                                while( __test_condition__421()) {
                                      __body_ref__422();
                                     if(__BREAK__FLAG__) {
                                         break;
                                        
                                    }
                                } ;
                                
                            })();
                            return delta= ( Environment.get_global("calculate_indent_rule"))(delta,movement_needed)
                        }
                    } else if (check_true ((movement_needed>0))) {
                        {
                            return delta= ( Environment.get_global("calculate_indent_rule"))(delta,movement_needed)
                        }
                    }
                } )();
                return ( ( function() {
                    let __for_body__429=function(c) {
                        return " "
                    };
                    let __array__430=[],__elements__428= ( Environment.get_global("range"))( Math.max(0,(delta && delta["indent"])));
                    let __BREAK__FLAG__=false;
                    for(let __iter__427 in __elements__428) {
                        __array__430.push( __for_body__429(__elements__428[__iter__427]));
                        if(__BREAK__FLAG__) {
                             __array__430.pop();
                            break;
                            
                        }
                    }return __array__430;
                     
                })()).join("")
            }
        }
    };__obj__1["set_default"]=async function(path,value) {
    let real_path;
    real_path=await (async function(){
         return await async function(){
            if (check_true (((path instanceof String || typeof path==='string')&& await (await Environment.get_global("starts_with?"))("=:",path)&& await (await Environment.get_global("contains?"))(".",path)))) {
                return ((""+ await (await Environment.get_global("as_lisp"))(path))).split(".")
            } else if (check_true (((path instanceof String || typeof path==='string')&& await (await Environment.get_global("contains?"))(".",path)))) {
                return (path).split(".")
            } else if (check_true (((path instanceof String || typeof path==='string')&& await (await Environment.get_global("contains?"))("~",path)))) {
                return (path).split("~")
            } else {
                return path
            }
        } () 
    })();
    return ["=:progn",["=:unless",["=:is_array?",real_path],["=:throw","=:ReferenceError","set_default: invalid path specification, needs to be an array, string or symbol."]],["=:defvar","=:__first_val",["=:first",real_path]],["=:if",["=:contains?","=:__first_val",["=:list","features","build","imports","included_libraries"]],["=:throw","=:ReferenceError",["=:+","set_default: the path value ","doesn't reference a default value setting"]]],["=:if",["=:resolve_path",real_path,"=:*env_config*"],["=:set_path",real_path,"=:*env_config*",value],["=:make_path",real_path,"=:*env_config*",value]],["=:resolve_path",real_path,"=:*env_config*"]]
};__obj__1["get_default"]=async function(key,alt_val) {
    if (check_true ((key instanceof Array))){
        return (await (await Environment.get_global("resolve_multi_path"))(key,(await Environment.get_global("*env_config*")))|| alt_val)
    } else {
        throw new TypeError("get_default: key must be an array");
        
    }
};__obj__1["traverse"]=async function(structure,operator_function,_path) {
    let __path__431= async function(){
        return (_path|| [])
    };
    {
        let path=await __path__431();
        ;
        if (check_true ((null==operator_function))){
            throw new Error("traverse: requires a function as a second argument");
            
        };
        await async function(){
            if (check_true ((structure instanceof Array))) {
                {
                    await (async function(){
                        let __array_op_rval__432=operator_function;
                         if (__array_op_rval__432 instanceof Function){
                            return await __array_op_rval__432(structure,path) 
                        } else {
                            return [__array_op_rval__432,structure,path]
                        }
                    })();
                    return await (await Environment.get_global("map"))(async function(elem,idx) {
                        return await (await Environment.get_global("traverse"))(elem,operator_function,await (await Environment.get_global("conj"))(path,idx))
                    },structure)
                }
            } else if (check_true ((structure instanceof Object))) {
                {
                    await (async function(){
                        let __array_op_rval__433=operator_function;
                         if (__array_op_rval__433 instanceof Function){
                            return await __array_op_rval__433(structure,path) 
                        } else {
                            return [__array_op_rval__433,structure,path]
                        }
                    })();
                    await (async function() {
                        let __for_body__436=async function(pset) {
                            {
                                let key;
                                let value;
                                key=(pset && pset["0"]);
                                value=(pset && pset["1"]);
                                return await (await Environment.get_global("traverse"))(value,operator_function,await (await Environment.get_global("conj"))(path,key))
                            }
                        };
                        let __array__437=[],__elements__435=await (await Environment.get_global("pairs"))(structure);
                        let __BREAK__FLAG__=false;
                        for(let __iter__434 in __elements__435) {
                            __array__437.push(await __for_body__436(__elements__435[__iter__434]));
                            if(__BREAK__FLAG__) {
                                 __array__437.pop();
                                break;
                                
                            }
                        }return __array__437;
                         
                    })()
                }
            } else {
                await (async function(){
                    let __array_op_rval__438=operator_function;
                     if (__array_op_rval__438 instanceof Function){
                        return await __array_op_rval__438(structure,path) 
                    } else {
                        return [__array_op_rval__438,structure,path]
                    }
                })()
            }
        } ();
        return structure
    }
};__obj__1["truncate"]=async function(len,value,trailer) {
    trailer=(trailer|| "");
    return await async function(){
        if (check_true ((value instanceof String || typeof value==='string'))) {
            if (check_true (((value && value.length)>len))){
                return await (await Environment.get_global("add"))(await value["substr"].call(value,0,len),trailer)
            } else {
                return value
            }
        } else if (check_true ((value instanceof Array))) {
            return await value["slice"].call(value,0,len)
        } else {
            return value
        }
    } ()
};__obj__1["all_global_functions"]=function() {
        let acc;
        let env_a;
        acc=new Set();
        env_a=null;
         ( function() {
            let __for_body__441=function(ns) {
                env_a= Environment["get_namespace_handle"].call(Environment,ns);
                return  ( function() {
                    let __for_body__445=function(pset) {
                        if (check_true ((pset && pset["1"]) instanceof Function)){
                            return  acc["add"].call(acc,(pset && pset["0"]))
                        }
                    };
                    let __array__446=[],__elements__444= ( Environment.get_global("pairs"))((env_a && env_a["context"] && env_a["context"]["scope"]));
                    let __BREAK__FLAG__=false;
                    for(let __iter__443 in __elements__444) {
                        __array__446.push( __for_body__445(__elements__444[__iter__443]));
                        if(__BREAK__FLAG__) {
                             __array__446.pop();
                            break;
                            
                        }
                    }return __array__446;
                     
                })()
            };
            let __array__442=[],__elements__440= ( Environment.get_global("namespaces"))();
            let __BREAK__FLAG__=false;
            for(let __iter__439 in __elements__440) {
                __array__442.push( __for_body__441(__elements__440[__iter__439]));
                if(__BREAK__FLAG__) {
                     __array__442.pop();
                    break;
                    
                }
            }return __array__442;
             
        })();
        return acc
    };__obj__1["pretty_print"]=function(in_struct,report_callout) {
        let in_text;
        let chars;
        let key_words;
        let block_words;
        let conditionals;
        let char;
        let global_lookup;
        let last_opener;
        let operator;
        let next_char;
        let next_char_pos;
        let state;
        let lines;
        let formatted_lines;
        let line_acc;
        let rule;
        let cpos;
        let debug_mode;
        let closers;
        let openers;
        let code_mode;
        let string_mode;
        let escape_state;
        let mode;
        let nl_suppress;
        let skip_for;
        let depth_change;
        let long_string_mode;
        let report;
        let lpos;
        let lnum;
        let argnum;
        let text;
        let word;
        let word_acc;
        let add_char_to_line;
        let next_line;
        let is_whitespace_ques_;
        let indent_string;
        let get_line;
        let calc_next_char;
        in_text= ( function(){
             return   (function(){
                if (check_true ((in_struct instanceof Object))) {
                    return  ( Environment.get_global("as_lisp"))(in_struct)
                } else if (check_true ((in_struct instanceof String || typeof in_struct==='string'))) {
                    return in_struct
                } else {
                    return (""+ in_struct)
                }
            } )() 
        })();
        chars=(in_text).split("");
        key_words= ( function(){
            let __targ__447=( Environment.get_global("*formatting_rules*"));
            if (__targ__447){
                 return(__targ__447)["keywords"]
            } 
        })();
        block_words=["try","progn","progl","progc","do","let","cond"];
        conditionals=["if","when","unless"];
        char=null;
        global_lookup= ( function(){
            let tmp= ( Environment.get_global("all_global_functions"))();
            ;
             ( function() {
                let __for_body__450=function(op) {
                    return  tmp["add"].call(tmp,op)
                };
                let __array__451=[],__elements__449=(key_words|| []);
                let __BREAK__FLAG__=false;
                for(let __iter__448 in __elements__449) {
                    __array__451.push( __for_body__450(__elements__449[__iter__448]));
                    if(__BREAK__FLAG__) {
                         __array__451.pop();
                        break;
                        
                    }
                }return __array__451;
                 
            })();
            return tmp
        })();
        last_opener=null;
        operator=null;
        next_char=null;
        next_char_pos=0;
        state=new Object();
        lines=[];
        formatted_lines=[];
        line_acc=[];
        rule=null;
        cpos=-1;
        debug_mode= ( function(){
            if (check_true (report_callout)){
                return true
            } else {
                return false
            }
        })();
        closers=[")","]","}"];
        openers=["(","[","{"];
        code_mode=0;
        string_mode=1;
        escape_state=0;
        mode=code_mode;
        nl_suppress=false;
        skip_for=null;
        depth_change=0;
        long_string_mode=2;
        report=[];
        lpos=0;
        lnum=0;
        argnum=0;
        text=null;
        word="";
        word_acc=[];
        add_char_to_line=function(c) {
            (line_acc).push((c|| char));
            return lpos=(line_acc && line_acc.length)
        };
        next_line=function() {
            (lines).push((line_acc).join(""));
            lnum=(lines && lines.length);
            depth_change=0;
            return line_acc=[]
        };
        is_whitespace_ques_=function(c) {
            return  ( Environment.get_global("contains?"))(c,[" ","	"])
        };
        indent_string=null;
        get_line=function(rnum) {
            let it;
            it=lines[rnum];
            if (check_true (it)){
                if (check_true ( ( Environment.get_global("ends_with?"))("\n",it))){
                    return it
                } else {
                    return (it+ "\n")
                }
            } else {
                return null
            }
        };
        calc_next_char=function() {
            if (check_true (chars[(1+ cpos)])){
                {
                    next_char_pos=(cpos+ 1);
                     ( function(){
                         let __test_condition__452=function() {
                            return (chars[next_char_pos]&&  is_whitespace_ques_(chars[next_char_pos]))
                        };
                        let __body_ref__453=function() {
                            return next_char_pos+=1
                        };
                        let __BREAK__FLAG__=false;
                        while( __test_condition__452()) {
                              __body_ref__453();
                             if(__BREAK__FLAG__) {
                                 break;
                                
                            }
                        } ;
                        
                    })();
                    return next_char=chars[next_char_pos]
                }
            }
        };
         ( function(){
             let __test_condition__454=function() {
                return (cpos<(chars && chars.length))
            };
            let __body_ref__455=function() {
                cpos+=1;
                char=chars[cpos];
                rule=null;
                if (check_true (char)){
                    {
                        if (check_true ((skip_for&& (skip_for>0)))){
                            skip_for-=1
                        };
                        if (check_true (( char["charCodeAt"]()===92))){
                            escape_state=2
                        } else {
                            escape_state= Math.max(0,(escape_state- 1))
                        };
                        if (check_true (((mode===code_mode)&& (cpos>=next_char_pos)))){
                            {
                                if (check_true ((nl_suppress&& (skip_for===null)))){
                                    {
                                        skip_for=2
                                    }
                                };
                                 calc_next_char()
                            }
                        };
                        if (check_true (((mode===code_mode)&& ( is_whitespace_ques_(char)||  ( Environment.get_global("contains?"))(char,openers)||  ( Environment.get_global("contains?"))(char,closers)|| (char===":")|| (char==="\n"))))){
                            {
                                if (check_true (((word_acc && word_acc.length)>0))){
                                    {
                                        word=(word_acc).join("");
                                        if (check_true ((((last_opener==="(")|| (last_opener==="["))&&  ( Environment.get_global("not"))( ( Environment.get_global("starts_with?"))("\"",word))&&  ( Environment.get_global("not"))( ( Environment.get_global("starts_with?"))("`",word))))){
                                            operator=word
                                        }
                                    }
                                };
                                word_acc=[]
                            }
                        } else {
                            (word_acc).push(char)
                        };
                        if (check_true (((mode===code_mode)&& (char==="}")&&  ( Environment.get_global("not"))(( ( Environment.get_global("last"))(line_acc)==="{"))&&  ( Environment.get_global("not"))( ( Environment.get_global("contains?"))( ( Environment.get_global("last"))(line_acc),closers))&&  ( Environment.get_global("not"))(( ( Environment.get_global("last"))(line_acc)===" "))))){
                             add_char_to_line(" ")
                        };
                        if (check_true (((mode===code_mode)&&  ( Environment.get_global("contains?"))(char,openers)))){
                            last_opener=char
                        };
                        if (check_true (((mode===code_mode)&& ( ( Environment.get_global("contains?"))(char,closers)||  is_whitespace_ques_(char))))){
                            last_opener=null
                        };
                        if (check_true ((skip_for===0))){
                            {
                                nl_suppress=false;
                                skip_for=null
                            }
                        };
                          (function(){
                            if (check_true (((mode===code_mode)&& (char==="\"")))) {
                                {
                                    return mode=string_mode
                                }
                            } else if (check_true (((mode===code_mode)&& ("|"===char)))) {
                                {
                                    return mode=long_string_mode
                                }
                            } else if (check_true (((char==="\"")&& (mode===string_mode)&& (escape_state===0)))) {
                                {
                                    return mode=code_mode
                                }
                            } else if (check_true (((char==="|")&& (mode===long_string_mode)))) {
                                {
                                    return mode=code_mode
                                }
                            } else if (check_true (( ( Environment.get_global("contains?"))(char,openers)&& (mode===code_mode)))) {
                                {
                                    return argnum=0
                                }
                            } else if (check_true (((char===":")&& (mode===code_mode)))) {
                                {
                                    argnum+=1;
                                    return nl_suppress=true
                                }
                            }
                        } )();
                        if (check_true ((mode===code_mode))){
                            {
                                  (function(){
                                    if (check_true ( ( Environment.get_global("contains?"))(char,openers))) {
                                        return depth_change+=1
                                    } else if (check_true ( ( Environment.get_global("contains?"))(char,closers))) {
                                        depth_change-=1
                                    }
                                } )();
                                  (function(){
                                    if (check_true (( is_whitespace_ques_(char)&&  ( Environment.get_global("contains?"))(next_char,closers)&& (argnum>1)&&  ( Environment.get_global("not"))(nl_suppress)))) {
                                        {
                                            rule="r0!";
                                            return  next_line()
                                        }
                                    } else if (check_true (( is_whitespace_ques_(char)&& (word&&  ( Environment.get_global("contains?"))(word,block_words))))) {
                                        {
                                            rule="rb!";
                                             next_line()
                                        }
                                    } else if (check_true (( is_whitespace_ques_(char)&& (argnum>=1)&&  ( Environment.get_global("not"))( ( Environment.get_global("contains?"))( ( Environment.get_global("last"))(line_acc),closers))&& (depth_change>-1)&& (depth_change<2)&&  ( Environment.get_global("contains?"))(operator,conditionals)))) {
                                        {
                                            rule="rC";
                                             next_line()
                                        }
                                    } else if (check_true (( is_whitespace_ques_(char)&& (argnum<2)&& (depth_change<2)&& (lpos<30)&&  ( Environment.get_global("not"))( ( Environment.get_global("contains?"))( ( Environment.get_global("last"))(line_acc),closers))&& ( ( Environment.get_global("not"))( ( Environment.get_global("starts_with?"))("\"",(word|| "")))&&  ( Environment.get_global("not"))( ( Environment.get_global("starts_with?"))("`",(word|| "")))&& (depth_change>-1))&& ((next_char_pos- cpos)<=1)))) {
                                        {
                                             add_char_to_line();
                                            argnum+=1;
                                            rule="r1+"
                                        }
                                    } else if (check_true (( is_whitespace_ques_(char)&& (argnum===0)&& ( ( Environment.get_global("not"))( ( Environment.get_global("starts_with?"))("\"",(word|| "")))&&  ( Environment.get_global("not"))( ( Environment.get_global("starts_with?"))("`",(word|| "")))&& (word&&  global_lookup["has"].call(global_lookup,word))&&  ( Environment.get_global("not"))(("()"===( ( Environment.get_global("last_n"))(2,line_acc)).join("")))&& (depth_change>-1))))) {
                                        {
                                             add_char_to_line();
                                            argnum+=1;
                                            rule="rc"
                                        }
                                    } else if (check_true (( is_whitespace_ques_(char)&&  ( Environment.get_global("not"))(nl_suppress)&&  ( Environment.get_global("not"))((next_char==="{"))&& ((next_char_pos- cpos)<=1)))) {
                                        {
                                            rule="r2!";
                                             next_line();
                                            nl_suppress=true
                                        }
                                    } else if (check_true (( ( Environment.get_global("contains?"))(char,openers)&&  ( Environment.get_global("not"))(nl_suppress)&& (argnum>1)))) {
                                        {
                                            rule="r3!";
                                            nl_suppress=true;
                                             next_line();
                                             add_char_to_line();
                                            argnum=0
                                        }
                                    } else if (check_true (( ( Environment.get_global("contains?"))(char,openers)&& (argnum>1)))) {
                                        {
                                            rule="r3A";
                                             add_char_to_line();
                                            argnum=0
                                        }
                                    } else if (check_true (( is_whitespace_ques_(char)&&  ( Environment.get_global("not"))(nl_suppress)&& (depth_change<0)))) {
                                        {
                                            rule="r4!";
                                             next_line();
                                            argnum=0
                                        }
                                    } else if (check_true (( is_whitespace_ques_(char)&&  ( Environment.get_global("not"))(nl_suppress)&& (lpos>40)))) {
                                        {
                                            rule="r5!";
                                             next_line();
                                            argnum=0
                                        }
                                    } else if (check_true (((char==="{")&&  ( Environment.get_global("not"))( is_whitespace_ques_(chars[(1+ cpos)]))&&  ( Environment.get_global("not"))((chars[(1+ cpos)]==="}"))))) {
                                        {
                                            rule="r6";
                                             add_char_to_line();
                                             add_char_to_line(" ")
                                        }
                                    } else if (check_true (((char===":")&&  ( Environment.get_global("not"))((" "===chars[(1+ cpos)]))))) {
                                        {
                                            rule="r7";
                                             add_char_to_line();
                                             add_char_to_line(" ")
                                        }
                                    } else {
                                        {
                                            rule="r99";
                                             add_char_to_line()
                                        }
                                    }
                                } )()
                            }
                        } else {
                            {
                                rule="rD";
                                 add_char_to_line()
                            }
                        };
                        if (check_true (debug_mode)){
                            {
                                return (report).push( ( function(){
                                    let __array_op_rval__456=cpos;
                                     if (__array_op_rval__456 instanceof Function){
                                        return  __array_op_rval__456(char, ( function(){
                                            if (check_true ((cpos<=next_char_pos))){
                                                return next_char
                                            } else {
                                                return ""
                                            }
                                        })(),lpos,(next_char_pos- cpos),depth_change,mode,argnum, ( function(){
                                            if (check_true (((mode===code_mode)&&  is_whitespace_ques_(char)))){
                                                return "*"
                                            } else {
                                                return ""
                                            }
                                        })(), ( function(){
                                            if (check_true (nl_suppress)){
                                                return " NLS "
                                            } else {
                                                return ""
                                            }
                                        })(), ( function(){
                                            if (check_true (skip_for)){
                                                return skip_for
                                            } else {
                                                return ""
                                            }
                                        })(),rule,word,operator,(line_acc).join("")) 
                                    } else {
                                        return [__array_op_rval__456,char, ( function(){
                                            if (check_true ((cpos<=next_char_pos))){
                                                return next_char
                                            } else {
                                                return ""
                                            }
                                        })(),lpos,(next_char_pos- cpos),depth_change,mode,argnum, ( function(){
                                            if (check_true (((mode===code_mode)&&  is_whitespace_ques_(char)))){
                                                return "*"
                                            } else {
                                                return ""
                                            }
                                        })(), ( function(){
                                            if (check_true (nl_suppress)){
                                                return " NLS "
                                            } else {
                                                return ""
                                            }
                                        })(), ( function(){
                                            if (check_true (skip_for)){
                                                return skip_for
                                            } else {
                                                return ""
                                            }
                                        })(),rule,word,operator,(line_acc).join("")]
                                    }
                                })())
                            }
                        }
                    }
                }
            };
            let __BREAK__FLAG__=false;
            while( __test_condition__454()) {
                  __body_ref__455();
                 if(__BREAK__FLAG__) {
                     break;
                    
                }
            } ;
            
        })();
        if (check_true (debug_mode)){
            {
                 ( function(){
                    let __array_op_rval__457=report_callout;
                     if (__array_op_rval__457 instanceof Function){
                        return  __array_op_rval__457(report,{
                            columns:["CPOS","CHAR","NEXTC","LPOS","NCD","DEPTHC","MODE","ARGNUM","WS?","NLS?","SKIP_FOR","rule","word","op","Line_ACC"]
                        }) 
                    } else {
                        return [__array_op_rval__457,report,{
                            columns:["CPOS","CHAR","NEXTC","LPOS","NCD","DEPTHC","MODE","ARGNUM","WS?","NLS?","SKIP_FOR","rule","word","op","Line_ACC"]
                        }]
                    }
                })()
            }
        };
        if (check_true (((line_acc && line_acc.length)>0))){
            {
                (lines).push((line_acc).join(""))
            }
        };
         ( function() {
            let __for_body__460=function(line_num) {
                text=(""+ lines[line_num]+ "\n");
                if (check_true ((line_num>0))){
                    indent_string= ( Environment.get_global("format_lisp_line"))(line_num,get_line)
                } else {
                    indent_string=""
                };
                return   (function(){
                    lines[line_num]=(""+ indent_string+ text);
                    return lines;
                    
                })()
            };
            let __array__461=[],__elements__459= ( Environment.get_global("range"))((lines && lines.length));
            let __BREAK__FLAG__=false;
            for(let __iter__458 in __elements__459) {
                __array__461.push( __for_body__460(__elements__459[__iter__458]));
                if(__BREAK__FLAG__) {
                     __array__461.pop();
                    break;
                    
                }
            }return __array__461;
             
        })();
        return (lines).join("")
    };__obj__1["get_dependencies"]=async function(global_symbol,_deps,_req_ns,_externs) {
    let comps;
    let target_symbol;
    let namespace;
    let added;
    let externals;
    let required_namespaces;
    let dependencies;
    let ns_env;
    let sym_meta;
    comps=(global_symbol).split("/");
    target_symbol=await (async function(){
        if (check_true (((comps && comps.length)>1))){
            return await (await Environment.get_global("second"))(comps)
        } else {
            return await (await Environment.get_global("first"))(comps)
        }
    })();
    namespace=await (async function(){
        if (check_true (((comps && comps.length)>1))){
            return await (await Environment.get_global("first"))(comps)
        } else {
            return null
        }
    })();
    added=false;
    externals=(_externs|| new Set());
    required_namespaces=(_req_ns|| new Set());
    dependencies=(_deps|| new Set());
    ns_env=await Environment["get_namespace_handle"].call(Environment,await (await Environment.get_global("current_namespace"))());
    sym_meta=await ns_env["eval"].call(ns_env,await (async function(){
         return ["=:meta_for_symbol",target_symbol,true] 
    })());
    await async function(){
        if (check_true ((namespace&& sym_meta&& ((sym_meta && sym_meta.length)>0)))) {
            return await (async function() {
                let __for_body__465=async function(m) {
                    if (check_true (((m && m["namespace"])===namespace))){
                        {
                            sym_meta=m;
                            return __BREAK__FLAG__=true;
                            return
                        }
                    }
                };
                let __array__466=[],__elements__464=sym_meta;
                let __BREAK__FLAG__=false;
                for(let __iter__463 in __elements__464) {
                    __array__466.push(await __for_body__465(__elements__464[__iter__463]));
                    if(__BREAK__FLAG__) {
                         __array__466.pop();
                        break;
                        
                    }
                }return __array__466;
                 
            })()
        } else {
            {
                sym_meta=await (await Environment.get_global("first"))(sym_meta);
                namespace=(sym_meta && sym_meta["namespace"])
            }
        }
    } ();
    if (check_true ((namespace&& await (await Environment.get_global("not"))(await required_namespaces["has"].call(required_namespaces,namespace))))){
        await required_namespaces["add"].call(required_namespaces,namespace)
    };
    if (check_true ((sym_meta && sym_meta["externals"]))){
        {
            await (async function() {
                let __for_body__469=async function(external_ref) {
                    return await externals["add"].call(externals,external_ref)
                };
                let __array__470=[],__elements__468=(sym_meta && sym_meta["externals"]);
                let __BREAK__FLAG__=false;
                for(let __iter__467 in __elements__468) {
                    __array__470.push(await __for_body__469(__elements__468[__iter__467]));
                    if(__BREAK__FLAG__) {
                         __array__470.pop();
                        break;
                        
                    }
                }return __array__470;
                 
            })()
        }
    };
    if (check_true ((sym_meta&& namespace))){
        {
            await (async function() {
                let __for_body__473=async function(required_symbol) {
                    if (check_true (await (await Environment.get_global("not"))(await dependencies["has"].call(dependencies,required_symbol)))){
                        {
                            added=true;
                            return await dependencies["add"].call(dependencies,required_symbol)
                        }
                    }
                };
                let __array__474=[],__elements__472=(sym_meta && sym_meta["requires"]);
                let __BREAK__FLAG__=false;
                for(let __iter__471 in __elements__472) {
                    __array__474.push(await __for_body__473(__elements__472[__iter__471]));
                    if(__BREAK__FLAG__) {
                         __array__474.pop();
                        break;
                        
                    }
                }return __array__474;
                 
            })();
            if (check_true (added)){
                await (async function() {
                    let __for_body__477=async function(required_symbol) {
                        return await (await Environment.get_global("get_dependencies"))(required_symbol,dependencies,required_namespaces,externals)
                    };
                    let __array__478=[],__elements__476=(sym_meta && sym_meta["requires"]);
                    let __BREAK__FLAG__=false;
                    for(let __iter__475 in __elements__476) {
                        __array__478.push(await __for_body__477(__elements__476[__iter__475]));
                        if(__BREAK__FLAG__) {
                             __array__478.pop();
                            break;
                            
                        }
                    }return __array__478;
                     
                })()
            }
        }
    };
    if (check_true ((null==_deps))){
        {
            return {
                dependencies:await (async function(){
                     return await (await Environment.get_global("to_array"))(dependencies) 
                })(),namespaces:await (async function(){
                     return await (await Environment.get_global("to_array"))(required_namespaces) 
                })(),externals:await (async function(){
                     return await (await Environment.get_global("to_array"))(externals) 
                })()
            }
        }
    }
};__obj__1["pad_left"]=function(value,pad_amount,padchar) {
        return  ( function() {
            {
                 let __call_target__=(""+ value), __call_method__="padStart";
                return  __call_target__[__call_method__].call(__call_target__,pad_amount,padchar)
            } 
        })()
    };__obj__1["symbol_dependencies"]=async function(symbol_array) {
    if (check_true ((symbol_array instanceof Array))){
        {
            {
                let dependencies;
                let ns_deps;
                let externals;
                let deps;
                dependencies=new Set();
                ns_deps=new Set();
                externals=new Set();
                deps=null;
                await (async function() {
                    let __for_body__481=async function(sym) {
                        return await (await Environment.get_global("get_dependencies"))(sym,dependencies,ns_deps,externals)
                    };
                    let __array__482=[],__elements__480=symbol_array;
                    let __BREAK__FLAG__=false;
                    for(let __iter__479 in __elements__480) {
                        __array__482.push(await __for_body__481(__elements__480[__iter__479]));
                        if(__BREAK__FLAG__) {
                             __array__482.pop();
                            break;
                            
                        }
                    }return __array__482;
                     
                })();
                return {
                    dependencies:await (async function(){
                         return await (await Environment.get_global("to_array"))(dependencies) 
                    })(),namespaces:await (async function(){
                         return await (await Environment.get_global("to_array"))(ns_deps) 
                    })(),externals:await (async function(){
                         return await (await Environment.get_global("to_array"))(externals) 
                    })()
                }
            }
        }
    }
};__obj__1["keyword_mapper"]=function(token) {
        if (check_true ( ( Environment.get_global("contains?"))(token,( Environment.get_global("*formatting_rules*.keywords"))))){
            return "keyword"
        } else {
            return "identifier"
        }
    };__obj__1["with_each_entry"]=async function(...args) {
    let binding_sym;
    let iteration_form;
    let body_forms;
    binding_sym=(args && args["0"] && args["0"]["0"]);
    iteration_form=(args && args["1"]);
    body_forms=await (await Environment.get_global("slice"))(args,2);
    return ["=:let",[["=:__data_val__",iteration_form],[binding_sym,"=:nil"],["=:__next_val__","=:nil"]],["=:if",["=:is_function?","=:__data_val__.next"],["=:while",["=:=","=:__next_val__",["=:->","=:__data_val__","next"]],["=:progn",["=:=",binding_sym,"=:__next_val__.value"],].concat(body_forms,[["=:if","=:__next_val__.done",["=:break"]]])],["=:throw","=:TypeError","with_each_entry: iteration_form is not an iterator"]]]
};__obj__1["operating_system"]=function() {
            return  ( Environment.get_global("resolve_path"))(["build","os"],Deno)
        };__obj__1["platform_architecture"]=function() {
        return  ( Environment.get_global("resolve_path"))(["build","arch"],Deno)
    };__obj__1["platform"]=function() {
        return Deno["build"]
    };__obj__1["exit"]=function(return_code) {
        return  Deno.exit(return_code)
    };__obj__1["permissions"]=async function() {
    let perms;
    perms=["run","env","write","read","net","ffi","sys"];
    return await (await Environment.get_global("to_object"))(await (async function() {
        let __for_body__485=async function(p) {
            return await (async function(){
                let __array_op_rval__488=p;
                 if (__array_op_rval__488 instanceof Function){
                    return await __array_op_rval__488(await (async function(){
                        let __targ__487=await Deno.permissions.query({
                            name:p
                        });
                        if (__targ__487){
                             return(__targ__487)["state"]
                        } 
                    })()) 
                } else {
                    return [__array_op_rval__488,await (async function(){
                        let __targ__487=await Deno.permissions.query({
                            name:p
                        });
                        if (__targ__487){
                             return(__targ__487)["state"]
                        } 
                    })()]
                }
            })()
        };
        let __array__486=[],__elements__484=perms;
        let __BREAK__FLAG__=false;
        for(let __iter__483 in __elements__484) {
            __array__486.push(await __for_body__485(__elements__484[__iter__483]));
            if(__BREAK__FLAG__) {
                 __array__486.pop();
                break;
                
            }
        }return __array__486;
         
    })())
};__obj__1["compiler"]=async function(quoted_lisp,opts) {
    let Environment=(opts && opts["env"]);
    ;
    let get_global=(opts && opts["env"] && opts["env"]["get_global"]);
    ;
    {
        let length=function anonymous(obj) {
{
                         if(obj instanceof Array) {
                             return obj.length;
                             } else if (obj instanceof Set) {
                              return obj.size;
                              } else if ((obj === undefined)||(obj===null)) {
                               return 0;
                               } else if (typeof obj==='object') {
                                return Object.keys(obj).length;
                                } else if (typeof obj==='string') {
                                 return obj.length;
                                 }
                         return 0;
                         }
};
        let first=function anonymous(x) {
{ return x[0] }
};
        let second=function anonymous(x) {
{ return x[1] }
};
        let map=async function anonymous(lambda,array_values) {
{ try {
                      let rval = [],
                      tl = array_values.length;
                      for (let i = 0; i < array_values.length; i++) {
                             rval.push(await lambda.apply(this,[array_values[i], i, tl]));
                             }
                      return rval;
                      } catch (ex) {
                       if (lambda === undefined || lambda === null) {
                             throw new ReferenceError("map: lambda argument (position 0) is undefined or nil")
                             } else if (array_values === undefined || array_values === null) {
                              throw new ReferenceError("map: container argument (position 1) is undefined or nil")
                              } else if (!(lambda instanceof Function)) {
                               throw new ReferenceError("map: lambda argument must be a function: received: "+ typeof lambda)
                               } else if (!(array_values instanceof Array)) {
                                throw new ReferenceError("map: invalid array argument, received: " + typeof array_values)
                                } else {
                                 // something else just pass on the error
                                 throw ex;
                                 }
                       }
                 }
};
        let do_deferred_splice=async function(tree) {    let rval;
    let idx;
    let tval;
    let deferred_operator;
    rval=null;
    idx=0;
    tval=null;
    deferred_operator=(["=","$","&","!"]).join("");
    return await async function(){
        if (check_true ((tree instanceof Array))) {
            {
                rval=[];
                await (async function(){
                     let __test_condition__26=async function() {
                        return (idx<(tree && tree.length))
                    };
                    let __body_ref__27=async function() {
                        tval=tree[idx];
                        if (check_true ((tval===deferred_operator))){
                            {
                                idx+=1;
                                tval=tree[idx];
                                rval=await rval["concat"].call(rval,await (async function(){
                                     return await do_deferred_splice(tval) 
                                })())
                            }
                        } else {
                            (rval).push(await (async function(){
                                 return await do_deferred_splice(tval) 
                            })())
                        };
                        return idx+=1
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__26()) {
                         await __body_ref__27();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                return rval
            }
        } else if (check_true ((tree instanceof Object))) {
            {
                rval=new Object();
                await (async function() {
                    let __for_body__30=async function(pset) {
                        return await async function(){
                            rval[(pset && pset["0"])]=await (async function(){
                                 return await do_deferred_splice((pset && pset["1"])) 
                            })();
                            return rval;
                            
                        }()
                    };
                    let __array__31=[],__elements__29=await (await Environment.get_global("pairs"))(tree);
                    let __BREAK__FLAG__=false;
                    for(let __iter__28 in __elements__29) {
                        __array__31.push(await __for_body__30(__elements__29[__iter__28]));
                        if(__BREAK__FLAG__) {
                             __array__31.pop();
                            break;
                            
                        }
                    }return __array__31;
                     
                })();
                return rval
            }
        } else {
            return tree
        }
    } ()
};
        let not=function anonymous(x) {
{ if (check_true(x)) { return false } else { return true } }
};
        let sub_type=function subtype(value) {  if (value === null) return "null";  else if (value === undefined) return "undefined";
  else if (value instanceof Array) return "array";
  else if (value.constructor && value.constructor!=null && value.constructor.name!=='Object') {
    return value.constructor.name;
  }
  return typeof value;
};
        let last=function anonymous(x) {
{ return x[x.length - 1] }
};
        let flatten=function anonymous(x) {
{ return x.flat(999999999999) } 
};
        let add=function anonymous(...args) {
{
                   let acc;
                   if (typeof args[0]==="number") {
                        acc = 0;
                        } else if (args[0] instanceof Array) {
                         return args[0].concat(args.slice(1));
                         } else if (typeof args[0]==='object') {
                          let rval = {};
                          for (let i in args) {
                                 if (typeof args[i] === 'object') {
                                      for (let k in args[i]) {
                                             rval[k] = args[i][k];
                                             }
                                      }
                                 }
                          return rval;
                          } else {
                           acc = "";
                           }
                   for (let i in args) {
                          acc += args[i];
                          }
                   return acc;
                   }
};
        let subtype=function subtype(value) {  if (value === null) return "null";
  else if (value === undefined) return "undefined";
  else if (value instanceof Array) return "array";
  else if (value.constructor && value.constructor!=null && value.constructor.name!=='Object') {
    return value.constructor.name;
  }
  return typeof value;
};
        let is_nil_ques_=async function(value) {    return (null===value)
};
        let is_number_ques_=function(x) {                        return ( subtype(x)==="Number")
                    };
        let starts_with_ques_=function anonymous(val,text) {
{ if (text instanceof Array) { return text[0]===val } else if (subtype(text)=='String') { return text.startsWith(val) } else { return false }}
};
        let uniq=async function(values) {    let s;
    s=new Set();
    await (await Environment.get_global("map"))(async function(x) {
        return await s["add"].call(s,x)
    },(values|| []));
    return await (await Environment.get_global("to_array"))(s)
};
        let object_methods=async function(obj) {    let properties;
    let current_obj;
    properties=new Set();
    current_obj=obj;
    await (async function(){
         let __body_ref__270=async function() {
            await (await Environment.get_global("map"))(async function(item) {
                return await properties["add"].call(properties,item)
            },await Object.getOwnPropertyNames(current_obj));
            return current_obj=await Object.getPrototypeOf(current_obj)
        };
        let __BREAK__FLAG__=false;
        while(current_obj) { await __body_ref__270();
         if(__BREAK__FLAG__) {
             break;
            
        }
    } ;
    
})();
return await (async function() {
    {
         let __call_target__=await Array.from(await properties["keys"]()), __call_method__="filter";
        return await __call_target__[__call_method__].call(__call_target__,async function(item) {
            return item instanceof Function
        })
    } 
})()
};
        let conj=function anonymous(...args) {
{   let list = [];
                       if (args[0] instanceof Array) {
                            list = args[0];
                            } else {
                             list = [args[0]];
                             }
                       args.slice(1).map(function(x) {
                                          list = list.concat(x);
                                          });
                       return list;
                       }
};
        let cl_encode_string=async function(text) {    if (check_true ((text instanceof String || typeof text==='string'))){
        {
            let escaped;
            let nq;
            let step1;
            let snq;
            escaped=await (await Environment.get_global("replace"))(new RegExp("\n","g"),await (await Environment.get_global("add"))(await String.fromCharCode(92),"n"),text);
            escaped=await (await Environment.get_global("replace"))(new RegExp("\r","g"),await (await Environment.get_global("add"))(await String.fromCharCode(92),"r"),escaped);
            nq=(escaped).split(await String.fromCharCode(34));
            step1=(nq).join(await (await Environment.get_global("add"))(await String.fromCharCode(92),await String.fromCharCode(34)));
            snq=(step1).split(await String.fromCharCode(39));
            return step1
        }
    } else {
        return text
    }
};
        let contains_ques_=function anonymous(value,container) {
{ if (!value && !container) { return false }
                         else if (container === null) { throw new TypeError("contains?: passed nil/undefined container value"); }
                                            else if (container instanceof Array) return container.includes(value);
                                            else if (container instanceof Set) return container.has(value);
                                            else if ((container instanceof String) || typeof container === "string") {
                                                     if (subtype(value) === "Number") return container.indexOf(""+value)>-1;
                                                     else return container.indexOf(value)>-1;
                                                     }
                                            else throw new TypeError("contains?: passed invalid container type: "+subtype(container)) }
};
        let tree;
        let expanded_tree;
        let op;
        let default_safety_level;
        let source_name;
        let build_environment_mode;
        let env_ref;
        let operator;
        let break_out;
        let tokens;
        let tokenized;
        let target_namespace;
        let errors;
        let external_dependencies;
        let first_level_setup;
        let needs_first_level;
        let throttle_level;
        let signal_error;
        let warnings;
        let blk_counter;
        let ctx;
        let output;
        let __log__1= async function(){
            return await Environment.get_global("log")
        };
        let __defclog__2= async function(){
            return async function(opts) {
                let style;
                style=("padding: 5px;"+ await (async function(){
                    if (check_true ((opts && opts["background"]))){
                        return ("background: "+ (opts && opts["background"])+ ";")
                    } else {
                        return ""
                    }
                })()+ await (async function(){
                    if (check_true ((opts && opts["color"]))){
                        return ("color: "+ (opts && opts["color"])+ ";")
                    }
                })()+ "");
                ;
                return async function(...args) {
                    return await (async function(){
                        let __target_arg__8=[].concat(await conj([style],args));
                        if(!__target_arg__8 instanceof Array){
                            throw new TypeError("Invalid final argument to apply - an array is required")
                        }let __pre_arg__9=("%c"+ await (async function(){
                            if (check_true ((opts && opts["prefix"]))){
                                return (opts && opts["prefix"])
                            } else {
                                return (args).shift()
                            }
                        })());
                        __target_arg__8.unshift(__pre_arg__9);
                        return (console.log).apply(this,__target_arg__8)
                    })()
                }
            }
        };
        let quiet_mode;
        let show_hints;
        let error_log;
        let dynamic_references_ques_;
        let assembly;
        let async_function_type_placeholder;
        let function_type_placeholder;
        let type_marker;
        let return_marker;
        let entry_signature;
        let temp_fn_asn_template;
        let anon_fn_template;
        let build_fn_with_assignment;
        let build_anon_fn;
        let completion_types;
        let referenced_global_symbols;
        let referenced_externals;
        let __new_ctx__3= async function(){
            return function(parent) {
                let ctx_obj;
                ctx_obj=new Object();
                  (function(){
                    ctx_obj["scope"]=new Object();
                    ctx_obj["source"]=source_name;
                    ctx_obj["parent"]=parent;
                    ctx_obj["ambiguous"]=new Object();
                    ctx_obj["declared_types"]=new Object();
                    ctx_obj["defs"]=[];
                    return ctx_obj;
                    
                })();
                if (check_true (parent)){
                    {
                          (function(){
                            let __target_obj__19=(ctx_obj && ctx_obj["scope"]);
                            __target_obj__19["namespace"]=(parent && parent["scope"] && parent["scope"]["namespace"]);
                            return __target_obj__19;
                            
                        })();
                        if (check_true ((parent && parent["defvar_eval"]))){
                            {
                                  (function(){
                                    ctx_obj["defvar_eval"]=true;
                                    return ctx_obj;
                                    
                                })()
                            }
                        };
                        if (check_true ((parent && parent["has_first_level"]))){
                            {
                                  (function(){
                                    ctx_obj["has_first_level"]=true;
                                    return ctx_obj;
                                    
                                })()
                            }
                        };
                        if (check_true ((parent && parent["block_step"]))){
                            {
                                  (function(){
                                    ctx_obj["block_step"]=(parent && parent["block_step"]);
                                    return ctx_obj;
                                    
                                })()
                            }
                        };
                        if (check_true ((parent && parent["block_id"]))){
                            {
                                  (function(){
                                    ctx_obj["block_id"]=(parent && parent["block_id"]);
                                    return ctx_obj;
                                    
                                })()
                            }
                        };
                        if (check_true ((parent && parent["sub_block_step"]))){
                            {
                                  (function(){
                                    ctx_obj["sub_block_step"]=(parent && parent["sub_block_step"]);
                                    return ctx_obj;
                                    
                                })()
                            }
                        };
                        if (check_true (false)){
                            {
                                  (function(){
                                    ctx_obj["return_point"]= add((parent && parent["return_point"]),1);
                                    return ctx_obj;
                                    
                                })()
                            }
                        }
                    }
                };
                return ctx_obj
            }
        };
        let set_ctx_log;
        let map_ctype_to_value;
        let map_value_to_ctype;
        let set_ctx;
        let get_ctx;
        let get_ctx_val;
        let get_declarations;
        let set_declaration;
        let is_ambiguous_ques_;
        let set_ambiguous;
        let unset_ambiguous;
        let invalid_js_ref_chars;
        let invalid_js_ref_chars_regex;
        let check_invalid_js_ref;
        let __sanitize_js_ref_name__4= async function(){
            return await Environment.get_global("sanitize_js_ref_name")
        };
        let find_in_context;
        let source_chain;
        let source_from_tokens;
        let source_comment;
        let NOT_FOUND;
        let THIS_REFERENCE;
        let NOT_FOUND_THING;
        let get_lisp_ctx_log;
        let get_lisp_ctx;
        let get_val;
        let has_lisp_globals;
        let root_ctx;
        let tokenize_object;
        let tokenize_quote;
        let tokenize;
        let comp_time_log;
        let compile_time_eval;
        let infix_ops;
        let compile_set_prop;
        let compile_prop;
        let compile_elem;
        let inline_log;
        let compile_inline;
        let compile_push;
        let compile_list;
        let compile_typeof;
        let compile_instanceof;
        let compile_compare;
        let compile_assignment;
        let top_level_log;
        let compile_toplevel;
        let check_statement_completion;
        let compile_block;
        let Expression;
        let Statement;
        let NumberType;
        let StringType;
        let NilType;
        let UnknownType;
        let ArgumentType;
        let compile_defvar;
        let get_declaration_details;
        let clean_quoted_reference;
        let compile_let;
        let in_sync_ques_;
        let await_ques_;
        let calling_preamble;
        let fn_log;
        let comp_scope_log;
        let completion_scope_id;
        let set_new_completion_scope;
        let compile_fn;
        let compile_jslambda;
        let compile_yield;
        let var_counter;
        let gen_temp_name;
        let if_id;
        let compile_cond;
        let compile_cond_inner;
        let ensure_block;
        let compile_if;
        let compile_as_call;
        let rwfnlog;
        let compile_wrapper_fn;
        let compile_block_to_anon_fn;
        let make_do_block;
        let push_as_arg_list;
        let compile_new;
        let compile_val_mod;
        let compile_try;
        let compile_try_inner;
        let compile_throw;
        let compile_break;
        let compile_return;
        let apply_log;
        let compile_apply;
        let compile_call;
        let compile_call_inner;
        let check_needs_wrap;
        let compile_import;
        let compile_dynamic_import;
        let compile_javascript;
        let compile_set_global;
        let is_token_ques_;
        let compile_quote;
        let compile_quotel;
        let wrap_and_run;
        let quote_tree;
        let quotem_log;
        let compile_quotem;
        let compile_unquotem;
        let eval_log;
        let compile_eval;
        let compile_debug;
        let compile_for_each;
        let compile_for_each_inner;
        let compile_while;
        let compile_for_with;
        let compile_for_with_inner;
        let silence;
        let verbosity;
        let check_verbosity;
        let declare_log;
        let compile_declare;
        let safety_level;
        let debug_level;
        let get_scoped_type;
        let compile_scoped_reference;
        let compile_lisp_scoped_reference;
        let standard_types;
        let externals;
        let is_error;
        let is_block_ques_;
        let is_complex_ques_;
        let is_form_ques_;
        let op_lookup;
        let comp_log;
        let last_source;
        let compile_obj_literal;
        let is_literal_ques_;
        let comp_warn;
        let __compile__5= async function(){
            return async function(tokens,ctx,_cdepth) {
                if (check_true (is_error)){
                    return is_error
                } else {
                    {
                        let _dbg_level=await debug_level(ctx);
                        ;
                        let rval=await compile_inner(tokens,ctx,_cdepth,_dbg_level);
                        ;
                        if (check_true (is_error)){
                            {
                                if (check_true ((opts && opts["throw_on_error"]))){
                                    {
                                        let error=new Error((is_error && is_error["error"]));
                                        ;
                                        await (async function() {
                                            let __for_body__562=async function(pset) {
                                                return await async function(){
                                                    error[(pset && pset["0"])]=(pset && pset["1"]);
                                                    return error;
                                                    
                                                }()
                                            };
                                            let __array__563=[],__elements__561=await (await Environment.get_global("pairs"))(is_error);
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__560 in __elements__561) {
                                                __array__563.push(await __for_body__562(__elements__561[__iter__560]));
                                                if(__BREAK__FLAG__) {
                                                     __array__563.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__563;
                                             
                                        })();
                                        throw error;
                                        
                                    }
                                }
                            }
                        };
                        if (check_true (((_dbg_level>1)&& (await first(rval) instanceof Object)&& (await length(rval)>2)))){
                            {
                                await async function(){
                                    let __target_obj__565=await first(rval);
                                    __target_obj__565["source_comment"]=await (async function(){
                                         return await (await Environment.get_global("truncate"))(100,await source_from_tokens(tokens,expanded_tree),"...") 
                                    })();
                                    return __target_obj__565;
                                    
                                }()
                            }
                        };
                        return rval
                    }
                }
            }
        };
        let compile_inner;
        let final_token_assembly;
        let main_log;
        let assemble_output;
        {
            tree=quoted_lisp;
            expanded_tree=await (async function(){
                 return await clone(tree) 
            })();
            op=null;
            default_safety_level=((Environment && Environment["declarations"] && Environment["declarations"]["safety"] && Environment["declarations"]["safety"]["level"])|| 1);
            source_name=((opts && opts["source_name"])|| "anonymous");
            build_environment_mode=((opts && opts["build_environment"])|| false);
            env_ref=await (async function(){
                if (check_true (build_environment_mode)){
                    return ""
                } else {
                    return "Environment."
                }
            })();
            operator=null;
            break_out="__BREAK__FLAG__";
            tokens=[];
            tokenized=null;
            target_namespace=null;
            errors=[];
            external_dependencies=new Object();
            first_level_setup=[];
            needs_first_level=true;
            throttle_level=(opts && opts["throttle"]);
            signal_error=async function(message) {
                return new LispSyntaxError(message)
            };
            warnings=[];
            blk_counter=0;
            ctx=null;
            output=null;
            let log=await __log__1();
            ;
            let defclog=await __defclog__2();
            ;
            quiet_mode=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    {
                        log=console.log;
                        return true
                    }
                } else {
                    return false
                }
            })();
            show_hints=null;
            error_log=await (async function(){
                 return await defclog({
                    prefix:"Compile Error",background:"#CA3040",color:"white"
                }) 
            })();
            dynamic_references_ques_=false;
            assembly=[];
            async_function_type_placeholder=async function() {
                return true
            };
            function_type_placeholder=function() {
                return true
            };
            type_marker=async function(type) {
                return await async function(){
                    let __target_obj__10=new Object();
                    __target_obj__10["ctype"]=type;
                    __target_obj__10["args"]=[];
                    return __target_obj__10;
                    
                }()
            };
            return_marker=async function() {
                return {
                    mark:"rval"
                }
            };
            entry_signature=null;
            temp_fn_asn_template=await (async function(){
                 return [{
                    type:"special",val:await (async function(){
                         return "=:defvar" 
                    })(),ref:true,name:"defvar"
                },{
                    type:"literal",val:"\"\"",ref:false,name:""
                },{
                    type:"arr",val:await (async function(){
                         return [{
                            type:"special",val:await (async function(){
                                 return "=:fn" 
                            })(),ref:true,name:"fn"
                        },{
                            type:"arr",val:[],ref:false,name:null
                        },{
                            type:"arr",val:[],ref:false,name:null
                        }] 
                    })(),ref:false,name:null
                }] 
            })();
            anon_fn_template=await temp_fn_asn_template["slice"].call(temp_fn_asn_template,2);
            build_fn_with_assignment=async function(tmp_var_name,body,args,ctx) {
                let tmp_template;
                tmp_template=await (async function(){
                     return await clone(temp_fn_asn_template) 
                })();
                if (check_true (await in_sync_ques_(ctx))){
                    {
                        await async function(){
                            let __target_obj__11=(tmp_template && tmp_template["2"] && tmp_template["2"]["val"] && tmp_template["2"]["val"]["0"]);
                            __target_obj__11["val"]=await (async function(){
                                 return "=:function" 
                            })();
                            return __target_obj__11;
                            
                        }();
                        await async function(){
                            let __target_obj__12=(tmp_template && tmp_template["2"] && tmp_template["2"]["val"] && tmp_template["2"]["val"]["0"]);
                            __target_obj__12["name"]="function";
                            return __target_obj__12;
                            
                        }()
                    }
                };
                await async function(){
                    let __target_obj__13=(tmp_template && tmp_template["1"]);
                    __target_obj__13["name"]=tmp_var_name;
                    __target_obj__13["val"]=tmp_var_name;
                    return __target_obj__13;
                    
                }();
                if (check_true ((args instanceof Array))){
                    {
                        await async function(){
                            let __target_obj__14=(tmp_template && tmp_template["2"] && tmp_template["2"]["val"] && tmp_template["2"]["val"]["1"]);
                            __target_obj__14["val"]=args;
                            return __target_obj__14;
                            
                        }()
                    }
                };
                await async function(){
                    let __target_obj__15=(tmp_template && tmp_template["2"] && tmp_template["2"]["val"] && tmp_template["2"]["val"]["2"]);
                    __target_obj__15["val"]=body;
                    return __target_obj__15;
                    
                }();
                return tmp_template
            };
            build_anon_fn=async function(body,args) {
                let tmp_template;
                tmp_template=await (async function(){
                     return await clone(anon_fn_template) 
                })();
                if (check_true (await verbosity(ctx))){
                    {
                        await console.log("build_anon_function: -> body: ",body);
                        await console.log("build_anon_function: -> args: ",args)
                    }
                };
                if (check_true ((args instanceof Array))){
                    {
                        await async function(){
                            let __target_obj__16=(tmp_template && tmp_template["0"] && tmp_template["0"]["val"] && tmp_template["0"]["val"]["1"]);
                            __target_obj__16["val"]=args;
                            return __target_obj__16;
                            
                        }()
                    }
                };
                await async function(){
                    let __target_obj__17=(tmp_template && tmp_template["0"] && tmp_template["0"]["val"] && tmp_template["0"]["val"]["2"]);
                    __target_obj__17["val"]=body;
                    return __target_obj__17;
                    
                }();
                return tmp_template
            };
            completion_types=["return","throw","yield"];
            referenced_global_symbols=new Set();
            referenced_externals=new Set();
            let new_ctx=await __new_ctx__3();
            ;
            set_ctx_log=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    return log
                } else {
                    return await defclog({
                        prefix:"set_ctx",background:"darkgreen",color:"white"
                    })
                }
            })();
            map_ctype_to_value=async function(ctype,value) {
                return await async function(){
                    if (check_true ((ctype==="Function"))) {
                        return Function
                    } else if (check_true ((ctype==="AsyncFunction"))) {
                        return AsyncFunction
                    } else if (check_true ((ctype==="expression"))) {
                        return Expression
                    } else if (check_true (((ctype instanceof String || typeof ctype==='string')&& await contains_ques_("block",ctype)))) {
                        return UnknownType
                    } else if (check_true ((ctype==="array"))) {
                        return Array
                    } else if (check_true ((ctype==="nil"))) {
                        return NilType
                    } else if (check_true (ctype instanceof Function)) {
                        return ctype
                    } else {
                        return value
                    }
                } ()
            };
            map_value_to_ctype=async function(value) {
                return await async function(){
                    if (check_true ((Function===value))) {
                        return "Function"
                    } else if (check_true ((AsyncFunction===value))) {
                        return "AsyncFunction"
                    } else if (check_true ((NumberType===value))) {
                        return "NumberType"
                    } else if (check_true ((Expression===value))) {
                        return "Expression"
                    } else if (check_true ((Array===value))) {
                        return "array"
                    } else if (check_true ((Boolean===value))) {
                        return "Boolean"
                    } else if (check_true ((NilType===value))) {
                        return "nil"
                    } else if (check_true ((Object===value))) {
                        return "Object"
                    } else {
                        return value
                    }
                } ()
            };
            set_ctx=async function(ctx,name,value) {
                let sanitized_name=await sanitize_js_ref_name(name);
                ;
                if (check_true (((value instanceof Array)&& (value && value["0"] && value["0"]["ctype"])))){
                    return await async function(){
                        let __target_obj__26=(ctx && ctx["scope"]);
                        __target_obj__26[sanitized_name]=await (async function(){
                             return await async function(){
                                if (check_true (((value && value["0"] && value["0"]["ctype"])==="Function"))) {
                                    return Function
                                } else if (check_true (((value && value["0"] && value["0"]["ctype"])==="AsyncFunction"))) {
                                    return AsyncFunction
                                } else if (check_true (((value && value["0"] && value["0"]["ctype"])==="expression"))) {
                                    return Expression
                                } else {
                                    return value
                                }
                            } () 
                        })();
                        return __target_obj__26;
                        
                    }()
                } else {
                    return await async function(){
                        let __target_obj__27=(ctx && ctx["scope"]);
                        __target_obj__27[sanitized_name]=value;
                        return __target_obj__27;
                        
                    }()
                }
            };
            get_ctx=async function(ctx,name) {
                let ref_name;
                ref_name=null;
                return await async function(){
                    if (check_true (await (async function(){
                         return await is_nil_ques_(name) 
                    })())) {
                        throw new SyntaxError(("get_ctx: nil identifier passed: "+ await sub_type(name)));
                        
                    } else if (check_true (await is_number_ques_(name))) {
                        return name
                    } else if (check_true (name instanceof Function)) {
                        throw new SyntaxError(("get_ctx: invalid identifier passed: "+ await sub_type(name)));
                        
                    } else {
                        {
                            ref_name=await first(await (await Environment.get_global("get_object_path"))(name));
                            return await async function(){
                                if (check_true (await not((undefined===await (async function(){
                                    let __targ__28=(ctx && ctx["scope"]);
                                    if (__targ__28){
                                         return(__targ__28)[ref_name]
                                    } 
                                })())))) {
                                    return await (async function(){
                                        let __targ__29=(ctx && ctx["scope"]);
                                        if (__targ__29){
                                             return(__targ__29)[ref_name]
                                        } 
                                    })()
                                } else if (check_true ((ctx && ctx["parent"]))) {
                                    return await get_ctx((ctx && ctx["parent"]),ref_name)
                                }
                            } ()
                        }
                    }
                } ()
            };
            get_ctx_val=async function(ctx,name) {
                let ref_name;
                let declared_type_value;
                ref_name=null;
                declared_type_value=null;
                if (check_true ((null==ctx))){
                    {
                        await console.error("get_ctx_val: undefined/nil ctx passed.")
                    }
                };
                return await async function(){
                    if (check_true (await (async function(){
                         return await is_nil_ques_(name) 
                    })())) {
                        throw new TypeError(("get_ctx_val: nil identifier passed: "+ await sub_type(name)));
                        
                    } else if (check_true (await is_number_ques_(name))) {
                        return name
                    } else if (check_true (name instanceof Function)) {
                        throw new Error(("get_ctx_val: invalid identifier passed: "+ await sub_type(name)));
                        
                    } else {
                        {
                            if (check_true (await starts_with_ques_(await (async function(){
                                 return "=:" 
                            })(),name))){
                                ref_name=await name["substr"].call(name,2)
                            } else {
                                ref_name=name
                            };
                            ref_name=await sanitize_js_ref_name(name);
                            declared_type_value=await get_declarations(ctx,ref_name);
                            return await async function(){
                                if (check_true ((declared_type_value && declared_type_value["declared_global"]))) {
                                    return undefined
                                } else if (check_true ((declared_type_value && declared_type_value["type"]))) {
                                    return (declared_type_value && declared_type_value["type"])
                                } else {
                                    {
                                        ref_name=await first(await (await Environment.get_global("get_object_path"))(ref_name));
                                        return await async function(){
                                            if (check_true (op_lookup[ref_name])) {
                                                return AsyncFunction
                                            } else if (check_true (await not((undefined===await (async function(){
                                                let __targ__30=(ctx && ctx["scope"]);
                                                if (__targ__30){
                                                     return(__targ__30)[ref_name]
                                                } 
                                            })())))) {
                                                return await (async function(){
                                                    let __targ__31=(ctx && ctx["scope"]);
                                                    if (__targ__31){
                                                         return(__targ__31)[ref_name]
                                                    } 
                                                })()
                                            } else if (check_true ((ctx && ctx["parent"]))) {
                                                return await get_ctx((ctx && ctx["parent"]),ref_name)
                                            }
                                        } ()
                                    }
                                }
                            } ()
                        }
                    }
                } ()
            };
            get_declarations=async function(ctx,name,_tagged) {
                let ref_name;
                let oname;
                let root_name;
                ref_name=null;
                oname=name;
                root_name=null;
                name=await (async function(){
                    if (check_true (_tagged)){
                        return name
                    } else {
                        return await sanitize_js_ref_name(name)
                    }
                })();
                return await async function(){
                    if (check_true (await not((ctx instanceof Object)))) {
                        throw new TypeError(("get_declarations: invalid ctx passed"));
                        
                    } else if (check_true (await (async function(){
                         return await is_nil_ques_(name) 
                    })())) {
                        throw new TypeError(("get_declarations: nil identifier passed: "+ await sub_type(oname)));
                        
                    } else if (check_true (await is_number_ques_(name))) {
                        return name
                    } else if (check_true (name instanceof Function)) {
                        throw new Error(("get_declarations: invalid identifier passed: "+ await sub_type(oname)));
                        
                    } else {
                        if (check_true ((name instanceof String || typeof name==='string'))){
                            {
                                if (check_true (await starts_with_ques_(await (async function(){
                                     return "=:" 
                                })(),name))){
                                    ref_name=await name["substr"].call(name,2)
                                } else {
                                    ref_name=name
                                };
                                return await async function(){
                                    if (check_true (op_lookup[ref_name])) {
                                        return null
                                    } else if (check_true (await not((undefined===await (async function(){
                                        let __targ__32=(ctx && ctx["declared_types"]);
                                        if (__targ__32){
                                             return(__targ__32)[ref_name]
                                        } 
                                    })())))) {
                                        return await (async function(){
                                            let __targ__33=(ctx && ctx["declared_types"]);
                                            if (__targ__33){
                                                 return(__targ__33)[ref_name]
                                            } 
                                        })()
                                    } else if (check_true ((ctx && ctx["parent"]))) {
                                        return await get_declarations((ctx && ctx["parent"]),ref_name,true)
                                    }
                                } ()
                            }
                        }
                    }
                } ()
            };
            set_declaration=async function(ctx,name,declaration_type,value) {
                let sname;
                let dec_struct;
                sname=await sanitize_js_ref_name(name);
                dec_struct=await get_declarations(ctx,sname);
                if (check_true (await (await Environment.get_global("blank?"))(dec_struct))){
                    {
                        dec_struct={
                            type:undefined,inlined:false
                        }
                    }
                };
                return await async function(){
                    if (check_true (((declaration_type==="location")&& (value==="global")))) {
                        {
                            has_lisp_globals=true;
                            if (check_true ((undefined===dec_struct["type"]))){
                                throw new SyntaxError("global declaration must be after declaration of type for symbol");
                                
                            };
                            await async function(){
                                dec_struct["declared_global"]=true;
                                return dec_struct;
                                
                            }();
                            return await async function(){
                                let __target_obj__35=(root_ctx && root_ctx["defined_lisp_globals"]);
                                __target_obj__35[name]=dec_struct["type"];
                                return __target_obj__35;
                                
                            }()
                        }
                    } else {
                        {
                            await async function(){
                                dec_struct[declaration_type]=value;
                                return dec_struct;
                                
                            }();
                            await async function(){
                                let __target_obj__37=(ctx && ctx["declared_types"]);
                                __target_obj__37[sname]=dec_struct;
                                return __target_obj__37;
                                
                            }();
                            return await (async function(){
                                let __targ__38=(ctx && ctx["declared_types"]);
                                if (__targ__38){
                                     return(__targ__38)[sname]
                                } 
                            })()
                        }
                    }
                } ()
            };
            is_ambiguous_ques_=async function(ctx,name) {
                let ref_name;
                ref_name=null;
                return await async function(){
                    if (check_true (await (async function(){
                         return await is_nil_ques_(ctx) 
                    })())) {
                        throw new TypeError(("is_ambiguous?: nil ctx passed"));
                        
                    } else if (check_true (await (async function(){
                         return await is_nil_ques_(name) 
                    })())) {
                        throw new TypeError(("is_ambiguous?: nil reference name passed"));
                        
                    } else if (check_true (await not((name instanceof String || typeof name==='string')))) {
                        throw new TypeError(("is_ambiguous?: reference name given is a "+ await sub_type(name)+ ", requires a string"));
                        
                    } else {
                        {
                            if (check_true (await starts_with_ques_(await (async function(){
                                 return "=:" 
                            })(),name))){
                                ref_name=await name["substr"].call(name,2)
                            } else {
                                ref_name=name
                            };
                            ref_name=await first(await (await Environment.get_global("get_object_path"))(ref_name));
                            return await async function(){
                                if (check_true (await (async function(){
                                    let __targ__39=(ctx && ctx["ambiguous"]);
                                    if (__targ__39){
                                         return(__targ__39)[ref_name]
                                    } 
                                })())) {
                                    return true
                                } else if (check_true ((ctx && ctx["parent"]))) {
                                    return await is_ambiguous_ques_((ctx && ctx["parent"]),ref_name)
                                }
                            } ()
                        }
                    }
                } ()
            };
            set_ambiguous=async function(ctx,name) {
                return await async function(){
                    let __target_obj__40=(ctx && ctx["ambiguous"]);
                    __target_obj__40[name]=true;
                    return __target_obj__40;
                    
                }()
            };
            unset_ambiguous=async function(ctx,name) {
                return await (await Environment.get_global("delete_prop"))((ctx && ctx["ambiguous"]),name)
            };
            invalid_js_ref_chars="+?-%&^#!*[]~{}/|";
            invalid_js_ref_chars_regex=new RegExp("[/\%\+\[\>\?\<\\}\{&\#\^\=\~\*\!\)\(\-]+","g");
            check_invalid_js_ref=async function(symname) {
                return await async function(){
                    if (check_true (await not((symname instanceof String || typeof symname==='string')))) {
                        return false
                    } else if (check_true (((symname instanceof String || typeof symname==='string')&& (await length(symname)>2)&& await starts_with_ques_(await (async function(){
                         return "=:" 
                    })(),symname)))) {
                        return (await length(await (await Environment.get_global("scan_str"))(invalid_js_ref_chars_regex,await symname["substr"].call(symname,2)))>0)
                    } else {
                        return (await length(await (await Environment.get_global("scan_str"))(invalid_js_ref_chars_regex,symname))>0)
                    }
                } ()
            };
            let sanitize_js_ref_name=await __sanitize_js_ref_name__4();
            ;
            find_in_context=async function(ctx,name) {
                let symname;
                let ref;
                let __is_literal_ques___41= async function(){
                    return (await is_number_ques_(name)|| (await not(ref)&& (name instanceof String || typeof name==='string'))|| ("nil"===symname)|| ("null"===symname)|| (ref&& ("undefined"===symname))|| (ref&& ("else"===symname))|| (ref&& ("catch"===symname))|| (true===name)|| (false===name))
                };
                let special;
                let local;
                let global;
                let val;
                {
                    symname=await (async function(){
                         return await async function(){
                            if (check_true (((name instanceof String || typeof name==='string')&& (await length(name)>2)&& await starts_with_ques_(await (async function(){
                                 return "=:" 
                            })(),name)))) {
                                return await name["substr"].call(name,2)
                            } else if (check_true ((name instanceof String || typeof name==='string'))) {
                                return name
                            } else {
                                {
                                    if (check_true ((name===null))){
                                        {
                                            name=await (async function(){
                                                 return "=:nil" 
                                            })()
                                        }
                                    };
                                    return "null"
                                }
                            }
                        } () 
                    })();
                    ref=(symname&& ((name instanceof String || typeof name==='string')&& (await length(name)>2)&& await starts_with_ques_(await (async function(){
                         return "=:" 
                    })(),name)));
                    let is_literal_ques_=await __is_literal_ques___41();
                    ;
                    special=(ref&& symname&& await contains_ques_(symname,await conj(["unquotem","quotem"],await (await Environment.get_global("keys"))(op_lookup))));
                    local=(await not(special)&& await not(is_literal_ques_)&& symname&& ref&& await get_ctx_val(ctx,symname));
                    global=(await not(special)&& await not(is_literal_ques_)&& ref&& symname&& await get_lisp_ctx(ctx,symname));
                    val=await (async function(){
                         return await async function(){
                            if (check_true (is_literal_ques_)) {
                                return name
                            } else if (check_true ((name instanceof Array))) {
                                return name
                            } else if (check_true ((name instanceof Object))) {
                                return name
                            } else if (check_true (special)) {
                                return name
                            } else if (check_true (local)) {
                                return local
                            } else if (check_true ((await not((global===undefined))&& await not((global===NOT_FOUND))))) {
                                return global
                            } else if (check_true ((symname===name))) {
                                return name
                            }
                        } () 
                    })();
                    return {
                        type:await (async function(){
                             return await async function(){
                                if (check_true ((name instanceof Array))) {
                                    return "arr"
                                } else if (check_true (name instanceof Element)) {
                                    return "dom"
                                } else if (check_true ((name instanceof Object))) {
                                    return await sub_type(name)
                                } else if (check_true (special)) {
                                    return "special"
                                } else if (check_true (is_literal_ques_)) {
                                    return "literal"
                                } else if (check_true (local)) {
                                    return await sub_type(local)
                                } else if (check_true (await not((undefined==global)))) {
                                    return await sub_type(global)
                                } else if (check_true ((ref&& symname))) {
                                    return "unbound"
                                } else if (check_true ((name===undefined))) {
                                    return "literal"
                                } else {
                                    {
                                        await error_log("find_in_context: unknown type: ",name);
                                        debugger;
                                        ;
                                        return "??"
                                    }
                                }
                            } () 
                        })(),name:await (async function(){
                             return await async function(){
                                if (check_true ((symname&& ref))) {
                                    return await sanitize_js_ref_name(symname)
                                } else if (check_true ((false&& is_literal_ques_&& (val instanceof String || typeof val==='string')))) {
                                    return await sanitize_js_ref_name(name)
                                } else if (check_true (is_literal_ques_)) {
                                    if (check_true (ref)){
                                        return await sanitize_js_ref_name(name)
                                    } else {
                                        return name
                                    }
                                } else {
                                    return null
                                }
                            } () 
                        })(),val:await (async function(){
                            if (check_true ((val===undefined))){
                                return undefined
                            } else {
                                return val
                            }
                        })(),ref:await (async function(){
                            if (check_true (ref)){
                                return true
                            } else {
                                return false
                            }
                        })(),local:(local|| null),global:((await not((undefined===global))&& await not((NOT_FOUND===global)))|| null)
                    }
                }
            };
            source_chain=async function(cpath,tree,sources) {
                if (check_true (((cpath instanceof Array)&& tree))){
                    {
                        let source;
                        sources=(sources|| []);
                        source=null;
                        cpath=await (await Environment.get_global("chop"))(cpath);
                        source=await (await Environment.get_global("as_lisp"))(await (await Environment.get_global("resolve_path"))(cpath,tree));
                        if (check_true (((source && source.length)>80))){
                            source=await add(await source["substr"].call(source,0,80),"...")
                        };
                        if (check_true (await not(await (await Environment.get_global("blank?"))(source)))){
                            {
                                (sources).push(source)
                            }
                        };
                        if (check_true ((((cpath && cpath.length)>0)&& ((sources && sources.length)<4)))){
                            await source_chain(cpath,tree,sources)
                        };
                        return sources
                    }
                }
            };
            source_from_tokens=async function(tokens,tree,collect_parents_ques_) {
                return await async function(){
                    if (check_true (((tokens && tokens["path"])&& collect_parents_ques_))) {
                        return await source_chain((tokens && tokens["path"]),tree)
                    } else if (check_true ((tree instanceof String || typeof tree==='string'))) {
                        return await (await Environment.get_global("as_lisp"))(tree)
                    } else if (check_true ((tokens && tokens["path"]))) {
                        return await (await Environment.get_global("as_lisp"))(await (await Environment.get_global("resolve_path"))((tokens && tokens["path"]),tree))
                    } else if (check_true (((tokens instanceof Array)&& (tokens && tokens["0"] && tokens["0"]["path"])&& collect_parents_ques_))) {
                        return await source_chain((tokens && tokens["0"] && tokens["0"]["path"]),tree)
                    } else if (check_true (((tokens instanceof Array)&& (tokens && tokens["0"] && tokens["0"]["path"])))) {
                        return await (await Environment.get_global("as_lisp"))(await (await Environment.get_global("resolve_path"))(await (await Environment.get_global("chop"))((tokens && tokens["0"] && tokens["0"]["path"])),tree))
                    } else if (check_true (((undefined===tokens)&& await not((undefined===tree))))) {
                        return await (await Environment.get_global("as_lisp"))(tree)
                    } else {
                        {
                            if (check_true (await verbosity(ctx))){
                                {
                                    await console.warn("source_from_tokens: unable to determine source path from: ",await (async function(){
                                         return await clone(tokens) 
                                    })())
                                }
                            };
                            return ""
                        }
                    }
                } ()
            };
            source_comment=async function(tokens) {
                return {
                    comment:await source_from_tokens(tokens,expanded_tree)
                }
            };
            NOT_FOUND="__!NOT_FOUND!__";
            THIS_REFERENCE=async function() {
                return "this"
            };
            NOT_FOUND_THING=async function() {
                return true
            };
            get_lisp_ctx_log=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    return log
                } else {
                    return await defclog({
                        prefix:"get_lisp_ctx",color:"darkgreen",background:"#A0A0A0"
                    })
                }
            })();
            get_lisp_ctx=async function(ctx,name) {
                if (check_true (await not((name instanceof String || typeof name==='string')))){
                    throw new Error("Compiler Error: get_lisp_ctx passed a non string identifier");
                    
                } else {
                    {
                        let comps;
                        let cannot_be_js_global;
                        let ref_name;
                        let ref_type;
                        comps=await (await Environment.get_global("get_object_path"))(name);
                        cannot_be_js_global=await check_invalid_js_ref((comps && comps["0"]));
                        ref_name=(comps).shift();
                        ref_type=await (async function(){
                            if (check_true ((ref_name==="this"))){
                                return THIS_REFERENCE
                            } else {
                                {
                                    let global_ref=await (async function(){
                                        let __targ__42=(root_ctx && root_ctx["defined_lisp_globals"]);
                                        if (__targ__42){
                                             return(__targ__42)[ref_name]
                                        } 
                                    })();
                                    ;
                                    if (check_true (((undefined==global_ref)|| (global_ref==="statement")))){
                                        return await Environment["get_global"].call(Environment,ref_name,NOT_FOUND_THING,cannot_be_js_global)
                                    } else {
                                        return global_ref
                                    }
                                }
                            }
                        })();
                        await async function(){
                            if (check_true ((await not((NOT_FOUND_THING===ref_type))&& await not(await contains_ques_(ref_name,standard_types))))) {
                                {
                                    await referenced_global_symbols["add"].call(referenced_global_symbols,ref_name);
                                    {
                                        let it;
                                        it=await get_ctx(ctx,"__GLOBALS__");
                                        if (check_true (it)){
                                            return await it["add"].call(it,ref_name)
                                        } else {
                                            return 
                                        }
                                    }
                                }
                            } else if (check_true ((await not((NOT_FOUND_THING===ref_type))&& await externals["has"].call(externals,ref_name)))) {
                                {
                                    await referenced_externals["add"].call(referenced_externals,ref_name);
                                    {
                                        let it;
                                        it=await get_ctx(ctx,"__EXTERNALS__");
                                        if (check_true (it)){
                                            {
                                                return await it["add"].call(it,ref_name)
                                            }
                                        } else {
                                            return 
                                        }
                                    }
                                }
                            }
                        } ();
                        return await async function(){
                            if (check_true ((NOT_FOUND_THING===ref_type))) {
                                return undefined
                            } else if (check_true ((ref_type===THIS_REFERENCE))) {
                                return ref_type
                            } else if (check_true (((comps && comps.length)===0))) {
                                return ref_type
                            } else if (check_true ((((comps && comps.length)===1)&& (ref_type instanceof Object)&& await contains_ques_((comps && comps["0"]),await (async function(){
                                 return await object_methods(ref_type) 
                            })())))) {
                                return ref_type[(comps && comps["0"])]
                            } else if (check_true ((ref_type instanceof Function&& await is_ambiguous_ques_(root_ctx,ref_name)))) {
                                return ref_type
                            } else if (check_true ((ref_type instanceof Array))) {
                                return ref_type
                            } else if (check_true ((ref_type==="array"))) {
                                return []
                            } else if (check_true ((((comps && comps.length)===1)&& (ref_type instanceof Object)))) {
                                {
                                    let v=ref_type[(comps && comps["0"])];
                                    ;
                                    if (check_true (v)){
                                        return v
                                    } else {
                                        return ref_type
                                    }
                                }
                            } else if (check_true ((ref_type instanceof Object))) {
                                return (await (await Environment.get_global("resolve_path"))(comps,ref_type)|| ref_type)
                            } else if (check_true (((typeof ref_type==="object")&& await contains_ques_((comps && comps["0"]),await Object["keys"].call(Object,ref_type))))) {
                                {
                                    await (async function(){
                                         let __test_condition__43=async function() {
                                            return ((ref_type==undefined)|| ((comps && comps.length)>0))
                                        };
                                        let __body_ref__44=async function() {
                                            return ref_type=ref_type[(comps).shift()]
                                        };
                                        let __BREAK__FLAG__=false;
                                        while(await __test_condition__43()) {
                                             await __body_ref__44();
                                             if(__BREAK__FLAG__) {
                                                 break;
                                                
                                            }
                                        } ;
                                        
                                    })();
                                    return ref_type
                                }
                            } else if (check_true ((ref_type==="objliteral"))) {
                                return ref_type
                            } else {
                                {
                                    debugger;
                                    ;
                                    await (async function(){
                                        let __array_op_rval__45=get_lisp_ctx_log;
                                         if (__array_op_rval__45 instanceof Function){
                                            return await __array_op_rval__45("symbol not found: ",name,ref_name,ref_type,cannot_be_js_global) 
                                        } else {
                                            return [__array_op_rval__45,"symbol not found: ",name,ref_name,ref_type,cannot_be_js_global]
                                        }
                                    })();
                                    return undefined
                                }
                            }
                        } ()
                    }
                }
            };
            get_val=async function(token,ctx) {
                return await async function(){
                    if (check_true ((token && token["ref"]))) {
                        {
                            let comps=((token && token.name)).split(".");
                            ;
                            let ref_name=await (async function(){
                                if (check_true (((await safety_level(ctx)>1)&& ((comps && comps.length)>1)))){
                                    return await (await Environment.get_global("safe_access"))(token,ctx,sanitize_js_ref_name)
                                } else {
                                    return await sanitize_js_ref_name(await (async function(){
                                         return await (await Environment.get_global("expand_dot_accessor"))((token && token.name),ctx) 
                                    })())
                                }
                            })();
                            ;
                            if (check_true (await verbosity(ctx))){
                                {
                                    console.log("get_val: reference: ",await (async function(){
                                         return await (await Environment.get_global("safe_access"))(token,ctx,sanitize_js_ref_name) 
                                    })(),ref_name,":",await get_ctx(ctx,ref_name))
                                }
                            };
                            return await async function(){
                                if (check_true ((await get_ctx(ctx,"__IN_QUOTEM__")&& await not(await get_ctx(ctx,"__IN_LAMBDA__"))))) {
                                    return await get_ctx(ctx,ref_name)
                                } else if (check_true ((false&& await get_ctx(ctx,"__IN_QUOTEM__")&& await get_ctx(ctx,"__IN_LAMBDA__")))) {
                                    return ("await ctx_access(\""+ ref_name+ "\")")
                                } else {
                                    return ref_name
                                }
                            } ()
                        }
                    } else {
                        return (token && token["val"])
                    }
                } ()
            };
            has_lisp_globals=false;
            root_ctx=await (async function(){
                 return await new_ctx(((opts && opts["ctx"]))) 
            })();
            tokenize_object=async function(obj,ctx,_path) {
                let ser=null;
                ;
                {
                    try {
                        ser=await JSON.stringify(obj)
                    } catch (__exception__46) {
                        if (__exception__46 instanceof TypeError) {
                            let e=__exception__46;
                            {
                                {
                                    await console.warn("compiler: cannot tokenize: ",obj,e);
                                    ser="{}"
                                }
                            }
                        } else throw __exception__46;
                        
                    };
                    _path=(_path|| []);
                    if (check_true ((ser==="{}"))){
                        {
                            return {
                                type:"object",ref:false,val:"{}",name:"{}",__token__:true,path:_path
                            }
                        }
                    } else {
                        return await (async function() {
                            let __for_body__49=async function(pset) {
                                return {
                                    type:"keyval",val:await tokenize(pset,ctx,"path:",await add(_path,(pset && pset["0"]))),ref:false,name:(""+ await (await Environment.get_global("as_lisp"))((pset && pset["0"]))),__token__:true
                                }
                            };
                            let __array__50=[],__elements__48=await (await Environment.get_global("pairs"))(obj);
                            let __BREAK__FLAG__=false;
                            for(let __iter__47 in __elements__48) {
                                __array__50.push(await __for_body__49(__elements__48[__iter__47]));
                                if(__BREAK__FLAG__) {
                                     __array__50.pop();
                                    break;
                                    
                                }
                            }return __array__50;
                             
                        })()
                    }
                }
            };
            tokenize_quote=async function(args,_path) {
                return await async function(){
                    if (check_true (((args && args["0"])==="=:quote"))) {
                        return {
                            type:"arr",__token__:true,source:await (await Environment.get_global("as_lisp"))(args),val:await conj(await (async function(){
                                 return [{
                                    type:"special",val:await (async function(){
                                         return "=:quote" 
                                    })(),ref:true,name:"quote",__token__:true
                                }] 
                            })(),await args["slice"].call(args,1)),ref:((args instanceof String || typeof args==='string')&& (await length(args)>2)&& await starts_with_ques_(await (async function(){
                                 return "=:" 
                            })(),args)),name:null,path:_path
                        }
                    } else if (check_true (((args && args["0"])==="=:quotem"))) {
                        return {
                            type:"arr",__token__:true,source:await (await Environment.get_global("as_lisp"))(args),val:await conj(await (async function(){
                                 return [{
                                    type:"special",path:await conj(_path,[0]),val:await (async function(){
                                         return "=:quotem" 
                                    })(),ref:true,name:"quotem",__token__:true
                                }] 
                            })(),await args["slice"].call(args,1)),ref:((args instanceof String || typeof args==='string')&& (await length(args)>2)&& await starts_with_ques_(await (async function(){
                                 return "=:" 
                            })(),args)),name:null,path:_path
                        }
                    } else {
                        return {
                            type:"arr",__token__:true,source:await (await Environment.get_global("as_lisp"))(args),val:await conj(await (async function(){
                                 return [{
                                    type:"special",val:await (async function(){
                                         return "=:quotel" 
                                    })(),ref:true,name:"quotel",__token__:true
                                }] 
                            })(),await args["slice"].call(args,1)),ref:((args instanceof String || typeof args==='string')&& (await length(args)>2)&& await starts_with_ques_(await (async function(){
                                 return "=:" 
                            })(),args)),name:null,path:_path
                        }
                    }
                } ()
            };
            tokenize=async function(args,ctx,_path,_suppress_comptime_eval) {
                let argtype;
                let rval;
                let qval;
                let idx;
                let tobject;
                let argdetails;
                let argvalue;
                let is_ref;
                argtype=null;
                rval=null;
                ctx=ctx;
                _path=(_path|| []);
                qval=null;
                idx=-1;
                tobject=null;
                argdetails=null;
                argvalue=null;
                is_ref=null;
                ;
                if (check_true ((null==ctx))){
                    {
                        await console.error("tokenize: nil ctx passed: ",await (async function(){
                             return await clone(args) 
                        })());
                        throw new ReferenceError("nil/undefined ctx passed to tokenize");
                        
                    }
                };
                if (check_true (((args instanceof Array)&& await not(_suppress_comptime_eval)))){
                    {
                        args=await compile_time_eval(ctx,args,_path);
                        await async function(){
                            if (check_true (((_path && _path.length)>1))) {
                                {
                                    tobject=await (await Environment.get_global("resolve_path"))(await (await Environment.get_global("chop"))(_path),expanded_tree);
                                    if (check_true (tobject)){
                                        {
                                            return await async function(){
                                                tobject[await last(_path)]=args;
                                                return tobject;
                                                
                                            }()
                                        }
                                    }
                                }
                            } else if (check_true (((_path && _path.length)===1))) {
                                {
                                    await async function(){
                                        expanded_tree[await first(_path)]=args;
                                        return expanded_tree;
                                        
                                    }()
                                }
                            } else {
                                expanded_tree=args
                            }
                        } ()
                    }
                };
                return await async function(){
                    if (check_true (((args instanceof String || typeof args==='string')|| await is_number_ques_(args)|| ((args===true)|| (args===false))))) {
                        return await first(await tokenize([args],ctx,_path,true))
                    } else if (check_true (((args instanceof Array)&& (((args && args["0"])==="=:quotem")|| ((args && args["0"])==="=:quote")|| ((args && args["0"])==="=:quotel"))))) {
                        {
                            rval=await tokenize_quote(args,_path);
                            return rval
                        }
                    } else if (check_true (((args instanceof Array)&& await not(await get_ctx_val(ctx,"__IN_LAMBDA__"))&& ((args && args["0"])==="=:iprogn")))) {
                        {
                            rval=await compile_toplevel(args,ctx);
                            return await tokenize(rval,ctx,_path)
                        }
                    } else if (check_true ((await not((args instanceof Array))&& (args instanceof Object)))) {
                        return await first(await tokenize([args],ctx,await add(_path,0)))
                    } else {
                        {
                            if (check_true ((((args && args["0"])==="=:fn")|| ((args && args["0"])==="=:function")|| ((args && args["0"])==="=:=>")))){
                                {
                                    ctx=await (async function(){
                                         return await new_ctx(ctx) 
                                    })();
                                    await set_ctx(ctx,"__IN_LAMBDA__",true)
                                }
                            };
                            return await (async function() {
                                let __for_body__55=async function(arg) {
                                    idx+=1;
                                    try {
                                        argdetails=await find_in_context(ctx,arg)
                                    } catch (__exception__57) {
                                        if (__exception__57 instanceof LispSyntaxError) {
                                            let e=__exception__57;
                                            {
                                                {
                                                    is_error={
                                                        error:(e && e["name"]),source_name:source_name,message:(e && e.message),form:await (await Environment.get_global("resolve_path"))(_path,expanded_tree),parent_forms:((await (await Environment.get_global("chop"))(_path)&& await (await Environment.get_global("resolve_path"))(await (await Environment.get_global("chop"))(_path),expanded_tree))|| []),invalid:true
                                                    };
                                                    await async function(){
                                                        e["details"]=is_error;
                                                        e["handled"]=true;
                                                        return e;
                                                        
                                                    }();
                                                    await console.error(is_error);
                                                    debugger;
                                                    ;
                                                    throw e;
                                                    
                                                }
                                            }
                                        } else throw __exception__57;
                                        
                                    };
                                    argvalue=(argdetails && argdetails["val"]);
                                    argtype=(argdetails && argdetails["type"]);
                                    is_ref=(argdetails && argdetails["ref"]);
                                    return await async function(){
                                        if (check_true ((await sub_type(arg)==="array"))) {
                                            return {
                                                type:"arr",__token__:true,val:await tokenize(arg,ctx,await add(_path,idx)),ref:is_ref,name:null,path:await add(_path,idx)
                                            }
                                        } else if (check_true ((argtype==="Function"))) {
                                            return {
                                                type:"fun",__token__:true,val:arg,ref:is_ref,name:(""+ await (await Environment.get_global("as_lisp"))(arg)),global:(argdetails && argdetails["global"]),path:await add(_path,idx)
                                            }
                                        } else if (check_true ((argtype==="AsyncFunction"))) {
                                            return {
                                                type:"asf",__token__:true,val:arg,ref:is_ref,name:(""+ await (await Environment.get_global("as_lisp"))(arg)),global:(argdetails && argdetails["global"]),path:await add(_path,idx)
                                            }
                                        } else if (check_true ((argtype==="array"))) {
                                            return {
                                                type:"array",__token__:true,val:arg,ref:is_ref,name:(""+ await (await Environment.get_global("as_lisp"))(arg)),global:(argdetails && argdetails["global"]),path:await add(_path,idx)
                                            }
                                        } else if (check_true ((argtype==="Number"))) {
                                            return {
                                                type:"num",__token__:true,val:argvalue,ref:is_ref,name:(""+ await (await Environment.get_global("as_lisp"))(arg)),global:(argdetails && argdetails["global"]),path:await add(_path,idx)
                                            }
                                        } else if (check_true (((argtype==="String")&& is_ref))) {
                                            return {
                                                type:"arg",__token__:true,val:argvalue,ref:is_ref,name:await clean_quoted_reference((""+ await (await Environment.get_global("as_lisp"))(arg))),global:(argdetails && argdetails["global"]),local:(argdetails && argdetails["local"]),path:await add(_path,idx)
                                            }
                                        } else if (check_true ((argtype==="String"))) {
                                            return {
                                                type:"literal",__token__:true,val:argvalue,ref:is_ref,name:await clean_quoted_reference((""+ await (await Environment.get_global("as_lisp"))(arg))),global:(argdetails && argdetails["global"]),path:await add(_path,idx)
                                            }
                                        } else if (check_true ((argtype==="dom"))) {
                                            return {
                                                type:"null",__token__:true,val:null,ref:is_ref,name:await clean_quoted_reference((""+ await (await Environment.get_global("as_lisp"))(arg))),global:(argdetails && argdetails["global"]),path:await add(_path,idx)
                                            }
                                        } else if (check_true ((arg instanceof Object))) {
                                            {
                                                return {
                                                    type:"objlit",__token__:true,val:await tokenize_object(arg,ctx,await add(_path,idx)),ref:is_ref,name:null,path:await add(_path,idx)
                                                }
                                            }
                                        } else if (check_true (((argtype==="literal")&& is_ref&& ((""+ await (await Environment.get_global("as_lisp"))(arg))==="nil")))) {
                                            return {
                                                type:"null",__token__:true,val:null,ref:true,name:"null",path:await add(_path,idx)
                                            }
                                        } else if (check_true (((argtype==="unbound")&& is_ref&& (null==argvalue)))) {
                                            return {
                                                type:"arg",__token__:true,val:arg,ref:true,name:await clean_quoted_reference((""+ await (await Environment.get_global("as_lisp"))(arg))),global:(argdetails && argdetails["global"]),path:await add(_path,idx)
                                            }
                                        } else if (check_true (((argtype==="unbound")&& is_ref))) {
                                            return {
                                                type:await sub_type(argvalue),__token__:true,val:argvalue,ref:true,name:await clean_quoted_reference(await sanitize_js_ref_name((""+ await (await Environment.get_global("as_lisp"))(arg)))),path:await add(_path,idx)
                                            }
                                        } else {
                                            return {
                                                type:argtype,__token__:true,val:argvalue,ref:is_ref,name:await clean_quoted_reference((""+ await (await Environment.get_global("as_lisp"))(arg))),global:(argdetails && argdetails["global"]),local:(argdetails && argdetails["local"]),path:await add(_path,idx)
                                            }
                                        }
                                    } ()
                                };
                                let __array__56=[],__elements__54=args;
                                let __BREAK__FLAG__=false;
                                for(let __iter__53 in __elements__54) {
                                    __array__56.push(await __for_body__55(__elements__54[__iter__53]));
                                    if(__BREAK__FLAG__) {
                                         __array__56.pop();
                                        break;
                                        
                                    }
                                }return __array__56;
                                 
                            })()
                        }
                    }
                } ()
            };
            comp_time_log=await (async function(){
                 return await defclog({
                    prefix:"compile_time_eval",background:"#C0C0C0",color:"darkblue"
                }) 
            })();
            compile_time_eval=async function(ctx,lisp_tree,path) {
                if (check_true (((lisp_tree instanceof Array)&& (((lisp_tree && lisp_tree["0"]) instanceof String || typeof (lisp_tree && lisp_tree["0"])==='string')&& (await length((lisp_tree && lisp_tree["0"]))>2)&& await starts_with_ques_(await (async function(){
                     return "=:" 
                })(),(lisp_tree && lisp_tree["0"])))&& await (async function(){
                    let it;
                    it=await Environment["symbol_definition"].call(Environment,await (lisp_tree && lisp_tree["0"])["substr"].call((lisp_tree && lisp_tree["0"]),2));
                    if (check_true (it)){
                        return await (await Environment.get_global("resolve_path"))(["eval_when","compile_time"],it)
                    } else {
                        return 
                    }
                })()))){
                    {
                        let ntree;
                        let precompile_function;
                        ntree=null;
                        precompile_function=await Environment["get_global"].call(Environment,await (lisp_tree && lisp_tree["0"])["substr"].call((lisp_tree && lisp_tree["0"]),2));
                        if (check_true (await verbosity(ctx))){
                            {
                                await comp_time_log(path,"->",await (lisp_tree && lisp_tree["0"])["substr"].call((lisp_tree && lisp_tree["0"]),2),lisp_tree,"to function: ",await lisp_tree["slice"].call(lisp_tree,1))
                            }
                        };
                        try {
                            ntree=await (async function(){
                                let __apply_args__60=await (async function(){
                                     return await lisp_tree["slice"].call(lisp_tree,1) 
                                })();
                                return ( precompile_function).apply(this,__apply_args__60)
                            })()
                        } catch (__exception__59) {
                            if (__exception__59 instanceof Error) {
                                let e=__exception__59;
                                {
                                    {
                                        await async function(){
                                            e["handled"]=true;
                                            return e;
                                            
                                        }();
                                        (errors).push({
                                            error:(e && e.name),message:(e && e.message),source_name:source_name,precompilation:true,form:lisp_tree,parent_forms:[],invalid:true,stack:(e && e.stack)
                                        });
                                        throw e;
                                        
                                    }
                                }
                            }
                        };
                        if (check_true ((null==ntree))){
                            (warnings).push(("compile time function "+ await (lisp_tree && lisp_tree["0"])["substr"].call((lisp_tree && lisp_tree["0"]),2)+ " returned nil"))
                        } else {
                            {
                                ntree=await (async function(){
                                     return await do_deferred_splice(ntree) 
                                })();
                                if (check_true (await not((await JSON.stringify(ntree)===await JSON.stringify(lisp_tree))))){
                                    {
                                        ntree=await compile_time_eval(ctx,ntree,path)
                                    }
                                };
                                if (check_true (await verbosity(ctx))){
                                    {
                                        await comp_time_log(await (lisp_tree && lisp_tree["0"])["substr"].call((lisp_tree && lisp_tree["0"]),2),"<- lisp: ",await (await Environment.get_global("as_lisp"))(ntree))
                                    }
                                }
                            }
                        };
                        return ntree
                    }
                } else {
                    return lisp_tree
                }
            };
            infix_ops=async function(tokens,ctx,opts) {
                let op_translation;
                let math_op_a;
                let math_op;
                let idx;
                let stmts;
                let declaration;
                let symbol_ctx_val;
                let is_overloaded;
                let token;
                let add_operand;
                let acc;
                op_translation={
                    or:"||",and:"&&"
                };
                ctx=await (async function(){
                     return await new_ctx(ctx) 
                })();
                math_op_a=await (async function(){
                    let __targ__63=await first(tokens);
                    if (__targ__63){
                         return(__targ__63)["name"]
                    } 
                })();
                math_op=(op_translation[math_op_a]|| math_op_a);
                idx=0;
                stmts=null;
                declaration=await (async function(){
                    if (check_true (((tokens && tokens["1"] && tokens["1"]["name"]) instanceof String || typeof (tokens && tokens["1"] && tokens["1"]["name"])==='string'))){
                        return await get_declarations(ctx,(tokens && tokens["1"] && tokens["1"]["name"]),await not((tokens && tokens["1"] && tokens["1"]["ref"])))
                    } else {
                        return null
                    }
                })();
                symbol_ctx_val=await (async function(){
                    if (check_true (((tokens && tokens["1"] && tokens["1"]["ref"])&& ((tokens && tokens["1"] && tokens["1"]["name"]) instanceof String || typeof (tokens && tokens["1"] && tokens["1"]["name"])==='string')))){
                        return await get_ctx_val(ctx,(tokens && tokens["1"] && tokens["1"]["name"]))
                    }
                })();
                is_overloaded=false;
                token=null;
                add_operand=async function() {
                    if (check_true (((idx>1)&& (idx<((tokens && tokens.length)- 0))))){
                        {
                            (acc).push(math_op);
                            return (acc).push(" ")
                        }
                    }
                };
                acc=await (async function(){
                     return [{
                        ctype:"expression"
                    }] 
                })();
                await set_ctx(ctx,"__COMP_INFIX_OPS__",true);
                if (check_true (((symbol_ctx_val instanceof Array)&& (symbol_ctx_val && symbol_ctx_val["0"] && symbol_ctx_val["0"]["ctype"])))){
                    {
                        symbol_ctx_val=(symbol_ctx_val && symbol_ctx_val["0"] && symbol_ctx_val["0"]["ctype"])
                    }
                };
                if (check_true (((((declaration && declaration["type"])===Array)|| ((declaration && declaration["type"])===Object)|| (symbol_ctx_val==="objliteral")|| (symbol_ctx_val===Expression)|| (symbol_ctx_val===ArgumentType)|| ((tokens && tokens["1"] && tokens["1"]["type"])==="objlit")|| ((tokens && tokens["1"] && tokens["1"]["type"])==="arr"))&& (math_op==="+")))){
                    {
                        is_overloaded=true
                    }
                };
                if (check_true (is_overloaded)){
                    {
                        await async function(){
                            tokens[0]={
                                type:"function",val:await add(await (async function(){
                                     return "=:" 
                                })(),"add"),name:"add",ref:true
                            };
                            return tokens;
                            
                        }();
                        await async function(){
                            ctx["block_step"]=0;
                            return ctx;
                            
                        }();
                        stmts=await compile_wrapper_fn(tokens,ctx);
                        return stmts
                    }
                } else {
                    {
                        (acc).push("(");
                        await (async function(){
                             let __test_condition__66=async function() {
                                return (idx<((tokens && tokens.length)- 1))
                            };
                            let __body_ref__67=async function() {
                                idx+=1;
                                token=tokens[idx];
                                await add_operand();
                                await async function(){
                                    ctx["block_step"]=0;
                                    return ctx;
                                    
                                }();
                                return (acc).push(await compile_wrapper_fn(token,ctx))
                            };
                            let __BREAK__FLAG__=false;
                            while(await __test_condition__66()) {
                                 await __body_ref__67();
                                 if(__BREAK__FLAG__) {
                                     break;
                                    
                                }
                            } ;
                            
                        })();
                        (acc).push(")");
                        return acc
                    }
                }
            };
            compile_set_prop=async function(tokens,ctx) {
                let acc;
                let wrapper;
                let stmt;
                let preamble;
                let token;
                let complicated;
                let target;
                let target_reference;
                let idx;
                acc=[];
                wrapper=[];
                stmt=null;
                preamble=await calling_preamble(ctx);
                token=await second(tokens);
                ctx=await (async function(){
                     return await new_ctx(ctx) 
                })();
                complicated=await is_complex_ques_((token && token["val"]));
                target=await (async function(){
                    if (check_true (complicated)){
                        return await compile_wrapper_fn((token && token["val"]),ctx)
                    } else {
                        return await compile(token,ctx)
                    }
                })();
                target_reference=await gen_temp_name("target_obj");
                idx=1;
                ;
                if (check_true (((token && token["name"])==="this"))){
                    {
                        (acc).push("this.");
                        (acc).push((tokens && tokens["2"] && tokens["2"]["name"]));
                        (acc).push("=");
                        (acc).push(await compile_wrapper_fn((tokens && tokens["3"]),ctx));
                        return acc
                    }
                } else {
                    {
                        await set_new_completion_scope(ctx);
                        await (async function() {
                            let __for_body__71=async function(t) {
                                return (wrapper).push(t)
                            };
                            let __array__72=[],__elements__70=[(preamble && preamble["0"])," ",(preamble && preamble["1"])," ",(preamble && preamble["3"]),"function","()","{"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__69 in __elements__70) {
                                __array__72.push(await __for_body__71(__elements__70[__iter__69]));
                                if(__BREAK__FLAG__) {
                                     __array__72.pop();
                                    break;
                                    
                                }
                            }return __array__72;
                             
                        })();
                        if (check_true (await not((target instanceof String || typeof target==='string')))){
                            await (async function() {
                                let __for_body__75=async function(t) {
                                    return (wrapper).push(t)
                                };
                                let __array__76=[],__elements__74=["let"," ",target_reference,"=",target,";"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__73 in __elements__74) {
                                    __array__76.push(await __for_body__75(__elements__74[__iter__73]));
                                    if(__BREAK__FLAG__) {
                                         __array__76.pop();
                                        break;
                                        
                                    }
                                }return __array__76;
                                 
                            })()
                        } else {
                            {
                                target_reference=target
                            }
                        };
                        await (async function(){
                             let __test_condition__77=async function() {
                                return (idx<((tokens && tokens.length)- 1))
                            };
                            let __body_ref__78=async function() {
                                idx+=1;
                                (acc).push(target_reference);
                                token=tokens[idx];
                                (acc).push("[");
                                stmt=await compile_as_call(token,ctx);
                                (acc).push(stmt);
                                (acc).push("]");
                                idx+=1;
                                (acc).push("=");
                                token=tokens[idx];
                                if (check_true ((null==token))){
                                    throw new SyntaxError("set_prop: odd number of arguments");
                                    
                                };
                                stmt=await compile_wrapper_fn(token,ctx);
                                (acc).push(stmt);
                                return (acc).push(";")
                            };
                            let __BREAK__FLAG__=false;
                            while(await __test_condition__77()) {
                                 await __body_ref__78();
                                 if(__BREAK__FLAG__) {
                                     break;
                                    
                                }
                            } ;
                            
                        })();
                        (wrapper).push(acc);
                        (wrapper).push("return");
                        (wrapper).push(" ");
                        (wrapper).push(target_reference);
                        (wrapper).push(";");
                        (wrapper).push("}");
                        (wrapper).push((preamble && preamble["4"]));
                        (wrapper).push("()");
                        return wrapper
                    }
                }
            };
            compile_prop=async function(tokens,ctx) {
                if (check_true (await not(((tokens && tokens.length)===3)))){
                    {
                        throw new SyntaxError("prop requires exactly 2 arguments");
                        
                    }
                } else {
                    {
                        let acc;
                        let target;
                        let target_val;
                        let preamble;
                        let idx_key;
                        acc=[];
                        target=await compile_wrapper_fn(await second(tokens),ctx);
                        target_val=null;
                        preamble=await calling_preamble(ctx);
                        idx_key=await compile_wrapper_fn(tokens[2],ctx);
                        ;
                        if (check_true ((await safety_level(ctx)>1))){
                            return await async function(){
                                if (check_true ((target instanceof String || typeof target==='string'))) {
                                    {
                                        return await (async function(){
                                            let __array_op_rval__79=target;
                                             if (__array_op_rval__79 instanceof Function){
                                                return await __array_op_rval__79("[",idx_key,"]") 
                                            } else {
                                                return [__array_op_rval__79,"[",idx_key,"]"]
                                            }
                                        })()
                                    }
                                } else {
                                    {
                                        target_val=await gen_temp_name("targ");
                                        return [(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()","{","let"," ",target_val,"=",target,";","if"," ","(",target_val,")","{"," ","return","(",target_val,")","[",idx_key,"]","}"," ","}",")","()"]
                                    }
                                }
                            } ()
                        } else {
                            return ["(",target,")","[",idx_key,"]"]
                        }
                    }
                }
            };
            compile_elem=async function(token,ctx) {
                let rval;
                rval=null;
                await console.warn("compile_elem - deprecated: check call: ",token);
                if (check_true ((await is_complex_ques_((token && token["val"]))|| (((token && token["val"]) instanceof Array)&& ((token && token["val"] && token["val"]["0"] && token["val"]["0"]["name"])==="if"))))){
                    rval=await compile_wrapper_fn(token,ctx)
                } else {
                    rval=await (async function(){
                         return await compile(token,ctx) 
                    })()
                };
                if (check_true (await not((rval instanceof Array)))){
                    {
                        rval=await (async function(){
                            let __array_op_rval__80=rval;
                             if (__array_op_rval__80 instanceof Function){
                                return await __array_op_rval__80() 
                            } else {
                                return [__array_op_rval__80]
                            }
                        })()
                    }
                };
                return rval
            };
            inline_log=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    return log
                } else {
                    return await defclog({
                        prefix:"compile_inline:",background:"#404880",color:"white"
                    })
                }
            })();
            compile_inline=async function(tokens,ctx) {
                let rval;
                let stmt;
                let inline_fn;
                let has_literal_ques_;
                let wrap_style;
                let args;
                rval=null;
                stmt=null;
                inline_fn=null;
                has_literal_ques_=false;
                wrap_style=0;
                args=[];
                await (async function() {
                    let __for_body__83=async function(token) {
                        stmt=await compile_wrapper_fn(token,ctx);
                        return (args).push(stmt)
                    };
                    let __array__84=[],__elements__82=await tokens["slice"].call(tokens,1);
                    let __BREAK__FLAG__=false;
                    for(let __iter__81 in __elements__82) {
                        __array__84.push(await __for_body__83(__elements__82[__iter__81]));
                        if(__BREAK__FLAG__) {
                             __array__84.pop();
                            break;
                            
                        }
                    }return __array__84;
                     
                })();
                if (check_true (await verbosity())){
                    {
                        await inline_log("args: ",args)
                    }
                };
                if (check_true (await (async function(){
                    let __targ__85=(Environment && Environment["inlines"]);
                    if (__targ__85){
                         return(__targ__85)[(tokens && tokens["0"] && tokens["0"]["name"])]
                    } 
                })())){
                    {
                        inline_fn=await (async function(){
                            let __targ__86=(Environment && Environment["inlines"]);
                            if (__targ__86){
                                 return(__targ__86)[(tokens && tokens["0"] && tokens["0"]["name"])]
                            } 
                        })();
                        rval=await (async function(){
                            let __array_op_rval__87=inline_fn;
                             if (__array_op_rval__87 instanceof Function){
                                return await __array_op_rval__87(args,ctx) 
                            } else {
                                return [__array_op_rval__87,args,ctx]
                            }
                        })()
                    }
                } else {
                    throw new ReferenceError(("no source for named lib function "+ (tokens && tokens["0"] && tokens["0"]["name"])));
                    
                };
                return rval
            };
            compile_push=async function(tokens,ctx) {
                let acc;
                let place;
                let thing;
                acc=[];
                place=await compile_wrapper_fn((tokens && tokens["1"]),ctx);
                thing=await compile_wrapper_fn((tokens && tokens["2"]),ctx);
                return await (async function(){
                    let __array_op_rval__88=place;
                     if (__array_op_rval__88 instanceof Function){
                        return await __array_op_rval__88(".push","(",thing,")") 
                    } else {
                        return [__array_op_rval__88,".push","(",thing,")"]
                    }
                })()
            };
            compile_list=async function(tokens,ctx) {
                let acc;
                let compiled_values;
                acc=["["];
                compiled_values=[];
                await (async function(){
                    let it;
                    it=await get_ctx_val(ctx,"assignment_for");
                    if (check_true (it)){
                        return await set_declaration(ctx,it,"type",Array)
                    } else {
                        return 
                    }
                })();
                await (async function() {
                    let __for_body__91=async function(t) {
                        return (compiled_values).push(await compile_wrapper_fn(t,ctx))
                    };
                    let __array__92=[],__elements__90=await tokens["slice"].call(tokens,1);
                    let __BREAK__FLAG__=false;
                    for(let __iter__89 in __elements__90) {
                        __array__92.push(await __for_body__91(__elements__90[__iter__89]));
                        if(__BREAK__FLAG__) {
                             __array__92.pop();
                            break;
                            
                        }
                    }return __array__92;
                     
                })();
                await push_as_arg_list(acc,compiled_values);
                (acc).push("]");
                return acc
            };
            compile_typeof=async function(tokens,ctx) {
                let local_details=await (async function(){
                    if (check_true ((tokens && tokens["1"] && tokens["1"]["ref"]))){
                        return await get_ctx_val(ctx,(tokens && tokens["1"] && tokens["1"]["name"]))
                    } else {
                        return null
                    }
                })();
                ;
                let fully_qualified=await (async function(){
                    if (check_true (((tokens && tokens["1"] && tokens["1"]["name"])&& await contains_ques_("/",(tokens && tokens["1"] && tokens["1"]["name"]))))){
                        return true
                    } else {
                        return false
                    }
                })();
                ;
                if (check_true (await verbosity(ctx))){
                    {
                        await console.log("compile_typeof -> ",tokens)
                    }
                };
                if (check_true (((tokens && tokens.length)<2))){
                    {
                        throw new SyntaxError("typeof requires 1 argument");
                        
                    }
                };
                return await async function(){
                    if (check_true (((tokens && tokens["1"] && tokens["1"]["ref"])&& local_details))) {
                        return ["typeof"," ",await (async function(){
                             return await compile((tokens && tokens["1"]),ctx) 
                        })()]
                    } else if (check_true (((tokens && tokens["1"] && tokens["1"]["ref"])&& await get_lisp_ctx(ctx,(tokens && tokens["1"] && tokens["1"]["name"]))))) {
                        return ["typeof"," ",await (async function(){
                             return await compile((tokens && tokens["1"]),ctx) 
                        })()]
                    } else if (check_true ((tokens && tokens["1"] && tokens["1"]["ref"]))) {
                        return ["(","typeof"," ","(","function","() { let __tval=",await compile_lisp_scoped_reference((tokens && tokens["1"] && tokens["1"]["name"]),ctx,true),"; if (__tval === ReferenceError) return undefined; else return __tval; }",")()",")"]
                    } else {
                        return ["typeof"," ",await compile_wrapper_fn((tokens && tokens["1"]),ctx)]
                    }
                } ()
            };
            compile_instanceof=async function(tokens,ctx) {
                let acc;
                acc=[];
                if (check_true (((tokens instanceof Array)&& ((tokens && tokens.length)===3)))){
                    return ["(",await (async function(){
                        if (check_true (await is_complex_ques_((tokens && tokens["1"])))){
                            return await compile_wrapper_fn((tokens && tokens["1"]),ctx)
                        } else {
                            return await compile((tokens && tokens["1"]),ctx)
                        }
                    })()," ","instanceof"," ",await (async function(){
                        if (check_true (await is_complex_ques_((tokens && tokens["1"])))){
                            return await compile_wrapper_fn((tokens && tokens["2"]),ctx)
                        } else {
                            return await compile((tokens && tokens["2"]),ctx)
                        }
                    })(),")"]
                } else {
                    throw new SyntaxError("instanceof requires 2 arguments");
                    
                }
            };
            compile_compare=async function(tokens,ctx) {
                let acc;
                let ops;
                let __operator__93= async function(){
                    return ops[await (async function(){
                        let __targ__95=await first(tokens);
                        if (__targ__95){
                             return(__targ__95)["name"]
                        } 
                    })()]
                };
                let left;
                let right;
                {
                    acc=await (async function(){
                         return [{
                            ctype:"expression"
                        }] 
                    })();
                    ctx=await (async function(){
                         return await new_ctx(ctx) 
                    })();
                    ops=await ( async function(){
                        let __obj__94=new Object();
                        __obj__94["eq"]="==";
                        __obj__94["=="]="===";
                        __obj__94["<"]="<";
                        __obj__94[">"]=">";
                        __obj__94["gt"]=">";
                        __obj__94["lt"]="<";
                        __obj__94["<="]="<=";
                        __obj__94[">="]=">=";
                        return __obj__94;
                        
                    })();
                    let operator=await __operator__93();
                    ;
                    left=tokens[1];
                    right=tokens[2];
                    if (check_true (((tokens && tokens.length)<3))){
                        {
                            throw new SyntaxError("comparison operation requires 2 arguments");
                            
                        }
                    };
                    await set_ctx(ctx,"__COMP_INFIX_OPS__",true);
                    (acc).push("(");
                    (acc).push(await (async function(){
                         return await compile(left,ctx) 
                    })());
                    (acc).push(operator);
                    (acc).push(await (async function(){
                         return await compile(right,ctx) 
                    })());
                    (acc).push(")");
                    return acc
                }
            };
            compile_assignment=async function(tokens,ctx) {
                let acc;
                let token;
                let assignment_value;
                let assignment_type;
                let wrap_as_function_ques_;
                let preamble;
                let comps;
                let sanitized;
                let target_details;
                let target;
                acc=[];
                token=await second(tokens);
                assignment_value=await (async function(){
                    if (check_true (((tokens && tokens.length)<3))){
                        throw new SyntaxError("assignment is missing a value argument");
                        
                    } else {
                        return null
                    }
                })();
                assignment_type=null;
                wrap_as_function_ques_=null;
                preamble=await calling_preamble(ctx);
                comps=[];
                sanitized=await (async function(){
                    if (check_true (((token && token["ref"])&& (token && token["name"])))){
                        return await sanitize_js_ref_name((token && token["name"]))
                    } else {
                        throw new SyntaxError(("assignment: missing assignment symbol"));
                        
                    }
                })();
                target_details=await (async function(){
                     return await async function(){
                        if (check_true (await get_ctx(ctx,sanitized))) {
                            return "local"
                        } else if (check_true (await get_lisp_ctx(ctx,(token && token["name"])))) {
                            return "global"
                        } else {
                            {
                                {
                                    let it;
                                    it=await get_declaration_details(ctx,(token && token["name"]));
                                    if (check_true (it)){
                                        return await async function(){
                                            if (check_true ((it && it["is_argument"]))) {
                                                return "local"
                                            } else if (check_true ((it && it["declared_global"]))) {
                                                return "global"
                                            } else if (check_true (it)) {
                                                return "local"
                                            }
                                        } ()
                                    } else {
                                        return 
                                    }
                                }
                            }
                        }
                    } () 
                })();
                target=await (async function(){
                    if (check_true ((target_details==="local"))){
                        return sanitized
                    } else {
                        return (token && token["name"])
                    }
                })();
                ;
                comps=(target).split(".");
                if (check_true ((undefined===target_details))){
                    throw new ReferenceError(("assignment to undeclared symbol: "+ (token && token["name"])));
                    
                };
                if (check_true (((comps && comps.length)>1))){
                    throw new SyntaxError(("invalid assignment to an object property, use set_prop instead: "+ target));
                    
                };
                if (check_true ((((tokens && tokens["2"] && tokens["2"]["type"])==="arr")&& ((tokens && tokens["2"] && tokens["2"]["val"] && tokens["2"]["val"]["0"] && tokens["2"]["val"]["0"]["type"])==="special")&& ((tokens && tokens["2"] && tokens["2"]["val"] && tokens["2"]["val"]["0"] && tokens["2"]["val"]["0"]["name"])==="defvar")))){
                    {
                        throw new SyntaxError("cannot assign result of the allocation operator defvar");
                        
                    }
                };
                await unset_ambiguous(ctx,target);
                await async function(){
                    ctx["in_assignment"]=true;
                    return ctx;
                    
                }();
                assignment_value=await compile_wrapper_fn((tokens && tokens["2"]),ctx);
                if (check_true (((assignment_value instanceof Array)&& ((assignment_value && assignment_value["0"]) instanceof Object)&& (assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])))){
                    {
                        assignment_type=await map_ctype_to_value((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"]),assignment_value)
                    }
                } else {
                    {
                        await set_ambiguous(ctx,target);
                        assignment_type=UnknownType
                    }
                };
                if (check_true ((target_details==="local"))){
                    {
                        await set_ctx(ctx,target,assignment_type);
                        (acc).push(target);
                        (acc).push("=");
                        (acc).push(assignment_value)
                    }
                } else {
                    {
                        await (async function() {
                            let __for_body__99=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__100=[],__elements__98=await (async function(){
                                 return [{
                                    ctype:"statement"
                                },(preamble && preamble["0"])," ","Environment",".","set_global","(","\"",target,"\"",",",assignment_value,")"] 
                            })();
                            let __BREAK__FLAG__=false;
                            for(let __iter__97 in __elements__98) {
                                __array__100.push(await __for_body__99(__elements__98[__iter__97]));
                                if(__BREAK__FLAG__) {
                                     __array__100.pop();
                                    break;
                                    
                                }
                            }return __array__100;
                             
                        })()
                    }
                };
                await async function(){
                    ctx["in_assignment"]=false;
                    return ctx;
                    
                }();
                if (check_true ((target_details==="local"))){
                    await set_ctx(ctx,target,assignment_type)
                };
                return acc
            };
            top_level_log=await (async function(){
                 return await defclog({
                    prefix:"top-level",color:"darkgreen",background:"#300010"
                }) 
            })();
            compile_toplevel=async function(lisp_tree,ctx,block_options) {
                if (check_true (await get_ctx_val(ctx,"__IN_LAMBDA__"))){
                    throw new EvalError("Compiler attempt to compile top-level in lambda (most likely a bug)");
                    
                } else {
                    {
                        {
                            let idx;
                            let rval;
                            let __tokens__102= async function(){
                                return null
                            };
                            let stmt;
                            let base_ctx;
                            let num_non_return_statements;
                            {
                                idx=0;
                                rval=null;
                                let tokens=await __tokens__102();
                                ;
                                stmt=null;
                                base_ctx=ctx;
                                num_non_return_statements=(await length(lisp_tree)- 2);
                                ctx=await (async function(){
                                    if (check_true ((block_options && block_options["no_scope_boundary"]))){
                                        return ctx
                                    } else {
                                        return await new_ctx(ctx)
                                    }
                                })();
                                await (async function(){
                                     let __test_condition__103=async function() {
                                        return (idx<num_non_return_statements)
                                    };
                                    let __body_ref__104=async function() {
                                        idx+=1;
                                        ctx=await (async function(){
                                             return await new_ctx(ctx) 
                                        })();
                                        await set_new_completion_scope(ctx);
                                        await set_ctx(ctx,"__TOP_LEVEL__",true);
                                        if (check_true (await verbosity(ctx))){
                                            {
                                                await console.log("");
                                                await top_level_log((""+ idx+ "/"+ num_non_return_statements),"->",await (await Environment.get_global("as_lisp"))(lisp_tree[idx]))
                                            }
                                        };
                                        tokens=await tokenize(lisp_tree[idx],ctx);
                                        stmt=await (async function(){
                                             return await compile(tokens,ctx) 
                                        })();
                                        rval=await wrap_and_run(stmt,ctx,{
                                            bind_mode:true
                                        });
                                        if (check_true (await verbosity(ctx))){
                                            {
                                                await top_level_log((""+ idx+ "/"+ num_non_return_statements),"compiled <- ",await (await Environment.get_global("as_lisp"))(stmt));
                                                return await top_level_log((""+ idx+ "/"+ num_non_return_statements),"<-",await (await Environment.get_global("as_lisp"))(rval))
                                            }
                                        }
                                    };
                                    let __BREAK__FLAG__=false;
                                    while(await __test_condition__103()) {
                                         await __body_ref__104();
                                         if(__BREAK__FLAG__) {
                                             break;
                                            
                                        }
                                    } ;
                                    
                                })();
                                return lisp_tree[(idx+ 1)]
                            }
                        }
                    }
                }
            };
            check_statement_completion=async function(ctx,stmts) {
                let stmt;
                let cmp_rec;
                let clog;
                stmt=await (async function(){
                    if (check_true ((null==stmts))){
                        throw new Error("compiler error: check_statement_completion: received undefined/nil statement array.");
                        
                    } else {
                        return await last(stmts)
                    }
                })();
                cmp_rec=await get_ctx(ctx,"__COMPLETION_SCOPE__");
                clog=await (async function(){
                    if (check_true (quiet_mode)){
                        return log
                    } else {
                        return await defclog({
                            prefix:("check_statement_completion (bid: "+ (ctx && ctx["block_id"])+ " cid: "+ (cmp_rec && cmp_rec["id"])+ "):"),background:"#704080",color:"white"
                        })
                    }
                })();
                if (check_true (await verbosity(ctx))){
                    {
                        await clog("check_statement_completion: lambda_step: ",await get_ctx(ctx,"__LAMBDA_STEP__"))
                    }
                };
                if (check_true ((((ctx && ctx["block_step"])===0)&& await not(await contains_ques_((stmt && stmt["0"] && stmt["0"]["ctype"]),["block","ifblock","tryblock","letblock"]))&& await not(await contains_ques_((stmt && stmt["0"] && stmt["0"]["completion"]),completion_types))&& await not(((cmp_rec && cmp_rec["scope_type"])==="arrow"))&& await not(((cmp_rec && cmp_rec["scope_type"])==="generator"))&& await not(((stmt && stmt["0"] && stmt["0"]["0"])==="yield"))))){
                    {
                        if (check_true (await verbosity(ctx))){
                            {
                                await clog("rule 1",await (async function(){
                                     return await clone(cmp_rec) 
                                })(),await (async function(){
                                     return await clone(stmts) 
                                })())
                            }
                        };
                        (stmts).pop();
                        await (await Environment.get_global("assert"))(cmp_rec,"compiler error: check_statement_completion unable to find completion_scope record in context");
                        if (check_true ((((stmt && stmt["0"]) instanceof Object)&& await not(((stmt && stmt["0"]) instanceof Array))))){
                            {
                                await async function(){
                                    let __target_obj__105=(stmt && stmt["0"]);
                                    __target_obj__105["completion"]="return";
                                    return __target_obj__105;
                                    
                                }();
                                if (check_true (((stmt && stmt["0"] && stmt["0"]["ctype"])==="__JS__"))){
                                    (stmts).push(await (async function(){
                                        let __array_op_rval__106=stmt;
                                         if (__array_op_rval__106 instanceof Function){
                                            return await __array_op_rval__106() 
                                        } else {
                                            return [__array_op_rval__106]
                                        }
                                    })())
                                } else {
                                    (stmts).push(await (async function(){
                                        let __array_op_rval__107=(stmt && stmt["0"]);
                                         if (__array_op_rval__107 instanceof Function){
                                            return await __array_op_rval__107("return ",await (await Environment.get_global("rest"))(stmt)) 
                                        } else {
                                            return [__array_op_rval__107,"return ",await (await Environment.get_global("rest"))(stmt)]
                                        }
                                    })())
                                };
                                if (check_true (await verbosity(ctx))){
                                    {
                                        await clog("added return rule 1A")
                                    }
                                };
                                ((cmp_rec && cmp_rec["completion_records"])).push({
                                    block_id:(ctx && ctx["block_id"]),block_step:(ctx && ctx["block_step"]),type:"return",stmt:await last(stmts)
                                })
                            }
                        } else {
                            {
                                if (check_true ((await not(((cmp_rec && cmp_rec["scope_type"])==="arrow"))&& await not(((cmp_rec && cmp_rec["scope_type"])==="generator"))))){
                                    (stmts).push(await (async function(){
                                         return [{
                                            completion:"return"
                                        },"return ",stmt] 
                                    })())
                                };
                                if (check_true (await verbosity(ctx))){
                                    {
                                        await clog("added return rule 1B")
                                    }
                                };
                                ((cmp_rec && cmp_rec["completion_records"])).push({
                                    block_id:(ctx && ctx["block_id"]),type:"return",block_step:(ctx && ctx["block_step"]),stmt:await last(stmts)
                                })
                            }
                        };
                        return stmts
                    }
                } else {
                    {
                        return stmts
                    }
                }
            };
            compile_block=async function(tokens,ctx,block_options) {
                let acc;
                let block_id;
                let clog;
                let token;
                let block_type;
                let last_stmt;
                let is_first_level;
                let return_last;
                let stmt;
                let subacc;
                let completion_scope;
                let stmt_ctype;
                let lambda_block;
                let stmts;
                let idx;
                acc=[];
                block_id=(((block_options && block_options.name)&& await add((block_options && block_options.name),(blk_counter=blk_counter+1)))|| (blk_counter=blk_counter+1));
                clog=await (async function(){
                    if (check_true (quiet_mode)){
                        return log
                    } else {
                        return await defclog({
                            prefix:("compile_block ("+ block_id+ "):"),background:"#404080",color:"white"
                        })
                    }
                })();
                ctx=await (async function(){
                    if (check_true ((block_options && block_options["force_no_new_ctx"]))){
                        return ctx
                    } else {
                        return await new_ctx(ctx)
                    }
                })();
                token=null;
                block_type="sub";
                last_stmt=null;
                is_first_level=false;
                return_last=(ctx && ctx["return_last_value"]);
                stmt=null;
                subacc=[];
                completion_scope=await get_ctx(ctx,"__COMPLETION_SCOPE__");
                stmt_ctype=null;
                lambda_block=false;
                stmts=[];
                idx=0;
                if (check_true ((null==ctx))){
                    {
                        throw new ReferenceError("undefined ctx passed to compile block");
                        
                    }
                };
                if (check_true (needs_first_level)){
                    {
                        is_first_level=true;
                        needs_first_level=false
                    }
                };
                if (check_true ((opts && opts["include_source"]))){
                    {
                        if (check_true (((tokens && tokens["path"])&& ((tokens && tokens["path"] && tokens["path"]["length"])>0)))){
                            {
                                (acc).push(await source_comment(tokens))
                            }
                        }
                    }
                };
                await async function(){
                    ctx["block_id"]=block_id;
                    return ctx;
                    
                }();
                if (check_true (await verbosity(ctx))){
                    {
                        await clog("source ->",await (async function(){
                            if (check_true (((tokens instanceof Array)&& ((tokens && tokens["0"])==="PLACEHOLDER")))){
                                return await source_from_tokens((tokens && tokens["1"]),expanded_tree)
                            } else {
                                return await source_from_tokens(tokens,expanded_tree)
                            }
                        })());
                        await clog("tokens:",tokens);
                        await clog("block_options: ",await (async function(){
                             return await clone(block_options) 
                        })(),"ctx: ",await (async function(){
                             return await clone(ctx) 
                        })());
                        await clog("initial_completion_scope: ",await (async function(){
                             return await clone(completion_scope) 
                        })())
                    }
                };
                await (await Environment.get_global("assert"))(completion_scope,"block called with no completion scope");
                await (await Environment.get_global("assert"))((completion_scope instanceof Object),"block called with an invalid completion scope");
                if (check_true ((completion_scope && completion_scope["root_block_id"]))){
                    {
                        await set_ctx(ctx,"__IN_SUB_BLOCK__",true)
                    }
                } else {
                    {
                        await async function(){
                            completion_scope["root_block_id"]=block_id;
                            return completion_scope;
                            
                        }();
                        block_type="root";
                        await set_ctx(ctx,"__IN_SUB_BLOCK__",false)
                    }
                };
                if (check_true ((block_options && block_options["no_scope_boundary"]))){
                    {
                        await async function(){
                            ctx["no_scope_boundary"]=true;
                            return ctx;
                            
                        }()
                    }
                };
                if (check_true ((await get_ctx_val(ctx,"__LAMBDA_STEP__")===-1))){
                    {
                        lambda_block=true;
                        await (await Environment.get_global("setf_ctx"))(ctx,"__LAMBDA_STEP__",((tokens && tokens.length)- 1))
                    }
                };
                if (check_true (is_first_level)){
                    {
                        (acc).push(first_level_setup)
                    }
                };
                await async function(){
                    ctx["final_block_statement"]=false;
                    return ctx;
                    
                }();
                await (async function(){
                     let __test_condition__112=async function() {
                        return (idx<((tokens && tokens.length)- 1))
                    };
                    let __body_ref__113=async function() {
                        idx+=1;
                        subacc=[];
                        token=tokens[idx];
                        if (check_true ((idx===((tokens && tokens.length)- 1)))){
                            {
                                await async function(){
                                    ctx["final_block_statement"]=true;
                                    return ctx;
                                    
                                }()
                            }
                        };
                        if (check_true ((block_type==="root"))){
                            await async function(){
                                ctx["block_step"]=((tokens && tokens.length)- 1- idx);
                                return ctx;
                                
                            }()
                        };
                        await async function(){
                            ctx["sub_block_step"]=((tokens && tokens.length)- 1- idx);
                            return ctx;
                            
                        }();
                        if (check_true (lambda_block)){
                            {
                                await set_ctx(ctx,"__LAMBDA_STEP__",((tokens && tokens.length)- 1- idx))
                            }
                        };
                        if (check_true (await verbosity(ctx))){
                            {
                                await clog("sbs: ",((tokens && tokens.length)- 1- idx),block_type,"block step: ",(ctx && ctx["block_step"]),await source_from_tokens(token,expanded_tree),token)
                            }
                        };
                        await async function(){
                            if (check_true (((block_type==="root")&& ((token && token["type"])==="arr")&& ((token && token["val"] && token["val"]["0"] && token["val"]["0"]["name"])==="return")))) {
                                {
                                    return stmt=await compile_return((token && token["val"]),ctx)
                                }
                            } else if (check_true ((((token && token["val"] && token["val"]["0"] && token["val"]["0"]["name"])==="declare")&& (block_options && block_options["ignore_declarations"])))) {
                                stmt={
                                    ignored:"declare"
                                }
                            } else if (check_true (((((tokens && tokens.length)- 1- idx)>0)&& ((token && token["val"] && token["val"]["0"] && token["val"]["0"]["type"])==="special")&& (((token && token["val"] && token["val"]["0"] && token["val"]["0"]["name"])==="if")|| ((token && token["val"] && token["val"]["0"] && token["val"]["0"]["name"])==="try"))))) {
                                {
                                    let subctx;
                                    subctx=await (async function(){
                                         return await new_ctx(ctx) 
                                    })();
                                    await async function(){
                                        subctx["block_step"]=((tokens && tokens.length)- 1- idx);
                                        return subctx;
                                        
                                    }();
                                    if (check_true (((token && token["val"] && token["val"]["0"] && token["val"]["0"]["name"])==="if"))){
                                        stmt=await compile_if((token && token["val"]),subctx)
                                    } else {
                                        stmt=await compile_try((token && token["val"]),subctx)
                                    }
                                }
                            } else if (check_true (((((tokens && tokens.length)- 1- idx)>0)&& ((token && token["val"] && token["val"]["0"] && token["val"]["0"]["type"])==="special")&& await contains_ques_((token && token["val"] && token["val"]["0"] && token["val"]["0"]["name"]),["progn","do","let"])))) {
                                {
                                    if (check_true (await verbosity(ctx))){
                                        {
                                            await clog("candidate problem: compiling wrapper")
                                        }
                                    };
                                    stmt=await compile_wrapper_fn(token,ctx)
                                }
                            } else {
                                stmt=await (async function(){
                                     return await compile(token,ctx) 
                                })()
                            }
                        } ();
                        if (check_true ((stmt===undefined))){
                            {
                                if (check_true (is_error)){
                                    stmt=await (async function(){
                                         return [{
                                            ctype:Error
                                        },"ERROR_STATE"] 
                                    })()
                                } else {
                                    throw new EvalError("compile_block: returned stmt is undefined");
                                    
                                }
                            }
                        };
                        (stmts).push(stmt);
                        if (check_true ((idx<((tokens && tokens.length)- 1)))){
                            {
                                return (stmts).push(";")
                            }
                        }
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__112()) {
                         await __body_ref__113();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                await check_statement_completion(ctx,stmts);
                (acc).push(stmts);
                if (check_true (await not((block_options && block_options["no_scope_boundary"])))){
                    {
                        (acc).unshift("{");
                        (acc).push("}")
                    }
                };
                (acc).unshift({
                    ctype:"block",block_id:block_id,block_options:block_options
                });
                return acc
            };
            Expression=new Function("","{ return \"expression\" }");
            Statement=new Function("","{ return \"statement\" }");
            NumberType=new Function("","{ return \"number\" }");
            StringType=new Function("","{ return \"string\" }");
            NilType=new Function("","{ return \"nil\" }");
            UnknownType=new Function(""," { return \"unknown\"} ");
            ArgumentType=new Function(""," { return \"argument\" }");
            compile_defvar=async function(tokens,ctx,opts) {
                let target;
                let wrap_as_function_ques_;
                let ctx_details;
                let allocation_type;
                let assignment_type;
                let assignment_value;
                target=await clean_quoted_reference(await sanitize_js_ref_name((tokens && tokens["1"] && tokens["1"]["name"])));
                wrap_as_function_ques_=null;
                ctx_details=null;
                ctx=ctx;
                allocation_type=await (async function(){
                    if (check_true ((opts && opts["constant"]))){
                        return "const"
                    } else {
                        return "let"
                    }
                })();
                assignment_type=null;
                assignment_value=null;
                if (check_true (((tokens && tokens.length)<2))){
                    {
                        throw new SyntaxError(("defvar requires 2 arguments, received "+ ((tokens && tokens.length)- 1)));
                        
                    }
                };
                if (check_true (((ctx && ctx["final_block_statement"])&& await not((ctx && ctx["no_scope_boundary"]))))){
                    {
                        throw new SyntaxError("defvar has no effect at end of block scope");
                        
                    }
                };
                assignment_value=await (async function(){
                    return await compile_wrapper_fn((tokens && tokens["2"]),ctx)
                })();
                ctx_details=await get_declaration_details(ctx,target);
                assignment_type=await add(new Object(),ctx_details,await get_declarations(ctx,target));
                await async function(){
                    if (check_true (((assignment_value instanceof Array)&& ((assignment_value && assignment_value["0"]) instanceof Object)&& (assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])))) {
                        {
                            return await set_ctx(ctx,target,await map_ctype_to_value((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"]),assignment_value))
                        }
                    } else if (check_true ((assignment_type && assignment_type["value"]) instanceof Function)) {
                        await set_ctx(ctx,target,(assignment_type && assignment_type["value"]))
                    } else {
                        await set_ctx(ctx,target,assignment_value)
                    }
                } ();
                if (check_true ((ctx && ctx["defvar_eval"]))){
                    {
                        await (await Environment.get_global("delete_prop"))(ctx,"defvar_eval");
                        return [{
                            ctype:"assignment"
                        },allocation_type," ",target,"=",assignment_value,"()",";"]
                    }
                } else {
                    return [{
                        ctype:"assignment"
                    },await (async function(){
                        if (check_true (((ctx_details && ctx_details["is_argument"])&& ((ctx_details && ctx_details["levels_up"])===1)))){
                            return ""
                        } else {
                            return (allocation_type+ " ")
                        }
                    })(),"",target,"=",[assignment_value],";"]
                }
            };
            get_declaration_details=async function(ctx,symname,_levels_up) {
                return await async function(){
                    if (check_true ((await (async function(){
                        let __targ__118=(ctx && ctx["scope"]);
                        if (__targ__118){
                             return(__targ__118)[symname]
                        } 
                    })()&& ctx["lambda_scope"]))) {
                        return {
                            name:symname,is_argument:true,levels_up:(_levels_up|| 0),value:await (async function(){
                                let __targ__119=(ctx && ctx["scope"]);
                                if (__targ__119){
                                     return(__targ__119)[symname]
                                } 
                            })(),declared_global:await (async function(){
                                if (check_true (await (async function(){
                                    let __targ__120=(root_ctx && root_ctx["defined_lisp_globals"]);
                                    if (__targ__120){
                                         return(__targ__120)[symname]
                                    } 
                                })())){
                                    return true
                                } else {
                                    return false
                                }
                            })()
                        }
                    } else if (check_true (await (async function(){
                        let __targ__121=(ctx && ctx["scope"]);
                        if (__targ__121){
                             return(__targ__121)[symname]
                        } 
                    })())) {
                        return {
                            name:symname,is_argument:false,levels_up:(_levels_up|| 0),value:await (async function(){
                                let __targ__122=(ctx && ctx["scope"]);
                                if (__targ__122){
                                     return(__targ__122)[symname]
                                } 
                            })(),declarations:await get_declarations(ctx,symname),declared_global:await (async function(){
                                if (check_true (await (async function(){
                                    let __targ__123=(root_ctx && root_ctx["defined_lisp_globals"]);
                                    if (__targ__123){
                                         return(__targ__123)[symname]
                                    } 
                                })())){
                                    return true
                                } else {
                                    return false
                                }
                            })()
                        }
                    } else if (check_true (((ctx["parent"]==null)&& await (async function(){
                        let __targ__124=(root_ctx && root_ctx["defined_lisp_globals"]);
                        if (__targ__124){
                             return(__targ__124)[symname]
                        } 
                    })()))) {
                        return {
                            name:symname,is_argument:false,levels_up:(_levels_up|| 0),value:await (async function(){
                                let __targ__125=(ctx && ctx["scope"]);
                                if (__targ__125){
                                     return(__targ__125)[symname]
                                } 
                            })(),declarations:await get_declarations(ctx,symname),declared_global:true
                        }
                    } else if (check_true ((ctx && ctx["parent"]))) {
                        return await get_declaration_details((ctx && ctx["parent"]),symname,((_levels_up&& await add(_levels_up,1))|| 1))
                    } else if (check_true (await not((NOT_FOUND_THING===await Environment["get_global"].call(Environment,symname,NOT_FOUND_THING))))) {
                        return {
                            name:symname,is_argument:false,levels_up:(_levels_up|| 0),value:await Environment["get_global"].call(Environment,symname),declared_global:true
                        }
                    }
                } ()
            };
            clean_quoted_reference=async function(name) {
                return await async function(){
                    if (check_true (((name instanceof String || typeof name==='string')&& await starts_with_ques_("\"",name)&& await (await Environment.get_global("ends_with?"))("\"",name)))) {
                        return await (async function() {
                            {
                                 let __call_target__=await name["substr"].call(name,1), __call_method__="substr";
                                return await __call_target__[__call_method__].call(__call_target__,0,(await length(name)- 2))
                            } 
                        })()
                    } else {
                        return name
                    }
                } ()
            };
            compile_let=async function(tokens,ctx) {
                let acc;
                let clog;
                let token;
                let declarations_handled;
                let assignment_value;
                let suppress_return;
                let block_declarations;
                let my_tokens;
                let assignment_type;
                let stmt;
                let def_idx;
                let redefinitions;
                let need_sub_block;
                let assignments;
                let reference_name;
                let shadowed_globals;
                let alloc_set;
                let is_first_level;
                let sub_block_count;
                let ctx_details;
                let preamble;
                let structure_validation_rules;
                let validation_results;
                let allocations;
                let block;
                let syntax_error;
                let idx;
                acc=[];
                ctx=await (async function(){
                     return await new_ctx(ctx) 
                })();
                clog=await (async function(){
                    if (check_true (quiet_mode)){
                        return log
                    } else {
                        return await defclog({
                            prefix:("compile_let: "+ ((ctx && ctx["block_id"])|| "")),background:"#B0A0F0",color:"black"
                        })
                    }
                })();
                token=null;
                declarations_handled=false;
                assignment_value=null;
                suppress_return=null;
                block_declarations=new Object();
                my_tokens=tokens;
                assignment_type=null;
                stmt=null;
                def_idx=null;
                redefinitions=new Object();
                need_sub_block=false;
                assignments=new Object();
                reference_name=null;
                shadowed_globals=new Object();
                alloc_set=null;
                is_first_level=false;
                sub_block_count=0;
                ctx_details=null;
                preamble=await calling_preamble(ctx);
                structure_validation_rules=await (async function(){
                     return [[[1,"val"],[(await Environment.get_global("is_array?"))],"allocation section"],await (async function(){
                         return [[2],[async function(v) {
                            return await not((v===undefined))
                        }],"block"] 
                    })()] 
                })();
                validation_results=null;
                allocations=(tokens && tokens["1"] && tokens["1"]["val"]);
                block=await tokens["slice"].call(tokens,2);
                syntax_error=null;
                idx=-1;
                ;
                if (check_true (await not((allocations instanceof Array)))){
                    throw new SyntaxError("let: missing/malformed allocation section");
                    
                };
                if (check_true (((block && block.length)===0))){
                    throw new SyntaxError("let: missing block");
                    
                };
                await async function(){
                    ctx["return_last_value"]=true;
                    return ctx;
                    
                }();
                await set_ctx(ctx,"__LOCAL_SCOPE__",true);
                if (check_true (await verbosity(ctx))){
                    {
                        await clog("->",await source_from_tokens(tokens,expanded_tree));
                        await clog("ctx: ",await (async function(){
                             return await clone(ctx) 
                        })())
                    }
                };
                (acc).push("{");
                sub_block_count+=1;
                if (check_true (((block && block["0"] && block["0"]["val"] && block["0"]["val"]["0"] && block["0"]["val"]["0"]["name"])==="declare"))){
                    {
                        declarations_handled=true;
                        (acc).push(await compile_declare((block && block["0"] && block["0"]["val"]),ctx))
                    }
                };
                if (check_true (needs_first_level)){
                    {
                        is_first_level=true;
                        needs_first_level=false;
                        if (check_true (is_first_level)){
                            {
                                (acc).push(first_level_setup)
                            }
                        }
                    }
                };
                await (async function(){
                     let __test_condition__127=async function() {
                        return (idx<((allocations && allocations.length)- 1))
                    };
                    let __body_ref__128=async function() {
                        idx+=1;
                        alloc_set=await (async function(){
                            let __targ__129=allocations[idx];
                            if (__targ__129){
                                 return(__targ__129)["val"]
                            } 
                        })();
                        reference_name=await clean_quoted_reference(await sanitize_js_ref_name((alloc_set && alloc_set["0"] && alloc_set["0"]["name"])));
                        await (await Environment.get_global("assert"))(((reference_name instanceof String || typeof reference_name==='string')&& (await length(reference_name)>0)),("Invalid reference name: "+ (alloc_set && alloc_set["0"] && alloc_set["0"]["name"])));
                        ctx_details=await get_declaration_details(ctx,reference_name);
                        if (check_true (ctx_details)){
                            {
                                if (check_true ((await not((ctx_details && ctx_details["is_argument"]))&& ((ctx_details && ctx_details["levels_up"])>1)))){
                                    {
                                        need_sub_block=true;
                                        if (check_true (redefinitions[reference_name])){
                                            (redefinitions[reference_name]).push(await gen_temp_name(reference_name))
                                        } else {
                                            await async function(){
                                                redefinitions[reference_name]=[0,await gen_temp_name(reference_name)];
                                                return redefinitions;
                                                
                                            }()
                                        };
                                        if (check_true (((ctx_details && ctx_details["declared_global"])&& await not((ctx_details && ctx_details["is_argument"]))))){
                                            {
                                                await async function(){
                                                    shadowed_globals[(alloc_set && alloc_set["0"] && alloc_set["0"]["name"])]=true;
                                                    return shadowed_globals;
                                                    
                                                }()
                                            }
                                        }
                                    }
                                }
                            }
                        };
                        if (check_true (await not((ctx_details && ctx_details["is_argument"])))){
                            {
                                return await set_ctx(ctx,reference_name,AsyncFunction)
                            }
                        }
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__127()) {
                         await __body_ref__128();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                idx=-1;
                await (async function(){
                     let __test_condition__132=async function() {
                        return (idx<((allocations && allocations.length)- 1))
                    };
                    let __body_ref__133=async function() {
                        idx+=1;
                        stmt=[];
                        alloc_set=await (async function(){
                            let __targ__134=allocations[idx];
                            if (__targ__134){
                                 return(__targ__134)["val"]
                            } 
                        })();
                        reference_name=await clean_quoted_reference(await sanitize_js_ref_name((alloc_set && alloc_set["0"] && alloc_set["0"]["name"])));
                        ctx_details=await get_declaration_details(ctx,reference_name);
                        await async function(){
                            if (check_true (((alloc_set && alloc_set["1"] && alloc_set["1"]["val"]) instanceof Array))) {
                                {
                                    await async function(){
                                        ctx["in_assignment"]=true;
                                        return ctx;
                                        
                                    }();
                                    await set_ctx(ctx,"assignment_for",reference_name);
                                    assignment_value=await compile_wrapper_fn((alloc_set && alloc_set["1"]),ctx);
                                    await set_ctx(ctx,"assignment_for",null);
                                    return await async function(){
                                        ctx["in_assignment"]=false;
                                        return ctx;
                                        
                                    }()
                                }
                            } else if (check_true ((((alloc_set && alloc_set["1"] && alloc_set["1"]["name"]) instanceof String || typeof (alloc_set && alloc_set["1"] && alloc_set["1"]["name"])==='string')&& await not((ctx_details && ctx_details["is_argument"]))&& (alloc_set && alloc_set["1"] && alloc_set["1"]["ref"])&& await not((await Environment["get_global"].call(Environment,(alloc_set && alloc_set["1"] && alloc_set["1"]["name"]),NOT_FOUND_THING)===NOT_FOUND_THING))&& shadowed_globals[(alloc_set && alloc_set["0"] && alloc_set["0"]["name"])]))) {
                                {
                                    assignment_value=await (async function(){
                                         return [{
                                            ctype:(ctx_details && ctx_details["value"])
                                        },"await"," ",env_ref,"get_global","(","\"",(alloc_set && alloc_set["0"] && alloc_set["0"]["name"]),"\"",")"] 
                                    })()
                                }
                            } else {
                                {
                                    await set_ctx(ctx,"assignment_for",reference_name);
                                    assignment_value=await compile_wrapper_fn((alloc_set && alloc_set["1"]),ctx);
                                    await set_ctx(ctx,"assignment_for",null);
                                    if (check_true (await verbosity(ctx))){
                                        {
                                            await clog("setting simple assignment value for",reference_name,": <- ",await (async function(){
                                                 return await clone(assignment_value) 
                                            })())
                                        }
                                    }
                                }
                            }
                        } ();
                        await async function(){
                            if (check_true (((assignment_value instanceof Array)&& ((assignment_value && assignment_value["0"]) instanceof Object)&& (assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])))) {
                                {
                                    return await set_ctx(ctx,reference_name,await map_ctype_to_value((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"]),assignment_value))
                                }
                            } else if (check_true (((assignment_value instanceof Array)&& ((assignment_value && assignment_value["0"]) instanceof Array)&& (assignment_value && assignment_value["0"] && assignment_value["0"]["0"] && assignment_value["0"]["0"]["ctype"])))) {
                                {
                                    await set_ctx(ctx,reference_name,await map_ctype_to_value((assignment_value && assignment_value["0"] && assignment_value["0"]["0"] && assignment_value["0"]["0"]["ctype"]),assignment_value))
                                }
                            } else {
                                {
                                    await set_ctx(ctx,reference_name,assignment_value)
                                }
                            }
                        } ();
                        if (check_true ((ctx_details && ctx_details["is_argument"]))){
                            {
                                await async function(){
                                    block_declarations[reference_name]=true;
                                    return block_declarations;
                                    
                                }()
                            }
                        };
                        def_idx=null;
                        await async function(){
                            if (check_true ((redefinitions[reference_name]&& await first(redefinitions[reference_name])))) {
                                {
                                    def_idx=await first(redefinitions[reference_name]);
                                    def_idx+=1;
                                    await async function(){
                                        let __target_obj__138=redefinitions[reference_name];
                                        __target_obj__138[0]=def_idx;
                                        return __target_obj__138;
                                        
                                    }();
                                    return await (async function() {
                                        let __for_body__141=async function(t) {
                                            return (acc).push(t)
                                        };
                                        let __array__142=[],__elements__140=["let"," ",await (async function(){
                                            let __targ__143=redefinitions[reference_name];
                                            if (__targ__143){
                                                 return(__targ__143)[def_idx]
                                            } 
                                        })(),"="," ",(preamble && preamble["1"])," ","function","()","{","return"," ",assignment_value,"}",";"];
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__139 in __elements__140) {
                                            __array__142.push(await __for_body__141(__elements__140[__iter__139]));
                                            if(__BREAK__FLAG__) {
                                                 __array__142.pop();
                                                break;
                                                
                                            }
                                        }return __array__142;
                                         
                                    })()
                                }
                            } else if (check_true (await not(block_declarations[reference_name]))) {
                                {
                                    await (async function() {
                                        let __for_body__146=async function(t) {
                                            return (acc).push(t)
                                        };
                                        let __array__147=[],__elements__145=["let"," ",reference_name,";"];
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__144 in __elements__145) {
                                            __array__147.push(await __for_body__146(__elements__145[__iter__144]));
                                            if(__BREAK__FLAG__) {
                                                 __array__147.pop();
                                                break;
                                                
                                            }
                                        }return __array__147;
                                         
                                    })();
                                    await async function(){
                                        block_declarations[reference_name]=true;
                                        return block_declarations;
                                        
                                    }()
                                }
                            }
                        } ();
                        if (check_true (await not(assignments[reference_name]))){
                            {
                                await async function(){
                                    assignments[reference_name]=[];
                                    return assignments;
                                    
                                }()
                            }
                        };
                        return (assignments[reference_name]).push(await (async function(){
                            if (check_true (def_idx)){
                                return [(preamble && preamble["0"])," ",await (async function(){
                                    let __targ__150=redefinitions[reference_name];
                                    if (__targ__150){
                                         return(__targ__150)[def_idx]
                                    } 
                                })(),"()",";"]
                            } else {
                                return assignment_value
                            }
                        })())
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__132()) {
                         await __body_ref__133();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                if (check_true (need_sub_block)){
                    {
                        await (async function() {
                            let __for_body__153=async function(pset) {
                                return await (async function() {
                                    let __for_body__157=async function(redef) {
                                        return (redefinitions[(pset && pset["0"])]).shift()
                                    };
                                    let __array__158=[],__elements__156=(pset && pset["1"]);
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__155 in __elements__156) {
                                        __array__158.push(await __for_body__157(__elements__156[__iter__155]));
                                        if(__BREAK__FLAG__) {
                                             __array__158.pop();
                                            break;
                                            
                                        }
                                    }return __array__158;
                                     
                                })()
                            };
                            let __array__154=[],__elements__152=await (await Environment.get_global("pairs"))(redefinitions);
                            let __BREAK__FLAG__=false;
                            for(let __iter__151 in __elements__152) {
                                __array__154.push(await __for_body__153(__elements__152[__iter__151]));
                                if(__BREAK__FLAG__) {
                                     __array__154.pop();
                                    break;
                                    
                                }
                            }return __array__154;
                             
                        })()
                    }
                };
                if (check_true (need_sub_block)){
                    {
                        (acc).push("{");
                        sub_block_count+=1
                    }
                };
                idx=-1;
                await (async function(){
                     let __test_condition__159=async function() {
                        return (idx<((allocations && allocations.length)- 1))
                    };
                    let __body_ref__160=async function() {
                        idx+=1;
                        def_idx=null;
                        stmt=[];
                        alloc_set=await (async function(){
                            let __targ__161=allocations[idx];
                            if (__targ__161){
                                 return(__targ__161)["val"]
                            } 
                        })();
                        reference_name=await clean_quoted_reference(await sanitize_js_ref_name((alloc_set && alloc_set["0"] && alloc_set["0"]["name"])));
                        ctx_details=await get_declaration_details(ctx,reference_name);
                        assignment_value=(assignments[reference_name]).shift();
                        await async function(){
                            if (check_true (block_declarations[reference_name])) {
                                return true
                            } else {
                                {
                                    (stmt).push("let");
                                    (stmt).push(" ")
                                }
                            }
                        } ();
                        (stmt).push(reference_name);
                        await async function(){
                            block_declarations[reference_name]=true;
                            return block_declarations;
                            
                        }();
                        (stmt).push("=");
                        (stmt).push(assignment_value);
                        (stmt).push(";");
                        return (acc).push(stmt)
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__159()) {
                         await __body_ref__160();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                (acc).push(await compile_block(await conj(["PLACEHOLDER"],block),ctx,{
                    no_scope_boundary:true,suppress_return:suppress_return,ignore_declarations:declarations_handled
                }));
                await (async function() {
                    let __for_body__165=async function(i) {
                        return (acc).push("}")
                    };
                    let __array__166=[],__elements__164=await (await Environment.get_global("range"))(sub_block_count);
                    let __BREAK__FLAG__=false;
                    for(let __iter__163 in __elements__164) {
                        __array__166.push(await __for_body__165(__elements__164[__iter__163]));
                        if(__BREAK__FLAG__) {
                             __array__166.pop();
                            break;
                            
                        }
                    }return __array__166;
                     
                })();
                if (check_true (false)){
                    return acc
                } else {
                    {
                        (acc).unshift({
                            ctype:"letblock",block_step:(ctx && ctx["parent"] && ctx["parent"]["block_step"])
                        });
                        return acc
                    }
                }
            };
            in_sync_ques_=async function(ctx) {
                return await get_ctx(ctx,"__SYNCF__")
            };
            await_ques_=async function(ctx) {
                if (check_true (await in_sync_ques_(ctx))){
                    return ""
                } else {
                    return "await"
                }
            };
            calling_preamble=async function(ctx) {
                if (check_true (await in_sync_ques_(ctx))){
                    return ["","",{
                        ctype:"Function",block_step:0
                    },"(",")"]
                } else {
                    return ["await","async",{
                        ctype:"AsyncFunction",block_step:0
                    },"",""]
                }
            };
            fn_log=await (async function(){
                 return await defclog({
                    prefix:"compile_fn",background:"black",color:"lightblue"
                }) 
            })();
            comp_scope_log=await (async function(){
                 return await defclog({
                    prefix:"set_new_completion_scope",background:"#A000A0",color:"white"
                }) 
            })();
            completion_scope_id=0;
            set_new_completion_scope=async function(ctx) {
                let completion_scope;
                completion_scope={
                    id:completion_scope_id+=1,root_block_id:null,completion_records:[],is_top:false
                };
                await set_ctx(ctx,"__COMPLETION_SCOPE__",completion_scope);
                await set_ctx(ctx,"__COMP_INFIX_OPS__",null);
                if (check_true (await verbosity(ctx))){
                    {
                        await (async function(){
                            let __array_op_rval__167=comp_scope_log;
                             if (__array_op_rval__167 instanceof Function){
                                return await __array_op_rval__167("-> id: ",(completion_scope && completion_scope["id"]),completion_scope,await (async function(){
                                     return await clone(ctx) 
                                })()) 
                            } else {
                                return [__array_op_rval__167,"-> id: ",(completion_scope && completion_scope["id"]),completion_scope,await (async function(){
                                     return await clone(ctx) 
                                })()]
                            }
                        })()
                    }
                };
                return completion_scope
            };
            compile_fn=async function(tokens,ctx,fn_opts) {
                let acc;
                let idx;
                let arg;
                let fn_args;
                let body;
                let external_declarations;
                let type_mark;
                let source;
                let completion_scope;
                let nbody;
                acc=[];
                idx=-1;
                arg=null;
                ctx=await (async function(){
                     return await new_ctx(ctx) 
                })();
                fn_args=(tokens && tokens["1"] && tokens["1"]["val"]);
                body=(tokens && tokens["2"]);
                external_declarations=(tokens && tokens["3"]);
                type_mark=null;
                source=await (async function(){
                    if (check_true (await verbosity(ctx))){
                        return await source_from_tokens(tokens,expanded_tree)
                    } else {
                        return null
                    }
                })();
                completion_scope=null;
                nbody=null;
                await async function(){
                    let __target_obj__168=(ctx && ctx["scope"]);
                    __target_obj__168["__SOURCE__"]=source;
                    return __target_obj__168;
                    
                }();
                if (check_true (await verbosity(ctx))){
                    {
                        await (async function(){
                            let __array_op_rval__169=fn_log;
                             if (__array_op_rval__169 instanceof Function){
                                return await __array_op_rval__169("->",source,await (async function(){
                                     return await clone(ctx) 
                                })(),await (async function(){
                                     return await clone(fn_opts) 
                                })()) 
                            } else {
                                return [__array_op_rval__169,"->",source,await (async function(){
                                     return await clone(ctx) 
                                })(),await (async function(){
                                     return await clone(fn_opts) 
                                })()]
                            }
                        })()
                    }
                };
                completion_scope=await set_new_completion_scope(ctx);
                if (check_true ((undefined==body))){
                    {
                        throw new SyntaxError("Invalid function call syntax");
                        
                    }
                };
                await async function(){
                    ctx["return_point"]=0;
                    return ctx;
                    
                }();
                await set_ctx(ctx,"__IN_LAMBDA__",true);
                await set_ctx(ctx,"__LAMBDA_STEP__",-1);
                await async function(){
                    ctx["lambda_scope"]=true;
                    return ctx;
                    
                }();
                await async function(){
                    ctx["suppress_return"]=false;
                    return ctx;
                    
                }();
                await async function(){
                    if (check_true ((fn_opts && fn_opts["synchronous"]))) {
                        {
                            type_mark=await type_marker("Function");
                            await set_ctx(ctx,"__SYNCF__",true);
                            await async function(){
                                completion_scope["in_sync"]=true;
                                return completion_scope;
                                
                            }();
                            return (acc).push(type_mark)
                        }
                    } else if (check_true ((fn_opts && fn_opts["arrow"]))) {
                        {
                            type_mark=await type_marker("Function");
                            (acc).push(type_mark)
                        }
                    } else if (check_true ((fn_opts && fn_opts["generator"]))) {
                        {
                            await set_ctx(ctx,"__SYNCF__",true);
                            type_mark=await type_marker("GeneratorFunction");
                            (acc).push(type_mark);
                            (acc).push(" ")
                        }
                    } else {
                        {
                            type_mark=await type_marker("AsyncFunction");
                            (acc).push(type_mark);
                            (acc).push("async");
                            (acc).push(" ")
                        }
                    }
                } ();
                await async function(){
                    type_mark["args"]=[];
                    return type_mark;
                    
                }();
                await async function(){
                    if (check_true ((fn_opts && fn_opts["arrow"]))) {
                        return await async function(){
                            completion_scope["scope_type"]="arrow";
                            return completion_scope;
                            
                        }()
                    } else if (check_true ((fn_opts && fn_opts["generator"]))) {
                        {
                            (acc).push("function*");
                            await async function(){
                                completion_scope["scope_type"]="generator";
                                return completion_scope;
                                
                            }()
                        }
                    } else {
                        {
                            await async function(){
                                completion_scope["scope_type"]="function";
                                return completion_scope;
                                
                            }();
                            (acc).push("function")
                        }
                    }
                } ();
                (acc).push("(");
                await (async function(){
                     let __test_condition__178=async function() {
                        return (idx<((fn_args && fn_args.length)- 1))
                    };
                    let __body_ref__179=async function() {
                        idx+=1;
                        arg=fn_args[idx];
                        if (check_true (((arg && arg.name)==="&"))){
                            {
                                idx+=1;
                                arg=fn_args[idx];
                                if (check_true ((null==arg))){
                                    {
                                        throw new SyntaxError("Missing argument symbol after &");
                                        
                                    }
                                };
                                await set_ctx(ctx,(arg && arg.name),ArgumentType);
                                await async function(){
                                    arg["name"]=("..."+ (arg && arg.name));
                                    return arg;
                                    
                                }()
                            }
                        } else {
                            {
                                await set_ctx(ctx,(arg && arg.name),ArgumentType)
                            }
                        };
                        (acc).push(await sanitize_js_ref_name((arg && arg.name)));
                        ((type_mark && type_mark["args"])).push(await sanitize_js_ref_name((arg && arg.name)));
                        if (check_true ((idx<((fn_args && fn_args.length)- 1)))){
                            {
                                return (acc).push(",")
                            }
                        }
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__178()) {
                         await __body_ref__179();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                (acc).push(")");
                (acc).push(" ");
                if (check_true ((fn_opts && fn_opts["arrow"]))){
                    {
                        (acc).push("=>")
                    }
                };
                if (check_true (((fn_opts && fn_opts["generator"])|| (fn_opts && fn_opts["arrow"])))){
                    await async function(){
                        ctx["return_last_value"]=false;
                        return ctx;
                        
                    }()
                } else {
                    await async function(){
                        ctx["return_last_value"]=true;
                        return ctx;
                        
                    }()
                };
                await async function(){
                    if (check_true (((body && body["val"] && body["val"]["0"] && body["val"]["0"]["name"])==="let"))) {
                        {
                            if (check_true (await verbosity(ctx))){
                                {
                                    await (async function(){
                                        let __array_op_rval__183=fn_log;
                                         if (__array_op_rval__183 instanceof Function){
                                            return await __array_op_rval__183("calling compile: block is a let") 
                                        } else {
                                            return [__array_op_rval__183,"calling compile: block is a let"]
                                        }
                                    })()
                                }
                            };
                            return (acc).push(await (async function(){
                                 return await compile((body && body["val"]),ctx) 
                            })())
                        }
                    } else if (check_true (await contains_ques_((body && body["val"] && body["val"]["0"] && body["val"]["0"]["name"]),["do","progn","progl"]))) {
                        {
                            if (check_true (await verbosity(ctx))){
                                {
                                    await (async function(){
                                        let __array_op_rval__184=fn_log;
                                         if (__array_op_rval__184 instanceof Function){
                                            return await __array_op_rval__184("calling compile_block due to: ",(body && body["val"] && body["val"]["0"] && body["val"]["0"]["name"])) 
                                        } else {
                                            return [__array_op_rval__184,"calling compile_block due to: ",(body && body["val"] && body["val"]["0"] && body["val"]["0"]["name"])]
                                        }
                                    })()
                                }
                            };
                            (acc).push(await compile_block((body && body["val"]),ctx))
                        }
                    } else {
                        {
                            nbody=await (async function(){
                                 return [{
                                    type:"special",val:await (async function(){
                                         return "=:do" 
                                    })(),ref:true,name:"do"
                                },body] 
                            })();
                            await async function(){
                                ctx["return_last_value"]=true;
                                return ctx;
                                
                            }();
                            (acc).push({
                                mark:"nbody"
                            });
                            if (check_true (await verbosity(ctx))){
                                {
                                    await (async function(){
                                        let __array_op_rval__186=fn_log;
                                         if (__array_op_rval__186 instanceof Function){
                                            return await __array_op_rval__186("calling compile_block after making a psuedo-block") 
                                        } else {
                                            return [__array_op_rval__186,"calling compile_block after making a psuedo-block"]
                                        }
                                    })()
                                }
                            };
                            (acc).push(await compile_block(nbody,ctx))
                        }
                    }
                } ();
                await async function(){
                    if (check_true ((await not((fn_opts && fn_opts["arrow"]))&& await not((fn_opts && fn_opts["generator"]))&& ((completion_scope && completion_scope["completion_records"] && completion_scope["completion_records"]["length"])===0)))) {
                        {
                            await console.error("internal compile error: no completion records for callable");
                            await console.log("error provoking source: ",await source_from_tokens(tokens,expanded_tree,true));
                            await console.log("output: ",acc);
                            let internal_syntax_error=new SyntaxError("internal compile error: no completion records for callable");
                            ;
                            throw internal_syntax_error;
                            
                        }
                    } else {
                        true
                    }
                } ();
                return acc
            };
            compile_jslambda=async function(tokens,ctx) {
                let acc;
                let fn_args;
                let body;
                let idx;
                let quoted_body;
                let arg;
                let type_mark;
                acc=[];
                fn_args=(tokens && tokens["1"] && tokens["1"]["val"]);
                body=await (async function(){
                     return await compile((tokens && tokens["2"] && tokens["2"]["val"]),ctx) 
                })();
                idx=-1;
                quoted_body=[];
                arg=null;
                type_mark=await type_marker("Function");
                (acc).push(type_mark);
                await (async function() {
                    let __for_body__189=async function(t) {
                        return (acc).push(t)
                    };
                    let __array__190=[],__elements__188=["new"," ","Function","("];
                    let __BREAK__FLAG__=false;
                    for(let __iter__187 in __elements__188) {
                        __array__190.push(await __for_body__189(__elements__188[__iter__187]));
                        if(__BREAK__FLAG__) {
                             __array__190.pop();
                            break;
                            
                        }
                    }return __array__190;
                     
                })();
                if (check_true (await not((body instanceof String || typeof body==='string')))){
                    {
                        throw new SyntaxError(("Invalid jslambda body, need string, got: "+ await subtype(body)));
                        
                    }
                };
                await (async function(){
                     let __test_condition__191=async function() {
                        return (idx<((fn_args && fn_args.length)- 1))
                    };
                    let __body_ref__192=async function() {
                        idx+=1;
                        arg=fn_args[idx];
                        await set_ctx(ctx,(arg && arg.name),ArgumentType);
                        (acc).push(("\""+ (arg && arg.name)+ "\""));
                        ((type_mark && type_mark["args"])).push((arg && arg.name));
                        return (acc).push(",")
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__191()) {
                         await __body_ref__192();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                (acc).push("\"");
                await (async function() {
                    let __for_body__195=async function(c) {
                        if (check_true (await not((c==="\n"),(c==="\r")))){
                            {
                                if (check_true ((c==="\""))){
                                    {
                                        (quoted_body).push(await String.fromCharCode(92))
                                    }
                                };
                                return (quoted_body).push(c)
                            }
                        }
                    };
                    let __array__196=[],__elements__194=(body).split("");
                    let __BREAK__FLAG__=false;
                    for(let __iter__193 in __elements__194) {
                        __array__196.push(await __for_body__195(__elements__194[__iter__193]));
                        if(__BREAK__FLAG__) {
                             __array__196.pop();
                            break;
                            
                        }
                    }return __array__196;
                     
                })();
                (acc).push((await flatten(quoted_body)).join(""));
                (acc).push("\"");
                (acc).push(")");
                return acc
            };
            compile_yield=async function(tokens,ctx) {
                let acc;
                let expr;
                let cmp_rec;
                acc=[];
                expr=null;
                cmp_rec=await get_ctx(ctx,"__COMPLETION_SCOPE__");
                (acc).push(["yield"," ",await compile_wrapper_fn((tokens && tokens["1"]),ctx),";"]);
                ((cmp_rec && cmp_rec["completion_records"])).push({
                    block_id:(ctx && ctx["block_id"]),block_step:(ctx && ctx["block_step"]),type:"yield",stmt:await last(acc)
                });
                return acc
            };
            var_counter=0;
            gen_temp_name=async function(arg) {
                return ("__"+ (arg|| "")+ "__"+ (var_counter=var_counter+1))
            };
            if_id=0;
            compile_cond=async function(tokens,ctx) {
                let preamble;
                preamble=await calling_preamble(ctx);
                ctx=await (async function(){
                     return await new_ctx(ctx) 
                })();
                ;
                await set_new_completion_scope(ctx);
                return [(preamble && preamble["2"]),(preamble && preamble["0"])," ",(preamble && preamble["1"])," ",(preamble && preamble["3"]),"function","()","{",await compile_cond_inner(tokens,ctx),"} ",(preamble && preamble["4"]),"()"]
            };
            compile_cond_inner=async function(tokens,ctx) {
                let acc;
                let conditions;
                let block_step;
                let condition_tokens;
                let idx;
                let preamble;
                let compile_condition;
                acc=[];
                conditions=[];
                block_step=(ctx && ctx["block_step"]);
                condition_tokens=await tokens["slice"].call(tokens,1);
                idx=-2;
                preamble=await calling_preamble(ctx);
                compile_condition=async function(cond_test,cond_block) {
                    let stmts;
                    let compiled_test;
                    let stmt;
                    stmts=[];
                    compiled_test=null;
                    stmt=null;
                    if (check_true (((cond_test && cond_test.name)==="else"))){
                        if (check_true ((idx>=2))){
                            (stmts).push(" else ")
                        }
                    } else {
                        {
                            if (check_true ((idx>=2))){
                                (stmts).push(" else ")
                            };
                            compiled_test=await compile_wrapper_fn(cond_test,ctx);
                            if (check_true (((await first(compiled_test) instanceof Object)&& await (async function(){
                                let __targ__197=await first(compiled_test);
                                if (__targ__197){
                                     return(__targ__197)["ctype"]
                                } 
                            })()&& (await (async function(){
                                let __targ__198=await first(compiled_test);
                                if (__targ__198){
                                     return(__targ__198)["ctype"]
                                } 
                            })() instanceof String || typeof await (async function(){
                                let __targ__198=await first(compiled_test);
                                if (__targ__198){
                                     return(__targ__198)["ctype"]
                                } 
                            })()==='string')&& await contains_ques_("unction",await (async function(){
                                let __targ__199=await first(compiled_test);
                                if (__targ__199){
                                     return(__targ__199)["ctype"]
                                } 
                            })())))){
                                (stmts).push(["if"," ","(check_true (",(preamble && preamble["0"])," ",compiled_test,"()",")) "])
                            } else {
                                (stmts).push(["if"," ","(check_true (",compiled_test,")) "])
                            }
                        }
                    };
                    stmt=await compile_block(await ensure_block(cond_block),ctx);
                    (stmts).push(stmt);
                    return stmts
                };
                ;
                if (check_true ((null==block_step))){
                    acc=await compile_block(await ensure_block(tokens),ctx)
                } else {
                    {
                        await async function(){
                            if (check_true (await not((((condition_tokens && condition_tokens.length)% 2)===0)))) {
                                throw new LispSyntaxError("cond: Invalid syntax: missing condition block");
                                
                            } else if (check_true (((condition_tokens && condition_tokens.length)===0))) {
                                throw new LispSyntaxError("cond: Invalid syntax: no conditions provided");
                                
                            }
                        } ();
                        await (async function(){
                             let __test_condition__200=async function() {
                                return (idx<((condition_tokens && condition_tokens.length)- 2))
                            };
                            let __body_ref__201=async function() {
                                idx+=2;
                                return (acc).push(await compile_condition(condition_tokens[idx],condition_tokens[(idx+ 1)]))
                            };
                            let __BREAK__FLAG__=false;
                            while(await __test_condition__200()) {
                                 await __body_ref__201();
                                 if(__BREAK__FLAG__) {
                                     break;
                                    
                                }
                            } ;
                            
                        })()
                    }
                };
                return acc
            };
            ensure_block=async function(tokens) {
                if (check_true (((tokens instanceof Array)&& ("special"===(tokens && tokens["0"] && tokens["0"]["type"]))&& await contains_ques_((tokens && tokens["0"] && tokens["0"]["name"]),["do","progn"])))){
                    return tokens
                } else {
                    return ["PLACEHOLDER",tokens]
                }
            };
            compile_if=async function(tokens,ctx) {
                let acc;
                let subacc;
                let stmts;
                let test_form;
                let if_true;
                let if_false;
                let compiled_test;
                let compiled_true;
                let compiled_false;
                let block_step;
                let preamble;
                acc=[];
                subacc=[];
                stmts=null;
                test_form=(tokens && tokens["1"]);
                if_true=(tokens && tokens["2"]);
                if_false=(tokens && tokens["3"]);
                compiled_test=null;
                compiled_true=null;
                compiled_false=null;
                block_step=(ctx && ctx["block_step"]);
                preamble=await calling_preamble(ctx);
                ;
                if (check_true ((null==block_step))){
                    acc=await compile_block(await ensure_block(tokens),ctx)
                } else {
                    {
                        (acc).push({
                            ctype:"ifblock",block_step:(ctx && ctx["block_step"]),block_id:(ctx && ctx["block_id"])
                        });
                        compiled_test=await (async function(){
                             return await compile(test_form,ctx) 
                        })();
                        if (check_true (((await first(compiled_test) instanceof Object)&& await (async function(){
                            let __targ__202=await first(compiled_test);
                            if (__targ__202){
                                 return(__targ__202)["ctype"]
                            } 
                        })()&& (await (async function(){
                            let __targ__203=await first(compiled_test);
                            if (__targ__203){
                                 return(__targ__203)["ctype"]
                            } 
                        })() instanceof String || typeof await (async function(){
                            let __targ__203=await first(compiled_test);
                            if (__targ__203){
                                 return(__targ__203)["ctype"]
                            } 
                        })()==='string')&& await contains_ques_("unction",await (async function(){
                            let __targ__204=await first(compiled_test);
                            if (__targ__204){
                                 return(__targ__204)["ctype"]
                            } 
                        })())))){
                            await (async function() {
                                let __for_body__207=async function(t) {
                                    return (subacc).push(t)
                                };
                                let __array__208=[],__elements__206=["if"," ","(check_true (",(preamble && preamble["0"])," ",compiled_test,"()","))"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__205 in __elements__206) {
                                    __array__208.push(await __for_body__207(__elements__206[__iter__205]));
                                    if(__BREAK__FLAG__) {
                                         __array__208.pop();
                                        break;
                                        
                                    }
                                }return __array__208;
                                 
                            })()
                        } else {
                            await (async function() {
                                let __for_body__211=async function(t) {
                                    return (subacc).push(t)
                                };
                                let __array__212=[],__elements__210=["if"," ","(check_true (",compiled_test,"))"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__209 in __elements__210) {
                                    __array__212.push(await __for_body__211(__elements__210[__iter__209]));
                                    if(__BREAK__FLAG__) {
                                         __array__212.pop();
                                        break;
                                        
                                    }
                                }return __array__212;
                                 
                            })()
                        };
                        (acc).push(subacc);
                        subacc=[];
                        compiled_true=await compile_block(await ensure_block(if_true),ctx);
                        (acc).push(compiled_true);
                        if (check_true (if_false)){
                            {
                                (acc).push(" ");
                                (acc).push("else");
                                (acc).push(" ");
                                compiled_false=await compile_block(await ensure_block(if_false),ctx);
                                (acc).push(compiled_false)
                            }
                        }
                    }
                };
                return acc
            };
            compile_as_call=async function(tokens,ctx) {
                return await compile_wrapper_fn(tokens,ctx,{
                    force:true
                })
            };
            rwfnlog=await (async function(){
                 return await defclog({
                    prefix:"compile_wrapper_fn",background:"black",color:"yellow"
                }) 
            })();
            compile_wrapper_fn=async function(tokens,ctx,opts) {
                let acc;
                let preamble;
                let needs_await;
                acc=[];
                ctx=ctx;
                preamble=await calling_preamble(ctx);
                needs_await=true;
                ;
                await async function(){
                    if (check_true (((tokens instanceof Object)&& await not((tokens instanceof Array))&& await not(((tokens && tokens["type"])==="arr"))))) {
                        {
                            needs_await=false;
                            return acc=await (async function(){
                                 return await compile(tokens,ctx) 
                            })()
                        }
                    } else if (check_true (((tokens instanceof Object)&& ((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["type"])==="fun")))) {
                        {
                            needs_await=false;
                            acc=await (async function(){
                                 return await compile(tokens,ctx) 
                            })()
                        }
                    } else if (check_true ((opts && opts["force"]))) {
                        {
                            ctx=await (async function(){
                                 return await new_ctx(ctx) 
                            })();
                            if (check_true (await verbosity(ctx))){
                                {
                                    await (async function(){
                                        let __array_op_rval__213=rwfnlog;
                                         if (__array_op_rval__213 instanceof Function){
                                            return await __array_op_rval__213("compile_wrapper_fn: -> ",await source_from_tokens(tokens,expanded_tree)) 
                                        } else {
                                            return [__array_op_rval__213,"compile_wrapper_fn: -> ",await source_from_tokens(tokens,expanded_tree)]
                                        }
                                    })();
                                    await (async function(){
                                        let __array_op_rval__214=rwfnlog;
                                         if (__array_op_rval__214 instanceof Function){
                                            return await __array_op_rval__214("compile_wrapper_fn: ",opts,"ctx: ",await (async function(){
                                                 return await clone(ctx) 
                                            })()) 
                                        } else {
                                            return [__array_op_rval__214,"compile_wrapper_fn: ",opts,"ctx: ",await (async function(){
                                                 return await clone(ctx) 
                                            })()]
                                        }
                                    })()
                                }
                            };
                            await set_new_completion_scope(ctx);
                            acc=await compile_block_to_anon_fn(tokens,ctx,opts)
                        }
                    } else if (check_true (await is_block_ques_(tokens))) {
                        {
                            ctx=await (async function(){
                                 return await new_ctx(ctx) 
                            })();
                            await set_new_completion_scope(ctx);
                            await async function(){
                                ctx["block_step"]=0;
                                return ctx;
                                
                            }();
                            acc=await (async function(){
                                let __array_op_rval__216=(preamble && preamble["2"]);
                                 if (__array_op_rval__216 instanceof Function){
                                    return await __array_op_rval__216("(",(preamble && preamble["1"])," ","function","()","{",await (async function(){
                                         return await compile(tokens,ctx) 
                                    })(),"}",")","()") 
                                } else {
                                    return [__array_op_rval__216,"(",(preamble && preamble["1"])," ","function","()","{",await (async function(){
                                         return await compile(tokens,ctx) 
                                    })(),"}",")","()"]
                                }
                            })()
                        }
                    } else if (check_true (((tokens instanceof Object)&& ((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["type"])==="special")&& (((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["name"])==="if")|| (((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["name"])==="throw")&& await get_ctx(ctx,"__COMP_INFIX_OPS__")))))) {
                        {
                            ctx=await (async function(){
                                 return await new_ctx(ctx) 
                            })();
                            await set_new_completion_scope(ctx);
                            await async function(){
                                ctx["block_step"]=0;
                                return ctx;
                                
                            }();
                            await (async function() {
                                let __for_body__220=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__221=[],__elements__219=await (async function(){
                                    let __array_op_rval__222=(preamble && preamble["2"]);
                                     if (__array_op_rval__222 instanceof Function){
                                        return await __array_op_rval__222("(",(preamble && preamble["1"])," ","function","()","{",await compile_if((tokens && tokens["val"]),ctx),"}",")","()") 
                                    } else {
                                        return [__array_op_rval__222,"(",(preamble && preamble["1"])," ","function","()","{",await compile_if((tokens && tokens["val"]),ctx),"}",")","()"]
                                    }
                                })();
                                let __BREAK__FLAG__=false;
                                for(let __iter__218 in __elements__219) {
                                    __array__221.push(await __for_body__220(__elements__219[__iter__218]));
                                    if(__BREAK__FLAG__) {
                                         __array__221.pop();
                                        break;
                                        
                                    }
                                }return __array__221;
                                 
                            })()
                        }
                    } else if (check_true (((tokens instanceof Array)&& (((tokens && tokens["0"] && tokens["0"]["type"])==="fun")|| ((tokens && tokens["0"] && tokens["0"]["type"])==="asf")|| ((tokens && tokens["0"] && tokens["0"]["type"])==="function"))))) {
                        {
                            needs_await=false;
                            acc=await (async function(){
                                 return await compile(tokens,ctx) 
                            })()
                        }
                    } else if (check_true ((tokens instanceof Array))) {
                        {
                            ctx=await (async function(){
                                 return await new_ctx(ctx) 
                            })();
                            if (check_true (await verbosity(ctx))){
                                {
                                    await (async function(){
                                        let __array_op_rval__223=rwfnlog;
                                         if (__array_op_rval__223 instanceof Function){
                                            return await __array_op_rval__223("compile_wrapper_fn: -> ",await source_from_tokens(tokens,expanded_tree)) 
                                        } else {
                                            return [__array_op_rval__223,"compile_wrapper_fn: -> ",await source_from_tokens(tokens,expanded_tree)]
                                        }
                                    })();
                                    await (async function(){
                                        let __array_op_rval__224=rwfnlog;
                                         if (__array_op_rval__224 instanceof Function){
                                            return await __array_op_rval__224("compile_wrapper_fn: ",opts,"ctx: ",await (async function(){
                                                 return await clone(ctx) 
                                            })()) 
                                        } else {
                                            return [__array_op_rval__224,"compile_wrapper_fn: ",opts,"ctx: ",await (async function(){
                                                 return await clone(ctx) 
                                            })()]
                                        }
                                    })()
                                }
                            };
                            await set_new_completion_scope(ctx);
                            acc=await compile_block_to_anon_fn(tokens,ctx,opts)
                        }
                    } else if (check_true (((tokens instanceof Object)&& ((tokens && tokens["type"])==="arr")&& (((tokens && tokens["val"] && tokens["val"]["length"])===0)|| ((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["type"])==="literal")|| (((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["type"])==="arg")|| (((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["type"])==="special")&& await not(await contains_ques_((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["name"]),["if","try","do","progn","let","cond"])))))))) {
                        {
                            needs_await=false;
                            acc=await (async function(){
                                 return await compile(tokens,ctx) 
                            })()
                        }
                    } else if (check_true (((tokens instanceof Object)&& (tokens && tokens["val"])&& ((tokens && tokens["type"])==="arr")))) {
                        {
                            ctx=await (async function(){
                                 return await new_ctx(ctx) 
                            })();
                            if (check_true (await verbosity(ctx))){
                                {
                                    await (async function(){
                                        let __array_op_rval__225=rwfnlog;
                                         if (__array_op_rval__225 instanceof Function){
                                            return await __array_op_rval__225("compile_wrapper_fn: -> ",await source_from_tokens(tokens,expanded_tree)) 
                                        } else {
                                            return [__array_op_rval__225,"compile_wrapper_fn: -> ",await source_from_tokens(tokens,expanded_tree)]
                                        }
                                    })();
                                    await (async function(){
                                        let __array_op_rval__226=rwfnlog;
                                         if (__array_op_rval__226 instanceof Function){
                                            return await __array_op_rval__226("compile_wrapper_fn: ",opts,"ctx: ",await (async function(){
                                                 return await clone(ctx) 
                                            })()) 
                                        } else {
                                            return [__array_op_rval__226,"compile_wrapper_fn: ",opts,"ctx: ",await (async function(){
                                                 return await clone(ctx) 
                                            })()]
                                        }
                                    })()
                                }
                            };
                            await set_new_completion_scope(ctx);
                            acc=await compile_block_to_anon_fn((tokens && tokens["val"]),ctx,opts)
                        }
                    } else {
                        acc=await (async function(){
                             return await compile(tokens,ctx) 
                        })()
                    }
                } ();
                if (check_true (needs_await)){
                    return [(preamble && preamble["0"])," ",acc]
                } else {
                    return acc
                }
            };
            compile_block_to_anon_fn=async function(tokens,ctx,opts) {
                let acc;
                let preamble;
                acc=[];
                preamble=await calling_preamble(ctx);
                ctx=await (async function(){
                     return await new_ctx(ctx) 
                })();
                await async function(){
                    ctx["return_point"]=0;
                    return ctx;
                    
                }();
                await async function(){
                    ctx["block_step"]=0;
                    return ctx;
                    
                }();
                await async function(){
                    if (check_true (await is_block_ques_(tokens))) {
                        {
                            await async function(){
                                ctx["return_last_value"]=true;
                                return ctx;
                                
                            }();
                            await async function(){
                                ctx["return_point"]=0;
                                return ctx;
                                
                            }();
                            return await (async function() {
                                let __for_body__233=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__234=[],__elements__232=["(",(preamble && preamble["1"])," ","function","()",await compile_block(tokens,ctx),")","()"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__231 in __elements__232) {
                                    __array__234.push(await __for_body__233(__elements__232[__iter__231]));
                                    if(__BREAK__FLAG__) {
                                         __array__234.pop();
                                        break;
                                        
                                    }
                                }return __array__234;
                                 
                            })()
                        }
                    } else if (check_true ((((tokens && tokens["0"] && tokens["0"]["name"])==="let")&& ((tokens && tokens["0"] && tokens["0"]["type"])==="special")))) {
                        {
                            await async function(){
                                ctx["return_last_value"]=true;
                                return ctx;
                                
                            }();
                            await async function(){
                                ctx["return_point"]=0;
                                return ctx;
                                
                            }();
                            await (async function() {
                                let __for_body__239=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__240=[],__elements__238=["(",(preamble && preamble["1"])," ","function","()",await (async function(){
                                     return await compile(tokens,ctx) 
                                })(),")","()"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__237 in __elements__238) {
                                    __array__240.push(await __for_body__239(__elements__238[__iter__237]));
                                    if(__BREAK__FLAG__) {
                                         __array__240.pop();
                                        break;
                                        
                                    }
                                }return __array__240;
                                 
                            })()
                        }
                    } else if (check_true ((((tokens && tokens["0"] && tokens["0"]["type"])==="special")&& (((tokens && tokens["0"] && tokens["0"]["name"])==="if")|| ((tokens && tokens["0"] && tokens["0"]["name"])==="try"))))) {
                        {
                            await (async function() {
                                let __for_body__243=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__244=[],__elements__242=["(",(preamble && preamble["1"])," ","function","() { ",await (async function(){
                                     return await compile(tokens,ctx) 
                                })(),"})","()"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__241 in __elements__242) {
                                    __array__244.push(await __for_body__243(__elements__242[__iter__241]));
                                    if(__BREAK__FLAG__) {
                                         __array__244.pop();
                                        break;
                                        
                                    }
                                }return __array__244;
                                 
                            })()
                        }
                    } else {
                        {
                            await async function(){
                                ctx["return_last_value"]=true;
                                return ctx;
                                
                            }();
                            await async function(){
                                ctx["return_point"]=0;
                                return ctx;
                                
                            }();
                            await (async function() {
                                let __for_body__249=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__250=[],__elements__248=["(",(preamble && preamble["1"])," ","function","()","{"," ","return"," ",await (async function(){
                                     return await compile(tokens,ctx) 
                                })()," ","}",")","()"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__247 in __elements__248) {
                                    __array__250.push(await __for_body__249(__elements__248[__iter__247]));
                                    if(__BREAK__FLAG__) {
                                         __array__250.pop();
                                        break;
                                        
                                    }
                                }return __array__250;
                                 
                            })()
                        }
                    }
                } ();
                return acc
            };
            make_do_block=async function(tokens) {
                let preamble;
                let place;
                preamble=await (async function(){
                     return await clone({
                        type:"arr",ref:false,name:null,val:[]
                    }) 
                })();
                place=(preamble && preamble["val"]);
                (place).push({
                    type:"special",val:await (async function(){
                         return "=:do" 
                    })(),ref:true,name:"do"
                });
                await async function(){
                    if (check_true ((tokens instanceof Array))) {
                        return await (async function() {
                            let __for_body__253=async function(token) {
                                return (place).push(token)
                            };
                            let __array__254=[],__elements__252=tokens;
                            let __BREAK__FLAG__=false;
                            for(let __iter__251 in __elements__252) {
                                __array__254.push(await __for_body__253(__elements__252[__iter__251]));
                                if(__BREAK__FLAG__) {
                                     __array__254.pop();
                                    break;
                                    
                                }
                            }return __array__254;
                             
                        })()
                    } else {
                        await (async function() {
                            let __for_body__257=async function(token) {
                                return (place).push(token)
                            };
                            let __array__258=[],__elements__256=await (async function(){
                                let __array_op_rval__259=tokens;
                                 if (__array_op_rval__259 instanceof Function){
                                    return await __array_op_rval__259() 
                                } else {
                                    return [__array_op_rval__259]
                                }
                            })();
                            let __BREAK__FLAG__=false;
                            for(let __iter__255 in __elements__256) {
                                __array__258.push(await __for_body__257(__elements__256[__iter__255]));
                                if(__BREAK__FLAG__) {
                                     __array__258.pop();
                                    break;
                                    
                                }
                            }return __array__258;
                             
                        })()
                    }
                } ();
                return preamble
            };
            push_as_arg_list=async function(place,args) {
                await map(async function(v,i,t) {
                    (place).push(v);
                    if (check_true ((i<=(t- 2)))){
                        {
                            return (place).push(",")
                        }
                    }
                },args);
                return place
            };
            compile_new=async function(tokens,ctx) {
                let acc;
                let prebuild;
                let target_type;
                let comps;
                let type_details;
                let root_type_details;
                let target_return_type;
                let new_arg_name;
                let args;
                let preamble;
                let new_opts;
                acc=[];
                prebuild=[];
                target_type=await clean_quoted_reference(await sanitize_js_ref_name((tokens && tokens["1"] && tokens["1"]["name"])));
                comps=await (await Environment.get_global("get_object_path"))(target_type);
                type_details=await get_declaration_details(ctx,target_type);
                root_type_details=await (async function(){
                    if (check_true (((comps && comps.length)>1))){
                        return await get_declaration_details(ctx,(comps && comps["0"]))
                    } else {
                        return null
                    }
                })();
                target_return_type=null;
                new_arg_name=null;
                args=[];
                ctx=await (async function(){
                     return await new_ctx(ctx) 
                })();
                preamble=await calling_preamble(ctx);
                new_opts=await tokens["slice"].call(tokens,2);
                if (check_true (((comps && comps.length)>1))){
                    {
                        target_type=await (async function(){
                             return await (await Environment.get_global("path_to_js_syntax"))(comps) 
                        })()
                    }
                };
                await (async function() {
                    let __for_body__262=async function(opt_token) {
                        return (args).push(await compile_wrapper_fn(opt_token,ctx))
                    };
                    let __array__263=[],__elements__261=(new_opts|| []);
                    let __BREAK__FLAG__=false;
                    for(let __iter__260 in __elements__261) {
                        __array__263.push(await __for_body__262(__elements__261[__iter__260]));
                        if(__BREAK__FLAG__) {
                             __array__263.pop();
                            break;
                            
                        }
                    }return __array__263;
                     
                })();
                await async function(){
                    if (check_true ((await not((null==(type_details && type_details["value"])))&& (type_details && type_details["declared_global"])))) {
                        {
                            await (async function() {
                                let __for_body__266=async function(arg) {
                                    return (acc).push(arg)
                                };
                                let __array__267=[],__elements__265=["new"," ",await (async function(){
                                     return await compile((tokens && tokens["1"]),ctx) 
                                })(),"("];
                                let __BREAK__FLAG__=false;
                                for(let __iter__264 in __elements__265) {
                                    __array__267.push(await __for_body__266(__elements__265[__iter__264]));
                                    if(__BREAK__FLAG__) {
                                         __array__267.pop();
                                        break;
                                        
                                    }
                                }return __array__267;
                                 
                            })();
                            await push_as_arg_list(acc,args);
                            return (acc).push(")")
                        }
                    } else if (check_true ((await not((null==(type_details && type_details["value"])))&& (type_details && type_details["value"]) instanceof Function))) {
                        {
                            await (async function() {
                                let __for_body__270=async function(arg) {
                                    return (acc).push(arg)
                                };
                                let __array__271=[],__elements__269=["new"," ",target_type,"("];
                                let __BREAK__FLAG__=false;
                                for(let __iter__268 in __elements__269) {
                                    __array__271.push(await __for_body__270(__elements__269[__iter__268]));
                                    if(__BREAK__FLAG__) {
                                         __array__271.pop();
                                        break;
                                        
                                    }
                                }return __array__271;
                                 
                            })();
                            await push_as_arg_list(acc,args);
                            (acc).push(")")
                        }
                    } else if (check_true (((null==(type_details && type_details["value"]))&& await not((null==(root_type_details && root_type_details["value"])))))) {
                        {
                            await (async function() {
                                let __for_body__274=async function(arg) {
                                    return (acc).push(arg)
                                };
                                let __array__275=[],__elements__273=["(",(preamble && preamble["0"])," ",env_ref,"get_global","(","\"","indirect_new","\"",")",")","(",target_type];
                                let __BREAK__FLAG__=false;
                                for(let __iter__272 in __elements__273) {
                                    __array__275.push(await __for_body__274(__elements__273[__iter__272]));
                                    if(__BREAK__FLAG__) {
                                         __array__275.pop();
                                        break;
                                        
                                    }
                                }return __array__275;
                                 
                            })();
                            if (check_true (((args && args.length)>0))){
                                {
                                    (acc).push(",");
                                    await push_as_arg_list(acc,args)
                                }
                            };
                            (acc).push(")")
                        }
                    } else {
                        {
                            await (async function() {
                                let __for_body__278=async function(arg) {
                                    return (acc).push(arg)
                                };
                                let __array__279=[],__elements__277=["new"," ",(tokens && tokens["1"] && tokens["1"]["name"]),"("];
                                let __BREAK__FLAG__=false;
                                for(let __iter__276 in __elements__277) {
                                    __array__279.push(await __for_body__278(__elements__277[__iter__276]));
                                    if(__BREAK__FLAG__) {
                                         __array__279.pop();
                                        break;
                                        
                                    }
                                }return __array__279;
                                 
                            })();
                            await push_as_arg_list(acc,args);
                            (acc).push(")")
                        }
                    }
                } ();
                target_return_type=(await get_ctx_val(ctx,target_type)|| await (async function(){
                    let __targ__280=(await get_declarations(ctx,target_type)|| new Object());
                    if (__targ__280){
                         return(__targ__280)["type"]
                    } 
                })()|| await (await Environment.get_global("get_outside_global"))(target_type)|| UnknownType);
                await async function(){
                    if (check_true (await get_declarations(ctx,target_type))) {
                        return (acc).unshift({
                            ctype:await get_declarations(ctx,target_type)
                        })
                    } else if (check_true ((((tokens && tokens["1"] && tokens["1"]["name"])==="Function")|| ((tokens && tokens["1"] && tokens["1"]["name"])==="AsyncFunction")))) {
                        (acc).unshift({
                            ctype:target_return_type
                        })
                    } else if (check_true (false)) {
                        (acc).unshift({
                            ctype:UnknownType
                        })
                    }
                } ();
                return acc
            };
            compile_val_mod=async function(tokens,ctx) {
                let target;
                let sanitized;
                let target_details;
                let comps;
                let in_infix;
                let operation;
                let mod_source;
                let how_much;
                target=((tokens && tokens["1"] && tokens["1"]["name"])|| await (async function(){
                    throw new SyntaxError(await add((tokens && tokens["0"] && tokens["0"]["name"])," requires at least one argument indicating the symbol which value is to be modified"));
                    
                })());
                sanitized=await (async function(){
                    if (check_true (((tokens && tokens["1"] && tokens["1"]["ref"])&& (tokens && tokens["1"] && tokens["1"]["name"])))){
                        return await sanitize_js_ref_name((tokens && tokens["1"] && tokens["1"]["name"]))
                    } else {
                        return await add((tokens && tokens["0"] && tokens["0"]["name"])," requires at least one argument indicating the symbol which value is to be modified")
                    }
                })();
                target_details=await (async function(){
                     return await async function(){
                        if (check_true (await get_ctx(ctx,sanitized))) {
                            return "local"
                        } else if (check_true (await get_lisp_ctx(ctx,(tokens && tokens["1"] && tokens["1"]["name"])))) {
                            return "global"
                        } else {
                            {
                                {
                                    let it;
                                    it=await get_declaration_details(ctx,(tokens && tokens["1"] && tokens["1"]["name"]));
                                    if (check_true (it)){
                                        return await async function(){
                                            if (check_true ((it && it["is_argument"]))) {
                                                return "local"
                                            } else if (check_true ((it && it["declared_global"]))) {
                                                return "global"
                                            } else if (check_true (it)) {
                                                return "local"
                                            }
                                        } ()
                                    } else {
                                        return 
                                    }
                                }
                            }
                        }
                    } () 
                })();
                comps=(target).split(".");
                in_infix=await get_ctx_val(ctx,"__COMP_INFIX_OPS__");
                operation=await (async function(){
                    if (check_true (in_infix)){
                        return await async function(){
                            if (check_true (((tokens && tokens["0"] && tokens["0"]["name"])==="inc"))) {
                                return "+"
                            } else if (check_true (((tokens && tokens["0"] && tokens["0"]["name"])==="dec"))) {
                                return "-"
                            } else {
                                throw new SyntaxError(("Invalid value modification operator: "+ (tokens && tokens["0"] && tokens["0"]["name"])));
                                
                            }
                        } ()
                    } else {
                        return await async function(){
                            if (check_true (((target_details==="local")&& ((tokens && tokens["0"] && tokens["0"]["name"])==="inc")))) {
                                return "+="
                            } else if (check_true (((target_details==="local")&& ((tokens && tokens["0"] && tokens["0"]["name"])==="dec")))) {
                                return "-="
                            } else if (check_true (((tokens && tokens["0"] && tokens["0"]["name"])==="inc"))) {
                                return "+"
                            } else {
                                return "-"
                            }
                        } ()
                    }
                })();
                mod_source=null;
                how_much=(((tokens && tokens["2"])&& await compile_wrapper_fn((tokens && tokens["2"]),ctx))|| 1);
                if (check_true ((undefined===target_details))){
                    throw new ReferenceError(("unknown symbol: "+ (comps && comps["0"])));
                    
                };
                return await async function(){
                    if (check_true ((target_details==="global"))) {
                        {
                            has_lisp_globals=true;
                            return ["(","await"," ",env_ref,"set_global(\"",target,"\",","await"," ",env_ref,"get_global(\"",target,"\")"," ",operation," ",how_much,"))"]
                        }
                    } else if (check_true (in_infix)) {
                        {
                            return ["(",target,"=",target,operation,how_much,")"]
                        }
                    } else {
                        return await (async function(){
                            let __array_op_rval__281=sanitized;
                             if (__array_op_rval__281 instanceof Function){
                                return await __array_op_rval__281(operation,how_much) 
                            } else {
                                return [__array_op_rval__281,operation,how_much]
                            }
                        })()
                    }
                } ()
            };
            compile_try=async function(tokens,ctx) {
                if (check_true ((null==(ctx && ctx["block_step"])))){
                    return await compile_block(await ensure_block(tokens),ctx)
                } else {
                    return await compile_try_inner(tokens,ctx)
                }
            };
            compile_try_inner=async function(tokens,ctx) {
                let acc;
                let try_block;
                let compiled_try_block;
                let catch_block;
                let idx;
                let exception_ref;
                let base_error_caught;
                let catch_stmts;
                let catches;
                let compile_catch;
                acc=[];
                try_block=await (async function(){
                     return await async function(){
                        if (check_true (((tokens && tokens["1"])&& (null==(tokens && tokens["1"] && tokens["1"]["val"]))))) {
                            return (tokens && tokens["1"])
                        } else if (check_true (((tokens && tokens["1"] && tokens["1"]["type"])==="objlit"))) {
                            return (tokens && tokens["1"])
                        } else if (check_true ((tokens && tokens["1"]))) {
                            return (tokens && tokens["1"] && tokens["1"]["val"])
                        }
                    } () 
                })();
                compiled_try_block=null;
                catch_block=null;
                idx=-1;
                exception_ref=await gen_temp_name("exception");
                base_error_caught=false;
                catch_stmts=[];
                catches=await tokens["slice"].call(tokens,2);
                compile_catch=async function(catch_block) {
                    let throwable_type;
                    let throwable_ref;
                    let catch_statements;
                    let stmts;
                    let subacc;
                    throwable_type=(catch_block && catch_block["1"] && catch_block["1"]["name"]);
                    throwable_ref=(catch_block && catch_block["2"] && catch_block["2"]["val"] && catch_block["2"]["val"]["0"] && catch_block["2"]["val"]["0"]["name"]);
                    catch_statements=(catch_block && catch_block["3"]);
                    stmts=null;
                    subacc=[];
                    ctx=await (async function(){
                         return await new_ctx(ctx) 
                    })();
                    await set_ctx(ctx,throwable_ref,(await Environment.get_global("indirect_new"))(catch_block['1'].name));
                    if (check_true ((throwable_type==="Error"))){
                        {
                            base_error_caught=true
                        }
                    };
                    stmts=await compile_block(await ensure_block(catch_statements),ctx);
                    if (check_true ((idx>0))){
                        (subacc).push([" ","else"," "])
                    };
                    (subacc).push(["if (",exception_ref," instanceof ",throwable_type,") ","{","let ",throwable_ref,"=",exception_ref,";",stmts,"}"]);
                    if (check_true (((idx===((catches && catches.length)- 1))&& await not(base_error_caught)))){
                        {
                            (subacc).push([" ","else"," "]);
                            (subacc).push(await (async function(){
                                 return [{
                                    completion:"throw"
                                },"throw"," ",exception_ref,";"] 
                            })())
                        }
                    };
                    return subacc
                };
                await async function(){
                    if (check_true (((tokens && tokens.length)<2))) {
                        throw new SyntaxError("invalid try form: missing try block");
                        
                    } else if (check_true (((null==catches)|| ((catches && catches.length)<1)))) {
                        throw new SyntaxError("invalid catch block: missing catch");
                        
                    }
                } ();
                compiled_try_block=await compile_block(await ensure_block(try_block),ctx);
                (acc).push({
                    ctype:"tryblock"
                });
                (acc).push(["try"," ",compiled_try_block]);
                (catch_stmts).push([" ","catch"," ","(",exception_ref,")"," "]);
                (catch_stmts).push("{");
                await (async function(){
                     let __test_condition__282=async function() {
                        return (idx<((catches && catches.length)- 1))
                    };
                    let __body_ref__283=async function() {
                        idx+=1;
                        catch_block=await (async function(){
                            let __targ__284=catches[idx];
                            if (__targ__284){
                                 return(__targ__284)["val"]
                            } 
                        })();
                        if (check_true ((catch_block instanceof Array))){
                            return (catch_stmts).push(await compile_catch(catch_block))
                        } else {
                            throw new SyntaxError("invalid catch form");
                            
                        }
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__282()) {
                         await __body_ref__283();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                (catch_stmts).push("}");
                (acc).push(catch_stmts);
                return acc
            };
            compile_throw=async function(tokens,ctx) {
                let acc;
                let error_message;
                let mode;
                let cmp_rec;
                let error_instance;
                acc=[];
                error_message=null;
                mode=1;
                cmp_rec=await get_ctx(ctx,"__COMPLETION_SCOPE__");
                error_instance=null;
                await (await Environment.get_global("assert"))(cmp_rec,"compiler error: throw unable to find completion scope in context");
                await async function(){
                    if (check_true (((tokens instanceof Array)&& ((tokens && tokens.length)===2)&& (tokens && tokens["1"] && tokens["1"]["ref"])))) {
                        {
                            mode=0;
                            return error_instance=await (async function(){
                                 return await compile((tokens && tokens["1"]),ctx) 
                            })()
                        }
                    } else if (check_true (((tokens instanceof Array)&& ((tokens && tokens.length)===3)))) {
                        {
                            error_instance=await (async function(){
                                 return await compile((tokens && tokens["1"]),ctx) 
                            })();
                            error_message=await (async function(){
                                 return await compile((tokens && tokens["2"]),ctx) 
                            })()
                        }
                    } else if (check_true (((tokens instanceof Array)&& ((tokens && tokens.length)===2)))) {
                        {
                            error_message=await (async function(){
                                 return await compile((tokens && tokens["1"]),ctx) 
                            })();
                            error_instance="Error"
                        }
                    } else {
                        throw new SyntaxError("Invalid Throw Syntax");
                        
                    }
                } ();
                if (check_true ((mode===0))){
                    await (async function() {
                        let __for_body__287=async function(t) {
                            return (acc).push(t)
                        };
                        let __array__288=[],__elements__286=await (async function(){
                             return [{
                                completion:"throw"
                            },"throw"," ",error_instance,";"] 
                        })();
                        let __BREAK__FLAG__=false;
                        for(let __iter__285 in __elements__286) {
                            __array__288.push(await __for_body__287(__elements__286[__iter__285]));
                            if(__BREAK__FLAG__) {
                                 __array__288.pop();
                                break;
                                
                            }
                        }return __array__288;
                         
                    })()
                } else {
                    await (async function() {
                        let __for_body__291=async function(t) {
                            return (acc).push(t)
                        };
                        let __array__292=[],__elements__290=await (async function(){
                             return [{
                                completion:"throw"
                            },"throw"," ","new"," ",error_instance,"(",error_message,")",";"] 
                        })();
                        let __BREAK__FLAG__=false;
                        for(let __iter__289 in __elements__290) {
                            __array__292.push(await __for_body__291(__elements__290[__iter__289]));
                            if(__BREAK__FLAG__) {
                                 __array__292.pop();
                                break;
                                
                            }
                        }return __array__292;
                         
                    })()
                };
                ((cmp_rec && cmp_rec["completion_records"])).push({
                    block_id:(ctx && ctx["block_id"]),type:"throw",block_step:(ctx && ctx["block_step"]),stmt:acc
                });
                return acc
            };
            compile_break=async function(tokens,ctx) {
                return await (async function(){
                    let __array_op_rval__293=break_out;
                     if (__array_op_rval__293 instanceof Function){
                        return await __array_op_rval__293("=","true",";","return") 
                    } else {
                        return [__array_op_rval__293,"=","true",";","return"]
                    }
                })()
            };
            compile_return=async function(tokens,ctx) {
                let acc;
                let return_val_reference;
                let return_value;
                let cmp_rec;
                acc=[];
                return_val_reference=await gen_temp_name("return");
                return_value=null;
                cmp_rec=await get_ctx(ctx,"__COMPLETION_SCOPE__");
                await (await Environment.get_global("assert"))(cmp_rec,"compiler error: compile_return: no completion scope record found");
                if (check_true (await is_block_ques_((tokens && tokens["1"] && tokens["1"]["val"])))){
                    {
                        (acc).push(["let"," ",return_val_reference,"=",await (async function(){
                             return await compile((tokens && tokens["1"] && tokens["1"]["val"]),ctx) 
                        })(),";"]);
                        (acc).push(await (async function(){
                             return [{
                                completion:"return"
                            },"return"," ",return_val_reference,";"] 
                        })())
                    }
                } else {
                    {
                        await (async function() {
                            let __for_body__296=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__297=[],__elements__295=["return"," ",await (async function(){
                                 return await compile((tokens && tokens["1"]),ctx) 
                            })(),";"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__294 in __elements__295) {
                                __array__297.push(await __for_body__296(__elements__295[__iter__294]));
                                if(__BREAK__FLAG__) {
                                     __array__297.pop();
                                    break;
                                    
                                }
                            }return __array__297;
                             
                        })()
                    }
                };
                ((cmp_rec && cmp_rec["completion_records"])).push({
                    block_id:(ctx && ctx["block_id"]),block_step:(ctx && ctx["block_step"]),type:"return",stmt:await last(acc)
                });
                return acc
            };
            apply_log=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    return log
                } else {
                    return await defclog({
                        prefix:"compile_apply",background:"sienna",color:"white"
                    })
                }
            })();
            compile_apply=async function(tokens,ctx) {
                let acc;
                let fn_ref;
                let complex_ques_;
                let args_ref;
                let function_ref;
                let target_argument_ref;
                let target_arg;
                let ctype;
                let preceding_arg_ref;
                let preamble;
                let requires_await;
                let compiled_fun_resolver;
                let args;
                acc=[];
                fn_ref=(tokens && tokens["1"]);
                complex_ques_=false;
                args_ref=await gen_temp_name("apply_args");
                function_ref=await gen_temp_name("apply_fn");
                target_argument_ref=null;
                target_arg=null;
                ctype=null;
                preceding_arg_ref=null;
                preamble=await calling_preamble(ctx);
                requires_await=false;
                ctx=await (async function(){
                     return await new_ctx(ctx) 
                })();
                compiled_fun_resolver=null;
                args=await tokens["slice"].call(tokens,2);
                ;
                await set_new_completion_scope(ctx);
                if (check_true ((args&& ((args && args.length)===1)))){
                    {
                        args=await first(args)
                    }
                };
                function_ref=await compile_wrapper_fn(fn_ref,ctx);
                if (check_true ((fn_ref && fn_ref["ref"]))){
                    {
                        ctype=await get_declaration_details(ctx,(fn_ref && fn_ref["name"]))
                    }
                };
                if (check_true ((ctype && ctype["value"]) instanceof Function)){
                    {
                        requires_await=true
                    }
                };
                if (check_true ((args instanceof Array))){
                    {
                        target_argument_ref=await gen_temp_name("target_arg");
                        target_arg=(args).pop();
                        await (async function() {
                            let __for_body__300=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__301=[],__elements__299=["let"," ",target_argument_ref,"=","[]",".concat","(",await (async function(){
                                 return await compile(target_arg,ctx) 
                            })(),")",";"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__298 in __elements__299) {
                                __array__301.push(await __for_body__300(__elements__299[__iter__298]));
                                if(__BREAK__FLAG__) {
                                     __array__301.pop();
                                    break;
                                    
                                }
                            }return __array__301;
                             
                        })();
                        await (async function() {
                            let __for_body__304=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__305=[],__elements__303=["if","(","!",target_argument_ref," ","instanceof"," ","Array",")","{","throw"," ","new"," ","TypeError","(","\"Invalid final argument to apply - an array is required\"",")","}"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__302 in __elements__303) {
                                __array__305.push(await __for_body__304(__elements__303[__iter__302]));
                                if(__BREAK__FLAG__) {
                                     __array__305.pop();
                                    break;
                                    
                                }
                            }return __array__305;
                             
                        })();
                        await (async function() {
                            let __for_body__308=async function(token) {
                                preceding_arg_ref=await gen_temp_name("pre_arg");
                                if (check_true (await is_form_ques_(token))){
                                    {
                                        await (async function() {
                                            let __for_body__312=async function(t) {
                                                return (acc).push(t)
                                            };
                                            let __array__313=[],__elements__311=["let"," ",preceding_arg_ref,"=",await compile_wrapper_fn(token,ctx),";"];
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__310 in __elements__311) {
                                                __array__313.push(await __for_body__312(__elements__311[__iter__310]));
                                                if(__BREAK__FLAG__) {
                                                     __array__313.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__313;
                                             
                                        })()
                                    }
                                } else {
                                    preceding_arg_ref=await compile_wrapper_fn(token,ctx)
                                };
                                return (acc).push(await (async function(){
                                    let __array_op_rval__314=target_argument_ref;
                                     if (__array_op_rval__314 instanceof Function){
                                        return await __array_op_rval__314(".unshift","(",preceding_arg_ref,")",";") 
                                    } else {
                                        return [__array_op_rval__314,".unshift","(",preceding_arg_ref,")",";"]
                                    }
                                })())
                            };
                            let __array__309=[],__elements__307=args;
                            let __BREAK__FLAG__=false;
                            for(let __iter__306 in __elements__307) {
                                __array__309.push(await __for_body__308(__elements__307[__iter__306]));
                                if(__BREAK__FLAG__) {
                                     __array__309.pop();
                                    break;
                                    
                                }
                            }return __array__309;
                             
                        })();
                        await (async function() {
                            let __for_body__317=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__318=[],__elements__316=["return"," ","(",function_ref,")",".","apply","(","this",",",target_argument_ref,")"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__315 in __elements__316) {
                                __array__318.push(await __for_body__317(__elements__316[__iter__315]));
                                if(__BREAK__FLAG__) {
                                     __array__318.pop();
                                    break;
                                    
                                }
                            }return __array__318;
                             
                        })()
                    }
                } else {
                    {
                        if (check_true (await is_form_ques_(args))){
                            {
                                await (async function() {
                                    let __for_body__321=async function(t) {
                                        return (acc).push(t)
                                    };
                                    let __array__322=[],__elements__320=["let"," ",args_ref,"=",await compile_wrapper_fn((args && args["val"]),ctx),";"];
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__319 in __elements__320) {
                                        __array__322.push(await __for_body__321(__elements__320[__iter__319]));
                                        if(__BREAK__FLAG__) {
                                             __array__322.pop();
                                            break;
                                            
                                        }
                                    }return __array__322;
                                     
                                })();
                                complex_ques_=true
                            }
                        };
                        await (async function() {
                            let __for_body__325=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__326=[],__elements__324=["return"," ","("," ",function_ref,")",".","apply","(","this"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__323 in __elements__324) {
                                __array__326.push(await __for_body__325(__elements__324[__iter__323]));
                                if(__BREAK__FLAG__) {
                                     __array__326.pop();
                                    break;
                                    
                                }
                            }return __array__326;
                             
                        })();
                        if (check_true (args)){
                            {
                                (acc).push(",");
                                if (check_true (complex_ques_)){
                                    (acc).push(args_ref)
                                } else {
                                    (acc).push(await compile_wrapper_fn(args,ctx))
                                }
                            }
                        };
                        (acc).push(")")
                    }
                };
                return [(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()","{",acc,"}",")","()"]
            };
            compile_call=async function(tokens,ctx) {
                let preamble;
                let dbg_level;
                let simple_target_ques_;
                let simple_method_ques_;
                let compiled;
                preamble=await calling_preamble(ctx);
                dbg_level=await debug_level(ctx);
                simple_target_ques_=await (async function(){
                    if (check_true (((dbg_level===0)&& ((tokens && tokens["1"] && tokens["1"]["ref"])===true)))){
                        return true
                    } else {
                        return false
                    }
                })();
                simple_method_ques_=await (async function(){
                    if (check_true (((tokens && tokens["2"] && tokens["2"]["type"])==="literal"))){
                        return true
                    } else {
                        return false
                    }
                })();
                ctx=ctx;
                compiled=null;
                ;
                compiled=await (async function(){
                     return await async function(){
                        if (check_true ((simple_target_ques_&& simple_method_ques_))) {
                            return await compile_call_inner(tokens,ctx,{
                                type:0,preamble:preamble
                            })
                        } else if (check_true (simple_target_ques_)) {
                            return await compile_call_inner(tokens,ctx,{
                                type:0,preamble:preamble
                            })
                        } else {
                            {
                                ctx=await (async function(){
                                     return await new_ctx(ctx) 
                                })();
                                await set_new_completion_scope(ctx);
                                if (check_true ((dbg_level===0))){
                                    return [(preamble && preamble["2"]),(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{",await compile_call_inner(tokens,ctx,{
                                        type:2,preamble:preamble,debug_level:dbg_level
                                    })," ","}",")","()"]
                                } else {
                                    return [(preamble && preamble["2"]),(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{","try","{",await compile_call_inner(tokens,ctx,{
                                        type:2,preamble:preamble,debug_level:dbg_level
                                    })," ","} catch (e) { Environment.get_global(\"log_error\",console.error)(\"call: \"+e.message, ",await JSON.stringify(await source_from_tokens(tokens,expanded_tree)),"); throw e; }","}",")","()"]
                                }
                            }
                        }
                    } () 
                })();
                return compiled
            };
            compile_call_inner=async function(tokens,ctx,opts) {
                let acc;
                let target;
                let idx;
                let preamble;
                let add_args;
                let method;
                acc=[];
                target=null;
                idx=-1;
                preamble=(opts && opts["preamble"]);
                add_args=async function() {
                    return await (async function() {
                        let __for_body__329=async function(token) {
                            (acc).push(",");
                            return (acc).push(await compile_wrapper_fn(token,ctx))
                        };
                        let __array__330=[],__elements__328=await tokens["slice"].call(tokens,3);
                        let __BREAK__FLAG__=false;
                        for(let __iter__327 in __elements__328) {
                            __array__330.push(await __for_body__329(__elements__328[__iter__327]));
                            if(__BREAK__FLAG__) {
                                 __array__330.pop();
                                break;
                                
                            }
                        }return __array__330;
                         
                    })()
                };
                method=null;
                if (check_true (((tokens && tokens.length)<3))){
                    {
                        throw new SyntaxError(("call: missing arguments, requires at least 2"));
                        
                    }
                };
                target=await compile_wrapper_fn((tokens && tokens["1"]),ctx);
                method=await compile_wrapper_fn((tokens && tokens["2"]),ctx);
                await async function(){
                    if (check_true ((((opts && opts["type"])===0)|| ((opts && opts["type"])===1)))) {
                        {
                            return await async function(){
                                if (check_true (((tokens && tokens.length)===3))) {
                                    return await (async function() {
                                        let __for_body__333=async function(t) {
                                            return (acc).push(t)
                                        };
                                        let __array__334=[],__elements__332=await (async function(){
                                            let __array_op_rval__335=(preamble && preamble["0"]);
                                             if (__array_op_rval__335 instanceof Function){
                                                return await __array_op_rval__335(" ",target,"[",method,"]","()") 
                                            } else {
                                                return [__array_op_rval__335," ",target,"[",method,"]","()"]
                                            }
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__331 in __elements__332) {
                                            __array__334.push(await __for_body__333(__elements__332[__iter__331]));
                                            if(__BREAK__FLAG__) {
                                                 __array__334.pop();
                                                break;
                                                
                                            }
                                        }return __array__334;
                                         
                                    })()
                                } else {
                                    {
                                        await (async function() {
                                            let __for_body__338=async function(t) {
                                                return (acc).push(t)
                                            };
                                            let __array__339=[],__elements__337=await (async function(){
                                                let __array_op_rval__340=(preamble && preamble["0"]);
                                                 if (__array_op_rval__340 instanceof Function){
                                                    return await __array_op_rval__340(" ",target,"[",method,"]",".call","(",target) 
                                                } else {
                                                    return [__array_op_rval__340," ",target,"[",method,"]",".call","(",target]
                                                }
                                            })();
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__336 in __elements__337) {
                                                __array__339.push(await __for_body__338(__elements__337[__iter__336]));
                                                if(__BREAK__FLAG__) {
                                                     __array__339.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__339;
                                             
                                        })();
                                        await add_args();
                                        return (acc).push(")")
                                    }
                                }
                            } ()
                        }
                    } else if (check_true (((opts && opts["type"])===2))) {
                        {
                            await (async function() {
                                let __for_body__343=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__344=[],__elements__342=["{"," ","let"," ","__call_target__","=",target,","," ","__call_method__","=",method,";"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__341 in __elements__342) {
                                    __array__344.push(await __for_body__343(__elements__342[__iter__341]));
                                    if(__BREAK__FLAG__) {
                                         __array__344.pop();
                                        break;
                                        
                                    }
                                }return __array__344;
                                 
                            })();
                            await async function(){
                                if (check_true (((tokens && tokens.length)===3))) {
                                    return await (async function() {
                                        let __for_body__347=async function(t) {
                                            return (acc).push(t)
                                        };
                                        let __array__348=[],__elements__346=["return"," ",(preamble && preamble["0"])," ","__call_target__","[","__call_method__","]","()"];
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__345 in __elements__346) {
                                            __array__348.push(await __for_body__347(__elements__346[__iter__345]));
                                            if(__BREAK__FLAG__) {
                                                 __array__348.pop();
                                                break;
                                                
                                            }
                                        }return __array__348;
                                         
                                    })()
                                } else {
                                    {
                                        await (async function() {
                                            let __for_body__351=async function(t) {
                                                return (acc).push(t)
                                            };
                                            let __array__352=[],__elements__350=["return"," ",(preamble && preamble["0"])," ","__call_target__","[","__call_method__","]",".","call","(","__call_target__"];
                                            let __BREAK__FLAG__=false;
                                            for(let __iter__349 in __elements__350) {
                                                __array__352.push(await __for_body__351(__elements__350[__iter__349]));
                                                if(__BREAK__FLAG__) {
                                                     __array__352.pop();
                                                    break;
                                                    
                                                }
                                            }return __array__352;
                                             
                                        })();
                                        await add_args();
                                        (acc).push(")")
                                    }
                                }
                            } ();
                            (acc).push("}")
                        }
                    }
                } ();
                return acc
            };
            check_needs_wrap=async function(stmts) {
                let fst;
                fst=(((stmts instanceof Array)&& await first(stmts)&& (await first(stmts) instanceof Object)&& await not(await (async function(){
                    let __targ__353=await first(stmts);
                    if (__targ__353){
                         return(__targ__353)["ctype"]
                    } 
                })() instanceof Function)&& await (async function(){
                    let __targ__354=await first(stmts);
                    if (__targ__354){
                         return(__targ__354)["ctype"]
                    } 
                })()&& await (async function(){
                     return await async function(){
                        if (check_true ((await (async function(){
                            let __targ__355=await first(stmts);
                            if (__targ__355){
                                 return(__targ__355)["ctype"]
                            } 
                        })() instanceof String || typeof await (async function(){
                            let __targ__355=await first(stmts);
                            if (__targ__355){
                                 return(__targ__355)["ctype"]
                            } 
                        })()==='string'))) {
                            return await (async function(){
                                let __targ__356=await first(stmts);
                                if (__targ__356){
                                     return(__targ__356)["ctype"]
                                } 
                            })()
                        } else {
                            return await sub_type(await (async function(){
                                let __targ__357=await first(stmts);
                                if (__targ__357){
                                     return(__targ__357)["ctype"]
                                } 
                            })())
                        }
                    } () 
                })())|| "");
                await console.warn("DEPRECATION: check_needs_wrap called: ",stmts);
                return await async function(){
                    if (check_true (await contains_ques_("block",fst))) {
                        return true
                    } else {
                        return false
                    }
                } ()
            };
            compile_import=async function(tokens,ctx) {
                let symbol_tokens;
                let __symbols__358= async function(){
                    return []
                };
                let from_tokens;
                let from_place;
                let acc;
                {
                    symbol_tokens=(tokens && tokens["1"]);
                    let symbols=await __symbols__358();
                    ;
                    from_tokens=null;
                    from_place=null;
                    acc=[];
                    if (check_true (((tokens && tokens.length)<3))){
                        throw new SyntaxError("import requires exactly two arguments");
                        
                    };
                    symbol_tokens=(tokens && tokens["1"]);
                    from_tokens=(tokens && tokens["2"]);
                    from_place=await (async function(){
                         return await compile(from_tokens,ctx) 
                    })();
                    (acc).push({
                        ctype:"statement",meta:{
                            imported_from:from_place
                        }
                    });
                    (acc).push("import");
                    (acc).push(" ");
                    await async function(){
                        if (check_true (((symbol_tokens && symbol_tokens["val"]) instanceof Array))) {
                            {
                                await (async function() {
                                    let __for_body__361=async function(s) {
                                        return (symbols).push((s && s.name))
                                    };
                                    let __array__362=[],__elements__360=(symbol_tokens && symbol_tokens["val"]);
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__359 in __elements__360) {
                                        __array__362.push(await __for_body__361(__elements__360[__iter__359]));
                                        if(__BREAK__FLAG__) {
                                             __array__362.pop();
                                            break;
                                            
                                        }
                                    }return __array__362;
                                     
                                })();
                                return await (async function() {
                                    let __for_body__365=async function(t) {
                                        return (acc).push(t)
                                    };
                                    let __array__366=[],__elements__364=await flatten(["{"," ",symbols," ","}"," ","from"," ",from_place]);
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__363 in __elements__364) {
                                        __array__366.push(await __for_body__365(__elements__364[__iter__363]));
                                        if(__BREAK__FLAG__) {
                                             __array__366.pop();
                                            break;
                                            
                                        }
                                    }return __array__366;
                                     
                                })()
                            }
                        } else {
                            throw new SyntaxError("import requires an array of imported symbols as a second argument");
                            
                        }
                    } ();
                    return acc
                }
            };
            compile_dynamic_import=async function(tokens,ctx) {
                let from_tokens;
                let preamble;
                let from_place;
                let can_be_static;
                let metaval;
                let imported_from;
                let acc;
                from_tokens=null;
                preamble=await calling_preamble(ctx);
                from_place=null;
                can_be_static=false;
                metaval=null;
                imported_from=null;
                acc=[];
                ;
                from_tokens=(tokens && tokens["1"]);
                from_place=await compile_wrapper_fn(from_tokens,ctx);
                imported_from=await (async function(){
                    if (check_true ((from_place instanceof Array))){
                        return (from_place && from_place["1"])
                    } else {
                        return from_place
                    }
                })();
                if (check_true (((imported_from instanceof String || typeof imported_from==='string')&& await starts_with_ques_("\"",imported_from)&& await (await Environment.get_global("ends_with?"))("\"",imported_from)))){
                    {
                        can_be_static=true;
                        imported_from=await imported_from["substr"].call(imported_from,1,((imported_from && imported_from.length)- 2))
                    }
                };
                await async function(){
                    external_dependencies[imported_from]=true;
                    return external_dependencies;
                    
                }();
                metaval=await (async function(){
                    if (check_true (can_be_static)){
                        return {
                            initializer:await (async function(){
                                 return ["=:javascript","undefined"] 
                            })()
                        }
                    } else {
                        return new Object()
                    }
                })();
                (acc).push({
                    ctype:"statement",meta:metaval
                });
                await (async function() {
                    let __for_body__370=async function(t) {
                        return (acc).push(t)
                    };
                    let __array__371=[],__elements__369=await flatten([(preamble && preamble["0"])," ","import"," ","(",from_place,")"]);
                    let __BREAK__FLAG__=false;
                    for(let __iter__368 in __elements__369) {
                        __array__371.push(await __for_body__370(__elements__369[__iter__368]));
                        if(__BREAK__FLAG__) {
                             __array__371.pop();
                            break;
                            
                        }
                    }return __array__371;
                     
                })();
                return acc
            };
            compile_javascript=async function(tokens,ctx) {
                let acc;
                let text;
                acc=await (async function(){
                     return [{
                        ctype:"__JS__"
                    }] 
                })();
                text=null;
                await (async function() {
                    let __for_body__374=async function(t) {
                        return await async function(){
                            if (check_true ((t && t["ref"]))) {
                                return (acc).push((t && t.name))
                            } else if (check_true (((t && t["val"]) instanceof Array))) {
                                return (acc).push(await (async function(){
                                     return await compile(t,ctx) 
                                })())
                            } else {
                                return (acc).push((t && t["val"]))
                            }
                        } ()
                    };
                    let __array__375=[],__elements__373=(await (await Environment.get_global("rest"))(tokens)|| []);
                    let __BREAK__FLAG__=false;
                    for(let __iter__372 in __elements__373) {
                        __array__375.push(await __for_body__374(__elements__373[__iter__372]));
                        if(__BREAK__FLAG__) {
                             __array__375.pop();
                            break;
                            
                        }
                    }return __array__375;
                     
                })();
                return acc
            };
            compile_set_global=async function(tokens,ctx,opts) {
                let target;
                let wrap_as_function_ques_;
                let global_dependencies;
                let __external_dependencies__376= async function(){
                    return null
                };
                let preamble;
                let source_meta;
                let acc;
                let clog;
                let metavalue;
                let assignment_value;
                {
                    target=(tokens && tokens["1"] && tokens["1"]["name"]);
                    wrap_as_function_ques_=null;
                    ctx=await (async function(){
                         return await new_ctx(ctx) 
                    })();
                    global_dependencies=null;
                    let external_dependencies=await __external_dependencies__376();
                    ;
                    preamble=await calling_preamble(ctx);
                    source_meta=null;
                    acc=null;
                    clog=await (async function(){
                        if (check_true ((opts && opts["quiet_mode"]))){
                            return log
                        } else {
                            return await defclog({
                                prefix:"compile_set_global",color:"blue",background:"#205020"
                            })
                        }
                    })();
                    metavalue=null;
                    assignment_value=null;
                    ;
                    await async function(){
                        if (check_true ((null==(tokens && tokens["1"])))) {
                            throw new SyntaxError("set global directive missing assignment target and assignment value");
                            
                        } else if (check_true ((null==(tokens && tokens["2"])))) {
                            throw new SyntaxError("set global directive missing assignment value");
                            
                        }
                    } ();
                    has_lisp_globals=true;
                    await set_ctx(ctx,"__GLOBALS__",new Set());
                    await async function(){
                        let __target_obj__377=(root_ctx && root_ctx["defined_lisp_globals"]);
                        __target_obj__377[target]=AsyncFunction;
                        return __target_obj__377;
                        
                    }();
                    assignment_value=await (async function(){
                        return await compile_wrapper_fn((tokens && tokens["2"]),ctx)
                    })();
                    global_dependencies=await (async function(){
                         return await (await Environment.get_global("to_array"))(await get_ctx(ctx,"__GLOBALS__")) 
                    })();
                    external_dependencies=await (async function(){
                         return await (await Environment.get_global("to_array"))(await get_ctx(ctx,"__EXTERNALS__")) 
                    })();
                    if (check_true (true)){
                        {
                            await async function(){
                                if (check_true ((null==(tokens && tokens["3"])))) {
                                    return (tokens).push(await tokenize({
                                        requires:global_dependencies,externals:external_dependencies,source_name:source_name
                                    },ctx))
                                } else if (check_true (((tokens && tokens["3"] && tokens["3"]["val"] && tokens["3"]["val"]["val"] && tokens["3"]["val"]["val"]["1"]) instanceof Object))) {
                                    {
                                        await async function(){
                                            let __target_obj__378=(tokens && tokens["3"] && tokens["3"]["val"] && tokens["3"]["val"]["val"] && tokens["3"]["val"]["val"]["1"]);
                                            __target_obj__378["requires"]=global_dependencies;
                                            return __target_obj__378;
                                            
                                        }();
                                        await async function(){
                                            let __target_obj__379=(tokens && tokens["3"] && tokens["3"]["val"] && tokens["3"]["val"]["val"] && tokens["3"]["val"]["val"]["1"]);
                                            __target_obj__379["externals"]=external_dependencies;
                                            return __target_obj__379;
                                            
                                        }();
                                        await async function(){
                                            let __target_obj__380=(tokens && tokens["3"] && tokens["3"]["val"] && tokens["3"]["val"]["val"] && tokens["3"]["val"]["val"]["1"]);
                                            __target_obj__380["source_name"]=source_name;
                                            return __target_obj__380;
                                            
                                        }()
                                    }
                                } else if (check_true ((((tokens && tokens["3"] && tokens["3"]["val"]) instanceof Array)&& ((tokens && tokens["3"] && tokens["3"]["type"])==="objlit")))) {
                                    {
                                        if (check_true (((global_dependencies && global_dependencies.length)>0))){
                                            {
                                                global_dependencies=await tokenize({
                                                    requires:global_dependencies
                                                },ctx);
                                                ((tokens && tokens["3"] && tokens["3"]["val"])).push((global_dependencies && global_dependencies["val"] && global_dependencies["val"]["0"]))
                                            }
                                        };
                                        if (check_true (((external_dependencies && external_dependencies.length)>0))){
                                            {
                                                external_dependencies=await tokenize({
                                                    requires:external_dependencies
                                                },ctx);
                                                ((tokens && tokens["3"] && tokens["3"]["val"])).push((external_dependencies && external_dependencies["val"] && external_dependencies["val"]["0"]))
                                            }
                                        };
                                        source_meta=await tokenize({
                                            source_name:source_name
                                        },ctx);
                                        ((tokens && tokens["3"] && tokens["3"]["val"])).push((source_meta && source_meta["val"] && source_meta["val"]["0"]))
                                    }
                                }
                            } ()
                        }
                    };
                    if (check_true ((tokens && tokens["3"]))){
                        {
                            metavalue=await (async function(){
                                if (check_true (await is_complex_ques_((tokens && tokens["3"])))){
                                    return await compile_wrapper_fn((tokens && tokens["3"]),ctx)
                                } else {
                                    return await compile((tokens && tokens["3"]),ctx)
                                }
                            })()
                        }
                    };
                    await async function(){
                        if (check_true ((((assignment_value && assignment_value["0"]) instanceof Object)&& (assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])))) {
                            {
                                if (check_true ((assignment_value && assignment_value["0"] && assignment_value["0"]["meta"]))){
                                    {
                                        if (check_true (await not(metavalue))){
                                            {
                                                metavalue=await quote_tree((assignment_value && assignment_value["0"] && assignment_value["0"]["meta"]),ctx)
                                            }
                                        }
                                    }
                                };
                                return await async function(){
                                    let __target_obj__381=(root_ctx && root_ctx["defined_lisp_globals"]);
                                    __target_obj__381[target]=await (async function(){
                                         return await async function(){
                                            if (check_true (((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])==="Function"))) {
                                                return Function
                                            } else if (check_true (((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])==="AsyncFunction"))) {
                                                return AsyncFunction
                                            } else if (check_true (((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])==="Number"))) {
                                                return NumberType
                                            } else if (check_true (((assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])==="expression"))) {
                                                return Expression
                                            } else {
                                                return (assignment_value && assignment_value["0"] && assignment_value["0"]["ctype"])
                                            }
                                        } () 
                                    })();
                                    return __target_obj__381;
                                    
                                }()
                            }
                        } else {
                            {
                                if (check_true (((assignment_value instanceof Array)&& ((assignment_value && assignment_value["0"])==="await")))){
                                    {
                                        await async function(){
                                            let __target_obj__382=(root_ctx && root_ctx["defined_lisp_globals"]);
                                            __target_obj__382[target]=AsyncFunction;
                                            return __target_obj__382;
                                            
                                        }();
                                        await set_ambiguous(root_ctx,target)
                                    }
                                } else {
                                    await async function(){
                                        let __target_obj__383=(root_ctx && root_ctx["defined_lisp_globals"]);
                                        __target_obj__383[target]=assignment_value;
                                        return __target_obj__383;
                                        
                                    }()
                                }
                            }
                        }
                    } ();
                    if (check_true (await verbosity(ctx))){
                        {
                            await clog("target: ",await (await Environment.get_global("as_lisp"))(target));
                            await clog("assignment_value: ",await (await Environment.get_global("as_lisp"))(assignment_value))
                        }
                    };
                    acc=await (async function(){
                         return [{
                            ctype:"statement"
                        },await (async function(){
                            if (check_true (((Function===await (async function(){
                                let __targ__384=(root_ctx && root_ctx["defined_lisp_globals"]);
                                if (__targ__384){
                                     return(__targ__384)[target]
                                } 
                            })())|| await in_sync_ques_(ctx)))){
                                return ""
                            } else {
                                return "await"
                            }
                        })()," ","Environment",".","set_global","(","","\"",(tokens && tokens["1"] && tokens["1"]["name"]),"\"",",",assignment_value,await (async function(){
                            if (check_true ((metavalue|| (opts && opts["constant"])))){
                                return ","
                            } else {
                                return ""
                            }
                        })(),await (async function(){
                            if (check_true (metavalue)){
                                return metavalue
                            } else {
                                if (check_true ((opts && opts["constant"]))){
                                    return "null"
                                } else {
                                    return ""
                                }
                            }
                        })(),await (async function(){
                            if (check_true ((opts && opts["constant"]))){
                                return ","
                            } else {
                                return ""
                            }
                        })(),await (async function(){
                            if (check_true ((opts && opts["constant"]))){
                                return "true"
                            } else {
                                return ""
                            }
                        })(),")"] 
                    })();
                    return acc
                }
            };
            is_token_ques_=async function(t) {
                return (((t instanceof Object)&& (t && t["__token__"]))|| ((t instanceof Array)&& ((t && t["0"]) instanceof Object)&& (t && t["0"] && t["0"]["__token__"])))
            };
            compile_quote=async function(lisp_struct,ctx) {
                let acc;
                acc=[];
                ctx=await (async function(){
                     return await new_ctx(ctx) 
                })();
                acc=await compile_quotem(lisp_struct,ctx);
                return acc
            };
            compile_quotel=async function(lisp_struct,ctx) {
                let acc;
                acc=[];
                acc=await JSON.stringify((lisp_struct && lisp_struct["1"]));
                return await (async function(){
                    let __array_op_rval__385=acc;
                     if (__array_op_rval__385 instanceof Function){
                        return await __array_op_rval__385() 
                    } else {
                        return [__array_op_rval__385]
                    }
                })()
            };
            wrap_and_run=async function(js_code,ctx,run_opts) {
                let __assembly__386= async function(){
                    return null
                };
                let result;
                let fst;
                let ctype;
                let comp_meta;
                let needs_braces_ques_;
                let in_quotem;
                let run_log;
                let needs_return_ques_;
                let assembled;
                {
                    let assembly=await __assembly__386();
                    ;
                    result=null;
                    fst=null;
                    ctype=null;
                    comp_meta=null;
                    needs_braces_ques_=false;
                    in_quotem=await get_ctx(ctx,"__IN_QUOTEM__");
                    run_log=await (async function(){
                        if (check_true ((opts && opts["quiet_mode"]))){
                            return log
                        } else {
                            return await defclog({
                                prefix:"wrap_and_run",background:"#703030",color:"white"
                            })
                        }
                    })();
                    needs_return_ques_=await (async function(){
                        ctype=await (async function(){
                            if (check_true (((js_code instanceof Array)&& await first(js_code)&& (await first(js_code) instanceof Object)&& await (async function(){
                                let __targ__387=await first(js_code);
                                if (__targ__387){
                                     return(__targ__387)["ctype"]
                                } 
                            })()))){
                                return await (async function(){
                                    let __targ__388=await first(js_code);
                                    if (__targ__388){
                                         return(__targ__388)["ctype"]
                                    } 
                                })()
                            }
                        })();
                        if (check_true (((typeof ctype==="object")&& await not((ctype instanceof Object))))){
                            fst=""
                        } else {
                            fst=(""+ (ctype|| ""))
                        };
                        if (check_true (fst instanceof Function)){
                            {
                                fst=await sub_type(fst)
                            }
                        };
                        return await async function(){
                            if (check_true (await contains_ques_("block",fst))) {
                                {
                                    if (check_true ((fst==="ifblock"))){
                                        needs_braces_ques_=true
                                    } else {
                                        needs_braces_ques_=false
                                    };
                                    return false
                                }
                            } else if (check_true ((await first(js_code)==="throw"))) {
                                {
                                    needs_braces_ques_=false;
                                    return false
                                }
                            } else {
                                {
                                    needs_braces_ques_=true;
                                    return true
                                }
                            }
                        } ()
                    })();
                    assembled=null;
                    ;
                    assembled=js_code;
                    try {
                        if (check_true ((target_namespace&& ((assembled && assembled["0"]) instanceof Object)&& await not((target_namespace===(Environment && Environment["namespace"])))))){
                            {
                                comp_meta=await first(assembled);
                                await async function(){
                                    comp_meta["namespace"]=target_namespace;
                                    return comp_meta;
                                    
                                }();
                                if (check_true ((await verbosity(ctx)&& (comp_meta && comp_meta["namespace"])))){
                                    {
                                        await run_log("specified namespace: ",(comp_meta && comp_meta["namespace"]))
                                    }
                                };
                                result=await Environment["evaluate_local"].call(Environment,await (async function(){
                                    let __array_op_rval__391=comp_meta;
                                     if (__array_op_rval__391 instanceof Function){
                                        return await __array_op_rval__391(await assemble_output(assembled)) 
                                    } else {
                                        return [__array_op_rval__391,await assemble_output(assembled)]
                                    }
                                })(),ctx,{
                                    compiled_source:true
                                });
                                if (check_true (await verbosity(ctx))){
                                    {
                                        await run_log("<- ",result)
                                    }
                                };
                                return result
                            }
                        } else {
                            {
                                assembled=await assemble_output(assembled);
                                assembled=await add(await (async function(){
                                    if (check_true (needs_braces_ques_)){
                                        return "{"
                                    } else {
                                        return ""
                                    }
                                })(),await (async function(){
                                    if (check_true (needs_return_ques_)){
                                        return " return "
                                    } else {
                                        return ""
                                    }
                                })(),assembled,await (async function(){
                                    if (check_true (needs_braces_ques_)){
                                        return "}"
                                    } else {
                                        return ""
                                    }
                                })());
                                if (check_true (await verbosity(ctx))){
                                    {
                                        await run_log("assembled: ",assembled)
                                    }
                                };
                                try {
                                    assembly=new AsyncFunction("Environment",assembled)
                                } catch (__exception__392) {
                                    if (__exception__392 instanceof Error) {
                                        let e=__exception__392;
                                        {
                                            {
                                                await console.error("compiler: wrap_and_run: caught error on constructing new async_function");
                                                await console.error("compiler: wrap_and_run: ",assembled);
                                                throw e;
                                                
                                            }
                                        }
                                    }
                                };
                                if (check_true ((run_opts && run_opts["bind_mode"]))){
                                    {
                                        assembly=await (await Environment.get_global("bind_function"))(assembly,Environment)
                                    }
                                };
                                result=await (async function(){
                                    let __array_op_rval__393=assembly;
                                     if (__array_op_rval__393 instanceof Function){
                                        return await __array_op_rval__393(Environment) 
                                    } else {
                                        return [__array_op_rval__393,Environment]
                                    }
                                })();
                                if (check_true (await verbosity(ctx))){
                                    {
                                        await run_log("<- ",result)
                                    }
                                };
                                return result
                            }
                        }
                    } catch (__exception__389) {
                        if (__exception__389 instanceof Error) {
                            let e=__exception__389;
                            {
                                {
                                    await console.log("compiler: wrap_and_run: caught error on evaluation: ",(e && e.message));
                                    if (check_true (await (await Environment.get_global("resolve_path"))(["context","scope","*on_compiler_eval_error*"],Environment) instanceof Function)){
                                        result=await (async function(){
                                             return [await (await Environment.get_global("resolve_path"))(["context","scope","*on_compiler_eval_error*"],Environment),e,assembled] 
                                        })()
                                    } else {
                                        throw e;
                                        
                                    };
                                    return result
                                }
                            }
                        }
                    }
                }
            };
            quote_tree=async function(lisp_tree,ctx,_acc) {
                let acc;
                let mode;
                let in_concat;
                let in_lambda_ques_;
                acc=(_acc|| []);
                mode=0;
                in_concat=false;
                in_lambda_ques_=false;
                await async function(){
                    if (check_true ((lisp_tree instanceof Array))) {
                        {
                            (acc).push("[");
                            await map(async function(elem,i,t) {
                                if (check_true ((mode===1))){
                                    {
                                        return mode=0
                                    }
                                } else {
                                    {
                                        await async function(){
                                            if (check_true ((("=:##"===elem)|| ("=:unquotem"===elem)))) {
                                                {
                                                    if (check_true (in_concat)){
                                                        (acc).push(await compile_wrapper_fn(await tokenize(await (async function(){
                                                             return [lisp_tree[await add(i,1)]] 
                                                        })(),ctx),ctx))
                                                    } else {
                                                        (acc).push(await compile_wrapper_fn(await tokenize(lisp_tree[await add(i,1)],ctx),ctx))
                                                    };
                                                    return mode=1
                                                }
                                            } else if (check_true (("=$,@"===elem))) {
                                                {
                                                    if (check_true (await not(in_concat))){
                                                        (acc).push("].concat(")
                                                    };
                                                    (acc).push(await compile_wrapper_fn(await tokenize(lisp_tree[await add(i,1)],ctx),ctx));
                                                    in_concat=true;
                                                    return mode=1
                                                }
                                            } else {
                                                {
                                                    if (check_true (in_concat)){
                                                        return await quote_tree(await (async function(){
                                                            let __array_op_rval__394=elem;
                                                             if (__array_op_rval__394 instanceof Function){
                                                                return await __array_op_rval__394() 
                                                            } else {
                                                                return [__array_op_rval__394]
                                                            }
                                                        })(),ctx,acc)
                                                    } else {
                                                        return await quote_tree(elem,ctx,acc)
                                                    }
                                                }
                                            }
                                        } ();
                                        if (check_true ((i<(t- 1)))){
                                            return (acc).push(",")
                                        }
                                    }
                                }
                            },lisp_tree);
                            if (check_true ((","===await last(acc)))){
                                (acc).pop()
                            };
                            if (check_true (in_concat)){
                                return (acc).push(")")
                            } else {
                                return (acc).push("]")
                            }
                        }
                    } else if (check_true ((lisp_tree instanceof Object))) {
                        {
                            (acc).push("{ ");
                            await map(async function(k,i,t) {
                                (acc).push(await JSON.stringify(k));
                                (acc).push(":");
                                await quote_tree(lisp_tree[k],ctx,acc);
                                if (check_true ((i<(t- 1)))){
                                    return (acc).push(",")
                                }
                            },await (await Environment.get_global("keys"))(lisp_tree));
                            (acc).push("}")
                        }
                    } else if (check_true ((lisp_tree instanceof String || typeof lisp_tree==='string'))) {
                        (acc).push(await JSON.stringify(lisp_tree))
                    } else if (check_true (await (async function(){
                         return await is_nil_ques_(lisp_tree) 
                    })())) {
                        (acc).push(await JSON.stringify(null))
                    } else if (check_true ((undefined===lisp_tree))) {
                        (acc).push(await JSON.stringify(undefined))
                    } else {
                        (acc).push(await JSON.stringify(lisp_tree))
                    }
                } ();
                return acc
            };
            quotem_log=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    return log
                } else {
                    return await defclog({
                        prefix:"compile_quotem",background:"#503090",color:"white"
                    })
                }
            })();
            compile_quotem=async function(lisp_struct,ctx) {
                let acc;
                let quoted_js;
                acc=[];
                ctx=await (async function(){
                     return await new_ctx(ctx) 
                })();
                quoted_js=null;
                await set_ctx(ctx,"__IN_QUOTEM__",true);
                if (check_true (await verbosity(ctx))){
                    {
                        await quotem_log("->",await (async function(){
                            if (check_true (await get_ctx(ctx,"__IN_LAMBDA__"))){
                                return "[IN LAMBDA]"
                            } else {
                                return ""
                            }
                        })(),await JSON.stringify((lisp_struct && lisp_struct["1"])))
                    }
                };
                if (check_true (await get_ctx(ctx,"__IN_LAMBDA__"))){
                    {
                        quoted_js=await quote_tree((lisp_struct && lisp_struct["1"]),ctx)
                    }
                } else {
                    quoted_js=await quote_tree((lisp_struct && lisp_struct["1"]),ctx)
                };
                if (check_true (await verbosity(ctx))){
                    {
                        await quotem_log("<-",await (await Environment.get_global("as_lisp"))(quoted_js))
                    }
                };
                return quoted_js
            };
            compile_unquotem=async function(lisp_struct,ctx) {
                let acc;
                acc=[];
                (acc).push(await (async function(){
                     return await compile((lisp_struct && lisp_struct["1"]),ctx) 
                })());
                return acc
            };
            eval_log=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    return log
                } else {
                    return await defclog({
                        prefix:"compile_eval",background:"#705030",color:"white"
                    })
                }
            })();
            compile_eval=async function(tokens,ctx) {
                let __assembly__395= async function(){
                    return null
                };
                let type_mark;
                let acc;
                let preamble;
                let result;
                let eval_opts;
                {
                    let assembly=await __assembly__395();
                    ;
                    type_mark=null;
                    acc=[];
                    preamble=await calling_preamble(ctx);
                    result=null;
                    eval_opts=null;
                    ctx=await (async function(){
                         return await new_ctx(ctx) 
                    })();
                    await set_new_completion_scope(ctx);
                    if (check_true ((tokens && tokens["2"]))){
                        {
                            eval_opts=await (async function(){
                                 return await compile((tokens && tokens["2"]),ctx) 
                            })()
                        }
                    };
                    assembly=await (async function(){
                         return await compile((tokens && tokens["1"]),ctx) 
                    })();
                    if (check_true (await verbosity(ctx))){
                        {
                            await eval_log("assembly:",await (async function(){
                                 return await clone(assembly) 
                            })())
                        }
                    };
                    has_lisp_globals=true;
                    result=["(","await"," ","Environment",".","eval","(",(preamble && preamble["0"])," ",(preamble && preamble["1"])," ","function","()",["{","return"," ",assembly,"}","()",",null",await (async function(){
                        if (check_true (eval_opts)){
                            return [", ",eval_opts]
                        } else {
                            return ""
                        }
                    })(),")",")"]];
                    return result
                }
            };
            compile_debug=async function(tokens,ctx) {
                return [{
                    ctype:"statement"
                },"debugger",";"]
            };
            compile_for_each=async function(tokens,ctx) {
                let preamble;
                preamble=await calling_preamble(ctx);
                ctx=await (async function(){
                     return await new_ctx(ctx) 
                })();
                ;
                await set_new_completion_scope(ctx);
                return await (async function(){
                    let __array_op_rval__396=(preamble && preamble["2"]);
                     if (__array_op_rval__396 instanceof Function){
                        return await __array_op_rval__396((preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{",await compile_for_each_inner(tokens,ctx,preamble)," ","}",")","()") 
                    } else {
                        return [__array_op_rval__396,(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{",await compile_for_each_inner(tokens,ctx,preamble)," ","}",")","()"]
                    }
                })()
            };
            compile_for_each_inner=async function(tokens,ctx,preamble) {
                let acc;
                let idx;
                let stmts;
                let idx_iter;
                let idx_iters;
                let element_list;
                let body_function_ref;
                let collector_ref;
                let prebuild;
                let for_args;
                let iterator_ref;
                let elements;
                let iter_count;
                let for_body;
                let body_is_block_ques_;
                acc=[];
                idx=0;
                stmts=[];
                idx_iter=await gen_temp_name("iter");
                idx_iters=[];
                element_list=await gen_temp_name("elements");
                body_function_ref=await gen_temp_name("for_body");
                collector_ref=await gen_temp_name("array");
                prebuild=[];
                for_args=(tokens && tokens["1"] && tokens["1"]["val"]);
                iterator_ref=(for_args && for_args["0"]);
                elements=await last(for_args);
                iter_count=await (async function(){
                    if (check_true (for_args)){
                        return ((for_args && for_args.length)- 1)
                    } else {
                        return 0
                    }
                })();
                for_body=(tokens && tokens["2"]);
                body_is_block_ques_=await is_block_ques_((for_body && for_body["val"]));
                if (check_true ((iter_count<1))){
                    {
                        throw new SyntaxError("Invalid for_each arguments");
                        
                    }
                };
                await (async function() {
                    let __for_body__399=async function(iter_idx) {
                        (idx_iters).push(for_args[iter_idx]);
                        return await set_ctx(ctx,await clean_quoted_reference(await (async function(){
                            let __targ__401=await last(idx_iters);
                            if (__targ__401){
                                 return(__targ__401)["name"]
                            } 
                        })()),ArgumentType)
                    };
                    let __array__400=[],__elements__398=await (await Environment.get_global("range"))(iter_count);
                    let __BREAK__FLAG__=false;
                    for(let __iter__397 in __elements__398) {
                        __array__400.push(await __for_body__399(__elements__398[__iter__397]));
                        if(__BREAK__FLAG__) {
                             __array__400.pop();
                            break;
                            
                        }
                    }return __array__400;
                     
                })();
                await set_ctx(ctx,collector_ref,ArgumentType);
                await set_ctx(ctx,"__LAMBDA_STEP__",-1);
                await set_ctx(ctx,element_list,"arg");
                if (check_true (await not(body_is_block_ques_))){
                    {
                        for_body=await make_do_block(for_body)
                    }
                };
                prebuild=await build_fn_with_assignment(body_function_ref,(for_body && for_body["val"]),idx_iters,ctx);
                await async function(){
                    ctx["return_last_value"]=true;
                    return ctx;
                    
                }();
                (acc).push(await (async function(){
                     return await compile(prebuild,ctx) 
                })());
                await (async function() {
                    let __for_body__405=async function(t) {
                        return (acc).push(t)
                    };
                    let __array__406=[],__elements__404=["let"," ",collector_ref,"=","[]",",",element_list,"=",await compile_wrapper_fn(elements,ctx),";"];
                    let __BREAK__FLAG__=false;
                    for(let __iter__403 in __elements__404) {
                        __array__406.push(await __for_body__405(__elements__404[__iter__403]));
                        if(__BREAK__FLAG__) {
                             __array__406.pop();
                            break;
                            
                        }
                    }return __array__406;
                     
                })();
                await (async function() {
                    let __for_body__409=async function(t) {
                        return (acc).push(t)
                    };
                    let __array__410=[],__elements__408=["let"," ",break_out,"=","false",";"];
                    let __BREAK__FLAG__=false;
                    for(let __iter__407 in __elements__408) {
                        __array__410.push(await __for_body__409(__elements__408[__iter__407]));
                        if(__BREAK__FLAG__) {
                             __array__410.pop();
                            break;
                            
                        }
                    }return __array__410;
                     
                })();
                if (check_true (await (await Environment.get_global("blank?"))((preamble && preamble["0"])))){
                    await set_ctx(ctx,body_function_ref,Function)
                } else {
                    await set_ctx(ctx,body_function_ref,AsyncFunction)
                };
                await async function(){
                    if (check_true ((((for_args && for_args.length)===2)&& await not(((for_args && for_args["1"]) instanceof Array))))) {
                        {
                            await set_ctx(ctx,idx_iter,NumberType);
                            await (async function() {
                                let __for_body__413=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__414=[],__elements__412=["for","(","let"," ",idx_iter," ","in"," ",element_list,")"," ","{"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__411 in __elements__412) {
                                    __array__414.push(await __for_body__413(__elements__412[__iter__411]));
                                    if(__BREAK__FLAG__) {
                                         __array__414.pop();
                                        break;
                                        
                                    }
                                }return __array__414;
                                 
                            })();
                            await (async function() {
                                let __for_body__417=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__418=[],__elements__416=await (async function(){
                                    let __array_op_rval__419=collector_ref;
                                     if (__array_op_rval__419 instanceof Function){
                                        return await __array_op_rval__419(".","push","(",(preamble && preamble["0"])," ",body_function_ref,"(",element_list,"[",idx_iter,"]",")",")",";") 
                                    } else {
                                        return [__array_op_rval__419,".","push","(",(preamble && preamble["0"])," ",body_function_ref,"(",element_list,"[",idx_iter,"]",")",")",";"]
                                    }
                                })();
                                let __BREAK__FLAG__=false;
                                for(let __iter__415 in __elements__416) {
                                    __array__418.push(await __for_body__417(__elements__416[__iter__415]));
                                    if(__BREAK__FLAG__) {
                                         __array__418.pop();
                                        break;
                                        
                                    }
                                }return __array__418;
                                 
                            })();
                            await (async function() {
                                let __for_body__422=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__423=[],__elements__421=["if","(",break_out,")"," ","{"," ",collector_ref,".","pop","()",";","break",";","}"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__420 in __elements__421) {
                                    __array__423.push(await __for_body__422(__elements__421[__iter__420]));
                                    if(__BREAK__FLAG__) {
                                         __array__423.pop();
                                        break;
                                        
                                    }
                                }return __array__423;
                                 
                            })();
                            return (acc).push("}")
                        }
                    }
                } ();
                (acc).push("return");
                (acc).push(" ");
                (acc).push(collector_ref);
                (acc).push(";");
                return acc
            };
            compile_while=async function(tokens,ctx) {
                let acc;
                let idx;
                let preamble;
                let test_condition;
                let complex_test_ques_;
                let test_condition_ref;
                let body;
                let body_ref;
                let prebuild;
                acc=[];
                idx=0;
                ctx=await (async function(){
                     return await new_ctx(ctx) 
                })();
                preamble=await calling_preamble(ctx);
                test_condition=(tokens && tokens["1"]);
                complex_test_ques_=await not((test_condition && test_condition["ref"]));
                test_condition_ref=await gen_temp_name("test_condition");
                body=(tokens && tokens["2"]);
                body_ref=await gen_temp_name("body_ref");
                prebuild=[];
                ;
                if (check_true (await verbosity(ctx))){
                    {
                        await console.log("compile_while: ",await source_from_tokens(tokens,expanded_tree))
                    }
                };
                await set_new_completion_scope(ctx);
                await set_ctx(ctx,break_out,true);
                if (check_true (complex_test_ques_)){
                    {
                        (prebuild).push(await (async function(){
                             return await compile(await build_fn_with_assignment(test_condition_ref,(test_condition && test_condition["val"]),null,ctx),ctx) 
                        })())
                    }
                };
                (prebuild).push(await (async function(){
                     return await compile(await build_fn_with_assignment(body_ref,(body && body["val"]),null,ctx),ctx) 
                })());
                await (async function() {
                    let __for_body__426=async function(t) {
                        return (prebuild).push(t)
                    };
                    let __array__427=[],__elements__425=["let"," ",break_out,"=","false",";"];
                    let __BREAK__FLAG__=false;
                    for(let __iter__424 in __elements__425) {
                        __array__427.push(await __for_body__426(__elements__425[__iter__424]));
                        if(__BREAK__FLAG__) {
                             __array__427.pop();
                            break;
                            
                        }
                    }return __array__427;
                     
                })();
                if (check_true (complex_test_ques_)){
                    await (async function() {
                        let __for_body__430=async function(t) {
                            return (prebuild).push(t)
                        };
                        let __array__431=[],__elements__429=["while","(",(preamble && preamble["0"])," ",test_condition_ref,"()",")"," ","{"," ",(preamble && preamble["0"])," ",body_ref,"()",";"," ","if","(",break_out,")"," ","{"," ","break",";","}","}"," ","",";"];
                        let __BREAK__FLAG__=false;
                        for(let __iter__428 in __elements__429) {
                            __array__431.push(await __for_body__430(__elements__429[__iter__428]));
                            if(__BREAK__FLAG__) {
                                 __array__431.pop();
                                break;
                                
                            }
                        }return __array__431;
                         
                    })()
                } else {
                    await (async function() {
                        let __for_body__434=async function(t) {
                            return (prebuild).push(t)
                        };
                        let __array__435=[],__elements__433=["while","(",await (async function(){
                             return await compile(test_condition,ctx) 
                        })(),")"," {"," ",(preamble && preamble["0"])," ",body_ref,"()",";"," ","if","(",break_out,")"," ","{"," ","break",";","}","}"," ","",";"];
                        let __BREAK__FLAG__=false;
                        for(let __iter__432 in __elements__433) {
                            __array__435.push(await __for_body__434(__elements__433[__iter__432]));
                            if(__BREAK__FLAG__) {
                                 __array__435.pop();
                                break;
                                
                            }
                        }return __array__435;
                         
                    })()
                };
                await (async function() {
                    let __for_body__438=async function(t) {
                        return (acc).push(t)
                    };
                    let __array__439=[],__elements__437=[(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()","{"," ",prebuild,"}",")","()"];
                    let __BREAK__FLAG__=false;
                    for(let __iter__436 in __elements__437) {
                        __array__439.push(await __for_body__438(__elements__437[__iter__436]));
                        if(__BREAK__FLAG__) {
                             __array__439.pop();
                            break;
                            
                        }
                    }return __array__439;
                     
                })();
                return acc
            };
            compile_for_with=async function(tokens,ctx,preamble) {
                preamble=await calling_preamble(ctx);
                ctx=await (async function(){
                     return await new_ctx(ctx) 
                })();
                ;
                await set_new_completion_scope(ctx);
                return [(preamble && preamble["2"]),(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()"," ","{",await compile_for_with_inner(tokens,ctx,preamble)," ","}",")","()"]
            };
            compile_for_with_inner=async function(tokens,ctx,preamble) {
                let acc;
                let idx;
                let stmts;
                let iter_ref;
                let idx_iters;
                let generator_expression;
                let body_function_ref;
                let prebuild;
                let for_args;
                let iterator_ref;
                let elements;
                let iter_count;
                let for_body;
                let body_is_block_ques_;
                acc=[];
                idx=0;
                stmts=[];
                iter_ref=await gen_temp_name("iter");
                idx_iters=[];
                generator_expression=await gen_temp_name("elements");
                body_function_ref=await gen_temp_name("for_body");
                prebuild=[];
                for_args=(tokens && tokens["1"] && tokens["1"]["val"]);
                iterator_ref=(for_args && for_args["0"]);
                elements=await last(for_args);
                iter_count=await (async function(){
                    if (check_true (for_args)){
                        return ((for_args && for_args.length)- 1)
                    } else {
                        return 0
                    }
                })();
                for_body=(tokens && tokens["2"]);
                body_is_block_ques_=await is_block_ques_((for_body && for_body["val"]));
                if (check_true ((iter_count<1))){
                    {
                        throw new SyntaxError("Invalid for_each arguments");
                        
                    }
                };
                await (async function() {
                    let __for_body__442=async function(iter_ref) {
                        (idx_iters).push(for_args[iter_ref]);
                        return await set_ctx(ctx,await clean_quoted_reference(await (async function(){
                            let __targ__444=await last(idx_iters);
                            if (__targ__444){
                                 return(__targ__444)["name"]
                            } 
                        })()),ArgumentType)
                    };
                    let __array__443=[],__elements__441=await (await Environment.get_global("range"))(iter_count);
                    let __BREAK__FLAG__=false;
                    for(let __iter__440 in __elements__441) {
                        __array__443.push(await __for_body__442(__elements__441[__iter__440]));
                        if(__BREAK__FLAG__) {
                             __array__443.pop();
                            break;
                            
                        }
                    }return __array__443;
                     
                })();
                await set_ctx(ctx,generator_expression,"arg");
                if (check_true (await not(body_is_block_ques_))){
                    {
                        for_body=await make_do_block(for_body)
                    }
                };
                prebuild=await build_fn_with_assignment(body_function_ref,(for_body && for_body["val"]),idx_iters,ctx);
                await async function(){
                    ctx["block_step"]=0;
                    return ctx;
                    
                }();
                await async function(){
                    ctx["return_last_value"]=true;
                    return ctx;
                    
                }();
                (acc).push(await (async function(){
                     return await compile(prebuild,ctx) 
                })());
                await (async function() {
                    let __for_body__449=async function(t) {
                        return (acc).push(t)
                    };
                    let __array__450=[],__elements__448=["let"," ",break_out,"=","false",";"];
                    let __BREAK__FLAG__=false;
                    for(let __iter__447 in __elements__448) {
                        __array__450.push(await __for_body__449(__elements__448[__iter__447]));
                        if(__BREAK__FLAG__) {
                             __array__450.pop();
                            break;
                            
                        }
                    }return __array__450;
                     
                })();
                await set_ctx(ctx,body_function_ref,AsyncFunction);
                await async function(){
                    if (check_true ((((for_args && for_args.length)===2)&& await not(((for_args && for_args["1"]) instanceof Array))))) {
                        {
                            await (async function() {
                                let __for_body__453=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__454=[],__elements__452=["for"," ",(preamble && preamble["0"])," ","(","const"," ",iter_ref," ","of"," ",await compile_wrapper_fn(elements,ctx),")"," ","{"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__451 in __elements__452) {
                                    __array__454.push(await __for_body__453(__elements__452[__iter__451]));
                                    if(__BREAK__FLAG__) {
                                         __array__454.pop();
                                        break;
                                        
                                    }
                                }return __array__454;
                                 
                            })();
                            await (async function() {
                                let __for_body__457=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__458=[],__elements__456=await (async function(){
                                    let __array_op_rval__459=(preamble && preamble["0"]);
                                     if (__array_op_rval__459 instanceof Function){
                                        return await __array_op_rval__459(" ",body_function_ref,"(",iter_ref,")",";") 
                                    } else {
                                        return [__array_op_rval__459," ",body_function_ref,"(",iter_ref,")",";"]
                                    }
                                })();
                                let __BREAK__FLAG__=false;
                                for(let __iter__455 in __elements__456) {
                                    __array__458.push(await __for_body__457(__elements__456[__iter__455]));
                                    if(__BREAK__FLAG__) {
                                         __array__458.pop();
                                        break;
                                        
                                    }
                                }return __array__458;
                                 
                            })();
                            await (async function() {
                                let __for_body__462=async function(t) {
                                    return (acc).push(t)
                                };
                                let __array__463=[],__elements__461=["if","(",break_out,")"," ","break",";"];
                                let __BREAK__FLAG__=false;
                                for(let __iter__460 in __elements__461) {
                                    __array__463.push(await __for_body__462(__elements__461[__iter__460]));
                                    if(__BREAK__FLAG__) {
                                         __array__463.pop();
                                        break;
                                        
                                    }
                                }return __array__463;
                                 
                            })();
                            return (acc).push("}")
                        }
                    }
                } ();
                return acc
            };
            silence=async function() {
                return false
            };
            verbosity=silence;
            check_verbosity=async function(ctx) {
                return await Environment["get_global"].call(Environment,"__VERBOSITY__")
            };
            declare_log=await (async function(){
                if (check_true ((opts && opts["quiet_mode"]))){
                    return log
                } else {
                    return await defclog({
                        prefix:"DECLARE",color:"white",background:"black"
                    })
                }
            })();
            compile_declare=async function(tokens,ctx) {
                let expressions;
                let targeted;
                let acc;
                let source;
                let details;
                let sanitized_name;
                let declaration;
                let dec_struct;
                expressions=await (await Environment.get_global("rest"))(tokens);
                targeted=null;
                acc=[];
                source=null;
                details=null;
                sanitized_name=null;
                declaration=null;
                dec_struct=null;
                await (async function() {
                    let __for_body__466=async function(exp) {
                        declaration=(exp && exp["val"] && exp["val"]["0"] && exp["val"]["0"]["name"]);
                        targeted=await (await Environment.get_global("rest"))((exp && exp["val"]));
                        if (check_true (await (async function(){
                            let __array_op_rval__468=verbosity;
                             if (__array_op_rval__468 instanceof Function){
                                return await __array_op_rval__468(ctx) 
                            } else {
                                return [__array_op_rval__468,ctx]
                            }
                        })())){
                            {
                                await declare_log("declaration: ",declaration,"targeted: ",await (async function(){
                                     return await (await Environment.get_global("each"))(targeted,"name") 
                                })(),targeted)
                            }
                        };
                        return await async function(){
                            if (check_true ((declaration==="toplevel"))) {
                                {
                                    await async function(){
                                        opts["root_environment"]=(targeted && targeted["0"]);
                                        return opts;
                                        
                                    }();
                                    if (check_true ((opts && opts["root_environment"]))){
                                        return env_ref=""
                                    } else {
                                        return env_ref="Environment."
                                    }
                                }
                            } else if (check_true ((declaration==="include"))) {
                                {
                                    return await (async function() {
                                        let __for_body__472=async function(name) {
                                            sanitized_name=await sanitize_js_ref_name(name);
                                            dec_struct=await get_declaration_details(ctx,name);
                                            if (check_true (dec_struct)){
                                                {
                                                    await (async function() {
                                                        let __for_body__476=async function(t) {
                                                            return (acc).push(t)
                                                        };
                                                        let __array__477=[],__elements__475=["let"," ",sanitized_name,"="];
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__474 in __elements__475) {
                                                            __array__477.push(await __for_body__476(__elements__475[__iter__474]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__477.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__477;
                                                         
                                                    })();
                                                    await async function(){
                                                        if (check_true (((dec_struct && dec_struct["value"]) instanceof Function&& await (async function(){
                                                            let __targ__479=await (async function(){
                                                                let __targ__478=(Environment && Environment["definitions"]);
                                                                if (__targ__478){
                                                                     return(__targ__478)[name]
                                                                } 
                                                            })();
                                                            if (__targ__479){
                                                                 return(__targ__479)["fn_body"]
                                                            } 
                                                        })()))) {
                                                            {
                                                                details=await (async function(){
                                                                    let __targ__480=(Environment && Environment["definitions"]);
                                                                    if (__targ__480){
                                                                         return(__targ__480)[name]
                                                                    } 
                                                                })();
                                                                source=("(fn "+ (details && details["fn_args"])+ " "+ (details && details["fn_body"])+ ")");
                                                                source=await (async function(){
                                                                     return await compile(await tokenize(await (async function(){
                                                                         return await (await Environment.get_global("read_lisp"))(source) 
                                                                    })(),ctx),ctx,1000) 
                                                                })();
                                                                (acc).push(source);
                                                                return await set_ctx(ctx,name,AsyncFunction)
                                                            }
                                                        } else if (check_true ((dec_struct && dec_struct["value"]) instanceof Function)) {
                                                            {
                                                                (acc).push(await (async function() {
                                                                    {
                                                                         let __call_target__=await (dec_struct && dec_struct["value"])["toString"](), __call_method__="replace";
                                                                        return await __call_target__[__call_method__].call(__call_target__,"\n","")
                                                                    } 
                                                                })());
                                                                await set_ctx(ctx,name,AsyncFunction)
                                                            }
                                                        } else {
                                                            {
                                                                (acc).push(await (dec_struct && dec_struct["value"])["toString"]());
                                                                await set_ctx(ctx,name,ArgumentType)
                                                            }
                                                        }
                                                    } ();
                                                    (acc).push(";")
                                                }
                                            };
                                            await set_declaration(ctx,name,"inlined",true);
                                            if (check_true ((("undefined"===await (async function(){
                                                let __targ__481=await get_declarations(ctx,name);
                                                if (__targ__481){
                                                     return(__targ__481)["type"]
                                                } 
                                            })())&& (dec_struct && dec_struct["value"]) instanceof Function))){
                                                return await set_declaration(ctx,name,"type",Function)
                                            }
                                        };
                                        let __array__473=[],__elements__471=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__470 in __elements__471) {
                                            __array__473.push(await __for_body__472(__elements__471[__iter__470]));
                                            if(__BREAK__FLAG__) {
                                                 __array__473.pop();
                                                break;
                                                
                                            }
                                        }return __array__473;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="verbose"))) {
                                {
                                    let verbosity_level=await parseInt(await first(await (async function(){
                                         return await (await Environment.get_global("each"))(targeted,"name") 
                                    })()));
                                    ;
                                    if (check_true (await not(await isNaN(verbosity_level)))){
                                        {
                                            if (check_true ((verbosity_level>0))){
                                                await set_ctx(ctx,"__VERBOSITY__",verbosity_level)
                                            } else {
                                                {
                                                    await declare_log("verbosity: turned off");
                                                    verbosity=silence;
                                                    await set_ctx(ctx,"__VERBOSITY__",null)
                                                }
                                            };
                                            verbosity=check_verbosity;
                                            return await declare_log("compiler: verbosity set: ",await (async function(){
                                                let __array_op_rval__482=verbosity;
                                                 if (__array_op_rval__482 instanceof Function){
                                                    return await __array_op_rval__482(ctx) 
                                                } else {
                                                    return [__array_op_rval__482,ctx]
                                                }
                                            })())
                                        }
                                    } else {
                                        return (warnings).push("invalid verbosity declaration, expected number, received ")
                                    }
                                }
                            } else if (check_true ((declaration==="local"))) {
                                return await (async function() {
                                    let __for_body__485=async function(name) {
                                        dec_struct=await get_declaration_details(ctx,name);
                                        return await set_ctx(ctx,name,(dec_struct && dec_struct["value"]))
                                    };
                                    let __array__486=[],__elements__484=await (async function(){
                                         return await (await Environment.get_global("each"))(targeted,"name") 
                                    })();
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__483 in __elements__484) {
                                        __array__486.push(await __for_body__485(__elements__484[__iter__483]));
                                        if(__BREAK__FLAG__) {
                                             __array__486.pop();
                                            break;
                                            
                                        }
                                    }return __array__486;
                                     
                                })()
                            } else if (check_true ((declaration==="function"))) {
                                {
                                    return await (async function() {
                                        let __for_body__489=async function(name) {
                                            return await set_declaration(ctx,name,"type",Function)
                                        };
                                        let __array__490=[],__elements__488=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__487 in __elements__488) {
                                            __array__490.push(await __for_body__489(__elements__488[__iter__487]));
                                            if(__BREAK__FLAG__) {
                                                 __array__490.pop();
                                                break;
                                                
                                            }
                                        }return __array__490;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="fn"))) {
                                {
                                    return await (async function() {
                                        let __for_body__493=async function(name) {
                                            return await set_declaration(ctx,name,"type",AsyncFunction)
                                        };
                                        let __array__494=[],__elements__492=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__491 in __elements__492) {
                                            __array__494.push(await __for_body__493(__elements__492[__iter__491]));
                                            if(__BREAK__FLAG__) {
                                                 __array__494.pop();
                                                break;
                                                
                                            }
                                        }return __array__494;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="array"))) {
                                {
                                    return await (async function() {
                                        let __for_body__497=async function(name) {
                                            return await set_declaration(ctx,name,"type",Array)
                                        };
                                        let __array__498=[],__elements__496=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__495 in __elements__496) {
                                            __array__498.push(await __for_body__497(__elements__496[__iter__495]));
                                            if(__BREAK__FLAG__) {
                                                 __array__498.pop();
                                                break;
                                                
                                            }
                                        }return __array__498;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="number"))) {
                                {
                                    return await (async function() {
                                        let __for_body__501=async function(name) {
                                            return await set_declaration(ctx,name,"type",NumberType)
                                        };
                                        let __array__502=[],__elements__500=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__499 in __elements__500) {
                                            __array__502.push(await __for_body__501(__elements__500[__iter__499]));
                                            if(__BREAK__FLAG__) {
                                                 __array__502.pop();
                                                break;
                                                
                                            }
                                        }return __array__502;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="string"))) {
                                {
                                    return await (async function() {
                                        let __for_body__505=async function(name) {
                                            return await set_declaration(ctx,name,"type",StringType)
                                        };
                                        let __array__506=[],__elements__504=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__503 in __elements__504) {
                                            __array__506.push(await __for_body__505(__elements__504[__iter__503]));
                                            if(__BREAK__FLAG__) {
                                                 __array__506.pop();
                                                break;
                                                
                                            }
                                        }return __array__506;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="boolean"))) {
                                {
                                    return await (async function() {
                                        let __for_body__509=async function(name) {
                                            return await set_declaration(ctx,name,"type",Boolean)
                                        };
                                        let __array__510=[],__elements__508=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__507 in __elements__508) {
                                            __array__510.push(await __for_body__509(__elements__508[__iter__507]));
                                            if(__BREAK__FLAG__) {
                                                 __array__510.pop();
                                                break;
                                                
                                            }
                                        }return __array__510;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="regexp"))) {
                                {
                                    return await (async function() {
                                        let __for_body__513=async function(name) {
                                            return await set_declaration(ctx,name,"type",RegExp)
                                        };
                                        let __array__514=[],__elements__512=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__511 in __elements__512) {
                                            __array__514.push(await __for_body__513(__elements__512[__iter__511]));
                                            if(__BREAK__FLAG__) {
                                                 __array__514.pop();
                                                break;
                                                
                                            }
                                        }return __array__514;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="object"))) {
                                {
                                    return await (async function() {
                                        let __for_body__517=async function(name) {
                                            return await set_declaration(ctx,name,"type",Object)
                                        };
                                        let __array__518=[],__elements__516=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__515 in __elements__516) {
                                            __array__518.push(await __for_body__517(__elements__516[__iter__515]));
                                            if(__BREAK__FLAG__) {
                                                 __array__518.pop();
                                                break;
                                                
                                            }
                                        }return __array__518;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="global"))) {
                                {
                                    return await (async function() {
                                        let __for_body__521=async function(name) {
                                            return await set_declaration(ctx,name,"location","global")
                                        };
                                        let __array__522=[],__elements__520=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"name") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__519 in __elements__520) {
                                            __array__522.push(await __for_body__521(__elements__520[__iter__519]));
                                            if(__BREAK__FLAG__) {
                                                 __array__522.pop();
                                                break;
                                                
                                            }
                                        }return __array__522;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="optimize"))) {
                                {
                                    return await (async function() {
                                        let __for_body__525=async function(factor) {
                                            factor=await (async function(){
                                                 return await (await Environment.get_global("each"))(factor,"name") 
                                            })();
                                            return await async function(){
                                                if (check_true (((factor && factor["0"])==="safety"))) {
                                                    return await set_declaration(ctx,"__SAFETY__","level",(factor && factor["1"]))
                                                } else if (check_true (((factor && factor["0"])==="debug"))) {
                                                    {
                                                        return await set_declaration(ctx,"__DEBUG__","level",await parseInt((factor && factor["1"])))
                                                    }
                                                }
                                            } ()
                                        };
                                        let __array__526=[],__elements__524=await (async function(){
                                             return await (await Environment.get_global("each"))(targeted,"val") 
                                        })();
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__523 in __elements__524) {
                                            __array__526.push(await __for_body__525(__elements__524[__iter__523]));
                                            if(__BREAK__FLAG__) {
                                                 __array__526.pop();
                                                break;
                                                
                                            }
                                        }return __array__526;
                                         
                                    })()
                                }
                            } else if (check_true ((declaration==="namespace"))) {
                                {
                                    if (check_true (await not(((targeted && targeted.length)===1)))){
                                        {
                                            throw new SyntaxError("namespace declaration requires exactly 1 value");
                                            
                                        }
                                    };
                                    if (check_true (await get_ctx(ctx,"__IN_LAMBDA__"))){
                                        {
                                            throw new SyntaxError("namespace compiler declaration must be toplevel");
                                            
                                        }
                                    };
                                    target_namespace=(targeted && targeted["0"] && targeted["0"]["name"]);
                                    return Environment=await Environment["get_namespace_handle"].call(Environment,(targeted && targeted["0"] && targeted["0"]["name"]))
                                }
                            } else {
                                {
                                    (warnings).push(("unknown declaration directive: "+ declaration));
                                    return await (await Environment.get_global("warn"))(("compiler: unknown declaration directive: "+ declaration))
                                }
                            }
                        } ()
                    };
                    let __array__467=[],__elements__465=expressions;
                    let __BREAK__FLAG__=false;
                    for(let __iter__464 in __elements__465) {
                        __array__467.push(await __for_body__466(__elements__465[__iter__464]));
                        if(__BREAK__FLAG__) {
                             __array__467.pop();
                            break;
                            
                        }
                    }return __array__467;
                     
                })();
                return acc
            };
            safety_level=async function(ctx) {
                if (check_true (ctx)){
                    {
                        let safety=await get_declarations(ctx,"__SAFETY__");
                        ;
                        if (check_true (safety)){
                            return (safety && safety["level"])
                        } else {
                            return default_safety_level
                        }
                    }
                }
            };
            debug_level=async function(ctx) {
                if (check_true (ctx)){
                    {
                        let it;
                        it=await get_declarations(ctx,"__DEBUG__");
                        if (check_true (it)){
                            return (it && it["level"])
                        } else {
                            return 0
                        }
                    }
                } else {
                    return 0
                }
            };
            get_scoped_type=async function(name) {
                let rtype;
                rtype=await get_ctx(ctx,name);
                if (check_true ((undefined===rtype))){
                    return await sub_type(await get_lisp_ctx(ctx,name))
                } else {
                    return await sub_type(rtype)
                }
            };
            compile_scoped_reference=async function(tokens,ctx) {
                let acc;
                let idx;
                let ref_type;
                let rval;
                let stmt;
                let preamble;
                let sr_log;
                let val;
                let call_type;
                let token;
                acc=[];
                idx=0;
                ref_type=null;
                rval=null;
                stmt=null;
                preamble=await calling_preamble(ctx);
                sr_log=await (async function(){
                     return await defclog({
                        prefix:("compile_scoped_reference ("+ ((ctx && ctx["block_id"])|| "-")+ "):"),background:"steelblue",color:"white"
                    }) 
                })();
                val=null;
                call_type=await (async function(){
                     return await async function(){
                        if (check_true (await not((tokens && tokens["0"] && tokens["0"]["ref"])))) {
                            return "literal"
                        } else if (check_true (await get_ctx_val(ctx,(tokens && tokens["0"] && tokens["0"]["name"])))) {
                            return "local"
                        } else if (check_true (await get_lisp_ctx(ctx,(tokens && tokens["0"] && tokens["0"]["name"])))) {
                            return "lisp"
                        }
                    } () 
                })();
                token=null;
                ;
                await async function(){
                    if (check_true ((call_type==="lisp"))) {
                        return ref_type=await get_lisp_ctx(ctx,(tokens && tokens["0"] && tokens["0"]["name"]))
                    } else if (check_true ((call_type==="local"))) {
                        ref_type=await get_ctx_val(ctx,(tokens && tokens["0"] && tokens["0"]["name"]))
                    } else {
                        ref_type=ArgumentType
                    }
                } ();
                await async function(){
                    if (check_true ((ref_type===AsyncFunction))) {
                        return ref_type="AsyncFunction"
                    } else if (check_true ((ref_type===Expression))) {
                        ref_type=ArgumentType
                    } else if (check_true ((ref_type===Function))) {
                        ref_type="Function"
                    } else if (check_true ((ref_type===Array))) {
                        ref_type="Array"
                    } else if (check_true ((ref_type===NilType))) {
                        ref_type="nil"
                    } else if (check_true ((ref_type===NumberType))) {
                        ref_type=ArgumentType
                    } else if (check_true ((ref_type===StringType))) {
                        ref_type="StringType"
                    } else if (check_true ((ref_type===ArgumentType))) {
                        true
                    } else {
                        ref_type=await sub_type(ref_type)
                    }
                } ();
                if (check_true (await (async function(){
                    let __array_op_rval__527=verbosity;
                     if (__array_op_rval__527 instanceof Function){
                        return await __array_op_rval__527(ctx) 
                    } else {
                        return [__array_op_rval__527,ctx]
                    }
                })())){
                    {
                        await sr_log("SYMBOL: ",(tokens && tokens["0"] && tokens["0"]["name"]),"  found as:",call_type," of type:",ref_type,"sanitized as: ",await (async function(){
                            if (check_true (("local"===call_type))){
                                return (" local sanitized to: "+ await sanitize_js_ref_name((tokens && tokens["0"] && tokens["0"]["name"])))
                            }
                        })())
                    }
                };
                rval=await (async function(){
                     return await async function(){
                        if (check_true ((ref_type==="AsyncFunction"))) {
                            {
                                (acc).push((preamble && preamble["0"]));
                                (acc).push(" ");
                                (acc).push(await (async function(){
                                    if (check_true ((call_type==="lisp"))){
                                        return await compile_lisp_scoped_reference((tokens && tokens["0"] && tokens["0"]["name"]),ctx)
                                    } else {
                                        return await sanitize_js_ref_name((tokens && tokens["0"] && tokens["0"]["name"]))
                                    }
                                })());
                                (acc).push("(");
                                await (async function(){
                                     let __test_condition__528=async function() {
                                        return (idx<((tokens && tokens.length)- 1))
                                    };
                                    let __body_ref__529=async function() {
                                        idx+=1;
                                        token=tokens[idx];
                                        stmt=await compile_wrapper_fn(token,ctx,new Object());
                                        (acc).push(stmt);
                                        if (check_true ((idx<((tokens && tokens.length)- 1)))){
                                            {
                                                return (acc).push(",")
                                            }
                                        }
                                    };
                                    let __BREAK__FLAG__=false;
                                    while(await __test_condition__528()) {
                                         await __body_ref__529();
                                         if(__BREAK__FLAG__) {
                                             break;
                                            
                                        }
                                    } ;
                                    
                                })();
                                (acc).push(")");
                                return acc
                            }
                        } else if (check_true ((ref_type==="Function"))) {
                            {
                                (acc).push((preamble && preamble["0"]));
                                (acc).push(" ");
                                (acc).push(await (async function(){
                                    if (check_true ((call_type==="lisp"))){
                                        return await compile_lisp_scoped_reference((tokens && tokens["0"] && tokens["0"]["name"]),ctx)
                                    } else {
                                        return await sanitize_js_ref_name((tokens && tokens["0"] && tokens["0"]["name"]))
                                    }
                                })());
                                (acc).push("(");
                                await (async function(){
                                     let __test_condition__530=async function() {
                                        return (idx<((tokens && tokens.length)- 1))
                                    };
                                    let __body_ref__531=async function() {
                                        idx+=1;
                                        token=tokens[idx];
                                        stmt=await compile_wrapper_fn(token,ctx,new Object());
                                        (acc).push(stmt);
                                        if (check_true ((idx<((tokens && tokens.length)- 1)))){
                                            {
                                                return (acc).push(",")
                                            }
                                        }
                                    };
                                    let __BREAK__FLAG__=false;
                                    while(await __test_condition__530()) {
                                         await __body_ref__531();
                                         if(__BREAK__FLAG__) {
                                             break;
                                            
                                        }
                                    } ;
                                    
                                })();
                                (acc).push(")");
                                return acc
                            }
                        } else if (check_true (((call_type==="local")&& ((ref_type==="NumberType")|| (ref_type==="StringType")|| (ref_type==="Boolean"))))) {
                            {
                                (acc).push((tokens && tokens["0"] && tokens["0"]["name"]));
                                return acc
                            }
                        } else if (check_true (((call_type==="local")&& await not((ref_type===ArgumentType))&& (tokens instanceof Array)))) {
                            {
                                val=await get_ctx_val(ctx,(tokens && tokens["0"] && tokens["0"]["name"]));
                                (acc).push(val);
                                return acc
                            }
                        } else if (check_true (((ref_type===ArgumentType)&& (tokens instanceof Array)))) {
                            {
                                (acc).push("[");
                                await (async function(){
                                     let __test_condition__532=async function() {
                                        return (idx<(tokens && tokens.length))
                                    };
                                    let __body_ref__533=async function() {
                                        token=tokens[idx];
                                        (acc).push(await (async function(){
                                             return await compile(token,ctx) 
                                        })());
                                        if (check_true ((idx<((tokens && tokens.length)- 1)))){
                                            {
                                                (acc).push(",")
                                            }
                                        };
                                        return idx+=1
                                    };
                                    let __BREAK__FLAG__=false;
                                    while(await __test_condition__532()) {
                                         await __body_ref__533();
                                         if(__BREAK__FLAG__) {
                                             break;
                                            
                                        }
                                    } ;
                                    
                                })();
                                (acc).push("]");
                                return acc
                            }
                        } else if (check_true ((ref_type===ArgumentType))) {
                            {
                                (acc).push((tokens && tokens["0"] && tokens["0"]["name"]));
                                return acc
                            }
                        } else if (check_true ((ref_type==="undefined"))) {
                            {
                                throw new ReferenceError(("unknown reference: "+ (tokens && tokens["0"] && tokens["0"]["name"])));
                                
                            }
                        } else if (check_true ((call_type==="lisp"))) {
                            {
                                return await compile_lisp_scoped_reference((tokens && tokens["0"] && tokens["0"]["name"]),ctx)
                            }
                        } else {
                            {
                                (acc).push((tokens && tokens["0"] && tokens["0"]["name"]));
                                return acc
                            }
                        }
                    } () 
                })();
                if (check_true (false)){
                    {
                        await async function(){
                            if (check_true (((ref_type==="AsyncFunction")|| (ref_type==="Function")))) {
                                return (acc).unshift({
                                    ctype:ref_type
                                })
                            }
                        } ()
                    }
                };
                return acc
            };
            compile_lisp_scoped_reference=async function(refname,ctx,defer_not_found) {
                let refval;
                let reftype;
                let declarations;
                let preamble;
                let basename;
                refval=await get_lisp_ctx(ctx,refname);
                reftype=await sub_type(refval);
                declarations=null;
                preamble=await calling_preamble(ctx);
                basename=await (await Environment.get_global("get_object_path"))(refname);
                ;
                declarations=await add(new Object(),await get_declarations(ctx,refname),await get_declaration_details(ctx,refname));
                if (check_true ((declarations && declarations["inlined"]))){
                    {
                        refname=await sanitize_js_ref_name(refname)
                    }
                };
                if (check_true ((((reftype==="StringType")|| (reftype==="String"))&& await not((refval===undefined))))){
                    {
                        refval="text"
                    }
                };
                return await async function(){
                    if (check_true (await contains_ques_((basename && basename["0"]),standard_types))) {
                        return refname
                    } else if (check_true ((declarations && declarations["inlined"]))) {
                        return refname
                    } else if (check_true (await not((refval===undefined)))) {
                        {
                            has_lisp_globals=true;
                            return [{
                                ctype:await (async function(){
                                    if (check_true ((await not(refval instanceof Function)&& (refval instanceof Object)))){
                                        return "object"
                                    } else {
                                        return refval
                                    }
                                })()
                            },"(",(preamble && preamble["0"])," ",env_ref,"get_global","(\"",refname,"\")",")"]
                        }
                    } else if (check_true (defer_not_found)) {
                        return ["(",env_ref,"get_global","(\"",refname,"\", ReferenceError)",")"]
                    } else {
                        {
                            throw new ReferenceError(("unknown lisp reference: "+ refname));
                            
                        }
                    }
                } ()
            };
            standard_types=await (async function(){
                let all_vals;
                all_vals=await (await Environment.get_global("make_set"))(await (async function(){
                     return await uniq(await conj(["AsyncFunction","check_true","LispSyntaxError","dlisp_environment_count","clone","super","Class","Environment","Expression","get_next_environment_id","subtype","lisp_writer","do_deferred_splice"],await (async function(){
                         return await object_methods(globalThis) 
                    })())) 
                })());
                await all_vals["delete"].call(all_vals,"length");
                return all_vals
            })();
            externals=await (await Environment.get_global("make_set"))(await (async function(){
                 return await object_methods(globalThis) 
            })());
            is_error=null;
            is_block_ques_=async function(tokens) {
                return (((tokens && tokens["0"] && tokens["0"]["type"])==="special")&& await contains_ques_((tokens && tokens["0"] && tokens["0"]["name"]),["do","progn"]))
            };
            is_complex_ques_=async function(tokens) {
                let rval;
                rval=(await is_block_ques_(tokens)|| (((tokens && tokens["type"])==="arr")&& await is_block_ques_((tokens && tokens["val"])))|| (((tokens && tokens["0"] && tokens["0"]["type"])==="special")&& (((tokens && tokens["0"] && tokens["0"]["name"])==="let")|| ((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["name"])==="if")|| ((tokens && tokens["val"] && tokens["val"]["0"] && tokens["val"]["0"]["name"])==="let"))));
                return rval
            };
            is_form_ques_=async function(token) {
                return (((token && token["val"]) instanceof Array)|| await is_block_ques_((token && token["val"])))
            };
            op_lookup=await ( async function(){
                let __obj__534=new Object();
                __obj__534["+"]=infix_ops;
                __obj__534["*"]=infix_ops;
                __obj__534["/"]=infix_ops;
                __obj__534["-"]=infix_ops;
                __obj__534["**"]=infix_ops;
                __obj__534["%"]=infix_ops;
                __obj__534["<<"]=infix_ops;
                __obj__534[">>"]=infix_ops;
                __obj__534["and"]=infix_ops;
                __obj__534["or"]=infix_ops;
                __obj__534["apply"]=compile_apply;
                __obj__534["call"]=compile_call;
                __obj__534["->"]=compile_call;
                __obj__534["set_prop"]=compile_set_prop;
                __obj__534["prop"]=compile_prop;
                __obj__534["="]=compile_assignment;
                __obj__534["setq"]=compile_assignment;
                __obj__534["=="]=compile_compare;
                __obj__534["eq"]=compile_compare;
                __obj__534[">"]=compile_compare;
                __obj__534["<"]=compile_compare;
                __obj__534["<="]=compile_compare;
                __obj__534[">="]=compile_compare;
                __obj__534["return"]=compile_return;
                __obj__534["new"]=compile_new;
                __obj__534["do"]=compile_block;
                __obj__534["progn"]=compile_block;
                __obj__534["progl"]=async function(tokens,ctx) {
                    return await compile_block(tokens,ctx,{
                        no_scope_boundary:true,suppress_return:true,force_no_new_ctx:true
                    })
                };
                __obj__534["break"]=compile_break;
                __obj__534["inc"]=compile_val_mod;
                __obj__534["dec"]=compile_val_mod;
                __obj__534["try"]=compile_try;
                __obj__534["throw"]=compile_throw;
                __obj__534["let"]=compile_let;
                __obj__534["defvar"]=compile_defvar;
                __obj__534["defconst"]=async function(tokens,ctx) {
                    if (check_true (await get_ctx(ctx,"__LOCAL_SCOPE__"))){
                        return await compile_defvar(tokens,ctx,{
                            constant:true
                        })
                    } else {
                        return await compile_set_global(tokens,ctx,{
                            constant:true
                        })
                    }
                };
                __obj__534["while"]=compile_while;
                __obj__534["for_each"]=compile_for_each;
                __obj__534["if"]=compile_if;
                __obj__534["cond"]=compile_cond;
                __obj__534["fn"]=compile_fn;
                __obj__534["lambda"]=compile_fn;
                __obj__534["function*"]=async function(tokens,ctx) {
                    return await compile_fn(tokens,ctx,{
                        generator:true
                    })
                };
                __obj__534["defglobal"]=compile_set_global;
                __obj__534["list"]=compile_list;
                __obj__534["function"]=async function(tokens,ctx) {
                    return await compile_fn(tokens,ctx,{
                        synchronous:true
                    })
                };
                __obj__534["=>"]=async function(tokens,ctx) {
                    return await compile_fn(tokens,ctx,{
                        arrow:true
                    })
                };
                __obj__534["yield"]=compile_yield;
                __obj__534["for_with"]=compile_for_with;
                __obj__534["quotem"]=compile_quotem;
                __obj__534["quote"]=compile_quote;
                __obj__534["quotel"]=compile_quotel;
                __obj__534["eval"]=compile_eval;
                __obj__534["jslambda"]=compile_jslambda;
                __obj__534["javascript"]=compile_javascript;
                __obj__534["instanceof"]=compile_instanceof;
                __obj__534["typeof"]=compile_typeof;
                __obj__534["unquotem"]=compile_unquotem;
                __obj__534["debug"]=compile_debug;
                __obj__534["declare"]=compile_declare;
                __obj__534["static_import"]=compile_import;
                __obj__534["dynamic_import"]=compile_dynamic_import;
                return __obj__534;
                
            })();
            comp_log=await (async function(){
                if (check_true (quiet_mode)){
                    return log
                } else {
                    return await defclog({
                        background:"LightSkyblue",color:"#000000"
                    })
                }
            })();
            last_source=null;
            compile_obj_literal=async function(tokens,ctx) {
                let acc;
                let idx;
                let stmt;
                let has_valid_key_literals;
                let token;
                let preamble;
                let key;
                let output_val;
                let tmp_name;
                let kvpair;
                let total_length;
                acc=[];
                idx=-1;
                stmt=null;
                has_valid_key_literals=true;
                token=null;
                preamble=await calling_preamble(ctx);
                key=null;
                output_val=null;
                tmp_name=null;
                ctx=await (async function(){
                     return await new_ctx(ctx) 
                })();
                kvpair=null;
                total_length=((tokens && tokens["val"] && tokens["val"]["length"])- 1);
                ;
                await async function(){
                    ctx["in_obj_literal"]=true;
                    return ctx;
                    
                }();
                await (async function() {
                    let __for_body__538=async function(token) {
                        if (check_true ((((token && token["type"])==="keyval")&& await check_invalid_js_ref((token && token.name))))){
                            {
                                has_valid_key_literals=false;
                                return __BREAK__FLAG__=true;
                                return
                            }
                        }
                    };
                    let __array__539=[],__elements__537=((tokens && tokens["val"])|| []);
                    let __BREAK__FLAG__=false;
                    for(let __iter__536 in __elements__537) {
                        __array__539.push(await __for_body__538(__elements__537[__iter__536]));
                        if(__BREAK__FLAG__) {
                             __array__539.pop();
                            break;
                            
                        }
                    }return __array__539;
                     
                })();
                if (check_true (has_valid_key_literals)){
                    if (check_true (((tokens && tokens["val"] && tokens["val"]["name"])==="{}"))){
                        return [{
                            ctype:"objliteral"
                        },"new Object()"]
                    } else {
                        {
                            (acc).push("{");
                            await (async function(){
                                 let __test_condition__540=async function() {
                                    return (idx<total_length)
                                };
                                let __body_ref__541=async function() {
                                    idx+=1;
                                    kvpair=await (async function(){
                                        let __targ__542=(tokens && tokens["val"]);
                                        if (__targ__542){
                                             return(__targ__542)[idx]
                                        } 
                                    })();
                                    key=await get_val((kvpair && kvpair["val"] && kvpair["val"]["0"]),ctx);
                                    if (check_true ((((key && key.length)===1)&& (await key["charCodeAt"]()===34)))){
                                        {
                                            key="'\"'"
                                        }
                                    };
                                    (acc).push(key);
                                    (acc).push(":");
                                    await set_ctx(ctx,"__LAMBDA_STEP__",-1);
                                    stmt=await compile_wrapper_fn((kvpair && kvpair["val"] && kvpair["val"]["1"]),ctx);
                                    await (await Environment.get_global("assert"))(stmt,"compile: obj literal value returned invalid/undefined value.");
                                    (acc).push(stmt);
                                    if (check_true ((idx<total_length))){
                                        {
                                            return (acc).push(",")
                                        }
                                    }
                                };
                                let __BREAK__FLAG__=false;
                                while(await __test_condition__540()) {
                                     await __body_ref__541();
                                     if(__BREAK__FLAG__) {
                                         break;
                                        
                                    }
                                } ;
                                
                            })();
                            (acc).push("}");
                            return [{
                                ctype:"objliteral"
                            },acc]
                        }
                    }
                } else {
                    {
                        tmp_name=await gen_temp_name("obj");
                        await (async function() {
                            let __for_body__545=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__546=[],__elements__544=await (async function(){
                                 return [{
                                    ctype:"statement"
                                },(preamble && preamble["0"])," ","("," ",(preamble && preamble["1"])," ","function","()","{","let"," ",tmp_name,"=","new"," ","Object","()",";"] 
                            })();
                            let __BREAK__FLAG__=false;
                            for(let __iter__543 in __elements__544) {
                                __array__546.push(await __for_body__545(__elements__544[__iter__543]));
                                if(__BREAK__FLAG__) {
                                     __array__546.pop();
                                    break;
                                    
                                }
                            }return __array__546;
                             
                        })();
                        await (async function(){
                             let __test_condition__547=async function() {
                                return (idx<total_length)
                            };
                            let __body_ref__548=async function() {
                                idx+=1;
                                kvpair=await (async function(){
                                    let __targ__549=(tokens && tokens["val"]);
                                    if (__targ__549){
                                         return(__targ__549)[idx]
                                    } 
                                })();
                                output_val=(await compile_wrapper_fn((kvpair && kvpair["val"] && kvpair["val"]["1"]),ctx)|| "null");
                                try {
                                    (""+ output_val)
                                } catch (__exception__550) {
                                    if (__exception__550 instanceof Error) {
                                        let e=__exception__550;
                                        {
                                            {
                                                output_val="null"
                                            }
                                        }
                                    }
                                };
                                return await (async function() {
                                    let __for_body__553=async function(t) {
                                        return (acc).push(t)
                                    };
                                    let __array__554=[],__elements__552=await (async function(){
                                        let __array_op_rval__555=tmp_name;
                                         if (__array_op_rval__555 instanceof Function){
                                            return await __array_op_rval__555("[","\"",await (async function(){
                                                 return await cl_encode_string(await get_val((kvpair && kvpair["val"] && kvpair["val"]["0"]),ctx)) 
                                            })(),"\"","]","=",output_val,";") 
                                        } else {
                                            return [__array_op_rval__555,"[","\"",await (async function(){
                                                 return await cl_encode_string(await get_val((kvpair && kvpair["val"] && kvpair["val"]["0"]),ctx)) 
                                            })(),"\"","]","=",output_val,";"]
                                        }
                                    })();
                                    let __BREAK__FLAG__=false;
                                    for(let __iter__551 in __elements__552) {
                                        __array__554.push(await __for_body__553(__elements__552[__iter__551]));
                                        if(__BREAK__FLAG__) {
                                             __array__554.pop();
                                            break;
                                            
                                        }
                                    }return __array__554;
                                     
                                })()
                            };
                            let __BREAK__FLAG__=false;
                            while(await __test_condition__547()) {
                                 await __body_ref__548();
                                 if(__BREAK__FLAG__) {
                                     break;
                                    
                                }
                            } ;
                            
                        })();
                        await (async function() {
                            let __for_body__558=async function(t) {
                                return (acc).push(t)
                            };
                            let __array__559=[],__elements__557=["return"," ",tmp_name,";","}",")","()"];
                            let __BREAK__FLAG__=false;
                            for(let __iter__556 in __elements__557) {
                                __array__559.push(await __for_body__558(__elements__557[__iter__556]));
                                if(__BREAK__FLAG__) {
                                     __array__559.pop();
                                    break;
                                    
                                }
                            }return __array__559;
                             
                        })();
                        return acc
                    }
                }
            };
            is_literal_ques_=async function(val) {
                return (await is_number_ques_(val)|| (val instanceof String || typeof val==='string')|| (false===val)|| (true===val))
            };
            comp_warn=await (async function(){
                 return await defclog({
                    prefix:"compile: [warn]:",background:"#fcffc8",color:"brown"
                }) 
            })();
            let compile=await __compile__5();
            ;
            compile_inner=async function(tokens,ctx,_cdepth,_dbg_level) {
                let operator_type;
                let op_token;
                let rcv;
                let __op__566= async function(){
                    return null
                };
                let acc;
                let preamble;
                let tmp_name;
                let refval;
                let ref;
                {
                    operator_type=null;
                    op_token=null;
                    rcv=null;
                    let op=await __op__566();
                    ;
                    _cdepth=(_cdepth|| 100);
                    acc=[];
                    preamble=await calling_preamble(ctx);
                    tmp_name=null;
                    refval=null;
                    ref=null;
                    ;
                    if (check_true (throttle_level)){
                        {
                            if (check_true (await is_number_ques_(throttle_level))){
                                await (await Environment.get_global("sleep"))((0.001* throttle_level))
                            }
                        }
                    };
                    try {
                        if (check_true ((null==ctx))){
                            {
                                await error_log("compile: nil ctx: ",tokens);
                                throw new Error("compile: nil ctx");
                                
                            }
                        } else {
                            return await async function(){
                                if (check_true ((await is_number_ques_(tokens)|| (tokens instanceof String || typeof tokens==='string')|| (await sub_type(tokens)==="Boolean")))) {
                                    return tokens
                                } else if (check_true (((tokens instanceof Array)&& (tokens && tokens["0"] && tokens["0"]["ref"])&& await not((await get_ctx(ctx,(tokens && tokens["0"] && tokens["0"]["name"]))===UnknownType))&& (op_lookup[(tokens && tokens["0"] && tokens["0"]["name"])]|| (Function===await get_ctx_val(ctx,(tokens && tokens["0"] && tokens["0"]["name"])))|| (AsyncFunction===await get_ctx_val(ctx,(tokens && tokens["0"] && tokens["0"]["name"])))|| ("function"===typeof await (async function(){
                                    let __targ__568=(root_ctx && root_ctx["defined_lisp_globals"]);
                                    if (__targ__568){
                                         return(__targ__568)[(tokens && tokens["0"] && tokens["0"]["name"])]
                                    } 
                                })())|| await get_lisp_ctx(ctx,(tokens && tokens["0"] && tokens["0"]["name"])) instanceof Function)))) {
                                    {
                                        op_token=await first(tokens);
                                        operator=op_token["name"];
                                        operator_type=op_token["val"];
                                        ref=op_token["ref"];
                                        op=op_lookup[operator];
                                        return await async function(){
                                            if (check_true (op)) {
                                                return (op)(tokens,ctx)
                                            } else if (check_true (await (async function(){
                                                let __targ__569=(Environment && Environment["inlines"]);
                                                if (__targ__569){
                                                     return(__targ__569)[operator]
                                                } 
                                            })())) {
                                                return await compile_inline(tokens,ctx)
                                            } else {
                                                return await compile_scoped_reference(tokens,ctx)
                                            }
                                        } ()
                                    }
                                } else if (check_true (((tokens instanceof Object)&& ((tokens && tokens["type"])==="objlit")))) {
                                    {
                                        return await compile_obj_literal(tokens,ctx)
                                    }
                                } else if (check_true ((tokens instanceof Array))) {
                                    {
                                        return await async function(){
                                            if (check_true (((tokens && tokens.length)===0))) {
                                                return [{
                                                    ctype:"array",is_literal:true
                                                },"[]"]
                                            } else {
                                                {
                                                    let is_operation;
                                                    let declared_type;
                                                    let prefix;
                                                    let symbolic_replacements;
                                                    let compiled_values;
                                                    is_operation=false;
                                                    declared_type=null;
                                                    prefix="";
                                                    ctx=await (async function(){
                                                         return await new_ctx(ctx) 
                                                    })();
                                                    symbolic_replacements=[];
                                                    compiled_values=[];
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__570=verbosity;
                                                         if (__array_op_rval__570 instanceof Function){
                                                            return await __array_op_rval__570(ctx) 
                                                        } else {
                                                            return [__array_op_rval__570,ctx]
                                                        }
                                                    })())){
                                                        {
                                                            await comp_log(("compile: "+ _cdepth+ " array: "),"compiling: ",await source_from_tokens(tokens,tokens,expanded_tree))
                                                        }
                                                    };
                                                    await set_new_completion_scope(ctx);
                                                    if (check_true (((tokens && tokens["0"] && tokens["0"]["ref"])&& ((tokens && tokens["0"] && tokens["0"]["val"]) instanceof String || typeof (tokens && tokens["0"] && tokens["0"]["val"])==='string')))){
                                                        {
                                                            declared_type=await get_declarations(ctx,(tokens && tokens["0"] && tokens["0"]["name"]))
                                                        }
                                                    };
                                                    rcv=await (async function(){
                                                         return await compile((tokens && tokens["0"]),ctx,await add(_cdepth,1)) 
                                                    })();
                                                    if (check_true (await (async function(){
                                                        let __array_op_rval__571=verbosity;
                                                         if (__array_op_rval__571 instanceof Function){
                                                            return await __array_op_rval__571(ctx) 
                                                        } else {
                                                            return [__array_op_rval__571,ctx]
                                                        }
                                                    })())){
                                                        {
                                                            await comp_log(("compile: "+ _cdepth+ " array: "),"potential operator: ",(tokens && tokens["0"] && tokens["0"]["name"]),"declarations: ",declared_type)
                                                        }
                                                    };
                                                    await (async function() {
                                                        let __for_body__574=async function(t) {
                                                            if (check_true (await not(await get_ctx_val(ctx,"__IN_LAMBDA__")))){
                                                                await set_ctx(ctx,"__LAMBDA_STEP__",0)
                                                            };
                                                            return (compiled_values).push(await compile_wrapper_fn(t,ctx))
                                                        };
                                                        let __array__575=[],__elements__573=await (await Environment.get_global("rest"))(tokens);
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__572 in __elements__573) {
                                                            __array__575.push(await __for_body__574(__elements__573[__iter__572]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__575.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__575;
                                                         
                                                    })();
                                                    await map(async function(compiled_element,idx) {
                                                        let inst;
                                                        inst=await (async function(){
                                                             return await async function(){
                                                                if (check_true ((((compiled_element && compiled_element["0"]) instanceof Object)&& await (async function(){
                                                                    let __targ__576=(compiled_element && compiled_element["0"]);
                                                                    if (__targ__576){
                                                                         return(__targ__576)["ctype"]
                                                                    } 
                                                                })()))) {
                                                                    return await (async function(){
                                                                        let __targ__577=(compiled_element && compiled_element["0"]);
                                                                        if (__targ__577){
                                                                             return(__targ__577)["ctype"]
                                                                        } 
                                                                    })()
                                                                } else if (check_true (((compiled_element && compiled_element["0"])==="{"))) {
                                                                    return "block"
                                                                } else {
                                                                    return null
                                                                }
                                                            } () 
                                                        })();
                                                        return await async function(){
                                                            if (check_true (((inst==="block")|| (inst==="letblock")))) {
                                                                {
                                                                    return (symbolic_replacements).push(await (async function(){
                                                                        let __array_op_rval__578=idx;
                                                                         if (__array_op_rval__578 instanceof Function){
                                                                            return await __array_op_rval__578(await gen_temp_name("array_arg"),[(preamble && preamble["2"]),"(",(preamble && preamble["1"])," ","function","()"," ",compiled_element," ",")"]) 
                                                                        } else {
                                                                            return [__array_op_rval__578,await gen_temp_name("array_arg"),[(preamble && preamble["2"]),"(",(preamble && preamble["1"])," ","function","()"," ",compiled_element," ",")"]]
                                                                        }
                                                                    })())
                                                                }
                                                            } else if (check_true ((inst==="ifblock"))) {
                                                                {
                                                                    return (symbolic_replacements).push(await (async function(){
                                                                        let __array_op_rval__579=idx;
                                                                         if (__array_op_rval__579 instanceof Function){
                                                                            return await __array_op_rval__579(await gen_temp_name("array_arg"),[(preamble && preamble["2"]),"(",(preamble && preamble["1"])," ","function","()"," ","{",compiled_element,"}"," ",")"]) 
                                                                        } else {
                                                                            return [__array_op_rval__579,await gen_temp_name("array_arg"),[(preamble && preamble["2"]),"(",(preamble && preamble["1"])," ","function","()"," ","{",compiled_element,"}"," ",")"]]
                                                                        }
                                                                    })())
                                                                }
                                                            }
                                                        } ()
                                                    },compiled_values);
                                                    await (async function() {
                                                        let __for_body__582=async function(elem) {
                                                            await (async function() {
                                                                let __for_body__586=async function(t) {
                                                                    return (acc).push(t)
                                                                };
                                                                let __array__587=[],__elements__585=["let"," ",(elem && elem["1"]),"=",(elem && elem["2"]),";"];
                                                                let __BREAK__FLAG__=false;
                                                                for(let __iter__584 in __elements__585) {
                                                                    __array__587.push(await __for_body__586(__elements__585[__iter__584]));
                                                                    if(__BREAK__FLAG__) {
                                                                         __array__587.pop();
                                                                        break;
                                                                        
                                                                    }
                                                                }return __array__587;
                                                                 
                                                            })();
                                                            return await compiled_values["splice"].call(compiled_values,(elem && elem["0"]),1,[(preamble && preamble["0"])," ",(elem && elem["1"]),"()"])
                                                        };
                                                        let __array__583=[],__elements__581=symbolic_replacements;
                                                        let __BREAK__FLAG__=false;
                                                        for(let __iter__580 in __elements__581) {
                                                            __array__583.push(await __for_body__582(__elements__581[__iter__580]));
                                                            if(__BREAK__FLAG__) {
                                                                 __array__583.pop();
                                                                break;
                                                                
                                                            }
                                                        }return __array__583;
                                                         
                                                    })();
                                                    if (check_true (((symbolic_replacements && symbolic_replacements.length)>0))){
                                                        {
                                                            (acc).unshift("{");
                                                            (acc).unshift({
                                                                ctype:"block"
                                                            })
                                                        }
                                                    };
                                                    await async function(){
                                                        if (check_true ((((declared_type && declared_type["type"])===Function)|| ((declared_type && declared_type["type"])===AsyncFunction)|| (((rcv && rcv["0"]) instanceof Object)&& (rcv && rcv["0"] && rcv["0"]["ctype"]) instanceof Function)|| (((rcv && rcv["0"]) instanceof Object)&& await not(((rcv && rcv["0"]) instanceof Array))&& ((rcv && rcv["0"] && rcv["0"]["ctype"]) instanceof String || typeof (rcv && rcv["0"] && rcv["0"]["ctype"])==='string')&& await contains_ques_("unction",(rcv && rcv["0"] && rcv["0"]["ctype"])))))) {
                                                            {
                                                                if (check_true (((declared_type && declared_type["type"])===AsyncFunction))){
                                                                    prefix="await "
                                                                } else {
                                                                    prefix=""
                                                                };
                                                                is_operation=true;
                                                                await (async function() {
                                                                    let __for_body__590=async function(t) {
                                                                        return (acc).push(t)
                                                                    };
                                                                    let __array__591=[],__elements__589=await (async function(){
                                                                        let __array_op_rval__592=prefix;
                                                                         if (__array_op_rval__592 instanceof Function){
                                                                            return await __array_op_rval__592("(",rcv,")","(") 
                                                                        } else {
                                                                            return [__array_op_rval__592,"(",rcv,")","("]
                                                                        }
                                                                    })();
                                                                    let __BREAK__FLAG__=false;
                                                                    for(let __iter__588 in __elements__589) {
                                                                        __array__591.push(await __for_body__590(__elements__589[__iter__588]));
                                                                        if(__BREAK__FLAG__) {
                                                                             __array__591.pop();
                                                                            break;
                                                                            
                                                                        }
                                                                    }return __array__591;
                                                                     
                                                                })();
                                                                await push_as_arg_list(acc,compiled_values);
                                                                return (acc).push(")")
                                                            }
                                                        } else if (check_true (((null==(declared_type && declared_type["type"]))&& (((tokens && tokens["0"] && tokens["0"]["type"])==="arg")|| ((rcv instanceof String || typeof rcv==='string')&& await get_declaration_details(ctx,rcv))|| ((rcv instanceof Array)&& ((rcv && rcv["0"]) instanceof Object)&& ((rcv && rcv["0"] && rcv["0"]["ctype"]) instanceof String || typeof (rcv && rcv["0"] && rcv["0"]["ctype"])==='string')&& ((rcv && rcv["0"] && rcv["0"]["ctype"])&& (await not(await contains_ques_("unction",(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(await contains_ques_("block",(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("string"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("StringType"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("nil"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("NumberType"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("undefined"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("objliteral"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("Boolean"===(rcv && rcv["0"] && rcv["0"]["ctype"])))&& await not(("array"===(rcv && rcv["0"] && rcv["0"]["ctype"])))))))))) {
                                                            {
                                                                if (check_true (show_hints)){
                                                                    {
                                                                        await comp_warn("value ambiguity - use declare to clarify: ",await source_from_tokens(tokens,expanded_tree,true)," ",await (await Environment.get_global("as_lisp"))(rcv))
                                                                    }
                                                                };
                                                                tmp_name=await gen_temp_name("array_op_rval");
                                                                if (check_true (((symbolic_replacements && symbolic_replacements.length)>0))){
                                                                    {
                                                                        (acc).push({
                                                                            ctype:"block"
                                                                        });
                                                                        (acc).push("return");
                                                                        (acc).push(" ")
                                                                    }
                                                                };
                                                                await (async function() {
                                                                    let __for_body__595=async function(t) {
                                                                        return (acc).push(t)
                                                                    };
                                                                    let __array__596=[],__elements__594=[(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","()","{","let"," ",tmp_name,"=",rcv,";"," ","if"," ","(",tmp_name," ","instanceof"," ","Function",")","{","return"," ",(preamble && preamble["0"])," ",tmp_name,"("];
                                                                    let __BREAK__FLAG__=false;
                                                                    for(let __iter__593 in __elements__594) {
                                                                        __array__596.push(await __for_body__595(__elements__594[__iter__593]));
                                                                        if(__BREAK__FLAG__) {
                                                                             __array__596.pop();
                                                                            break;
                                                                            
                                                                        }
                                                                    }return __array__596;
                                                                     
                                                                })();
                                                                await push_as_arg_list(acc,compiled_values);
                                                                await (async function() {
                                                                    let __for_body__599=async function(t) {
                                                                        return (acc).push(t)
                                                                    };
                                                                    let __array__600=[],__elements__598=[")"," ","}"," ","else"," ","{","return"," ","[",tmp_name];
                                                                    let __BREAK__FLAG__=false;
                                                                    for(let __iter__597 in __elements__598) {
                                                                        __array__600.push(await __for_body__599(__elements__598[__iter__597]));
                                                                        if(__BREAK__FLAG__) {
                                                                             __array__600.pop();
                                                                            break;
                                                                            
                                                                        }
                                                                    }return __array__600;
                                                                     
                                                                })();
                                                                if (check_true ((await length(await (await Environment.get_global("rest"))(tokens))>0))){
                                                                    {
                                                                        (acc).push(",");
                                                                        await push_as_arg_list(acc,compiled_values)
                                                                    }
                                                                };
                                                                return await (async function() {
                                                                    let __for_body__603=async function(t) {
                                                                        return (acc).push(t)
                                                                    };
                                                                    let __array__604=[],__elements__602=["]","}","}",")","()"];
                                                                    let __BREAK__FLAG__=false;
                                                                    for(let __iter__601 in __elements__602) {
                                                                        __array__604.push(await __for_body__603(__elements__602[__iter__601]));
                                                                        if(__BREAK__FLAG__) {
                                                                             __array__604.pop();
                                                                            break;
                                                                            
                                                                        }
                                                                    }return __array__604;
                                                                     
                                                                })()
                                                            }
                                                        } else if (check_true (((null==(declared_type && declared_type["type"]))&& (((rcv instanceof Array)&& ((rcv && rcv["0"]) instanceof Object)&& ((rcv && rcv["0"] && rcv["0"]["ctype"]) instanceof String || typeof (rcv && rcv["0"] && rcv["0"]["ctype"])==='string')&& await contains_ques_("block",(rcv && rcv["0"] && rcv["0"]["ctype"]))))))) {
                                                            {
                                                                if (check_true (((symbolic_replacements && symbolic_replacements.length)>0))){
                                                                    {
                                                                        (acc).push("return");
                                                                        (acc).push(" ")
                                                                    }
                                                                };
                                                                (acc).push("[");
                                                                (acc).push(["(",(preamble && preamble["0"])," ","(",(preamble && preamble["1"])," ","function","() {",rcv,"})","()",")"]);
                                                                if (check_true ((await length(await (await Environment.get_global("rest"))(tokens))>0))){
                                                                    {
                                                                        (acc).push(",");
                                                                        await push_as_arg_list(acc,compiled_values)
                                                                    }
                                                                };
                                                                return (acc).push("]")
                                                            }
                                                        } else {
                                                            return [(await (async function() {if (check_true (((symbolic_replacements && symbolic_replacements.length)>0))){
                                                                {
                                                                    (acc).push("return");
                                                                    return (acc).push(" ")
                                                                }
                                                            }
                                                        })()),(acc).push("["),(acc).push(rcv),await (async function(){
                                                            if (check_true ((await length(await (await Environment.get_global("rest"))(tokens))>0))){
                                                                {
                                                                    (acc).push(",");
                                                                    return await push_as_arg_list(acc,compiled_values)
                                                                }
                                                            }
                                                        })(),(acc).push("]")]
                                                    }
                                                } ();
                                                if (check_true (((symbolic_replacements && symbolic_replacements.length)>0))){
                                                    {
                                                        (acc).push("}")
                                                    }
                                                };
                                                return acc
                                            }
                                        }
                                    } ()
                                }
                            } else if (check_true (((tokens instanceof Object)&& ((tokens && tokens["val"]) instanceof Array)&& (tokens && tokens["type"])))) {
                                {
                                    await async function(){
                                        ctx["source"]=(tokens && tokens["source"]);
                                        return ctx;
                                        
                                    }();
                                    rcv=await (async function(){
                                         return await compile((tokens && tokens["val"]),ctx,await add(_cdepth,1)) 
                                    })();
                                    return rcv
                                }
                            } else if (check_true ((((tokens instanceof Object)&& await not((undefined===(tokens && tokens["val"])))&& (tokens && tokens["type"]))|| ((tokens && tokens["type"])==="literal")|| ((tokens && tokens["type"])==="arg")|| ((tokens && tokens["type"])==="null")))) {
                                {
                                    let snt_name=null;
                                    ;
                                    let snt_value=null;
                                    ;
                                    return await async function(){
                                        if (check_true ((await not((tokens && tokens["ref"]))&& ((tokens && tokens["type"])==="arr")))) {
                                            return await compile((tokens && tokens["val"]),ctx,await add(_cdepth,1))
                                        } else if (check_true ((((tokens && tokens["type"])==="null")|| (((tokens && tokens["type"])==="literal")&& ((tokens && tokens.name)==="null")&& (tokens && tokens["ref"]))))) {
                                            return [{
                                                ctype:"nil"
                                            },"null"]
                                        } else if (check_true ((((tokens && tokens["type"])==="literal")&& ((tokens && tokens.name)==="undefined")&& (tokens && tokens["ref"])))) {
                                            return [{
                                                ctype:"undefined"
                                            },"undefined"]
                                        } else if (check_true (await not((tokens && tokens["ref"])))) {
                                            if (check_true ((((tokens && tokens["type"])==="literal")&& ((tokens && tokens["val"]) instanceof String || typeof (tokens && tokens["val"])==='string')))){
                                                return [{
                                                    ctype:"string"
                                                },("\""+ await (async function(){
                                                     return await cl_encode_string((tokens && tokens["val"])) 
                                                })()+ "\"")]
                                            } else {
                                                if (check_true (await is_number_ques_((tokens && tokens["val"])))){
                                                    return [{
                                                        ctype:"NumberType"
                                                    },(tokens && tokens["val"])]
                                                } else {
                                                    return [{
                                                        ctype:await sub_type((tokens && tokens["val"]))
                                                    },(tokens && tokens["val"])]
                                                }
                                            }
                                        } else if (check_true (((tokens && tokens["ref"])&& (opts && opts["root_environment"])))) {
                                            {
                                                return await (await Environment.get_global("path_to_js_syntax"))((await sanitize_js_ref_name((tokens && tokens.name))).split("."))
                                            }
                                        } else if (check_true (((tokens && tokens["ref"])&& op_lookup[(tokens && tokens.name)]))) {
                                            return (tokens && tokens.name)
                                        } else if (check_true (((tokens && tokens["ref"])&& await (async function(){
                                            snt_name=await sanitize_js_ref_name((tokens && tokens.name));
                                            snt_value=await get_ctx_val(ctx,snt_name);
                                            if (check_true (await (async function(){
                                                let __array_op_rval__606=verbosity;
                                                 if (__array_op_rval__606 instanceof Function){
                                                    return await __array_op_rval__606(ctx) 
                                                } else {
                                                    return [__array_op_rval__606,ctx]
                                                }
                                            })())){
                                                {
                                                    await comp_log("compile: singleton: ","name: ",(tokens && tokens.name)," sanitized: ",snt_name,"found locally as:",snt_value)
                                                }
                                            };
                                            return await not((snt_value===undefined))
                                        })()))) {
                                            {
                                                refval=snt_value;
                                                if (check_true ((refval===ArgumentType))){
                                                    {
                                                        refval=snt_name
                                                    }
                                                };
                                                return await async function(){
                                                    if (check_true (((tokens && tokens["type"])==="literal"))) {
                                                        return refval
                                                    } else {
                                                        return await get_val(tokens,ctx)
                                                    }
                                                } ()
                                            }
                                        } else if (check_true (await contains_ques_((tokens && tokens.name),standard_types))) {
                                            return (tokens && tokens.name)
                                        } else if (check_true (await not((undefined===await get_lisp_ctx(ctx,(tokens && tokens.name)))))) {
                                            {
                                                if (check_true (await (async function(){
                                                    let __array_op_rval__607=verbosity;
                                                     if (__array_op_rval__607 instanceof Function){
                                                        return await __array_op_rval__607(ctx) 
                                                    } else {
                                                        return [__array_op_rval__607,ctx]
                                                    }
                                                })())){
                                                    {
                                                        await comp_log("compile: singleton: found global: ",(tokens && tokens.name))
                                                    }
                                                };
                                                return await compile_lisp_scoped_reference((tokens && tokens.name),ctx)
                                            }
                                        } else {
                                            {
                                                if (check_true (await (async function(){
                                                    let __array_op_rval__608=verbosity;
                                                     if (__array_op_rval__608 instanceof Function){
                                                        return await __array_op_rval__608() 
                                                    } else {
                                                        return [__array_op_rval__608]
                                                    }
                                                })())){
                                                    {
                                                        await comp_log("compile: resolver fall through:",(tokens && tokens.name),"-  not found globally or in local context")
                                                    }
                                                };
                                                throw new ReferenceError(("compile: unknown/not found reference: "+ (tokens && tokens.name)));
                                                
                                            }
                                        }
                                    } ()
                                }
                            } else {
                                {
                                    throw new SyntaxError("compile passed invalid compilation structure");
                                    
                                }
                            }
                        } ()
                    }
                } catch (__exception__567) {
                    if (__exception__567 instanceof Error) {
                        let e=__exception__567;
                        {
                            {
                                if (check_true ((is_error&& (e && e["handled"])))){
                                    {
                                        throw e;
                                        
                                    }
                                };
                                is_error={
                                    error:(e && e.name),source_name:source_name,message:(e && e.message),form:await source_from_tokens(tokens,expanded_tree),parent_forms:await source_from_tokens(tokens,expanded_tree,true),invalid:true
                                };
                                if (check_true (await not((e && e["handled"])))){
                                    {
                                        (errors).push(is_error);
                                        await async function(){
                                            e["handled"]=true;
                                            return e;
                                            
                                        }()
                                    }
                                };
                                await async function(){
                                    e["details"]=is_error;
                                    return e;
                                    
                                }();
                                if (check_true ((opts && opts["throw_on_error"]))){
                                    throw e;
                                    
                                }
                            }
                        }
                    }
                }
            }
        };
        final_token_assembly=null;
        main_log=await (async function(){
            if (check_true ((opts && opts["quiet_mode"]))){
                return log
            } else {
                return await defclog({
                    prefix:"compiler:",background:"green",color:"black"
                })
            }
        })();
        assemble_output=async function(js_tree,suppress_join) {
            let text;
            let in_quotes;
            let escaped;
            let escape_char;
            let format_depth;
            let last_t;
            let insert_indent;
            let process_output_token;
            let assemble;
            text=[];
            in_quotes=false;
            escaped=0;
            escape_char=await String.fromCharCode(92);
            format_depth=[];
            last_t=null;
            insert_indent=async function() {
                (text).push("\n");
                return await (async function() {
                    let __for_body__613=async function(spacer) {
                        return (text).push(spacer)
                    };
                    let __array__614=[],__elements__612=format_depth;
                    let __BREAK__FLAG__=false;
                    for(let __iter__611 in __elements__612) {
                        __array__614.push(await __for_body__613(__elements__612[__iter__611]));
                        if(__BREAK__FLAG__) {
                             __array__614.pop();
                            break;
                            
                        }
                    }return __array__614;
                     
                })()
            };
            process_output_token=async function(t) {
                escaped=await Math.max(0,(escaped- 1));
                return await async function(){
                    if (check_true (((t==="\"")&& (escaped===0)&& in_quotes))) {
                        {
                            in_quotes=false;
                            return (text).push(t)
                        }
                    } else if (check_true (((t==="\"")&& (escaped===0)))) {
                        {
                            in_quotes=true;
                            return (text).push(t)
                        }
                    } else if (check_true ((t===escape_char))) {
                        {
                            (escaped===2);
                            return (text).push(t)
                        }
                    } else if (check_true ((await not(in_quotes)&& (t==="{")))) {
                        {
                            (text).push(t);
                            (format_depth).push("    ");
                            return await insert_indent()
                        }
                    } else if (check_true ((await not(in_quotes)&& await starts_with_ques_("}",t)))) {
                        {
                            (format_depth).pop();
                            await insert_indent();
                            return (text).push(t)
                        }
                    } else if (check_true ((await not(in_quotes)&& (t===";")))) {
                        {
                            (text).push(t);
                            return await insert_indent()
                        }
                    } else if (check_true ((false&& await not(in_quotes)&& await starts_with_ques_("/*",t)))) {
                        {
                            (text).push(t);
                            return await insert_indent()
                        }
                    } else {
                        {
                            return (text).push(t)
                        }
                    }
                } ()
            };
            assemble=async function(js_tokens) {
                return await (async function() {
                    let __for_body__617=async function(t) {
                        return await async function(){
                            if (check_true ((t instanceof Array))) {
                                {
                                    return await assemble(t)
                                }
                            } else if (check_true (("object"===typeof t))) {
                                {
                                    if (check_true ((t && t["source_comment"]))){
                                        (text).push(("/* "+ (t && t["source_comment"])+ " */"))
                                    };
                                    if (check_true ((t && t["comment"]))){
                                        {
                                            (text).push(("/* "+ (t && t["comment"])+ " */"));
                                            return await insert_indent()
                                        }
                                    }
                                }
                            } else if (check_true (t instanceof Function)) {
                                {
                                    return await async function(){
                                        if (check_true (((t && t.name)&& await contains_ques_((t && t.name),standard_types)))) {
                                            return (text).push((t && t.name))
                                        } else if (check_true (await (await Environment.get_global("ends_with?"))("{ [native code] }",await t["toString"]()))) {
                                            {
                                                throw new ReferenceError(("cannot capture source of: "+ (t && t.name)));
                                                
                                            }
                                        } else {
                                            return (text).push(t)
                                        }
                                    } ()
                                }
                            } else {
                                {
                                    if (check_true ((opts && opts["formatted_output"]))){
                                        return await process_output_token(t)
                                    } else {
                                        return (text).push(t)
                                    }
                                }
                            }
                        } ()
                    };
                    let __array__618=[],__elements__616=js_tokens;
                    let __BREAK__FLAG__=false;
                    for(let __iter__615 in __elements__616) {
                        __array__618.push(await __for_body__617(__elements__616[__iter__615]));
                        if(__BREAK__FLAG__) {
                             __array__618.pop();
                            break;
                            
                        }
                    }return __array__618;
                     
                })()
            };
            {
                await assemble(await flatten(await (async function(){
                    let __array_op_rval__619=js_tree;
                     if (__array_op_rval__619 instanceof Function){
                        return await __array_op_rval__619() 
                    } else {
                        return [__array_op_rval__619]
                    }
                })()));
                if (check_true (suppress_join)){
                    return text
                } else {
                    {
                        return (text).join("")
                    }
                }
            }
        };
        ;
        if (check_true ((null==Environment))){
            throw new EvalError("Compiler: No environment passed in options.");
            
        };
        if (check_true ((opts && opts["show_hints"]))){
            {
                show_hints=true
            }
        };
        if (check_true (await Environment["get_global"].call(Environment,"__VERBOSITY__"))){
            {
                {
                    let verbosity_level;
                    verbosity_level=await Environment["get_global"].call(Environment,"__VERBOSITY__");
                    await async function(){
                        if (check_true ((verbosity_level>4))) {
                            {
                                verbosity=check_verbosity;
                                return show_hints=true
                            }
                        } else if (check_true ((verbosity_level>3))) {
                            show_hints=true
                        }
                    } ()
                }
            }
        };
        if (check_true (await (async function(){
            let __array_op_rval__620=verbosity;
             if (__array_op_rval__620 instanceof Function){
                return await __array_op_rval__620(ctx) 
            } else {
                return [__array_op_rval__620,ctx]
            }
        })())){
            {
                await (async function(){
                    let __array_op_rval__621=main_log;
                     if (__array_op_rval__621 instanceof Function){
                        return await __array_op_rval__621("namespace set to: ",(Environment && Environment["namespace"])) 
                    } else {
                        return [__array_op_rval__621,"namespace set to: ",(Environment && Environment["namespace"])]
                    }
                })();
                if (check_true ((opts && opts["fully_qualified_globals"]))){
                    {
                        await (async function(){
                            let __array_op_rval__622=main_log;
                             if (__array_op_rval__622 instanceof Function){
                                return await __array_op_rval__622("fully qualified globals") 
                            } else {
                                return [__array_op_rval__622,"fully qualified globals"]
                            }
                        })()
                    }
                }
            }
        };
        await set_ctx(root_ctx,break_out,false);
        await async function(){
            root_ctx["defined_lisp_globals"]=new Object();
            return root_ctx;
            
        }();
        await set_ctx(root_ctx,"__COMPLETION_SCOPE__",{
            id:completion_scope_id,root_block_id:null,completion_records:[],is_top:true
        });
        await set_ctx(root_ctx,"__GLOBALS__",new Set());
        await set_ctx(root_ctx,"__EXTERNALS__",new Set());
        await set_ctx(root_ctx,"__SOURCE_NAME__",source_name);
        await set_ctx(root_ctx,"__LAMBDA_STEP__",-1);
        if (check_true (await (async function(){
            let __array_op_rval__624=verbosity;
             if (__array_op_rval__624 instanceof Function){
                return await __array_op_rval__624(ctx) 
            } else {
                return [__array_op_rval__624,ctx]
            }
        })())){
            {
                await (async function(){
                    let __array_op_rval__625=main_log;
                     if (__array_op_rval__625 instanceof Function){
                        return await __array_op_rval__625("root_ctx: ",root_ctx) 
                    } else {
                        return [__array_op_rval__625,"root_ctx: ",root_ctx]
                    }
                })()
            }
        };
        output=await (async function(){
             return await async function(){
                if (check_true ((opts && opts["special_operators"]))) {
                    {
                        return await (await Environment.get_global("make_set"))(await (await Environment.get_global("keys"))(op_lookup))
                    }
                } else if (check_true ((opts && opts["only_tokens"]))) {
                    return await tokenize(tree,root_ctx)
                } else if (check_true (is_error)) {
                    return [{
                        ctype:"CompileError"
                    },is_error]
                } else {
                    {
                        try {
                            if (check_true ((await not((opts && opts["root_environment"]))&& ((first_level_setup && first_level_setup.length)===0)&& ((opts && opts["ctx"] && opts["ctx"]["scope"]) instanceof Object)))){
                                {
                                    dynamic_references_ques_=false;
                                    await (async function() {
                                        let __for_body__629=async function(pset) {
                                            {
                                                let name;
                                                let value;
                                                name=(pset && pset["0"]);
                                                value=(pset && pset["1"]);
                                                await set_ctx(root_ctx,name,value);
                                                return (first_level_setup).push(["let ",await sanitize_js_ref_name(name),"=",await (async function(){
                                                     return await compile(await tokenize(value,root_ctx),root_ctx,101) 
                                                })(),";"])
                                            }
                                        };
                                        let __array__630=[],__elements__628=await (await Environment.get_global("pairs"))((opts && opts["ctx"] && opts["ctx"]["scope"]));
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__627 in __elements__628) {
                                            __array__630.push(await __for_body__629(__elements__628[__iter__627]));
                                            if(__BREAK__FLAG__) {
                                                 __array__630.pop();
                                                break;
                                                
                                            }
                                        }return __array__630;
                                         
                                    })()
                                }
                            };
                            final_token_assembly=await tokenize(tree,root_ctx)
                        } catch (__exception__626) {
                            if (__exception__626 instanceof Error) {
                                let e=__exception__626;
                                {
                                    is_error=e
                                }
                            }
                        };
                        await async function(){
                            if (check_true ((is_error&& (opts && opts["throw_on_error"])))) {
                                throw is_error;
                                
                            } else if (check_true ((is_error instanceof SyntaxError))) {
                                {
                                    (errors).push(is_error);
                                    return is_error
                                }
                            } else if (check_true (is_error)) {
                                {
                                    (errors).push(is_error);
                                    return is_error
                                }
                            } else if (check_true ((null==final_token_assembly))) {
                                {
                                    is_error=new EvalError("Pre-Compilation Error");
                                    return (errors).push(is_error)
                                }
                            } else {
                                {
                                    if (check_true ((opts && opts["on_final_token_assembly"]))){
                                        await opts["on_final_token_assembly"].call(opts,final_token_assembly)
                                    };
                                    assembly=await (async function(){
                                         return await compile(final_token_assembly,root_ctx,0) 
                                    })();
                                    if (check_true ((is_error&& (opts && opts["throw_on_error"])))){
                                        {
                                            throw is_error;
                                            
                                        }
                                    };
                                    if (check_true (await not(is_error))){
                                        {
                                            if (check_true ((assembly instanceof Array))){
                                                {
                                                    await check_statement_completion(root_ctx,assembly)
                                                }
                                            }
                                        }
                                    };
                                    return assembly
                                }
                            }
                        } ();
                        if (check_true ((opts && opts["root_environment"]))){
                            {
                                has_lisp_globals=false
                            }
                        };
                        if (check_true (((assembly && assembly["0"] && assembly["0"]["ctype"])&& (assembly && assembly["0"] && assembly["0"]["ctype"]) instanceof Function))){
                            {
                                await async function(){
                                    let __target_obj__631=(assembly && assembly["0"]);
                                    __target_obj__631["ctype"]=await map_value_to_ctype((assembly && assembly["0"] && assembly["0"]["ctype"]));
                                    return __target_obj__631;
                                    
                                }()
                            }
                        };
                        await async function(){
                            if (check_true ((await not(is_error)&& assembly&& (await first(assembly) instanceof Object)&& await (async function(){
                                let __targ__632=await first(assembly);
                                if (__targ__632){
                                     return(__targ__632)["ctype"]
                                } 
                            })()&& (await not((await (async function(){
                                let __targ__633=await first(assembly);
                                if (__targ__633){
                                     return(__targ__633)["ctype"]
                                } 
                            })() instanceof String || typeof await (async function(){
                                let __targ__633=await first(assembly);
                                if (__targ__633){
                                     return(__targ__633)["ctype"]
                                } 
                            })()==='string'))|| await (async function(){
                                let val;
                                val=await (async function(){
                                    let __targ__634=await first(assembly);
                                    if (__targ__634){
                                         return(__targ__634)["ctype"]
                                    } 
                                })();
                                return (await not((val==="assignment"))&& await not(await contains_ques_("block",val))&& await not(await contains_ques_("unction",val)))
                            })())))) {
                                {
                                    return await async function(){
                                        let __target_obj__635=(assembly && assembly["0"]);
                                        __target_obj__635["ctype"]="statement";
                                        return __target_obj__635;
                                        
                                    }()
                                }
                            } else if (check_true ((assembly&& (await first(assembly) instanceof String || typeof await first(assembly)==='string')&& (await first(assembly)==="throw")))) {
                                return assembly=await (async function(){
                                     return [{
                                        ctype:"block"
                                    },assembly] 
                                })()
                            } else if (check_true ((await not(is_error)&& assembly&& (await not((await first(assembly) instanceof Object))|| await not(await (async function(){
                                let __targ__636=await first(assembly);
                                if (__targ__636){
                                     return(__targ__636)["ctype"]
                                } 
                            })()))))) {
                                {
                                    if (check_true (dynamic_references_ques_)){
                                        return assembly=await (async function(){
                                             return [{
                                                ctype:"block"
                                            },["{",first_level_setup,";","return ",assembly,"};"]] 
                                        })()
                                    } else {
                                        return assembly=await (async function(){
                                             return [{
                                                ctype:"statement"
                                            },assembly] 
                                        })()
                                    }
                                }
                            } else if (check_true (is_error)) {
                                return is_error
                            } else if (check_true ((null==assembly))) {
                                return assembly=[]
                            }
                        } ();
                        if (check_true (is_error)){
                            {
                                return [{
                                    ctype:"FAIL"
                                },errors]
                            }
                        } else {
                            if (check_true ((await first(assembly) instanceof Object))){
                                return [await add({
                                    has_lisp_globals:has_lisp_globals,requires:await (async function(){
                                         return await (await Environment.get_global("to_array"))(referenced_global_symbols) 
                                    })(),externals:await (async function(){
                                         return await (await Environment.get_global("to_array"))(referenced_externals) 
                                    })()
                                },(assembly).shift()),await assemble_output(assembly)]
                            } else {
                                return [{
                                    has_lisp_globals:has_lisp_globals,requires:await (async function(){
                                         return await (await Environment.get_global("to_array"))(referenced_global_symbols) 
                                    })(),externals:await (async function(){
                                         return await (await Environment.get_global("to_array"))(referenced_externals) 
                                    })()
                                },await assemble_output(assembly)]
                            }
                        }
                    }
                }
            } () 
        })();
        if (check_true (((await first(output) instanceof Object)&& target_namespace))){
            {
                await async function(){
                    let __target_obj__637=await first(output);
                    __target_obj__637["namespace"]=target_namespace;
                    return __target_obj__637;
                    
                }()
            }
        };
        if (check_true ((opts && opts["error_report"]))){
            {
                await opts.error_report({
                    errors:errors,warnings:warnings
                })
            }
        };
        return output
    }
}
};__obj__1["set_repl"]=async function(key,value) {
    return await (await Environment.get_global("set_path"))(["repl",key],(await Environment.get_global("*env_config*")),value)
};__obj__1["repl_config"]=async function() {
    return await (await Environment.get_global("add"))({
        backtrace:false,raw_mode:false,output_processor:false
    },(await (await Environment.get_global("resolve_path"))(["repl"],(await Environment.get_global("*env_config*")))|| new Object()))
};__obj__1["if_undefined"]=async function(value,replacer) {
        return ["=:if",["=:==","=:undefined",value],replacer,value]
    };__obj__1["str"]=async function(...args) {
    args=await (await Environment.get_global("slice"))(args,0);
    return (args).join(" ")
};__obj__1["COPY_DATA"]=null;__obj__1["on_nil"]=async function(nil_form,value) {
    return ["=:let",[["=:v",value]],["=:if",["=:eq","=:v","=:nil"],nil_form,"=:v"]]
};__obj__1["on_empty"]=async function(on_empty_form,value) {
    return ["=:let",[["=:v",value]],["=:if",["=:or",["=:eq","=:v","=:nil"],["=:and",["=:is_array?","=:v"],["=:==",0,["=:length","=:v"]]],["=:and",["=:is_object?","=:v"],["=:==",["=:length","=:v"],0]]],on_empty_form,"=:v"]]
};__obj__1["sum"]=async function(vals) {
    return ["=:apply","=:add",vals]
};__obj__1["options_and_args"]=async function(arg_array) {
    return await async function(){
        if (check_true ((arg_array&& (arg_array instanceof Array)))) {
            {
                if (check_true ((await (await Environment.get_global("type"))((arg_array && arg_array["0"]))==="object"))){
                    return await (async function(){
                        let __array_op_rval__1=(arg_array && arg_array["0"]);
                         if (__array_op_rval__1 instanceof Function){
                            return await __array_op_rval__1(await (await Environment.get_global("slice"))(arg_array,1)) 
                        } else {
                            return [__array_op_rval__1,await (await Environment.get_global("slice"))(arg_array,1)]
                        }
                    })()
                } else {
                    return [null,arg_array]
                }
            }
        } else {
            return [null,arg_array]
        }
    } ()
};__obj__1["enum"]=async function(value_list) {
    let e=new Object();
    ;
    let i=-1;
    ;
    await (await Environment.get_global("assert"))((value_list instanceof Array),"Value_list must be an array");
    await (async function() {
        let __for_body__4=async function(v) {
            return await async function(){
                e[v]=i+=1;
                return e;
                
            }()
        };
        let __array__5=[],__elements__3=value_list;
        let __BREAK__FLAG__=false;
        for(let __iter__2 in __elements__3) {
            __array__5.push(await __for_body__4(__elements__3[__iter__2]));
            if(__BREAK__FLAG__) {
                 __array__5.pop();
                break;
                
            }
        }return __array__5;
         
    })();
    return e
};__obj__1["gen_id"]=async function(prefix) {
    return (""+ prefix+ "_"+ await Date.now())
};__obj__1["macros"]=async function() {
    let __collector;
    let __result;
    let __action;
    __collector=[];
    __result=null;
    __action=async function(v) {
        if (check_true ((v && v["1"] && v["1"]["macro"]))){
            return (v && v["0"])
        }
    };
    ;
    await (async function() {
        let __for_body__9=async function(__item) {
            __result=await __action(__item);
            if (check_true (__result)){
                return (__collector).push(__result)
            }
        };
        let __array__10=[],__elements__8=await (await Environment.get_global("pairs"))(Environment.definitions);
        let __BREAK__FLAG__=false;
        for(let __iter__7 in __elements__8) {
            __array__10.push(await __for_body__9(__elements__8[__iter__7]));
            if(__BREAK__FLAG__) {
                 __array__10.pop();
                break;
                
            }
        }return __array__10;
         
    })();
    return __collector
};__obj__1["pluck"]=async function(fields,data) {
    return ["=:each",data,fields]
};__obj__1["objects_from_list"]=async function(key_path,objects) {
    let obj;
    let path;
    obj=new Object();
    path=await (async function(){
        if (check_true ((key_path instanceof Array))){
            return key_path
        } else {
            return await (async function(){
                let __array_op_rval__11=key_path;
                 if (__array_op_rval__11 instanceof Function){
                    return await __array_op_rval__11() 
                } else {
                    return [__array_op_rval__11]
                }
            })()
        }
    })();
    await (async function() {
        let __for_body__14=async function(o) {
            return await async function(){
                obj[await (await Environment.get_global("resolve_path"))(path,o)]=o;
                return obj;
                
            }()
        };
        let __array__15=[],__elements__13=objects;
        let __BREAK__FLAG__=false;
        for(let __iter__12 in __elements__13) {
            __array__15.push(await __for_body__14(__elements__13[__iter__12]));
            if(__BREAK__FLAG__) {
                 __array__15.pop();
                break;
                
            }
        }return __array__15;
         
    })();
    return obj
};__obj__1["pairs_from_list"]=async function(value_list,size) {
    let container;
    let mod_size;
    let pset;
    let count;
    container=[];
    size=(size|| 2);
    mod_size=(size- 1);
    pset=[];
    count=0;
    await (async function() {
        let __for_body__19=async function(item) {
            (pset).push(item);
            if (check_true ((mod_size===(count% size)))){
                {
                    (container).push(pset);
                    pset=[]
                }
            };
            return count+=1
        };
        let __array__20=[],__elements__18=value_list;
        let __BREAK__FLAG__=false;
        for(let __iter__17 in __elements__18) {
            __array__20.push(await __for_body__19(__elements__18[__iter__17]));
            if(__BREAK__FLAG__) {
                 __array__20.pop();
                break;
                
            }
        }return __array__20;
         
    })();
    if (check_true ((await (await Environment.get_global("length"))(pset)>0))){
        (container).push(pset)
    };
    return container
};__obj__1["reorder_keys"]=async function(key_list,obj) {
    let objkeys;
    let rval;
    let __values__21= async function(){
        return await (async function(){
             return await (await Environment.get_global("nth"))(key_list,obj) 
        })()
    };
    {
        objkeys=await (await Environment.get_global("keys"))(obj);
        rval=new Object();
        let values=await __values__21();
        ;
        return await (await Environment.get_global("to_object"))(await (await Environment.get_global("pairs_from_list"))(await (async function(){
             return await (await Environment.get_global("interlace"))(key_list,values) 
        })()))
    }
};__obj__1["only"]=async function(fields,data) {
    return await async function(){
        if (check_true ((data instanceof Array))) {
            return await (await Environment.get_global("map"))(async function(v) {
                return await (await Environment.get_global("reorder_keys"))(fields,v)
            },data)
        } else if (check_true ((data instanceof Object))) {
            return await (await Environment.get_global("reorder_keys"))(fields,data)
        } else {
            return data
        }
    } ()
};__obj__1["from_universal_time"]=function(seconds) {
        let d;
        let ue;
        d=new Date(0);
        ue=(seconds- 2208988800);
         d["setUTCSeconds"].call(d,ue);
        return d
    };__obj__1["+="]=async function(...args) {
    let symbol;
    symbol=(args && args["0"]);
    args=await (await Environment.get_global("slice"))(args,1);
    return ["=:=",].concat(symbol,[["=:+",symbol,].concat(args)])
};__obj__1["minmax_index"]=async function(container) {
    let value_found=false;
    ;
    let idx_small=null;
    ;
    let idx_largest=null;
    ;
    let idx=0;
    ;
    let smallest=(await Environment.get_global("MAX_SAFE_INTEGER"));
    ;
    let biggest=(-1* (await Environment.get_global("MAX_SAFE_INTEGER")));
    ;
    if (check_true ((container&& (container instanceof Array)&& (await (await Environment.get_global("length"))(container)>0)))){
        {
            await (async function() {
                let __for_body__29=async function(value) {
                    return (await (await Environment.get_global("is_number?"))(value)&& await (async function(){
                        value_found=true;
                        if (check_true ((value<smallest))){
                            {
                                smallest=value;
                                idx_small=idx
                            }
                        };
                        if (check_true ((value>biggest))){
                            {
                                biggest=value;
                                idx_largest=idx
                            }
                        };
                        return idx+=1
                    })())
                };
                let __array__30=[],__elements__28=container;
                let __BREAK__FLAG__=false;
                for(let __iter__27 in __elements__28) {
                    __array__30.push(await __for_body__29(__elements__28[__iter__27]));
                    if(__BREAK__FLAG__) {
                         __array__30.pop();
                        break;
                        
                    }
                }return __array__30;
                 
            })();
            if (check_true (value_found)){
                return await (async function(){
                    let __array_op_rval__31=idx_small;
                     if (__array_op_rval__31 instanceof Function){
                        return await __array_op_rval__31(idx_largest) 
                    } else {
                        return [__array_op_rval__31,idx_largest]
                    }
                })()
            } else {
                return null
            }
        }
    } else {
        return null
    }
};__obj__1["invert_pairs"]=async function(value) {
    if (check_true ((value instanceof Array))){
        return await (await Environment.get_global("map"))(async function(v) {
            return await (async function(){
                let __array_op_rval__32=(v && v["1"]);
                 if (__array_op_rval__32 instanceof Function){
                    return await __array_op_rval__32((v && v["0"])) 
                } else {
                    return [__array_op_rval__32,(v && v["0"])]
                }
            })()
        },value)
    } else {
        throw new Error("invert_pairs passed a non-array value");
        
    }
};__obj__1["noop"]=async function(val) {
    return val
};__obj__1["apply_list_to_list"]=async function(operator,list1,list2) {
    return await (await Environment.get_global("map"))(async function(val,idx) {
        return await (async function(){
            let __array_op_rval__33=operator;
             if (__array_op_rval__33 instanceof Function){
                return await __array_op_rval__33(val,list1[(idx% await (await Environment.get_global("length"))(list1))]) 
            } else {
                return [__array_op_rval__33,val,list1[(idx% await (await Environment.get_global("length"))(list1))]]
            }
        })()
    },list2)
};__obj__1["apply_operator_list"]=async function(modifier_list,target_list) {
    return await (await Environment.get_global("map"))(async function(val,idx) {
        let op=await Environment["eval"].call(Environment,("=:"+ modifier_list[(idx% await (await Environment.get_global("length"))(modifier_list))]));
        ;
        return await (async function(){
            let __array_op_rval__34=op;
             if (__array_op_rval__34 instanceof Function){
                return await __array_op_rval__34(val) 
            } else {
                return [__array_op_rval__34,val]
            }
        })()
    },target_list)
};__obj__1["range_overlap?"]=async function(range_a,range_b) {
    return (((range_a && range_a["0"])<=(range_a && range_a["1"]))&& ((range_b && range_b["0"])<=(range_b && range_b["1"]))&& await (async function(){
        if (check_true (((((range_a && range_a["0"])<=(range_b && range_b["0"]))&& ((range_b && range_b["0"])<=(range_a && range_a["1"])))|| (((range_a && range_a["0"])>=(range_b && range_b["0"]))&& ((range_a && range_a["0"])<=(range_b && range_b["1"])))))){
            return true
        } else {
            return false
        }
    })())
};__obj__1["remaining_in_range"]=async function(value,check_range) {
    return await async function(){
        if (check_true (((value<=(check_range && check_range["1"]))&& (value>=(check_range && check_range["0"]))))) {
            return ((check_range && check_range["1"])- value)
        } else {
            return null
        }
    } ()
};__obj__1["form_id"]=async function(name) {
    return await (await Environment.get_global("replace"))(new RegExp("W","g"),"_",await (await Environment.get_global("replace"))(new RegExp("[+?':]","g"),"sssymss1",await (await Environment.get_global("replace"))("!","sexcs1",await (await Environment.get_global("replace"))("<","slts1",await (await Environment.get_global("replace"))(">","sgts1",(await (await Environment.get_global("split"))((name).toLowerCase()," ")).join("_"))))))
};__obj__1["from_key"]=function(value,sep_ques_,ignore_ques_) {
        if (check_true ((value instanceof String || typeof value==='string'))){
            {
                if (check_true (ignore_ques_)){
                    return value;
                    
                };
                sep_ques_=(sep_ques_|| "_");
                return  ( Environment.get_global("dtext"))(( ( function() {
                    let __for_body__38=function(v) {
                        return (""+  ( function() {
                            {
                                 let __call_target__= v["charAt"].call(v,0), __call_method__="toUpperCase";
                                return  __call_target__[__call_method__]()
                            } 
                        })()+  v["slice"].call(v,1))
                    };
                    let __array__39=[],__elements__37=(value).split(sep_ques_);
                    let __BREAK__FLAG__=false;
                    for(let __iter__36 in __elements__37) {
                        __array__39.push( __for_body__38(__elements__37[__iter__36]));
                        if(__BREAK__FLAG__) {
                             __array__39.pop();
                            break;
                            
                        }
                    }return __array__39;
                     
                })()).join(" "))
            }
        } else {
            return value
        }
    };__obj__1["from_key1"]=function(v) {
        return  ( Environment.get_global("from_key"))(v)
    };__obj__1["to_key"]=function(value,sep_ques_,ignore_ques_) {
        if (check_true ((value instanceof String || typeof value==='string'))){
            {
                if (check_true (ignore_ques_)){
                    return value;
                    
                };
                sep_ques_="_";
                let tokens= ( function() {
                    let __for_body__43=function(v) {
                        return (""+ (v).toLowerCase())
                    };
                    let __array__44=[],__elements__42=(value).split(" ");
                    let __BREAK__FLAG__=false;
                    for(let __iter__41 in __elements__42) {
                        __array__44.push( __for_body__43(__elements__42[__iter__41]));
                        if(__BREAK__FLAG__) {
                             __array__44.pop();
                            break;
                            
                        }
                    }return __array__44;
                     
                })();
                ;
                let rv=(tokens).join(sep_ques_);
                ;
                return rv
            }
        } else {
            {
                return value
            }
        }
    };__obj__1["is_object_or_function?"]=function anonymous(obj
) {
var type = typeof obj; return type === 'function' || type === 'object' && !!obj;
};__obj__1["extend"]=async function(target_object,source_object) {
    if (check_true (((target_object instanceof Object)&& (source_object instanceof Object)))){
        {
            await (async function() {
                let __for_body__47=async function(pset) {
                    return await async function(){
                        target_object[(pset && pset["0"])]=(pset && pset["1"]);
                        return target_object;
                        
                    }()
                };
                let __array__48=[],__elements__46=await (await Environment.get_global("pairs"))(source_object);
                let __BREAK__FLAG__=false;
                for(let __iter__45 in __elements__46) {
                    __array__48.push(await __for_body__47(__elements__46[__iter__45]));
                    if(__BREAK__FLAG__) {
                         __array__48.pop();
                        break;
                        
                    }
                }return __array__48;
                 
            })();
            return target_object
        }
    } else {
        return target_object
    }
};__obj__1["no_empties"]=async function(items) {
    let item_type=await (await Environment.get_global("sub_type"))(items);
    ;
    if (check_true (await (await Environment.get_global("not"))((item_type=="array")))){
        items=[items]
    };
    {
        let __collector;
        let __result;
        let __action;
        __collector=[];
        __result=null;
        __action=async function(value) {
            return await async function(){
                if (check_true ((null==value))) {
                    return false
                } else if (check_true ((""==value))) {
                    return false
                } else {
                    return value
                }
            } ()
        };
        ;
        await (async function() {
            let __for_body__52=async function(__item) {
                __result=await __action(__item);
                if (check_true (__result)){
                    return (__collector).push(__result)
                }
            };
            let __array__53=[],__elements__51=items;
            let __BREAK__FLAG__=false;
            for(let __iter__50 in __elements__51) {
                __array__53.push(await __for_body__52(__elements__51[__iter__50]));
                if(__BREAK__FLAG__) {
                     __array__53.pop();
                    break;
                    
                }
            }return __array__53;
             
        })();
        return __collector
    }
};__obj__1["first_with"]=async function(prop_list,data_value) {
    let rval;
    let found;
    rval=null;
    found=false;
    await (async function() {
        let __for_body__56=async function(p) {
            rval=data_value[p];
            if (check_true (await (await Environment.get_global("not"))((null==rval)))){
                {
                    found=true;
                    return __BREAK__FLAG__=true;
                    return
                }
            }
        };
        let __array__57=[],__elements__55=prop_list;
        let __BREAK__FLAG__=false;
        for(let __iter__54 in __elements__55) {
            __array__57.push(await __for_body__56(__elements__55[__iter__54]));
            if(__BREAK__FLAG__) {
                 __array__57.pop();
                break;
                
            }
        }return __array__57;
         
    })();
    if (check_true (found)){
        return rval
    } else {
        return null
    }
};__obj__1["fixed"]=async function(v,p) {
    if (check_true (p)){
        return await (async function() {
            {
                 let __call_target__=await parseFloat(v), __call_method__="toFixed";
                return await __call_target__[__call_method__].call(__call_target__,p)
            } 
        })()
    } else {
        return await (async function() {
            {
                 let __call_target__=await parseFloat(v), __call_method__="toFixed";
                return await __call_target__[__call_method__].call(__call_target__,3)
            } 
        })()
    }
};__obj__1["hide"]=async function(value) {
    return undefined
};__obj__1["array_to_object"]=async function(input_array) {
    let count;
    let output;
    let working_array;
    count=0;
    output=await (async function(){
         return await clone(new Object()) 
    })();
    working_array=await (async function(){
         return await clone(input_array) 
    })();
    await (async function(){
         let __test_condition__62=async function() {
            return (await (await Environment.get_global("length"))(working_array)>0)
        };
        let __body_ref__63=async function() {
            let v1=(working_array).shift();
            ;
            let v1t=await (async function(){
                 return await (await Environment.get_global("type"))(v1) 
            })();
            ;
            return await async function(){
                if (check_true ((v1t==="object"))) {
                    return output=await (await Environment.get_global("add"))(await (async function(){
                        let __array_op_rval__64=output;
                         if (__array_op_rval__64 instanceof Function){
                            return await __array_op_rval__64(v1) 
                        } else {
                            return [__array_op_rval__64,v1]
                        }
                    })())
                } else {
                    return await async function(){
                        output[v1]=(working_array).shift();
                        return output;
                        
                    }()
                }
            } ()
        };
        let __BREAK__FLAG__=false;
        while(await __test_condition__62()) {
             await __body_ref__63();
             if(__BREAK__FLAG__) {
                 break;
                
            }
        } ;
        
    })();
    return output
};__obj__1["split_text_in_array"]=async function(split_element,input_array) {
    let output=[];
    ;
    await (async function() {
        let __for_body__68=async function(item) {
            return await async function(){
                if (check_true ((item instanceof String || typeof item==='string'))) {
                    return (output).push(await (await Environment.get_global("split"))(item,split_element))
                } else {
                    return (output).push(await (async function(){
                         return [null,item] 
                    })())
                }
            } ()
        };
        let __array__69=[],__elements__67=input_array;
        let __BREAK__FLAG__=false;
        for(let __iter__66 in __elements__67) {
            __array__69.push(await __for_body__68(__elements__67[__iter__66]));
            if(__BREAK__FLAG__) {
                 __array__69.pop();
                break;
                
            }
        }return __array__69;
         
    })();
    return output
};__obj__1["words_and_quotes"]=async function(text) {
    if (check_true (await (await Environment.get_global("not"))((text==null)))){
        return await (await Environment.get_global("map"))(async function(x,i) {
            if (check_true ((0===(i% 2)))){
                return (await (await Environment.get_global("no_empties"))(((x).trim()).split(" "))).join(" ")
            } else {
                return x
            }
        },(text).split("\""))
    } else {
        return []
    }
};__obj__1["split_words"]=async function(text_string) {
    return await (await Environment.get_global("no_empties"))(await (async function(){
         return await (await Environment.get_global("map"))(async function(x,i) {
            if (check_true ((0===(i% 2)))){
                return await (await Environment.get_global("no_empties"))(((x).trim()).split(" "))
            } else {
                return await (async function(){
                    let __array_op_rval__70=x;
                     if (__array_op_rval__70 instanceof Function){
                        return await __array_op_rval__70() 
                    } else {
                        return [__array_op_rval__70]
                    }
                })()
            }
        },await (await Environment.get_global("words_and_quotes"))(text_string)) 
    })())
};__obj__1["from_style_text"]=async function(text) {
    let semi_reg;
    let colon_reg;
    semi_reg=await RegExp(";\n ","g");
    colon_reg=await RegExp(": ","g");
    return await (await Environment.get_global("no_empties"))(await (async function(){
         return await (await Environment.get_global("map"))(async function(x) {
            return [((x && x["0"])).trim(),(x && x["1"])]
        },await (async function(){
             return await (await Environment.get_global("map"))(async function(v) {
                return (await (await Environment.get_global("replace"))(colon_reg,":",v)).split(":")
            },await (await Environment.get_global("flatten"))(await (async function(){
                 return await (await Environment.get_global("map"))(async function(v) {
                    return (await (await Environment.get_global("replace"))(semi_reg,";",v)).split(";")
                },await (await Environment.get_global("words_and_quotes"))(text)) 
            })())) 
        })()) 
    })())
};__obj__1["sha1"]=async function(text) {
    if (check_true ((text instanceof String || typeof text==='string'))){
        {
            let buffer;
            let hash;
            let hexcodes;
            let view;
            buffer=await (async function() {
                {
                     let __call_target__=new TextEncoder("utf-8"), __call_method__="encode";
                    return await __call_target__[__call_method__].call(__call_target__,text)
                } 
            })();
            hash=await crypto.subtle["digest"].call(crypto.subtle,"SHA-1",buffer);
            hexcodes=[];
            view=new DataView(hash);
            await (async function() {
                let __for_body__73=async function(i) {
                    return (hexcodes).push(await (async function() {
                        {
                             let __call_target__=await (async function() {
                                {
                                     let __call_target__=await view["getUint8"].call(view,i), __call_method__="toString";
                                    return await __call_target__[__call_method__].call(__call_target__,16)
                                } 
                            })(), __call_method__="padStart";
                            return await __call_target__[__call_method__].call(__call_target__,2,0)
                        } 
                    })())
                };
                let __array__74=[],__elements__72=await (await Environment.get_global("range"))((view && view["byteLength"]));
                let __BREAK__FLAG__=false;
                for(let __iter__71 in __elements__72) {
                    __array__74.push(await __for_body__73(__elements__72[__iter__71]));
                    if(__BREAK__FLAG__) {
                         __array__74.pop();
                        break;
                        
                    }
                }return __array__74;
                 
            })();
            return (hexcodes).join("")
        }
    } else {
        throw new TypeError(("sha1: requires a single string as an argument - got "+ await subtype(text)));
        
    }
};__obj__1["remove_if"]=async function(f,container) {
    let __collector;
    let __result;
    let __action;
    __collector=[];
    __result=null;
    __action=async function(v) {
        if (check_true (await (await Environment.get_global("not"))(await (async function(){
            let __array_op_rval__75=f;
             if (__array_op_rval__75 instanceof Function){
                return await __array_op_rval__75(v) 
            } else {
                return [__array_op_rval__75,v]
            }
        })()))){
            return v
        }
    };
    ;
    await (async function() {
        let __for_body__78=async function(__item) {
            __result=await __action(__item);
            if (check_true (__result)){
                return (__collector).push(__result)
            }
        };
        let __array__79=[],__elements__77=container;
        let __BREAK__FLAG__=false;
        for(let __iter__76 in __elements__77) {
            __array__79.push(await __for_body__78(__elements__77[__iter__76]));
            if(__BREAK__FLAG__) {
                 __array__79.pop();
                break;
                
            }
        }return __array__79;
         
    })();
    return __collector
};__obj__1["filter"]=async function(f,container) {
    let __collector;
    let __result;
    let __action;
    __collector=[];
    __result=null;
    __action=async function(v) {
        if (check_true (await (async function(){
            let __array_op_rval__80=f;
             if (__array_op_rval__80 instanceof Function){
                return await __array_op_rval__80(v) 
            } else {
                return [__array_op_rval__80,v]
            }
        })())){
            return v
        }
    };
    ;
    await (async function() {
        let __for_body__83=async function(__item) {
            __result=await __action(__item);
            if (check_true (__result)){
                return (__collector).push(__result)
            }
        };
        let __array__84=[],__elements__82=container;
        let __BREAK__FLAG__=false;
        for(let __iter__81 in __elements__82) {
            __array__84.push(await __for_body__83(__elements__82[__iter__81]));
            if(__BREAK__FLAG__) {
                 __array__84.pop();
                break;
                
            }
        }return __array__84;
         
    })();
    return __collector
};__obj__1["add_days"]=async function(date_obj,num_days) {
    await date_obj["setDate"].call(date_obj,await (await Environment.get_global("add"))(await date_obj["getDate"](),num_days));
    return date_obj
};__obj__1["day_of_week"]=async function(dval) {
    return await dval["getDay"]()
};__obj__1["add_hours"]=async function(date_obj,hours) {
    await date_obj["setHours"].call(date_obj,hours);
    return date_obj
};__obj__1["clear_time"]=async function(date_obj) {
    await date_obj["setHours"].call(date_obj,0,0,0,0);
    return date_obj
};__obj__1["yesterday"]=async function() {
    let d1;
    let d2;
    d1=new Date();
    d2=new Date();
    return [await (await Environment.get_global("clear_time"))(await (await Environment.get_global("add_days"))(d1,-1)),await (await Environment.get_global("add_hours"))(await (await Environment.get_global("clear_time"))(await (await Environment.get_global("add_days"))(d2,-1)),24)]
};__obj__1["next_sunday"]=async function(dval) {
    let dv=(dval|| new Date());
    ;
    return await (await Environment.get_global("clear_time"))(await (await Environment.get_global("add_days"))(dv,(7- await (await Environment.get_global("day_of_week"))(dv))))
};__obj__1["last_sunday"]=async function(dval) {
    let dv=(dval|| new Date());
    ;
    return await (await Environment.get_global("clear_time"))(await (await Environment.get_global("add_days"))(dv,(-1* await (await Environment.get_global("day_of_week"))(dv))))
};__obj__1["day_before_yesterday"]=async function() {
    let d1;
    let d2;
    d1=await (await Environment.get_global("clear_time"))(await (await Environment.get_global("add_days"))(new Date(),-2));
    d2=await (await Environment.get_global("clear_time"))(await (await Environment.get_global("add_days"))(new Date(),-1));
    return await (async function(){
        let __array_op_rval__93=d1;
         if (__array_op_rval__93 instanceof Function){
            return await __array_op_rval__93(d2) 
        } else {
            return [__array_op_rval__93,d2]
        }
    })()
};__obj__1["last_week"]=async function() {
    let d1;
    let d2;
    d1=new Date();
    d2=new Date();
    return [await (await Environment.get_global("clear_time"))(await (await Environment.get_global("add_days"))(await (await Environment.get_global("next_sunday"))(),-14)),await (await Environment.get_global("last_sunday"))()]
};__obj__1["midnight-to-midnight"]=async function(dval) {
    let d1;
    let d2;
    d1=await (await Environment.get_global("clear_time"))(new Date(dval));
    d2=await (await Environment.get_global("clear_time"))(new Date(dval));
    return await (async function(){
        let __array_op_rval__94=d1;
         if (__array_op_rval__94 instanceof Function){
            return await __array_op_rval__94(await (await Environment.get_global("add_hours"))(d2,24)) 
        } else {
            return [__array_op_rval__94,await (await Environment.get_global("add_hours"))(d2,24)]
        }
    })()
};__obj__1["date_to_string"]=async function(date_val,str_layout) {
    let split_regex;
    let comps;
    let t_flag;
    let construction;
    let t_sep;
    let acc;
    let date_comps;
    let formatter;
    let add_formatter;
    let format_desc;
    split_regex=new RegExp("([\.:\ T/, \-]+)","g");
    comps=(((str_layout instanceof String || typeof str_layout==='string')&& (str_layout).split(split_regex))|| []);
    t_flag=null;
    construction=[];
    t_sep=null;
    acc=[];
    date_comps=null;
    formatter=null;
    add_formatter=async function(key,value) {
        await async function(){
            if (check_true ((key==="fractionalSecondDigits"))) {
                return (construction).push("fractionalSecond")
            } else if (check_true ((key==="hour24"))) {
                {
                    (construction).push("hour");
                    await async function(){
                        format_desc["hourCycle"]="h24";
                        return format_desc;
                        
                    }();
                    key="hour"
                }
            } else {
                (construction).push(key)
            }
        } ();
        return await async function(){
            format_desc[key]=value;
            return format_desc;
            
        }()
    };
    format_desc=new Object();
    await (async function() {
        let __for_body__99=async function(c) {
            return await async function(){
                if (check_true ((c==="yyyy"))) {
                    return await add_formatter("year","numeric")
                } else if (check_true ((c==="yy"))) {
                    return await add_formatter("year","2-digit")
                } else if (check_true ((c==="dd"))) {
                    return await add_formatter("day","2-digit")
                } else if (check_true ((c==="d"))) {
                    return await add_formatter("day","numeric")
                } else if (check_true ((c==="MM"))) {
                    return await add_formatter("month","2-digit")
                } else if (check_true ((c==="M"))) {
                    return await add_formatter("month","numeric")
                } else if (check_true ((c==="HH"))) {
                    return await add_formatter("hour24","2-digit")
                } else if (check_true ((c==="H"))) {
                    return await add_formatter("hour24","numeric")
                } else if (check_true ((c==="h"))) {
                    return await add_formatter("hour","2-digit")
                } else if (check_true ((c==="h"))) {
                    return await add_formatter("hour","numeric")
                } else if (check_true ((c==="mm"))) {
                    return await add_formatter("minute","2-digit")
                } else if (check_true ((c==="m"))) {
                    return await add_formatter("minute","numeric")
                } else if (check_true ((c==="s"))) {
                    return await add_formatter("second","numeric")
                } else if (check_true ((c==="ss"))) {
                    return await add_formatter("second","2-digit")
                } else if (check_true ((c==="sss"))) {
                    return await add_formatter("fractionalSecondDigits",3)
                } else if (check_true ((c==="TZ"))) {
                    return await add_formatter("timeZoneName","short")
                } else if (check_true ((c==="D"))) {
                    return await add_formatter("weekday","narrow")
                } else if (check_true ((c==="DD"))) {
                    return await add_formatter("weekday","short")
                } else if (check_true ((c==="DDD"))) {
                    return await add_formatter("weekday","long")
                } else {
                    return (construction).push(c)
                }
            } ()
        };
        let __array__100=[],__elements__98=comps;
        let __BREAK__FLAG__=false;
        for(let __iter__97 in __elements__98) {
            __array__100.push(await __for_body__99(__elements__98[__iter__97]));
            if(__BREAK__FLAG__) {
                 __array__100.pop();
                break;
                
            }
        }return __array__100;
         
    })();
    formatter=new Intl.DateTimeFormat([],format_desc);
    date_comps=await (async function(){
         return await (await Environment.get_global("date_components"))(date_val,formatter) 
    })();
    return (await (async function() {
        let __for_body__103=async function(key) {
            return (date_comps[key]|| key)
        };
        let __array__104=[],__elements__102=construction;
        let __BREAK__FLAG__=false;
        for(let __iter__101 in __elements__102) {
            __array__104.push(await __for_body__103(__elements__102[__iter__101]));
            if(__BREAK__FLAG__) {
                 __array__104.pop();
                break;
                
            }
        }return __array__104;
         
    })()).join("")
};__obj__1["is_even?"]=async function(x) {
    return (0===(x% 2))
};__obj__1["is_odd?"]=async function(x) {
    return (1===(x% 2))
};__obj__1["set_path_value"]=async function(root,path,value) {
    if (check_true ((path instanceof Array))){
        {
            let idx;
            let parent;
            idx=await (await Environment.get_global("last"))(path);
            parent=await (await Environment.get_global("resolve_path"))(await (await Environment.get_global("chop"))(path),root);
            if (check_true (parent)){
                await async function(){
                    parent[idx]=value;
                    return parent;
                    
                }()
            };
            return parent
        }
    } else {
        {
            return root
        }
    }
};__obj__1["has_items?"]=async function(value) {
    if (check_true ((await (await Environment.get_global("not"))((null===value))&& (await (await Environment.get_global("length"))(value)>0)))){
        return true
    } else {
        return false
    }
};__obj__1["match_all_js"]=function anonymous(regex_str,search_string
) {
let rval=[];let regex=new RegExp(regex_str,'g'); while ((m = regex.exec(search_string)) !== null) {rval.push(m);  if (m.index === regex.lastIndex) {  regex.lastIndex++; }  } return rval;
};__obj__1["match_all"]=async function(regex_str,search_string) {
    return await (await Environment.get_global("match_all_js"))(regex_str,search_string)
};__obj__1["chop_front"]=function(container,amount) {
        amount=(amount|| 1);
        return   (function(){
            if (check_true ((container instanceof String || typeof container==='string'))) {
                return  container["substr"].call(container,amount)
            } else if (check_true ((container instanceof Array))) {
                return  container["slice"].call(container,amount)
            } else {
                throw new Error("chop: container must be a string or array");
                
            }
        } )()
    };__obj__1["compile_lisp"]=async function(text) {
    if (check_true (text)){
        return await (await Environment.get_global("reader"))(text)
    } else {
        return text
    }
};__obj__1["has_the_keys?"]=async function(key_list,obj) {
    let is_fit;
    is_fit=true;
    {
        await (async function() {
            let __for_body__108=async function(item) {
                return is_fit=((await (await Environment.get_global("resolve_path"))(item,obj)|| false)&& is_fit)
            };
            let __array__109=[],__elements__107=key_list;
            let __BREAK__FLAG__=false;
            for(let __iter__106 in __elements__107) {
                __array__109.push(await __for_body__108(__elements__107[__iter__106]));
                if(__BREAK__FLAG__) {
                     __array__109.pop();
                    break;
                    
                }
            }return __array__109;
             
        })();
        return is_fit
    }
};__obj__1["demarked_number"]=async function(value,separator,precision,no_show_sign) {
    let abs_value;
    let vf;
    let comps;
    let l;
    let sep;
    let prec;
    let sign;
    abs_value=await Math.abs(value);
    vf=await Math.floor(abs_value);
    comps=(await (await Environment.get_global("split"))((""+ vf),"")).slice(0).reverse();
    l=await (await Environment.get_global("length"))(comps);
    sep=(separator|| ",");
    prec=(await (async function(){
        if (check_true ((null==precision))){
            return 2
        }
    })()|| precision);
    sign=await (async function(){
        if (check_true (((value<0)&& await (await Environment.get_global("not"))(no_show_sign)))){
            return "-"
        } else {
            return ""
        }
    })();
    if (check_true ((l>3))){
        await (async function() {
            let __for_body__112=async function(p) {
                return await comps["splice"].call(comps,p,0,sep)
            };
            let __array__113=[],__elements__111=(await (await Environment.get_global("range"))(3,l,3)).slice(0).reverse();
            let __BREAK__FLAG__=false;
            for(let __iter__110 in __elements__111) {
                __array__113.push(await __for_body__112(__elements__111[__iter__110]));
                if(__BREAK__FLAG__) {
                     __array__113.pop();
                    break;
                    
                }
            }return __array__113;
             
        })()
    };
    return (sign+ ((comps).slice(0).reverse()).join("")+ await (await Environment.get_global("chop_front"))(await (async function() {
        {
             let __call_target__=(abs_value% vf), __call_method__="toFixed";
            return await __call_target__[__call_method__].call(__call_target__,prec)
        } 
    })()))
};__obj__1["measure_time"]=async function(...args) {
    let forms;
    forms=await (await Environment.get_global("slice"))(args,0);
    return ["=:let",[["=:end","=:nil"],["=:rval","=:nil"],["=:start",["=:time_in_millis"]]],["=:=","=:rval",["=:do",].concat(forms)],{ "time":["=:-",["=:time_in_millis"],"=:start"],"result":"=:rval"
}]
};__obj__1["compare_list_ends"]=async function(l1,l2) {
    let long_short;
    let long;
    let short;
    let match_count;
    let idx;
    let matcher;
    long_short=await (async function(){
        if (check_true ((await (await Environment.get_global("length"))(l1)>await (await Environment.get_global("length"))(l2)))){
            return [l1,l2]
        } else {
            return [l2,l1]
        }
    })();
    long=((long_short && long_short["0"])).slice(0).reverse();
    short=((long_short && long_short["1"])).slice(0).reverse();
    match_count=0;
    idx=0;
    matcher=async function(val) {
        if (check_true ((val===long[idx]))){
            match_count+=1
        };
        return idx=(idx+ 1)
    };
    await (await Environment.get_global("map"))(matcher,short);
    if (check_true ((match_count===await (await Environment.get_global("length"))(short)))){
        return true
    } else {
        return false
    }
};__obj__1["hsv_to_rgb"]=function anonymous(h,s,v
) {
{
        var r, g, b, i, f, p, q, t;
        if (arguments.length === 1) {
            s = h.s, v = h.v, h = h.h;
        }
        i = Math.floor(h * 6);
        f = h * 6 - i;
        p = v * (1 - s);
        q = v * (1 - f * s);
        t = v * (1 - (1 - f) * s);
        switch (i % 6) {
            case 0: r = v, g = t, b = p; break;
            case 1: r = q, g = v, b = p; break;
            case 2: r = p, g = v, b = t; break;
            case 3: r = p, g = q, b = v; break;
            case 4: r = t, g = p, b = v; break;
            case 5: r = v, g = p, b = q; break;
        }
        return {
            r: r,
            g: g,
            b: b
        }
    }
};__obj__1["rgb_to_text"]=async function(rgb) {
    return (await (async function() {
        let __for_body__116=async function(v) {
            let vs=await (async function() {
                {
                     let __call_target__=await Math.round((v* 255)), __call_method__="toString";
                    return await __call_target__[__call_method__].call(__call_target__,16)
                } 
            })();
            ;
            if (check_true ((await (await Environment.get_global("length"))(vs)===1))){
                return ("0"+ vs)
            } else {
                return vs
            }
        };
        let __array__117=[],__elements__115=rgb;
        let __BREAK__FLAG__=false;
        for(let __iter__114 in __elements__115) {
            __array__117.push(await __for_body__116(__elements__115[__iter__114]));
            if(__BREAK__FLAG__) {
                 __array__117.pop();
                break;
                
            }
        }return __array__117;
         
    })()).join("")
};__obj__1["text_to_rgb"]=async function(rgb_string) {
    if (check_true (rgb_string)){
        return await (async function(){
            let __array_op_rval__118=(await parseInt((await (async function(){
                 return await (await Environment.get_global("nth"))([0,1],rgb_string) 
            })()).join(''),16)/ 255);
             if (__array_op_rval__118 instanceof Function){
                return await __array_op_rval__118((await parseInt((await (async function(){
                     return await (await Environment.get_global("nth"))([2,3],rgb_string) 
                })()).join(''),16)/ 255),(await parseInt((await (async function(){
                     return await (await Environment.get_global("nth"))([4,5],rgb_string) 
                })()).join(''),16)/ 255)) 
            } else {
                return [__array_op_rval__118,(await parseInt((await (async function(){
                     return await (await Environment.get_global("nth"))([2,3],rgb_string) 
                })()).join(''),16)/ 255),(await parseInt((await (async function(){
                     return await (await Environment.get_global("nth"))([4,5],rgb_string) 
                })()).join(''),16)/ 255)]
            }
        })()
    } else {
        return null
    }
};__obj__1["rgb_to_hsv"]=async function(rgb) {
    if (check_true (rgb)){
        {
            let computedH;
            let computedS;
            let computedV;
            let r;
            let g;
            let b;
            let minRGB;
            let maxRGB;
            let d;
            let h;
            computedH=0;
            computedS=0;
            computedV=0;
            r=(rgb && rgb["0"]);
            g=(rgb && rgb["1"]);
            b=(rgb && rgb["2"]);
            minRGB=await Math.min(r,await Math.min(g,b));
            maxRGB=await Math.max(r,await Math.max(g,b));
            d=null;
            h=null;
            if (check_true ((minRGB===maxRGB))){
                return [0,0,minRGB];
                
            };
            d=await (async function(){
                 return await async function(){
                    if (check_true ((r===minRGB))) {
                        return (g- b)
                    } else if (check_true ((b===minRGB))) {
                        return (r- g)
                    } else {
                        return (b- r)
                    }
                } () 
            })();
            h=await (async function(){
                 return await async function(){
                    if (check_true ((r===minRGB))) {
                        return 3
                    } else if (check_true ((b===minRGB))) {
                        return 1
                    } else {
                        return 5
                    }
                } () 
            })();
            await console.log("");
            computedH=((60* (h- (d/ (maxRGB- minRGB))))/ 360);
            computedS=((maxRGB- minRGB)/ maxRGB);
            computedV=maxRGB;
            return await (async function(){
                let __array_op_rval__120=computedH;
                 if (__array_op_rval__120 instanceof Function){
                    return await __array_op_rval__120(computedS,computedV) 
                } else {
                    return [__array_op_rval__120,computedS,computedV]
                }
            })()
        }
    }
};__obj__1["tint_rgb"]=async function(rgb,tint_factor) {
    if (check_true ((rgb&& tint_factor))){
        return await (async function() {
            let __for_body__123=async function(c) {
                c=(255* c);
                return (await (await Environment.get_global("add"))(c,((255- c)* tint_factor))/ 255)
            };
            let __array__124=[],__elements__122=rgb;
            let __BREAK__FLAG__=false;
            for(let __iter__121 in __elements__122) {
                __array__124.push(await __for_body__123(__elements__122[__iter__121]));
                if(__BREAK__FLAG__) {
                     __array__124.pop();
                    break;
                    
                }
            }return __array__124;
             
        })()
    } else {
        return rgb
    }
};__obj__1["shade_rgb"]=async function(rgb,shade_factor) {
    if (check_true ((rgb&& shade_factor))){
        return await (async function() {
            let __for_body__127=async function(c) {
                c=(255* c);
                return ((c* (1- shade_factor))/ 255)
            };
            let __array__128=[],__elements__126=rgb;
            let __BREAK__FLAG__=false;
            for(let __iter__125 in __elements__126) {
                __array__128.push(await __for_body__127(__elements__126[__iter__125]));
                if(__BREAK__FLAG__) {
                     __array__128.pop();
                    break;
                    
                }
            }return __array__128;
             
        })()
    } else {
        return rgb
    }
};__obj__1["modify_color_ts"]=async function(rgb,factor) {
    if (check_true ((0<=factor))){
        return await (await Environment.get_global("tint_rgb"))(rgb,await Math.abs(factor))
    } else {
        return await (await Environment.get_global("shade_rgb"))(rgb,await Math.abs(factor))
    }
};__obj__1["is_lower?"]=async function(v) {
    let c=await v["charCodeAt"].call(v,0);
    ;
    return ((c>96)&& (c<123))
};__obj__1["is_upper?"]=async function(v) {
    let c=await v["charCodeAt"].call(v,0);
    ;
    return ((c>64)&& (c<91))
};__obj__1["camel_case_to_lower"]=async function(val) {
    let last_upper=0;
    ;
    return (await (async function(){
         return await (await Environment.get_global("map"))(async function(v,i) {
            return await async function(){
                if (check_true (((i>0)&& await (await Environment.get_global("is_upper?"))(v)&& (0===last_upper)))) {
                    {
                        last_upper=1;
                        return ("_"+ (v).toLowerCase())
                    }
                } else if (check_true (((i>0)&& await (await Environment.get_global("is_upper?"))(v)&& (last_upper>0)))) {
                    {
                        last_upper=2;
                        return (v).toLowerCase()
                    }
                } else if (check_true (((i===0)&& await (await Environment.get_global("is_upper?"))(v)))) {
                    return (v).toLowerCase()
                } else if (check_true (await (await Environment.get_global("is_lower?"))(v))) {
                    {
                        return await async function(){
                            if (check_true ((last_upper===2))) {
                                {
                                    last_upper=0;
                                    return ("_"+ (v).toLowerCase())
                                }
                            } else {
                                {
                                    last_upper=0;
                                    return (v).toLowerCase()
                                }
                            }
                        } ()
                    }
                } else {
                    {
                        last_upper=0;
                        return v
                    }
                }
            } ()
        },await (await Environment.get_global("split"))(val,"")) 
    })()).join("")
};__obj__1["scan_list"]=async function(regex,container) {
    let expr=regex;
    ;
    if (check_true (await (await Environment.get_global("not"))((await (await Environment.get_global("sub_type"))(regex)==="RegExp")))){
        {
            expr=new RegExp(regex)
        }
    };
    let cnt=0;
    ;
    let results=[];
    ;
    let r=null;
    ;
    await (async function() {
        let __for_body__131=async function(item) {
            r=await (async function(){
                if (check_true ((item instanceof String || typeof item==='string'))){
                    return await item["match"].call(item,expr)
                } else {
                    return await (async function() {
                        {
                             let __call_target__=(""+ item), __call_method__="match";
                            return await __call_target__[__call_method__].call(__call_target__,expr)
                        } 
                    })()
                }
            })();
            if (check_true (r)){
                (results).push(cnt)
            };
            return cnt+=1
        };
        let __array__132=[],__elements__130=(container|| []);
        let __BREAK__FLAG__=false;
        for(let __iter__129 in __elements__130) {
            __array__132.push(await __for_body__131(__elements__130[__iter__129]));
            if(__BREAK__FLAG__) {
                 __array__132.pop();
                break;
                
            }
        }return __array__132;
         
    })();
    return results
};__obj__1["gather_up_prop"]=async function(key,values) {
    return await async function(){
        if (check_true ((values instanceof Array))) {
            return await (await Environment.get_global("no_empties"))(await (async function(){
                 return await (await Environment.get_global("map"))(async function(v) {
                    return await async function(){
                        if (check_true ((v instanceof Array))) {
                            return await (await Environment.get_global("gather_up_prop"))(key,v)
                        } else if (check_true ((v instanceof Object))) {
                            return v[key]
                        }
                    } ()
                },values) 
            })())
        } else if (check_true ((values instanceof Object))) {
            return values[key]
        }
    } ()
};__obj__1["sum_up_prop"]=async function(key,values) {
    return await (await Environment.get_global("sum"))(await (await Environment.get_global("flatten"))(await (await Environment.get_global("gather_up_prop"))(key,values)))
};__obj__1["scan_for"]=async function(non_nil_prop,list_of_objects) {
    let rval=null;
    ;
    await (async function() {
        let __for_body__135=async function(val) {
            if (check_true ((val&& val[non_nil_prop]))){
                {
                    rval=val[non_nil_prop];
                    return __BREAK__FLAG__=true;
                    return
                }
            }
        };
        let __array__136=[],__elements__134=(list_of_objects|| []);
        let __BREAK__FLAG__=false;
        for(let __iter__133 in __elements__134) {
            __array__136.push(await __for_body__135(__elements__134[__iter__133]));
            if(__BREAK__FLAG__) {
                 __array__136.pop();
                break;
                
            }
        }return __array__136;
         
    })();
    return rval
};__obj__1["make_sort_buckets"]=async function() {
    let buckets;
    let push_to;
    buckets=new Object();
    push_to=async function(category,thing) {
        let place;
        place=null;
        if (check_true ((null==category))){
            return buckets
        } else {
            {
                place=buckets[category];
                if (check_true (place)){
                    (place).push(thing)
                } else {
                    await async function(){
                        buckets[category]=await (async function(){
                            let __array_op_rval__138=thing;
                             if (__array_op_rval__138 instanceof Function){
                                return await __array_op_rval__138() 
                            } else {
                                return [__array_op_rval__138]
                            }
                        })();
                        return buckets;
                        
                    }()
                };
                return thing
            }
        }
    };
    return push_to
};__obj__1["bytes_from_int_16"]=function anonymous(x
) {
{ let bytes = []; let i = 2; do { bytes[(1 - --i)] = x & (255); x = x>>8; } while ( i ) return bytes;}
};__obj__1["int_16_from_bytes"]=function anonymous(x,y
) {
 { let val = 0;  val +=y; val = val << 8; val +=x; return val; }
};__obj__1["parse_csv"]=async function(csv_data,options) {
    let lbuffer;
    let sepval;
    let sepval_r;
    let fixer_r;
    let interruptions;
    let line;
    let count;
    let tmp;
    let rval;
    let match_list;
    let lines;
    let total_lines;
    lbuffer=null;
    sepval=((options && options["separator"])|| ",");
    sepval_r=new RegExp(sepval,"g");
    fixer_r=new RegExp("!SEPVAL!","g");
    interruptions=((options && options["interruptions"])|| false);
    line=null;
    count=0;
    tmp=null;
    rval=null;
    match_list=null;
    lines=await (async function(){
         return await async function(){
            if (check_true ((csv_data instanceof Array))) {
                return csv_data
            } else if (check_true ((csv_data instanceof String || typeof csv_data==='string'))) {
                return (await (await Environment.get_global("replace"))(new RegExp("[\r]+","g"),"",csv_data)).split("\n")
            }
        } () 
    })();
    total_lines=(lines && lines.length);
    if (check_true (interruptions)){
        await (await Environment.get_global("sleep"))(0.1)
    };
    return await (async function() {
        let __for_body__141=async function(v) {
            if (check_true (interruptions)){
                {
                    count+=1;
                    if (check_true (((count% 1000)===0))){
                        {
                            await (await Environment.get_global("sleep"))(0.1);
                            if (check_true ((options && options["notifier"]))){
                                await (async function(){
                                    let __array_op_rval__143=(options && options["notifier"]);
                                     if (__array_op_rval__143 instanceof Function){
                                        return await __array_op_rval__143((count/ total_lines),count,total_lines) 
                                    } else {
                                        return [__array_op_rval__143,(count/ total_lines),count,total_lines]
                                    }
                                })()
                            }
                        }
                    }
                }
            };
            match_list=(await (await Environment.get_global("scan_str"))(new RegExp("\"([A-Za-z0-9, .  :;]+)\"","g"),v)).slice(0).reverse();
            line=await (async function(){
                if (check_true (((match_list && match_list.length)>0))){
                    {
                        rval=[];
                        await (async function() {
                            let __for_body__146=async function(m) {
                                return (rval).push(await (async function(){
                                    let __array_op_rval__148=(m && m["index"]);
                                     if (__array_op_rval__148 instanceof Function){
                                        return await __array_op_rval__148(await (await Environment.get_global("replace"))(sepval_r,"!SEPVAL!",m["1"]),m["1"]) 
                                    } else {
                                        return [__array_op_rval__148,await (await Environment.get_global("replace"))(sepval_r,"!SEPVAL!",m["1"]),m["1"]]
                                    }
                                })())
                            };
                            let __array__147=[],__elements__145=match_list;
                            let __BREAK__FLAG__=false;
                            for(let __iter__144 in __elements__145) {
                                __array__147.push(await __for_body__146(__elements__145[__iter__144]));
                                if(__BREAK__FLAG__) {
                                     __array__147.pop();
                                    break;
                                    
                                }
                            }return __array__147;
                             
                        })();
                        tmp=v;
                        await (async function() {
                            let __for_body__151=async function(r) {
                                return tmp=(""+ await tmp["substr"].call(tmp,0,(r && r["0"]))+ (r && r["1"])+ await tmp["substr"].call(tmp,(2+ (r && r["0"])+ await (await Environment.get_global("length"))((r && r["2"])))))
                            };
                            let __array__152=[],__elements__150=rval;
                            let __BREAK__FLAG__=false;
                            for(let __iter__149 in __elements__150) {
                                __array__152.push(await __for_body__151(__elements__150[__iter__149]));
                                if(__BREAK__FLAG__) {
                                     __array__152.pop();
                                    break;
                                    
                                }
                            }return __array__152;
                             
                        })();
                        return tmp
                    }
                } else {
                    return v
                }
            })();
            return await (async function() {
                let __for_body__155=async function(segment) {
                    return await (await Environment.get_global("replace"))(fixer_r,sepval,segment)
                };
                let __array__156=[],__elements__154=(line).split(sepval);
                let __BREAK__FLAG__=false;
                for(let __iter__153 in __elements__154) {
                    __array__156.push(await __for_body__155(__elements__154[__iter__153]));
                    if(__BREAK__FLAG__) {
                         __array__156.pop();
                        break;
                        
                    }
                }return __array__156;
                 
            })()
        };
        let __array__142=[],__elements__140=lines;
        let __BREAK__FLAG__=false;
        for(let __iter__139 in __elements__140) {
            __array__142.push(await __for_body__141(__elements__140[__iter__139]));
            if(__BREAK__FLAG__) {
                 __array__142.pop();
                break;
                
            }
        }return __array__142;
         
    })()
};__obj__1["to_csv"]=async function(rows,delimiter) {
    let quote_quoter=new RegExp("\"","g");
    ;
    return (await (async function() {
        let __for_body__159=async function(row) {
            return (await (async function(){
                 return await (await Environment.get_global("map"))(async function(v) {
                    if (check_true (((v instanceof String || typeof v==='string')&& (await (await Environment.get_global("contains?"))(" ",(""+ v+ ""))|| await (await Environment.get_global("contains?"))(delimiter,v)|| await (await Environment.get_global("contains?"))("\"",v))))){
                        return ("\""+ await (await Environment.get_global("replace"))(quote_quoter,"\"\"",v)+ "\"")
                    } else {
                        return (""+ v+ "")
                    }
                },row) 
            })()).join(await (async function(){
                if (check_true (delimiter)){
                    return delimiter
                } else {
                    return ","
                }
            })())
        };
        let __array__160=[],__elements__158=rows;
        let __BREAK__FLAG__=false;
        for(let __iter__157 in __elements__158) {
            __array__160.push(await __for_body__159(__elements__158[__iter__157]));
            if(__BREAK__FLAG__) {
                 __array__160.pop();
                break;
                
            }
        }return __array__160;
         
    })()).join("\n")
};__obj__1["squeeze"]=async function(s) {
    return await (await Environment.get_global("replace"))(new RegExp(" ","g"),"",s)
};__obj__1["ensure_keys"]=async function(keylist,obj,default_value) {
    default_value=await (async function(){
        if (check_true ((undefined===default_value))){
            return null
        } else {
            return default_value
        }
    })();
    if (check_true ((null==obj))){
        {
            obj=new Object()
        }
    };
    await (async function() {
        let __for_body__163=async function(key) {
            if (check_true ((undefined===obj[key]))){
                {
                    return await async function(){
                        obj[key]=default_value;
                        return obj;
                        
                    }()
                }
            }
        };
        let __array__164=[],__elements__162=keylist;
        let __BREAK__FLAG__=false;
        for(let __iter__161 in __elements__162) {
            __array__164.push(await __for_body__163(__elements__162[__iter__161]));
            if(__BREAK__FLAG__) {
                 __array__164.pop();
                break;
                
            }
        }return __array__164;
         
    })();
    return obj
};__obj__1["show_time_in_words"]=function anonymous(seconds,options
) {
options=options||{}
        if (options['longForm']==null) {
            if (seconds<2) return "now";
            if (seconds<61) return parseInt(seconds)+" secs";
            if ((seconds>61)&&(seconds<120)) return "1 min";
            if (seconds<3601) {
                // less than an hour
                return parseInt(seconds/60)+" mins";
            }
        } else if (options['longForm']==true) {
            if (seconds<61) return parseInt(seconds)+" seconds";
            if ((seconds>61)&&(seconds<120)) return "1 minute";
            if (seconds<3601) {
                // less than an hour
                return parseInt(seconds / 60) + " minutes";
            }
        }

        if (seconds<86400) {
            return parseInt(seconds/3600)+" hours";
        }
        if (seconds<172801) {
            return parseInt(seconds/86400)+" day";
        }
        if (seconds < 31536000) {
            return parseInt(seconds/86400)+" days";
        }
        if (seconds < (2 * 31536000)) {
            return "1 year";
        }
        return parseInt(seconds/31536000)+" years";
 
};__obj__1["ago"]=async function(dval) {
    return await (await Environment.get_global("show_time_in_words"))(((await (async function() {
        {
             let __call_target__=new Date(), __call_method__="getTime";
            return await __call_target__[__call_method__]()
        } 
    })()- await dval["getTime"]())/ 1000))
};__obj__1["lifespan"]=async function(dval) {
    return await (await Environment.get_global("show_time_in_words"))(((await dval["getTime"]()- await (async function() {
        {
             let __call_target__=new Date(), __call_method__="getTime";
            return await __call_target__[__call_method__]()
        } 
    })())/ 1000))
};__obj__1["rotate_right"]=function(array_obj) {
        (array_obj).unshift((array_obj).pop());
        return array_obj
    };__obj__1["rotate_left"]=function(array_obj) {
        (array_obj).push((array_obj).shift());
        return array_obj
    };__obj__1["interpolate"]=function(from,to,steps) {
        let cur;
        let step_size;
        let tmp;
        let acc;
        cur=from;
        step_size=1;
        tmp=0;
        acc=[];
         ( Environment.get_global("assert"))(( ( Environment.get_global("is_number?"))(from)&&  ( Environment.get_global("is_number?"))(to)&&  ( Environment.get_global("is_number?"))(steps)),"interpolate: all arguments must be numbers");
         ( Environment.get_global("assert"))(( Math.abs((from- to))>0),"interpolate: from and to numbers cannot be the same");
         ( Environment.get_global("assert"))((steps>1),"interpolate: steps must be greater than 1");
        step_size=((to- from)/ (steps- 1));
        if (check_true ((to>from))){
            {
                 ( function(){
                     let __test_condition__166=function() {
                        return (cur<=to)
                    };
                    let __body_ref__167=function() {
                        (acc).push(cur);
                        return cur=(cur+ step_size)
                    };
                    let __BREAK__FLAG__=false;
                    while( __test_condition__166()) {
                          __body_ref__167();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                if (check_true (((acc && acc.length)<steps))){
                    (acc).push(to)
                }
            }
        } else {
            {
                 ( function(){
                     let __test_condition__168=function() {
                        return (cur>=to)
                    };
                    let __body_ref__169=function() {
                        (acc).push(cur);
                        return cur=(cur+ step_size)
                    };
                    let __BREAK__FLAG__=false;
                    while( __test_condition__168()) {
                          __body_ref__169();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                if (check_true (((acc && acc.length)<steps))){
                    (acc).push(to)
                }
            }
        };
        return acc
    };__obj__1["encode_to_base64"]=async function(array_buffer_data) {
    return new Promise(async function(resolve) {
        let __reader__170= async function(){
            return new FileReader()
        };
        let complete;
        {
            let reader=await __reader__170();
            ;
            complete=async function() {
                return await (async function(){
                    let __array_op_rval__171=resolve;
                     if (__array_op_rval__171 instanceof Function){
                        return await __array_op_rval__171(await (await Environment.get_global("second"))(((reader && reader["result"])).split(","))) 
                    } else {
                        return [__array_op_rval__171,await (await Environment.get_global("second"))(((reader && reader["result"])).split(","))]
                    }
                })()
            };
            await async function(){
                reader["onload"]=complete;
                return reader;
                
            }();
            return await reader["readAsDataURL"].call(reader,new Blob(await (async function(){
                let __array_op_rval__173=array_buffer_data;
                 if (__array_op_rval__173 instanceof Function){
                    return await __array_op_rval__173() 
                } else {
                    return [__array_op_rval__173]
                }
            })()))
        }
    })
};__obj__1["unload_core_ext"]=async function() {
    let count;
    let core_handle;
    count=0;
    core_handle=await Environment["get_namespace_handle"].call(Environment,"core");
    await (async function() {
        let __for_body__176=async function(def) {
            if (check_true (((def && def["source_name"])==="src/core-ext.lisp"))){
                {
                    console.log(("(undefine `"+ (def && def.name)+ ")"));
                    if (check_true (await core_handle["evaluate_local"].call(core_handle,("(undefine `"+ (def && def.name)+ ")")))){
                        return count+=1
                    }
                }
            }
        };
        let __array__177=[],__elements__175=(core_handle && core_handle["definitions"]);
        let __BREAK__FLAG__=false;
        for(let __iter__174 in __elements__175) {
            __array__177.push(await __for_body__176(__elements__175[__iter__174]));
            if(__BREAK__FLAG__) {
                 __array__177.pop();
                break;
                
            }
        }return __array__177;
         
    })();
    console.log(("removed "+ count+ " definitions."));
    return count
};__obj__1["documentation_coverage"]=async function(ns) {
    let env;
    let good;
    let missing;
    let total;
    env=await (async function(){
        if (check_true (ns)){
            return await Environment["get_namespace_handle"].call(Environment,ns)
        } else {
            return Environment
        }
    })();
    good=[];
    missing=[];
    total=0;
    await (async function() {
        let __for_body__180=async function(_pset) {
            {
                let sym;
                let meta;
                sym=(_pset && _pset["0"]);
                meta=(_pset && _pset["1"]);
                if (check_true ((meta && meta["description"]))){
                    return (good).push(sym)
                } else {
                    return (missing).push(sym)
                }
            }
        };
        let __array__181=[],__elements__179=await (await Environment.get_global("pairs"))((env && env["definitions"]));
        let __BREAK__FLAG__=false;
        for(let __iter__178 in __elements__179) {
            __array__181.push(await __for_body__180(__elements__179[__iter__178]));
            if(__BREAK__FLAG__) {
                 __array__181.pop();
                break;
                
            }
        }return __array__181;
         
    })();
    total=((good && good.length)+ (missing && missing.length));
    return {
        total:total,ratio:((good && good.length)/ total),num_good:(good && good.length),num_missing:(missing && missing.length),good:good,missing:missing
    }
};__obj__1["*lz_string_contents*"]="// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.4\n\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nconst LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\nreturn LZString;\n\n\n\n\n";__obj__1["LZString"]=await (async function(){ return "placeholder" })();__obj__1["html_package"]=await (async function(){ return ";; Juno HTML Pakage\n\n;; For browser based DOM utilization and manipulation\n\n;; Initializes and loads the html namespace \n;; (c) 2022 Kina\n;; Author: Alex Nygren\n\n(console.log \"HTML Package: \" (namespaces) (contains? \"html\" (namespaces)))\n\n(when (contains? \"html\" (namespaces))\n  (delete_namespace `html))\n\n(create_namespace `html { `serialize_with_image: false })\n\n\n(declare (namespace `html))\n\n\n;; Tag component names sourced from\n;; https://developer.mozilla.org/en-US/docs/Web/HTML/Element\n\n\n(defglobal *DOM_TAGS* [`html `base `head `link `meta `style `title\n                       `body `address `article `aside `footer `header\n                       `h1 `h2 `h3 `h4 `h5 `h6\n                       `main `nav `section\n                       `blockquote `dd `div `dl `dt `figcaption `figure\n                       `hr `li `menu `ol `p `pre `ul\n                       `a `abbr `b `bdi `bdo `br `cite `code `data `dfn `em\n                       `i `kbd `mark `q `rp `rt `ruby `s `samp `small `span\n                       `strong `sub `time `u `var `wbr\n                       `area `audio `img  `track `video\n                       `embed `iframe `object `picture `portal `source\n                       `svg `math `canvas `noscript `script\n                       `del `ins\n                       `caption `col `colgroup `table `tbody `td `tfoot\n                       `th `thead `tr\n                       `button `datalist `fieldset `form `input `label `legend\n                       `meter `optgroup `option `output `progress `select `textarea\n                       `details `dialog `summary \n                       `polygon `polyline `rect `circle `ellipse `line\n                       `slot `template ])\n\n\n(defmacro get_by_id (id)\n  `(-> document `getElementById ,#id)\n  {\n   `description: \"Given an id, this macro is shorthand for calling document.getElementById with the passed id\"\n   `usage: [\"id:string\"]\n   `tags: [\"html\" \"DOM\" \"id\" \"find\" ]\n   })\n\n(defun get_by_tag (tagname)\n  (if tagname\n    (-> document `querySelectorAll tagname)\n    (throw \"get_by_tag: invalid tagname provided\"))\n  {\n   `description: \"Deprecated: use query_all: Returns all tags in the document matching the provided tagname\"\n   `usage: [\"tagname:string\"]\n   `tags: [\"html\" \"DOM\" \"id\" \"find\" ]\n   })\n\n(defun query_all (query)\n  (if (is_string? query)\n    (-> document `querySelectorAll query)\n    (throw ReferenceError \"query_all: argument must be a string\"))\n  {\n   `description: \"Returns all tags in the document matching the provided tagname\"\n   `usage: [\"tagname:string\"]\n   `tags: [\"html\" \"DOM\" \"id\" \"find\" ]\n   })\n\n(defun append_children (parent children)\n  (when (and (is_element? parent)\n             (is_array? children))\n    (for_each (child children)\n              (-> parent `appendChild child)))\n  parent)\n\n(defun_sync is_input? (elem)\n   (if (== (sub_type elem) \"HTMLInputElement\")\n       true\n       false)\n   {\n     description: (+ \"If the given element is an HTMLInputElement type, then the function \"\n                     \"returns true, otherwise it returns false. \")\n     usage: [\"elem:Element\"]\n     tags: [ `ui `element `DOM `view html ]\n   })\n\n(defun generate_id (prefix)\n  (if (is_string? prefix)\n    (+ \"\" prefix \"-\" (time_in_millis) \"-\" (random_int 9999999))\n    (+ \"control-\" (time_in_millis) \"-\" (random_int 9999999))))\n\n\n(defmacro getAttribute (elem attrib)  ;; legacy\n  `(-> ,#elem `getAttribute ,#attrib)\n   {\n     description: (+ \"Use get_attribute<br>.Given a DOM Element and attribute text, \"\n                     \"returns the value of the attrbute or nil \"\n                     \"if not set. \")\n     usage: [\"element:Element\" \"attrib:string\" \"value:string\"]\n     tags: [\"DOM\" \"attribute\" \"element\" \"set\" \"property\"]\n     deprecated: \"get_attribute\"\n   })\n\n(defmacro get_attribute (elem attrib)\n  `(-> ,#elem `getAttribute ,#attrib)\n  {\n     description: (+ \"Given a DOM Element and attribute text, \"\n                     \"returns the value of the attrbute or nil \"\n                     \"if not set.\")\n     usage: [\"element:Element\" \"attrib:string\" \"value:string\"]\n     tags: [\"DOM\" \"attribute\" \"element\" \"set\" \"property\"]\n   })\n\n(defmacro set_attribute (elem attrib value)\n   `(-> ,#elem `getAttribute ,#attrib ,#value)\n   {\n     description: (+ \"Given a DOM Element, attribute text and value, sets \"\n                     \"the provided attribute to the value on the element. \"\n                     \"There is no return value.\")\n     usage: [\"element:Element\" \"attrib:string\" \"value:string\"]\n     tags: [\"DOM\" \"attribute\" \"element\" \"set\" \"property\"]\n   })\n;(defbinding (html/create_element (document.createElement document.createElement)))\n\n;(defglobal html/create_element (-> document.createElement `bind document)\n ;  {\n  ;  `description: \"Binding for document.createElement\"\n   ; `initializer: (quote  (-> document.createElement `bind document))\n    ;})\n\n(defun_sync create_element (element_name)\n  (-> document `createElement element_name))\n\n;; first create the base constructor function which will be called\n;; with the tag to create\n\n(defun_sync append_children (parent children)\n  (do\n    (for_each (child (or children []))\n              (cond\n                (is_array? child)\n                (append_children parent child)\n                (is_element? child)\n                (-> parent `appendChild child)                               \n                child.view\n                (-> parent `appendChild child.view)\n                else\n                (-> parent `appendChild (-> document `createTextNode (+ \"\" child)))))\n    parent))\n\n(defun_sync create_dom_element (element_name `& args)\n  (let\n      ((opts (if (and (is_object? args.0)\n                      (not (is_array? args.0))\n                      (not (is_element? args.0)))\n               args.0\n               nil))\n       (content (if opts\n                  (if (> args.length 0)\n                    (rest args)\n                    [])\n                  (or args\n                      [])))       \n       (elem (-> document `createElement element_name)))\n    \n    (when opts\n      (for_each (pset (pairs opts))\n                (do\n                  (cond\n                    (is_function? pset.1)\n                    (set_prop elem\n                              pset.0\n                              pset.1)\n                    (and (== pset.0 \"onclick\")\n                         (is_string? pset.1))\n                    (set_prop elem\n                       pset.0\n                       (eval_struct (read_lisp pset.1)))\n                    else\n                    (-> elem `setAttribute pset.0 pset.1)))))\n    (when (> content.length 0)\n      (for_each (child content)\n                (cond\n                  (is_element? child)\n                  (-> elem `appendChild child)\n                  (is_array? child)\n                  (append_children elem child)\n                  (is_string? child)\n                  (-> elem `appendChild (-> document `createTextNode child))\n                  else\n                  (try\n                    (-> elem `appendChild (-> document `createTextNode (+ \"\" child)))\n                    (catch TypeError (e)\n                      (-> elem `appendChild (-> document `createTextNode (+ \"ERROR: \" (subtype child)))))))))\n    elem))\n\n\n\n;; next create the individual pointers to the create_dom_element function\n;; for every tag name in the *DOM_TAG* list create the construction function\n(defglobal load_handle (get_by_id \"juno-loading-message\"))\n(when load_handle\n   (-> load_handle `appendChild (create_dom_element \"div\" { } \"Building DOM Tags\"))\n   (sleep 0.01))\n(console.log \"html: creating dom tag function\" load_handle)\n(for_each (tagname *DOM_TAGS*)\n          (let\n              ((bound_fn (-> create_dom_element `bind create_dom_element tagname)))\n            ;; use the set_global function directly since we are dynamically creating the symbol names\n            (-> Environment `set_global\n                tagname\n                bound_fn\n                {\n                 `initializer: `(-> create_element `bind create_dom_element ,#tagname)\n                 `description: (+ \"The function \" tagname \" creates a DOM element of type \" tagname \" and returns the constructed object.\")\n                 `usage: [ \"options:?object\" \"elem:*\" \"elemN:*\" ]\n                 `tags: [\"html\" \"ui\" \"DOM\" \"tags\" \"element\" \"node\"]\n                 })))\n\n(console.log \"html: finished dom functions.\")\n\n;; various helper functions \n\n(defun set_style (style_attributes elem)\n  (when (is_element? elem)\n    (let ((`current_style (-> elem `getAttribute \"style\"))\n          (`attribs       (or (no_empties (from_style_text current_style)) []))\n          (`combined      (pairs\n                           (to_object\n                            (conj attribs style_attributes))))\n          (`newtext\n           (join \";\"\n                 (for_each (`atr combined)\n                           (join \": \" atr)))))\n\n      (-> elem `setAttribute \"style\" newtext)\n      elem))\n  {\n   `tags:[\"ui\" \"html\" \"css\" \"element\" \"style\"]\n   `description:\"Given a set of style attributes in the [[attribute value]] form, and an element, sets the element style attribute to contain the specified values. Returns the element.\"\n   `usage:[\"style_attributes:list\" \"element:Element\"]\n   })\n\n(defun_sync has_class? (classname elem)\n  (if (and elem\n           (is_element? elem))\n    (-> elem.classList `contains classname)\n    false)\n  {\n   `usage: [\"classname:string\" \"element:Element\"]\n   `description: \"If the provided element has the specified CSS class, returns true, otherwise the function returns false\"\n   `tags: [\"css\" \"DOM\" \"class\" \"ui\" \"element\" \"html\"]\n   })\n\n(defun add_class (class_name `& elems)\n  (progn\n    (defvar effected [])\n    (= elems (flatten elems))\n    (when (and (not (eq nil elems))\n               (> elems.length 0))\n      (= elems (if (or (instanceof elems.0 NodeList)\n                       (instanceof elems.0 HTMLCollection)\n                       (and (is_array? elems.0)\n                            (> elems.0.length 0)))\n                 elems.0\n                 elems))\n      (when (> (length elems) 0)\n         (for_each (`e elems)\n            (do\n               (when e.classList\n                  (push effected e)\n                  (-> e.classList `add class_name))))))\n    effected)\n  {\n   `usage: [\"class_name:string\" \"element:Element\" \"element?:Element\"]\n   `description: \"Removes the designated CSS class from the provided element or elements. Returns the list of nodes.\"\n   `tags: [\"ui\" \"html\" \"css\" \"class\"]\n   })\n\n(defun remove_class (class_name `& elems)\n  (do\n    (defvar `effected [])\n    (= elems (flatten elems))\n    (when (and (not (eq nil elems))\n               (> elems.length 0))\n      (= elems (if (or (instanceof elems.0 NodeList)\n                       (instanceof elems.0 HTMLCollection)\n                       (is_array? elems.0))\n                 elems.0\n                 elems))\n      (for_each (`e elems)\n                (do\n                  (when e.classList\n                    (push effected e)\n                    (-> e.classList `remove class_name)))))\n    effected)\n  {\n   `usage: [\"class_name:string\" \"element:Element\" \"element?:Element\"]\n   `description: \"Removes the designated CSS class from the provided element or elements. Returns the list of nodes.\"\n   `tags: [\"ui\" \"html\" \"css\" \"class\"]\n   })\n\n\n(defun resolve_dom_path (path from_elem)\n   (if (and (is_array? path)\n              (is_element? from_elem))\n      (if (> path.length 1)\n          (resolve_dom_path (rest path) (prop from_elem.children (first path)))\n          (prop from_elem.children (first path))))\n   {\n     description: (+ \"Given an array containing the indexes of the children to traverse in \"\n                     \"top down order, will return the child element found at the given path.  \"\n                     \"Otherwise, if the path doesn\\\\\\\\'t exist in the DOM structure, the path isn\\\\\\\\'t an \"\n                     \"array, or the provided element isn\\\\\\\\'t a DOM element, then nil is returned.   \")\n     usage: [\"path:array\" \"from_elem:Element\"]\n     tags:  [\"DOM\" \"path\" \"resolve\" \"element\" \"UI\" \"traverse\"]\n   })\n\n(defun path_between (child_elem parent_elem _acc)\n   (if (== child_elem parent_elem)\n       (or _acc [])\n       (progn\n          (when (eq _acc nil)\n             (= _acc []))\n          (if child_elem.parentElement\n             (progn\n                (prepend _acc (-> (Array.from child_elem.parentNode.children)\n                               `indexOf child_elem))\n                (path_between child_elem.parentElement parent_elem _acc))\n             nil)))\n   {\n     description: (+ \"Given a child DOM element and a parent DOM element, returns the path \"\n                     \"between them as an array, with the first index of the array being the first \"\n                     \"child of the parent and the last index being the index offset of the child in \"\n                     \"it\\\\\\\\'s parent element.  If the child and the parent are the same, an empty array \"\n                     \"is returned.  If the child cannot be found in the parent structure at all, then \"\n                     \"nil is returned. \")\n     usage: [\"child_element:Element\" \"parent_element:Element\"] \n     tags:  [\"DOM\" \"path\" \"resolve\" \"element\" \"UI\" \"traverse\"]\n     })\n\n(defun traverse_dom (elem operator_function _acc)\n   (let\n      ((acc (or _acc [])))\n      (if (and (is_element? elem)\n               (is_function? operator_function))\n          (map (fn (child_elem idx)\n                  (progn\n                     (operator_function child_elem (conj acc idx))\n                     (traverse_dom child_elem operator_function (conj acc idx))))\n               (Array.from elem.children))\n          (cond\n             (not (is_function? operator_function))\n             (throw TypeError \"traverse_dom: invalid operator_function provided\")\n             (not (is_element? elem))\n             (throw TypeError \"traverse_dom: invalid element provided\"))))\n   {\n     description: (+ \"Given a starting element with the `root_element` argument and an \"\n                     \"`operator_function`, the `traverse_dom` function recursively moves through the \"\n                     \"children of the root_element and applies the operator function.  The operator \"\n                     \"function is called with the signature:```(element path)```<br><br>where element \"\n                     \"is a descendent of the root_element, and the path is the dom path to the \"\n                     \"child.  This function mirrors `traverse` in terms of function, but applies to \"\n                     \"the DOM.  See also `path_between` and `resolve_dom_path`. <br>\")\n     usage: [\"element:Element\" \"operator_function:function\"]\n     tags:  [\"DOM\" \"path\" \"resolve\" \"element\" \"UI\" \"traverse\"]\n   })\n\n(defun set_disabled (`& args)\n  (when (and args (> (length args) 0))\n    (for_each (`elem (flatten args))\n              (if elem (-> elem `setAttribute `disabled \"true\"))))\n  { `description: \"Given an arbitrary list of Elements, set them to disabled.\"\n   `tags: [\"ui\" \"html\" \"css\"]\n   `usage: [\"element:Element\" \"element?:Element\"]\n   } )\n\n(defun set_enabled (`& args)\n  (when (and args (> (length args) 0))\n    (for_each (`elem (flatten args))\n              (if elem (-> elem `removeAttribute `disabled))))\n  { `description: \"Given an arbitrary list of Elements, set them to enabled (removes the disabled property from the Element).\"\n   `tags: [\"ui\" \"html\" \"css\"]\n   `usage: [\"element:Element\" \"element?:Element\"]\n   } )\n\n(defun remove_attribute (elem `& attribs)\n  (when (and elem\n             (is_element? elem)\n             attribs\n             (> attribs.length 0))\n    (for_each (attrib (flatten attribs))\n              (-> elem `removeAttribute attrib)))\n  {\n   `description: \"Provided a target DOM element and 1 or more attributes, removes each attribute from the targeted DOM element.\"\n   `usage: [\"element:Element\" \"attrib0:string\" \"attribN:string\"]\n   `tags: [ `ui `html `attribute `delete ]\n   })\n\n(defun attach_event_listener (elem event_type handler_function)\n  (when elem\n    ((jslambda (`elem `event `f) \"return elem.addEventListener(event,f);\")  elem event_type handler_function))\n  {\n   `usage:[\"element:Element\" \"event_type:string\" \"handler:function\"]\n   `description:\"Given an element, an event type such as `click, and a function, attaches the provided function as an event handler to the HTML Element.\"\n   `tags:[\"ui\" \"events\" \"HTML\" \"events\" \"\"]\n   })\n\n(defun remove_css_entry (entry_name)\n  (do\n    (aif (get_by_id (to_key (+ \"juno-css-\" entry_name)))\n      (-> it `remove)))\n  {\n   `usage:[\"entry_name:string\"]\n   `description:\"If a class has been created by create_css_entry, use this function to remove the class from the document.\"\n   `tags: [\"html\" \"css\" \"ui\"]\n   })\n\n(defun create_css_entry (entry_name css_attribute_list)\n  (let\n      ((css_attributes (reduce (attrib_set (or css_attribute_list []))\n                               (destructuring_bind (attrib val)\n                                                   attrib_set\n                                                   (when (and (not (blank? attrib))\n                                                              (not (blank? val)))\n                                                     (+ \"\" attrib \": \" val)))))\n       \n       (head_elem (-> document `querySelector \"head\"))\n       (new_style nil))\n      ;(log \"create_css_entry: \" entry_name \"css_attributes: \"  css_attributes )\n    (when head_elem\n      (remove_css_entry entry_name)\n      (-> head_elem `appendChild\n          (= new_style\n             (style { `id: (to_key (+ \"juno-css-\" entry_name )) `type: \"text/css\" }\n                    (+ \"\" entry_name \"{ \" (join \";\" css_attributes) \" }\")))))\n    new_style)\n  { `usage: [\"entry_name:string\" \"css_attribute_list:array\"]\n   `description: (+ \" Given a name for the class and a list of formatted css attributes \"\n                    \"create and load the CSS object into the DOM.<br> Example: <br><code> \"\n                    \"(create_css_entry 'FilteredSelect:focus-within' \"\n                    \"                  [[`box-shadow '0px 0px 10px 0px rgba(0,0,0,0.75)']])<br>\"\n                    \" </code>\")\n   `tags: [\"html\" \"css\" \"ui\"]\n   } )\n\n(defun css_entry_to_css_format (entry_name css_attribute_list)\n  (let\n      ((`style (create_element \"style\"))\n       (`css_attributes (map (fn (v)\n                               (+ v.0 \": \" v.1))\n                             css_attribute_list)))\n    (+ \"\" entry_name \" {\\\\\\\\n   \" (join \";\\\\\\\\n   \" css_attributes) \";\\\\\\\\n}\")\n    )\n\n  { `usage: [\"entry_name:string\" \"css_attribute_list:array\"]\n   `description: (+ \"Given a name for the class and a list of formatted css attributes returns a formatted string in CSS syntax.<br> Example: <br><code>\"\n                    \"(create_css_entry 'FilteredSelect:focus-within'\n                                    [['box-shadow' '0px 0px 10px 0px rgba(0,0,0,0.75)']])<br>\"\n                    \"</code>\")\n   `tags: [\"html\" \"css\" \"ui\" \"convert\"]\n   } )\n\n(defun_sync handle_event (e)\n  (progn\n   (-> e `preventDefault)\n   (-> e `stopPropagation)))\n\n(defun_sync focus_to (elem)\n   \n    (aif elem\n       (-> it `focus)))\n    \n\n(defmacro blur_to (elem)\n    `(aif ,#elem (-> it `blur)))\n\n\n;(set_prop (get_by_id \"juno-css\")\n;          `textContent\n ;         style_css)\n    \n(when load_handle\n   (-> load_handle `appendChild (create_dom_element \"div\" { } \"Initializing...\"))\n   (sleep 0.01))\n\n(console.log \"html is loaded\");\n(register_feature \"html\")\n(load_pends \"html\")\ntrue\n" })();__obj__1["style_css"]=await (async function(){ return "\n/* Seedling Default CSS */\n\n/* Variables */\n\n:root {\n  --main-bg-color: #FBFAF8;\n  --main-color: #000000;\n  --header-color: inherit;\n  --header-bg-color: inherit;\n  --highlight-bg-color: #DADADA;\n  --highlight-color: #000000;\n  --selected-bg-color: #0278e7;\n  --selected-color: #FFFFFF;\n  --control-bg-color: inherit;\n  --control-color: inherit;\n  --control-text-input-color-bg: #FFFFFF50;\n  --control-text-input-color: #000000;\n  --control-focused: #efe5e540;\n  --control-unfocused-color: darkgray;\n  --control-disabled-bg-color: #eaeded;\n  --control-disabled-color: #cad2d3;\n  --control-readonly-color: #777;\n  --log-message-bg-color: inherit;\n  --log-result-bg-color: inherit;\n  --button-hover-bg-color: #00000030;\n  --identification-bg-color: #01678338;\n  --app-header-color: #546478;\n  --namespace-color: #976464;\n  --main-accent-color: #0000000A;\n  --main-accent-line: #00000010;\n  --main-accent-line-hover: #00000020;\n  --main-control-surface-accent-color: #efe5e540;\n  --main-control-button-color: #00000020;\n  --value-modified-color: #016783;\n  --matching-paren-color: #ffeb00;\n  --matching-paren-outline-color: #b6a800;\n  --scrollbar-thumb-color: inherit;\n  --scrollbar-track-color: inherit;\n  --link-color: inherit;\n  --link-visited-color: inherit;\n  --link-bg-color: inherit;\n  --link-visited-bg-color: inherit;\n  --type-number-color: green;\n  --type-boolean-color: orange;\n  --type-string-color: darkblue;\n  --type-function-color: #2e3eb4;\n  --type-asyncfunction-color: #3f5b71;\n  --type-null-color: #a35e5e;\n  --type-undefined-color: #9d9d9d;\n  --type-symbol-color: #ff4f4f;\n  --type-error-color: darkred;\n  --type-array-color: #535173;\n  --type-path-color: #88127D;\n  --type-key-color:  #88127D;\n  --type-regexp-color: #fe2f53;\n  --type-code-color: darkblue;\n  --value-focus-color: #0168ff;\n  --mode-color: #0278e7;\n  --primary-action-bg-color: #0278e7;\n  --primary-action-color: #FFFFFF;\n  --success-color: #19A019;\n  --main-app-font:  -apple-system,BlinkMacSystemFont,'Segoe UI','Helvetica Neue', Helvetica, FreeSans, Arimo, \"Droid Sans\", Arial, sans-serif;\n  --main-app-font-size: 14px;\n  --main-mono-space: \"Roboto Mono\", ui-monospace,\t\t     \n    \"Cascadia Mono\", \"Segoe UI Mono\",    \n    \"Ubuntu Mono\",\n    Menlo, Monaco, Consolas,\n    monospace;\n  --editor-bg-color: #f6f3f1;\n  --editor-text-color: #363636;\n  --editor-gutter-bg-color: #e0e0e0;\n  --editor-gutter-color: #333;\n  --editor-cursor-color: #202020;\n  --editor-selected-bg-color: #4ab1ff3d;  \n  --editor-selected-word-bg-color: #fff4a36e;\n  --editor-step-bg-color: rgb(198,219,174);\n  --editor-active-line-bg: rgb(255 255 255 / 53%);\n  --editor-active-line-gutter-bg-color: rgb(166 166 166 / 46%);\n  --editor-invisible-color: #BFBFBF;\n  --editor-keyword-color: #670171;\n  --editor-identifier-color: #191919;\n  --editor-constant-color: #CD6839;\n  --editor-numeric-color: #9A5925;\n  --editor-support-color: #104e8b;\n  --editor-function-color: #0274a1;\n  --editor-asyncfunction-color: #3f5b71;\n  --editor-string-color: #006b1e;\n  --editor-constant-color: #CF6A4C;\n  --editor-variable-color: #009ACD;\n  --editor-comment-color: rgba(148,148,148, 0.91);\n  --editor-storage-color: #A52A2A;\n  --editor-illegal-color: #FD1224;\n  --editor-illegal-bg-color: rgba(255, 6, 0, 0.15);\n  --editor-deprecated-color: #FD1732;\n  --editor-deprecated-bg-color: #EEEAE8;\n  --editor-regex-color: #fe2f53;\n  --editor-regex-bg-color: #FE40AA10;\n  --editor-heading-color: #B8012D;\n  --editor-heading-bg-color: rgba(191,97,51,0.051);\n  --editor-list-color: #8F5B26;\n}\n\n\n\n\n/*!\nPure v2.1.0\nCopyright 2013 Yahoo!\nLicensed under the BSD License.\nhttps://github.com/pure-css/pure/blob/master/LICENSE\n*/\n/*!\nnormalize.css v | MIT License | git.io/normalize\nCopyright (c) Nicolas Gallagher and Jonathan Neal\n*/\n/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */  \n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n  background: var(--main-bg-color, #FCFAFA);\n  color: var(--main-color, #000000);\n  font-size: var(--main-app-font-size);\n  scrollbar-color: var(--scrollbar-thumb-color) var(--scrollbar-track-color);\n}\n\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  -webkit-box-sizing: content-box;\n          box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: var(--main-mono-space, monospace, monospace); /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: var(--main-mono-space, monospace, monospace); /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type=\"button\"],\n[type=\"reset\"],\n[type=\"submit\"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type=\"button\"]::-moz-focus-inner,\n[type=\"reset\"]::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type=\"checkbox\"],\n[type=\"radio\"] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type=\"number\"]::-webkit-inner-spin-button,\n[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type=\"search\"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n\n/*csslint important:false*/\n\n/* ==========================================================================\n   Pure Base Extras\n   ========================================================================== */\n\n/**\n * Extra rules that Pure adds on top of Normalize.css\n */\n\nhtml {\n  font-family: var(--main-app-font);\n}\n\n/**\n * Always hide an element when it has the `hidden` HTML attribute.\n */\n\n.hidden,\n[hidden] {\n    display: none !important;\n}\n\n/**\n * Add this class to an image to make it fit within it's fluid parent wrapper while maintaining\n * aspect ratio.\n */\n.pure-img {\n    max-width: 100%;\n    height: auto;\n    display: block;\n}\n\n/*csslint regex-selectors:false, known-properties:false, duplicate-properties:false*/\n\n.pure-g {\n    letter-spacing: -0.31em; /* Webkit: collapse white-space between units */\n    text-rendering: optimizespeed; /* Webkit: fixes text-rendering: optimizeLegibility */\n\n    /*\n    Sets the font stack to fonts known to work properly with the above letter\n    and word spacings. See: https://github.com/pure-css/pure/issues/41/\n\n    The following font stack makes Pure Grids work on all known environments.\n\n    * FreeSans: Ships with many Linux distros, including Ubuntu\n\n    * Arimo: Ships with Chrome OS. Arimo has to be defined before Helvetica and\n      Arial to get picked up by the browser, even though neither is available\n      in Chrome OS.\n\n    * Droid Sans: Ships with all versions of Android.\n\n    * Helvetica, Arial, sans-serif: Common font stack on OS X and Windows.\n    */\n    font-family: FreeSans, Arimo, \"Droid Sans\", Helvetica, Arial, sans-serif;\n\n    /* Use flexbox when possible to avoid `letter-spacing` side-effects. */\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-orient: horizontal;\n    -webkit-box-direction: normal;\n        -ms-flex-flow: row wrap;\n            flex-flow: row wrap;\n\n    /* Prevents distributing space between rows */\n    -ms-flex-line-pack: start;\n        align-content: flex-start;\n}\n\n/* IE10 display: -ms-flexbox (and display: flex in IE 11) does not work inside a table; fall back to block and rely on font hack */\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n\ttable .pure-g {\n\t\tdisplay: block;\n\t}\n}\n\n/* Opera as of 12 on Windows needs word-spacing.\n   The \".opera-only\" selector is used to prevent actual prefocus styling\n   and is not required in markup.\n*/\n.opera-only :-o-prefocus,\n.pure-g {\n    word-spacing: -0.43em;\n}\n\n.pure-u {\n    display: inline-block;\n    letter-spacing: normal;\n    word-spacing: normal;\n    vertical-align: top;\n    text-rendering: auto;\n}\n\n/*\nResets the font family back to the OS/browser's default sans-serif font,\nthis the same font stack that Normalize.css sets for the `body`.\n*/\n.pure-g [class *= \"pure-u\"] {\n    font-family: sans-serif;\n}\n\n.pure-u-1,\n.pure-u-1-1,\n.pure-u-1-2,\n.pure-u-1-3,\n.pure-u-2-3,\n.pure-u-1-4,\n.pure-u-3-4,\n.pure-u-1-5,\n.pure-u-2-5,\n.pure-u-3-5,\n.pure-u-4-5,\n.pure-u-5-5,\n.pure-u-1-6,\n.pure-u-5-6,\n.pure-u-1-8,\n.pure-u-3-8,\n.pure-u-5-8,\n.pure-u-7-8,\n.pure-u-1-12,\n.pure-u-5-12,\n.pure-u-7-12,\n.pure-u-11-12,\n.pure-u-1-24,\n.pure-u-2-24,\n.pure-u-3-24,\n.pure-u-4-24,\n.pure-u-5-24,\n.pure-u-6-24,\n.pure-u-7-24,\n.pure-u-8-24,\n.pure-u-9-24,\n.pure-u-10-24,\n.pure-u-11-24,\n.pure-u-12-24,\n.pure-u-13-24,\n.pure-u-14-24,\n.pure-u-15-24,\n.pure-u-16-24,\n.pure-u-17-24,\n.pure-u-18-24,\n.pure-u-19-24,\n.pure-u-20-24,\n.pure-u-21-24,\n.pure-u-22-24,\n.pure-u-23-24,\n.pure-u-24-24 {\n    display: inline-block;\n    letter-spacing: normal;\n    word-spacing: normal;\n    vertical-align: top;\n    text-rendering: auto;\n}\n\n.pure-u-1-24 {\n    width: 4.1667%;\n}\n\n.pure-u-1-12,\n.pure-u-2-24 {\n    width: 8.3333%;\n}\n\n.pure-u-1-8,\n.pure-u-3-24 {\n    width: 12.5000%;\n}\n\n.pure-u-1-6,\n.pure-u-4-24 {\n    width: 16.6667%;\n}\n\n.pure-u-1-5 {\n    width: 20%;\n}\n\n.pure-u-5-24 {\n    width: 20.8333%;\n}\n\n.pure-u-1-4,\n.pure-u-6-24 {\n    width: 25%;\n}\n\n.pure-u-7-24 {\n    width: 29.1667%;\n}\n\n.pure-u-1-3,\n.pure-u-8-24 {\n    width: 33.3333%;\n}\n\n.pure-u-3-8,\n.pure-u-9-24 {\n    width: 37.5000%;\n}\n\n.pure-u-2-5 {\n    width: 40%;\n}\n\n.pure-u-5-12,\n.pure-u-10-24 {\n    width: 41.6667%;\n}\n\n.pure-u-11-24 {\n    width: 45.8333%;\n}\n\n.pure-u-1-2,\n.pure-u-12-24 {\n    width: 50%;\n}\n\n.pure-u-13-24 {\n    width: 54.1667%;\n}\n\n.pure-u-7-12,\n.pure-u-14-24 {\n    width: 58.3333%;\n}\n\n.pure-u-3-5 {\n    width: 60%;\n}\n\n.pure-u-5-8,\n.pure-u-15-24 {\n    width: 62.5000%;\n}\n\n.pure-u-2-3,\n.pure-u-16-24 {\n    width: 66.6667%;\n}\n\n.pure-u-17-24 {\n    width: 70.8333%;\n}\n\n.pure-u-3-4,\n.pure-u-18-24 {\n    width: 75%;\n}\n\n.pure-u-19-24 {\n    width: 79.1667%;\n}\n\n.pure-u-4-5 {\n    width: 80%;\n}\n\n.pure-u-5-6,\n.pure-u-20-24 {\n    width: 83.3333%;\n}\n\n.pure-u-7-8,\n.pure-u-21-24 {\n    width: 87.5000%;\n}\n\n.pure-u-11-12,\n.pure-u-22-24 {\n    width: 91.6667%;\n}\n\n.pure-u-23-24 {\n    width: 95.8333%;\n}\n\n.pure-u-1,\n.pure-u-1-1,\n.pure-u-5-5,\n.pure-u-24-24 {\n    width: 100%;\n}\n.pure-button {\n    /* Structure */\n    display: inline-block;\n    line-height: normal;\n    white-space: nowrap;\n    vertical-align: middle;\n    text-align: center;\n    cursor: pointer;\n    -webkit-user-drag: none;\n    -webkit-user-select: none;\n       -moz-user-select: none;\n        -ms-user-select: none;\n            user-select: none;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n}\n\n/* Firefox: Get rid of the inner focus border */\n.pure-button::-moz-focus-inner {\n    padding: 0;\n    border: 0;\n}\n\n/* Inherit .pure-g styles */\n.pure-button-group {\n    letter-spacing: -0.31em; /* Webkit: collapse white-space between units */\n    text-rendering: optimizespeed; /* Webkit: fixes text-rendering: optimizeLegibility */\n}\n\n.opera-only :-o-prefocus,\n.pure-button-group {\n    word-spacing: -0.43em;\n}\n\n.pure-button-group .pure-button {\n    letter-spacing: normal;\n    word-spacing: normal;\n    vertical-align: top;\n    text-rendering: auto;\n}\n\n/*csslint outline-none:false*/\n\n.pure-button {\n    font-family: inherit;\n    font-size: 100%;\n    padding: 0.5em 1em;\n    color: var(--main-color);\n    border: none rgba(0, 0, 0, 0);\n    background-color: var(--main-control-button-color);\n    text-decoration: none;\n    border-radius: 2px;\n}\n\n.pure-button-hover,\n.pure-button:hover,\n.pure-button:focus,\nbutton:hover {\n    background-image: -webkit-gradient(linear, left top, left bottom, from(transparent), color-stop(40%, rgba(0,0,0, 0.05)), to(rgba(0,0,0, 0.10)));\n    background-image: linear-gradient(transparent, rgba(0,0,0, 0.05) 40%, rgba(0,0,0, 0.10));\n}\n.pure-button:focus {\n    outline: 0;\n}\n.pure-button-active,\n.pure-button:active {\n    -webkit-box-shadow: 0 0 0 1px rgba(0,0,0, 0.15) inset, 0 0 6px rgba(0,0,0, 0.20) inset;\n            box-shadow: 0 0 0 1px rgba(0,0,0, 0.15) inset, 0 0 6px rgba(0,0,0, 0.20) inset;\n    border-color: var(--main-accent-line);\n}\n\n.pure-button[disabled],\n.pure-button-disabled,\n.pure-button-disabled:hover,\n.pure-button-disabled:focus,\n.pure-button-disabled:active,\nbutton:disabled {\n    border: none;\n    background-image: none;\n    opacity: 0.40;\n    cursor: not-allowed;\n    -webkit-box-shadow: none;\n            box-shadow: none;\n    pointer-events: none;\n}\n\n.pure-button-hidden {\n    display: none;\n}\n\n.pure-button-primary,\n.pure-button-selected,\na.pure-button-primary,\na.pure-button-selected {\n    background: var(--primary-action-bg-color)\n    color: var(--primary-action-color);\n}\n\n/* Button Groups */\n.pure-button-group .pure-button {\n    margin: 0;\n    border-radius: 0;\n    border-right: 1px solid rgba(0, 0, 0, 0.2);\n\n}\n\n.pure-button-group .pure-button:first-child {\n    border-top-left-radius: 2px;\n    border-bottom-left-radius: 2px;\n}\n.pure-button-group .pure-button:last-child {\n    border-top-right-radius: 2px;\n    border-bottom-right-radius: 2px;\n    border-right: none;\n}\n\n/*csslint box-model:false*/\n/*\nBox-model set to false because we're setting a height on select elements, which\nalso have border and padding. This is done because some browsers don't render\nthe padding. We explicitly set the box-model for select elements to border-box,\nso we can ignore the csslint warning.\n*/\n\n.pure-form input[type=\"text\"],\n.pure-form input[type=\"password\"],\n.pure-form input[type=\"email\"],\n.pure-form input[type=\"url\"],\n.pure-form input[type=\"date\"],\n.pure-form input[type=\"month\"],\n.pure-form input[type=\"time\"],\n.pure-form input[type=\"datetime\"],\n.pure-form input[type=\"datetime-local\"],\n.pure-form input[type=\"week\"],\n.pure-form input[type=\"number\"],\n.pure-form input[type=\"search\"],\n.pure-form input[type=\"tel\"],\n.pure-form input[type=\"color\"],\n.pure-form select,\n.pure-form textarea {\n    padding: 0.5em 0.6em;\n    display: inline-block;\n    border: 1px solid #ccc;\n    -webkit-box-shadow: inset 0 1px 3px #ddd;\n            box-shadow: inset 0 1px 3px #ddd;\n    border-radius: 4px;\n    vertical-align: middle;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n}\n\n/*\nNeed to separate out the :not() selector from the rest of the CSS 2.1 selectors\nsince IE8 won't execute CSS that contains a CSS3 selector.\n*/\n.pure-form input:not([type]) {\n    padding: 0.5em 0.6em;\n    display: inline-block;\n    border: 1px solid #ccc;\n    -webkit-box-shadow: inset 0 1px 3px #ddd;\n            box-shadow: inset 0 1px 3px #ddd;\n    border-radius: 4px;\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n}\n\n\n/* Chrome (as of v.32/34 on OS X) needs additional room for color to display. */\n/* May be able to remove this tweak as color inputs become more standardized across browsers. */\n.pure-form input[type=\"color\"] {\n    padding: 0.2em 0.5em;\n}\n\n\n.pure-form input[type=\"text\"]:focus,\n.pure-form input[type=\"password\"]:focus,\n.pure-form input[type=\"email\"]:focus,\n.pure-form input[type=\"url\"]:focus,\n.pure-form input[type=\"date\"]:focus,\n.pure-form input[type=\"month\"]:focus,\n.pure-form input[type=\"time\"]:focus,\n.pure-form input[type=\"datetime\"]:focus,\n.pure-form input[type=\"datetime-local\"]:focus,\n.pure-form input[type=\"week\"]:focus,\n.pure-form input[type=\"number\"]:focus,\n.pure-form input[type=\"search\"]:focus,\n.pure-form input[type=\"tel\"]:focus,\n.pure-form input[type=\"color\"]:focus,\n.pure-form select:focus,\n.pure-form textarea:focus {\n    outline: 0;\n    border-color: var(--value-focus-color);\n}\n\n/*\nNeed to separate out the :not() selector from the rest of the CSS 2.1 selectors\nsince IE8 won't execute CSS that contains a CSS3 selector.\n*/\n.pure-form input:not([type]):focus {\n    outline: 0;\n    border-color: var(--value-focus-color);\n}\n\n.pure-form input[type=\"file\"]:focus,\n.pure-form input[type=\"radio\"]:focus,\n.pure-form input[type=\"checkbox\"]:focus {\n  outline: thin solid var(--value-focus-color);\n  outline: 1px auto var(--value-focus-color);\n}\n.pure-form .pure-checkbox,\n.pure-form .pure-radio {\n    margin: 0.5em 0;\n    display: block;\n}\n\n.pure-form input[type=\"text\"][disabled],\n.pure-form input[type=\"password\"][disabled],\n.pure-form input[type=\"email\"][disabled],\n.pure-form input[type=\"url\"][disabled],\n.pure-form input[type=\"date\"][disabled],\n.pure-form input[type=\"month\"][disabled],\n.pure-form input[type=\"time\"][disabled],\n.pure-form input[type=\"datetime\"][disabled],\n.pure-form input[type=\"datetime-local\"][disabled],\n.pure-form input[type=\"week\"][disabled],\n.pure-form input[type=\"number\"][disabled],\n.pure-form input[type=\"search\"][disabled],\n.pure-form input[type=\"tel\"][disabled],\n.pure-form input[type=\"color\"][disabled],\n.pure-form select[disabled],\n.pure-form textarea[disabled] {\n    cursor: not-allowed;\n    background-color: var(--control-disabled-color);\n    color: var(--control-disabled-color);\n}\n\n/*\nNeed to separate out the :not() selector from the rest of the CSS 2.1 selectors\nsince IE8 won't execute CSS that contains a CSS3 selector.\n*/\n.pure-form input:not([type])[disabled] {\n    cursor: not-allowed;\n    background-color: var(--control-disabled-bg-color);\n    color: var(--control-disabled-color);\n}\n.pure-form input[readonly],\n.pure-form select[readonly],\n.pure-form textarea[readonly] {\n  background-color: var(--control-disabled-bg-color); /* menu hover bg color */\n  color: var(--control-disabled-color); /* menu text color */\n  border-color: #ccc;\n}\n\n.pure-form input:focus:invalid,\n.pure-form textarea:focus:invalid,\n.pure-form select:focus:invalid {\n    color: #b94a48;\n    border-color: #e9322d;\n}\n.pure-form input[type=\"file\"]:focus:invalid:focus,\n.pure-form input[type=\"radio\"]:focus:invalid:focus,\n.pure-form input[type=\"checkbox\"]:focus:invalid:focus {\n    outline-color: #e9322d;\n}\n.pure-form select {\n    /* Normalizes the height; padding is not sufficient. */\n    height: 2.25em;\n    border: 1px solid #ccc;\n    background-color: var(--main-bg-color);\n}\n.pure-form select[multiple] {\n    height: auto;\n}\n.pure-form label {\n    margin: 0.5em 0 0.2em;\n}\n.pure-form fieldset {\n    margin: 0;\n    padding: 0.35em 0 0.75em;\n    border: 0;\n}\n.pure-form legend {\n    display: block;\n    width: 100%;\n    padding: 0.3em 0;\n    margin-bottom: 0.3em;\n    color: var(--main-color);\n    border-bottom: 1px solid #e5e5e5;\n}\n\n.pure-form-stacked input[type=\"text\"],\n.pure-form-stacked input[type=\"password\"],\n.pure-form-stacked input[type=\"email\"],\n.pure-form-stacked input[type=\"url\"],\n.pure-form-stacked input[type=\"date\"],\n.pure-form-stacked input[type=\"month\"],\n.pure-form-stacked input[type=\"time\"],\n.pure-form-stacked input[type=\"datetime\"],\n.pure-form-stacked input[type=\"datetime-local\"],\n.pure-form-stacked input[type=\"week\"],\n.pure-form-stacked input[type=\"number\"],\n.pure-form-stacked input[type=\"search\"],\n.pure-form-stacked input[type=\"tel\"],\n.pure-form-stacked input[type=\"color\"],\n.pure-form-stacked input[type=\"file\"],\n.pure-form-stacked select,\n.pure-form-stacked label,\n.pure-form-stacked textarea {\n    display: block;\n    margin: 0.25em 0;\n}\n\n/*\nNeed to separate out the :not() selector from the rest of the CSS 2.1 selectors\nsince IE8 won't execute CSS that contains a CSS3 selector.\n*/\n.pure-form-stacked input:not([type]) {\n    display: block;\n    margin: 0.25em 0;\n}\n.pure-form-aligned input,\n.pure-form-aligned textarea,\n.pure-form-aligned select,\n.pure-form-message-inline {\n    display: inline-block;\n    vertical-align: middle;\n}\n.pure-form-aligned textarea {\n    vertical-align: top;\n}\n\n/* Aligned Forms */\n.pure-form-aligned .pure-control-group {\n    margin-bottom: 0.5em;\n}\n.pure-form-aligned .pure-control-group label {\n    text-align: right;\n    display: inline-block;\n    vertical-align: middle;\n    width: 10em;\n    margin: 0 1em 0 0;\n}\n.pure-form-aligned .pure-controls {\n    margin: 1.5em 0 0 11em;\n}\n\n/* Rounded Inputs */\n.pure-form input.pure-input-rounded,\n.pure-form .pure-input-rounded {\n    border-radius: 2em;\n    padding: 0.5em 1em;\n}\n\n/* Grouped Inputs */\n.pure-form .pure-group fieldset {\n    margin-bottom: 10px;\n}\n.pure-form .pure-group input,\n.pure-form .pure-group textarea {\n    display: block;\n    padding: 10px;\n    margin: 0 0 -1px;\n    border-radius: 0;\n    position: relative;\n    top: -1px;\n}\n.pure-form .pure-group input:focus,\n.pure-form .pure-group textarea:focus {\n    z-index: 3;\n}\n.pure-form .pure-group input:first-child,\n.pure-form .pure-group textarea:first-child {\n    top: 1px;\n    border-radius: 4px 4px 0 0;\n    margin: 0;\n}\n.pure-form .pure-group input:first-child:last-child,\n.pure-form .pure-group textarea:first-child:last-child {\n    top: 1px;\n    border-radius: 4px;\n    margin: 0;\n}\n.pure-form .pure-group input:last-child,\n.pure-form .pure-group textarea:last-child {\n    top: -2px;\n    border-radius: 0 0 4px 4px;\n    margin: 0;\n}\n.pure-form .pure-group button {\n    margin: 0.35em 0;\n}\n\n.pure-form .pure-input-1 {\n    width: 100%;\n}\n.pure-form .pure-input-3-4 {\n    width: 75%;\n}\n.pure-form .pure-input-2-3 {\n    width: 66%;\n}\n.pure-form .pure-input-1-2 {\n    width: 50%;\n}\n.pure-form .pure-input-1-3 {\n    width: 33%;\n}\n.pure-form .pure-input-1-4 {\n    width: 25%;\n}\n\n/* Inline help for forms */\n.pure-form-message-inline {\n    display: inline-block;\n    padding-left: 0.3em;\n    color: #666;\n    vertical-align: middle;\n    font-size: 0.875em;\n}\n\n/* Block help for forms */\n.pure-form-message {\n    display: block;\n    color: #666;\n    font-size: 0.875em;\n}\n\n@media only screen and (max-width : 480px) {\n    .pure-form button[type=\"submit\"] {\n        margin: 0.7em 0 0;\n    }\n\n    .pure-form input:not([type]),\n    .pure-form input[type=\"text\"],\n    .pure-form input[type=\"password\"],\n    .pure-form input[type=\"email\"],\n    .pure-form input[type=\"url\"],\n    .pure-form input[type=\"date\"],\n    .pure-form input[type=\"month\"],\n    .pure-form input[type=\"time\"],\n    .pure-form input[type=\"datetime\"],\n    .pure-form input[type=\"datetime-local\"],\n    .pure-form input[type=\"week\"],\n    .pure-form input[type=\"number\"],\n    .pure-form input[type=\"search\"],\n    .pure-form input[type=\"tel\"],\n    .pure-form input[type=\"color\"],\n    .pure-form label {\n        margin-bottom: 0.3em;\n        display: block;\n    }\n\n    .pure-group input:not([type]),\n    .pure-group input[type=\"text\"],\n    .pure-group input[type=\"password\"],\n    .pure-group input[type=\"email\"],\n    .pure-group input[type=\"url\"],\n    .pure-group input[type=\"date\"],\n    .pure-group input[type=\"month\"],\n    .pure-group input[type=\"time\"],\n    .pure-group input[type=\"datetime\"],\n    .pure-group input[type=\"datetime-local\"],\n    .pure-group input[type=\"week\"],\n    .pure-group input[type=\"number\"],\n    .pure-group input[type=\"search\"],\n    .pure-group input[type=\"tel\"],\n    .pure-group input[type=\"color\"] {\n        margin-bottom: 0;\n    }\n\n    .pure-form-aligned .pure-control-group label {\n        margin-bottom: 0.3em;\n        text-align: left;\n        display: block;\n        width: 100%;\n    }\n\n    .pure-form-aligned .pure-controls {\n        margin: 1.5em 0 0 0;\n    }\n\n    .pure-form-message-inline,\n    .pure-form-message {\n        display: block;\n        font-size: 0.75em;\n        /* Increased bottom padding to make it group with its related input element. */\n        padding: 0.2em 0 0.8em;\n    }\n}\n\n/*csslint adjoining-classes: false, box-model:false*/\n.pure-menu {\n    -webkit-box-sizing: border-box;\n            box-sizing: border-box;\n}\n\n.pure-menu-fixed {\n    position: fixed;\n    left: 0;\n    top: 0;\n    z-index: 3;\n}\n\n.pure-menu-list,\n.pure-menu-item {\n    position: relative;\n}\n\n.pure-menu-list {\n    list-style: none;\n    margin: 0;\n    line-height: 1.4;\n    padding: 0;    \n}\n\n.pure-menu-item {\n    padding: 0;\n    margin: 0;\n    height: 100%;\n}\n\n.pure-menu-link,\n.pure-menu-heading {\n    display: block;\n    text-decoration: none;\n    white-space: nowrap;\n}\n\n/* HORIZONTAL MENU */\n.pure-menu-horizontal {\n    width: 100%;\n    white-space: nowrap;\n}\n\n.pure-menu-horizontal .pure-menu-list {\n    display: inline-block;\n}\n\n/* Initial menus should be inline-block so that they are horizontal */\n.pure-menu-horizontal .pure-menu-item,\n.pure-menu-horizontal .pure-menu-heading,\n.pure-menu-horizontal .pure-menu-separator {\n    display: inline-block;\n    vertical-align: middle;\n}\n\n/* Submenus should still be display: block; */\n.pure-menu-item .pure-menu-item {\n    display: block;\n}\n\n.pure-menu-children {\n    display: none;\n    position: absolute;\n    left: 100%;\n    top: 0;\n    margin: 0;\n    padding: 0;\n    z-index: 3;\n}\n\n.pure-menu-horizontal .pure-menu-children {\n    left: 0;\n    top: auto;\n    width: inherit;\n}\n\n.pure-menu-allow-hover:hover > .pure-menu-children,\n.pure-menu-active > .pure-menu-children {\n    display: block;\n    position: absolute;\n}\n\n/* Vertical Menus - show the dropdown arrow */\n.pure-menu-has-children > .pure-menu-link:after {\n    padding-left: 0.5em;\n    content: \"▸\";\n    font-size: small;\n}\n\n/* Horizontal Menus - show the dropdown arrow */\n.pure-menu-horizontal .pure-menu-has-children > .pure-menu-link:after {\n    content: \"▾\";\n}\n\n/* scrollable menus */\n.pure-menu-scrollable {\n    overflow-y: scroll;\n    overflow-x: hidden;\n}\n\n.pure-menu-scrollable .pure-menu-list {\n    display: block;\n}\n\n.pure-menu-horizontal.pure-menu-scrollable .pure-menu-list {\n  display: inline-block;    \n}\n\n.pure-menu-horizontal.pure-menu-scrollable {\n    white-space: nowrap;\n    overflow-y: hidden;\n    overflow-x: auto;\n    /* a little extra padding for this style to allow for scrollbars */\n    padding: .5em 0;\n}\n\n/* misc default styling */\n\n.pure-menu-separator,\n.pure-menu-horizontal .pure-menu-children .pure-menu-separator {\n    background-color: #ccc;\n    height: 1px;\n    margin: .3em 0;\n}\n\n.pure-menu-horizontal .pure-menu-separator {\n    width: 1px;\n    height: 1.3em;\n    margin: 0 .3em ;\n}\n\n/* Need to reset the separator since submenu is vertical */\n.pure-menu-horizontal .pure-menu-children .pure-menu-separator {\n    display: block;\n    width: auto;\n}\n\n.pure-menu-heading {\n    /* text-transform: uppercase; */\n    color: #565d64;\n}\n\n.pure-menu-link {\n  color: var(--main-color);\n}\n\n.pure-menu-children {\n  background-color: var(--main-bg-color);\n}\n\n.pure-menu-link,\n.pure-menu-heading {\n    padding: 0.3em 1em;\n}\n\n.pure-menu-disabled {\n    opacity: .5;\n}\n\n.pure-menu-disabled .pure-menu-link:hover {\n    background-color: transparent;\n    cursor: default;\n}\n\n.pure-menu-active > .pure-menu-link,\n.pure-menu-link:hover,\n.pure-menu-link:focus {\n  background-color: var(--highlight-bg-color);\n  color: var(--highlight-color);\n}\n\n.pure-menu-selected > .pure-menu-link,\n.pure-menu-selected > .pure-menu-link:visited {\n    color:  #000;\n}\n\n.pure-table {\n    /* Remove spacing between table cells (from Normalize.css) */\n    border-collapse: collapse;\n    border-spacing: 0;\n    empty-cells: show;\n    border: 1px solid #cbcbcb;\n}\n\n.pure-table caption {\n    color: #000;\n    font: italic 85%/1 arial, sans-serif;\n    padding: 1em 0;\n    text-align: center;\n}\n\n.pure-table td,\n.pure-table th {\n    border-left: 1px solid #cbcbcb;/*  inner column border */\n    border-width: 0 0 0 1px;\n    font-size: inherit;\n    margin: 0;\n    overflow: visible; /*to make ths where the title is really long work*/\n    padding: 0.5em 1em; /* cell padding */\n}\n\n.pure-table thead {\n    background-color: var(--main-accent-color);\n    color: var(--main-color);\n    text-align: left;\n    vertical-align: bottom;\n}\n\n/*\nstriping:\n   even - #fff (white)\n   odd  - #f2f2f2 (light gray)\n*/\n.pure-table td {\n    background-color: transparent;\n}\n.pure-table-odd td {\n    background-color: #f2f2f2;\n}\n\n/* nth-child selector for modern browsers */\n.pure-table-striped tr:nth-child(2n-1) td {\n    background-color: #f2f2f2;\n}\n\n/* BORDERED TABLES */\n.pure-table-bordered td {\n    border-bottom: 1px solid #cbcbcb;\n}\n.pure-table-bordered tbody > tr:last-child > td {\n    border-bottom-width: 0;\n}\n\n\n/* HORIZONTAL BORDERED TABLES */\n\n.pure-table-horizontal td,\n.pure-table-horizontal th {\n    border-width: 0 0 1px 0;\n    border-bottom: 1px solid #cbcbcb;\n}\n.pure-table-horizontal tbody > tr:last-child > td {\n    border-bottom-width: 0;\n}\n\n\n/* ----- Specific Juno Styles ----- */\n\nsummary {\n  display: list-item;\n  padding: 1px;\n}\n\nbutton {\n  margin-left: 5px;\n  margin-right: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border: 1px solid transparent;\n  border-radius: 0px;  \n  background: var(--main-control-button-color);\n  color: var(--main-color);\n}\n\nbutton.juno-primary {\n  background: var(--primary-action-bg-color);\n  color: var(--primary-action-color);\n  min-width: 60px;\n}\n\nbutton.juno-secondary {  \n  min-width: 60px;\n}\n\nbutton.juno-button-on {\n  background: orange;\n  color: black;\n}\n\n\n\nbutton.juno-command-button {\n  \n}\n\n\n\njuno-dialog { \n  min-width: 300px;\n}\n\nbutton:hover {\n  background: var(--button-hover-bg-color);  \n  border: 1px inset #ffffff;\n}\n\nbutton.juno-button-on:hover {\n  background: darkorange;\n  color: black;\n}\n\n\nselect,input {\n  border: 1px solid var(--main-accent-line);\n  background: var(--control-text-input-color-bg);\n  color: var(--main-color);\n  padding: 3px;\n}\n\nselect:focus,input:focus {\n  color: var(--control-text-input-color);\n  border-top: 1px solid var(--main-accent-line);\n  border-left: 1px solid var(--main-accent-line);\n  border-right: 1px solid var(--main-accent-line);\n  border-top: 1px solid var(--value-focus-color);  \t      \t      \n}\n\na {\n    color: var(--link-color);\n    background: var(--link-bg-color);\n}\n\na:visited {\n    color: var(--link-visited-color);\n    background: var(--link-visted-bg-color);\n}\n\ndialog:modal {\n  height: 40%;\n  width: 60%;\n  overflow: hidden;\n  position: fixed;\n  top: 0px;\n  bottom: 0px;\n  max-width: calc((100% - 6px) - 2em);\n  max-height: calc((100% - 6px) - 2em);\n  min-width: 300px;\n  user-select: text;\n  visibility: visible;  \n  border: 1px solid var(--main-accent-color);\n  color: var(--main-color);\n  background: var(--main-bg-color);\n  box-shadow: 1px 2px 11px 2px #00000033;\n}\n\n#juno-loading-message {\n    font-family: var(--main-app-font);\n    padding: 5px;\n    text-align: center;\n    font-size: 1.5em;\n}\n\n.filtered-hidden {\n  display: none;\n}\n\n.filtered-lower-opacity {\n  opacity: 50%;\n}\n\n::-webkit-scrollbar {\n    width: 10px;\n    height: 10px;\n}\n\n::-webkit-scrollbar-track {\n    background: var(--scrollbar-track-color);\n}\n\n::-webkit-scrollbar-thumb {\n    background: var(--scrollbar-thumb-color);\n}\n\n::-webkit-scrollbar-corner {\n    background: var(--scrollbar-track-color);\n}\n\n.juno-scrollbar {\n    width: 10px;\n    height: 10px;\n}\n\n.juno-scrollbar::-webkit-scrollbar-track {\n    background: var(--scrollbar-track-color);\n}\n\n.juno-scrollbar::-webkit-scrollbar-thumb {\n    background: var(--scrollbar-thumb-color)\n}\n\n\n.juno-view-container {\n  display: inline-block;\n  color: var(--main-color);\n  width: inherit;\n  height: inherit;\n  position: relative;\n  overflow: hidden;  /* Views need to manage how they present their content */\n}\n\n.juno-view-content {\n  height: calc(100% - 5px);\n  width: 100%;\n}\n\nhr {\n    border: 0;\n    height: 0;\n    border-top: 1px solid rgba(0,0,0,.1);\n    border-bottom: 1px solid rgba(255,255,255,.3);\n}\n\n.juno-monospace {\n  font-family: var(--main-mono-space);\n}\n\n.juno-page-header {\n  color: var(--header-color);\n  background: var(--header-bg-color);\n  height: 28px;\n  display: flex;\n}\n\n.juno-view-container thead {\n  text-align: left;\n  padding: 3px;  \n  background: var(--main-accent-color);\n}\n\n\n.juno-view-container th {\n   font-weight: bold;\n}\n\ntd.juno-dtable {\n    vertical-align:top; \n    padding: 5px; \n    border-bottom: 1px solid var(--main-accent-line);\n}\n\ntr.juno-dtable {\n    padding: 5px;\n}\n\n.juno-dtable th {\n    padding: 5px;\n}\n\n\ndiv.juno-notification {\n   z-index: 5; \n   box-shadow: 1px 2px 11px 2px #00000050; \n   padding: 5px; \n   position: relative; \n   opacity: 0; cursor: pointer; \n   color: var(--main-bg-color); \n   background: var(--main-color); \n   display: inline-block; \n   width: 250px; \n   overflow: auto; \n   height: 70px; \n   text-overflow: ellipses;\n   border-radius: 5px; \n}\n\n.juno-empty-content {\n  width: 100%;\n  height: 100%;    \n  text-align: middle;\n}\n\n.juno-vertical-split-container {\n  overflow: hidden;\n  margin: 0px;\n  padding: 0px;\n  position: relative;\n  display: inline-block;  \n  height: calc(100% - 5px);\n}\n\n.juno-horizontal-split-container {\n  overflow: hidden;\n  margin: 0px;\n  padding: 0px;\n  position: relative;\n  display: block;  \n  height: calc(100% - 5px);\n}\n\nli.juno-main-menu-header {\n  display: inline-block;\n  color: var(--header-color);\n}\n\n.juno-vertical-dragger { \n  width: 7px;\n  height: 100%;\n  cursor: col-resize;\n  display: inline-block;\n  border-left: 1px solid var(--main-accent-line);\n}\n\n.juno-vertical-dragger:hover { \n  background: var(--main-accent-line-hover);\n}\n\n.juno-horizontal-dragger {\n  height: 7px;\n  width: 100%;\n  cursor: row-resize;\n  display: inline-block;\n  border-top: 1px solid #00000020;\n}\n\n.juno-horizontal-dragger:hover {  \n  background: var(--main-accent-line-hover);\n}\n\n.juno-active-hover {\n  background: #00000010;\n}\n\n.juno-buffer-bar {    \n  background: var(--main-accent-color);\n  width: 100%;\n  cursor: default;\n  white-space: nowrap;\n  overflow: hidden;\n  padding-top: 2px;\n  padding-bottom: 2px;\n  color: var(--control-unfocused-color);\n  border-bottom: 1px solid var(--main-accent-line);\n}\n\n.juno-instructions {\n  padding-bottom: 5px;  \n}\n\n.juno-control-group {\n  padding: 5px;\n}\n\n.juno-title {\n  padding-left: 10px;\n  padding-right: 10px;\n  font-weight: bold;\n  \n}\n\n.juno-path {\n  color: var(--type-path-color);\n  padding-left: 10px;\n  padding-right: 10px;\n  font-family: var(--main-mono-space);\n}\n\n.juno-path:hover {\n  background: #FFFFFF40;\n  box-shadow: 0 0 4px 1px #a0a0a042;\n \n}\n\ndiv.juno-result,\ndetails.juno-result {\n  border-left: 3px solid #0167835e;\n  border-top: 1px solid #00000020;\n  padding: 5px;\n  margin-top: 7px;\n  width: calc(100% - 13px);\n  display: inline-block; \n}\n\n.juno-log-output {\n  background: var(--log-result-bg-color);\n  height: calc(100% - 20px);\n  overflow: scroll;\n  width: 100%;\n  vertical-align:bottom;\n}\n\n.juno-log-message {\n  background: var(--log-message-bg-color);\n}\n\nspan.juno-evaluator {\n  padding-left: 10px;\n  padding-right: 10px;\n  font-family: var(--main-mono-space);\n  margin-left: 10px;\n  margin-right: 10px;\n  color: var(--main-color);\n}\n\nspan.juno-namespace {\n  font-family: var(--main-mono-space);\n  color: var(--namespace-color);\n}\n\nli.juno-namespace {\n  color: var(--namespace-color);\n  font-weight: bold;  \n}\n\ndiv.juno-symbol-browser {\n  display: flex;\n  align-content: flex-start;\n  height: 100%;\n  overflow-y: hidden;\n  overflow-x: scroll;\n}\n\n.juno-symbol-browser ol {\n  height: calc(100% - 10px);\n  overflow-y: scroll;\n  overflow-x: hidden; \n  padding-inline-start: 2px;\n  border-right: 2px inset var(--main-accent-line);\n  max-width: 295px;\n  min-width: 200px;\n  background: var(--main-control-surface-accent-color);\n}\n\n.juno-list-item {\n  list-style: none;\n  padding: 4px;\n  cursor: default;\n  min-width: 200px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  \n}\n\n\n.juno-menu-item {\n  text-overflow: ellipsis;\n}\n\n\n.juno-highlighted {\n  background-color: var(--highlight-bg-color) !important;\n  color: var(--highlight-color) !important;\n}\n\n\ndiv.juno-focused {\n  background: var(--control-focused);\n  color: var(--main-color);\n  border-bottom: 1px solid var(--main-control-button-color);\n}\n\n\n\nspan.juno-needs-save {\n  color: var(--value-modified-color)\n}\n\n.juno-menu {\n  position: absolute;\n  z-index: 20;\n  /* animation: slide-in 0.2s ease-out; */\n  box-shadow: 2px 3px 8px 0px #00000069;\n  background: var(--main-bg-color);\n  border: 1px solid var(--main-control-surface-accent-color);\n}\n\n\nli.juno-menu-header {\n  cursor: default;\n  line-height: 1.8em;\n  padding-left: 10px;\n  padding-right: 10px;\n  border-radius: 4px;\n  user-select: none;\n}\n\nli.juno-main-menu-header {\n  \n}\n\nspan.juno-menu-text {\n \n}\n\nspan.juno-menu-submenu {\n  float: right;\n  opacity: 0.7;\n}\n\nli.juno-menu-header:hover {\n  background: var(--highlight-bg-color);\n  color: var(--highlight-color);\n}\n\nli.juno-menu-header:active {\n  background: var(--highlight-bg-color);\n  color: var(--highlight-color);\n}\n\n\nli.juno-menu-selected {\n  background: var(--highlight-bg-color) !important;\n  color: var(--highlight-color) !important;\n}\n\n.juno-menu-selected > .pure-menu-link {\n  background: var(--highlight-bg-color) !important;\n  color: var(--highlight-color) !important;\n}\n\n.juno-selected {\n  background: var(--selected-bg-color);\n  color: var(--selected-color);\n  font-weight: bold;\t      \n}\n\n\n\n.juno-header {  \n  padding-top: 5px;\n  padding-bottom: 4px;\n  margin-right: 10px;\n  font-weight: bold;\n  display: inline-block;\n  cursor: default;\n  color: var(--app-header-color);\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n.juno-display-none {\n    display: none !important;\n}\n\ndiv.juno-floating-container {\n    cursor: default;\n    user-select: none;\n    box-shadow: 1px 1px 12px 0px #00000080;\n    background: var(--main-bg-color); \n    color: var(--main-color);\n    position: absolute;\n    z-index: 10;\n    min-width: 300px;\n}\n\ntd.juno-obj-to-dom-key {\n    vertical-align: top;\n    color: var(--type-key-color);\n    text-align: right;\n    font-weight: bold;\n    padding-right: 5px;\n}\n\nsummary.juno-type-view {\n  padding: 1px;\n}\n\nspan.juno-code-value {  \n  color: var(--type-code-color);\n  text-overflow: ellipsis;\n}\n\nsummary.juno-code-value {\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  font-family: var(--main-mono-space);\n}\n\n.juno-code-value {\n  color: var(--type-code-color);\n  font-style: italic;\n}\n\n.juno-code-value:focus {\n  outline: var(--value-focus-color) auto 1px;\n}\n\nspan.juno-value {\n  display: inline-block;\n}\n\n.juno-type-array {\n  color: var(--type-array-color);\n}\n\n.juno-value:focus {\n  outline: var(--value-focus-color) auto 1px;\n}\n\n.juno-type-array summary:focus {\n  outline: var(--value-focus-color) auto 1px;\n}\n\n.juno-obj-to-dom summary:focus {\n  outline: var(--value-focus-color) auto 1px;\n}\n\n.juno-type-number {\n  color: var(--type-number-color)\n}\n\n.juno-type-boolean {\n  color: var(--type-boolean-color)\n}\n\n.juno-type-string {\n  color: var(--type-string-color)\n}\n\n.juno-type-regexp {\n  color: var(--type-regexp-color);\n  font-style: italic;\n}\n\n.juno-timestamp {\n    padding-right: 10px; \n    min-width: 150px; \n    display: inline-block;\n}\n\n.juno-mode {\n  color: var(--mode-color);\n  margin-left: 10px;\n  margin-right: 10px; \n}\n\nsummary.juno-type-function {\n  color: var(--type-function-color);\n  \n}\n\n.juno-type-function {\n  color: var(--type-function-color);\n}\n\n.juno-type-asyncfunction {\n  color: var(--type-asyncfunction-color);\n}\n\n\n.juno-type-error {\n  color: var(--type-error-color);\n}\n\n.juno-type-symbol {\n  color: var(--type-symbol-color);  \n  box-shadow: 0 0 4px 1px #a0a0a042;\n}\n\n.juno-type-null {\n  color: var(--type-null-color);\n  font-style: italic;\n}\n\n.juno-type-undefined {\n  color: var(--type-undefined-color);\n}\n\nli.juno-array-item {\n    list-style: decimal;\n}\n\nli.juno-array-item::marker {\n    color: var(--type-path-color);\n    content: counter(list-item) \":  \";    \n    font-family: var(--main-mono-space);\n}\n\nol.juno-type-array {\n  border: 2px dashed transparent;\n  border-radius: 2px;\n}\n\nol.juno-type-array:hover {\n  background: #ffffff03;\n  box-shadow: 0 0 4px 1px #a0a0a042;\n  border-color: #ffffff08;\n}\n\ndiv.juno-type-element {\n    font-weight: bold; \n    cursor: pointer; \n    display: inline-block; \n    border-radius: 3px; \n    padding: 3px; \n    background: var(--main-bg-color);\n    color: var(--main-color);\n    margin-right: 5px; \n    border: 1px solid var(--main-color);\n}\n\n.identification {\n  background: var(--identification-bg-color) !important;\n}\n\ndiv.juno-help-context {\n  white-space: nowrap;\n  font-size: 1.1em;\n  text-overflow: ellipsis;\n  display: inline-block;\n  width: calc(100% - 30px);\n  padding-left: 10px;\n  padding-right: 10px;\n  font-family: var(--main-mono-space);\n}\n\ndiv.juno-control {\n    overflow: scroll;\n    height: calc(100% - 10px);\n    width: calc(100% - 10px);\n    background: var(--control-bg-color);\n    color: var(--control-color);\n}\n\ndiv.juno-editable {\n    padding: 5px;\n    caret-color: red;\n}\n\ndiv.juno-editable:focus {\n    outline: none;\n    transition: all .1s ease-in-out;\n}\n\ninput.juno-editable {\n   transition:all .1s ease-in-out;\n}\n\ninput.juno-editable:focus {\n   outline: none;\n   box-shadow: 1px 1px 6px 2px #00000040;\n   transition all .1s ease-in-out;\n}\n\nspan.juno-editable:focus {\n   outline: none;\n   background: #FFFFFF10;\n   padding-left: 5px;\n   padding-right: 5px;\n   box-shadow: 1px 1px 6px 2px #00000040;\n   transition: all .1s ease-in-out;\n}\n\n.juno-editable  pre {\n    font-family: var(--main-mono-space);\n    box-shadow: 1px 1px 6px 2px #00000010; \n    border: 1px solid var(--main-accent-line); \n    background: #FFFFFF20;\n    overflow: auto;\n    padding: 5px;\n}\n\n.juno-editable code {\n    background: #FFFFFF20;\n    padding: 3px;\n}\n\n.juno-editable div {\n  margin-top: 5px;\n  margin-bottom: 10px;\n}\n\n.juno-editable div:focus {\n  outline: none;\n}\n\n.juno-context-bar {\n  padding: 3px;\n  min-height: 26px;\n  background: var(--main-control-surface-accent-color);\n}\n\n.juno-operator-name {\n  padding-left: 4px;\n  padding-right: 4px;\n  \n}\n\n.juno-arg-name {\n  padding-left: 5px;\n  padding-right: 5px;\n  margin-left: 2px;  \n}\n\nspan.juno-tag {\n    cursor: pointer; \n    margin-right: 5px; \n    padding-bottom: 2px;\n    padding-top: 2px;\n    padding-left: 5px;\n    padding-right: 5px;\n    color: var(--value-modified-color);\n    display: inline-block;\n    border: 1px solid var(--main-accent-line-hover);\n    transition: all .1s ease-in-out;\n}\n\nspan.juno-tag:hover {\n    transition: all .1s ease-in-out;\n    box-shadow: 0 0 5px 1px #a0a0a052;\n    background: #FFFFFF10;\n}\n\nspan.juno-requires {\n    padding: 5px;\n    cursor: pointer;\n}\n\nspan.juno-requires:hover {\n    text-decoration: underline;\n}\n\n.opacity-0 {\n  opacity: 0;\n}\n\ntd.juno-selected {\n    background: var(--editor-selected-word-bg-color);\n    color: var(--editor-selected-word-color);\n}\n\n.juno-selected-menu-item {\n    margin-left: -5px; \n    padding-left: 5px; \n    padding-right: 5px; \n    border-radius: 3px; \n    font-weight: bold; \n    background: var(--selected-bg-color); \n    color: var(--selected-color);\n}\n\ninput.juno-input-error {\n   color: darkred; \n   text-decoration: line-through;\n}\n\n.juno-shadow-on-hover {\n    border: 1px solid transparent;\n}\n\n.juno-shadow-on-hover:hover {\n    box-shadow: 2px 3px 8px 0px #00000040;\n    border-color: var(--main-accent-line-hover);\n}\n\n.juno-centered {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n@keyframes slide-in {\n    0% {\n        margin-top:-6px;\n        opacity: 0\n    }\n    100% {\n        margin-top:-0px;\n        opacity: 1\n    }\n}\n\n.juno-quick-alert {\n    text-align: center; \n    min-width: 300px; \n    box-shadow: 1px 1px 6px 2px #00000040; \n    z-index: 1000; \n    padding: 20px; \n    font-size: 1.5em;\n    font-weight: bold;\n    border-radius: 3px; \n    border: 1px solid var(--main-accent-color); \n    background: var(--control-bg-color); \n    color: var(--control-color);\n}\n\nspan.juno-hint {\n    padding-left: 4px;\n    padding-right: 4px;\n    margin-left: 10px;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.juno-dom-editor-root {\n    padding: 10px;\n    border: 1px dashed var(--main-accent-line);\n}\n\n.juno-non-value {\n    opacity: 60%;\n}\n\n.juno-source-location {\n    padding: 5px;\n    background: var(--main-accent-line);\n    cursor: pointer;\n}\n\n.juno-full-width {\n    width: 100%;\n}\n\n.juno-bottom-bar {\n    padding: 5px;\n    margin-top: 5px;\n}\n\n.juno-form {\n    padding: 10px;\n    flex-direction: column;\n    display: flex;\n    height: calc(100% - 50px);\n    justify-content: stretch;\n}\n\n.juno-form h4 {\n    margin-top: 0px;\n    margin-bottom: 5px;\n}\n\n.juno-form-data {\n    line-height: 1.5em;\n    display: flex;\n    justify-content: stretch;\n    flex-direction: column;\n}\n\ninput.juno-search {\n    padding: 5px;\n}\n\ninput.juno-search:focus {\n    \n}\n\nul.juno-tabs {\n    padding-inline-start: 0px;\n    padding: 0;\n}\n\n.juno-tabs li {\n    list-style: none;\n    display: inline-block;\n    padding: 5px;\n    border-right: 1px solid var(--main-accent-line);\n    margin-right: 0px;\n    min-width: 100px;\n    background: var(--main-bg-color);\n    text-align: center;\n    cursor: pointer;\n    border-bottom: 2px solid transparent;\n    \n}\n\nli.juno-tab-active {\n  border-bottom: 2px solid var(--selected-color);\n  font-weight: bold;\n}\n\n.juno-tab-content-section {\n    overflow: auto;\n    display: inline-block;\n    width: calc(100% - 5px);\n    height: calc(100% - 50px);\n}\n\n.juno-tab-content {\n  display: none;\n  opacity: 1;\n}\n\ndiv.juno-tab-active {\n  display: block;\n  opacity: 1;\n}\n\n.juno-lower-left-expander {\n    position: absolute; \n    right: 0px; \n    bottom: -10px; \n    width: 25px; \n    height: 25px; \n    cursor: nwse-resize; \n    background: tranparent;\n    text-align: right;\n    font-size: 1em;\n    opacity: 0.0;\n    transition: all .1s ease-in-out;\n}\n\n.juno-lower-left-expander:hover {\n    opacity: 1;\n    font-size: 2em;\n    color: var(--primary-action-bg-color);\n    transition: all .1s ease-in-out;\n}\n\n.juno-no-data-found {\n    font-size: 1.5em;\n    text-align: center;\n    padding: 30px;\n    line-height: 2.0em;\n    font-weight: bold;\n}\n\n.juno-pointer {\n    cursor: pointer;\n    transition: all .1s ease-in-out;\n}\n\n.juno-pointer:hover {\n    transition: all .1s ease-in-out;\n    box-shadow: 2px 3px 8px 0px #00000040;\n}\n\n/* Overrides - may be dealt with in a better way but for now\n * placing in the same as the main style set for easier\n * managament */\n\n.ace-tm .ace_marker-layer .ace_bracket {\n    margin: -1px 0 0 -1px;\n    border: 1px solid var(--matching-paren-outline-color);\n    background: var(--matching-paren-color);\n}\n\n\n" })();__obj__1["*global_themes*"]={juno_light:":root {\n    --main-bg-color: hsl(40deg 13% 90%);\n    --main-color: #000000;\n    --header-color: black;\n    --header-bg-color: hsl(43deg 14% 93%);;\n    --app-header-color: black;\n    --highlight-bg-color: #404040;\n    --highlight-color: white;\n    --selected-bg-color: hsl(40deg 13% 100%);;\n    --selected-color: darkblue;\n    --control-bg-color: hsl(40deg 13% 90%);\n    --control-color: #000000;\n    --control-focused: hsl(45 11% 95% / 1);\n    --control-text-input-color-bg: #FFFFFF50;\n    --control-unfocused-color: darkgray;\n    --control-unfocused-bg-color: inherit;\n    --control-disabled-bg-color: #eaeded;\n    --control-disabled-color: #cad2d3;\n    --control-readonly-color: #777;\n    --button-hover-bg-color: #00000030;\n    --namespace-color: #976464;\n    --log-message-bg-color: inherit;\n    --log-result-bg-color: inherit;\n    --main-accent-color: #0000000A;\n    --main-accent-line: #00000015;\n    --main-accent-line-hover: #00000025;\n    --main-control-surface-accent-color: #efe5e540;\n    --main-control-button-color: #00000020;\n    --scrollbar-thumb-color: #00000040;\n    --scrollbar-track-color: #00000010;\n    --link-color: #002fdc;\n    --link-visited-color: #9a00dc;\n    --link-bg-color: inherit;\n    --link-visited-bg-color: inherit;\n    --value-modified-color: #016783;\n    --matching-paren-color: #ffeb00;\n    --matching-paren-outline-color: #b6a800;\n    --type-number-color: green;\n    --type-boolean-color: orange;\n    --type-string-color: darkblue;\n    --type-function-color: #2e3eb4;\n    --type-asyncfunction-color: #3f5b71;\n    --type-null-color: #a35e5e;\n    --type-undefined-color: #9d9d9d;\n    --type-symbol-color: #ff4f4f;\n    --type-error-color: darkred;\n    --type-array-color: #535173;\n    --type-path-color: #88127D;\n    --type-regexp-color: #fe2f53;\n    --type-code-color: darkblue;\n    --value-focus-color: #0168ff;\n    --mode-color: #0278e7;\n    --primary-action-bg-color: #0278e7;\n    --primary-action-color: #FFFFFF;\n    --main-app-font: -apple-system,BlinkMacSystemFont,'Segoe UI','Helvetica Neue', Helvetica, FreeSans, Arimo, \"Droid Sans\", Arial, sans-serif;\n    --main-app-font-size: 14px;\n    --main-mono-space: ui-monospace,\n  \"Cascadia Mono\", \"Segoe UI Mono\",    \n    \"Roboto Mono\",\n    \"Ubuntu Mono\",\n    Menlo, Monaco, Consolas,\n    monospace;\n    --editor-bg-color: hsl(43deg 14% 93%);\n    --editor-text-color: #363636;\n    --editor-gutter-bg-color: #e0e0e0;\n    --editor-gutter-color: #333;\n    --editor-cursor-color: #202020;\n    --editor-selected-bg-color: #4ab1ff3d;\n    --editor-selected-word-bg-color: #fff05c40;\n    --editor-step-bg-color: rgb(198,219,174);\n    --editor-active-line-bg: rgb(255 255 255 / 53%);\n    --editor-active-line-gutter-bg-color: rgb(166 166 166 / 46%);\n    --editor-invisible-color: #BFBFBF;\n    --editor-keyword-color: #670171;\n    --editor-identifier-color: #191919;\n    --editor-constant-color: #CD6839;\n    --editor-numeric-color: #9A5925;\n    --editor-support-color: #104e8b;\n    --editor-function-color: #0274a1;\n    --editor-string-color: #006b1e;\n    --editor-constant-color: #CF6A4C;\n    --editor-variable-color: #009ACD;\n    --editor-comment-color: rgba(148,148,148, 0.91);\n    --editor-storage-color: #A52A2A;\n    --editor-illegal-color: #FD1224;\n    --editor-illegal-bg-color: rgba(255, 6, 0, 0.15);\n    --editor-deprecated-color: #FD1732;\n    --editor-deprecated-bg-color: #EEEAE8;\n    --editor-regex-color: #fe2f53;\n    --editor-regex-bg-color: #FE40AA10;\n    --editor-heading-color: #B8012D;\n    --editor-heading-bg-color: rgba(191,97,51,0.051);\n    --editor-list-color: #8F5B26;\n}",earth_tones:":root {\n  --main-bg-color: #849a8f; /* #85988b; */\n  --main-color: #000000;\n  --header-color: white;\n  --header-bg-color: #000000BF;\n  --app-header-color: #E6E6E6;\n  --highlight-bg-color: #FBF7ED;\n  --highlight-color: #000000;\n  --control-bg-color: hsl(44deg 26% 83%);\n  --control-color: inherit;\n  --control-focused: #efe5e540;\n  --control-text-input-color-bg: #FFFFFF50;\n  --control-unfocused-color: #0000009e;\n  --control-unfocused-bg-color: #FFFFFF10;\n  --control-disabled-bg-color: #eaeded;\n  --control-disabled-color: #cad2d3;\n  --control-readonly-color: #777;\n  --button-hover-bg-color: #00000030;\n  --namespace-color: #9d0e0e;\n  --main-accent-color: #0000000A;\n  --main-accent-line: #00000015;\n  --main-accent-line-hover: #00000025;\n  --main-control-surface-accent-color: #efe5e540;\n  --main-control-button-color: #00000020;\n  --scrollbar-thumb-color: #00000040;\n  --scrollbar-track-color: #00000010;\n  --link-color: #002fdc;\n  --link-visited-color: #9a00dc;\n  --link-bg-color: inherit;\n  --link-visited-bg-color: inherit;\n  --value-modified-color: #004e64;\n  --matching-paren-color: #ffeb00;\n  --matching-paren-outline-color: #b6a800;\n  --log-message-bg-color: hsl(44deg 26% 83%); /* hsl(44deg 38% 89%); */\n  --log-result-bg-color: hsl(44deg 26% 83%);  /* hsl(44deg 26% 83%); */\n  --type-number-color: #015415;\n  --type-boolean-color: #d35600;\n  --type-string-color: darkblue;\n  --type-function-color: #2e3eb4;\n  --type-asyncfunction-color: #3f5b71;\n  --type-null-color: #a35e5e;\n  --type-undefined-color: #9d9d9d;\n  --type-key-color: #74006c;\n  --type-symbol-color: #ff4f4f;\n  --type-error-color: darkred;\n  --type-array-color: #535173;\n  --type-path-color: #88127D;\n  --type-regexp-color: #fe2f53;\n  --type-code-color: darkblue;\n  --value-focus-color: #0168ff;\n  --mode-color: #0c20ff;\n  --primary-action-bg-color: #0278e7;\n  --primary-action-color: #FFFFFF;\n  --main-app-font:  -apple-system,BlinkMacSystemFont,'Segoe UI','Helvetica Neue', Helvetica, FreeSans, Arimo, \"Droid Sans\", Arial, sans-serif;\n  --main-app-font-size: 14px;\n  --main-mono-space: ui-monospace,		     \n    \"Cascadia Mono\", \"Segoe UI Mono\",    \n    \"Roboto Mono\",\n    \"Ubuntu Mono\",\n    Menlo, Monaco, Consolas,\n    monospace;\n  --editor-bg-color: hsl(44deg 38% 89%);\n  --editor-text-color: #4d6268;\n  --editor-gutter-bg-color: hsl(44deg 25% 84%);\n  --editor-gutter-color: #333;\n  --editor-cursor-color: #000000;\n  --editor-selected-bg-color: rgb(255 60 0 / 35%);\n  --editor-selected-word-bg-color: #FFFFFF;\n  --editor-step-bg-color: rgb(255, 255, 0);\n  --editor-active-line-bg: hsl(44deg 38% 84%);\n  --editor-active-line-gutter-bg-color: rgb(166 166 166 / 46%);\n  --editor-invisible-color: rgba(147, 161, 161, 0.50);\n  --editor-keyword-color: #00770c;\n  --editor-identifier-color: #191919;\n  --editor-constant-color: #859900;\n  --editor-numeric-color: #D33682;\n  --editor-support-color: #104e8b;\n  --editor-function-color: #268BD2;\n  --editor-string-color: #2AA198;\n  --editor-constant-color: #CB4B16;\n  --editor-variable-color: #268BD2;\n  --editor-comment-color: #8d7070;\n  --editor-storage-color: #073642;\n  --editor-illegal-color: #FD1224;\n  --editor-illegal-bg-color: rgba(255, 6, 0, 0.15);\n  --editor-deprecated-color: #FD1732;\n  --editor-deprecated-bg-color: #EEEAE8;\n  --editor-regex-color: #D30102;\n  --editor-regex-bg-color: inherit;\n  --editor-heading-color: #B8012D;\n  --editor-heading-bg-color: rgba(191,97,51,0.051);\n  --editor-list-color: #8F5B26;\n}\n",ice:":root {\n    --main-bg-color: hsl(186.46deg 28.63% 44.51%);\n    --main-color: #0a212d;\n    --header-color: #f2f0eb;\n    --header-bg-color: hsl(183.33deg 29.51% 23.92%);\n    --app-header-color: #f2f0eb;\n    --highlight-bg-color: #bc5414;\n    --highlight-color: white;\n    --selected-bg-color: hsl(40deg 13% 100%);;\n    --selected-color: darkblue;\n    --control-bg-color: #e2ded4;\n    --control-color: #000000;\n    --control-focused: hsl(186.15deg 22.29% 65.69%);\n    --control-text-input-color-bg: #FFFFFF50;\n    --control-unfocused-color: #3e3232;\n    --control-unfocused-bg-color: #FFFFFF10;\n    --control-disabled-bg-color: #eaeded;\n    --control-disabled-color: #cad2d3;\n    --control-readonly-color: #777;\n    --button-hover-bg-color: #00000010;\n    --namespace-color: #ac4302;\n    --log-message-bg-color: hsl(0deg 0% 100% / 36%);\n    --log-result-bg-color: hsl(186.46deg 3% 73.77%);\n    --main-accent-color: hsl(186.46deg 28.63% 44.51%);\n    --main-accent-line: #00000015;\n    --main-accent-line-hover: #00000025;\n    --main-control-surface-accent-color: hsl(186.46deg 22.65% 41.97%);\n    --main-control-button-color: #cdc5b4;\n    --scrollbar-thumb-color: #00000040;\n    --scrollbar-track-color: #00000010;\n    --link-color: #002fdc;\n    --link-visited-color: #9a00dc;\n    --link-bg-color: inherit;\n    --link-visited-bg-color: inherit;\n    --value-modified-color: #1e52af;\n    --matching-paren-color: #ffed1f;\n    --matching-paren-outline-color: #928700;\n    --type-number-color: #015415;\n    --type-boolean-color: #d35600;\n    --type-string-color: darkblue;\n    --type-function-color: #2e3eb4;\n    --type-asyncfunction-color: #3f5b71;\n    --type-null-color: #a35e5e;\n    --type-undefined-color: #9d9d9d;\n    --type-key-color: #74006c;\n    --type-symbol-color: #ff4f4f;\n    --type-error-color: darkred;\n    --type-array-color: #535173;\n    --type-path-color: #88127D;\n    --type-regexp-color: #fe2f53;\n    --type-code-color: darkblue;\n    --value-focus-color: #0168ff;\n    --mode-color: #8b19cc;\n    --primary-action-bg-color: #0278e7;\n    --primary-action-color: #FFFFFF;\n    --main-app-font: -apple-system,BlinkMacSystemFont,'Segoe UI','Helvetica Neue', Helvetica, FreeSans, Arimo, \"Droid Sans\", Arial, sans-serif;\n    --main-app-font-size: 14px;\n    --main-mono-space: ui-monospace,\n    \"Cascadia Mono\", \"Segoe UI Mono\",    \n    \"Roboto Mono\",\n    \"Ubuntu Mono\",\n    Menlo, Monaco, Consolas,\n    monospace;\n    --editor-bg-color: hsl(42 19% 86% / 1);\n    --editor-text-color: #4d6268;\n    --editor-gutter-bg-color: hsl(40.8deg 20% 75.49%);\n    --editor-gutter-color: #333;\n    --editor-cursor-color: #000000;\n    --editor-selected-bg-color: rgb(255 60 0 / 35%);\n    --editor-selected-word-bg-color: #FFFFFF;\n    --editor-step-bg-color: rgb(255, 255, 0);\n    --editor-active-line-bg: hsl(42 15% 90% / 1);\n    --editor-active-line-gutter-bg-color: rgb(166 166 166 / 46%);\n    --editor-invisible-color: rgba(147, 161, 161, 0.50);\n    --editor-keyword-color: #bc5414;\n    --editor-identifier-color: #191919;\n    --editor-constant-color: #859900;\n    --editor-numeric-color: #D33682;\n    --editor-support-color: #104e8b;\n    --editor-function-color: #268BD2;\n    --editor-string-color: #28726d;\n    --editor-constant-color: #CB4B16;\n    --editor-variable-color: #268BD2;\n    --editor-comment-color: #8d7070;\n    --editor-storage-color: #073642;\n    --editor-illegal-color: #FD1224;\n    --editor-illegal-bg-color: rgba(255, 6, 0, 0.15);\n    --editor-deprecated-color: #FD1732;\n    --editor-deprecated-bg-color: #EEEAE8;\n    --editor-regex-color: #D30102;\n    --editor-regex-bg-color: inherit;\n    --editor-heading-color: #B8012D;\n    --editor-heading-bg-color: rgba(191,97,51,0.051);\n    --editor-list-color: #8F5B26;\n}",cobalt:":root {\n    --main-bg-color: #001d36;\n    --main-color: #d0d0d0;\n    --highlight-bg-color: #ffffff59;\n    --highlight-color: #fff4e8;\n    --control-bg-color: #002240;\n    --control-color: #FFFFFF;\n    --control-text-input-color-bg: #FFFFFF50;\n    --control-focused: #efe5e540;\n    --control-unfocused-color: darkgray;\n    --control-disabled-bg-color: #eaeded;\n    --control-disabled-color: #cad2d3;\n    --control-readonly-color: #777;\n    --button-hover-bg-color: #00000030;\n    --app-header-color: #b7bbbf;\n    --namespace-color: #e9a5a5;\n    --main-accent-color: #ff927221;\n    --main-accent-line: #c77a0b20;\n    --main-accent-line-hover: #FFFFFF40;\n    --main-control-surface-accent-color: #efe5e51c;\n    --main-control-button-color: #FFFFFF40;\n    --scrollbar-thumb-color: #FFFFFF40;\n    --scrollbar-track-color: #00000010;\n    --link-color: orange;\n    --link-visited-color: #e9a5a5;\n    --link-bg-color: inherit;\n    --link-visited-bg-color: inherit;\n    --value-modified-color: #4ac0e0;\n    --matching-paren-color: #ffeb0042;\n    --matching-paren-outline-color: #b6a80052;;\n    --type-number-color: #ff618c;\n    --type-boolean-color: orange;\n    --type-string-color: #3bd901;\n    --type-function-color: #b1baff;\n    --type-asyncfunction-color: #b2b7ba;\n    --type-null-color: #a35e5e;\n    --type-undefined-color: #9d9d9d;\n    --type-key-color: #e456da;\n    --type-symbol-color: #ff4f4f;\n    --type-error-color: #f82e2e;\n    --type-array-color: #cac8e7;\n    --type-path-color: #b18bae;\n    --type-regexp-color: #fe2f81;\n    --type-code-color: #ffe2b7;\n    --value-focus-color: #0168ff;\n    --mode-color: #70baff;\n    --primary-action-bg-color: #0278e7;\n    --primary-action-color: #FFFFFF;\n    --main-app-font: -apple-system,BlinkMacSystemFont,'Segoe UI','Helvetica Neue', Helvetica, FreeSans, Arimo, \"Droid Sans\", Arial, sans-serif;\n    --main-app-font-size: 14px;\n    --main-mono-space: ui-monospace,\n  \"Cascadia Mono\", \"Segoe UI Mono\",    \n    \"Roboto Mono\",\n    \"Ubuntu Mono\",\n    Menlo, Monaco, Consolas,\n    monospace;\n    --editor-bg-color: #002240;\n    --editor-text-color: #FFFFFF;\n    --editor-gutter-bg-color: #e0e0e0;\n    --editor-gutter-color: #333;\n    --editor-cursor-color: #202020;\n    --editor-selected-bg-color: #4ab1ff3d;\n    --editor-selected-word-bg-color: #fff4a36e;\n    --editor-step-bg-color: rgb(198,219,174);\n    --editor-active-line-bg: rgb(255 255 255 / 53%);\n    --editor-active-line-gutter-bg-color: rgb(166 166 166 / 46%);\n    --editor-invisible-color: #BFBFBF;\n    --editor-keyword-color: #670171;\n    --editor-identifier-color: #191919;\n    --editor-constant-color: #CD6839;\n    --editor-numeric-color: #9A5925;\n    --editor-support-color: #104e8b;\n    --editor-function-color: #0274a1;\n    --editor-string-color: #006b1e;\n    --editor-constant-color: #CF6A4C;\n    --editor-variable-color: #009ACD;\n    --editor-comment-color: rgba(148,148,148, 0.91);\n    --editor-storage-color: #A52A2A;\n    --editor-illegal-color: #FD1224;\n    --editor-illegal-bg-color: rgba(255, 6, 0, 0.15);\n    --editor-deprecated-color: #FD1732;\n    --editor-deprecated-bg-color: #EEEAE8;\n    --editor-regex-color: #fe2f53;\n    --editor-regex-bg-color: #FE40AA10;\n    --editor-heading-color: #B8012D;\n    --editor-heading-bg-color: rgba(191,97,51,0.051);\n    --editor-list-color: #8F5B26;\n}\n",idle_fingers:":root {\n    --main-bg-color: #2d2d2d;\n    --main-color: #d0d0d0;\n    --highlight-bg-color: #ffffff59;\n    --highlight-color: #fff4e8;\n    --selected-bg-color: #0278e7;\n    --selected-color: #FFFFFF;\n    --control-bg-color: #323232;\n    --control-color: #f0f0f0;\n    --control-text-input-color-bg: #FFFFFF50;\n    --control-focused: #efe5e540;\n    --control-unfocused-color: darkgray;\n    --control-disabled-bg-color: #eaeded;\n    --control-disabled-color: #cad2d3;\n    --control-readonly-color: #777;\n    --button-hover-bg-color: #00000030;\n    --app-header-color: #b7bbbf;\n    --namespace-color: #e9a5a5;\n    --main-accent-color: #fffdfc21;\n    --main-accent-line: #c77a0b20;\n    --main-accent-line-hover: #FFFFFF40;\n    --main-control-surface-accent-color: #efe5e51c;\n    --main-control-button-color: #FFFFFF40;\n    --scrollbar-thumb-color: #FFFFFF40;\n    --scrollbar-track-color: #00000010;\n    --link-color: #68d9ff;\n    --link-visited-color: #e9a5a5;\n    --link-bg-color: inherit;\n    --link-visited-bg-color: inherit;\n    --value-modified-color: #4ac0e0;\n    --matching-paren-color: #ffeb0042;\n    --matching-paren-outline-color: #b6a800;\n    --type-number-color: #ff618c;\n    --type-boolean-color: orange;\n    --type-string-color: #a6c260;\n    --type-function-color: #b1baff;\n    --type-key-color: #e456da;\n    --type-asyncfunction-color: #b2b7ba;\n    --type-null-color: #a35e5e;\n    --type-undefined-color: #9d9d9d;\n    --type-symbol-color: #ff4f4f;\n    --type-error-color: #f82e2e;\n    --type-array-color: #cac8e7;\n    --type-path-color: #b18bae;\n    --type-regexp-color: #fe2f81;\n    --type-code-color: #ffe2b7;\n    --value-focus-color: #0168ff;\n    --mode-color: #a9d5ff;\n    --primary-action-bg-color: #0278e7;\n    --primary-action-color: #FFFFFF;\n    --main-app-font: -apple-system,BlinkMacSystemFont,'Segoe UI','Helvetica Neue', Helvetica, FreeSans, Arimo, \"Droid Sans\", Arial, sans-serif;\n    --main-app-font-size: 14px;\n    --main-mono-space: ui-monospace,\n  \"Cascadia Mono\", \"Segoe UI Mono\",    \n    \"Roboto Mono\",\n    \"Ubuntu Mono\",\n    Menlo, Monaco, Consolas,\n    monospace;\n    --editor-bg-color: #323232;\n    --editor-text-color: #FFFFFF;\n    --editor-gutter-bg-color: #e0e0e0;\n    --editor-gutter-color: #333;\n    --editor-cursor-color: #202020;\n    --editor-selected-bg-color: #ffd39985;\n    --editor-selected-word-bg-color: #fff05c40;\n    --editor-step-bg-color: rgb(198,219,174);\n    --editor-active-line-bg: rgb(255 255 255 / 53%);\n    --editor-active-line-gutter-bg-color: rgb(166 166 166 / 46%);\n    --editor-invisible-color: #BFBFBF;\n    --editor-keyword-color: #670171;\n    --editor-identifier-color: #191919;\n    --editor-constant-color: #CD6839;\n    --editor-numeric-color: #9A5925;\n    --editor-support-color: #104e8b;\n    --editor-function-color: #0274a1;\n    --editor-string-color: #006b1e;\n    --editor-constant-color: #CF6A4C;\n    --editor-variable-color: #009ACD;\n    --editor-comment-color: rgba(148,148,148, 0.91);\n    --editor-storage-color: #A52A2A;\n    --editor-illegal-color: #FD1224;\n    --editor-illegal-bg-color: rgba(255, 6, 0, 0.15);\n    --editor-deprecated-color: #FD1732;\n    --editor-deprecated-bg-color: #EEEAE8;\n    --editor-regex-color: #fe2f53;\n    --editor-regex-bg-color: #FE40AA10;\n    --editor-heading-color: #B8012D;\n    --editor-heading-bg-color: rgba(191,97,51,0.051);\n    --editor-list-color: #8F5B26;\n}\n"};__obj__1["browser_initializer"]=await (async function(){ return "=" })();__obj__1["browser_repl_package"]=await (async function(){ return ";; Browser Based Workspace\n;; Sets up the basic environment in Browser \n;; Initialize a simple REPL from which to start working\n\n\n\n(declare (namespace core))\n(console.log \"browser_workspace: running\")\n\n(-> window.top `postMessage (JSON.stringify { `command: \"build_application\" `source: \"bootstrap\" args: [\"start\"] }) \"*\")\n(defglobal errors_encountered false)\n\n(defparameter core/is_served? (and (not (blank? (resolve_path [ `location `hostname ] window)))\n                                   (== (prop (fetch \"/files\") `status) 200)))\n(console.log \"browser_workspace: online? is_served: \" is_served?)\n\n;; not needed in the client\n(delete_namespace `sys)\n\n(defun core/*initializer* ()\n  (let\n      ((scripts (-> (page_header) `querySelectorAll \"script[id]\")))\n      (aif (-> document `querySelector \"#juno-loading-message\")\n           (-> it `appendChild (html/div { } \"Initializing components...\")))\n    (console.log \"core/*initializer* running: \" *namespace*)\n    (if (> scripts.length 0)\n      (map (fn (idx)\n             (when (not (== (-> (prop scripts idx) `getAttribute `id) \"juno-core\"))\n               (eval `(defglobal ,#(+ \"$\" (-> (prop scripts idx) `getAttribute `id)) ,#(prop scripts idx)))))\n           (range scripts.length)))\n    (aif (-> document `querySelector \"#juno-loading-message\")\n         (-> it `remove))\n    ))\n\n\n(defun $set_global_theme (theme_name options)\n   (if (prop *global_themes* theme_name)\n       (let\n          ((head_elem (-> document `querySelector \"head\"))\n           (existing (html/get_by_id \"juno-css-theme\")))\n          (if existing\n               (-> existing `remove))\n          (-> head_elem `append\n              (html/style { `id: \"juno-css-theme\" `type: \"text/css\" }\n               (prop *global_themes* theme_name)) )          \n          true)\n       (throw ReferenceError \"Invalid theme name provided\")))\n\n(defun browser_repl ()\n  (let\n      ((body_element (-> document `querySelector \"body\"))\n       (output_container (html/div { `id: \"output-container\"  } ))\n       (resize_observer nil)                                                      \n                                        ;(result nil)\n       (current_env Environment)\n       (error_state nil)\n       (initialized false)\n       (evaluator (fn (lisp_text no_eval options)\n                    (let\n                        ((result nil))\n                      (setq error_state nil)\n                      (setq current_env (-> Environment `get_namespace_handle (current_namespace)))\n                      (log \"evaluator: options: \" options)\n                      (try\n                        (= result (if no_eval\n                                    lisp_text\n                                    (-> current_env `evaluate lisp_text nil options)))\n                        (catch Error (ex)\n                          (do\n                            (= error_state true)\n                            (= errors_encountered true)\n                            (console.error ex)\n                            (= result ex))))\n                      (console.log \"<-\" result)\n                      (when (not no_eval)                        \n                        (-> output_container\n                            `append\n                            (html/div { style:\"border-top: 1px solid #C0C0C0; padding: 5px; margin-top: 1px; width: calc(100% - 10px); display: inline-block; \" }\n                                      (html/code { `style: \"font-style: italic;\" }\n                                                 lisp_text))))\n                      (try \n                         (-> window.top `postMessage \n                            (JSON.stringify { `command: \"build_application\" \n                                              `source: \"evaluator\"\n                                              args: [{\n                                                  error_state: errors_encountered\n                                                  value: (cond\n                                                            (is_element? result)\n                                                            result.innerText\n                                                            (instanceof result Error)\n                                                            result.message\n                                                            (is_function? result)\n                                                            \"function\"\n                                                            else\n                                                            result)\n                                              }] }) \"*\")\n                         (catch Error (e)\n                            (console.error \"Unable to postMessage: \" e.message result)))\n                      (-> output_container\n                          `append\n                          (html/div { `style: \"padding: 5px; margin-top: 0px; width: calc(100% - 10px); display: inline-block; \" }\n                                    (cond\n                                      (is_element? result)\n                                      result\n                                      (is_number? result)\n                                      (html/code { `style: \" color: green;\" }\n                                                 result)\n                                      (or (== true result)\n                                          (== false result))\n                                      (html/code { `style: \" color: orange;\" }\n                                                 result)\n                                      (is_function? result)\n                                      (html/code { `style: \" color: var(--type-function-color);\" } \"Function: \"\n                                                 (if result.name result.name \"anonymous\"))\n                                      (and (is_array? result)\n                                           (instanceof result.0 Error))\n                                      (html/pre { `style: \" color: var(--type-array-color);\" } \"ERROR: \"\n                                                (subtype result.0)\n                                                \"\\n\"\n                                                result.0.message)\n                                      (or error_state\n                                          (instanceof result Error))\n                                      (html/pre { `style: \" color: var(--type-error-color);\" } \"ERROR: \"\n                                                (subtype result)\n                                                \"\\n\"\n                                                result.message)\n                                      (and (is_array? result)\n                                           result.0.error)\n                                      (html/pre { `style: \" color: var(--type-error-color);\" }                                                 \n                                                (JSON.stringify result nil 3 ))\n                                      else\n                                      (html/pre { `style: \"\" } (JSON.stringify result nil 3 )))))\n                      (set_prop output_container\n                                `scrollTop\n                                output_container.offsetHeight)\n                      (when error_state\n                         (throw result))\n                      result)))\n       \n       (input_container (html/div {  `style: \"height: calc(20% - 15px); overflow: hidden; \" }\n                                  \"\"))\n       (juno_container (html/div { `id: \"discard_container\" `style: \"height: inherit; max-height: 100%; overflow: scroll;\" }\n                                 output_container\n                                 input_container))\n       (perform_resize (fn ()\n                         (progn\n                          ;(console.log \"repl: resize: \" (prop juno_container.parentElement `offsetWidth))\n                          (html/set_style [[\"width\" (+ \"\" (- (prop juno_container.parentElement `offsetWidth) 2) \"px\")]] \n                                          juno_container)\n                          )))\n       (initialize (fn ()\n                     (progn\n                      (if initialized\n                        (evaluator (html/div { `style: \"display: flex padding: 5px\" } \"WARNING: REPL already initialized\") true)\n                        (progn\n                         (= initialized true)\n                         (= resize_observer (new ResizeObserver perform_resize))\n                         (-> resize_observer `observe juno_container.parentElement)\n                         (evaluator (html/div { `style: \"display: flex padding: 5px\" }                \n                                              (html/span { `style: \"font-weight: bold; display: inline-block;\" } \"Juno Environment Builder\")\n                                              (html/span { `style: \"display: inline-block; margin-left: 10px;\" }\n                                                         \"Environment Version: \" Environment.build_version   )) true)                         \n                         (evaluator (html/div \"Namespace: \" (current_namespace)) true)))))))\n    {\n     `view: juno_container\n     `input_container: input_container\n     `initialize: initialize\n     `output_container: output_container\n     `log: (fn (val)\n             (evaluator val true))\n     `evaluate: (fn (lisp_text options)\n                  (evaluator lisp_text nil options))\n     }))\n     \n;; easy page header access\n\n(defun core/page_header ()\n  (first (html/query_all \"head\")))\n\n\n\n\n(defglobal core/*env_skeleton* (reader (LZString.decompressFromBase64 (clone *env_template*))))\n\n(defun core/read_text_file (file)\n  (console.log \"reading text file stub called\"))\n\n(defun core/save_image (options)\n   (let\n       ((js_resource (save_env { `want_buffer: true\n                                `do_not_include: (conj  [ `browser_repl `line_reader  ] (if (is_array? options.do_not_include) options.do_not_include []) )}))\n        (scripts (-> (page_header) `querySelectorAll \"script[id]\"))\n        (styles (-> (page_header) `querySelectorAll \"style[id]\"))\n        (do_not_include_scripts (if (is_array? options.do_not_include_scripts)\n                                    options.do_not_include_scripts\n                                    []))\n        (do_not_include_styles (if (is_array? options.do_not_include_styles)\n                                    options.do_not_include_styles\n                                    []))\n        (log (if (is_function? options.log)\n               options.log\n               console.log))\n        (save_method nil)\n        (additional_embeds (let\n                               ((acc [])\n                                (deduper (new Set)))\n                             (map (fn (idx)\n                                     (let\n                                        ((script_id (-> (prop scripts idx) `getAttribute `id)))\n                                        (when (and (not (== (-> (prop scripts idx) `getAttribute `id) \"juno-core\"))\n                                                   (not (-> deduper `has (-> (prop scripts idx) `getAttribute `id)))\n                                                   (not (contains? script_id do_not_include_scripts)))\n                                           (-> deduper `add (-> (prop scripts idx) `getAttribute `id))\n                                           (push acc (prop scripts idx)))))\n                                  (range scripts.length))\n                             acc))\n        (additional_styles (let\n                               ((acc [])\n                                (deduper (new Set)))\n                             (map (fn (idx)\n                                     (let\n                                        ((style_id (-> (prop styles idx) `getAttribute `id)))\n                                        (when (and (not (== style_id \"juno-css\"))\n                                                   (not (-> deduper `has style_id))\n                                                   (not (contains? style_id do_not_include_styles)))\n                                           (-> deduper `add style_id)\n                                           (push acc (prop styles idx)))))\n                                     (range styles.length))\n                             acc))\n        (total_export_script_count (+ (length additional_embeds) 1)) ;; add one for juno-core\n        (script_ids (for_each (embedded additional_embeds)\n                        (-> embedded `getAttribute `id)))\n        (dcomps (date_components (new Date)))\n        (file_version_tag (if (not (blank? options.version_tag))\n                              options.version_tag\n                              (join \".\" [ dcomps.year dcomps.month dcomps.day dcomps.hour dcomps.minute ])))\n        (scaffold_1 (prop\n                     (html/head { `title: \"Seedling\" }\n                                (html/meta { `charset: \"utf-8\" })\n                                (html/style { `id: \"juno-css\" } style_css)\n                                (html/script { `id: \"juno-core\" `type: \"module\" }\n                                             js_resource\n                                             \"\\n\\n\"                               \n                                             ;; boot_up\n                                             \"\\n\\n\")\n                                (for_each (stl (or additional_styles []))\n                                          (html/style { `id: (-> stl `getAttribute `id) } \n                                                      (prop stl `innerHTML)))\n                                                                           \n                                (for_each (scr (or additional_embeds []))\n                                          (html/script { `id: (-> scr `getAttribute `id) `type: (-> scr `getAttribute `type) `charset: (-> scr `getAttribute `charset) }\n                                                       (prop scr `innerHTML))))\n                                     ;scr))\n                                        \n                          `outerHTML))\n        (scaffold_2 (prop\n                          \n                          (html/body { style: (+ \"\" (if options.no_header \n                                                        \"height: 100vh; \"\n                                                        \"height: 98vh; \")\n                                                 \" overflow: hidden;\")\n                                             `id: \"body\" }\n                                     (if options.no_header\n                                        (html/header {  `id: \"page-header\" })\n                                        (html/header {  `id: \"page-header\" class: \"juno-page-header\" } ))\n                                     (html/div { `id: \"juno-loading-message\" } \n                                               (html/div {`style: \"font-size: 1.1em;\" } \"🌱\") \n                                               (html/div \"Loading - this may take a few moments...\"))\n                                     (html/div { `id: \"lower_right_corner\" style: \"position: absolute; right: 50px; bottom: 5px; width: 255px;\" } )\n                                     )\n                          `outerHTML)))\n\n     (declare (function http/send_files http/data_to_file)\n              (global http/send_files http/data_to_file))\n     \n     (log \"save_image exporting: \" script_ids)\n     (log \"save_image: additional_embeds: \" additional_embeds)\n     (log \"save_image: additional_styles: \" additional_styles)\n     (log \"namespaces: \" (namespaces) (sort (http/symbols)))\n     ;(try\n      ; (log \"http: \" http/send_files)\n       ;(catch Error (e)\n        ; (console.error \"Issue on accessing http: \" e)))\n     \n     (if (and is_served? \n              (not options.save_locally)\n              (contains? \"http_client\" *env_config*.features))\n       (progn\n        (console.log \"we are online and we have http client software\")\n        (= save_method (fn (fname content content_type)\n                             (http/send_files \"/save_file\" (http/data_to_file (+ \"environments/\" (or options.save_as (prop *env_config*.export `save_prefix) \"seedling_build\") \".html\") content content_type)))))\n       (= save_method save_locally))\n     (new Promise (fn (resolve reject)\n                    (setTimeout (fn ()\n                                  (try\n                                    (resolve (save_method (or options.save_as                                       \n                                                          (+ (or (prop *env_config*.export `save_prefix) \"juno_image\")\n                                                             \"-\" file_version_tag \".html\"))\n                                                      (+ \"<!DOCTYPE html>\\n<html>\\n\"\n                                                         scaffold_1\n                                                         scaffold_2\n                                                         \"</html>\")\n                                                      \"text/html\" ))\n                                    (catch Error (e)\n                                      (reject e))))\n                                100)))))\n     \n\n(defun core/*system_initializer* ()\n  (let\n      ((pkg nil))\n      (try\n         (progn\n             (console.log \"At start, namespaces are: \" (namespaces)))\n         (catch Error (e)\n            (console.log \"well - can't seem to get the namespaces.\" e)))\n      (if (and (not (prop globalThis `in_starter))\n               (contains? \"html\" (namespaces)))\n          (progn \n             (console.log \"HTML Library is set - not reloading...loading pends\")\n             (console.log \"HTML Nameespace: \" (-> Environment `get_namespace_handle \"html\")))\n          (progn\n             (console.log \"system_initializer: evaluating core/html_package...\")\n             (= pkg (-> Environment `evaluate \"core/html_package\"))\n             (-> Environment `evaluate pkg nil { `source_name: \"pkg/html.juno\" })))\n      (console.log \"system_initializer: html_package: post eval: \" (namespaces))\n      ;(eval (reader (clone browser_repl_package)))\n      (undefine `browser_repl_package)\n      (undefine `rlog)\n      (set_prop globalThis `env Environment) ;; establish a global handle (not necessary but handy for development)\n      (console.log \"system initializer Complete\")))\n\n(defglobal `repl (core/browser_repl))\n(defun rlog (val)\n  (progn\n   (console.log \"rlog:\" val)\n   (-> repl `log val)))\n\n(-> (-> document `querySelector \"body\")\n    `appendChild (prop repl\n                       `view))\n\n(defglobal $current_theme (-> (prop (new URL window.location) `searchParams) `get \"theme\"))\n(console.log \"$current_theme: \" $current_theme)\n\n(when (not (blank? $current_theme))\n  ($set_global_theme $current_theme))\n\n(setTimeout (fn ()\n               (rlog (if (prop globalThis `in_starter)\n                         (progn\n                            (-> repl `initialize)\n                            (html/div \"In starter mode..building new image..this can take a few minutes..\"))\n                         (html/div \"Ready\"))))\n            10)\n      \n\n\n\n(setTimeout (fn ()\n               (try\n                  (when (prop globalThis `in_starter)\n                     (rlog (html/div \"Bootstrapping new image..\"))\n                     (-> repl `evaluate |\n                        (use_unique_symbols \"html\")\n                        (try \n                           (evaluate (LZString.decompressFromBase64 browser_initializer) nil { `source_name: \"pkg/browser_initializer.juno\" })\n                           (catch Error (e)\n                              (progn\n                                 (= errors_encountered true))))\n                        | { `source_name: \"pkg/browser_initializer.juno\" })\n                     (undefine `browser_initializer) ;; no longer needed in text form, remove to save space\n                     (-> repl `evaluate | (save_image) | )\n                     (-> window.top `postMessage (JSON.stringify { `command: \"build_application\" `source: \"bootstrap\" args: [\"complete\"] }) \"*\"))\n                  (catch Error (e)\n                     (progn\n                        (console.error \"ERROR on build: \" e)\n                        (-> window.top `postMessage (JSON.stringify { `command: \"build_application\" `source: \"bootstrap\" args: [e.message ] }) \"*\")))))\n            100)\n            \n\n\n                                    \n                                    \n           \n                                    \n" })();__obj__1["load"]=async function(filename) {
        let fname;
        let js_mod;
        let comps;
        fname=filename;
        js_mod=null;
        comps=await (await Environment.get_global("path.parse"))(fname);
        return await async function(){
            if (check_true (((comps && comps["ext"])===".lisp"))) {
                return await (await Environment.get_global("evaluate"))(await (async function(){
                     return await (await Environment.get_global("read_text_file"))(fname) 
                })(),null,{
                    source_name:fname
                })
            } else if (check_true (((comps && comps["ext"])===".js"))) {
                {
                    js_mod=await import (fname);
                    if (check_true ((js_mod && js_mod["initializer"]))){
                        return await (async function(){
                            let __array_op_rval__2=(js_mod && js_mod["initializer"]);
                             if (__array_op_rval__2 instanceof Function){
                                return await __array_op_rval__2(Environment) 
                            } else {
                                return [__array_op_rval__2,Environment]
                            }
                        })()
                    } else {
                        throw new EvalError("load: unable to find function named initializer in export, use dynamic_import for this.");
                        
                    }
                }
            } else if (check_true (((comps && comps["ext"])===".json"))) {
                return await (await Environment.get_global("evaluate"))(await JSON.parse(await (async function(){
                     return await (await Environment.get_global("read_text_file"))(fname) 
                })()),null,{
                    json_in:true,source_name:fname
                })
            }
        } ()
    };__obj__1["with_fs_events"]=async function(...args) {
    let event_binding;
    let location;
    let body;
    event_binding=(args && args["0"] && args["0"]["0"]);
    location=(args && args["0"] && args["0"]["1"]);
    body=(args && args["1"]);
    return ["=:let",[["=:watcher",["=:->","=:Deno","watchFs",location]]],["=:declare",["=:object","=:watcher"]],["=:for_with",[event_binding,"=:watcher"],["=:progn",body]]]
};__obj__1["compile_buffer"]=async function(input_buffer,export_function_name,options) {
    let output_filename;
    let opts;
    let segments;
    let export_segment;
    let include_boilerplate;
    let start_time;
    let compile_time;
    let write_file;
    let import_headers;
    let include_source;
    let compiled;
    let invalid_js_ref_chars;
    let invalid_js_ref_chars_regex;
    let boilerplate;
    let compiled_js;
    output_filename=(options && options["output_file"]);
    opts=await (await Environment.get_global("add"))(new Object(),(options|| new Object()),{
        want_buffer:await (async function(){
            if (check_true (((options && options["want_buffer"])|| (null==output_filename)))){
                return true
            } else {
                return false
            }
        })()
    });
    export_function_name=(export_function_name|| "initializer");
    segments=[];
    export_segment=[];
    include_boilerplate=await (async function(){
        if (check_true ((false===(opts && opts["include_boilerplate"])))){
            return false
        } else {
            return true
        }
    })();
    start_time=await Date.now();
    compile_time=null;
    write_file=true;
    import_headers=await (async function(){
        if (check_true (((options && options["imports"]) instanceof Object))){
            return await (await Environment.get_global("map"))(async function(import_set,idx) {
                let target;
                let imp_details;
                target=(import_set && import_set["1"] && import_set["1"]["symbol"]);
                imp_details=(import_set && import_set["1"] && import_set["1"]["location"]);
                return await (async function(){
                    let __array_op_rval__1=("import * as "+ (target+ "_module")+ " from '"+ imp_details+ "'\n"+ "export const "+ target+ "="+ (target+ "_module")+ ";");
                     if (__array_op_rval__1 instanceof Function){
                        return await __array_op_rval__1() 
                    } else {
                        return [__array_op_rval__1]
                    }
                })()
            },await (await Environment.get_global("pairs"))((options && options["imports"])))
        } else {
            return []
        }
    })();
    include_source=await (async function(){
        if (check_true ((opts && opts["include_source"]))){
            return true
        } else {
            return false
        }
    })();
    compiled=null;
    invalid_js_ref_chars="+?-%&^#!*[]~{}|";
    invalid_js_ref_chars_regex=new RegExp("[\%\+\[\>\?\<\\}\{&\#\^\=\~\*\!\)\(\-]+");
    boilerplate="const { get_next_environment_id, check_true, get_outside_global, subtype, lisp_writer, clone, LispSyntaxError } = await import(\"./lisp_writer.js\");";
    compiled_js=null;
    if (check_true ((await (await Environment.get_global("length"))(await (await Environment.get_global("scan_str"))(invalid_js_ref_chars_regex,export_function_name))>0))){
        {
            throw new SyntaxError(("export function name contains an invalid JS character: "+ export_function_name+ ", cannot contain: "+ invalid_js_ref_chars));
            
        }
    };
    (segments).push(("// Source: "+ (options && options["input_filename"])+ "  "));
    if (check_true (((import_headers && import_headers.length)>0))){
        {
            await (async function() {
                let __for_body__4=async function(static_import) {
                    return (segments).push(static_import)
                };
                let __array__5=[],__elements__3=import_headers;
                let __BREAK__FLAG__=false;
                for(let __iter__2 in __elements__3) {
                    __array__5.push(await __for_body__4(__elements__3[__iter__2]));
                    if(__BREAK__FLAG__) {
                         __array__5.pop();
                        break;
                        
                    }
                }return __array__5;
                 
            })();
            (segments).push("\n")
        }
    };
    if (check_true (((opts && opts["build_headers"]) instanceof Array))){
        {
            await (async function() {
                let __for_body__8=async function(header) {
                    return (segments).push(header)
                };
                let __array__9=[],__elements__7=(opts && opts["build_headers"]);
                let __BREAK__FLAG__=false;
                for(let __iter__6 in __elements__7) {
                    __array__9.push(await __for_body__8(__elements__7[__iter__6]));
                    if(__BREAK__FLAG__) {
                         __array__9.pop();
                        break;
                        
                    }
                }return __array__9;
                 
            })();
            (segments).push("\n")
        }
    };
    (segments).push("\n");
    if (check_true (include_boilerplate)){
        (segments).push(boilerplate)
    };
    if (check_true (((opts && opts["js_headers"]) instanceof Array))){
        {
            await (async function() {
                let __for_body__12=async function(header) {
                    return (segments).push(header)
                };
                let __array__13=[],__elements__11=(opts && opts["js_headers"]);
                let __BREAK__FLAG__=false;
                for(let __iter__10 in __elements__11) {
                    __array__13.push(await __for_body__12(__elements__11[__iter__10]));
                    if(__BREAK__FLAG__) {
                         __array__13.pop();
                        break;
                        
                    }
                }return __array__13;
                 
            })();
            (segments).push("\n")
        }
    };
    if (check_true (((export_function_name==="init_dlisp")|| (opts && opts["toplevel"])))){
        {
            (segments).push("if (typeof AsyncFunction === \"undefined\") {\n  globalThis.AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n}")
        }
    };
    if (check_true (((input_buffer instanceof Array)&& ((input_buffer && input_buffer["0"])==="=:iprogn")))){
        await async function(){
            input_buffer[0]=await (async function(){
                 return "=:progn" 
            })();
            return input_buffer;
            
        }()
    };
    if (check_true ((opts && opts["verbose"]))){
        {
            await console.log("input_buffer: ",input_buffer)
        }
    };
    compiled=await (async function(){
         return await (await Environment.get_global("compiler"))(input_buffer,await (await Environment.get_global("add"))({
            env:Environment,formatted_output:true,include_source:include_source,source_name:((opts && opts["input_filename"])|| "anonymous")
        },opts)) 
    })();
    compile_time=await (await Environment.get_global("add"))(await (async function() {
        {
             let __call_target__=((await Date.now()- start_time)/ 1000), __call_method__="toFixed";
            return await __call_target__[__call_method__].call(__call_target__,3)
        } 
    })(),"s");
    await async function(){
        if (check_true ((compiled && compiled["error"]))) {
            throw new Error((await Environment.get_global("indirect_new"))(compiled.error,(compiled && compiled["message"])));
            
        } else if (check_true (((compiled && compiled["0"] && compiled["0"]["ctype"])&& ((compiled && compiled["0"] && compiled["0"]["ctype"])==="FAIL")))) {
            {
                write_file=false;
                await (await Environment.get_global("warn"))((compiled && compiled["1"]))
            }
        } else if (check_true (((compiled && compiled["0"] && compiled["0"]["ctype"])&& (await (await Environment.get_global("contains?"))("block",(compiled && compiled["0"] && compiled["0"]["ctype"]))|| ((compiled && compiled["0"] && compiled["0"]["ctype"])==="assignment")|| ((compiled && compiled["0"] && compiled["0"]["ctype"])==="__!NOT_FOUND!__"))))) {
            if (check_true (await (async function(){
                let __array_op_rval__15=(compiled && compiled["0"] && compiled["0"]["has_lisp_globals"]);
                 if (__array_op_rval__15 instanceof Function){
                    return await __array_op_rval__15() 
                } else {
                    return [__array_op_rval__15]
                }
            })())){
                {
                    (segments).push(("export async function "+ export_function_name+ "(Environment)  {"));
                    (segments).push((compiled && compiled["1"]));
                    (segments).push("}")
                }
            } else {
                {
                    (segments).push(("export async function "+ export_function_name+ "() {"));
                    (segments).push((compiled && compiled["1"]));
                    (segments).push("}")
                }
            }
        } else if (check_true (((compiled && compiled["0"] && compiled["0"]["ctype"])&& (("AsyncFunction"===(compiled && compiled["0"] && compiled["0"]["ctype"]))|| ("statement"===(compiled && compiled["0"] && compiled["0"]["ctype"]))|| ("objliteral"===(compiled && compiled["0"] && compiled["0"]["ctype"])))))) {
            {
                if (check_true (await (async function(){
                    let __array_op_rval__16=(compiled && compiled["0"] && compiled["0"]["has_lisp_globals"]);
                     if (__array_op_rval__16 instanceof Function){
                        return await __array_op_rval__16() 
                    } else {
                        return [__array_op_rval__16]
                    }
                })())){
                    {
                        (segments).push(("export async function "+ export_function_name+ "(Environment) {"));
                        (segments).push(("  return "+ (compiled && compiled["1"])+ "} "))
                    }
                } else {
                    {
                        (segments).push(("export async function "+ export_function_name+ "() {"));
                        (segments).push(("  return "+ (compiled && compiled["1"])+ "} "))
                    }
                }
            }
        } else if (check_true (((compiled && compiled["0"] && compiled["0"]["ctype"])&& ("Function"===(compiled && compiled["0"] && compiled["0"]["ctype"]))))) {
            {
                if (check_true (await (async function(){
                    let __array_op_rval__17=(compiled && compiled["0"] && compiled["0"]["has_lisp_globals"]);
                     if (__array_op_rval__17 instanceof Function){
                        return await __array_op_rval__17() 
                    } else {
                        return [__array_op_rval__17]
                    }
                })())){
                    {
                        (segments).push(("export function "+ export_function_name+ "(Environment) {"));
                        (segments).push(("  return "+ (compiled && compiled["1"])+ "}"))
                    }
                } else {
                    {
                        (segments).push(("export function "+ export_function_name+ "() {"));
                        (segments).push(("  return "+ (compiled && compiled["1"])+ " } "))
                    }
                }
            }
        } else {
            {
                await console.log("warning: unhandled return: ",compiled);
                write_file=false
            }
        }
    } ();
    if (check_true ((opts && opts["bundle"]))){
        {
            (segments).push(("await init_dlisp();"));
            (segments).push(("let env = await dlisp_env("+ await (async function(){
                if (check_true ((opts && opts["bundle_options"]))){
                    return await JSON.stringify((opts && opts["bundle_options"]))
                } else {
                    return ""
                }
            })()+ ");"))
        }
    };
    if (check_true (((opts && opts["exports"]) instanceof Array))){
        {
            (export_segment).push("export { ");
            await (await Environment.get_global("map"))(async function(exp,i,len) {
                await async function(){
                    if (check_true (((exp instanceof Array)&& ((exp && exp.length)===2)))) {
                        {
                            (export_segment).push((exp && exp["0"]));
                            (export_segment).push(" as ");
                            return (export_segment).push((exp && exp["1"]))
                        }
                    } else if (check_true ((exp instanceof String || typeof exp==='string'))) {
                        (export_segment).push(exp)
                    } else {
                        throw new SyntaxError(("Invalid export format: "+ exp));
                        
                    }
                } ();
                if (check_true ((i<(len- 1)))){
                    {
                        return (export_segment).push(",")
                    }
                }
            },(opts && opts["exports"]));
            (segments).push((export_segment).join(""))
        }
    };
    return await async function(){
        if (check_true ((write_file&& await (await Environment.get_global("not"))((opts && opts["want_buffer"]))))) {
            {
                await (await Environment.get_global("write_text_file"))(output_filename,(segments).join("\n"));
                await (await Environment.get_global("success"))(("["+ compile_time+ "] compiled: "),((opts && opts["input_filename"])|| (opts && opts["namespace"])|| "anonymous"),"->",output_filename);
                return output_filename
            }
        } else if (check_true ((write_file&& (opts && opts["want_buffer"])))) {
            return (segments).join("\n")
        } else {
            {
                await (await Environment.get_global("warn"))("cannot compile: ",((opts && opts["input_filename"])|| (opts && opts["namespace"])|| "anonymous"));
                return null
            }
        }
    } ()
};__obj__1["compile_file"]=async function(lisp_file,export_function_name,options) {
    let input_components;
    let input_filename;
    let input_buffer;
    input_components=await (await Environment.get_global("path.parse"))(lisp_file);
    input_filename=await (await Environment.get_global("path.basename"))(lisp_file);
    input_buffer=null;
    input_buffer=await (async function(){
         return await (await Environment.get_global("read_text_file"))(lisp_file) 
    })();
    if (check_true (((input_components && input_components["ext"])===".lisp"))){
        input_buffer=await (async function(){
             return await (await Environment.get_global("read_lisp"))(input_buffer,{
                implicit_progn:false,source_name:input_filename
            }) 
        })()
    };
    return await (await Environment.get_global("compile_buffer"))(input_buffer,export_function_name,await (await Environment.get_global("add"))(new Object(),{
        input_filename:input_filename,source_name:input_filename
    },await (async function(){
        if (check_true (options)){
            return options
        } else {
            return new Object()
        }
    })()))
};__obj__1["rebuild_env"]=async function(opts) {
    let issues;
    let source_dir;
    let output_dir;
    let dcomps;
    let version_tag;
    let build_time;
    let build_headers;
    let include_source;
    let source_path;
    let output_path;
    issues=[];
    source_dir=((opts && opts["source_dir"])|| "./src");
    output_dir=((opts && opts["output_dir"])|| "./js");
    dcomps=await (async function(){
         return await (await Environment.get_global("date_components"))(new Date()) 
    })();
    version_tag=await (async function(){
        if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("blank?"))((opts && opts["version_tag"]))))){
            return (opts && opts["version_tag"])
        } else {
            return (await (async function(){
                let __array_op_rval__18=(dcomps && dcomps["year"]);
                 if (__array_op_rval__18 instanceof Function){
                    return await __array_op_rval__18((dcomps && dcomps["month"]),(dcomps && dcomps["day"]),(dcomps && dcomps["hour"]),(dcomps && dcomps["minute"])) 
                } else {
                    return [__array_op_rval__18,(dcomps && dcomps["month"]),(dcomps && dcomps["day"]),(dcomps && dcomps["hour"]),(dcomps && dcomps["minute"])]
                }
            })()).join(".")
        }
    })();
    build_time=await (async function(){
         return await (await Environment.get_global("formatted_date"))(new Date()) 
    })();
    build_headers=[];
    include_source=((opts && opts["include_source"])|| false);
    source_path=async function(filename) {
        return (await (async function(){
            let __array_op_rval__19=source_dir;
             if (__array_op_rval__19 instanceof Function){
                return await __array_op_rval__19(filename) 
            } else {
                return [__array_op_rval__19,filename]
            }
        })()).join((await Environment.get_global("path.sep")))
    };
    output_path=async function(filename) {
        return (await (async function(){
            let __array_op_rval__20=output_dir;
             if (__array_op_rval__20 instanceof Function){
                return await __array_op_rval__20(filename) 
            } else {
                return [__array_op_rval__20,filename]
            }
        })()).join((await Environment.get_global("path.sep")))
    };
    await console.log("Environment Build Time: ",build_time,"In Namespace: ",(await Environment.get_global("*namespace*")));
    await console.log("Version Tag: ",version_tag);
    await console.log("Source Directory: ",source_dir);
    await console.log("Output Directory: ",output_dir);
    (build_headers).push(("// Build Time: "+ build_time));
    (build_headers).push(("// Version: "+ version_tag));
    (build_headers).push(("export const DLISP_ENV_VERSION='"+ version_tag+ "';"));
    await Environment.set_global("reader",await (async function(){
         return await (await Environment.get_global("load"))(await source_path("reader.lisp")) 
    })(),{
        requires:["load"],externals:["Date","RegExp","SyntaxError","console","JSON"],source_name:"src/build-tools.lisp"
    });
    await (await Environment.get_global("success"))("reloaded reader");
    await (await Environment.get_global("compile_file"))(await source_path("compiler.lisp"),"init_compiler",{
        output_file:await output_path("compiler.js"),include_source:include_source,build_headers:build_headers
    });
    await (await Environment.get_global("compile_file"))(await source_path("reader.lisp"),null,{
        output_file:await output_path("reader.js"),include_source:include_source,build_headers:build_headers
    });
    await (await Environment.get_global("compile_file"))(await source_path("environment.lisp"),"init_dlisp",{
        output_file:await output_path("environment.js"),include_source:include_source,toplevel:true,build_headers:build_headers
    });
    await (await Environment.get_global("compile_file"))(await source_path("core.lisp"),"environment_boot",{
        output_file:await output_path("core.js"),include_source:include_source,build_headers:build_headers
    });
    await (await Environment.get_global("compile_file"))(await source_path("core-ext.lisp"),"load_core",{
        output_file:await output_path("core-ext.js"),include_source:include_source,build_headers:build_headers
    });
    await (await Environment.get_global("compile_file"))(await source_path("base-io.lisp"),null,{
        output_file:await output_path("base-io.js"),include_source:include_source,build_headers:build_headers
    });
    await (await Environment.get_global("success"))("complete");
    return true
};__obj__1["*system_initializer*"]=async function() {
    let pkg;
    pkg=await Environment["evaluate"].call(Environment,"core/html_package");
    await console.log("system initializer: namespaces:",await (await Environment.get_global("namespaces"))());
    await console.log("system initializer: ",(await Environment.get_global("*namespace*")),"initializing packaged html_package");
    await Environment["evaluate"].call(Environment,pkg);
    await console.log("initializing browser_repl_package");
    (await Environment.eval(await async function(){
        return await (await Environment.get_global("reader"))(await (async function(){
             return await clone((await Environment.get_global("browser_repl_package"))) 
        })())
    }(),null));
    await async function(){
        globalThis["env"]=Environment;
        return globalThis;
        
    }();
    return await console.log("system initializer Complete")
};__obj__1["*env_template*"]="NzAEFEDsDcEsCcD2kC2BTSAXUBaHoAxAQwGNYAbWTIzNAZ1CMgBNRF4BzJ2AL3tEwALNKEp0ADgMSTyaaGnKMWoePUQBXeCXoAoEKACC6oewBch2QA9QAOQCeHVZB16wAYWl34sDoOwAKEgBKUAAmAAZQ0JwI0IBmABpQAGlYSCIkgBlMtxd9AAU0eBRYOjpYZFBS0GFVACM7UEcmWmYkgDNVEUR20BJBIk40JMxEJUbxIrpKxDrqNLSORj7PVzZeoWrp9swAd0GRJlYiMsQyGjRWZjP1dCwaCshQdop+fyERACIAZR69g8+QRGY2YaCI5DWaQEwlAvx2+1UoF2VEEGmwqjomG8JEwjySaRI5HUzEWSJRaNEsBK1FxlQ+Kh8fjoa1GoHUdGGK3EdiSKEQJPaPNA6CGSXE6jqYkESRJmO8dWMnLoEso2kgHKSRwA9OxQBzyBD9CRpLB+D1oSI4f9VJrlKzJsUqKAHdN1VIkaiUBbYX8ESJSmt2ppIKVhKxWdc9Ygksq6gArNA49309qIA2IZGQJbGlhUR50Ux5MAAFRhRDqiHkXK8jOwkEQuO0SnDgmqDpKZUeoHrjZEdAGBtAdX9kEJxMuVSe4MNYGN4lNDF1scxLVg4Od7FpbvN9KtfoAdEXQMWABLgWEAeQIxYA6gYAErngCS31A+XvF4Aak+ACLgH+gJ8Bivi+nxJDeT6nheACqxagHe973gYNjFgAmqAV6GDY6HJE+Ng/kk4AABrvuA3yvhe95rE+ACy+SZE+/5JHhbiZNBP54QA4qAABCsG2BecEMTRkH/seF7Hme8EPkhKGMRRBCgDR4D3m4J7IcWBg8U+DFoQkawEJBNhka+BCUYYb4PsWT5uNBmQPm+0H3vkF7fOeyEATYF42HhBD3lx4DKSh+6gHhAkQJ+4AobC6nZJJ4BrAYsEnpRFH3qAbgXvkqH+ZxJ5wSlmR/ver48eeDFaZk55melyHoaxBi0UkP4GDRBicWRGHpYJZ5UfoFXabpqHgWep4qaFNhYYYbjWd5GGKZlKFITNSTFpRcHmT1KkQW5SQPi+XGEB+NH6foMEbYp5lhYtxkzU+c0Qae8WXteCHnuZY2gNBbldRhY3pX+BgMTYnEgZNY1rN8V63g+4CHmsAC8SPI0epZfLs7DkMwnzQjQVQMPSdBzt0GwwsaKDzrI8DNt65OUxOxqgoe+jEGQlAXAwzB2OkJQkHqxNJGIkgcOQszgnQMpoC8IZbgwRxsB81PiEgDq4vQzNgE+2DVPSaS0PA7SkCI9KjDIcgKM86ijlufTTgwetjCctOIBTrzwJCcskNoZQTnARBKKAGBwEgqAYNgswJjiIWgEe0EcoH0DguoFz+ELAD6tCWJgISsnTrw03IScXJSEgCGgWc06mxQMJ0LtrHGRCJ0T3jiJg8Nna3+aMIiTupumuwFms4gHFgadBwgyB3Ng+CwKT1RpCuo7+gTYzDssPP0MPTYNrUuNPJ8xqqJ8aygKfZ/nxfl+bAw/YaFjQ59mg2DIkItPTqS48h1PbDxombdHhvCQRtcBVF6BwWA8gpzOhHpgMeMAJ6hywEiEQkA0ATlZAMKsTBGDMGYBiOg5ZZAn0vhfDe0dSzVBQOybAa8OTa16OyUk9Jh5OFgZ/SeYc2Cd2QO3MAQcQGzyaBAjAAd2GIPDr/JMjCszen4QAazQEKekqhMDBkuMQ8+Yjv4L2oEvMkg5MEiDXv7QkyASbemVpWWAoJWBaLDhrEhFD7YMHZBOXYwgnjl3EJuUk2C7FIKpEQDgaBeGTkoKghg+AI5/1xtgHM8xtwOhoLqBRdg5bKCDNbLsiciT8CEDQDRJCVHBm7vAIgaTzD+HaE8fwgwOB0BCAAbQAAYNybiQFu2BmmjAUW6AAuvuEKHIRzhN0PoEhZ9hyi12M8XUhNJhkBeCQOgoTRYcDHvAJA8BIlDkQGmMENTQSG3UOQbAhtyAchCIIrE6hOT0n8drTA+p2iFMvsiQcazxiB02ewFezt1T7KSDvIoyJ45OneYoNAKIiivIvqoHAQgkAzPuT86mupinwCeE6UEkxcwyMqCQGg/QNlbJWUeQlmBiVFFJSAis+zsH+COUQE52sa7izQCEGeGx4C3KSNS35+jFDDlhefQl6hfDYHlhi1BbQaY9mhEiyAQLFaguNjCfl7txkTMFQ/FQaAEWCEVaEm8KC0GsGmOgJoos6jrkwHYSYN8CQiAAFKNxOB02ArcE7gn8FcugkAADk2BXGsChM6q2iAXAuH8HQtOljhbWvBE4nQZ9mmxjtZMPUEoM1oBTafZp/RExyIzjykQhaSDFpubm1NpjUF9FFqgvNoBmnp12N4fWJdxBpzbVQGFqbgmwNQVnOBwcOGj2sU0J+ach1sPgV/MOadrFNuaZkUo4hvjc2oJYcAqLQCrokBu+427UVBGjYI/wSNAJWyOWkS4ON3j2rQOaZg6cHlp2NFbbOp7z4xqnfGq1YtyDJpIc0l9a6R0IKnu+jQWAm3n3CEEU9R4TW20DdrFA6ASQXHII0G9db/YoFIEgWZ1N6RTIzA/MV8ddgiGuGhmojdc36D8XOsd2A7BP3dOIcgwCqDR1+B6ERNGkQtHdAQqs9ISCaFYWsB5SRhMQr1Nx2ATYSSqBxDhycrJ6TOqhpNVQyt6BhweMgNYO5Ww11eA4o55d9bpEUNxo2BMYR0DsCgCsih5b0hONMc4rRQA5NuWwJ4lQRaAacadMAOiwSsHNAvaxaqRAPNAP4dxKnBCgGuPQej5dSiSuwNfDcesgjw0ZVLWzRR7OZdfTAJtVSanSCed+i+/hLEcGcNq4AgRkDTFkPuT5nwwMSBHeYBYuJwS8EWOYe9tbuitwac1kh+hvg0mNmMSTLt6akYGM/WjYx5X7CQayNew8fbHCeFAUd4i4MX30A0TLiYePeBkfkgrFn8ZSG4+bcgh5tU3Z/aCQkBwUum1kPIRQVbFvasvv4AkRJQRZrmI+ydsDok4jjTQDLA605onKKCNOYWbXkCh9Dn9otCWKFmyj6dtmIPzvHawctlbS2If+2fNnp99BeWsm4cAhZOtgBQ5GeVhjGBe3oH8+kl3IOcM2FmOWb22yID1jGMYwmDgc9APoeQ8BGiUGpBOT9FBGA7CKClvDaAR0lcGZr/QeB7f4BW4MbAq6DesAdx7z3Xvvc+495ri9XCnma7PrD3oF6EaB5cSwKWt7mAk9JwAbwAL7B8vo1hbmvbfuB6zcpM9zWPXYF4YREwmNs2jYNTYH6vuxEHQEA7e7RejmbLewNAAB+TP2qyvtETtTQBW8RD+F1On/c/fgEH1b4CePIejm98nGnOlBWWec7AIVnWpaPT53V4iMba5KA8CYeqgvU9O8TP0D+GP+GahphJC9pgciSN6jcx55zeNVDtCKBgJsHHg2QFFkQGxGvOvAfFZG3IvNLWQScXZBsYUfkatM/MAZAJsekMfJsaof/QAwmZ/NMOWHfGWNcCgPgZgLPUAVJHAAAPkGDKUaHNFc3cxwOdDN1QPgJIW7zn1xVv3WQwIYGT2n1Pn91n0GGgVYTpzYxS3PUvWYMAkPjQEBFT1JwUMvhDAhEUNUMUJHxYQXQeVZz+yLzRj6GkzDk01IFxCrGYJIKfF6G30OD6FbHviDnxGwFvhOWOHIH2DSUDgAEdk5FANA+9a8WDL59BgV4BVVQFkFu5EsVhy8PgnhCtvE9ZJdhASCpNNlOEpDSBvYORWB7tUiRDzCi8oQy8ktj97FT9WDBDK8cRhFp0Aj68UE6iB8+CY4u9KiVh7hY8Uth95t9x4kiBOjzlLlmiSDvhON1BJA/DJw8x1w6AFFZBRhIAwCJkBCpY59pd6dMB5CE8tdEC9FhNRcFQKA3sSirsp58RSZP9Iivk4dGEesIjFMRRgkLQvQ0h5CV93RCdwR31MBrByg9EPhGhFNRdmEGww4993R38zdtNWx5dYkGMqwf83idj3Q14Ldwx1syZNs3YliFCkTmlPjyBvjLBzAE8kS1C01iYSSU81DVDmkN5zAgDN4jYyTVDqTFDmlDisY04ddyhkBKluinl9wg5uSphHgWSaSUs2l3VOlQAfwGJvh8g04opPw05IoSp7obAdD2S8M8wet+S0UeidTZZxTVDSSJSaSTS1Ck9miL5QNHtBgTN1R9TI99xAcntHTmRzTTTLTySCEP87USSfSvTL4W1vtzBQggzgzz42SozSdrSkT4zdCJlQ8UtL1Phr1L870QdH1zRwBZAp4tTSdf1YF/0CTgNyS8y0AT8aSqkrZqjKhfVnh2VENhjWjVihCJ0UtscZ1RDxFF049WyEDwj9jGN15GjgEQi95oiRBhNnCsYSDRd/ZNCkEHlyiYdY1/11i2N5CC1kBM5NiFCtzxF9wCSiTBylswB6wVhXYqY2QsBjcnQ2wkA4AbFftky2irZY085byUtqkUsQh3hDUKNwAckd0tkUsABqaQrE28qhTEXVOhR/HGRk+o0AFs5otgoQ78s3T8qdbC+Ac8y+FYnvLCmCooHHJJUYbZFLVBGZUYr9YiufCQRMPffssEu1X8mpaAG02Mi+biwi27MAL3CAZQV3XtVgAALTMVwF91kt9zXMEu9AtxHWFCIzGG8XFB41oAYFPJxF+OJh/kjgKzGHJ3XEC34ChD8JSNFmVFUAUvPmItvRHXkP8DaiIjTm+AMAIHADTjwmLHAA6nSgAE5whwgAB2AARiCqCtCAAFYAAWMK+K8IaKiKnilLfdddTdIgY9cCssizfcTKw9LdMC9gdKmNCUDOZHdNR9Mks0mku05uT1Lcabe8J+YMOWPULEQ/WjJ+IoEoGVMXVRW1ZHZvZ0Z8hLVgcy/cY+CU5pdkIJNAcwRpT4cy0wAAKk+D6XFO6SCQLFABWpzRxgPh4zKGOssVGCOsAhzR6GOp0SYG0Fuu2olMTKLLTlVJUh4lckglQnetAHCEjIvnqt4vPkao9W4UgGm3otAHerVK+u+B+r+tZCXMQHKFMJHFoGCWpirgCyKArHjhzF626GMHFHDl6Fc0xCrKGogSoDsBmsBpDOoHqWWsGzQAVA4GOvwuOoeWOoJK2oZovleuhxcr1mEI5CfFgzUO2PmoIWCWmzWrlEWAAB9IBbhhx4BZqGrQQmqIbpsPAYAMBTQ9F0ATBWAcaWFxasAYxUQXDdUQ0oDCNJBoAVlMsEA/5NMKdwklgLa0AJbMB5NWx+gdUDt2AH81N3a7BNbySmb9qVqcweTHhjrVb3Mih+aXr0qXL2h/9sAfaCBs66rm0Fq5bAIFbuqswVa1bU6drtbwaWrAJ9bIEjamwTbUQzbdRc7s7ra74ciRB7aoRHaAsXbw6NNGhPbSQO7EAaAA70tg6YCMZ4Aw63aR6o7aSY6Wb47RTkAk7K6NbnqaShakzod/BzKGB/BaLCA6ybZPhBl9w6k6AV6ozPhgbYz5ixc+YI9Gk+lgABacbU5ONF0oC76Qhn6Qbz5X7zLQAI877GlF0v6BaSFX6c1IHEcc1j6k4OVv7QGSFz0IH7ql5zR6KQhQAQGsHL5MjkHMjeikCaB/ADBNlyl9xa4UA0HclENMHSHtUk9A4Ll/Qw8c1kYA0qDykA1gH4GFDyGoGvYqHRwaHzKgh2GOGJkuGFAwU+HH0BG0dMARHiGxHxGvYKGpGcwKV/ALxJE24T6WHblCzFGSFlGeGdGbHocJG37pHjG5GFHHHL4YzFHvGozpU36PGoyk85DgySGtb6Ba7HhKkoLPhOJhEoE+jb14AkhpVOqxA4k9z+iQwXsYQT71hA5SAMtlRxBlMJw6lbh7FbBQS4ScbNGJZgtNN6Q8ngdpVLgkh5V6RUkXaH7PHT5PhLChFIFhQWVPVICT6RgYRWmpr0GPsTFqHaB7gbZzRpx2iEkphxqrFACiiyxOAKmsAVkQmoyZbFrTBGlAI6lwgNrjq6lIbNq97gzdrmaDrm0hHGhdyOjUFqZmlNHm0unm0FAqyw4GB7mvSD7liFDWt+jqKz60AZkCBL6uxPgI4enzSn6Gbz0arJgh94wggBHXntGwmX7ON4AclkHP7AmQbf7X7YBkHwgotQAAAeQy/rDADgIQKLCChGUIUR3ps+El8EfccUfsfwRpCORpWAPpBIMV2ACCiKvpPpeR3RpRpV/x/l8gCl3iux+OQlol7AP5iPUxoy/cLp7FuMRVmx1+tV5Brp/cVQZgdQbQWsrJZAWpL2BISwBIWAHl3ljhyhoVwQEVj1sVyweV9Kn1mk/xzIjV8N4MpPBIT+81xR1VnJaN2M3x0Fw5iUnVhQsGzpKJwCOJoZpcnzCcH53UV5lJ9qzFNJvLVZrJ3xMIbhwFpBdJx/MEIO1JLUCB4eBAfJwmcY0p2LMx+mo5teg6z4V5zmzJpJ46zRnGEFuaoupa8diOUwOdhd/ejOiFv5mFuFhFyoJF+MFFmkp+0+fxw1v+Y1xROgU1+R0+YJsNoGn03N5q/N2J+JgOTRyt1Rat70P5sazRkdr0x52Ow9oy46k+46rpu66PSwegKdj51O0ADd2kpdlm1d9dn0sFkhFy6gBRGi2Fi+51/eRzbQY67Y/x0jkJfsWeTARsh9k07N6HF93WwCYsIgBRZzEQF4bZbACBnoC4kuf2mmVJ70aa49nNsdlayd6CxDjWwCKhVbY6njzENO4DtD8dqj0wRJz5tT807DoiiFwzDggjvd4jwCKj46uXDmwCCjqtp4Kj/cT81sHYQCxYEIBjqMpjnNmuvNvkwCfIHjb2MTmZ8p7+PcjE7jhAeCsa1t/wZz2jkIKVezrjoToD0dvalmmTz4RTi4BDtZ+TlDhqjTlarT7L6zq5orq0rdoslTgIc++F8zz4SwcjvVH9p4SwRpcIPpUATz807z7VFjuu99otqcehoUUTlMaL7AAF7ROInZ6g9L80454ula4kydqryTzL8d7LnTpDz4WboF+doMgzi+Fy06+rwjxr+s/eFr2ztrkpTrywFlrMV+fAOV3rzNqW593z19/zkbkRbBCth739+kC7ptub70V5pb4r2W5dtb0wDb59qTid8b/LrJ/bw7/Z7mlgPT9O+Q871l1+Xdojm7wCZFgWtF0B2eU1ycReR63oOh6g710h/xiOF7tlwQVN2N7h1Rro+MOn3RBn2EJ+Fn1n+z5l8oPgbnnnlR3hlLWn5GO8tEoIJWpW015GVWg0RDBxmx/xulpV+93n+Xh9SYc0CODRsxglw3s9iXi9qOE1iOErWQV7rnm33r438I03p9JveMARxWrMa33ptn+MDn9l933rgW/XmX1kr7mkgbwb371j/wGJtq9r1Ll3znvtlzAdygdBZHWpcboFMxmMJ+GMMujgdpnekrQCCPy+fpwT4pwdgLGZ6oZQivdeZAHAPb0jR9b9jq/6max9iZEDlmqX2QwCLHp5dHmdwCEkO4XkyAa5tHwCOhY6gPmzz4ZO9W472Mlb+Hz4CrnvvH/Tmro+nMOMUz0nq+m+u+iT1Q090+V+1tj+uB3i89aB7rwXh6n34vZn3XrBi/27j1Iuub/UhlqxEAJ81CQAxpJ/3lYx8XqgNO+vuDoCqg0A/gNKvuEdpOsbu/gSwGLxjZCdkG6TVxjQ3wEICfGibPxhL3SYUDOGcfRQlANtJJ866KfeusgDjDK5tw1MIxhcHSDaVoQiwU+hmhUzThGgrzBpFIAHS7xku6fAOND1r4xtPg4ASwLXi+wFgGWdQeAOQXv6kNPg3WSAJfzOYRVG2PXM5nEFADxVkOIQBGOQWeYmDQgoACwVYL6SaDtBugrBvoIv72DTBTgywWhUgZ2DjBjbZwchzcE6C6+Z8LwRwNAAODnmoQhVoEJ8GOCEh4QjwaA2iGGDiGLzOoCQHMARV4gHvM5ikMSG2Dnm2xcsHkNiGFC42YQJIBYNcFaCIhSggwUYNiEhDnmLgswaAFiqgAAAbM8zCrIdShQQ9oSkM6HIceh/QwYZML6QMDV623FpFPwYDvMKULzcbs2gv5cCXmJTDAMwE27McSuqPDgJc02rnNOANgSrlhzP6H1bhyZVQDyUHwNd92+8Y/vd38Y98UBaA/wAhltbmxtk6AjzvMNNJXo4enwdetO0+amB0mJ/TwSwMTqtUUuywOcDQUE6nZsiRAp2A8KmCXByEMIdgD4DSDrg2+MBfoEwGCTMAYeWDUfuOxhGr9Nws7eAKCF3o29TuDlCFgPRJ4GBXMo4a7lfR4zuZmARAZftQW5LoN76kZU9liEaBMDL4lrUlq/30ixlMAigKBuNzFG5IVkmfcPrGSpacYaWEeOllUEZalJykGo25FqKJ5c8qgEFCCgQJBpqtBW7IANkQH2BOgBRdQIUbfRKY4Y3OEsWAeqJPritJWVQEYOQAVZUCsG6bCNhLzVZ0DbGtsSlBln8Dlx7REpc9B6KFGQNL0GZaWBODV6iBa8no/2Ery17E4ABWDRFBRnPptUP8TgbQKVXgD+AAAOjlyIDiBzAmY/2GF04StZUaupJ4Ahg+y5jOiuoZQq2OH6slPeH/QMeKOzER4Rxg1Asa83NH8BSxJycsbKMUJViZkNY8rPWLQCNiWxbYjsXWySbAC9mAQbxGjS7BpVhx0ePMbFj7wUAJxhvCAV7wACEqcIsVmLwbC8+RjwHXluO3FAVdxhHWsZ/iXhHjWxjtTsT+O7G7Nv4cFGhDYUyQ3dzA6mKFPIGYDmBWxUFG6r0C7GTirS04sPF+JXF5M/xv/JnuUiAnu8dx3YcCfuK/yHjUUx42CZOByQTpXmF4s4nqm0DCIcJoAVsaAHwk5legFE8UcRJIly8KxijLUFqCjAt0P49jOMNQmgRlBgssiVFBHwYnlx4xiAzVuKT67Q4E+Q3fNmwM+D5AJqgBf2GhJthOw7J03XiWHF5DtjbYBoVLvZMRY299BvaFAEkDyILo0goID1lIGoCEltRggEIC/Ayzts4p+ZThEw29AcgcwxwRCa5M3xB05yPdZYCQNABp8B+/sc+q2x049UQeTwPJhiBGYyJkphcIkA8CzBD88SUnZpDxPeYFd/miU/Zs2l7RlIbYBw1NCV0AhdjTA3krepP26lPJEeaPQafewEo/o6gIUq/gBIPZoSEg18NOHUnSEkJT2/jNCfuCWksA/RW0zgECOH6yjzJ/3QtoD0tjmd5Y/sQrOZQmZGJlp40p4KJ2KmEd3pcJAYPbCeSCCGAqSeeuak4zQkRAliF8r7Fb7zdSgp0jgFSNJz79lqgENCWNJeFWcLM8Mq5shx2pSdm0R01gN0nezNIfpc06MgtPZxd5RgOOMxitJeHnDRRkHSnsBLlGcYLeyeAWpJM1GMN2A4AQpv4EhYIBcW5BVmYozFY9t4AoAvpAjElmNI5WkQ1kpGOoHtdDKBkpRsCIUJizm08I/zpZJulTgxu1BfJpLPtjzduO7AL0OaEaSNJUkLfXJGYLtnmUeuN9EMYTVzwAzsEO0jIT81ineg6upoxoFP2z4QyoWjAVLnbK8wuZEwyAVgN7JBoHcpp4ckLrkhCgGA9QiwSAj82qBTNmpe/I4ZLMuCnTqCM06grCIaoo8N62yROuTzMYijykx1OkZ8FNnlzqu9lEPDTJ4n1YUsPfaST+jSkC1YcdAYueUjbxnjPmfcy+D30Hlwy6EY83uYPOuC6NMKVRPmAm2XkUFx5ZuUmXzMKacUUs3FRWeaVazOi36AWFsro0yKTyWss8ivvPMhFFBr5P6CQJQFgT3ZPgOMBeaAyHm0yjK98uTk/JDymyt5BFAWnLwFqNIe+EYy0mLKumQ1IKBbD9nMzk59tkcNEoUPRSSD29hO5bLqs9kr6KClB4KCgJTmQA65jiwoKsurUXCCce+7oIHhsKrgBTCF4bCdsoEjaMSZkPEv2U0znFjVIZk1EBSFHjmxl+m5s22PHGWYhYS+f7a9jTDyaKY14e3UNPvCPkWcoWZTcbmbO9BTNA50cdORvx1S0JlM2sLAGMBEWP0QpNNe1uuDJFlIcQUwEKAMwEW2TXajeSCdgAsXBlD+o1RWFOTB55ZoZmoxgBWHkAvT7ZQWRRRDKC4TgvFXpT4FCAYXGzHJGcrMJASn55yHmaHOOg/PgBXCMuTzM5qjzLmycE6E0z4Gv1rngdV+Ffc6lC3vrkzbGlM0+DGjQG/kGZ7wOpJxmSmjA+5Bg4gsqMjSxl/Am86gEMC6SoCVM3HJAF6F6WRkmGkZEZXYLGUDpm0kypsEwyfngLhlDE4qjlUbGr82lqgbwm7QYCODdQFgnsdjwvnx8TScC6bAbPkFF8yQr8f2CuHgC4gZEIU8uDTGwSNZHg64PYaSG+VhT1lIgT6ZwsDnjzypywqAsonJHmIXFE4Kxd7ERlIyjhKyp+KXIbmoyZlpgbfvt1GD4qd6rc5jij2y7rLFgx1efhgEX731V+EoNfo0rPhsj/cGIAID9LwHST+lQZWHOqCF6/9rA6C6+UstADWA00bStKrytvn4Kx5+A3lZvPFXLgsQsQ6+dsuDLKFrGieauhEz87wLPghU39l9K4UbCypOTJLFNO0X0hQgdoICuKgyzg9rxA4kHDCHmDlj+FNkzRYtxEXIzx263WaXjMWHFKcVFSxlU/HX5oCrO/RcgDj2xjMreuzSlLKlNjktLnhTXO7ntIl6dcPuJk70sB11n6rDVboQmDHOUDBztmEMz1elONmAULVzbfLJOFCmqqvFNI6Tiv1DV1BKlic+tcp2m679luRw/1WXPjXzT/cmwJkfTPTWtd/GnXUID11zVay7lBaxEXIJNitgJ15a8RUiurXlIXVda7+HjBBVhAggFi1tcGsjoMrO14ayaT2tRl9rcZA6uHizSHUNyR1rKrvP0GkCpqruDM5rq13PTWAqJ5oYVdkJnVfCplPwpIM9yik4A7x74uzqrOe7Kqmx4Qd1mH0ECwaPOn3C6Tqp1rDci1nVc+nQrNVLAVm/khgOXG0BeoweJwR5FWTxHVAfpeHfgFCj8VJLd1uCjfmisG5HCe+2KuwErQ36kqR+5K9tWCvX5hrMAva3juv1qXxr31yZT9RTEnVk8/17wrNSgMZVYg8B6GzDdhpZJbj7liCotngtJAQrz6hikjYwEHB2KTC6zSjWgGo0whwetmhxfAG408an1fq0wEJpHWtqJVUytZZJrWUV8H1+PO4T+nlQk9Vpt3f9WHiZwlpbkXK4BhVKbL2N4NqWqtB7wXXaomBRmg1UiLB6IBwEFOLhE6toAhzBmIiaaqfAGbgITNNyIQI0GenLBBiy8CqbiNq1gIkFaWjkM1vQYjAN8Oc+zriPjm+qEedzFkmerWQqYk6DYGDo8OE1eNE1J8/sN+rM6qbLO11GEpvwQ0lJHO/rNzlmHOl1VcNkTa6UgqNm7qUlVHW0Odm7hLSsQgwfrbkk1C7CWAp9f1vQBzi5MZm4MwOMoDGrQ8fVBcmJfxsxlTZJtc1UTSUpy7GA8u5zd7djFk4Upzq0gJbctvbktKNK626/oiy22ZrVZB26QPR01lPtwmeGt9o8vY3iD0kLk/ZpWz5DyAM+tGiJdMpdjeh6tgPDYbIIH58YxtoOo2ODuZVnrsuuXWgFGoUTHVVATOifs3OdEY6KZWOlLK233n+BmkAAMmAGSCgGBdfLdTr1DsyJJ8AR7WUl1z06nk/fI1VdtHqQjyp26i3S7QGZXkrlnsxENuqt1ug/EFMDisDp2pHCLmOM44ZcKh0VzFhjMkNW8O7VTx6V8mlbVnRoALMVNV9DNXtsxRirGGWlfwNFRz256c9WGsnRMlZn66etESfzDxLlAOsf2nICFQnswALNfYm9ELIJ0nbPtB1wu5HuHrakbCOpGPL5nXubRYg0EYW0/srv8BxhUB8E9peZ3V1a7ddwy9sdxkaAxbfyWlJPUAy1V5qHmy6hBVZKQCWBGgONV1O0hlIxbo4BuxCrQVC02oMRru+piswVAULwewOQmgljtaO7kwMIOJaiyY2rxeqj4vESIGf0ZSAkDAV/cyPQQwgKwXMSrT9Plg5TdUDulJYYvNDf6JSnwKUnhpCgEblgmB2undJu4hQ0hai/QRPq7EpY2pBMkIK2LT1TgIKdQXrhOOIOEDSDk+wUf7EbI0HUt59H8CnA84TicY188bccMvFpx0m4O84e1h81yagyra5tHgZlLNIqFE4UmQzJHUsqVtnAqEDgJtiz7td3KgeVGXDza70NqqhVXYOQHhB5D2wj+Wqp4bmGTDJg1pNsMsM3Kt95JHffrMu2B4AVigLQ9kyWCGKHpNu/Jhv3qYQrLNdu81SwscbR6gWlWniXrCKAxLWAPC/ERDXXD+HSQXG5g701IPbDWxCQESWc1bF2sRJrY1MJYBEmJDN5pRtppUdbG5HPG+RqEI0jqPMByjnwBo1tU5R2C7WlRwvYzSDW7cXYR0uXS/KoCyb8FVnWzP2vJJHCsjWYNOBvzbzSHpjsnArh3vC3JlpkRQQlPHB0NdguVgNUVeKtGCZAMwRQNwCcA5STztZJekzRv0ClkKignsmze2KoC2KBg9i/WH8l2NaAbjthB0m5oOaRkz1Qm66rMavS7CATHITmjcYQ7kK5j6nLzYdVsxrGqV6hjQ2PoHZ7HAThxhsvKt4qnHB9iAaCDCeuNDEfS9xnfQDygRPH2i5CuWO8fnARSgTPx9ZqyFxOwmy03xuzdsg81bdClFS2pZCaziNzLjPJ+E3CdKWvHkTj6k5uO33IYmswiuzhits+QEmakmu/Q+KVqQ+jbdAKPrJ8g31Ik8tnhmJp8mqBvLUQHygYMoE9qP5Ca+yfrMVqHC4YpYzKU5HdsN0ks8k6lT1csBv1fAI+E7TtU9rJ4401k4CJqafAuNLBhwmCCoDwOwRKL7TFI903qh1IyJPkrINA6Tk+DDh69ZuZUE6HzynFjMpCrALZmjgEBdQ5cNQbIHkztpSQnyNEKTXoXPB84+Z6HEi2pj5QaImQIRYMdBoB7OAdAU4cv3qQh61T+aFHtGapWycias7EmsYHlNxkVtExy7htqvpR6ekGAadRL0+Fbn3giAXpCdtuXLcLTxm26YYvtDO5nVD00zbVM40mLPlSwfc0qlS006PQqNfdfEZ7MFngcJsWzLMmvQPw9gaCTxHvK3PvmpAvSIg00MAu9mY0Ji4SZ8DtYJBuj6Foo4CCSElGMLlwTo9hbmHSSz1LCXEFuGOr+H1+jmh0hLpqXrHz165nNkcI34ZxEAyxkxSqc35bmOLvSHiyxY3Nj6+L92aLb+s/Mz9dO6m1WceZMWnnzz+mr0rAuvN0nlghinGm8rfNMIzzgPZQG8tC33mPlA4z3U8uNnuI/zEPACyQeAuurQLqYcC0WZowiJ4pSmV+XBc/OIX3BJB1C6/IXyNBCjnRzC90ZsGjD2jxFxAFUfnYjmRNQaiiwOOotcDaLLCBHSKaYsycsThdVExUpMX8WMAglxi4sA4tcXX5BVzKwptYJwzNGY88S1OpkuPdv++DXoNgqUuhNAa+WnGvSC52VSZmYUybkNt6CAa6dx+6Us1UMoxIc0gp1i9lbqSmBzKs52K8KauoT5cwVFy9ctfmuAR3ENAIS23Ii0h44ZrzGq2mtU2p7UtgG/lT/2A0bCct7h/Nbqr+76rOrMIbq2zrFWe6CYA1sVbMxt1TXDhM1zgHNfQYLWhjS1x9AhxJBrWO1G14G1tZ2y7XFCFVmHHDIJXwAarnKok8ScvQVUkcmafAYBBsAkrN933Xih1bmQvWP2EDPq4Vq+tDX14O9P6/9cVNtqOAQN3JCDdBugdlraUhK+tfBsl1Ybnwba1JtRkYzMro6/ay0rhnvT0bHSzGyDT5X09BVeO5AMTcvMg0yb22EQK9apsfWBAtN2ZgQa3CM30VAN1m/NfFupoUe3N2Obzehv83Vqgt4W8pzFsC0kbN84eXPOT2IszrM6xq8L2hq3XtV2+h66xy6Pk3tblN3q3ray2CI6bbyp+CbdtJjnzbwNrE2epturWa59tyYBBydvw2R92xnDl3jhlT9jrP6uq4ToatAbeglZb+EHbush3Kd/3Z65HaGa62Kpn1oLHHZ+sQAk5c7BmsIdmsW3B71th2zzahuYs5dm1oWwXctsJqx9MqxYLLZn3y2jDuoRWwKvNDWAVs+CwBS1mxsESxVIQNK1SrcPKX2rtJ1u1Vp6u5J3rnd/W93cGuG3d7pIAe6TZTts3bkHN20mPdzuydIb2dqe3nfZtw2drhd0FitpRsUAV7ZPY40YcvTWBNV0k4vVfYjs323r1N1dQbeqANmR6XhHwu6GUJJ3RzZtr+7IXTt/25dE9oB9mgdsz3nbEDva+C2TJwzVAwSSwLA90Nr2vSxhnG1VTxsn22qHAFQeICnzUmwTaDrWxg47v9Wn731606ABGt4a9UHD8aziDQND3AbI9vflQ4ht23gHAt0B7PfAfi33bP6OGUKNoBcOjjPDiUnw9jACORA+Nz4LwYl1q3g7Td87U9fQc63o7D92O8/cUduPugw7b/Vo9Tvs3MrGd8e7bcnt0P/7jt4x4w/Ksra9hw82KeXZ3OIsckMx8U/d3PT7l/b1E8bilv8b7lGk+5XTXK2Rikt3xGLBJ+gP3K4sEYAaV+4HzKcS8qn6Tm8CiBYZYbZJtB3rSICTwN3F1pNqR8sFesoHK8zypnH8mGThEnQ6Tl5Rli6sft3lsCGrVUyeBBHxzqWtrSQ5DJHC9hq48h1OwNB/womrzQTaKctvgnRTh/KE58CbnZcXgpyfbnawdYUPAabImNGMqeTdoUQWTlW/vFydimRbp7Qp6BZrt/9aJoGrp7ZlAG1P1w9TsPFPfeC2YWnbTivgS0y01nNndAXp0IH6ce9BnBz9lL1zGeMDKeBa8EajNwXTPQt5bOZ8IArQLPh9giJ0IS9Wec6NnAL1cdHBsCVA9n9SClzwyOe7Sl29Llaps7Ocz3jQlz9CTc4hPz3rqe1GV6fdVMQvG5eWeuReq6NHFPnlwb58dWHAxmf7mOtsvMUtz/parqm5FoBFv7jnkLtnMRjOPqSmHL0d47WdDn8aggbXhlAMSAO65gCbG8GiPhAUHzICopoAOwUON9fmlX6/6NUZ65o6udlZ4bAN31SDfxow3hA6MVGLEYh84w6s+gU/MTdGbLJbVWXRHMUQd9/2aIqteo+E687QeMIPkAKFNBDsjW4QlQY2aWpNGWD3eAkrMjGAVDch+QwoUcnMDxVYqAw3wLAHMBhUAAHEFQTVDuWh2b2gHGhVhjuchfMO0u0FCvZDF3y7td71zSH73hDGHMxvSs+CpJLmEJh94ohsCrHfNo9rvdu5EDNI/m3zOmc0hl2Vgf3QH+QLu6/XNJxdIgee388lD34bHDZHJJPKHzUwUxnhe2d2AoD73akygH+Ssftn72D7EeUlrYfPuN3aStJg3S1q5esoCH64Y+muC8I5x9sxuOZGMFbEiScPgcH3Y0A35AgAnpaZVLUDCKHOW1RwnJPkuW4o9n3VZVuAa/3II31TY+nTnQBBcr6kn39jY33sAtQuyJEDDXVro/G9yEXqstrZH1AayTz0dC9cdr2yEMTz6xYR9NBJWsJJVP5gdEROGUJahFxDMXJWzonFgBC34bSz/Fr8+wuQNHw3JfuBuLa1LGGDNRZfBC89ywvl1pqyL2zipbPhf0uL5m8IFJfBZdC2F+044AhACxR96z5elbEb8JxckwgdDgae430BcjecehcJsp14ANXyL3J2i+wcLw7QY8XhLkbkFYNZb3lrJK68FcevoUvrzl+G8RVRvvTILz61kn2fCOjnyYM55U+rGNJGItIFxMZx+ec0uEz4BBQxe9yLzINRN6mlUsG7MVfHULg6b88QNC+1BUvjguph8fApbLuRPbFoV+e/pKc25MIoS8XwG+VQWjw5ZYCDbu7DAKZkJ5BSlBuOlLwRLnL6aEe5zQa59xSuvWfA/pMHMcNrRg7Tf2gin2HszY09LUzhLnvvfxsE1Pxbn0xtVxLa9L+5CMCiZY5xi1MHzxYT8lMpvauu9AckDAYVfAxJ7Q0hf6Pv+geQ4aCzmk0AJBvw6QYS+PHwZHlZ42MPy/kcPwcNej5hzn1xfPP93hr6QZgc/4MV4+fr8595Nlf6FGBbIdUt1bvDwPY1el4+y6KrN9yS1QkfG7A+WDjv0bi281CQroaw29rr54+blS8mAHGRVHJEB/NgcsoQlEyM62uuCz/v282X2D/6iwDqgC4OdlYAYo9hp8Hpb9uCUAd74dCTJSifJ9C/afmjOn1JuietT2piFf90ZWbR5N3m5Cph8w+LvJkTaRANOFXGWPYFFAXP/wN4VBLMAR/9BRQByEGDEpO3HKJVqlg8TiFPbd80AJP9aAz+PMuvxSoIhHJVhhwIiV6wZfwVJBVlTAPXGcHXBWP/YR/kcGwE0AAYicqzWzEb7aKmVCS9/roqh83KlEWACeSJohJHpQoCBlNv5FydBHv4g+ahK1h7uR5FPCukl+AOIMAkAdP7QBaYGR4y+bROQzry6voIjz+WgIIBpwS/pELwBxWh1gxsq/iIjf+acPf6wBq2hliZEsASHhQU0tMwTmABRHV6Dc9JFv7qAU/rv5pgrASBhHeSao06iAt/j/40ARAB5wiBZ8PoAxehwJAC8eo/gwDCYqCOog8BMOP0Rh4AARWZABRpF3DoBQgcTjyB2DNL7aBRetaTYBvTDQEOcMCL2TVkPAf4BfO2gCP6jg4hJACpgKWJvKiqy5LOgGBXSAP5D+7AKYH8BggZgEQ4y+KTJaUqqvv41k/rGfJpAqYLYHq+7iCIj+Adgn/Su8KWH8z9AFAHggYAOvEOLIkwmHRhBo8JDYQBBSQI/oREouAUFYwTgIwFuBluDyJ8w6uqCBuqp9K0EeBHQQWh2E0/r/5Cy1FI0FFBkACr5WBcARkE1IUWpehjB9ATIH7gVhoECGEo8MwRpBUwar6byCwff77gThiEHD+UQREE7+UQbb5bBTAWfJdB0agtgJB2qFfLkBbWFQHhsAeCYHHBfPoS5AuQgDVaQBgEAjCmAeFm8Gj+dwYoyiqQIbP5Ba4ZtTDcs5gaoTghe/iCGsEugSlj6BMuIYEoBssCcFQBwISIFsCHAeOTaAXAQSGBEWwd0iPolSI45IMdAff6IhDVHwHwhaYOZ5bBVALSHQ4yDpsH9cujFW4xMBuugFP4EIU+Z0osgNggoqjUksAZBfimOIwEKzMwQ3wNtPfC0IYIMQFtMD9qn7oG9IAP6ZYMgeHK+Ya4P5hpGfYKP5tse8g8jRwAzEQFB0S/m75oA3hPQCtA4ShAy6KaoSezWmNujGBOoFoIiCEoTwLQhqBvLoTABEjJFAQCgdYpwgPITur0BXkzTIiCQ+ccuYFsK3HnJ5QqofmoiUiXWt2AwEUIBaEZYS/ryBPwg/kcFGh2YXkhkwawXWDEhMRtoFIsf+EKDywgiARhEoO2vyEeYH2LGF62fynTJ+yKzLGGUK1APf7w+oRIj6YeigCmGYoo2vv5chRwgyHkABVhUpKhi/nASmAQoQciWui1rHQvsa8JB75hzaMIDkAkgEe674lQGmhGhW4X2HahTPsz59+V4TDi/ca8N3IT+AgacFFh84SQFL+vPk8GLy7ZNTBJGmKF8TVSpyKfSHBYQccHThj9rcYzyYePLA/yR1lpiVYf4fQAsoDSHXw/h9mGnD/hgpAhgr+hAS+GkBcBO7woR8EcqAAR0OIoFWEFsuBYWoT8E2EER5AKZYrM6EZ6SOMVSM5I0RaEQhEAROvPoDWEsEeyrIq4igHLoRDTOoAr+S8ur5tEFWL+GEkDEV2RTouOAlgE4IAViEYBwIYiFG+giBJGoRDEY8FIA7WGooryD2G6qwBV3stymUw3BpHggzoeyRiBONkgzmRUkexFNYIgXSQBE5gNOFORnAYBDEQ/lPeA2AQMJZE+codqwJQUbHO9gkikqLsgURRobFIVqSjhGgiUQQdHD+RHDGD6PkfyGvAhojhNaHkwdwJgRjAHSGCAVa/sJCQHi7oMQqvwSUXoLNII7opE4woEcdRKR4QTjDS0O+q2I30IktaTNI5vhwxsioIdhEL+r4XhHaBZzNcHG4F4aoQjRxOKyHDh6FH3IqWgUVTo9afIccGTckzACyJwSCAP6/+qsLehHYkXAYRpESCFITxINZuE5Thj4diGz+s4dmG4RoIEuF7IwoUvxN+XepqHNIu4fuFGBR4ccGnhABNqHNIKQWMDfRoQfADhBqTjiYPit6NPpwO04bz7noS9lmBjy0MaL7zEK/urrMEbFPeQcUvllQD+WgEFqC1R50cpGz+OvO8RuWfGKPjEh6MZRaNAhGDQQ1hVQe0J0wZiEdg20vgIbzq6AQe+gyhWHmzEDBhQZzGDgmqjzF3e4Qcg4iR9pIiBc+HMZ7STBx8oYZMRG9lBGSEFMQlgYxdNLG5Sq2gRQGSAiAfYi6UPxOAHSADRMARGwlMbTTLBMsQrZQRdgmjEqxVMaYYaxLgUrHGx7gbbFmxVhhsEWxXpIoFaMDAPKjeEE2C8BlMygJZQv+3/gDpBBRvh+E+sAeMLHvB56NbHKxoIKrH2xU0VGQ2xScXbERUsIWyGJx7FHTQIYU0WVg2u4HtrGABbcB9HFqXSrAhnB5AeeiohGxMAGAYRJAbGZoscTiF1eRcX1Qlx8UWiFtwesUhoGUbcUTEJebWp7HmkRvlbEoUA+KbF2oKcUfIcx2hJHE6Rzwer50I6HlLErM/gY4HJY+JFOiju6ZODGoI4jtHEbxg4NDGqR6vpPHpxecXPHUB/6GMFOAU8SbGuxs8QXHu8RoIMFPx2gKXzBxxxHZTq+UcbyzFk6HgsGOmoqlrG2EhQY/HXxycUOK7xsCPvE+ex8UAmgJKzOfHu87vOqo2Mo8ZL67K2VLlS6gB8Rbh6oJyhiDLAS0aP5T4s0fb7zResjyGLRBMc2GMhoHiWGGhAofpYqBD2NLDOq/0cUCOkzwDMregzBL75KCAzCgQVhjGhuJ2AOAP7GUAgcbKixEKUlFEkKuqCwlm0gifMgsU8iV/EhmLBtFgAElWkFJYAxhNURmExIU4qN8RoVsAOsWREGAGgjQGonhKP0hVHnwQtionlOgngrDCeQ4TR4fY8qG2HDORiuCojaaYVUwVar2OET0gLiVELMUiyN25MJI4b7Fd8sibPDdutQcYCBwlgHljaK/sCGEeKmoOLidgkoEbFMk38UOAZJUSSQbHBpQPRiGYHIAEjiKRieWHOxdyC5jKJAsTASokALK0CAG4cb3GVheRmFGG6/UUHEtgn+FXBsJL+PTHHYSWJYDKYZACqKH6UiTIk+EqSROCaWnCVLAf4SYNEl9M5mJInmcckQjiSYZYTolV+CpqtyfA04YJZPRhSmsonh37s2gsJhdNkx2YTycxJ6IcvjMygxktilj1SY8HMlq6XiPgiASiyqJEK2wKRLiASY8efBzRzdvAqWSIFEXACC6zkMyQpnYJUBtuxaqX5A+XUcnbZW6KYvySewHPjJKGpLGSnIpXYEoZzJIKZUA/JLDpVa5g6mIOiEc4/jqbz638goZjWStEqzGRF8IgxVxbgKdQMAqbnQCgCC3vV7oujTp0rjKQqT5gtOCMD8C1KaYooyIMFMO0AIwJ1luD+AVdunoned3nKllAEFDjAPsEqaoQGpwqcgyYA6qb6hmpiNjbweuloq7xIwProrKv0vQBHjvS/gIamSCfKeLyqy59P4Bn6F1A2CPoh0iFLeiS+t6nCpmoOOZsM2cbYxupxLAqLPAkab6LXw8bBak+YCrHakKEybOCC5pcZJ7x+p2qO6nIMXqT6kqpWwXywS8gacGlIAl1GGmEyaaXYDRpPmLGn1I8adWnQ4S3qQzyi64J6ktpfopmmCpwqQMi8CdHMgJgqGAi2SFppOPmnqsR8r2k88StGhSAKV3tyGAQccBOD3YG2DeRm4ONFSBfYU8PwljU59IbH9S5bMoA5S9GKiRL0iyR5KyAORI0C7JoPq4hKwOkWUgoALtMeAwg56ZRRLg8oblKe0fEZTQAE5yUcwp2k5pIZ0AM5mq5yGx4ZTRegu5PulfMNET36j6vya4EIqkMbobspcaZaRS+iyurpMMHFuITG6nrlnExsZzHyqSo45ubFeBdGZRkhAY0dqhnMKwaLSuG1goArq6lNJIApkyAhGRAJWdJPRMZKyDCG8saVDxl/RzANYCkZowObEnGbUvowJsvPiWwfKKWHYJ8Z/1CfZlIWYMuzaZyErqjxueKS1jqZAQOQSepMyhxb7BAiS7A2ZQ4hhYIqnYpKYRRygEZlrwjgAVFm49ZrIlTk3Jm5nYwvPlG4pYTLNYhyZ1mQpkOxxJuClYMlweQzhZ+/nyp8w4WV1SOaHIYoRXyk4oZpsWArmEF7CxKu16xqhWTvw1KjmiVmp0fmqpb3gOGQD7+wveGuDFJJGF6A4oQKvijiKteDBhk0H+g7r/aP0jMEDJijAfDvwXym3ChQvQA7rSUruikw4ZimJYj2sTYD+bJSVhuMRSA6SXWCZho4PDikgLiYfwwgDujVrp+cRBjCO6Tic5Ku6QSSlIrKpIBAzywu2TRrwUEDFEpsgt+qlwBZFYNeg3ZA2hVK+IIRn7KwqmzjtmRCE7BQqbOb1vLCrZowOtkZhpigT7lSH2XihLAh2d1oNa66tMyva3oLtlPZKiWvA/hhmOXqpc2mS1qx+HWjuqAkKiTpxs6r+J4rA5BIDLqcIu6S5i0AkgJ1mfo0cDVn6ZOqAxJ+Iu6PWGMSXAOjQqAOGVsALIayWmG7ZdZn3hoAAucIhC5+mTfDD6qCOsh6ZwSJK4ns4Qn26qCFMLIAaCSFsDnYZnObFS9GzzFYZxCqQnrk+s+girkiAEVKblG5uAKMK25sQiYIFCsQhYIRULgpu42MVuThlO5EQMbnGCpuY4Ie5sQgMIRUK7mEIW5vLD7mc5OAL0JDim8mcxx5uAFYI4AFgjEC4AJgo0LeWluQblPEaeU4IB5uAIkC4AoQEkCwaSQKhqxCSQI4LZ5OgtJImk5jlTLJkABKwD2uN/IMh38lpFTxJunGFGyWkhTuJLa6yLkjCtiqNjV6JuzjAbwg0aLilhwCxTtdb/8V3pGzjmoAqQKTp9GdOlSZuabPne8yzKvndclvEZRB8oDP2mqixDEniFpeotrCAMcabV6kMg+WbwUZYqRKwteAaJown54bNfmkEt+SAISsVaeGxqstsj1yipwYsAVzp+nGorLpQTPAwLphaRG6kMzjBx6fAc6dAWXw3+TSyJKd+cZHkMnLMPkSs8BZaSRsXsGW7UuZ8Oaa0JCKTEwGAuCL3bAe8ABgTrJDMq9i1BNxrFj8R52SAY50VapLD6wA1PwCogyKOx6CMuCM2IBoUPFwXdMoZs4rNuxUjvTJyTkrxwW6L0lijPwKiT5gVMOinaHe+HAJeK4EKCDvTpIxwLQUfAXoElGH8e0XVye65UsnRFAognP63AOhXoUWJn7DIrEKg4I8RREjbhYjNu5hXfrWFMiHMzuYo4sOynwPEIcB+gcJIIiPEb9ne7nEH+hEnAkLmIGF/M5hd5hcFv5owC7CgwAwDg8BoaQT1uc2Q8LRqZob0AgZqRiiBmW12p1QBy02Zjmhmy4DaG3ISCHfqXZreegiWFzkn7CgAAaBOkBopRc+b1I4SmEaXZ/hnxHI0g2Z4J/EIsH2ChaWKbiJe5egrUi0FZuSe59CixZ4LLFrANLSVCU7hYJHu5gHEBzuHvM1FSws7vO4JqSQhO5VCBQiXkzulghcXBMoZlsXJCfgt0JWCvQn0I9cYVCe7GCNefUJJAZzPFRJAsVEkADCIYkMJ155hS8WtilQp0ZHINXmUKwluQgiWfAGuVHmxGwruEk7YOCFcCIA2WJUEiCntI0CaB6JJknzJFAKPTTgnWr+kt4qGVznm68sF0H9UEMWRjaF5he4Tug9pi+iHAuCKSDBm7BRIW6FMeiiS8lNiKrjegUFBenJIH3kBl20u3vyoxY7oXojmFToFzqpc+FJ+wlMm4FbC00pUX/gQxgiNeLlAxSRBmm2zNpIbQZwejjIi6pKa3nNoUFGmiOFdJPIVtSfJTbBbhQwNYZQgqwnjDMqTeS0qeFv8n/Cn0WqT7ZqhPeX2nJpA6RfkQFj+FL7GiUIPjYlp2DGoxP5xokrzv5VvAAWOM3+Q/hJlwYjmUxsQBXIggFYqmAWllcZaCywBaBWmwqssYimxKsZBeM6gMm6Z8A0QRQE8R1MAgBxz8AP5ubx3uInEiIdh7fhZbxw8fsoDRhuiVYF7ZfYI4UeqmzKWyDlMaIGGJmjcMmYKFtBX7J1MNfONktuDAEkXTlVYQQiWoXTOErg8m6hIXmWlRfSD2s8ycXB2yz2fbT2ggZpUlTBFPo/gRJqSGaVZK2VnUxbGrZXaW0FnpU8S/ucil8nBKbfiGUd+3yfAwBlXgaFI44YeGGUHsCrrko9mlkkM6fCIKjN7NeD7NQlHMlHj1q3ZHCVCo98MdjCBHqY1LgwdZzyrqCwa4RP4kwYlIqdHZWa1KjYM+ytMuFMAUlkUASGtybHTNo0sETLlaVKUerd6xsr3oLwGGYjYraGIGmBgew8MTwoVJHJjhSsR7LoyRl1PGmW/8SlYID+8uLkWVRkelcgx6VKAvJatRAXhHy1lihK/R0ACMBHAQFlHJjh/CC2egJephmNACBS0mEZVbBlHA8KgAY8p5WQK0mD1zmAPngMrdpPacXyX8BYrwS6MzZaZIC0bZQbomVT5kPqzFPKDiCaAnIGlhB03obqisaMgiEZXpgfpMXR5T2o8LegGVXgpV6OVUOWqyvCnfZ4wzCJjhLOM3FkmYg9TCERhEr6a4kRV1oWH6UiGxdHmuBagOQCKVbVcULtC3QnELmC/gr0I9cAwmFQjClgieqEe42uopCAEhofxdAyxh7I5VdfnXIyVYencmkyy0s0iiVR4eJUmVElburdIXQJsKQiKwhuRtVarvBVj6A1KuLe2B7MsKHmqsjRAuVA1P4A30ywneyJVl8DSaUFK6gPwahCwFQhegNFT4WLlZOfkyo2oJvnIEplqgBUPMpKQNTNohGJYDfVd1W8ywqkHvDXOlqNidUKEfzoTXfV7eYix/V9VunqA1QgFgI5UINYMhg1gXqZmnwUNfCkw17biICE1VII4VI1zCLIUbC5oOjVq5+aCc7Y1SPLo7PRPpXTUQMJNV1L1qKwgNSi1yGVTVmOUDtWYMFwCPeH4ZnaScbIxcWf4BfVsbilhfVz3gPSxuG+rr6uBUUvDI9BOGTkFZ8TtWIyuBpLKpmi+w/q5bq6NLHnnC1aQGIZWiMKYoRVI+WXvLq6l/AwVWibtYiGXBVrBAkQJd9KABmsVQOcGgMarFHXkFWVuT7pMlzNlzpMEVDtXpMkAKsaK1HDPlo4G/sKVJRGpGu0SpSxgLLl5MdUnvLpM+IGNzClnCOwDMiZoUKQhQJdcsFCcEVOPVV1U9XljhAtmeXXz1eWIsQmCN9GqHTaergkDMWm9TRYKcnZT86UCY+t1Reg4/nY4QsiqoPreAKAGPGXStJjW7AeuRTFi/Z4YGUgUA2RiAR2ZsyvtnNuhiuJz+6bFegw3JgasKbPu9RPe6EgK4avy2haAHwCNyj9dq67V0aouY5WRsCDbwVtSD7AaZ4/uZmPAQMV6CGwFADlWkBEuItTIe9YRg1bguDUgLkNODUwonGDEkinkAByih5NkBDaoBENZQItTnM1DZUD4NRIEfC51JNlebQ1gEGInqogWHn46hrxl2BMKH2FWjhKgkaOEyoA4WETYIDDQco6woEk8D5F/ysgBiCGzFDJm00avVV14cPJK7IyK1EwpB6vDYQ0mNJzCsY/2o/IdSlo3NKiic033tSps04qCA7WI1zNw2PRlpB9Vd4VsNv6zwjQPeFIe5tU/Ci+jKKSxIekvhiwAuGTsC6AQrYjjDMAETTYwB46TfR6by2TYoBOlUIe0IjKmWDkimG3LBlk1kCTc7hJN3wX8EAhJTeCB3BWTaSyiqeTZCFygx6gXUTIeTV0335HhsI0FatbkOBWKMiFEFGFWITXCCJbyrnzxJ2zpLkvZT/thQCAVINxwMyyoEHROwhGB0io0stUXWXJEnh+5K1zNCtRbNSAMdSQB5zedH3u2tG5irhC9lhlhBmdfeF30ovLyoW1xJj/JZaOCQzQx1wMUHVKG+ZNrqvNpDCmSzcbMbFmZNEeHDJZakOBHz+AWgmCByIAjVGTQtLOCg4/cAzdZIo1VRaiJU5Mdl9bX+lWlOVgRyjUOGKY+0uyhq5ETnQg410OuHp9mVnM42oy7KPq4SmJWqT5KMiav7ixJrFNKVUUp9H+S+oNvFbW9lHPgECaln9NkJpoouV8R8tvyOYBZaShjADmAOsUgg2BHjsRSmISwPeHp4Iqu83DKvGXaiQElksPB8lWYOYCxU4gJYDAA0SSmQj4NqBWiOAzFQl6WSDrXIhOt16NNgukbrR63KAKBbzXeKAbZU1N4PRIq7sALrTExhteSoBAukUbYBA2tvTSexUJPzYK2m1SESC2L6HtD1gummpjEwAApCQD3ogiBoTv4sAJYAJp0OCW0x45bVFVFkzGvoaJt0dd4JnMmIHYCQErGaThO1MsWZI3ePWgWplVVmjy1LIBRWkjthBhJiAuwvAOH5E0kgRwAxmSwJZFdGDMkele+qKSIjHKFov5jxoUjerDhCF4BDR0AI1aIqGYLwMSQb8pgPoQntZbe6CfIysBuXI0nCU3x58rAO+mO6+4Ee2P0UbTxYXtdlhXBxtXJpIpbqpbdYDMNu+OuAXZgiFeRXt+Ah+3eKPrUgCet57foTwdzFSsCiwa2As1aSEtdW1/+UxONieYGRZB0Bm1bUEBXueJEcI6NTpJhwLCwpmshst87QhzLmV6LiCvykdOTKBNyZNzhpwZkNBD4QV/BBIHiBylvwwEsYcgnXhLWAlp2RI6PQGemLKORmpkEeFIQT4/DWBHDOHjv4DrUzBOtQ6JzRPoDclkBK1nR4o4Df4AEDAE5ZQWOiYxGsEHBEVbqgYhpPTMAPBNaTvEPzKyATtiIIZ1JxZAPwD3YGRFxziCiIKoCCAdgHgh5+/uBwT2dBifeGkZUhMLFSE1SfgQTYfAKArEmgCQrYDZaHsOEohe7jZ1LGdndwQf1tRC0mNtrBBuQ5dbWesj5dDnZM32ZUhP7VxZSQRAm5dlXcPIFdMXcSGIh0tFEHmAUQXXxpofhO4FOkhXdwGeMu1OMrTo+1HF3EhfXWB374fFQdQPh1TJAFXIiXXN3wAHbdGTu86PrN1TtBFHcaSOwjZZI3ga/vbSOSWKKt27dSIGUgwmAWIx70griKYEMApzdGDegbaIvqxKCXgkoXdyXbPQoSkgQASG495BDgwg7XS0kfYjBWSW0q9VX1V7ZLVTCBvduwiorTEa3UiDIAlQbw2ZYQWKyDyoP+P92AEnnV/gLgP5fMbZWoPaUlLUz7lN0tJV0aP6zhO3cl20tUnl3pfRFcSsJSEFJIbE6yjmnsJf4bzAT2jgC4O8mkJ0HpGR/OGBHGgrO0XdZkbBPzRl3/ozXRN2RdjncN0ddPtbgEqZCrD7Vrxb9GzGB1cdS2gOdi6PypZVuhvL0VdivW13S9HXbSFVRD3WM2gACQAADE4vTogm9jwCgIDdluG6BnMTvS73G9Veu73HBPXL72G9rvQH08IcXbcE+1zpsaZumLzob0cE+1DjBk9qFJ8AUEOMA8Egt9Um/S6+kOOp329OrfNgiqcscMo2hWXbq0/NfzKq19xIAc3FEwhsfvYj4upbaE/NaXQrZtE9YEb0E+bwGz5tBnPs22711AEDGmBYEHPwPWw4KP1EJmZJP2adxIZtRKitbWoTNypzhgST9YzWv17xIAZP3Y4fNEkAVKo/jJ3cJVFgv2L9ihBPj7pk/cKR0de/fVLJwO7t/6X94jRLo39OSPtUm9YEBW1L9X5GRQa0e/bNiP9FkXv2t5Y8ETDtiluF/j8gVKif2n9BZtjhHJluLv1cNYhmuiT9raO2ip0f/Q2iW4NMrRQf9MA2f3iY4AzACT9ZYpP1c0kwpySwIC8BU01krQUmpuYeQXIrV9jcUTh19xMCV2VWYeJvKd9SgSsIA+dBKyHKEdfAIPIt5HhR6HdqfMOUlVgnGiSv+MxH6HX2YcaaF9MR8mD5N9IYLaGyNnicgCaY9vREnA48qBRaValA3TxXEuyV93d9LFZPI3u82Gux1ylDosLHhEIc5F14XPUf1dwEFRaJrKxMFiZ/OsaASSZ0HSu/gbwb1pqFwy7sqJhU95PVvLT+xysPwUBukbLEpqZ9DAR8OR9sEMBEJ9kJqJtgFEijHgTnruiEWoYXoghDHmTYR3m4NiKob2l6NX1s6hHsYbMD/cXUODyNQ2XEsDXxGAH19maHIwiqELcGRdYoIOzTYe9DaBSFD3ofKiIU5Zv0ldDhwJ1Sju81jQOGc9jhl3yVE1ba5TVeqNUiBh7zIvDYAPXMwOs9IqgxLrerEuBSWS3IuUDtY38LnA54omA1mEIXwJsMhDiw2dzmkXEaagdFBkSyV1owtsggBox/hZ3dW0cChgfo98IYj84EpPoCT1Tw6uWNAVAM8jyYlRVeQhD9RBKUaBZqO6BM4JpFqjtVw4vfrBxvQKlEw5SQNyXg+bIJICsgkxAEHYjYAKEAhQdiThhagKSdokZDlqPgCoIBiW51oWsfk8BYjbw2ABxAIUKyPKB4YFXFFd0Q1ygvZERKCDrg25e7D8j58PUnsFCIMr1EdwaGSjjxx8h325xqsfJ1RD9RBW2VOYo1ITCjG3cfKiWL6XjEwj6AC8Psi9jiX0KjTOMOSHA5ALn4wGi5J4hzJqoE6AZEv8fjD0Y7INAOQjYAEqNkjlIy/4BB7oDKOKAsUjiSajqvvLALxZcT80JxLSTPFqxVomYYK2cwYp0VhMCXbEFxIqpvJJjQQWsqb9gGDonpjtmRAxhDw8hEOHROowWO4dyijENsRnhIm1Bk+gPKjsg5SbthXExRGiMfDZJaGNlme0Yvoqw3gMXAjd8Y7w5XxjY2bHqxkvjmOVjL8fnE6dOQ30O8OH/Lh73xgwdAnzjr8UQzIkkYI/5aFtoZTSsAzBB3h2B8qMoptjxMcGOoYERJkQS44PteMgtfgbuNQJIiPmNuxR4+fD6AsoEpVB0ZZrUAhIb5DYxpo5Y0Tju8v47PEmCNY9uHhDtww2Npjq44pkcMXY2MDrNGWPF1jARIzzlbIN9MvIjD4IEw0xMSnSuMZxbsTG1ZY/qJUG5YqnKIM0kWCQqNUAAaIuBPA7IMRNGG0oq33LxavV+HXk4gKfRwDZjBjjE8EhBHgmCcExmOu8qcVgyyTywZ/0KESk1JnO1ZXV+qNDtfZ0PEwhvHTArIANDYxyMPtduNt5VVmYxjyA/qnEpDAQIdbjcVk/mG2jNZJuMy+A2chOpelgUAmaTkgAP4g+Ow7oheT4bHn118xZN3EHDGIfmBHyBk8pMxs1kyCH2B+MNBieToUz5M9xDcaz3RTm2IZNHyKZYNz1jmAAq2loCXuq0+19cWxjtDoAfrEzDwk4ZMcDgQI2EQAu6CmLO1bfXFltEtjU8SIpqKD13QT4IF62z9LSdp379EIXwE4wwo4BBetISJ1PgRmTTH0hIGqJQocNwSL6hNNaUySF11M0xHwzTTTXpIzRHIf7g79IAYEMz6E0+ZSLo7QNOgNgoQRREDs+CO+jfeAKXZhfE/CPqMD40CEIDQYFMGAYPysQzaHxDDo6oS2TCndmTplwo1kPKp3KscMFD4FEUOQSTYKUPqSxiIMUCAlQyaQmkxhhNPKCZcaZnV96M8fI7BP/RRRFAMpXwNYiUsBvDSSPLV8Srj+MxKSsTQM/q3HyqMQeNhN1yMaPTdUVUaPjdJoxTMBEPXMiTggbo40AA+J/rs5oW9Zl6MqYVALoOi58iRKWuI4PtnFYxb8paPjTfMzaMPjyJD1VDhW5oMiyTqlLTGaYouCYKMxqCMzEaArMcMooZIk7h16VX0yJOhTYk0ZQSTyYlJPtCSk1FIKT5pEpNGT+A6fBqTzEzWSAe7ZIoCCx1s1EHij00ZGT6A/YAAQUYUwxsQ3wBlE6PXIOfCUz3TknVnBwRhJPwhbAYMutjFTsZPoBr4LiByB2JgmFo0iAouMVEsSKFHCQGDMBLIBcAfhrD4fJCM3USRkiygMFFoT0znMqUKZE3yZzj01J1Bw2cW1rZxWc89O5zMAIf1emX6MX2xyDNPoBn+lsPYn8BAcfEkbw8Rd2P1M6ImSPjEPzYmPbxyYyC2pj5PVWOLjPtcuO+z64/vb6A+806DjEN9D2Bqoh6uoGHAPcDEN9JGxECgv+G7doWKYslr9PJgRc8SbFjJ86WPwJCkRWNqTbOhdNXTsCD2FDzEuA9O9zo8zABUTN8VYYGTzY79MqT/s4Qt3jcQ/vbLzYANxFw94KnsjitreCEB1BRI7vODjjEp8OLOh/tXOjkxUhWH6DlAO1h9lBI1GCBSZGj7HU4o7kO32FOGEfO4e58/USXzmY9FlxZN86zPj1Hsdh6uTqvmZPZdX6g/E/jSi5hEvBt479P3j/42oRGg2COriFJ/0u+Oghn43u7aLTwL7NTR0CwEM+scC+dOzwiCzdPXpd06gtTz/c/wi3zBkwlNqLcWaROMNzUxRMVhOMLfNpN+JfRMdVerjNEM0DM7w7BLM4yDSxzL4R9MZYOsGMAByTo11aKRmVOlPbkpDMxj8LkmCPPZzkkSpQJ6SwOvi8oFoE8AcA62JFxiM+gHZFKOr4KaFiMPtRHjv4LTeVPHk/cS3F0lIk+bG6+pk5BG4eOYofETg/S402KEpEdKPWI9GMJXjA1nDUCf4PpmnPBJWw5aj7AVnXYFOxF8+hOLj7xPWCQAKyZvNuIQ45iPfe5IyqOKyJY73HGLJEVFgTZqNCaV9YEEzgFDKdgW0Rp1ECyIQ7xR0xWNnT6DAgs9gni+ajeLZQGgsVofc9Uv+LxuLgvMNLY8Qv/THA364ZNmTakvpLq+KFFlzoUxovGGA1fMtmBUwb4tIrMAN7MB45K/J1UrqEWPP4DzDf4BwDxgHjgIDikTFN6LhCwJDFg3HTBD4Q3s6oRcdPHcKtYrvyaAx3YbBVh04p5iOSumWTVbch18oU4DOXx0yxHhirQqwBDkrIqyHjLjA1W4uXTUK7GHOTUZMaseLsYUfJHyxhtqu8duq6HMKTjKH8uECuQxRgCdLEuROr8RoUxWetMbXz7SL08actyL+q6f1sCSnVaOBzBC26tQUka1Eu6LiSzGw2r1AfMHZTt8YAWhzKay8F2CMU1fPUBeK6CGrDk1cTzsqtUyEB6rCk0fLJLTEYWsy+80/uAIg+8KCtE45gDQ48NKzFWL2qXrYEsg+9qxKv7TGrV3iRzFcWrp0EIQ29NGwCU0zOZNZ9KzN6jHMy0kxrl8GcyTrTYOOuBhZoyC3xxKupmMbrNo8erLrw67lbvyVo/uvL+fKxMiNI56z1xBzpSwYJE0rpgu0jrkU/9z8hIQ7JOshavi8HHLMiyGu5B8i70xYTZyFIkbzcid262ryIRAkRT7g3cTnrYa2SPvD9MU6BgTUYKlpUArASmTPLGxOYFbxwK2XH3Js/of2Hhuzm5iUzkq6Ti2rv68GvUTr8QHOq9d8QgFtDrPe+uZD2az6zYbJSy8FArWhARtODHmMRv4ElQHAsOL7G0AnUbz8bRtyTWfBJncb2QV+NNBOi2hNSbDGfxtpggm86rRrMbDWs2MEVeaueOddb22PGvq4GHBGPhro1hzxIXyjQoleDUWgbzI/EkmVfVRMh9mt3Y9Kuqi69EN1FonKOu8JhGA5IfZFCs5u7SKiOeP+YUQYlHZxnwNumsAd7YRjeAmmIzmjLbsO6BrLm0dqGaWSmFokqYCSZj34KwkxQCOkxPZjXk+567OGcBhzYoxnq5AyNMv4SdMSG0W/UflzPOPNB21oNSzfeET6yAACl1Ji/JHh6tUTQrZD482Agp5TtpEHAqtp8z6w2VEpOngR8Y26mgD+lSBovp4LpNZOwhVaLCGjxkQjYGDyFIKLEg0PzRHhog0fT/1Z1roD1u0pIWEX3Ye6q0YZQR9k9QRjyaIIiFogywb0Q5oRvpehvbc9TiBa+BAI1CZAYnSDQnbpDCPh+TYO8YBiMOm16Rvb6k1sR4kqlh4D7pqXK9a6Yc0LqB8hQsA1VFSKM1ZqLtASqXAyNks71tdgTsFymtw77RiXJRziiWxjJ5m08DbES26p1cMtoMmFtzQ1dCoyI35Pwnpb1AOVWiKUIMHJWGJOdhQHeCOELtJyk9TFbCGXW5ACXbUKXyRU+6eHYPgc5Mo41ti2zZc2gk2u9pQeNdBFOyoZapmg1X9bpt3hatUrdB3RMk/MQNVAceATKkA7rQh0sA02I708Q4QAQDhAbgOEAmp6LV456q02PoTJYC5rVIMy9tEls/zFU3EoROVpXUhwZ1wsrrtLT/ZbhhxhsGzCfGKKWI2UpBKHYDgNn5S5hyzKmCQTJYc68V1trMFI6S1BIzQQo8jj6YsAkEZGKh3vSPy68PJkt/RcD2dpWveGEpXYHpT9by8jOuW1q28w1zbVgbwQp1Yu9HPq+GqIsH874c0xEbtpylPtMRhmGLtbSPsO5iaY8+5k2CRB2zYwgAZWEMM28B+w2sDY7e/f1SBzzAmtg9W1KAD1NzA8dFZw5MTaPCtxbaG1kUGAZ72hTEeJPs97qtqFN8TqawVtPpIPt1j0ldrT0Ry7Rvcut/7K8eGubytQyHMAEyA6XCwHUrdMCaAg3S5EukGB1oBe9gYbtun9C28BwTbxS4XgwDBaD8RtrPxAQvEyDaSqLLsI+FWL16RCPgM7yfCcWbT+7ZsYBFTKq2we4HWB+gDmAI+AIf4H6ALQc7iOOPLsaowhz0SSH3Wxqi0H3W9LBfEn5uvscgm+3YCVIgrTiuXrWNuNQxy+6dP4lsmhwR4IbzHDPsGYm4M6Qj4lh45qbgy+6f3NIJylOhL+Nhz0QuHsCFaGjxCas6sUoQdEw1KG+qy6u4hA2UwegSUhySjht3ae6szIs01YGJT/Pml4iARVPgmNi5hyHjrTFbVuHLTG01MH+A6OzYCCsORUlhYCxDcEj6b38ndsdxsLikdroeygQkpd1aQHgz7wwewH/MPU4BCpHR6I2LIUM292nTT5R/EdbBMO0AetHMgRW3EHc1DIfiBdQE46BwGRyBgzTDJIMe5HKk2mjUAFaOYDUcmx3IjrHljcl4sAR6zoG4ecMRwBjysB4sdGGdgrAf2xoVBRtAJUFKKpoHBTR02m59x066DIQbTwGjHMA+g0oHkgJcdXHtpBzFMKsdFuvLcoh+KOyHgpFCcbw6x3t4TYQkptswDhBwkdv7gpHYfeIHyrCHDbmJ6ihsR2JzNwEnNIbicNri058DI7lMPwmNiU0yScyBDx3AE/7H++UIdHWyLwcjOWXdxmVHuJExHVHcWWX3t8Yu6yFIbzSxtkbLbrSAg409YLuLVMToFinDhdfEssjk92otPcucpeaBizeqESdaBvTEIPibzJ0Yfvbf25mifAAOzpDfHRnAJPUBYRz0RYnm4KAe2HBJ1YcaZYu/sGMnimkvMuBsLm6cmC6R6AcMSvp8Ec+nH+/sHj1/py4GBnoZ5PW8rhAqAcPbw8tVbAHuIjGeLHxhr6fvbFJw0e9HHp0fRtTbqx32wsUR6h76+aR7ugZnc9TtPmHYU/+i0UxZ7CGkygiRWfVnq3rsDFnuZ9qi/HijEGeshqq0Anywbp3PXTjN46kNprRp0Od5j1vfPGQLLy0qeXkMBD2N1hZEVcQmIgwWKA+YB8xSNjAVIzAhRjYIDGMogoUzxujwO8efsp7l+5Pt97eIf0d6HqhKPu3nNjNLRr7ohxye+HoUwOehnE50uvUBy44OfP70Qyot9nQG/Ofqj0ORQsqA1C8nKnjUHTAgSlJ43kelLYAIuSQJ98LF04l/m4WiqeQFwQF6Bti3uMiIf5zL1urNi1ov4XvI5+f/n9RCEAUpDUhfulal5z8SjbN5+LLzYCaU+cf7yxp72vnaJy8GhL3qwfFyIMp/YuRLyZ5SJfn0Qxn2dgVw2HDJtvLHXxdnxcwSvzwZcx3zIjFYdrQ+A/ArqdiRrq0AkYnKyN1s87FDXTA2ujpz0SGXFe8ZebYgbsKfOrgBx3F1rmTRl0JnI8nYD3yRh8CeVWiZ5ZOiXGE/7N/nJpwhcxHUWmcfuX9MGJcfbj6DydxZaU4OfZHgVxW02RyOAFc5o0V8Mp9LDkWSdentbW6eLTyJJqWKHi/bEdX8uV+WehnVZxW2JXH5+OeRXkwAQusrW3oBCSgZwHIifyFF4FeeXyZGOfhXxpyb4+Yml1PCWnRy4ac9Xv2yb7vUH4v2s/gH4u9SyXtbXz5/nf0gCcwLROOm0srjlwkexXH+8cfN5eh1Rm3nXIu0Hqe1ffegxM2xG1dGnJgp8D4VnV+J1/Hvp2QcFkt1zPi6XLK1tdGHO16fD7Xeh4dfcwJACvq76CeBdc9XV1zdfHHYByDdpXpDFVePeNVwlcsr1QxHhAQR1xjK+XY11Ffg3aZCuC0Ag12je1XF63yvGGYHK/IkzManjcdXHZ/Y4bX1AVZ4UXS1+nAEka14QshHD511in7cfaQeT7ypgGtnXqWsDevAlIqDeAQlNzFd/oti9tcPnZ8N9cPnv17yK/qJ14Dd83vl0LdzXP1w9fV9It8MrU3+R+9fhXn1+fDS3B1+fTcif1yvqYVStw9fXXqt5esQ3At+6dQ3WDDDcHecN59ssraZDFr83T6b1dRXnVyzd/HtNzVf034GIzfPXLWNrebXYt1osS3kt7EL63BqxXaqaCt+bf+MntymeAQXDNbeE36t2XGa3RhuHeaxutwLdx3X18Xc/VNSLzcp3yt+neZ3zNz2e53ihLJIlzhK+pYrtsyaTumYi/XXegH/hxlhMNBN5rH53ILQNlZaXWNjaUhyOByiAQ2Z642+3bRBNGHLtbVMckHnRyEjwnhCzkdeaqx3DzLr1KcPDR4n+5gfLs8AU/B2ou7qLRlYn5lO0GHa+yYeSgdgPXdzUYu+XuXXy6z1EdxA2A0dNT7J7RP5hFAEzcxHWR2wfz3BC/PcP3DKfkcZdApFqLFaxZwvd/Hdgg/t7kBLsTD7gsNJ9TfUaEH9RrVvt+pHIB3QfVem7C7WKgSo3yN/c4wISKA8EPs8wNjEPfgKQ9mAMbaveBhW95w23GVx3z7ywZng46VUtkSfbT3WyENfyxBpIKRrIsD59dZBj1/YiP7bcDMOoPH1PeDw0iNGnCnw8VA7dxZ7N9mDRnYD6wS2n+J1siEnDp0VdOn+jy6d2TvQBQ+/3FyKXfQ4Fj/g8x3Bm/Y+DcMx0w/iHjj0jLLHgcGUdrHbj8xwHH+pz48j8oJ5bL7U/jwE8hkiJ5QDInYC2E+/26Jp48rgFaNY8bm2jzDgZXRETNzsP56BvbyoI+D3ewPody0oDnjF2AHh10oik9d4+Z1FXFX6EftNHyNT3estEbe8ntApNKYru8jjFxX3DKlT0kNHHMvhJuLZpiWIfk9SWWeed7gKq08Yp7T9YC6t7xMJj3YTKHJ2KzZ55IEU4ujMACcb5B1gxdYx54EH9JNF3f1t3V230AdPRfcvL9PXwDISCPIeCReSAdi9TRgeRF44z7PFwJgkTPfW33u6t6FNrMqoQ4cs/SIH5mWCDPOiWPr/JlekmD3h6cGC9xIJz45Hfyg+wa1Wse+1s8pi1Dxzev9ULw7kzYWA52hv9VeiEAfPpzzL6wxw8jLY4vULynV9LLTZC8eyHZ3SstNyz9S8m9n/XpSf9eIUeutIF22kAcnR68xfq+UDxflJr964Q+T86Lx7KMsOAFi/SU+dfv7SvQ60OQfA8cMDj6gf8J551EWUhljlBaPXWAYjL5dIDFaxcLnBkXC5JcY64toHYAbLESXy1mg4iqDjfY7/hXCklfyDLpZMJBNMAiLIAUkA+eb3itfggfKJSgt7doxURCTlA0b1wPK6+2UGA7lJ5TeUvlChABUKkGBCfA3RyVSuNm9ePe52m9Wg8KPGD79Rpwib3rCJvImTtZBjLm5Byb1LcpvXQcm9cxqJvxnHsKFvfapvUXcib1FKJvF/Im/YiAIngMKEJ4om+EyibzTJzs1b5xaTsab5Gqb17Kom/JquPNW9o5bb6iBiOm9UpqLvbxMJ1Sa5bwrrlv6Ok28b1XRmvoHm29WwbFiibzRZNvkpvsayEm9dyYXvLb8VrdvBZluZTvJ65HSb1Fk3/L5vw8kdaT9KNjvRt437yS8vCf73v2zyT8EB+rvpdlNJAfgEKFf/v06DA6wf7DuXBQfCSsPJWO7eJf0faXwYIDIfnwZk73vvZnB6QAciEB/U+C8CR+99YrQAO5zcyd+9Mpf8DTi7A2/VOhHpm4HAjSi6Qk5n6Zk/a3mT9QZXUy0fiFbdR79xa+sNCAk/d+4lxqAwn3pO+H9qg5c4dfNab1qtcDavvhtTEoDvl9Ym/mZib8E2PhoTYm+PNLrnv0K9VXaZ2yfLm9TOEkcrdsiJvRyFq2JvU1/O/oLVS0yuzzCz6chmu6gEcShvHH26OVZm5pHelxCUcMszDO5CG8Lw8hOF/qglMiQROIOqNOAUYPY2537AExBkmal70jXC6gA2dxH/PG4Asz4dEi0XhUIpyKMzJbVMPUw40DZtrlP+t5d9jSA4XH96oZAb7tc3hQk9/3gHgrfhRD+LwrSFEZLwbuwUUp9F18/SkrV10ytVnwBnbIr50q3QAk26WOlTLwcS9itY8nWfSA/9y8GD3+h11/WfYb3V6rfIk9WcjXKW8N89fuIWlPaTTcbpOGxsIef1bYwWxfD4U5h7iHsOgSsDEf4NAND1c02j37eax5J4UMS0+3smfY0LwqNgwASJ1wgkz/LaTkhQWJd/wGgiwMVtAJfF/99g/kT0D9G2idGo+k4j33K+ldgX5I9ABIX3pM5s7X1tjyEpP27ABfJZExvBfOk9VPE/SMrNiZ0XFI01kkfPpeiksGt5aR4zvDlTiksVhhrcHTReKI6WWkxKIsn3UwFqADovxvnu0Y3MLXg5bXmF+pg4FsNI+7fjT3j/U/Wk1NvMcLa+uB6/KhEjL+Dikcb+AYO5C+uwbpG0RsVxO5FISPPd1y1+t7Dv/wRF4AzKeNjBke+IihlxIZILojnw4JcUY5YBSCmFJBMOBUYM5LcszJISpASsghGOkBPEphTTB+/ZJcYhNZowK6/syL/k0neotF12AmV/2ofDMpnvwepccxe1gDm6CREAEpEfntfYe/4YWPptEdzyPuhtZFwK+JqRoDX+6gbpPRZdwqsPWwvY251n+fx9f1hmN/ZFzJ1A4/Ul3DN/gpHYsT/7pJiHj7ie/OczIWgr9lwjW2eOA1dn9XNiywPE/K9/pxuPxyEjm/zYg+vFyNaFUcFRa/ABhYHsytDk70srrL/lc5OCWD5/weU3a0gCcgSNz3nlXZL2AAOht/nqBGMFbgG9jCAWNqspVAEkZmgP5gHYIDJi/mHAn/r8km7i3hEQFIR+BuN89UBIAesLAAlpK/IFwO0wAiI0wxgHH9FqGACSkqA0aYPSB6CiswcwC8BdClP9kANPQQJnLBE4IVtikiQRuivSB1qMKQ6AT4BtOpowx9Bl1zntBR+GgTwIWBl0otIMskAkT9rvlVseAbPM+ARwB1qGPEazjT9e4pVM2BnIC5qAoDoAMlN6AetRGOP8w5ktYd0DiAC9KtNgJ9FqA1JPWB9wBPpLIke555uKN6iNNhLnjbw/oqf82glxdAksxdSZAVEcquCdn2JyQhJOPo3UCo45SC+BFSMqR5HgjRvINYMWPh8p9qMng3zrydScPoAVomWhTksOdnfgDghJk0lnAe9Nx/GGsTCDUQPYuICiyI39c/Du4pCPeEQhpR1OYPuIjesj1eAI6RgjvycgEiFcN/LKpGSOU8XVHkMThkJ07foGEyhupZlUriEFNuMEegbiFkfrDMMiK6MYsEHJOqtPxzDgpdMmvC8O4nidp/gKQu4Ev8qngsF+EIygasNABLdjOcNiHN89nh5EQhlJUZUDCd8wNIw1mETIbMMDF6eo6RzAE8Cmgfh0WgVuAFvs0dBEPsCYAEKRmnrM9tbNKEngM3NlnJgs3WoldNvkxEdgoMEVKFBNYEJqVHvmUEXRnP5vjOUNM5GV8zcPM9ZOqch6rrFcjXnys17kQt4QUHBQ7moDSLt+N5dt39GAeqAj1iSD/ZvFUWVnCC+YvwhnnnRd1wPoI9ekHQY0AwMovpIJO4ju5pAVI8kHk/sapiIMrnnFlWQVyR2QaM8w4tyDY6ryC6COUlvPtQNzcN0lbXOoCMpq+s3QJKCKQRic7gcooj1pSD+MhMCnAPP8e/ncRKZkk8nqohxn6lYwKQWlMIEnP9aQR6QpgfY8oJpOM5ulh9F0IRhgkKXd2fp6lKXPUCUBHYUkupbhYpH6CSGraDhnLGCQpvgMCFgQsbQUVcYQXNNs2n1gKTsqRy9i4R6MPlEDXmTBh/m0MCpImAsJJcAe1mSCaVvVcZgRvYYmFbAHhpiMqgRQD3ptfs2HoK9haBCw2iLGgagYK0UwS8F2gZk1OgW/1l7D0DgjtDMNvIUMhgZagRgef4z7PGdcPMuNlOhPxyNrhtBTsbgXQa39yNmODQJBABRhmcMIljfsgwjEsCSvEsmJvqtVge1NXrm6t3ZiEMlwVKDVfGmCQWpIx0aAUDx8Jc9egQDgrwRcFnwaUDJzi/tT+sTEH5lwIKFMs84DBQpvACQ9VyFMEtwTcJ3yEJMJPj2DZgmxsXAgOD1fEOD8PCuD8juODThoQkpwcLUkZuUMxgfkc0yJc8PQQkcawdTAlwTolUMPKg14Gol7wXAE1wWP5zQUpthjpGcdwWo1wloBBKJreC6JjlglgcDsO4scse5GWFXwdoBegcVdOIbMCJEhqUsgQ1sVgfYZ8jo+DhlCwlu4nc8+wRcEeQcmJf3Lh0xqr1gS1hlgzmPiQ6fkqoDKM0hdAfoD+Ab1IKYJuA6APsMc7gdRoFEVcMurh9kmg/gNIUVdVISKDCfiZD9wBZClAetRovDZDEgaQQsfhqpMhjQNygW8tnRlcQoQDIQ3vOSMoeEC9sgUsMj6Od82hrIC6rkv18wdUCGtn0AmwWJCgrvXxuwXlCSod+cH+AhC8oZVDyoWf1ZQvehOVABQnjvkEyLifZ3wcPwD4KJDmCJ/JOoVOdR/kJNuyBTF9OoPhOVB5DGNpQF5At+tmjiIDRoVYFahsiQ1JPBR/GOyBlZiIC7wcCcOHqccugSOCZoeGsWIcJdNZipMNwdSDRwdnENns4Fmjjs8nApwhoFmjEhoWRDq0heD1fAxIvuoD90AUcBICAAsLxlQlcfqlCgiFFhPAdP5Gbll1scoOA6IY5oUjHCoYQIUd9bGggSCH7JO6hol3sMlhxiCK51ytEZAkKrlQoEFMAJlFguOFxMMRKyAguiF1+pFEQo/B9I7Qs7gG/kJMlAoDCQAr7FuYm2QSKN+Fvpo4dWvkzC9UMF1Qujv47nttssMs5dg4gDD3/j6RjDEp02oVFCi8Ms9dYOqBXjL54mYHGNkyPZdo6lC1BYUDDksvDgi5CHcAZo1M+7gYYMwQtNChipAPwPeBpsGw9xYUOQ1RtZphZlwlOiBHtksPCMFAO0A8wl6UPgPIQH5s25AEPIo5xHACClhWNpHs18nfp1gH1jm04+jIRRsMFC4LGM0vWhAkaYe/9CNi/gZYi5QVhuNUDIc8w1Nhf8bZilseuDHCQ7mz90obT9LvvT9tAQ1R8KBjMRPq7NU4fb0M4beQs4SrC6YWPF9ABGhG8NLM9GpMNMSKhkwLjOQKctZcc3CWp69G/ZCRuHAl4GSQUAXqhCMN8o0UIJwMvvTEtTsoZcENpcFCAftBhuKh4hkd9byBd9WBld9JgFQxUMgnCF4WAAMCLIgTAR8pw/PQDE4Wv4f5Emdo4bXDAMCsIlAaoC84RoDMoUVCXNv5DkAAYCLFNnC6YdIx6AbvDKNnvDhmhwlePDSActgkCAZLX9W8MC9/4REkaYrqhSSmUwGgRwRCeroBUgR2C/4UWQMum+8/4DVZ/0J/Cb4dZCiThngmTlUAWYVfC3/kDC/ouHDCEUDN3Jt9MMZlpDxCBTBOLofdufMEoj0lQjeHN08ayKhCmTlC1GEaIdKLu9MNgi506YjjQZCIwBFcAwBK/m3B/YRwjrTqCEH4Q3En4RHwj0kwi8DigJR/Moi+EZ70evM0DkuoOszYReRbAKBY6EJDk2krP5xmh8Be2JRJyLoiBRFig95YTkCQ8BgjvLn/JNFpIBcEatc44TgRVAfQi+Qd+lOfMAoPEeLB1EeYiC6okcmIW4iCfjX0C4QPFOenQRK/G/EoyGAAQ8Jeh4kYnYrDJ8BX4d4F+AYJCayAoiKpkoiQaGki24H7NYyMUj7br/DooWjAvzCYiKRsIBe2Kz0HEb9DkyM4jgyjiBsEXu4gkenDDhvENfEcUiUQvUpX/urDaYTfDkApb92EdMFz4REjoNsxtdQTfA3MAkichvkjjyJlMikQsj0kQzRykepNYIYYiDAJwk3QZiFREa3gmkQHCWkefDMEe0jIkV0iVhAcj8wD4ilQcmJ+kSMEzZGQiv4bciesGEiMutMjvIeXFxYu6DykYkjVfMsikAu8j6QWsj/ESUifmpAE5/Osi24NsidkX9CYochd8KAlDE5mIQAOv6B/4Cgiu8HL1tQQUjfITVMq4Y/Jc4XhQztjMj84RvDC4ZmgiUXt0EUYpQZ0I/hCWh79ZQn8ky4g0hApE2DniCcjA3jijzkS4isEVcjr4Z4jeYopsJgivCOYcTC8/A9NjobC04Ar4ixgohRnkUMjxwCMjVrr0QWodypNvoEACoUdFBggkifmnXFOkUKjgka6C/kZiEFUekiksjgjjURch1UdSDLQXSCwDHqjLUboxmQbxQ8+kL9wHopRZsMVZaKOYA/EIMA8+NTAvEHYVIePPQ5EKSB/smyj9/oYiYEbRDgksL0ciBkkFEI5pgVGcgpQjMgjcJ5h7MGkhqgAVVUSGYgZEYxQsKFgNfUaylBWvUDevusCZfAN9kVhSsXgigA7ANKjRUazC7Ao2jm0eMEHUe6CkXr0xFZCi89AZ8hRYQ2gpsKABHeihdxglHDY3HYtc7gHg6zvf8C1kcCpWqQdAgNi8ufnocRUROie5Ni9p0TtcN0RaDQUftQV0dJRTUZP8PSB5wZ0cK9RYTngTeuWCA1pvJOFAiDrELnc50TSsfoacicYU2Q2YAWC27puB+Er+hvQV8CuwKyBCjiEBaCAoNEYScQNATIjgNm/M/4p3DQYTYRRYN1llHPgZZ4VswgOvyBvnLFhVzNjCFAiGMPQkyjpwA2DGYPhD4KLjkngLphmskWjGYXPgvEKx9I5nQhmfl0QD2vEM6Bn4jFUcAoj0XWh14R0MqUabCtRl+DVCGzc9YU+tqIZ8Az1rCjx6mn0dBPyFK/IBsuEdlcF9IDoD2gzsVkJ30S4U+CI8ACjoKEbsOBqE8jDK5Damp8AAACQ4wAFFEMMpYvaLwaA5GRB+yYzGZYfbAwEVZR0Y4+GRVWMj6Y1XzY2MuEmVFtqSYqwxegvfBTtX0EYw6DxRIsZEkbSQRmefeweY2cbKYzEKhg64AeLJQKnbD5iqeWTHpI1TGukTixQrJQJ6YigBHbLTF+YwCAWQ2YjdJZACbUfey+YiFHj1RpCLdCrTQogCg/IzQGbwr4AlYuYhPwcrF4WeVgM0H5reYjYbaYjwG6Is3D2QhKKHDH5rKQ0+DXrPzG6MWrG/BBrEWcGJSogLGCVZTXqHbBWxsOaXJIfdLFwoyrHaY5tChAk/RjWJ3qWSK0ZsCLZEe9Q+4n2CTHVYyeq1LBbDz2H+RofMeRbI3bFFY/bEU7bADHYiiaEcEJzHiU66+BLTKSYpwyjAEDEpNQEBUJeezAAKbHVYqwz7YvcQiOQFJfY7bFhnUQ4hAJ3rnYu7FBAB7GSEY3AvYhmjQ4hJEpYX4KaqbHELiWZbmoIHGvYmHFE486LK8TMhx4B7GhXZHHyY4+ScIt4bDKDR4+rCFFetbTH9ouBAkY4cGjNSnG6+AnEZYvnEQDfHCGKF7GrY3iiPQq9baYrZERiT1GGIuL4IdT5R9gRjCpcO2H+gjGhjALZJXOcHDiCJRxhA2ugkEd5zdAamBFLc3Exo5pG5A9mGEDZygQsCtEsYtn7VorvC1ozBbb7Gsjto9SEMw4+S8A69FV6McR+4qm6orND4OzJmIAyEnghOSo6bAu4gz/HYE8XGshlKeXZM0eTrAzeFo8YIj7PbHogp4jOBBIXO4j4PPFM0PtH+GJ1w4wYaIxTDjBCEZgAxTPkBYADLC149NZCiXDAxTG2jUwJvHfTLARpARUDcnQjLBAjOArNX8iWyRPRFyND5X8GPFdNeFpefLkjCAAHrUUfAKyxSsHHAr3HTBFoAL4dQDuKVDzbAnrCNrdfEKgLfFqdPpR0wDfGH41fFAzaYCuYmTqIIgXpvAS/GwIfnredCZFwBfYFHw1HDJ+Z8T1o+xx1JIoBgeUBGn0FbYHtXE7fbA9qCsDEC/4y3D/4o/GwBCebaBBMHHyJQKqIjZTNkQjIuYgGSL4+xx0ALQDp4hA58bA37FY4UilY+YidY1tHEmKnCiqRA74EzJGEE9rELECrFJZPz6oeN0YZwWnDm4vpj7gLUBYEkgBagU0JCwb6GEZYWILwKRrdbEyqaqWZ6obYTBpAdvyTEaR5aYPaKiHGGHPw5MjcHEshtVHtGqEDGa4o7X4Uo3jGxI005tYsrGQACrG8qF76U0N77+AxEDUE2eZEEjrFGE3JH/w92Qm9Z/zY0S2SZma4DZGTQBY0WmLOE/UDM6blFSrLq49lcbpCE4ywiEtqrMRJQrMRFgB6VU+i/Ba5EhALgn6bDGbnoIcEwRQQnSw0Iny7PSqNtSSF7gwhLQQdIBp/XJbLSKbhKFa5EJJewloImsgR4dIkcgTInlw1oQ9yBd5BE7HAhEihrZE55i15TiJgAWXTBYC2ShEQYBklZVYQyfsRbgOmYWkY+S6PO4GIE0Q68qZWHd9JAnGwNFrjExiGovJYBDo5AAjosdF2LSdGZjadHcqS9GRLH/F+mP0EEIr1rHEv/GUI7lQR4NAmn0NAmmBMVrydBLHZY66bJY/AbbERLE5YzwG3A3fGfE14meA3w7XE8dE9bVj6D1M3BjVNyo9yFEabgMfHc9IzpP4gRFOYas5WwHXKn0eYK3g98GwhSBQhDI6EtokgCUzJXEYzTnEVKEAGc3MkFv4nHAf4qOGuWV/FEnSknMiZtCAoiYn2OCPA+4okGq+Qd5mMXrEmuJsCBAT+K0k0Ekf452rnoPrGvwM5hjBKTF1EwLF8AYLE64+djjo/dFmou5HCtNnEQpNYnSEb7w7ZMTFM4UkBVwKOFQUCUk+7LUDrUbrZSkpLqOkegmhTVpFRBGqwGkwYLLBcTEmk+XZmk/fAWkyonWLXNb2kpwzLPSyQ6pcdFSY40mmk8MGukrcAqAmu59PYEkHAmUGC3dY7YUQ6HRk2zK73ejEH9RVHsBLhixgrcYhtPf5/EqgYAkjMlecBzFJY74m7rXDExPIBIQ3emGTRfMmaxNjHHBZ4lFk7voFPGW6qkssnRxbhGtktsnPVMeTiYszHtxDskxHFsn9koA6orC0a4xXslExJslhPIMG1TceqGkycmtkmKZSZasmL9OXFDkjhhnBMKFrkr1FbkwWgCvZclS0ZtDqYn/rcXD8EkIaWjyHaQ6dHLLQpAoDYB4f4HHA0VQSkw26KMZJG0ke4kMYzjAcBTiz4UE8mshSBT2k2HFnMWbG04+bFPk8LFCbdUACzYClLdc6LliKqIfYh3qO9e8ksZUNgNPAImOI7cn/wmU7ceYcDYYngQsnRiZwWWQnewlzCe9RQk24i/F/oNqq1E4QlZEtqpcE2Qz3hQjzHYzklGUQ3g2yA8IQUhgALdaFFYhACiGg34kvE3Mnd9E0GsUv+DiPNjFHIDjGDImDYRY08nBtGiipDRq5SUjLH1kr4mNk+clsZFSklIrhJyYwklZ3VdGzI8ZHyU4YQ28FpAHordHSUCKano2WBY4synvMegFa4LjGD4JrFPwggmKAt+E5InXhmjPr7lkrxD6Ayyl1oclGPwglEGUKwl6AgKH8E6OKSAmAgXEyAlXEvSLrTOZL6A2AIUIghFGRJPFMRKYm74977V6dX7yI/H7+UugGpU3KkBA2AKhg0qkYgTW5FUt+EsZeylQEm+QTZcAknE//GsvMSk4gGNa/NMeBx1FREKEuLyn0DeyikwyHhUyyHKAu6iUI2/Y8YqqZ6Eye7j7eclnMXqnaI44LS0enrzdeCkm4mUhb8b6QdKTpyqyHGBO9RamH3EJEthE1IMQz0HddYhFdofhG9dHcnkkDyKHUtREpQ26kJiJyGL9XgjU1YMgtIe3oXwaCkVaD7EAUDrbtUjqoEIlLR0HDMCRHGY5ZaLhgoUsymbCcf4WUqqKCtNHGO9ZykKkjABdo2yl1UxxhGQhYLi9MEmoeGknkkukn40xklY0mxg401v5nwNknHQ1CkN5NJYaE4+THbHDENEgSnqgPfGjwA/F1iI+QxYoR6ZYh3EnAUA5DU8dhZI9+GT8N/Hr8cwGY4eUlTUrQGTANCmYUtIHvLZwnP+TAAdmEyqKOd6SCLQcCjjFHDyCbKrrgMhD+E1hxh4aWyAfFWmk0V2a8+Jmmq04wANElQmW0gurJEqZZt5dCGb+e2nZE3Xzu0zHC8+CiHQfVH4ToEIadWKuKP4cTAwqYsFKQAiGjA/La6gd6Tuk9Ckw4dsmsELL774zfFc0y2KA6Zml6VH2rpOLD7dkuwH0qL2lCAaK4/fIwxJBAfFz45kT5U+xwxMBSS8QGfGsAYsArNL1oD43EAHQhWxl0+ulpwCulTAH2o10xSSfgJvRetYvEF47Dwd0vmLd07ZC90sWlEnVurYACIEKkJUg2AFUhqkWIE2AVpw4wYekLtANAJtbDzCvEklwAAf5etQunRSH5rYUU/F1iPUDYEr7rYxIbBiOMRglpFwbk9IkI1Q6kS2vcHDcvKraIEisBuwRzC0AcwCwEuuo64fGjLsABmkMDkjXoWQAf0uuqHYN+Sp0+bowM8+l9oOur/45bZNUozAtUyhGYbIWkrUEWk5I6D4TUyYQy0lrGMnDl5d0mLBTAZagxoQQq2EXuayoza7UM7si04N9BPos74MM2SIcreSIEkas63wGZBT2bhnUMtAZ9SfhkUYWbDCMmZDJvfZQnoVjJKscBksAWQAUUWWAkkLhJOAjyJ6QhSqifYam4MsanT0hkRj9Y5CnIQqHS0jKGhUhvoVtXl4K0o5j2083HCHTOmY4GRkzE7wEJ43fEOMw+6JXbBkjUyKk6Mj5T4+dWGLEoxk6E6akjLEhlv0hQBQMsBnl08hlTfVUGz4yJlV00/giqeWDH0n5o50zJxOuPgnm022ke03lQ9oHdz7kIfz5wY+kpYQo4oCCvihNS+l8wdviqPOwwcgIMiJE5XG24x348o99GNMvDGhQRpJnbaR7yYdhZYICxaf6WZJ5YD+BlxEt6tMtf7RGOBFm0F4Q5JdhSeNQoLPESGGZAg6JOEFB5Uwyf6D4MOKCM/WDcqJQJ6oefG4lEAaEoSYD84yAZZgMRiJYp4F2sEqyBaP0iW4F8aaSWeEOzAW5pwZbpctGjFCEE4AAnXDJHGCOAPYVuA5hHKjX4oukD7cDA5MnzIC8HFCvwOmrgs3u453dToArGLAfMxglU/cKbGMmJEjLHcjZ9f5JeIHciMEnZnMiHcjADCJhgDI5mcEPZmEsw5kS4+vY5sdlZPIThmKRalmcrc/74s1rproHF4gs+UZIyDZlm4Tlnss5jg+onAaEcPlnZY2Fjm/UkmYLB3Hzo3gIbibsAbiF5lnIzIKrQzEkQsYFG6xExlZQ2khoxA9Fs/BqEmkE9EL/ZUm+kKdAaspUkd3IGYjQisJOydBjcqV6qvwA6hSEO2Q9cXVlWgt0A9DN9EfotICjIDH53EHGh8gREBbJaWacIcmBzJAW4rAOWHQY/6FgZWLBlFEbJLAKeEKvR+B+mfUoes+LCggEggLlNyqsABCkZVEgj2lOwCTEDMBaNG8qUVA0p1oSjoQjQxFMKd+ZKM6z7aHGpBAMVOET6UkwEyH9xtEicCJCILz6AItQ4tPti6WYtR/6V2jMpTTAtslRT/aLNlF4KWEesn6RGZe0qgNajFwQ9mHus29BxMrDanArjbR1NMkmkM6H2IBdkRIJ2kukbdnII4Mgj4fdlxM3LSZUo+jBRTmQIErMkrIY9lBkI9nFsg9nKWN+5nk59gaUGtlz5AjKKMFah+kywzC3Y6gzUCzgk6E9Qy45bj+sd9mF8M2rk0/QQZ9ejIZIk9ROuf1jHUH9n0ZK67Ac6wbLvcDkcpL9nQckwxwc/9nIaJDk4wDJGb1QCDIcz1wZI9DTHUCV7tCcHF/s6wTPsfwyYcz9m9RMPCXoGNyhrOvjfsmDnkcujnX0Her6CANAiMO5oKELjmOGXjl2ApKykc7jmGTOjmvUpnoKIJjmQc7DlkcmTm0c6+jpuSFy+oedjWDOt4u7NXRYc8mlSc3DnichLg7AQjlic8HEgciUjI8S+qKc9b6gMIpQqcqTHwc6+hH1LTlWc5kn008kj/GC952cqaKic39lqc/cDnGSUyUmQEQ9GNvQwmXzn6c5jm9MALmwc8TmjAckwOgMLnuc+IFgqPzlG+ROmeY0VKmGOID+cozmBclzngaR1jSc2zKJvEwyOCSznkBNjn0ZWNyybOLmFchLlBc6dJlc1DnCchQirk+xx4JHo6FDMFQkJLz5kJc5TUwS5SSFcMnskC0aZc3liOctrnicx95NcnjmWc6waEydoBTcwzmnwQLnhpY6SzcpbnPsR7ajyNbmNcnDmBchfKM8dtRocvbn8o9pGHco7lOcjJGncjCDHVWjkec8kihXG7meMGbnGcnGBFeULRleIfJlcjJHIwY6gcTXFzHUC7kPMU2nEcbbzPNWLk+sM5gnc2Fwe3F7m0kCD71qaHmCtAzmNchHmpeYXh12GS7I89khrId7kg0HJRGmEJB0dIzkitfjI6HYkSyZAQBf4/2Z8+MLJ084poqieIJx3RpAkeTeoQnLBic88EByc0/p1s3bkPMTt4cgYnmkMLjlFc/DnfCX4Si88LkE87FENUPWDi8jnGKY0EK1cz1z5rbGnNyEo5+0O7l/snyka8p1IybREKlcXXlYAfXkVc5ATtcs0Zdc6OrPQ/h7sAf7EvQ8H5U1ffL91HqSsgZXn8SMsFxyEwxezHk6xBUTIq83ihm8gER50UTKW88Hks+WNj1MxSgEAIkTrzKWH6wNPawYj7B0YgmF5RM7ai7Fk4kYiilNM5+T4/Hn5IyDFmivJl45sV2KCgFBi1UHNhARYGLHBOvmmBc36ko+koU/KmDYs+FnY7RglMsj5nvMoWDm/P0JjNHcjHssJCLsnciCshj71oMxBlo3YDosikkfk4GnJkojaMYkn6is44His2rAk/cb7EzS9LUUSz4780mY7kFjayUrilH841lugayl6snrA7kAaFpjO6G38i+ZDQ8flkUZM7os5p5nnN/nIpc86laeUFSBI/mcWc5lQBeZJ7YQ/rUoIAVoCYflt5JGl27dKiIg+FbFoDBYPkwVrY3fu4bfQTHibGhkIrRAVzzFlDmBFAUIbRlYvTNz54ghig5sQgUzzJAU1IKaLkC6TrufUgUWMkuYnZF4GYhKJB1oa+wU0HG40waSjX2d9JIA5Mja9cOqL4NTpUw+3FpID4GRIohl8Y4rEcCqsgfA6UlFAS0mvM78IywCQUosylEzU4rGrU+ACKChgVBw2PoLtUg6tg1Pqg/IbHRtb7kqC/fpIZHnFiCsbC6dEMZgycAEkC6iFsLaeGAjD9hTZZQDu/Mi7coxI6JMw0gkCwqHCw385nbXChIgn/q9NXEmTAkfB0CwqEyxMKZSEaIUBCsoG/JIQHnwhVmT4dKjCYsnmiYpcEYSNACcwkmHT+HYkxtImFcwouQ7oxXlBvdmHCkK2HBUxRGqs1rEKHMuJsRAAh2AHQVxnJ3EPI+gYoAHElV9IylyU+IaDkszIkrKLR1hG1Ens7+TWo15GjIqAnwbB45qMtYblwqrFXArQWEM/oVcUkroJDOA68TXXAr+ZVk+Q1FmhfTxjnrI3ygvMV5OgZIHnkiI4KHK8kb4aGkJBBqZJiL+4b2VAUy+IYVGGP76wzMRHJYcYabZIbHWCnoWBhA7g9Tch6DrTIWzgTtZtJJDJ4deQU8s9CmJTCmgfAtn7Z9REW2CzIWJTa5HDwvQXk8uPpB/CpJjAUoUkwtGmLEADnXIu1FckPGlCk8EXBYZAh/pH35XEHKEqhRCiEtbG4gIyhEWgEWaMYV2FgAeWCSwwsGFBM+GZBZLgFCqVF2LE4wXIzAAdIr9TlEvdHFBeuHYinIVkk2ZkHw/GletMkW40w3r403pFdCvkmFBHEm6gdUXwgykUMk+rrLDc+FTC4ZHv/ckWTAsYI7QoTEKis/bKtPHqkgDyKfyQYJ2i6Opj/QoKIUcUnuiwMKkIy0WM3a0WPxW0WZDejl53PIGDBA4F7Q8dGLI3obUw8OGwk9oBOo70WJ2VM7ZMvlFtIyUWCo6YXCo//H1TCPCXUz7RGo3MXiwfBG2Q+qY0Ix2YgtXxEPU3kmUSb6YenLYVwtQ1FUgltF1ilx7DPW1bvC7+Sm/N/yWSb7laIo6nxrS6mLE46lYBAhYdinRGfAvRE68eWlH0RWGl0uRG9i/H4WouFGG8Z8kK2aMlyg0lhrisM4mCK4VIoCGm3CoLBnspJEOijm5Oij3729QkV5+CsGpi7OA+1PpGwo2MVpi905sxL5HoedvgLClOG+ih8Xj1DqSgWDnqZobTEOsjVER8EeF1/TBbWmeYGtC0S7iI+AFSIuFpaE9xGJioYJSweZEw4mybWswyGvinSmcU1ALI4qwxgS6kG4nHBFoSw/qYSuMW0hZU7dM5QIwiiMEuE6RwJdJSi6grpnMLSHqkseU7KAKjgQSglbBJdJ78wTnoRJFTxKJWfxwtKDbYMvCUASljYDY1YUkS0VG0rHsXfyRcUuBHCXPMPcX+Y2QnASthKE4hSXjBZdaPkqMWYLGi5kjD8GPCgI7NTV4UJHT4WEJUg71gook5/A549dWnoxtbTFtgxKlUUsUnSSrSVigiZQGUUCXEihNIvY+cUQsHu7PCgmnO1WyWUQ+yWFEmP4mUBzo6JKOFU4NcX6IyoUNM71GQi3uh1EhiVrdQUXndDDaMQriUywSpHoUpDZAkUciACpHozi90FnpH37ciyJISEy4hMo1v4xRNAlwXSLjxwGU4GI1r5H7ToV/NOOoe/fqnEi1QHKSgHHjo/5jJ7MZ6G/XhwxMd4Dm6LYUagoYbp41ykNC5tDrUGQUoAOQWMSlQF/JAZZ4ooZZrS8yGbS7aVrdFQE68PnyrSw4VmQ9ahaC3aUpiUliqCgJmy0n9y3S77oKCr54WS3u5WSxrHLxQ46PrRaaDTcnradVsSGw8yCVAZgVRMESRtgoNo80kESiPDVCTdO4U0DLIWPrGh6t4EwUzihmBkXcvgPmGRA1ChYHhEQin30cqgpEmAgj4TvpyubrbCzScSJTAmWtC1AmksemVcwBp7K6QX5IYFwBAAA";__obj__1["included_libs"]=["lz-string.js"];__obj__1["included_editor_assets"]=["ext-language_tools.js","ext-searchbox.js","ext-split.js","mode-css.js","mode-javascript.js","mode-json.js","mode-juno.js","mode-markdown.js","mode-plain_text.js","mode-sh.js","theme-chrome.js","theme-cobalt.js","theme-crimson_editor.js","theme-dracula.js","theme-earth_tones.js","theme-gruvbox.js","theme-ice.js","theme-idle_fingers.js","theme-juno_light.js","theme-katzenmilch.js","theme-kuroir.js","theme-solarized_dark.js","theme-solarized_light.js"];return __obj__1;})(),children_declarations:async function() {
    return {
        user:{
            serialize_with_image:true
        },sys:{
            serialize_with_image:true
        },http:{
            serialize_with_image:true
        },html:{
            serialize_with_image:false
        }
    }
},child_load_order:["sys","http","html","user"],children:{
    sys:await (async function(){
         return [{"meta_for_symbol":{"core_lang":true,"description":"Given a quoted symbol and a boolean indicating whether or not all namespaces should be searched, returns the meta data associated with the symbol for each environment.  If search mode is requested, the value returned is an array, since there can be symbols with the same name in different environments. If no values are found an empty array is returned.  If not in search mode, meta_for_symbol searches the current namespace only, and if a matching symbol is found, returns an object with all found metadata, otherwise nil is returned.","usage":["quoted_symbol:string","search_mode:boolean"],"tags":["describe","meta","help","definition","symbol","metadata"]},"describe":{"core_lang":true,"description":"Given a quoted symbol returns the relevant metadata pertinent to the current namespace context.","usage":["quoted_symbol:string","search_mode:boolean"],"tags":["meta","help","definition","symbol","metadata","info","meta_for_symbol"]},"undefine":{"core_lang":true,"description":"Given a quoted symbol removes the symbol and any definition information from the namespace. If the namespace is fully-qualified, then the symbol will be removed from the specified namespace instead of the currently active namespace. If the symbol is successfully removed, the function will return true, otherwise if it is not found, false will be returned.  Note that if the specified symbol is non-qualified, but exists in a different, accessible namespace, but the symbol isn't present in the current namespace, the symbol will not be deleted.  The environment is not searched and therefore symbols have to be explicitly fully-qualified for any effect of this function outside the current namespace.","usage":["quoted_symbol:string"],"tags":["symbol","delete","remove","unintern","reference","value"]},"*namespace*":{"core_lang":true},"pend_load":{"core_lang":true,"description":"When used as an initializer wrapper via the use_symbols macro, the wrapped initializer will not be loaded until the from_namespace is loaded to ensure that the wrapped initializer won't fail due to not yet loaded dependencies.","usage":["from_namespace:string","target_namespace:string","symbol:string","initializer:array"],"tags":["symbol","definitions","namespace","scope","dependency","dependencies","require"]},"symbols":{"core_lang":true,"description":"Returns an array of the defined global symbols for the local environment.  If opts.unique is true, only symbols that are not part of the built ins are included.","usage":["opts:object"],"tags":["symbol","names","definitions","values","scope"]},"set_global":{"core_lang":true},"get_global":{"core_lang":true},"symbol_definition":{"core_lang":true,"description":"Given a symbol name and an optional namespace, either as a fully qualified path or via the target_namespace argument, returns definition information about the retquested symbol.  Used primarily by the compiler to find metadata for a specific symbol during compilation.","usage":["symname:string","namespace:string"],"tags":["compiler","symbols","namespace","search","context","environment"]},"compile":{"core_lang":true,"description":"Compiles the given JSON or quoted lisp and returns a string containing the lisp form or expression as javascript.<br>If passed the option { meta: true } , an array is returned containing compilation metadata in element 0 and the compiled code in element 1.","usage":["json_expression:*","opts:object"],"tags":["macro","quote","quotes","desym","compiler"]},"env_log":{"core_lang":true,"description":"The environment logging function used by the environment.","usage":["arg0:*","argN:*"]},"evaluate_local":{"core_lang":true},"evaluate":{"core_lang":true},"eval_struct":{"core_lang":true},"exec":{"name":"exec","fn_args":"(command options)","description":["=:+","The exec function spawns a subprocess using the `Deno.run` facility.  ","The command and the arguments to execute is provided as a string or an array of ","strings (which form the command), and returns a `Process` object which contains ","details about the spawned process, including process id, resource id, `stdout`, ","`stderr` and `stdin` streams.  <br>For more details on this command see the ","documentation for Deno.run and Deno.Process.<br>Example:```(text_decode (-> ","(sys/exec \"uptime\") `output))```<br><br> "],"usage":["command:string|array","options:object"],"tags":["exec","run","process","subprocess","command"],"requires":["is_string?","split_by","is_array?","is_object?","add"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"system":{"name":"system","fn_args":"(command)","description":["=:+","Given a command string or an array with the command and arguments, the ","system function calls the sys/exec function with the command, collects the ","results and returns a serializable object.  This facility provides a simple ","mechanism for running external commands and collecting the return values prior ","to further operations.  The returned simple object contains:<br>stdout:string - ","The standard output that the evaluated command returned. <br>stderr:string - ","Any error output that was produced by the executed command.<br>success:boolean ","- If the command returned 0, then success will be 0.  <br>code:integer - The ","return code of the process.<br>"],"usage":["command:string|array"],"tags":["exec","run","process","subprocess","command"],"requires":["exec","add","decode_text"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"request":{"name":"request","fn_args":"[]","description":"Requests 'run' permissions from the virtual machine.","usage":[],"tags":["permissions","run","process","subproces"],"requires":[],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"compile_executable":{"name":"compile_executable","fn_args":"(options)","description":["=:+","The compile_executable function generates a stand-alone executable from ","a source javascript file.  This can be useful for bundling and distributing ","into a single runtime the application logic and all dependencies.  The output ","varies on the options object provided.  If no options are provided, the ","`*env_config*` object is referenced for default locations and names, and the ","current permission set is used for the emitted binary.  If successful, an ","object is returned with `sucess` set to `true` and an `emitted` key indicating ","where the binary was written.<br><br>#### Options <br><br>emit_as:string - A ","path name to the location to which to write the binary executable file.  By ","default this value is sourced from `*env_config*.exports.save_executable`.  If ","that is not present, then the file is emitted in the current directory with the ","form `juno.{*env_config*.build}`.  <br>permissions:array - A list of ","permissions to be allowed in the emitted executable file.  The current ","permissions can be accessed with the `(permissions)` function.  Include only ","the key names, such as `read` or `net` that you wish to retain in the emitted ","binary.<br>additional_args:array - A list of command line arguments to be ","passed to the Deno compile command.<br>source:string - The source file to be ","used as the bundled image.  By default this value is taken from ","`*env_config*.exports.save_path` <br>target:string - The target architecture to ","emit as.  See `deno compile --help` to see the full list of values ","available.<br> "],"usage":["options:object"],"tags":["compile","build","image","save","executable","export"],"requires":["permissions","is_array?","push","pairs","resolve_path","*env_config*","join","flatten","is_string?","not","blank?","system"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"stat":{"name":"stat","fn_args":"(filepath)","description":["=:+","<br><br>Given a path to a file as a string, returns a FileInfo object, which ","will contain the results of the `stat()` system ","call:```isFile:Boolean\nisDirectory:Boolean\nisSymlink:Boolean","\nsize:Number\nmtime:Date\natime:Date\nbirthtime:Date\ndev:Number\n","ino:Number\nmode:Number\nnlink:Number\nuid:Number\ngid:Number\nrdev:Number\n","blksize:Number\nblocks:Number```<br> "],"usage":["filepath:string"],"tags":["file","status","information","io","filesystem"],"requires":[],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"is_file?":{"name":"is_file?","fn_args":"(filepath)","description":"Returns true if the provided file path is a file object, otherwise false.","usage":["filepath:string"],"tags":["file","status","information","filesystem"],"requires":["stat"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"is_dir?":{"name":"is_dir?","fn_args":"(filepath)","description":"Returns true if the provided file path is a file object, otherwise false.","usage":["filepath:string"],"tags":["file","directory","status","information","filesystem"],"requires":["stat"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"is_symlink?":{"name":"is_symlink?","fn_args":"(filepath)","description":"Returns true if the provided file path is a symbolic link, otherwise false.","usage":["filepath:string"],"tags":["file","directory","status","information","filesystem"],"requires":["stat"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"filesize":{"name":"filesize","fn_args":"(filepath)","description":["=:+","If the provided path is a file, returns the size of the file.  ","Otherwise if the path cannot be found, or the object pointed to by the path ","isn't a file, `nil` will be returned.´ "],"usage":["filepath:string"],"tags":["file","directory","status","information","filesystem"],"requires":["stat"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"rename":{"name":"rename","fn_args":"(source_path remote_path)","description":["=:+","Given a source path and a target path, renames the source path to the ","target path.  If the operation is successful returns true.  True is returned ","when the rename operation is validated by a check to ensure that the target ","entry is present in the filesystem (either a file, a directory or a symbolic ","link).<br>If the source file isn't present, or the target file cannot be ","written, an error will be thrown. "],"usage":["source_path:string","remote_path:string"],"tags":["file","directory","status","information","filesystem","move","mv","filename"],"requires":["is_file?","is_dir?","is_symlink?"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"delete_file":{"name":"delete_file","fn_args":"(filepath)","description":["=:+","<br><br>Given a path to a file or symbolic link, the function will remove the entry ","and return true if no errors are encountered.  Otherwise, if the target of the ","path isn't a file or link, or the file doesn't exist, returns false.<br> "],"usage":["filepath:string"],"tags":["remove","file","status","information","filesystem"],"requires":["stat"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"delete_dir":{"name":"delete_dir","fn_args":"(dirpath)","description":["=:+","<br><br>Given a path to a directory, the function will remove the directory and any ","content and return true if no errors are encountered.  Otherwise, if the target of ","the path isn't a file or the file doesn't exist, returns false.<br> "],"usage":["dirpath:string"],"tags":["remove","directory","status","information","filesystem"],"requires":["is_dir?"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"list_files":{"name":"list_files","fn_args":"(dirpath details?)","description":["=:+","The list files returns a list of DirEntry objects for the provided ","directory.  Otherwise if the path isn't a directory or the path doesn't exist, ","it will return an empty array. <br>If `details?` is true, the full `stat` data ","for each entry in the directory is provided in the response. "],"usage":["dirpath:string","details?:?boolean"],"tags":["directory","status","information","filesystem"],"requires":["is_dir?","push","stat"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"mkdir":{"name":"mkdir","fn_args":"(dirpath options)","description":["=:+","Given a string as a path, synchronously creates a new directory, or ","directory tree.   If the directory already exists, the function will throw an ","error.<br><br>#### Options <br><br>recursive:boolean - If true, the parent ","directory structure will be created.  All parent directories are set to the ","same permissions.  Will not throw an error if a directory already ","exists.<br>mode:number - The permissions for the created directory ","structure.<br> "],"usage":["dirpath:string","options:?object"],"tags":["directory","tree","make","create","folder","filesystem"],"requires":["is_dir?"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"ensure_path_exists":{"name":"ensure_path_exists","fn_args":"(fspath options)","description":["=:+","Given a path to a file or a directory, `ensure_path_exists` will return ","true if the file or directory exists, or if it doesn't exist, it will create ","the specified path.  By default, the function assumes that the provided path is ","a path to a file and so will treat the last segment of the path as a file to be ","created.  However, if the `dir` flag is `true` in options, the final path ","component will be created as a directory.  The function returns true if the ","file already exists or was created, or will throw an error if the file or ","directory path cannot be made.<br><br>#### Options <br><br>dir:boolean - If ","true, the final segment of the path will be created as a ","directory.<br>mode:number - If provided, the specified path will be constructed ","with the permissions set to the provided mode, which is usually specified in ","octal, such as `0o700`.<br> "],"usage":["fspath:string","options:?object"],"tags":["filesystem","path","create","folder","directory","create"],"requires":["is_file?","is_dir?","is_object?","mkdir","add","split_by","join","but_last","not","blank?"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"copy_file":{"name":"copy_file","fn_args":"(from_path to_path)","description":["=:+","Given a `from_path` and a `to_path`, copy_file will synchronously copy ","the file located a `from_path` to the `to_path` location.  If the operations ","fails, the function will throw an error, otherwise it will return true if ","successful. "],"usage":["from_path:string","to_path:string"],"tags":["filesystem","path","copy","clone","directory"],"requires":["is_string?","is_file?"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"watch_fs":{"name":"watch_fs","fn_args":"(paths options)","description":["=:+","Given a path, or an array of paths, creates and returns an ","`FSWatcher`.  The provided paths can be files or directories and they must ","already exist.  When file system events occur in the watched paths (or ","potentially subpaths), events are then created and returned via the `FSWatcher` ","object.<br>Event firing orders are not guaranteed to be returned in ","chronological order.<br>Once the path or paths are no longer required to be ","watched, the `FSWatcher` object should be closed by calling the `close` method ","of the watcher.<br><br>#### Options  <br><br>recursive:boolean -If true, the ","subpaths of provided watch directories will also be watched.<br><br>#### ","Example <br>```(let\n   ((watcher (watch_fs \"/tmp\")))\n   (setTimeout (fn ()\n    ","             (progn\n                     (-> watcher `close)\n                  ","  (log \"closed watcher\")))\n               10000)\n   (for_with (event watcher)\n ","    (log \"FS EVENT: \" event)))\n```<br><br>If a file is then created in the ","`/tmp` directory while the block is running, an event will be produced on the ","console:```FS EVENT:  { kind: \"create\", paths: [ \"/private/tmp/abc.txt\" ], ","flag: null }```<br><br>"],"usage":["paths:string|array"],"tags":["filesystem","path","watch","events","file","directory"],"requires":[],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"dir_tree":{"name":"dir_tree","fn_args":"(dirpath options)","description":["=:+","The `dir_tree` function recursively follows a directory hierarchy and ","returns a non-nested structure with the contents of the directory and the ","contained sub-directories.  The returned value is an array containing ","`DirEntry` objects with the keys  `name`, `isFile`, `isDirectory` and ","`isSymlink`.  <br>Each `DirEntry` name value will be the full path to the found ","entity: the provided base path to the dir_tree function plus the position of ","the entity in the sub directory structure.<br>An optional `reducer` function ","can be provided to the dir_tree function in options, which will be called with ","the signature `(entry)`.  If the reducer function returns a true value for the ","entry when called, the entry will be included in the returned results.  If the ","reducer returns false, nil or undefined, the entry will be excluded from the ","final results.  <br><br>#### Example <br><br>Find all files that have the ","\".pdf\" extension in a subfolder:```(dir_tree \"/tmp\"\n          {\n             ","`reduce: (function (entry)\n                              (and entry.isFile\n    ","                            (ends_with? \".pdf\" entry.name)))\n         ","})```<br><br><br> "],"usage":["base_path:string","options:?object"],"tags":["directory","folder","recursive","subdirectory","reduce"],"requires":["add","push","list_files","is_dir?"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"make_temp_dir":{"name":"make_temp_dir","fn_args":"(opts)","description":["=:+","<br><br>Makes a temporary directory in the default directory and returns the ","path as a string.  See also `with_temp_dir`. <br><br>#### Options ","<br><br>prefix:string - The prefix given to the start of the final temp ","directory name in the constructed path.<br>suffix:string - The suffix given to ","the end of the final temp directory name.<br>dir:string - The explicit path in ","which to construct the temp directory.<br> "],"usage":["opts:options"],"tags":["temp","directory","tmp","filesystem"],"requires":[],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"},"with_temp_dir":{"eval_when":{"compile_time":true},"name":"with_temp_dir","macro":true,"fn_args":"[(tmp_path) \"&\" body_forms]","description":["=:+","The `with_temp_dir` macro creates a temporary named handle which is ","bound to the `tmp_path` argument as a first argument to the macro.  The ","remaining forms (macro arguments) are evaluated in a `progn` with the symbol ","name provided to `tmp_path` bound to the path to the temp directory, which is a ","string.  As with a `progn` form, the final form's return value is returned from ","the evaluated macro code.  Once the provided forms to the macro are completed, ","the temp directory is removed prior to the return value being returned.  If an ","exception is encountered during the processing of the provided forms, the ","exception is caught, the temp directory cleaned up and the exception is then ","re-thrown.```(with_temp_dir (tt)\n         (write_text_file (+ tt \"/text.txt\") \n ","                         (+ \"TT was: \" (is_dir? tt) \": \" tt))\n        ","(read_text_file (+ tt \"/text.txt\")))```<br><br><br><br><br> "],"usage":["tmp_path:symbol","body_forms:*"],"tags":["temp","directory","filesystem","tmp"],"requires":["slice"],"externals":["Deno","TypeError","Error","ReferenceError","console"],"source_name":"pkg/sys.juno"}},await (async function(){
             return ["=:javascript","[[\"meta_for_symbol\",function(quoted_symbol,search_mode) {\n                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){\n                            {\n                                let local_data=(Environment.global_ctx.scope[quoted_symbol]|| Environment.definitions[quoted_symbol]);\n                                ;\n                                let acc=[];\n                                ;\n                                if (check_true (search_mode)){\n                                    {\n                                        if (check_true (local_data)){\n                                            {\n                                                (acc).push( ( get_global(\"add\"))({\n                                                    namespace:namespace,name:quoted_symbol,type: subtype(local_data)\n                                                }, ( function(){\n                                                    let it;\n                                                    it=Environment.definitions[quoted_symbol];\n                                                    if (check_true (it)){\n                                                        return it\n                                                    } else {\n                                                        return new Object()\n                                                    }\n                                                })()))\n                                            }\n                                        };\n                                        if (check_true (parent_environment)){\n                                            {\n                                                {\n                                                    let __collector;\n                                                    let __result;\n                                                    let __action;\n                                                    __collector=[];\n                                                    __result=null;\n                                                    __action=function(info) {\n                                                        return (acc).push(info)\n                                                    };\n                                                    ;\n                                                     ( function() {\n                                                        let __for_body__121=function(__item) {\n                                                            __result= __action(__item);\n                                                            if (check_true (__result)){\n                                                                return (__collector).push(__result)\n                                                            }\n                                                        };\n                                                        let __array__122=[],__elements__120= ( function() {\n                                                            {\n                                                                 let __call_target__= parent_environment[\"meta_for_symbol\"].call(parent_environment,quoted_symbol,true), __call_method__=\"flat\";\n                                                                return  __call_target__[__call_method__].call(__call_target__,1)\n                                                            } \n                                                        })();\n                                                        let __BREAK__FLAG__=false;\n                                                        for(let __iter__119 in __elements__120) {\n                                                            __array__122.push( __for_body__121(__elements__120[__iter__119]));\n                                                            if(__BREAK__FLAG__) {\n                                                                 __array__122.pop();\n                                                                break;\n                                                                \n                                                            }\n                                                        }return __array__122;\n                                                         \n                                                    })();\n                                                    __collector\n                                                }\n                                            }\n                                        };\n                                        if (check_true (( length( keys(children))>0))){\n                                            {\n                                                {\n                                                    let __collector;\n                                                    let __result;\n                                                    let __action;\n                                                    __collector=[];\n                                                    __result=null;\n                                                    __action=function(details) {\n                                                        return (acc).push(details)\n                                                    };\n                                                    ;\n                                                     ( function() {\n                                                        let __for_body__125=function(__item) {\n                                                            __result= __action(__item);\n                                                            if (check_true (__result)){\n                                                                return (__collector).push(__result)\n                                                            }\n                                                        };\n                                                        let __array__126=[],__elements__124= ( function(){\n                                                            let ____collector__127=  function(){\n                                                                return []\n                                                            };\n                                                            let ____result__128=  function(){\n                                                                return null\n                                                            };\n                                                            let ____action__129=  function(){\n                                                                return function(child_data) {\n                                                                    if (check_true ( not((child_data['0']=== ( get_global(\"current_namespace\"))())))){\n                                                                        {\n                                                                            return  child_data['1'][\"meta_for_symbol\"].call(child_data['1'],quoted_symbol)\n                                                                        }\n                                                                    }\n                                                                }\n                                                            };\n                                                            {\n                                                                let __collector= ____collector__127();\n                                                                ;\n                                                                let __result= ____result__128();\n                                                                ;\n                                                                let __action= ____action__129();\n                                                                ;\n                                                                ;\n                                                                 ( function() {\n                                                                    let __for_body__132=function(__item) {\n                                                                        __result= __action(__item);\n                                                                        if (check_true (__result)){\n                                                                            return (__collector).push(__result)\n                                                                        }\n                                                                    };\n                                                                    let __array__133=[],__elements__131= pairs(children);\n                                                                    let __BREAK__FLAG__=false;\n                                                                    for(let __iter__130 in __elements__131) {\n                                                                        __array__133.push( __for_body__132(__elements__131[__iter__130]));\n                                                                        if(__BREAK__FLAG__) {\n                                                                             __array__133.pop();\n                                                                            break;\n                                                                            \n                                                                        }\n                                                                    }return __array__133;\n                                                                     \n                                                                })();\n                                                                return __collector\n                                                            }\n                                                        })();\n                                                        let __BREAK__FLAG__=false;\n                                                        for(let __iter__123 in __elements__124) {\n                                                            __array__126.push( __for_body__125(__elements__124[__iter__123]));\n                                                            if(__BREAK__FLAG__) {\n                                                                 __array__126.pop();\n                                                                break;\n                                                                \n                                                            }\n                                                        }return __array__126;\n                                                         \n                                                    })();\n                                                    __collector\n                                                }\n                                            }\n                                        };\n                                        return acc\n                                    }\n                                } else {\n                                    {\n                                        quoted_symbol= ( function(){\n                                            if (check_true ( starts_with_ques_( ( function(){\n                                                 return \"=:\" \n                                            })(),quoted_symbol))){\n                                                return  quoted_symbol[\"substr\"].call(quoted_symbol,2)\n                                            } else {\n                                                return quoted_symbol\n                                            }\n                                        })();\n                                        {\n                                            let it;\n                                            it=Environment.definitions[quoted_symbol];\n                                            if (check_true (it)){\n                                                return  ( get_global(\"add\"))({\n                                                    namespace:namespace,type: sub_type(local_data),name:quoted_symbol\n                                                },it)\n                                            } else {\n                                                return null\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }],[\"describe\",async function(quoted_symbol,search_mode) {\n                        let internal_results=await meta_for_symbol(quoted_symbol,true);\n                        ;\n                        if (check_true (((internal_results instanceof Array)&& internal_results['0']))){\n                            if (check_true (search_mode)){\n                                return internal_results\n                            } else {\n                                return await first(internal_results)\n                            }\n                        } else {\n                            {\n                                let external_results=await get_outside_global(quoted_symbol);\n                                ;\n                                if (check_true (external_results)){\n                                    {\n                                        let detail={\n                                            location:\"external\",type:await subtype(external_results),name:quoted_symbol,namespace:\"EXTERNAL\",description:(\"This is not a bound symbol within the Juno Environment.  \"+ \"If it is to be used, it is recommended to create a reference to it with \"+ \"`(defglobal \"+ quoted_symbol+ \" \"+ quoted_symbol+ \" { `description: \\\"...\\\" })`\")\n                                        };\n                                        ;\n                                        if (check_true (search_mode)){\n                                            return await (async function(){\n                                                let __array_op_rval__136=detail;\n                                                 if (__array_op_rval__136 instanceof Function){\n                                                    return await __array_op_rval__136() \n                                                } else {\n                                                    return [__array_op_rval__136]\n                                                }\n                                            })()\n                                        } else {\n                                            return detail\n                                        }\n                                    }\n                                } else {\n                                    return null\n                                }\n                            }\n                        }\n                    }],[\"undefine\",function(quoted_symbol) {\n                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){\n                            {\n                                let namespace_identity;\n                                let parent_call;\n                                let child_call;\n                                let target_symbol;\n                                namespace_identity=(quoted_symbol).split(\"/\");\n                                parent_call=null;\n                                child_call=null;\n                                target_symbol=null;\n                                ;\n                                return   (function(){\n                                    if (check_true ((((namespace_identity.length===1)&& Environment.global_ctx.scope[namespace_identity['0']])|| ((namespace_identity.length>1)&& (namespace_identity['0']===namespace))))) {\n                                        {\n                                            target_symbol= ( function(){\n                                                if (check_true ((namespace_identity.length>1))){\n                                                    return namespace_identity['1']\n                                                } else {\n                                                    return namespace_identity['0']\n                                                }\n                                            })();\n                                             delete_prop(Environment.definitions,target_symbol);\n                                            if (check_true (Environment.global_ctx.scope[target_symbol])){\n                                                return  delete_prop(Environment.global_ctx.scope,target_symbol)\n                                            } else {\n                                                return false\n                                            }\n                                        }\n                                    } else if (check_true (((namespace_identity.length>1)&& parent_environment))) {\n                                        {\n                                            parent_call= parent_environment[\"get_global\"].call(parent_environment,\"undefine\");\n                                            return (parent_call)(quoted_symbol)\n                                        }\n                                    } else if (check_true (((namespace_identity.length>1)&& children[namespace_identity['0']]))) {\n                                        {\n                                            child_call= ( function() {\n                                                {\n                                                     let __call_target__=children[namespace_identity['0']], __call_method__=\"get_global\";\n                                                    return  __call_target__[__call_method__].call(__call_target__,\"undefine\")\n                                                } \n                                            })();\n                                            return  child_call(quoted_symbol)\n                                        }\n                                    } else {\n                                        return false\n                                    }\n                                } )()\n                            }\n                        } else {\n                            throw new SyntaxError(\"undefine requires a quoted symbol\");\n                            \n                        }\n                    }],[\"*namespace*\",\"sys\"],[\"pend_load\",async function(from_namespace,target_namespace,symbol,initializer) {\n                        if (check_true ((null==pending_ns_loads[from_namespace]))){\n                            {\n                                await async function(){\n                                    pending_ns_loads[from_namespace]=[];\n                                    return pending_ns_loads;\n                                    \n                                }()\n                            }\n                        };\n                        (pending_ns_loads[from_namespace]).push({\n                            symbol:symbol,source_ns:from_namespace,target_ns:target_namespace,initializer:await (async function(){\n                                 return [\"=:quote\",initializer] \n                            })()\n                        });\n                        return initializer\n                    }],[\"symbols\",async function(opts) {\n                        return await async function(){\n                            if (check_true ((null==opts))) {\n                                return await keys(Environment.global_ctx.scope)\n                            } else if (check_true (opts.unique)) {\n                                {\n                                    let no_includes=await make_set(await conj([\"meta_for_symbol\",\"describe\",\"undefine\",\"*namespace*\",\"pend_load\",\"symbols\",\"set_global\",\"get_global\",\"symbol_definition\",\"compile\",\"env_log\",\"evaluate_local\",\"evaluate\",\"eval_struct\",\"set_compiler\",\"clone\",\"eval\",\"add_escape_encoding\",\"get_outside_global\",\"as_lisp\",\"lisp_writer\",\"clone_to_new\",\"save_env\",\"null\",\"compiler\"],built_ins));\n                                    ;\n                                    {\n                                        let __collector;\n                                        let __result;\n                                        let __action;\n                                        __collector=[];\n                                        __result=null;\n                                        __action=async function(sym) {\n                                            if (check_true (await no_includes[\"has\"].call(no_includes,sym))){\n                                                return null\n                                            } else {\n                                                return sym\n                                            }\n                                        };\n                                        ;\n                                        await (async function() {\n                                            let __for_body__213=async function(__item) {\n                                                __result=await __action(__item);\n                                                if (check_true (__result)){\n                                                    return (__collector).push(__result)\n                                                }\n                                            };\n                                            let __array__214=[],__elements__212=await keys(Environment.global_ctx.scope);\n                                            let __BREAK__FLAG__=false;\n                                            for(let __iter__211 in __elements__212) {\n                                                __array__214.push(await __for_body__213(__elements__212[__iter__211]));\n                                                if(__BREAK__FLAG__) {\n                                                     __array__214.pop();\n                                                    break;\n                                                    \n                                                }\n                                            }return __array__214;\n                                             \n                                        })();\n                                        return __collector\n                                    }\n                                }\n                            }\n                        } ()\n                    }],[\"set_global\",function(refname,value,meta,is_constant,target_namespace,contained_req) {\n                          (function(){\n                            if (check_true ( not((typeof refname===\"string\")))) {\n                                throw new TypeError(\"reference name must be a string type\");\n                                \n                            } else if (check_true (((Environment===value)|| (Environment.global_ctx===value)|| (Environment.global_ctx.scope===value)))) {\n                                {\n                                    throw new EvalError(\"cannot set the environment scope as a global value\");\n                                    \n                                }\n                            }\n                        } )();\n                        if (check_true ( resolve_path( ( function(){\n                            let __array_op_rval__217=refname;\n                             if (__array_op_rval__217 instanceof Function){\n                                return  __array_op_rval__217(\"constant\") \n                            } else {\n                                return [__array_op_rval__217,\"constant\"]\n                            }\n                        })(),Environment.definitions))){\n                            {\n                                throw new TypeError((\"Assignment to constant variable \"+ refname));\n                                \n                            }\n                        };\n                        let namespace_identity= ( function(){\n                            if (check_true (target_namespace)){\n                                return  ( function(){\n                                    let __array_op_rval__218=target_namespace;\n                                     if (__array_op_rval__218 instanceof Function){\n                                        return  __array_op_rval__218(refname) \n                                    } else {\n                                        return [__array_op_rval__218,refname]\n                                    }\n                                })()\n                            } else {\n                                return (refname).split(\"/\")\n                            }\n                        })();\n                        ;\n                        return   (function(){\n                            if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace===namespace_identity['0']))))) {\n                                return  parent_environment[\"set_global\"].call(parent_environment,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'],(contained|| contained_req))\n                            } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {\n                                {\n                                    if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){\n                                        return  ( function() {\n                                            {\n                                                 let __call_target__=children[namespace_identity['0']], __call_method__=\"set_global\";\n                                                return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'])\n                                            } \n                                        })()\n                                    } else {\n                                        throw new EvalError((\"namespace \"+ namespace_identity['0']+ \" doesn't exist\"));\n                                        \n                                    }\n                                }\n                            } else {\n                                try {\n                                    let comps= get_object_path( ( function(){\n                                        if (check_true ((1===namespace_identity.length))){\n                                            return namespace_identity['0']\n                                        } else {\n                                            return namespace_identity['1']\n                                        }\n                                    })());\n                                    ;\n                                      (function(){\n                                        Environment.global_ctx.scope[comps['0']]=value;\n                                        return Environment.global_ctx.scope;\n                                        \n                                    })();\n                                    if (check_true (((meta instanceof Object)&&  not((meta instanceof Array))))){\n                                        {\n                                            if (check_true (is_constant)){\n                                                {\n                                                      (function(){\n                                                        meta[\"constant\"]=true;\n                                                        return meta;\n                                                        \n                                                    })()\n                                                }\n                                            };\n                                              (function(){\n                                                Environment.definitions[comps['0']]=meta;\n                                                return Environment.definitions;\n                                                \n                                            })()\n                                        }\n                                    } else {\n                                        if (check_true (is_constant)){\n                                            {\n                                                  (function(){\n                                                    Environment.definitions[comps['0']]={\n                                                        constant:true\n                                                    };\n                                                    return Environment.definitions;\n                                                    \n                                                })()\n                                            }\n                                        }\n                                    };\n                                    return Environment.global_ctx.scope[comps['0']]\n                                } catch (__exception__219) {\n                                    if (__exception__219 instanceof Error) {\n                                        let e=__exception__219;\n                                        {\n                                            {\n                                                let message=(\"Error: set_global: \"+ _star_namespace_star_+ \"symbol name: \"+ refname+ \": \"+ e.message);\n                                                ;\n                                                 console.error(message,[]);\n                                                  (function(){\n                                                    e[\"message\"]=message;\n                                                    return e;\n                                                    \n                                                })();\n                                                throw e;\n                                                \n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        } )()\n                    }],[\"get_global\",function(refname,value_if_not_found,suppress_check_external_env,target_namespace,path_comps,contained_req) {\n                        return   (function(){\n                            if (check_true ( not((typeof refname===\"string\")))) {\n                                throw new TypeError(\"reference name must be a string type\");\n                                \n                            } else if (check_true ((refname===\"Environment\"))) {\n                                return Environment\n                            } else if (check_true ( compiler_operators[\"has\"].call(compiler_operators,refname))) {\n                                return special_identity\n                            } else {\n                                {\n                                    let namespace_identity;\n                                    let comps;\n                                    let refval;\n                                    let symbol_name;\n                                    let check_external_env;\n                                    namespace_identity= ( function(){\n                                        if (check_true (target_namespace)){\n                                            return  ( function(){\n                                                let __array_op_rval__227=target_namespace;\n                                                 if (__array_op_rval__227 instanceof Function){\n                                                    return  __array_op_rval__227(refname) \n                                                } else {\n                                                    return [__array_op_rval__227,refname]\n                                                }\n                                            })()\n                                        } else {\n                                            return (refname).split(\"/\")\n                                        }\n                                    })();\n                                    comps=(path_comps||  get_object_path( ( function(){\n                                        if (check_true ((1===namespace_identity.length))){\n                                            return namespace_identity['0']\n                                        } else {\n                                            return namespace_identity['1']\n                                        }\n                                    })()));\n                                    refval=null;\n                                    symbol_name=null;\n                                    check_external_env= ( function(){\n                                        if (check_true (suppress_check_external_env)){\n                                            return false\n                                        } else {\n                                            return check_external_env_default\n                                        }\n                                    })();\n                                    return   (function(){\n                                        if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {\n                                            return  parent_environment[\"get_global\"].call(parent_environment,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps,(contained|| contained_req))\n                                        } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {\n                                            {\n                                                if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){\n                                                    return  ( function() {\n                                                        {\n                                                             let __call_target__=children[namespace_identity['0']], __call_method__=\"get_global\";\n                                                            return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps)\n                                                        } \n                                                    })()\n                                                } else {\n                                                    {\n                                                        throw new EvalError((\"namespace \"+ namespace_identity['0']+ \" doesn't exist\"));\n                                                        \n                                                    }\n                                                }\n                                            }\n                                        } else {\n                                            {\n                                                refval=Environment.global_ctx.scope[comps['0']];\n                                                if (check_true (((undefined===refval)&& (namespace_identity.length===1)&& parent_environment))){\n                                                    {\n                                                        let rval= parent_environment[\"get_global\"].call(parent_environment,refname,value_if_not_found,suppress_check_external_env,null,comps,(contained|| contained_req));\n                                                        ;\n                                                        return rval\n                                                    }\n                                                } else {\n                                                    {\n                                                        if (check_true (((undefined===refval)&& check_external_env))){\n                                                            refval= ( function(){\n                                                                if (check_true (check_external_env)){\n                                                                    return ( get_outside_global(comps['0'])|| NOT_FOUND)\n                                                                } else {\n                                                                    return NOT_FOUND\n                                                                }\n                                                            })()\n                                                        };\n                                                        return   (function(){\n                                                            if (check_true (((NOT_FOUND===refval)&&  not((undefined===value_if_not_found))))) {\n                                                                return value_if_not_found\n                                                            } else if (check_true ((NOT_FOUND===refval))) {\n                                                                {\n                                                                    throw new ReferenceError((\"symbol not found: \"+  ( function(){\n                                                                        if (check_true ((namespace_identity.length>1))){\n                                                                            return  add(namespace,\"/\",namespace_identity['1'])\n                                                                        } else {\n                                                                            return  add(namespace,\"/\",namespace_identity['0'])\n                                                                        }\n                                                                    })()));\n                                                                    \n                                                                }\n                                                            } else if (check_true ((comps.length===1))) {\n                                                                return refval\n                                                            } else if (check_true ((comps.length>1))) {\n                                                                {\n                                                                    return  resolve_path( rest(comps),refval)\n                                                                }\n                                                            } else {\n                                                                {\n                                                                     console.warn(\"get_global: condition fall through: \",comps);\n                                                                    return NOT_FOUND\n                                                                }\n                                                            }\n                                                        } )()\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    } )()\n                                }\n                            }\n                        } )()\n                    }],[\"symbol_definition\",async function(symname,target_namespace) {\n                        let namespace_identity;\n                        namespace_identity=await (async function(){\n                            if (check_true (target_namespace)){\n                                return await (async function(){\n                                    let __array_op_rval__230=target_namespace;\n                                     if (__array_op_rval__230 instanceof Function){\n                                        return await __array_op_rval__230(symname) \n                                    } else {\n                                        return [__array_op_rval__230,symname]\n                                    }\n                                })()\n                            } else {\n                                if (check_true ((await length(symname)>2))){\n                                    return (symname).split(\"/\")\n                                } else {\n                                    return await (async function(){\n                                        let __array_op_rval__231=symname;\n                                         if (__array_op_rval__231 instanceof Function){\n                                            return await __array_op_rval__231() \n                                        } else {\n                                            return [__array_op_rval__231]\n                                        }\n                                    })()\n                                }\n                            }\n                        })();\n                        return await async function(){\n                            if (check_true ((namespace_identity.length===1))) {\n                                {\n                                    let it;\n                                    it=Environment.definitions[symname];\n                                    if (check_true (it)){\n                                        return it\n                                    } else {\n                                        if (check_true (parent_environment)){\n                                            return await parent_environment[\"symbol_definition\"].call(parent_environment,symname)\n                                        }\n                                    }\n                                }\n                            } else if (check_true ((namespace_identity['0']===namespace))) {\n                                return Environment.definitions[symname]\n                            } else if (check_true (parent_environment)) {\n                                return await parent_environment[\"symbol_definition\"].call(parent_environment,namespace_identity['1'],namespace_identity['0'])\n                            } else if (check_true ((namespace_identity.length===2))) {\n                                return await (async function() {\n                                    {\n                                         let __call_target__=children[namespace_identity['0']], __call_method__=\"symbol_definition\";\n                                        return await __call_target__[__call_method__].call(__call_target__,namespace_identity['1'])\n                                    } \n                                })()\n                            } else {\n                                return undefined\n                            }\n                        } ()\n                    }],[\"compile\",async function(json_expression,opts) {\n                        let out;\n                        opts=await add({\n                            env:Environment\n                        },opts,{\n                            meta:await (async function(){\n                                if (check_true ((opts&& opts.meta))){\n                                    return true\n                                } else {\n                                    return false\n                                }\n                            })()\n                        });\n                        out=null;\n                        out=await (async function(){\n                             return await compiler(json_expression,opts) \n                        })();\n                        return await async function(){\n                            if (check_true (((out instanceof Array)&& out['0'].ctype&& (out['0'].ctype===\"FAIL\")))) {\n                                return out\n                            } else if (check_true (opts.meta)) {\n                                return out\n                            } else {\n                                return out['1']\n                            }\n                        } ()\n                    }],[\"env_log\",async function(...args) {\n                            return await (async function(){\n                                let __target_arg__189=[].concat(await conj(await (async function(){\n                                    let __array_op_rval__190=style;\n                                     if (__array_op_rval__190 instanceof Function){\n                                        return await __array_op_rval__190() \n                                    } else {\n                                        return [__array_op_rval__190]\n                                    }\n                                })(),args));\n                                if(!__target_arg__189 instanceof Array){\n                                    throw new TypeError(\"Invalid final argument to apply - an array is required\")\n                                }let __pre_arg__191=(\"%c\"+ await (async function(){\n                                    if (check_true (opts.prefix)){\n                                        return opts.prefix\n                                    } else {\n                                        return (args).shift()\n                                    }\n                                })());\n                                __target_arg__189.unshift(__pre_arg__191);\n                                return (console.log).apply(this,__target_arg__189)\n                            })()\n                        }],[\"evaluate_local\",async function(expression,ctx,opts) {\n                        let compiled;\n                        let error_data;\n                        let requires;\n                        let precompiled_assembly;\n                        let result;\n                        opts=(opts|| new Object());\n                        compiled=null;\n                        error_data=null;\n                        requires=null;\n                        precompiled_assembly=null;\n                        result=null;\n                        if (check_true (opts.compiled_source)){\n                            compiled=expression\n                        } else {\n                            try {\n                                compiled=await (async function(){\n                                     return await compiler(await (async function(){\n                                        if (check_true (opts.json_in)){\n                                            return expression\n                                        } else {\n                                            return await Environment[\"read_lisp\"].call(Environment,expression,{\n                                                source_name:opts.source_name\n                                            })\n                                        }\n                                    })(),{\n                                        env:Environment,ctx:ctx,throttle:opts.throttle,formatted_output:true,source_name:opts.source_name,throw_on_error:opts.throw_on_error,on_final_token_assembly:async function(val) {\n                                            return precompiled_assembly=val\n                                        },error_report:(opts.error_report|| null),quiet_mode:(opts.quiet_mode|| false)\n                                    }) \n                                })()\n                            } catch (__exception__238) {\n                                if (__exception__238 instanceof Error) {\n                                    let e=__exception__238;\n                                    {\n                                        {\n                                            if (check_true (opts.throw_on_error)){\n                                                {\n                                                    throw e;\n                                                    \n                                                }\n                                            };\n                                            if (check_true ((e instanceof LispSyntaxError))){\n                                                {\n                                                    await async function(){\n                                                        e[\"message\"]=await JSON.parse(e.message);\n                                                        return e;\n                                                        \n                                                    }()\n                                                }\n                                            };\n                                            await async function(){\n                                                if (check_true ((e instanceof LispSyntaxError))) {\n                                                    return error_data=await add({\n                                                        error:\"LispSyntaxError\"\n                                                    },e.message)\n                                                } else {\n                                                    error_data={\n                                                        error:await sub_type(e),message:e.message,stack:e.stack,form:await (async function(){\n                                                             return await async function(){\n                                                                if (check_true (((expression instanceof String || typeof expression==='string')&& (expression.length>100)))) {\n                                                                    return await add(await expression[\"substr\"].call(expression,0,100),\"...\")\n                                                                } else {\n                                                                    return await (await get_global(\"as_lisp\"))(expression)\n                                                                }\n                                                            } () \n                                                        })(),parent_forms:[],source_name:opts.source_name,invalid:true\n                                                    }\n                                                }\n                                            } ();\n                                            if (check_true (opts.error_report)){\n                                                await (async function(){\n                                                    let __array_op_rval__240=opts.error_report;\n                                                     if (__array_op_rval__240 instanceof Function){\n                                                        return await __array_op_rval__240(error_data) \n                                                    } else {\n                                                        return [__array_op_rval__240,error_data]\n                                                    }\n                                                })()\n                                            } else {\n                                                await console.error(\"Compilation Error: \",error_data)\n                                            };\n                                            compiled=await (async function(){\n                                                 return [{\n                                                    error:true\n                                                },null] \n                                            })()\n                                        }\n                                    }\n                                }\n                            }\n                        };\n                        return await async function(){\n                            if (check_true ((null==compiled))) {\n                                return null\n                            } else if (check_true ((compiled['0'].ctype===\"FAIL\"))) {\n                                {\n                                    if (check_true (opts.error_report)){\n                                        {\n                                            await (async function(){\n                                                let __array_op_rval__241=opts.error_report;\n                                                 if (__array_op_rval__241 instanceof Function){\n                                                    return await __array_op_rval__241(compiled['1']) \n                                                } else {\n                                                    return [__array_op_rval__241,compiled['1']]\n                                                }\n                                            })()\n                                        }\n                                    };\n                                    return await async function(){\n                                        if (check_true ((compiled['1'] instanceof Error))) {\n                                            throw compiled['1'];\n                                            \n                                        } else if (check_true ((compiled['1']['0'] instanceof Error))) {\n                                            throw compiled['1']['0'];\n                                            \n                                        } else if (check_true (((compiled['1']['0'] instanceof Object)&& (compiled['1']['0'].error===\"SyntaxError\")))) {\n                                            {\n                                                let new_error=new SyntaxError(compiled['1']['0'].message);\n                                                ;\n                                                await async function(){\n                                                    new_error[\"from\"]=compiled['1']['0'];\n                                                    return new_error;\n                                                    \n                                                }();\n                                                throw new_error;\n                                                \n                                            }\n                                        } else {\n                                            return compiled['1']\n                                        }\n                                    } ()\n                                }\n                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))&& parent_environment))) {\n                                return await parent_environment[\"evaluate_local\"].call(parent_environment,compiled,ctx,await add(new Object(),opts,{\n                                    compiled_source:true\n                                }))\n                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))))) {\n                                if (check_true (children[compiled['0'].namespace])){\n                                    return await (async function() {\n                                        {\n                                             let __call_target__=children[compiled['0'].namespace], __call_method__=\"evaluate_local\";\n                                            return await __call_target__[__call_method__].call(__call_target__,compiled,ctx,await add(new Object(),opts,{\n                                                compiled_source:true\n                                            }))\n                                        } \n                                    })()\n                                } else {\n                                    throw new EvalError((\"unknown namespace \"+ compiled['0'].namespace+ \" assignment\"));\n                                    \n                                }\n                            } else {\n                                {\n                                    if (check_true (opts.on_compilation_complete)){\n                                        await (async function(){\n                                            let __array_op_rval__243=opts.on_compilation_complete;\n                                             if (__array_op_rval__243 instanceof Function){\n                                                return await __array_op_rval__243(compiled) \n                                            } else {\n                                                return [__array_op_rval__243,compiled]\n                                            }\n                                        })()\n                                    };\n                                    try {\n                                        if (check_true (((compiled instanceof Array)&& (compiled['0'] instanceof Object)&& compiled['0'].ctype&& await not((compiled['0'].ctype instanceof String || typeof compiled['0'].ctype==='string'))))){\n                                            {\n                                                await async function(){\n                                                    compiled['0'][\"ctype\"]=await subtype(compiled['0'].ctype);\n                                                    return compiled['0'];\n                                                    \n                                                }()\n                                            }\n                                        };\n                                        result=await (async function(){\n                                             return await async function(){\n                                                if (check_true (compiled.error)) {\n                                                    throw new Error((await get_global(\"indirect_new\"))(compiled.error,compiled.message));\n                                                    \n                                                } else if (check_true ((compiled['0'].ctype&& (await contains_ques_(\"block\",compiled['0'].ctype)|| (compiled['0'].ctype===\"assignment\")|| (compiled['0'].ctype===\"__!NOT_FOUND!__\"))))) {\n                                                    if (check_true (await (async function(){\n                                                        let __array_op_rval__246=compiled['0'].has_lisp_globals;\n                                                         if (__array_op_rval__246 instanceof Function){\n                                                            return await __array_op_rval__246() \n                                                        } else {\n                                                            return [__array_op_rval__246]\n                                                        }\n                                                    })())){\n                                                        {\n                                                            await async function(){\n                                                                compiled[1]=new AsyncFunction(\"Environment\",(\"{ \"+ compiled['1']+ \"}\"));\n                                                                return compiled;\n                                                                \n                                                            }();\n                                                            return await (async function(){\n                                                                let __array_op_rval__248=compiled['1'];\n                                                                 if (__array_op_rval__248 instanceof Function){\n                                                                    return await __array_op_rval__248(Environment) \n                                                                } else {\n                                                                    return [__array_op_rval__248,Environment]\n                                                                }\n                                                            })()\n                                                        }\n                                                    } else {\n                                                        {\n                                                            await async function(){\n                                                                compiled[1]=new AsyncFunction((\"{\"+ compiled['1']+ \"}\"));\n                                                                return compiled;\n                                                                \n                                                            }();\n                                                            return await (async function(){\n                                                                let __array_op_rval__250=compiled['1'];\n                                                                 if (__array_op_rval__250 instanceof Function){\n                                                                    return await __array_op_rval__250() \n                                                                } else {\n                                                                    return [__array_op_rval__250]\n                                                                }\n                                                            })()\n                                                        }\n                                                    }\n                                                } else if (check_true ((compiled['0'].ctype&& ((\"AsyncFunction\"===compiled['0'].ctype)|| (\"statement\"===compiled['0'].ctype)|| (\"objliteral\"===compiled['0'].ctype))))) {\n                                                    {\n                                                        if (check_true (await (async function(){\n                                                            let __array_op_rval__251=compiled['0'].has_lisp_globals;\n                                                             if (__array_op_rval__251 instanceof Function){\n                                                                return await __array_op_rval__251() \n                                                            } else {\n                                                                return [__array_op_rval__251]\n                                                            }\n                                                        })())){\n                                                            {\n                                                                await async function(){\n                                                                    compiled[1]=new AsyncFunction(\"Environment\",(\"{ return \"+ compiled['1']+ \"} \"));\n                                                                    return compiled;\n                                                                    \n                                                                }();\n                                                                return await (async function(){\n                                                                    let __array_op_rval__253=compiled['1'];\n                                                                     if (__array_op_rval__253 instanceof Function){\n                                                                        return await __array_op_rval__253(Environment) \n                                                                    } else {\n                                                                        return [__array_op_rval__253,Environment]\n                                                                    }\n                                                                })()\n                                                            }\n                                                        } else {\n                                                            {\n                                                                await async function(){\n                                                                    compiled[1]=new AsyncFunction((\"{ return \"+ compiled['1']+ \"}\"));\n                                                                    return compiled;\n                                                                    \n                                                                }();\n                                                                return await (async function(){\n                                                                    let __array_op_rval__255=compiled['1'];\n                                                                     if (__array_op_rval__255 instanceof Function){\n                                                                        return await __array_op_rval__255() \n                                                                    } else {\n                                                                        return [__array_op_rval__255]\n                                                                    }\n                                                                })()\n                                                            }\n                                                        }\n                                                    }\n                                                } else if (check_true ((compiled['0'].ctype&& (\"Function\"===compiled['0'].ctype)))) {\n                                                    {\n                                                        if (check_true (await (async function(){\n                                                            let __array_op_rval__256=compiled['0'].has_lisp_globals;\n                                                             if (__array_op_rval__256 instanceof Function){\n                                                                return await __array_op_rval__256() \n                                                            } else {\n                                                                return [__array_op_rval__256]\n                                                            }\n                                                        })())){\n                                                            {\n                                                                await async function(){\n                                                                    compiled[1]=new Function(\"Environment\",(\"{ return \"+ compiled['1']+ \"} \"));\n                                                                    return compiled;\n                                                                    \n                                                                }();\n                                                                return await (async function(){\n                                                                    let __array_op_rval__258=compiled['1'];\n                                                                     if (__array_op_rval__258 instanceof Function){\n                                                                        return await __array_op_rval__258(Environment) \n                                                                    } else {\n                                                                        return [__array_op_rval__258,Environment]\n                                                                    }\n                                                                })()\n                                                            }\n                                                        } else {\n                                                            {\n                                                                await async function(){\n                                                                    compiled[1]=new Function((\"{ return \"+ compiled['1']+ \"}\"));\n                                                                    return compiled;\n                                                                    \n                                                                }();\n                                                                return await (async function(){\n                                                                    let __array_op_rval__260=compiled['1'];\n                                                                     if (__array_op_rval__260 instanceof Function){\n                                                                        return await __array_op_rval__260() \n                                                                    } else {\n                                                                        return [__array_op_rval__260]\n                                                                    }\n                                                                })()\n                                                            }\n                                                        }\n                                                    }\n                                                } else {\n                                                    return compiled['1']\n                                                }\n                                            } () \n                                        })()\n                                    } catch (__exception__244) {\n                                        if (__exception__244 instanceof Error) {\n                                            let e=__exception__244;\n                                            {\n                                                {\n                                                    if (check_true (true)){\n                                                        {\n                                                            let details={\n                                                                error:e.name,message:e.message,expanded_source:await (await get_global(\"pretty_print\"))(await (async function(){\n                                                                     return await (await get_global(\"detokenize\"))(precompiled_assembly) \n                                                                })()),compiled:compiled['1']\n                                                            };\n                                                            ;\n                                                            console.log(\"Syntax Error: \",details);\n                                                            await async function(){\n                                                                e[\"details\"]=details;\n                                                                return e;\n                                                                \n                                                            }()\n                                                        }\n                                                    };\n                                                    if (check_true ((opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4)))){\n                                                        {\n                                                            if (check_true (e.details)){\n                                                                await env_log(\"caught error: \",e.details)\n                                                            } else {\n                                                                await env_log(\"caught error: \",e.name,e.message,e)\n                                                            }\n                                                        }\n                                                    };\n                                                    if (check_true ((false&& (await sub_type(e)===\"SyntaxError\")&& (opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4))))){\n                                                        await console.log(compiled['1'])\n                                                    };\n                                                    if (check_true (opts.error_report)){\n                                                        {\n                                                            await (async function(){\n                                                                let __array_op_rval__262=opts.error_report;\n                                                                 if (__array_op_rval__262 instanceof Function){\n                                                                    return await __array_op_rval__262(await (async function(){\n                                                                        if (check_true (e.details)){\n                                                                            return e.details\n                                                                        } else {\n                                                                            return {\n                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack\n                                                                            }\n                                                                        }\n                                                                    })()) \n                                                                } else {\n                                                                    return [__array_op_rval__262,await (async function(){\n                                                                        if (check_true (e.details)){\n                                                                            return e.details\n                                                                        } else {\n                                                                            return {\n                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack\n                                                                            }\n                                                                        }\n                                                                    })()]\n                                                                }\n                                                            })()\n                                                        }\n                                                    };\n                                                    result=e;\n                                                    if (check_true ((await not(opts.catch_errors)|| (ctx&& ctx.in_try)))){\n                                                        {\n                                                            throw result;\n                                                            \n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    };\n                                    return result\n                                }\n                            }\n                        } ()\n                    }],[\"evaluate\",async function(expression,ctx,opts) {\n                        return await async function(){\n                            if (check_true ((namespace===active_namespace))) {\n                                return await evaluate_local(expression,ctx,opts)\n                            } else if (check_true ((namespace===\"core\"))) {\n                                return await (async function() {\n                                    {\n                                         let __call_target__=children[active_namespace], __call_method__=\"evaluate\";\n                                        return await __call_target__[__call_method__].call(__call_target__,expression,ctx,opts)\n                                    } \n                                })()\n                            }\n                        } ()\n                    }],[\"eval_struct\",async function(lisp_struct,ctx,opts) {\n                        let rval;\n                        rval=null;\n                        if (check_true (lisp_struct instanceof Function)){\n                            rval=await (async function(){\n                                let __array_op_rval__267=lisp_struct;\n                                 if (__array_op_rval__267 instanceof Function){\n                                    return await __array_op_rval__267() \n                                } else {\n                                    return [__array_op_rval__267]\n                                }\n                            })()\n                        } else {\n                            rval=await (async function(){\n                                 return await evaluate(lisp_struct,ctx,await add({\n                                    json_in:true\n                                },(opts|| new Object()))) \n                            })()\n                        };\n                        return rval\n                    }],[\"set_compiler\",async function(compiler_function) {\n                        let new_ops;\n                        new_ops=await (async function(){\n                            let __array_op_rval__271=compiler_function;\n                             if (__array_op_rval__271 instanceof Function){\n                                return await __array_op_rval__271([],{\n                                    special_operators:true,env:Environment\n                                }) \n                            } else {\n                                return [__array_op_rval__271,[],{\n                                    special_operators:true,env:Environment\n                                }]\n                            }\n                        })();\n                        if (check_true (await is_set_ques_(new_ops))){\n                            {\n                                compiler_operators=new_ops;\n                                compiler=compiler_function;\n                                await async function(){\n                                    Environment.global_ctx.scope[\"compiler\"]=compiler;\n                                    return Environment.global_ctx.scope;\n                                    \n                                }();\n                                await (await get_global(\"register_feature\"))(\"compiler\")\n                            }\n                        } else {\n                            {\n                                await console.error(\"Invalid compiler function: invalid operators returned. Not installing.\");\n                                throw new EvalError(\"Invalid compiler function\");\n                                \n                            }\n                        };\n                        return compiler\n                    }],[\"clone\",async function(val) {\n                            if (check_true ((val===Environment))){\n                                return Environment\n                            } else {\n                                return await clone(val,0,Environment)\n                            }\n                        }],[\"eval\",async function(expression) {\n                        return await (async function(){\n                            let __array_op_rval__141=expression;\n                             if (__array_op_rval__141 instanceof Function){\n                                return await __array_op_rval__141() \n                            } else {\n                                return [__array_op_rval__141]\n                            }\n                        })()\n                    }],[\"add_escape_encoding\",async function(text) {        if (check_true ((text instanceof String || typeof text==='string'))){            let chars;            let acc;            chars=(text).split(\"\");            acc=[];            await (async function() {                let __for_body__3=async function(c) {                     return  await async function(){                        if (check_true( ((await c[\"charCodeAt\"].call(c,0)===34)))) {                            (acc).push(await String.fromCharCode(92));                             return  (acc).push(c)                        } else  {                             return (acc).push(c)                        }                    } ()                };                let __array__4=[],__elements__2=chars;                let __BREAK__FLAG__=false;                for(let __iter__1 in __elements__2) {                    __array__4.push(await __for_body__3(__elements__2[__iter__1]));                    if(__BREAK__FLAG__) {                         __array__4.pop();                        break;                                            }                }return __array__4;                             })();             return  (acc).join(\"\")        } else {              return text        }    }],[\"get_outside_global\",function get_outside_global(refname) {  try {    let tfn = new Function(\"{ if (typeof \" + refname + \" === 'undefined') { return undefined } else { return \"+refname+\" } }\");    return tfn();  } catch (ex) {    return undefined;  }}],[\"as_lisp\",lisp_writer],[\"lisp_writer\",lisp_writer],[\"clone_to_new\",async function(options) {\n                        let new_env;\n                        let my_children;\n                        let my_children_declarations;\n                        new_env=null;\n                        my_children=null;\n                        my_children_declarations=null;\n                        await env_log(namespace,\"cloning: # children: \",await length(children));\n                        new_env=await (async function(){\n                             return await dlisp_env({\n                                env:await (async function(){\n                                     return await clone(Environment) \n                                })(),children:await (async function(){\n                                     return await clone(children) \n                                })(),children_declarations:await (async function(){\n                                     return await clone(children_declarations) \n                                })()\n                            }) \n                        })();\n                        await env_log(namespace,\"constructed: \",await new_env[\"id\"]());\n                        return new_env\n                    }],[\"save_env\",async function(options) {\n                        let new_env;\n                        let my_children;\n                        let env_constructor;\n                        let dcomps;\n                        let version_tag;\n                        let build_time;\n                        let build_headers;\n                        let child_env;\n                        let want_buffer;\n                        let comp_buffer;\n                        let sorted_dependencies;\n                        let child_export_order;\n                        let preserve_imports;\n                        let include_source;\n                        let exports;\n                        let src;\n                        let target_insertion_path;\n                        let output_path;\n                        new_env=null;\n                        my_children=null;\n                        env_constructor=null;\n                        dcomps=await (async function(){\n                             return await (await get_global(\"date_components\"))(new Date()) \n                        })();\n                        options=(options|| new Object());\n                        version_tag=await (async function(){\n                            if (check_true (await not(await blank_ques_(opts.version_tag)))){\n                                return opts.version_tag\n                            } else {\n                                return (await (async function(){\n                                    let __array_op_rval__328=dcomps.year;\n                                     if (__array_op_rval__328 instanceof Function){\n                                        return await __array_op_rval__328(dcomps.month,dcomps.day,dcomps.hour,dcomps.minute) \n                                    } else {\n                                        return [__array_op_rval__328,dcomps.month,dcomps.day,dcomps.hour,dcomps.minute]\n                                    }\n                                })()).join(\".\")\n                            }\n                        })();\n                        build_time=await (async function(){\n                             return await (await get_global(\"formatted_date\"))(new Date()) \n                        })();\n                        build_headers=[];\n                        child_env=null;\n                        want_buffer=(options.want_buffer|| false);\n                        comp_buffer=null;\n                        sorted_dependencies=await (async function(){\n                             return await (await get_global(\"sort_dependencies\"))() \n                        })();\n                        child_export_order=null;\n                        preserve_imports=await (async function(){\n                            if (check_true ((options&& (options.preserve_imports===false)))){\n                                return false\n                            } else {\n                                return true\n                            }\n                        })();\n                        include_source=false;\n                        exports=[];\n                        src=await (async function(){\n                            if (check_true (await Environment[\"get_global\"].call(Environment,\"*env_skeleton*\",null))){\n                                return await clone(await Environment[\"get_global\"].call(Environment,\"*env_skeleton*\"))\n                            } else {\n                                return await (await get_global(\"reader\"))(await (async function(){\n                                     return await (await get_global(\"read_text_file\"))(\"./src/environment.lisp\") \n                                })())\n                            }\n                        })();\n                        target_insertion_path=null;\n                        output_path=null;\n                        if (check_true (Environment.global_ctx.scope[\"*env_skeleton*\"])){\n                            {\n                                await (await get_global(\"register_feature\"))(\"*env_skeleton*\")\n                            }\n                        };\n                        target_insertion_path=await first(await (async function(){\n                             return await (await get_global(\"findpaths\"))(await (async function(){\n                                 return \"=:included_globals\" \n                            })(),src) \n                        })());\n                        if (check_true (await not((target_insertion_path instanceof Array)))){\n                            throw new EvalError(\"Unable to find the first included_globals symbol\");\n                            \n                        };\n                        target_insertion_path=await conj(await chop(target_insertion_path),[2]);\n                        if (check_true (options.include_source)){\n                            {\n                                include_source=true\n                            }\n                        };\n                        await env_log(namespace,\"cloning: # children: \",await length(children));\n                        await env_log(namespace,\"preserve_imports: \",preserve_imports);\n                        exports=await export_symbol_set(await (async function(){\n                            if (check_true (options.do_not_include)){\n                                return {\n                                    do_not_include:options.do_not_include\n                                }\n                            }\n                        })());\n                        child_export_order=await (async function(){\n                            let __collector;\n                            let __result;\n                            let __action;\n                            __collector=[];\n                            __result=null;\n                            __action=async function(cname) {\n                                if (check_true (await not((cname===\"core\")))){\n                                    {\n                                        return await (async function(){\n                                            let __array_op_rval__329=cname;\n                                             if (__array_op_rval__329 instanceof Function){\n                                                return await __array_op_rval__329(children[cname]) \n                                            } else {\n                                                return [__array_op_rval__329,children[cname]]\n                                            }\n                                        })()\n                                    }\n                                }\n                            };\n                            ;\n                            await (async function() {\n                                let __for_body__332=async function(__item) {\n                                    __result=await __action(__item);\n                                    if (check_true (__result)){\n                                        return (__collector).push(__result)\n                                    }\n                                };\n                                let __array__333=[],__elements__331=sorted_dependencies.namespaces;\n                                let __BREAK__FLAG__=false;\n                                for(let __iter__330 in __elements__331) {\n                                    __array__333.push(await __for_body__332(__elements__331[__iter__330]));\n                                    if(__BREAK__FLAG__) {\n                                         __array__333.pop();\n                                        break;\n                                        \n                                    }\n                                }return __array__333;\n                                 \n                            })();\n                            return __collector\n                        })();\n                        await console.log(\"save_env: child_export_order: \",await (async function(){\n                             return await (await get_global(\"each\"))(child_export_order,0) \n                        })());\n                        my_children=await to_object(await (async function(){\n                            let __collector;\n                            let __result;\n                            let __action;\n                            __collector=[];\n                            __result=null;\n                            __action=async function(child) {\n                                if (check_true (await resolve_path(await (async function(){\n                                    let __array_op_rval__334=child['0'];\n                                     if (__array_op_rval__334 instanceof Function){\n                                        return await __array_op_rval__334(\"serialize_with_image\") \n                                    } else {\n                                        return [__array_op_rval__334,\"serialize_with_image\"]\n                                    }\n                                })(),children_declarations))){\n                                    {\n                                        await env_log(\"checking \",namespace,\"checking for: \",await add(child['0'],\"/*on_serialization*\"));\n                                        if (check_true (await not(((typeof await add(child['0'],\"/*on_serialization*\")===\"undefined\")|| (await Environment[\"get_global\"].call(Environment,await add(child['0'],\"/*on_serialization*\"),ReferenceError)===ReferenceError))))){\n                                            {\n                                                await child['1'][\"evaluate\"].call(child['1'],(\"(\"+ child['0']+ \"/*on_serialization*)\"))\n                                            }\n                                        };\n                                        child_env=await child['1'][\"compile\"].call(child['1'],await child['1'][\"export_symbol_set\"].call(child['1'],await add(new Object(),await (async function(){\n                                            if (check_true (options.do_not_include)){\n                                                return {\n                                                    do_not_include:await (async function(){\n                                                        let comps;\n                                                        comps=null;\n                                                        {\n                                                            let ____collector__335= async function(){\n                                                                return []\n                                                            };\n                                                            let ____result__336= async function(){\n                                                                return null\n                                                            };\n                                                            let ____action__337= async function(){\n                                                                return async function(symbol) {\n                                                                    return await async function(){\n                                                                        if (check_true (await contains_ques_(\"/\",symbol))) {\n                                                                            {\n                                                                                comps=(symbol).split(\"/\");\n                                                                                if (check_true ((comps['0']===child['0']))){\n                                                                                    return comps['1']\n                                                                                }\n                                                                            }\n                                                                        } else {\n                                                                            return symbol\n                                                                        }\n                                                                    } ()\n                                                                }\n                                                            };\n                                                            {\n                                                                let __collector=await ____collector__335();\n                                                                ;\n                                                                let __result=await ____result__336();\n                                                                ;\n                                                                let __action=await ____action__337();\n                                                                ;\n                                                                ;\n                                                                await (async function() {\n                                                                    let __for_body__340=async function(__item) {\n                                                                        __result=await __action(__item);\n                                                                        if (check_true (__result)){\n                                                                            return (__collector).push(__result)\n                                                                        }\n                                                                    };\n                                                                    let __array__341=[],__elements__339=options.do_not_include;\n                                                                    let __BREAK__FLAG__=false;\n                                                                    for(let __iter__338 in __elements__339) {\n                                                                        __array__341.push(await __for_body__340(__elements__339[__iter__338]));\n                                                                        if(__BREAK__FLAG__) {\n                                                                             __array__341.pop();\n                                                                            break;\n                                                                            \n                                                                        }\n                                                                    }return __array__341;\n                                                                     \n                                                                })();\n                                                                return __collector\n                                                            }\n                                                        }\n                                                    })()\n                                                }\n                                            } else {\n                                                return new Object()\n                                            }\n                                        })(),{\n                                            no_compiler:true\n                                        })),{\n                                            throw_on_error:true\n                                        });\n                                        return await (async function(){\n                                            let __array_op_rval__342=child['0'];\n                                             if (__array_op_rval__342 instanceof Function){\n                                                return await __array_op_rval__342(await (async function(){\n                                                     return [[\"=:quotel\",child['1'].definitions],await (async function(){\n                                                         return [\"=:quotel\",await (async function(){\n                                                             return [\"=:javascript\",child_env] \n                                                        })()] \n                                                    })()] \n                                                })()) \n                                            } else {\n                                                return [__array_op_rval__342,await (async function(){\n                                                     return [[\"=:quotel\",child['1'].definitions],await (async function(){\n                                                         return [\"=:quotel\",await (async function(){\n                                                             return [\"=:javascript\",child_env] \n                                                        })()] \n                                                    })()] \n                                                })()]\n                                            }\n                                        })()\n                                    }\n                                }\n                            };\n                            ;\n                            await (async function() {\n                                let __for_body__345=async function(__item) {\n                                    __result=await __action(__item);\n                                    if (check_true (__result)){\n                                        return (__collector).push(__result)\n                                    }\n                                };\n                                let __array__346=[],__elements__344=child_export_order;\n                                let __BREAK__FLAG__=false;\n                                for(let __iter__343 in __elements__344) {\n                                    __array__346.push(await __for_body__345(__elements__344[__iter__343]));\n                                    if(__BREAK__FLAG__) {\n                                         __array__346.pop();\n                                        break;\n                                        \n                                    }\n                                }return __array__346;\n                                 \n                            })();\n                            return __collector\n                        })());\n                        await (await get_global(\"set_path\"))(target_insertion_path,src,await (async function(){\n                             return [\"=:fn\",[],await to_object(await (async function(){\n                                 return [[\"definitions\",await (async function(){\n                                     return [\"=:quote\",await (async function(){\n                                        if (check_true (options.do_not_include)){\n                                            return await to_object(await (async function(){\n                                                let __collector;\n                                                let __result;\n                                                let __action;\n                                                __collector=[];\n                                                __result=null;\n                                                __action=async function(defset) {\n                                                    if (check_true (await not(await contains_ques_(defset['0'],options.do_not_include)))){\n                                                        return await (async function(){\n                                                            let __array_op_rval__347=defset['0'];\n                                                             if (__array_op_rval__347 instanceof Function){\n                                                                return await __array_op_rval__347(defset['1']) \n                                                            } else {\n                                                                return [__array_op_rval__347,defset['1']]\n                                                            }\n                                                        })()\n                                                    }\n                                                };\n                                                ;\n                                                await (async function() {\n                                                    let __for_body__350=async function(__item) {\n                                                        __result=await __action(__item);\n                                                        if (check_true (__result)){\n                                                            return (__collector).push(__result)\n                                                        }\n                                                    };\n                                                    let __array__351=[],__elements__349=await pairs(Environment.definitions);\n                                                    let __BREAK__FLAG__=false;\n                                                    for(let __iter__348 in __elements__349) {\n                                                        __array__351.push(await __for_body__350(__elements__349[__iter__348]));\n                                                        if(__BREAK__FLAG__) {\n                                                             __array__351.pop();\n                                                            break;\n                                                            \n                                                        }\n                                                    }return __array__351;\n                                                     \n                                                })();\n                                                return __collector\n                                            })())\n                                        } else {\n                                            return await clone(Environment.definitions)\n                                        }\n                                    })()] \n                                })()],[\"declarations\",await (async function(){\n                                     return await clone(Environment.declarations) \n                                })()],[\"config\",await (async function(){\n                                    let exp_conf;\n                                    exp_conf=await (async function(){\n                                         return await clone(Environment.global_ctx.scope[\"*env_config*\"]) \n                                    })();\n                                    if (check_true (await not(preserve_imports))){\n                                        {\n                                            await async function(){\n                                                exp_conf[\"imports\"]=new Object();\n                                                return exp_conf;\n                                                \n                                            }()\n                                        }\n                                    };\n                                    if (check_true (options.features)){\n                                        {\n                                            await async function(){\n                                                exp_conf[\"features\"]=options.features;\n                                                return exp_conf;\n                                                \n                                            }()\n                                        }\n                                    };\n                                    return exp_conf\n                                })()],[\"imports\",await (async function(){\n                                    if (check_true (preserve_imports)){\n                                        return await to_object(await (async function() {\n                                            let __for_body__356=async function(imp_source) {\n                                                return await (async function(){\n                                                    let __array_op_rval__358=imp_source.symbol;\n                                                     if (__array_op_rval__358 instanceof Function){\n                                                        return await __array_op_rval__358({\n                                                            initializer:await (async function(){\n                                                                 return [\"=:javascript\",\"new function () { return \",imp_source.symbol,\" }\"] \n                                                            })(),symbol:imp_source.symbol,namespace:imp_source.namespace\n                                                        }) \n                                                    } else {\n                                                        return [__array_op_rval__358,{\n                                                            initializer:await (async function(){\n                                                                 return [\"=:javascript\",\"new function () { return \",imp_source.symbol,\" }\"] \n                                                            })(),symbol:imp_source.symbol,namespace:imp_source.namespace\n                                                        }]\n                                                    }\n                                                })()\n                                            };\n                                            let __array__357=[],__elements__355=await values((await resolve_path([\"*env_config*\",\"imports\"],Environment.global_ctx.scope)|| new Object()));\n                                            let __BREAK__FLAG__=false;\n                                            for(let __iter__354 in __elements__355) {\n                                                __array__357.push(await __for_body__356(__elements__355[__iter__354]));\n                                                if(__BREAK__FLAG__) {\n                                                     __array__357.pop();\n                                                    break;\n                                                    \n                                                }\n                                            }return __array__357;\n                                             \n                                        })())\n                                    } else {\n                                        return new Object()\n                                    }\n                                })()],[\"symbols\",await (async function(){\n                                     return [\"=:javascript\",await compile(await to_object(exports),{\n                                        throw_on_error:true\n                                    })] \n                                })()],[\"children_declarations\",await (async function(){\n                                     return [\"=:fn\",[],await clone(children_declarations)] \n                                })()],[\"child_load_order\",await (async function(){\n                                     return await (await get_global(\"each\"))(child_export_order,0) \n                                })()],[\"children\",my_children]] \n                            })())] \n                        })());\n                        output_path=await (async function(){\n                            if (check_true (options.want_buffer)){\n                                return null\n                            } else {\n                                return (options.save_as|| await resolve_path([\"*env_config*\",\"export\",\"save_path\"],Environment.global_ctx.scope))\n                            }\n                        })();\n                        if (check_true (output_path instanceof Function)){\n                            output_path=await (async function(){\n                                let __array_op_rval__359=output_path;\n                                 if (__array_op_rval__359 instanceof Function){\n                                    return await __array_op_rval__359() \n                                } else {\n                                    return [__array_op_rval__359]\n                                }\n                            })()\n                        };\n                        if (check_true ((await not((output_path instanceof String || typeof output_path==='string'))&& output_path))){\n                            throw new EvalError(\"invalid name for target for saving the environment.  Must be a string or function\");\n                            \n                        };\n                        return await async function(){\n                            if (check_true ((want_buffer|| (output_path&& await ends_with_ques_(\".js\",output_path))))) {\n                                {\n                                    (build_headers).push((\"// Build Time: \"+ build_time));\n                                    (build_headers).push((\"// Version: \"+ version_tag));\n                                    (build_headers).push((\"export const DLISP_ENV_VERSION='\"+ version_tag+ \"';\"));\n                                    await env_log(\"saving to: \",output_path);\n                                    return await (await get_global(\"compile_buffer\"))(src,\"init_dlisp\",{\n                                        namespace:namespace,toplevel:true,include_boilerplate:false,verbose:false,bundle:true,want_buffer:want_buffer,imports:await (async function(){\n                                            if (check_true (preserve_imports)){\n                                                return await resolve_path([\"*env_config*\",\"imports\"],Environment.global_ctx.scope)\n                                            }\n                                        })(),js_headers:await (async function(){\n                                             return [await (await get_global(\"show\"))(check_true),await (async function(){\n                                                 return await (await get_global(\"show\"))(get_next_environment_id) \n                                            })(),await (async function(){\n                                                 return await (await get_global(\"show\"))(get_outside_global) \n                                            })(),await (async function(){\n                                                 return await (await get_global(\"show\"))(subtype) \n                                            })(),await (async function(){\n                                                 return await (await get_global(\"show\"))(lisp_writer) \n                                            })(),await (async function(){\n                                                 return await (await get_global(\"show\"))(clone) \n                                            })(),await (async function(){\n                                                 return await (await get_global(\"show\"))(LispSyntaxError) \n                                            })()] \n                                        })(),bundle_options:{\n                                            default_namespace:await resolve_path([\"*env_config*\",\"export\",\"default_namespace\"],Environment.global_ctx.scope)\n                                        },output_file:output_path,include_source:(options.include_source|| await resolve_path([\"*env_config*\",\"export\",\"include_source\"],Environment.global_ctx.scope)),build_headers:build_headers\n                                    })\n                                }\n                            } else if (check_true ((output_path&& await ends_with_ques_(\".lisp\",output_path)))) {\n                                return await (await get_global(\"write_text_file\"))(output_path,await JSON.stringify(src,null,4))\n                            } else {\n                                return src\n                            }\n                        } ()\n                    }],[\"null\",null],[\"exec\",async function(command,options) {\n        let arg_set;\n        let process_info;\n        arg_set=await (async function(){\n             return await async function(){\n                if (check_true ((command instanceof String || typeof command==='string'))) {\n                    return (command).split(\" \")\n                } else if (check_true ((command instanceof Array))) {\n                    return command\n                } else {\n                    throw new TypeError(\"system: invalid command format: must be string or array\");\n                    \n                }\n            } () \n        })();\n        options=await (async function(){\n             return await async function(){\n                if (check_true ((options instanceof Object))) {\n                    return options\n                } else if (check_true ((null==options))) {\n                    return new Object()\n                } else {\n                    throw new TypeError(\"system: options must be an object if provided\");\n                    \n                }\n            } () \n        })();\n        process_info=null;\n        process_info=await Deno.run(await (await Environment.get_global(\"add\"))({\n            cmd:arg_set,stdout:\"piped\",stderr:\"piped\"\n        },options));\n        return process_info\n    }],[\"system\",async function(command) {\n    let result;\n    let status;\n    let rval;\n    result=await (await Environment.get_global(\"exec\"))(command);\n    status=await result[\"status\"]();\n    rval=null;\n    rval=await (await Environment.get_global(\"add\"))({\n        stdout:await (async function(){\n            let it;\n            it=await result[\"output\"]();\n            if (check_true (it)){\n                return await (await Environment.get_global(\"decode_text\"))(it)\n            } else {\n                return null\n            }\n        })(),stderr:await (async function(){\n            let it;\n            it=await result[\"stderrOutput\"]();\n            if (check_true (it)){\n                return await (await Environment.get_global(\"decode_text\"))(it)\n            } else {\n                return \n            }\n        })()\n    },status);\n    await result[\"close\"]();\n    return rval\n}],[\"request\",async function() {\n    return await Deno.permissions.request({\n        name:\"run\"\n    })\n}],[\"compile_executable\",async function(options) {\n    let perms;\n    let perm_flags;\n    let emit_file;\n    let command;\n    let result;\n    perms=await (async function(){\n         return await (await Environment.get_global(\"permissions\"))() \n    })();\n    options=(options|| new Object());\n    perm_flags=await (async function(){\n         return await async function(){\n            if (check_true (((options && options[\"permissions\"]) instanceof Array))) {\n                return await (async function() {\n                    let __for_body__3=async function(p) {\n                        return (\"--allow-\"+ p)\n                    };\n                    let __array__4=[],__elements__2=(options && options[\"permissions\"]);\n                    let __BREAK__FLAG__=false;\n                    for(let __iter__1 in __elements__2) {\n                        __array__4.push(await __for_body__3(__elements__2[__iter__1]));\n                        if(__BREAK__FLAG__) {\n                             __array__4.pop();\n                            break;\n                            \n                        }\n                    }return __array__4;\n                     \n                })()\n            } else {\n                {\n                    let __collector;\n                    let __result;\n                    let __action;\n                    __collector=[];\n                    __result=null;\n                    __action=async function(p) {\n                        let name;\n                        let status;\n                        name=(p && p[\"0\"]);\n                        status=(p && p[\"1\"]);\n                        if (check_true ((status===\"granted\"))){\n                            {\n                                return (\"--allow-\"+ name)\n                            }\n                        }\n                    };\n                    ;\n                    await (async function() {\n                        let __for_body__7=async function(__item) {\n                            __result=await __action(__item);\n                            if (check_true (__result)){\n                                return (__collector).push(__result)\n                            }\n                        };\n                        let __array__8=[],__elements__6=await (await Environment.get_global(\"pairs\"))(await (async function(){\n                             return await (await Environment.get_global(\"permissions\"))() \n                        })());\n                        let __BREAK__FLAG__=false;\n                        for(let __iter__5 in __elements__6) {\n                            __array__8.push(await __for_body__7(__elements__6[__iter__5]));\n                            if(__BREAK__FLAG__) {\n                                 __array__8.pop();\n                                break;\n                                \n                            }\n                        }return __array__8;\n                         \n                    })();\n                    return __collector\n                }\n            }\n        } () \n    })();\n    emit_file=await (async function(){\n         return await async function(){\n            if (check_true ((options && options[\"emit_as\"]))) {\n                return (options && options[\"emit_as\"])\n            } else if (check_true (await (await Environment.get_global(\"resolve_path\"))([\"export\",\"save_executable\"],(await Environment.get_global(\"*env_config*\"))))) {\n                return await (await Environment.get_global(\"resolve_path\"))([\"export\",\"save_executable\"],(await Environment.get_global(\"*env_config*\")))\n            } else {\n                return (\"juno.\"+ (await Environment.get_global(\"*env_config*.build\")))\n            }\n        } () \n    })();\n    command=(await (await Environment.get_global(\"flatten\"))([\"deno compile\",perm_flags,await (async function(){\n        if (check_true (((options && options[\"additional_args\"]) instanceof Array))){\n            return (options && options[\"additional_args\"])\n        } else {\n            return []\n        }\n    })(),\"-o\",emit_file,await (async function(){\n        if (check_true ((((options && options[\"target\"]) instanceof String || typeof (options && options[\"target\"])==='string')&& await (await Environment.get_global(\"not\"))(await (await Environment.get_global(\"blank?\"))((options && options[\"target\"])))))){\n            return [\"-t\",(options && options[\"target\"])]\n        } else {\n            return []\n        }\n    })(),await (async function(){\n         return await async function(){\n            if (check_true (((options && options[\"source\"]) instanceof String || typeof (options && options[\"source\"])==='string'))) {\n                return (options && options[\"source\"])\n            } else if (check_true (await (await Environment.get_global(\"resolve_path\"))([\"export\",\"save_path\"],(await Environment.get_global(\"*env_config*\"))))) {\n                return await (await Environment.get_global(\"resolve_path\"))([\"export\",\"save_path\"],(await Environment.get_global(\"*env_config*\")))\n            } else {\n                throw new TypeError(\"compile_executable: cannot resolve the source option: check env_config or provide source in options\");\n                \n            }\n        } () \n    })()])).join(\" \");\n    result=null;\n    if (check_true (((perms && perms[\"run\"])===\"granted\"))){\n        {\n            result=await (await Environment.get_global(\"system\"))(command);\n            if (check_true ((result && result[\"success\"]))){\n                return {\n                    success:true,emitted:emit_file\n                }\n            } else {\n                return result\n            }\n        }\n    } else {\n        {\n            return {\n                success:false,stderr:\"Invalid permissions: require run permissions, evaluate (sys/request) to request access at the console.\",stdout:\"\"\n            }\n        }\n    }\n}],[\"stat\",function(filepath) {\n        return  Deno.lstatSync(filepath)\n    }],[\"is_file?\",function(filepath) {\n        try {\n            return  ( function(){\n                let __targ__10= ( Environment.get_global(\"stat\"))(filepath);\n                if (__targ__10){\n                     return(__targ__10)[\"isFile\"]\n                } \n            })()\n        } catch (__exception__9) {\n            if (__exception__9 instanceof Error) {\n                let e=__exception__9;\n                {\n                    return false\n                }\n            }\n        }\n    }],[\"is_dir?\",function(filepath) {\n        try {\n            return  ( function(){\n                let __targ__12= ( Environment.get_global(\"stat\"))(filepath);\n                if (__targ__12){\n                     return(__targ__12)[\"isDirectory\"]\n                } \n            })()\n        } catch (__exception__11) {\n            if (__exception__11 instanceof Error) {\n                let e=__exception__11;\n                {\n                    return false\n                }\n            }\n        }\n    }],[\"is_symlink?\",function(filepath) {\n        try {\n            return  ( function(){\n                let __targ__14= ( Environment.get_global(\"stat\"))(filepath);\n                if (__targ__14){\n                     return(__targ__14)[\"isSymlink\"]\n                } \n            })()\n        } catch (__exception__13) {\n            if (__exception__13 instanceof Error) {\n                let e=__exception__13;\n                {\n                    return false\n                }\n            }\n        }\n    }],[\"filesize\",function(filepath) {\n        try {\n            {\n                let it;\n                it= ( Environment.get_global(\"stat\"))(filepath);\n                if (check_true (it)){\n                    if (check_true ((it && it[\"isFile\"]))){\n                        return it[\"size\"]\n                    } else {\n                        return null\n                    }\n                } else {\n                    return \n                }\n            }\n        } catch (__exception__15) {\n            if (__exception__15 instanceof Error) {\n                let e=__exception__15;\n                {\n                    return null\n                }\n            }\n        }\n    }],[\"rename\",function(source_path,remote_path) {\n         Deno.renameSync(source_path,remote_path);\n        return ( ( Environment.get_global(\"is_file?\"))(remote_path)||  ( Environment.get_global(\"is_dir?\"))(remote_path)||  ( Environment.get_global(\"is_symlink?\"))(remote_path)|| false)\n    }],[\"delete_file\",function(filepath) {\n        try {\n            {\n                let fd;\n                fd= ( Environment.get_global(\"stat\"))(filepath);\n                if (check_true (((fd && fd[\"isFile\"])|| (fd && fd[\"isSymlink\"])))){\n                    {\n                         Deno.removeSync(filepath);\n                        return true\n                    }\n                } else {\n                    return false\n                }\n            }\n        } catch (__exception__16) {\n            if (__exception__16 instanceof Error) {\n                let e=__exception__16;\n                {\n                    return false\n                }\n            }\n        }\n    }],[\"delete_dir\",function(dirpath) {\n        if (check_true ( ( Environment.get_global(\"is_dir?\"))(dirpath))){\n            try {\n                 Deno.removeSync(dirpath,{\n                    recursive:true\n                });\n                return true\n            } catch (__exception__17) {\n                if (__exception__17 instanceof Error) {\n                    let e=__exception__17;\n                    {\n                        return false\n                    }\n                }\n            }\n        } else {\n            return false\n        }\n    }],[\"list_files\",async function(dirpath,details_ques_) {\n    if (check_true (await (await Environment.get_global(\"is_dir?\"))(dirpath))){\n        try {\n            {\n                let entries;\n                entries=[];\n                await (async function() {\n                    let __for_body__21=async function(entry) {\n                        if (check_true (details_ques_)){\n                            return (entries).push(await (await Environment.get_global(\"stat\"))(dirpath))\n                        } else {\n                            return (entries).push(entry)\n                        }\n                    };\n                    let __BREAK__FLAG__=false;\n                    for await (const __iter__19 of await Deno.readDir(dirpath)) {\n                        await __for_body__21(__iter__19);\n                        if(__BREAK__FLAG__) break;\n                        \n                    } \n                })();\n                return entries\n            }\n        } catch (__exception__18) {\n            if (__exception__18 instanceof Error) {\n                let e=__exception__18;\n                {\n                    return []\n                }\n            }\n        }\n    } else {\n        return []\n    }\n}],[\"mkdir\",function(dirpath,options) {\n         Deno.mkdirSync(dirpath,options);\n        return  ( Environment.get_global(\"is_dir?\"))(dirpath)\n    }],[\"ensure_path_exists\",function(fspath,options) {\n        return   (function(){\n            if (check_true ((null==fspath))) {\n                throw new ReferenceError(\"ensure_path_exists: nil path argument\");\n                \n            } else if (check_true ( ( Environment.get_global(\"is_file?\"))(fspath))) {\n                return true\n            } else if (check_true ( ( Environment.get_global(\"is_dir?\"))(fspath))) {\n                return true\n            } else if (check_true (((options instanceof Object)&& (options && options[\"dir\"])))) {\n                {\n                     ( Environment.get_global(\"mkdir\"))(fspath, ( Environment.get_global(\"add\"))({\n                        recursive:true\n                    },options));\n                    return  ( Environment.get_global(\"is_dir?\"))(fspath)\n                }\n            } else {\n                {\n                    let fsresult;\n                    let comps;\n                    let dir_name;\n                    let an_error;\n                    fsresult=null;\n                    comps=(fspath).split(\"/\");\n                    dir_name=( ( Environment.get_global(\"but_last\"))(comps)).join(\"/\");\n                    an_error=null;\n                    if (check_true ( ( Environment.get_global(\"not\"))( ( Environment.get_global(\"blank?\"))(dir_name)))){\n                        {\n                             ( Environment.get_global(\"mkdir\"))(dir_name, ( Environment.get_global(\"add\"))({\n                                recursive:true\n                            }, ( function(){\n                                if (check_true ((options instanceof Object))){\n                                    return options\n                                } else {\n                                    return new Object()\n                                }\n                            })()));\n                            if (check_true ( ( Environment.get_global(\"not\"))( ( Environment.get_global(\"is_dir?\"))(dir_name)))){\n                                {\n                                    throw new Error((\"ensure_path_exists: cannot make parent directories: \"+ dir_name));\n                                    \n                                }\n                            }\n                        }\n                    };\n                    fsresult= Deno.createSync(fspath);\n                    if (check_true (fsresult)){\n                         fsresult[\"close\"]()\n                    };\n                    if (check_true ((fsresult&& (options && options[\"mode\"])))){\n                        {\n                            try {\n                                 Deno.chmodSync(fspath,(options && options[\"mode\"]))\n                            } catch (__exception__22) {\n                                if (__exception__22 instanceof Error) {\n                                    let e=__exception__22;\n                                    {\n                                        {\n                                            an_error=e\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    if (check_true (an_error)){\n                        throw an_error;\n                        \n                    } else {\n                        return true\n                    }\n                }\n            }\n        } )()\n    }],[\"copy_file\",function(from_path,to_path) {\n        if (check_true (((from_path instanceof String || typeof from_path==='string')&& (to_path instanceof String || typeof to_path==='string')))){\n            {\n                 Deno.copyFileSync(from_path,to_path);\n                return  ( Environment.get_global(\"is_file?\"))(to_path)\n            }\n        } else {\n            throw new TypeError(\"copy_file: bad argument(s): requires two string arguments\");\n            \n        }\n    }],[\"watch_fs\",async function(paths,options) {\n    return await Deno.watchFs(paths,options)\n}],[\"dir_tree\",async function(dirpath,options) {\n    let base_dir;\n    let results;\n    let reducer;\n    let __traverse__23= async function(){\n        return async function(path) {\n            return await (async function() {\n                let __for_body__26=async function(entry) {\n                    await async function(){\n                        entry[\"name\"]=await (await Environment.get_global(\"add\"))(path,\"/\",(entry && entry.name));\n                        return entry;\n                        \n                    }();\n                    if (check_true (reducer)){\n                        if (check_true (await (async function(){\n                            let __array_op_rval__29=reducer;\n                             if (__array_op_rval__29 instanceof Function){\n                                return await __array_op_rval__29(entry) \n                            } else {\n                                return [__array_op_rval__29,entry]\n                            }\n                        })())){\n                            (results).push(entry)\n                        }\n                    } else {\n                        (results).push(entry)\n                    };\n                    if (check_true ((entry && entry[\"isDirectory\"]))){\n                        return await traverse((entry && entry.name))\n                    }\n                };\n                let __array__27=[],__elements__25=await (await Environment.get_global(\"list_files\"))(path);\n                let __BREAK__FLAG__=false;\n                for(let __iter__24 in __elements__25) {\n                    __array__27.push(await __for_body__26(__elements__25[__iter__24]));\n                    if(__BREAK__FLAG__) {\n                         __array__27.pop();\n                        break;\n                        \n                    }\n                }return __array__27;\n                 \n            })()\n        }\n    };\n    {\n        base_dir=dirpath;\n        results=[];\n        options=(options|| new Object());\n        reducer=(options && options[\"reducer\"]);\n        let traverse=await __traverse__23();\n        ;\n        if (check_true (await (await Environment.get_global(\"is_dir?\"))(dirpath))){\n            {\n                await traverse(dirpath)\n            }\n        };\n        return results\n    }\n}],[\"make_temp_dir\",async function(opts) {\n    return await Deno[\"makeTempDir\"].call(Deno,opts)\n}],[\"with_temp_dir\",async function(...args) {\n    let tmp_path;\n    let body_forms;\n    tmp_path=(args && args[\"0\"] && args[\"0\"][\"0\"]);\n    body_forms=await (await Environment.get_global(\"slice\"))(args,1);\n    {\n        await console.log(\"with_tmp_dir: \",body_forms);\n        return [\"=:let\",[[tmp_path,[\"=:sys/make_temp_dir\"]],[\"=:caught_error\",\"=:nil\"],[\"=:rval\",\"=:nil\"]],[\"=:try\",[\"=:=\",\"=:rval\",[\"=:progn\",].concat(body_forms)],[\"=:catch\",\"=:Error\",[\"=:e\"],[\"=:progn\",[\"=:=\",\"=:caught_error\",\"=:e\"]]]],[\"=:when\",[\"=:is_dir?\",tmp_path],[\"=:sys/delete_dir\",tmp_path]],[\"=:if\",\"=:caught_error\",[\"=:throw\",\"=:caught_error\"],\"=:rval\"]]\n    }\n}]]"] 
        })()] 
    })(),http:await (async function(){
         return [{"meta_for_symbol":{"core_lang":true,"description":"Given a quoted symbol and a boolean indicating whether or not all namespaces should be searched, returns the meta data associated with the symbol for each environment.  If search mode is requested, the value returned is an array, since there can be symbols with the same name in different environments. If no values are found an empty array is returned.  If not in search mode, meta_for_symbol searches the current namespace only, and if a matching symbol is found, returns an object with all found metadata, otherwise nil is returned.","usage":["quoted_symbol:string","search_mode:boolean"],"tags":["describe","meta","help","definition","symbol","metadata"]},"describe":{"core_lang":true,"description":"Given a quoted symbol returns the relevant metadata pertinent to the current namespace context.","usage":["quoted_symbol:string","search_mode:boolean"],"tags":["meta","help","definition","symbol","metadata","info","meta_for_symbol"]},"undefine":{"core_lang":true,"description":"Given a quoted symbol removes the symbol and any definition information from the namespace. If the namespace is fully-qualified, then the symbol will be removed from the specified namespace instead of the currently active namespace. If the symbol is successfully removed, the function will return true, otherwise if it is not found, false will be returned.  Note that if the specified symbol is non-qualified, but exists in a different, accessible namespace, but the symbol isn't present in the current namespace, the symbol will not be deleted.  The environment is not searched and therefore symbols have to be explicitly fully-qualified for any effect of this function outside the current namespace.","usage":["quoted_symbol:string"],"tags":["symbol","delete","remove","unintern","reference","value"]},"*namespace*":{"core_lang":true},"pend_load":{"core_lang":true,"description":"When used as an initializer wrapper via the use_symbols macro, the wrapped initializer will not be loaded until the from_namespace is loaded to ensure that the wrapped initializer won't fail due to not yet loaded dependencies.","usage":["from_namespace:string","target_namespace:string","symbol:string","initializer:array"],"tags":["symbol","definitions","namespace","scope","dependency","dependencies","require"]},"symbols":{"core_lang":true,"description":"Returns an array of the defined global symbols for the local environment.  If opts.unique is true, only symbols that are not part of the built ins are included.","usage":["opts:object"],"tags":["symbol","names","definitions","values","scope"]},"set_global":{"core_lang":true},"get_global":{"core_lang":true},"symbol_definition":{"core_lang":true,"description":"Given a symbol name and an optional namespace, either as a fully qualified path or via the target_namespace argument, returns definition information about the retquested symbol.  Used primarily by the compiler to find metadata for a specific symbol during compilation.","usage":["symname:string","namespace:string"],"tags":["compiler","symbols","namespace","search","context","environment"]},"compile":{"core_lang":true,"description":"Compiles the given JSON or quoted lisp and returns a string containing the lisp form or expression as javascript.<br>If passed the option { meta: true } , an array is returned containing compilation metadata in element 0 and the compiled code in element 1.","usage":["json_expression:*","opts:object"],"tags":["macro","quote","quotes","desym","compiler"]},"env_log":{"core_lang":true,"description":"The environment logging function used by the environment.","usage":["arg0:*","argN:*"]},"evaluate_local":{"core_lang":true},"evaluate":{"core_lang":true},"eval_struct":{"core_lang":true},"is_Response?":{"name":"is_Response?","fn_args":"(value)","description":"Returns true if the value provided is a Response object, otherwise false.","usage":["value:object"],"tags":["request","response","fetch","http"],"requires":[],"externals":["Response"],"source_name":"pkg/http_client.juno"},"get_content_type":{"name":"get_content_type","fn_args":"(obj)","description":"For the given response object attempts to return the content-type value","usage":["response:Response"],"tags":["response","content","mime","fetch","http"],"requires":[],"externals":["Response"],"source_name":"pkg/http_client.juno"},"send_http":{"name":"send_http","fn_args":"(method url data headers)","description":["=:+","Given a method, a url and optional headers, the send_http ","function invokes the underlying fetch function and returns ","the response object.  Optional headers can be provided as ","an object which will be included in the request.  The ","data argument will be stringified using JSON.stringify."],"usage":["method:string","url:string","data:*","headers:object"],"tags":["fetch","http","request","response","io","send","post","get"],"requires":["is_string?","add","is_object?"],"externals":["Response","fetch","JSON","SyntaxError"],"source_name":"pkg/http_client.juno"},"response_handler":{"name":"response_handler","fn_args":"(response options)","description":["=:+","This function takes a response object and based on the provided options ","will either return the body of the response if the HTTP response is 200 OK ","or if either options.raw_response is set to true or a non 200 response ","is returned, will directly return the response.  Used by the functions ","post and get."],"usage":["response:Response","options:object"],"tags":["response","mime","http"],"requires":["get_content_type","starts_with?"],"externals":["Response","fetch","JSON","SyntaxError"],"source_name":"pkg/http_client.juno"},"post":{"name":"post","fn_args":"(url data options)","description":["=:+","Given a url string, a data object and an optional options ","object, performs a POST to the provided URL, and returns ","the value of the response body if a 200 OK is received. ","The response body is parsed as JSON if the content-type ","returned is application/json, text if the content-type ","returned starts with text.  Otherwise a blob representing ","the body is returned.  If the option for raw_response is ","true, the received Response is returned directly with ","no prior processing.  Other options are passed on to ","send_http for use in that function."],"usage":["url:string","data:*","options:object"],"tags":["fetch","post","http","response","request","io","send"],"requires":["send_http","response_handler"],"externals":["Response","fetch","JSON","SyntaxError"],"source_name":"pkg/http_client.juno"},"put":{"name":"put","fn_args":"(url data options)","description":["=:+","Given a url string, a data object and an optional options ","object, performs a PUT to the provided URL, and returns ","the value of the response body if a 200 OK is received. ","The response body is parsed as JSON if the content-type ","returned is application/json, text if the content-type ","returned starts with text.  Otherwise a blob representing ","the body is returned.  If the option for raw_response is ","true, the received Response is returned directly with ","no prior processing.  Other options are passed on to ","send_http for use in that function."],"usage":["url:string","data:*","options:object"],"tags":["fetch","post","http","response","request","io","send"],"requires":["send_http","response_handler"],"externals":["Response","fetch","JSON","SyntaxError"],"source_name":"pkg/http_client.juno"},"get":{"name":"get","fn_args":"(url options)","description":["=:+","Given a url string, and an optional options object ","performs a GET to the provided URL, and returns ","the value of the response body if a 200 OK is received. ","The response body is parsed as JSON if the content-type ","returned is application/json, text if the content-type ","returned starts with text.  Otherwise a blob representing ","the body is returned.  If the option for raw_response is ","true, the received Response is returned directly with ","no prior processing.  Other options are passed on to ","the fetch function as the options argument."],"usage":["url:string","data:*","options:object"],"tags":["fetch","post","http","response","request","io","send"],"requires":["add","is_object?","response_handler"],"externals":["Response","fetch","JSON","SyntaxError"],"source_name":"pkg/http_client.juno"},"send_files":{"name":"send_files","fn_args":"(url file_object options)","usage":["url:string","file_object:object|array","options:?object"],"description":["=:+","Posts a file or files to the location specified by the url and returns ","either the results of the posting operation if all a 200 OK is received ","or will return an unprocessed response object if a non 200 status ","code is returned, or if raw_response is set to true in the options."],"tags":["http","fetch","file","files","io","send","post"],"requires":["is_object?","is_array?","response_handler"],"externals":["Response","fetch","JSON","SyntaxError","FormData"],"source_name":"pkg/http_client.juno"},"data_to_file":{"name":"data_to_file","fn_args":"(name data content_type last_modified)","usage":["name:string","data:*","content_type:?string","last_modified:?number"],"description":"For the given arguments returns a File object representing the provided data.","tags":["file","convert","text","io"],"requires":["is_string?","not","is_object?","starts_with?","add","is_number?"],"externals":["Response","fetch","JSON","SyntaxError","FormData","TypeError","Blob","File"],"source_name":"pkg/http_client.juno"},"list_files":{"name":"list_files","fn_args":"(path)","description":"Given a path to a directory, returns an array of elements if the path is found, otherwise will throw an Error.","usage":["path:string"],"tags":["files","io","path","directory","folder"],"requires":["http/get"],"externals":["Response","fetch","JSON","SyntaxError","FormData","TypeError","Blob","File","Error"],"source_name":"pkg/http_client.juno"},"create_websocket":{"name":"create_websocket","fn_args":"(uri options)","usage":"[uri:string] [options:object]","description":["=:+","Creates a websocket client with the given uri format: ws://hostname:port/path and returns a WebSocket object.","Options are as follows with each function receiving the event object as a single argument:<br>","on_open:function - Called when the socket is opened<br>","on_close:function - Called when the socket is closed<br>","on_message:function - Called when the socket receives a message event<br>","on_error:function - Called when an error event occurs on the socket.<br>"],"tags":["socket","websocket","connection","uri","url","events","messages","message","open","create"],"requires":[],"externals":["Response","fetch","JSON","SyntaxError","FormData","TypeError","Blob","File","Error","console","WebSocket"],"source_name":"pkg/http_client.juno"},"send_to_ws":{"name":"send_to_ws","fn_args":"(ws data)","description":["=:+","Given an active websocket and a data value such as a string or object, sends that data value over ","the websocket. If the websocket is an object, it will call JSON.stringify on the object prior to ","sending."],"usage":["ws:WebSocket","data:*"],"tags":["socket","websocket","connection","uri","url","events","messages","message"],"requires":["is_object?","log"],"externals":["Response","fetch","JSON","SyntaxError","FormData","TypeError","Blob","File","Error","console","WebSocket"],"source_name":"pkg/http_client.juno"},"close_ws":{"name":"close_ws","fn_args":"(ws)","description":["=:+","Closes the provided websocket and returns the result of the operation."],"usage":["ws:WebSocket"],"tags":["socket","websocket","connection","uri","url","events","messages","message","close"],"requires":[],"externals":["Response","fetch","JSON","SyntaxError","FormData","TypeError","Blob","File","Error","console","WebSocket"],"source_name":"pkg/http_client.juno"},"load":{"name":"load","fn_args":"(filename)","description":["=:+","Compile and load the contents of the specified lisp ","filename (including path) into the Lisp environment. ","Non-qualified symbols will be loaded by default into ","the current namespace.  Otherwise, if qualified they ","will be loaded to the specified namespace.<br>","The file contents are expected to be Lisp source code ","in text format."],"tags":["compile","read","io","file","input"],"usage":["filename:string"],"requires":["is_string?","not","blank?","current_namespace","assert","fetch_text"],"externals":["Response","fetch","JSON","SyntaxError","FormData","TypeError","Blob","File","Error","console","WebSocket"],"source_name":"pkg/http_client.juno"}},await (async function(){
             return ["=:javascript","[[\"meta_for_symbol\",function(quoted_symbol,search_mode) {\n                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){\n                            {\n                                let local_data=(Environment.global_ctx.scope[quoted_symbol]|| Environment.definitions[quoted_symbol]);\n                                ;\n                                let acc=[];\n                                ;\n                                if (check_true (search_mode)){\n                                    {\n                                        if (check_true (local_data)){\n                                            {\n                                                (acc).push( ( get_global(\"add\"))({\n                                                    namespace:namespace,name:quoted_symbol,type: subtype(local_data)\n                                                }, ( function(){\n                                                    let it;\n                                                    it=Environment.definitions[quoted_symbol];\n                                                    if (check_true (it)){\n                                                        return it\n                                                    } else {\n                                                        return new Object()\n                                                    }\n                                                })()))\n                                            }\n                                        };\n                                        if (check_true (parent_environment)){\n                                            {\n                                                {\n                                                    let __collector;\n                                                    let __result;\n                                                    let __action;\n                                                    __collector=[];\n                                                    __result=null;\n                                                    __action=function(info) {\n                                                        return (acc).push(info)\n                                                    };\n                                                    ;\n                                                     ( function() {\n                                                        let __for_body__121=function(__item) {\n                                                            __result= __action(__item);\n                                                            if (check_true (__result)){\n                                                                return (__collector).push(__result)\n                                                            }\n                                                        };\n                                                        let __array__122=[],__elements__120= ( function() {\n                                                            {\n                                                                 let __call_target__= parent_environment[\"meta_for_symbol\"].call(parent_environment,quoted_symbol,true), __call_method__=\"flat\";\n                                                                return  __call_target__[__call_method__].call(__call_target__,1)\n                                                            } \n                                                        })();\n                                                        let __BREAK__FLAG__=false;\n                                                        for(let __iter__119 in __elements__120) {\n                                                            __array__122.push( __for_body__121(__elements__120[__iter__119]));\n                                                            if(__BREAK__FLAG__) {\n                                                                 __array__122.pop();\n                                                                break;\n                                                                \n                                                            }\n                                                        }return __array__122;\n                                                         \n                                                    })();\n                                                    __collector\n                                                }\n                                            }\n                                        };\n                                        if (check_true (( length( keys(children))>0))){\n                                            {\n                                                {\n                                                    let __collector;\n                                                    let __result;\n                                                    let __action;\n                                                    __collector=[];\n                                                    __result=null;\n                                                    __action=function(details) {\n                                                        return (acc).push(details)\n                                                    };\n                                                    ;\n                                                     ( function() {\n                                                        let __for_body__125=function(__item) {\n                                                            __result= __action(__item);\n                                                            if (check_true (__result)){\n                                                                return (__collector).push(__result)\n                                                            }\n                                                        };\n                                                        let __array__126=[],__elements__124= ( function(){\n                                                            let ____collector__127=  function(){\n                                                                return []\n                                                            };\n                                                            let ____result__128=  function(){\n                                                                return null\n                                                            };\n                                                            let ____action__129=  function(){\n                                                                return function(child_data) {\n                                                                    if (check_true ( not((child_data['0']=== ( get_global(\"current_namespace\"))())))){\n                                                                        {\n                                                                            return  child_data['1'][\"meta_for_symbol\"].call(child_data['1'],quoted_symbol)\n                                                                        }\n                                                                    }\n                                                                }\n                                                            };\n                                                            {\n                                                                let __collector= ____collector__127();\n                                                                ;\n                                                                let __result= ____result__128();\n                                                                ;\n                                                                let __action= ____action__129();\n                                                                ;\n                                                                ;\n                                                                 ( function() {\n                                                                    let __for_body__132=function(__item) {\n                                                                        __result= __action(__item);\n                                                                        if (check_true (__result)){\n                                                                            return (__collector).push(__result)\n                                                                        }\n                                                                    };\n                                                                    let __array__133=[],__elements__131= pairs(children);\n                                                                    let __BREAK__FLAG__=false;\n                                                                    for(let __iter__130 in __elements__131) {\n                                                                        __array__133.push( __for_body__132(__elements__131[__iter__130]));\n                                                                        if(__BREAK__FLAG__) {\n                                                                             __array__133.pop();\n                                                                            break;\n                                                                            \n                                                                        }\n                                                                    }return __array__133;\n                                                                     \n                                                                })();\n                                                                return __collector\n                                                            }\n                                                        })();\n                                                        let __BREAK__FLAG__=false;\n                                                        for(let __iter__123 in __elements__124) {\n                                                            __array__126.push( __for_body__125(__elements__124[__iter__123]));\n                                                            if(__BREAK__FLAG__) {\n                                                                 __array__126.pop();\n                                                                break;\n                                                                \n                                                            }\n                                                        }return __array__126;\n                                                         \n                                                    })();\n                                                    __collector\n                                                }\n                                            }\n                                        };\n                                        return acc\n                                    }\n                                } else {\n                                    {\n                                        quoted_symbol= ( function(){\n                                            if (check_true ( starts_with_ques_( ( function(){\n                                                 return \"=:\" \n                                            })(),quoted_symbol))){\n                                                return  quoted_symbol[\"substr\"].call(quoted_symbol,2)\n                                            } else {\n                                                return quoted_symbol\n                                            }\n                                        })();\n                                        {\n                                            let it;\n                                            it=Environment.definitions[quoted_symbol];\n                                            if (check_true (it)){\n                                                return  ( get_global(\"add\"))({\n                                                    namespace:namespace,type: sub_type(local_data),name:quoted_symbol\n                                                },it)\n                                            } else {\n                                                return null\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }],[\"describe\",async function(quoted_symbol,search_mode) {\n                        let internal_results=await meta_for_symbol(quoted_symbol,true);\n                        ;\n                        if (check_true (((internal_results instanceof Array)&& internal_results['0']))){\n                            if (check_true (search_mode)){\n                                return internal_results\n                            } else {\n                                return await first(internal_results)\n                            }\n                        } else {\n                            {\n                                let external_results=await get_outside_global(quoted_symbol);\n                                ;\n                                if (check_true (external_results)){\n                                    {\n                                        let detail={\n                                            location:\"external\",type:await subtype(external_results),name:quoted_symbol,namespace:\"EXTERNAL\",description:(\"This is not a bound symbol within the Juno Environment.  \"+ \"If it is to be used, it is recommended to create a reference to it with \"+ \"`(defglobal \"+ quoted_symbol+ \" \"+ quoted_symbol+ \" { `description: \\\"...\\\" })`\")\n                                        };\n                                        ;\n                                        if (check_true (search_mode)){\n                                            return await (async function(){\n                                                let __array_op_rval__136=detail;\n                                                 if (__array_op_rval__136 instanceof Function){\n                                                    return await __array_op_rval__136() \n                                                } else {\n                                                    return [__array_op_rval__136]\n                                                }\n                                            })()\n                                        } else {\n                                            return detail\n                                        }\n                                    }\n                                } else {\n                                    return null\n                                }\n                            }\n                        }\n                    }],[\"undefine\",function(quoted_symbol) {\n                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){\n                            {\n                                let namespace_identity;\n                                let parent_call;\n                                let child_call;\n                                let target_symbol;\n                                namespace_identity=(quoted_symbol).split(\"/\");\n                                parent_call=null;\n                                child_call=null;\n                                target_symbol=null;\n                                ;\n                                return   (function(){\n                                    if (check_true ((((namespace_identity.length===1)&& Environment.global_ctx.scope[namespace_identity['0']])|| ((namespace_identity.length>1)&& (namespace_identity['0']===namespace))))) {\n                                        {\n                                            target_symbol= ( function(){\n                                                if (check_true ((namespace_identity.length>1))){\n                                                    return namespace_identity['1']\n                                                } else {\n                                                    return namespace_identity['0']\n                                                }\n                                            })();\n                                             delete_prop(Environment.definitions,target_symbol);\n                                            if (check_true (Environment.global_ctx.scope[target_symbol])){\n                                                return  delete_prop(Environment.global_ctx.scope,target_symbol)\n                                            } else {\n                                                return false\n                                            }\n                                        }\n                                    } else if (check_true (((namespace_identity.length>1)&& parent_environment))) {\n                                        {\n                                            parent_call= parent_environment[\"get_global\"].call(parent_environment,\"undefine\");\n                                            return (parent_call)(quoted_symbol)\n                                        }\n                                    } else if (check_true (((namespace_identity.length>1)&& children[namespace_identity['0']]))) {\n                                        {\n                                            child_call= ( function() {\n                                                {\n                                                     let __call_target__=children[namespace_identity['0']], __call_method__=\"get_global\";\n                                                    return  __call_target__[__call_method__].call(__call_target__,\"undefine\")\n                                                } \n                                            })();\n                                            return  child_call(quoted_symbol)\n                                        }\n                                    } else {\n                                        return false\n                                    }\n                                } )()\n                            }\n                        } else {\n                            throw new SyntaxError(\"undefine requires a quoted symbol\");\n                            \n                        }\n                    }],[\"*namespace*\",\"http\"],[\"pend_load\",async function(from_namespace,target_namespace,symbol,initializer) {\n                        if (check_true ((null==pending_ns_loads[from_namespace]))){\n                            {\n                                await async function(){\n                                    pending_ns_loads[from_namespace]=[];\n                                    return pending_ns_loads;\n                                    \n                                }()\n                            }\n                        };\n                        (pending_ns_loads[from_namespace]).push({\n                            symbol:symbol,source_ns:from_namespace,target_ns:target_namespace,initializer:await (async function(){\n                                 return [\"=:quote\",initializer] \n                            })()\n                        });\n                        return initializer\n                    }],[\"symbols\",async function(opts) {\n                        return await async function(){\n                            if (check_true ((null==opts))) {\n                                return await keys(Environment.global_ctx.scope)\n                            } else if (check_true (opts.unique)) {\n                                {\n                                    let no_includes=await make_set(await conj([\"meta_for_symbol\",\"describe\",\"undefine\",\"*namespace*\",\"pend_load\",\"symbols\",\"set_global\",\"get_global\",\"symbol_definition\",\"compile\",\"env_log\",\"evaluate_local\",\"evaluate\",\"eval_struct\",\"set_compiler\",\"clone\",\"eval\",\"add_escape_encoding\",\"get_outside_global\",\"as_lisp\",\"lisp_writer\",\"clone_to_new\",\"save_env\",\"null\",\"compiler\"],built_ins));\n                                    ;\n                                    {\n                                        let __collector;\n                                        let __result;\n                                        let __action;\n                                        __collector=[];\n                                        __result=null;\n                                        __action=async function(sym) {\n                                            if (check_true (await no_includes[\"has\"].call(no_includes,sym))){\n                                                return null\n                                            } else {\n                                                return sym\n                                            }\n                                        };\n                                        ;\n                                        await (async function() {\n                                            let __for_body__213=async function(__item) {\n                                                __result=await __action(__item);\n                                                if (check_true (__result)){\n                                                    return (__collector).push(__result)\n                                                }\n                                            };\n                                            let __array__214=[],__elements__212=await keys(Environment.global_ctx.scope);\n                                            let __BREAK__FLAG__=false;\n                                            for(let __iter__211 in __elements__212) {\n                                                __array__214.push(await __for_body__213(__elements__212[__iter__211]));\n                                                if(__BREAK__FLAG__) {\n                                                     __array__214.pop();\n                                                    break;\n                                                    \n                                                }\n                                            }return __array__214;\n                                             \n                                        })();\n                                        return __collector\n                                    }\n                                }\n                            }\n                        } ()\n                    }],[\"set_global\",function(refname,value,meta,is_constant,target_namespace,contained_req) {\n                          (function(){\n                            if (check_true ( not((typeof refname===\"string\")))) {\n                                throw new TypeError(\"reference name must be a string type\");\n                                \n                            } else if (check_true (((Environment===value)|| (Environment.global_ctx===value)|| (Environment.global_ctx.scope===value)))) {\n                                {\n                                    throw new EvalError(\"cannot set the environment scope as a global value\");\n                                    \n                                }\n                            }\n                        } )();\n                        if (check_true ( resolve_path( ( function(){\n                            let __array_op_rval__217=refname;\n                             if (__array_op_rval__217 instanceof Function){\n                                return  __array_op_rval__217(\"constant\") \n                            } else {\n                                return [__array_op_rval__217,\"constant\"]\n                            }\n                        })(),Environment.definitions))){\n                            {\n                                throw new TypeError((\"Assignment to constant variable \"+ refname));\n                                \n                            }\n                        };\n                        let namespace_identity= ( function(){\n                            if (check_true (target_namespace)){\n                                return  ( function(){\n                                    let __array_op_rval__218=target_namespace;\n                                     if (__array_op_rval__218 instanceof Function){\n                                        return  __array_op_rval__218(refname) \n                                    } else {\n                                        return [__array_op_rval__218,refname]\n                                    }\n                                })()\n                            } else {\n                                return (refname).split(\"/\")\n                            }\n                        })();\n                        ;\n                        return   (function(){\n                            if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace===namespace_identity['0']))))) {\n                                return  parent_environment[\"set_global\"].call(parent_environment,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'],(contained|| contained_req))\n                            } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {\n                                {\n                                    if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){\n                                        return  ( function() {\n                                            {\n                                                 let __call_target__=children[namespace_identity['0']], __call_method__=\"set_global\";\n                                                return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'])\n                                            } \n                                        })()\n                                    } else {\n                                        throw new EvalError((\"namespace \"+ namespace_identity['0']+ \" doesn't exist\"));\n                                        \n                                    }\n                                }\n                            } else {\n                                try {\n                                    let comps= get_object_path( ( function(){\n                                        if (check_true ((1===namespace_identity.length))){\n                                            return namespace_identity['0']\n                                        } else {\n                                            return namespace_identity['1']\n                                        }\n                                    })());\n                                    ;\n                                      (function(){\n                                        Environment.global_ctx.scope[comps['0']]=value;\n                                        return Environment.global_ctx.scope;\n                                        \n                                    })();\n                                    if (check_true (((meta instanceof Object)&&  not((meta instanceof Array))))){\n                                        {\n                                            if (check_true (is_constant)){\n                                                {\n                                                      (function(){\n                                                        meta[\"constant\"]=true;\n                                                        return meta;\n                                                        \n                                                    })()\n                                                }\n                                            };\n                                              (function(){\n                                                Environment.definitions[comps['0']]=meta;\n                                                return Environment.definitions;\n                                                \n                                            })()\n                                        }\n                                    } else {\n                                        if (check_true (is_constant)){\n                                            {\n                                                  (function(){\n                                                    Environment.definitions[comps['0']]={\n                                                        constant:true\n                                                    };\n                                                    return Environment.definitions;\n                                                    \n                                                })()\n                                            }\n                                        }\n                                    };\n                                    return Environment.global_ctx.scope[comps['0']]\n                                } catch (__exception__219) {\n                                    if (__exception__219 instanceof Error) {\n                                        let e=__exception__219;\n                                        {\n                                            {\n                                                let message=(\"Error: set_global: \"+ _star_namespace_star_+ \"symbol name: \"+ refname+ \": \"+ e.message);\n                                                ;\n                                                 console.error(message,[]);\n                                                  (function(){\n                                                    e[\"message\"]=message;\n                                                    return e;\n                                                    \n                                                })();\n                                                throw e;\n                                                \n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        } )()\n                    }],[\"get_global\",function(refname,value_if_not_found,suppress_check_external_env,target_namespace,path_comps,contained_req) {\n                        return   (function(){\n                            if (check_true ( not((typeof refname===\"string\")))) {\n                                throw new TypeError(\"reference name must be a string type\");\n                                \n                            } else if (check_true ((refname===\"Environment\"))) {\n                                return Environment\n                            } else if (check_true ( compiler_operators[\"has\"].call(compiler_operators,refname))) {\n                                return special_identity\n                            } else {\n                                {\n                                    let namespace_identity;\n                                    let comps;\n                                    let refval;\n                                    let symbol_name;\n                                    let check_external_env;\n                                    namespace_identity= ( function(){\n                                        if (check_true (target_namespace)){\n                                            return  ( function(){\n                                                let __array_op_rval__227=target_namespace;\n                                                 if (__array_op_rval__227 instanceof Function){\n                                                    return  __array_op_rval__227(refname) \n                                                } else {\n                                                    return [__array_op_rval__227,refname]\n                                                }\n                                            })()\n                                        } else {\n                                            return (refname).split(\"/\")\n                                        }\n                                    })();\n                                    comps=(path_comps||  get_object_path( ( function(){\n                                        if (check_true ((1===namespace_identity.length))){\n                                            return namespace_identity['0']\n                                        } else {\n                                            return namespace_identity['1']\n                                        }\n                                    })()));\n                                    refval=null;\n                                    symbol_name=null;\n                                    check_external_env= ( function(){\n                                        if (check_true (suppress_check_external_env)){\n                                            return false\n                                        } else {\n                                            return check_external_env_default\n                                        }\n                                    })();\n                                    return   (function(){\n                                        if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {\n                                            return  parent_environment[\"get_global\"].call(parent_environment,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps,(contained|| contained_req))\n                                        } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {\n                                            {\n                                                if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){\n                                                    return  ( function() {\n                                                        {\n                                                             let __call_target__=children[namespace_identity['0']], __call_method__=\"get_global\";\n                                                            return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps)\n                                                        } \n                                                    })()\n                                                } else {\n                                                    {\n                                                        throw new EvalError((\"namespace \"+ namespace_identity['0']+ \" doesn't exist\"));\n                                                        \n                                                    }\n                                                }\n                                            }\n                                        } else {\n                                            {\n                                                refval=Environment.global_ctx.scope[comps['0']];\n                                                if (check_true (((undefined===refval)&& (namespace_identity.length===1)&& parent_environment))){\n                                                    {\n                                                        let rval= parent_environment[\"get_global\"].call(parent_environment,refname,value_if_not_found,suppress_check_external_env,null,comps,(contained|| contained_req));\n                                                        ;\n                                                        return rval\n                                                    }\n                                                } else {\n                                                    {\n                                                        if (check_true (((undefined===refval)&& check_external_env))){\n                                                            refval= ( function(){\n                                                                if (check_true (check_external_env)){\n                                                                    return ( get_outside_global(comps['0'])|| NOT_FOUND)\n                                                                } else {\n                                                                    return NOT_FOUND\n                                                                }\n                                                            })()\n                                                        };\n                                                        return   (function(){\n                                                            if (check_true (((NOT_FOUND===refval)&&  not((undefined===value_if_not_found))))) {\n                                                                return value_if_not_found\n                                                            } else if (check_true ((NOT_FOUND===refval))) {\n                                                                {\n                                                                    throw new ReferenceError((\"symbol not found: \"+  ( function(){\n                                                                        if (check_true ((namespace_identity.length>1))){\n                                                                            return  add(namespace,\"/\",namespace_identity['1'])\n                                                                        } else {\n                                                                            return  add(namespace,\"/\",namespace_identity['0'])\n                                                                        }\n                                                                    })()));\n                                                                    \n                                                                }\n                                                            } else if (check_true ((comps.length===1))) {\n                                                                return refval\n                                                            } else if (check_true ((comps.length>1))) {\n                                                                {\n                                                                    return  resolve_path( rest(comps),refval)\n                                                                }\n                                                            } else {\n                                                                {\n                                                                     console.warn(\"get_global: condition fall through: \",comps);\n                                                                    return NOT_FOUND\n                                                                }\n                                                            }\n                                                        } )()\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    } )()\n                                }\n                            }\n                        } )()\n                    }],[\"symbol_definition\",async function(symname,target_namespace) {\n                        let namespace_identity;\n                        namespace_identity=await (async function(){\n                            if (check_true (target_namespace)){\n                                return await (async function(){\n                                    let __array_op_rval__230=target_namespace;\n                                     if (__array_op_rval__230 instanceof Function){\n                                        return await __array_op_rval__230(symname) \n                                    } else {\n                                        return [__array_op_rval__230,symname]\n                                    }\n                                })()\n                            } else {\n                                if (check_true ((await length(symname)>2))){\n                                    return (symname).split(\"/\")\n                                } else {\n                                    return await (async function(){\n                                        let __array_op_rval__231=symname;\n                                         if (__array_op_rval__231 instanceof Function){\n                                            return await __array_op_rval__231() \n                                        } else {\n                                            return [__array_op_rval__231]\n                                        }\n                                    })()\n                                }\n                            }\n                        })();\n                        return await async function(){\n                            if (check_true ((namespace_identity.length===1))) {\n                                {\n                                    let it;\n                                    it=Environment.definitions[symname];\n                                    if (check_true (it)){\n                                        return it\n                                    } else {\n                                        if (check_true (parent_environment)){\n                                            return await parent_environment[\"symbol_definition\"].call(parent_environment,symname)\n                                        }\n                                    }\n                                }\n                            } else if (check_true ((namespace_identity['0']===namespace))) {\n                                return Environment.definitions[symname]\n                            } else if (check_true (parent_environment)) {\n                                return await parent_environment[\"symbol_definition\"].call(parent_environment,namespace_identity['1'],namespace_identity['0'])\n                            } else if (check_true ((namespace_identity.length===2))) {\n                                return await (async function() {\n                                    {\n                                         let __call_target__=children[namespace_identity['0']], __call_method__=\"symbol_definition\";\n                                        return await __call_target__[__call_method__].call(__call_target__,namespace_identity['1'])\n                                    } \n                                })()\n                            } else {\n                                return undefined\n                            }\n                        } ()\n                    }],[\"compile\",async function(json_expression,opts) {\n                        let out;\n                        opts=await add({\n                            env:Environment\n                        },opts,{\n                            meta:await (async function(){\n                                if (check_true ((opts&& opts.meta))){\n                                    return true\n                                } else {\n                                    return false\n                                }\n                            })()\n                        });\n                        out=null;\n                        out=await (async function(){\n                             return await compiler(json_expression,opts) \n                        })();\n                        return await async function(){\n                            if (check_true (((out instanceof Array)&& out['0'].ctype&& (out['0'].ctype===\"FAIL\")))) {\n                                return out\n                            } else if (check_true (opts.meta)) {\n                                return out\n                            } else {\n                                return out['1']\n                            }\n                        } ()\n                    }],[\"env_log\",async function(...args) {\n                            return await (async function(){\n                                let __target_arg__189=[].concat(await conj(await (async function(){\n                                    let __array_op_rval__190=style;\n                                     if (__array_op_rval__190 instanceof Function){\n                                        return await __array_op_rval__190() \n                                    } else {\n                                        return [__array_op_rval__190]\n                                    }\n                                })(),args));\n                                if(!__target_arg__189 instanceof Array){\n                                    throw new TypeError(\"Invalid final argument to apply - an array is required\")\n                                }let __pre_arg__191=(\"%c\"+ await (async function(){\n                                    if (check_true (opts.prefix)){\n                                        return opts.prefix\n                                    } else {\n                                        return (args).shift()\n                                    }\n                                })());\n                                __target_arg__189.unshift(__pre_arg__191);\n                                return (console.log).apply(this,__target_arg__189)\n                            })()\n                        }],[\"evaluate_local\",async function(expression,ctx,opts) {\n                        let compiled;\n                        let error_data;\n                        let requires;\n                        let precompiled_assembly;\n                        let result;\n                        opts=(opts|| new Object());\n                        compiled=null;\n                        error_data=null;\n                        requires=null;\n                        precompiled_assembly=null;\n                        result=null;\n                        if (check_true (opts.compiled_source)){\n                            compiled=expression\n                        } else {\n                            try {\n                                compiled=await (async function(){\n                                     return await compiler(await (async function(){\n                                        if (check_true (opts.json_in)){\n                                            return expression\n                                        } else {\n                                            return await Environment[\"read_lisp\"].call(Environment,expression,{\n                                                source_name:opts.source_name\n                                            })\n                                        }\n                                    })(),{\n                                        env:Environment,ctx:ctx,throttle:opts.throttle,formatted_output:true,source_name:opts.source_name,throw_on_error:opts.throw_on_error,on_final_token_assembly:async function(val) {\n                                            return precompiled_assembly=val\n                                        },error_report:(opts.error_report|| null),quiet_mode:(opts.quiet_mode|| false)\n                                    }) \n                                })()\n                            } catch (__exception__238) {\n                                if (__exception__238 instanceof Error) {\n                                    let e=__exception__238;\n                                    {\n                                        {\n                                            if (check_true (opts.throw_on_error)){\n                                                {\n                                                    throw e;\n                                                    \n                                                }\n                                            };\n                                            if (check_true ((e instanceof LispSyntaxError))){\n                                                {\n                                                    await async function(){\n                                                        e[\"message\"]=await JSON.parse(e.message);\n                                                        return e;\n                                                        \n                                                    }()\n                                                }\n                                            };\n                                            await async function(){\n                                                if (check_true ((e instanceof LispSyntaxError))) {\n                                                    return error_data=await add({\n                                                        error:\"LispSyntaxError\"\n                                                    },e.message)\n                                                } else {\n                                                    error_data={\n                                                        error:await sub_type(e),message:e.message,stack:e.stack,form:await (async function(){\n                                                             return await async function(){\n                                                                if (check_true (((expression instanceof String || typeof expression==='string')&& (expression.length>100)))) {\n                                                                    return await add(await expression[\"substr\"].call(expression,0,100),\"...\")\n                                                                } else {\n                                                                    return await (await get_global(\"as_lisp\"))(expression)\n                                                                }\n                                                            } () \n                                                        })(),parent_forms:[],source_name:opts.source_name,invalid:true\n                                                    }\n                                                }\n                                            } ();\n                                            if (check_true (opts.error_report)){\n                                                await (async function(){\n                                                    let __array_op_rval__240=opts.error_report;\n                                                     if (__array_op_rval__240 instanceof Function){\n                                                        return await __array_op_rval__240(error_data) \n                                                    } else {\n                                                        return [__array_op_rval__240,error_data]\n                                                    }\n                                                })()\n                                            } else {\n                                                await console.error(\"Compilation Error: \",error_data)\n                                            };\n                                            compiled=await (async function(){\n                                                 return [{\n                                                    error:true\n                                                },null] \n                                            })()\n                                        }\n                                    }\n                                }\n                            }\n                        };\n                        return await async function(){\n                            if (check_true ((null==compiled))) {\n                                return null\n                            } else if (check_true ((compiled['0'].ctype===\"FAIL\"))) {\n                                {\n                                    if (check_true (opts.error_report)){\n                                        {\n                                            await (async function(){\n                                                let __array_op_rval__241=opts.error_report;\n                                                 if (__array_op_rval__241 instanceof Function){\n                                                    return await __array_op_rval__241(compiled['1']) \n                                                } else {\n                                                    return [__array_op_rval__241,compiled['1']]\n                                                }\n                                            })()\n                                        }\n                                    };\n                                    return await async function(){\n                                        if (check_true ((compiled['1'] instanceof Error))) {\n                                            throw compiled['1'];\n                                            \n                                        } else if (check_true ((compiled['1']['0'] instanceof Error))) {\n                                            throw compiled['1']['0'];\n                                            \n                                        } else if (check_true (((compiled['1']['0'] instanceof Object)&& (compiled['1']['0'].error===\"SyntaxError\")))) {\n                                            {\n                                                let new_error=new SyntaxError(compiled['1']['0'].message);\n                                                ;\n                                                await async function(){\n                                                    new_error[\"from\"]=compiled['1']['0'];\n                                                    return new_error;\n                                                    \n                                                }();\n                                                throw new_error;\n                                                \n                                            }\n                                        } else {\n                                            return compiled['1']\n                                        }\n                                    } ()\n                                }\n                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))&& parent_environment))) {\n                                return await parent_environment[\"evaluate_local\"].call(parent_environment,compiled,ctx,await add(new Object(),opts,{\n                                    compiled_source:true\n                                }))\n                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))))) {\n                                if (check_true (children[compiled['0'].namespace])){\n                                    return await (async function() {\n                                        {\n                                             let __call_target__=children[compiled['0'].namespace], __call_method__=\"evaluate_local\";\n                                            return await __call_target__[__call_method__].call(__call_target__,compiled,ctx,await add(new Object(),opts,{\n                                                compiled_source:true\n                                            }))\n                                        } \n                                    })()\n                                } else {\n                                    throw new EvalError((\"unknown namespace \"+ compiled['0'].namespace+ \" assignment\"));\n                                    \n                                }\n                            } else {\n                                {\n                                    if (check_true (opts.on_compilation_complete)){\n                                        await (async function(){\n                                            let __array_op_rval__243=opts.on_compilation_complete;\n                                             if (__array_op_rval__243 instanceof Function){\n                                                return await __array_op_rval__243(compiled) \n                                            } else {\n                                                return [__array_op_rval__243,compiled]\n                                            }\n                                        })()\n                                    };\n                                    try {\n                                        if (check_true (((compiled instanceof Array)&& (compiled['0'] instanceof Object)&& compiled['0'].ctype&& await not((compiled['0'].ctype instanceof String || typeof compiled['0'].ctype==='string'))))){\n                                            {\n                                                await async function(){\n                                                    compiled['0'][\"ctype\"]=await subtype(compiled['0'].ctype);\n                                                    return compiled['0'];\n                                                    \n                                                }()\n                                            }\n                                        };\n                                        result=await (async function(){\n                                             return await async function(){\n                                                if (check_true (compiled.error)) {\n                                                    throw new Error((await get_global(\"indirect_new\"))(compiled.error,compiled.message));\n                                                    \n                                                } else if (check_true ((compiled['0'].ctype&& (await contains_ques_(\"block\",compiled['0'].ctype)|| (compiled['0'].ctype===\"assignment\")|| (compiled['0'].ctype===\"__!NOT_FOUND!__\"))))) {\n                                                    if (check_true (await (async function(){\n                                                        let __array_op_rval__246=compiled['0'].has_lisp_globals;\n                                                         if (__array_op_rval__246 instanceof Function){\n                                                            return await __array_op_rval__246() \n                                                        } else {\n                                                            return [__array_op_rval__246]\n                                                        }\n                                                    })())){\n                                                        {\n                                                            await async function(){\n                                                                compiled[1]=new AsyncFunction(\"Environment\",(\"{ \"+ compiled['1']+ \"}\"));\n                                                                return compiled;\n                                                                \n                                                            }();\n                                                            return await (async function(){\n                                                                let __array_op_rval__248=compiled['1'];\n                                                                 if (__array_op_rval__248 instanceof Function){\n                                                                    return await __array_op_rval__248(Environment) \n                                                                } else {\n                                                                    return [__array_op_rval__248,Environment]\n                                                                }\n                                                            })()\n                                                        }\n                                                    } else {\n                                                        {\n                                                            await async function(){\n                                                                compiled[1]=new AsyncFunction((\"{\"+ compiled['1']+ \"}\"));\n                                                                return compiled;\n                                                                \n                                                            }();\n                                                            return await (async function(){\n                                                                let __array_op_rval__250=compiled['1'];\n                                                                 if (__array_op_rval__250 instanceof Function){\n                                                                    return await __array_op_rval__250() \n                                                                } else {\n                                                                    return [__array_op_rval__250]\n                                                                }\n                                                            })()\n                                                        }\n                                                    }\n                                                } else if (check_true ((compiled['0'].ctype&& ((\"AsyncFunction\"===compiled['0'].ctype)|| (\"statement\"===compiled['0'].ctype)|| (\"objliteral\"===compiled['0'].ctype))))) {\n                                                    {\n                                                        if (check_true (await (async function(){\n                                                            let __array_op_rval__251=compiled['0'].has_lisp_globals;\n                                                             if (__array_op_rval__251 instanceof Function){\n                                                                return await __array_op_rval__251() \n                                                            } else {\n                                                                return [__array_op_rval__251]\n                                                            }\n                                                        })())){\n                                                            {\n                                                                await async function(){\n                                                                    compiled[1]=new AsyncFunction(\"Environment\",(\"{ return \"+ compiled['1']+ \"} \"));\n                                                                    return compiled;\n                                                                    \n                                                                }();\n                                                                return await (async function(){\n                                                                    let __array_op_rval__253=compiled['1'];\n                                                                     if (__array_op_rval__253 instanceof Function){\n                                                                        return await __array_op_rval__253(Environment) \n                                                                    } else {\n                                                                        return [__array_op_rval__253,Environment]\n                                                                    }\n                                                                })()\n                                                            }\n                                                        } else {\n                                                            {\n                                                                await async function(){\n                                                                    compiled[1]=new AsyncFunction((\"{ return \"+ compiled['1']+ \"}\"));\n                                                                    return compiled;\n                                                                    \n                                                                }();\n                                                                return await (async function(){\n                                                                    let __array_op_rval__255=compiled['1'];\n                                                                     if (__array_op_rval__255 instanceof Function){\n                                                                        return await __array_op_rval__255() \n                                                                    } else {\n                                                                        return [__array_op_rval__255]\n                                                                    }\n                                                                })()\n                                                            }\n                                                        }\n                                                    }\n                                                } else if (check_true ((compiled['0'].ctype&& (\"Function\"===compiled['0'].ctype)))) {\n                                                    {\n                                                        if (check_true (await (async function(){\n                                                            let __array_op_rval__256=compiled['0'].has_lisp_globals;\n                                                             if (__array_op_rval__256 instanceof Function){\n                                                                return await __array_op_rval__256() \n                                                            } else {\n                                                                return [__array_op_rval__256]\n                                                            }\n                                                        })())){\n                                                            {\n                                                                await async function(){\n                                                                    compiled[1]=new Function(\"Environment\",(\"{ return \"+ compiled['1']+ \"} \"));\n                                                                    return compiled;\n                                                                    \n                                                                }();\n                                                                return await (async function(){\n                                                                    let __array_op_rval__258=compiled['1'];\n                                                                     if (__array_op_rval__258 instanceof Function){\n                                                                        return await __array_op_rval__258(Environment) \n                                                                    } else {\n                                                                        return [__array_op_rval__258,Environment]\n                                                                    }\n                                                                })()\n                                                            }\n                                                        } else {\n                                                            {\n                                                                await async function(){\n                                                                    compiled[1]=new Function((\"{ return \"+ compiled['1']+ \"}\"));\n                                                                    return compiled;\n                                                                    \n                                                                }();\n                                                                return await (async function(){\n                                                                    let __array_op_rval__260=compiled['1'];\n                                                                     if (__array_op_rval__260 instanceof Function){\n                                                                        return await __array_op_rval__260() \n                                                                    } else {\n                                                                        return [__array_op_rval__260]\n                                                                    }\n                                                                })()\n                                                            }\n                                                        }\n                                                    }\n                                                } else {\n                                                    return compiled['1']\n                                                }\n                                            } () \n                                        })()\n                                    } catch (__exception__244) {\n                                        if (__exception__244 instanceof Error) {\n                                            let e=__exception__244;\n                                            {\n                                                {\n                                                    if (check_true (true)){\n                                                        {\n                                                            let details={\n                                                                error:e.name,message:e.message,expanded_source:await (await get_global(\"pretty_print\"))(await (async function(){\n                                                                     return await (await get_global(\"detokenize\"))(precompiled_assembly) \n                                                                })()),compiled:compiled['1']\n                                                            };\n                                                            ;\n                                                            console.log(\"Syntax Error: \",details);\n                                                            await async function(){\n                                                                e[\"details\"]=details;\n                                                                return e;\n                                                                \n                                                            }()\n                                                        }\n                                                    };\n                                                    if (check_true ((opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4)))){\n                                                        {\n                                                            if (check_true (e.details)){\n                                                                await env_log(\"caught error: \",e.details)\n                                                            } else {\n                                                                await env_log(\"caught error: \",e.name,e.message,e)\n                                                            }\n                                                        }\n                                                    };\n                                                    if (check_true ((false&& (await sub_type(e)===\"SyntaxError\")&& (opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4))))){\n                                                        await console.log(compiled['1'])\n                                                    };\n                                                    if (check_true (opts.error_report)){\n                                                        {\n                                                            await (async function(){\n                                                                let __array_op_rval__262=opts.error_report;\n                                                                 if (__array_op_rval__262 instanceof Function){\n                                                                    return await __array_op_rval__262(await (async function(){\n                                                                        if (check_true (e.details)){\n                                                                            return e.details\n                                                                        } else {\n                                                                            return {\n                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack\n                                                                            }\n                                                                        }\n                                                                    })()) \n                                                                } else {\n                                                                    return [__array_op_rval__262,await (async function(){\n                                                                        if (check_true (e.details)){\n                                                                            return e.details\n                                                                        } else {\n                                                                            return {\n                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack\n                                                                            }\n                                                                        }\n                                                                    })()]\n                                                                }\n                                                            })()\n                                                        }\n                                                    };\n                                                    result=e;\n                                                    if (check_true ((await not(opts.catch_errors)|| (ctx&& ctx.in_try)))){\n                                                        {\n                                                            throw result;\n                                                            \n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    };\n                                    return result\n                                }\n                            }\n                        } ()\n                    }],[\"evaluate\",async function(expression,ctx,opts) {\n                        return await async function(){\n                            if (check_true ((namespace===active_namespace))) {\n                                return await evaluate_local(expression,ctx,opts)\n                            } else if (check_true ((namespace===\"core\"))) {\n                                return await (async function() {\n                                    {\n                                         let __call_target__=children[active_namespace], __call_method__=\"evaluate\";\n                                        return await __call_target__[__call_method__].call(__call_target__,expression,ctx,opts)\n                                    } \n                                })()\n                            }\n                        } ()\n                    }],[\"eval_struct\",async function(lisp_struct,ctx,opts) {\n                        let rval;\n                        rval=null;\n                        if (check_true (lisp_struct instanceof Function)){\n                            rval=await (async function(){\n                                let __array_op_rval__267=lisp_struct;\n                                 if (__array_op_rval__267 instanceof Function){\n                                    return await __array_op_rval__267() \n                                } else {\n                                    return [__array_op_rval__267]\n                                }\n                            })()\n                        } else {\n                            rval=await (async function(){\n                                 return await evaluate(lisp_struct,ctx,await add({\n                                    json_in:true\n                                },(opts|| new Object()))) \n                            })()\n                        };\n                        return rval\n                    }],[\"set_compiler\",async function(compiler_function) {\n                        let new_ops;\n                        new_ops=await (async function(){\n                            let __array_op_rval__271=compiler_function;\n                             if (__array_op_rval__271 instanceof Function){\n                                return await __array_op_rval__271([],{\n                                    special_operators:true,env:Environment\n                                }) \n                            } else {\n                                return [__array_op_rval__271,[],{\n                                    special_operators:true,env:Environment\n                                }]\n                            }\n                        })();\n                        if (check_true (await is_set_ques_(new_ops))){\n                            {\n                                compiler_operators=new_ops;\n                                compiler=compiler_function;\n                                await async function(){\n                                    Environment.global_ctx.scope[\"compiler\"]=compiler;\n                                    return Environment.global_ctx.scope;\n                                    \n                                }();\n                                await (await get_global(\"register_feature\"))(\"compiler\")\n                            }\n                        } else {\n                            {\n                                await console.error(\"Invalid compiler function: invalid operators returned. Not installing.\");\n                                throw new EvalError(\"Invalid compiler function\");\n                                \n                            }\n                        };\n                        return compiler\n                    }],[\"clone\",async function(val) {\n                            if (check_true ((val===Environment))){\n                                return Environment\n                            } else {\n                                return await clone(val,0,Environment)\n                            }\n                        }],[\"eval\",async function(expression) {\n                        return await (async function(){\n                            let __array_op_rval__141=expression;\n                             if (__array_op_rval__141 instanceof Function){\n                                return await __array_op_rval__141() \n                            } else {\n                                return [__array_op_rval__141]\n                            }\n                        })()\n                    }],[\"add_escape_encoding\",async function(text) {        if (check_true ((text instanceof String || typeof text==='string'))){            let chars;            let acc;            chars=(text).split(\"\");            acc=[];            await (async function() {                let __for_body__3=async function(c) {                     return  await async function(){                        if (check_true( ((await c[\"charCodeAt\"].call(c,0)===34)))) {                            (acc).push(await String.fromCharCode(92));                             return  (acc).push(c)                        } else  {                             return (acc).push(c)                        }                    } ()                };                let __array__4=[],__elements__2=chars;                let __BREAK__FLAG__=false;                for(let __iter__1 in __elements__2) {                    __array__4.push(await __for_body__3(__elements__2[__iter__1]));                    if(__BREAK__FLAG__) {                         __array__4.pop();                        break;                                            }                }return __array__4;                             })();             return  (acc).join(\"\")        } else {              return text        }    }],[\"get_outside_global\",function get_outside_global(refname) {  try {    let tfn = new Function(\"{ if (typeof \" + refname + \" === 'undefined') { return undefined } else { return \"+refname+\" } }\");    return tfn();  } catch (ex) {    return undefined;  }}],[\"as_lisp\",lisp_writer],[\"lisp_writer\",lisp_writer],[\"clone_to_new\",async function(options) {\n                        let new_env;\n                        let my_children;\n                        let my_children_declarations;\n                        new_env=null;\n                        my_children=null;\n                        my_children_declarations=null;\n                        await env_log(namespace,\"cloning: # children: \",await length(children));\n                        new_env=await (async function(){\n                             return await dlisp_env({\n                                env:await (async function(){\n                                     return await clone(Environment) \n                                })(),children:await (async function(){\n                                     return await clone(children) \n                                })(),children_declarations:await (async function(){\n                                     return await clone(children_declarations) \n                                })()\n                            }) \n                        })();\n                        await env_log(namespace,\"constructed: \",await new_env[\"id\"]());\n                        return new_env\n                    }],[\"save_env\",async function(options) {\n                        let new_env;\n                        let my_children;\n                        let env_constructor;\n                        let dcomps;\n                        let version_tag;\n                        let build_time;\n                        let build_headers;\n                        let child_env;\n                        let want_buffer;\n                        let comp_buffer;\n                        let sorted_dependencies;\n                        let child_export_order;\n                        let preserve_imports;\n                        let include_source;\n                        let exports;\n                        let src;\n                        let target_insertion_path;\n                        let output_path;\n                        new_env=null;\n                        my_children=null;\n                        env_constructor=null;\n                        dcomps=await (async function(){\n                             return await (await get_global(\"date_components\"))(new Date()) \n                        })();\n                        options=(options|| new Object());\n                        version_tag=await (async function(){\n                            if (check_true (await not(await blank_ques_(opts.version_tag)))){\n                                return opts.version_tag\n                            } else {\n                                return (await (async function(){\n                                    let __array_op_rval__328=dcomps.year;\n                                     if (__array_op_rval__328 instanceof Function){\n                                        return await __array_op_rval__328(dcomps.month,dcomps.day,dcomps.hour,dcomps.minute) \n                                    } else {\n                                        return [__array_op_rval__328,dcomps.month,dcomps.day,dcomps.hour,dcomps.minute]\n                                    }\n                                })()).join(\".\")\n                            }\n                        })();\n                        build_time=await (async function(){\n                             return await (await get_global(\"formatted_date\"))(new Date()) \n                        })();\n                        build_headers=[];\n                        child_env=null;\n                        want_buffer=(options.want_buffer|| false);\n                        comp_buffer=null;\n                        sorted_dependencies=await (async function(){\n                             return await (await get_global(\"sort_dependencies\"))() \n                        })();\n                        child_export_order=null;\n                        preserve_imports=await (async function(){\n                            if (check_true ((options&& (options.preserve_imports===false)))){\n                                return false\n                            } else {\n                                return true\n                            }\n                        })();\n                        include_source=false;\n                        exports=[];\n                        src=await (async function(){\n                            if (check_true (await Environment[\"get_global\"].call(Environment,\"*env_skeleton*\",null))){\n                                return await clone(await Environment[\"get_global\"].call(Environment,\"*env_skeleton*\"))\n                            } else {\n                                return await (await get_global(\"reader\"))(await (async function(){\n                                     return await (await get_global(\"read_text_file\"))(\"./src/environment.lisp\") \n                                })())\n                            }\n                        })();\n                        target_insertion_path=null;\n                        output_path=null;\n                        if (check_true (Environment.global_ctx.scope[\"*env_skeleton*\"])){\n                            {\n                                await (await get_global(\"register_feature\"))(\"*env_skeleton*\")\n                            }\n                        };\n                        target_insertion_path=await first(await (async function(){\n                             return await (await get_global(\"findpaths\"))(await (async function(){\n                                 return \"=:included_globals\" \n                            })(),src) \n                        })());\n                        if (check_true (await not((target_insertion_path instanceof Array)))){\n                            throw new EvalError(\"Unable to find the first included_globals symbol\");\n                            \n                        };\n                        target_insertion_path=await conj(await chop(target_insertion_path),[2]);\n                        if (check_true (options.include_source)){\n                            {\n                                include_source=true\n                            }\n                        };\n                        await env_log(namespace,\"cloning: # children: \",await length(children));\n                        await env_log(namespace,\"preserve_imports: \",preserve_imports);\n                        exports=await export_symbol_set(await (async function(){\n                            if (check_true (options.do_not_include)){\n                                return {\n                                    do_not_include:options.do_not_include\n                                }\n                            }\n                        })());\n                        child_export_order=await (async function(){\n                            let __collector;\n                            let __result;\n                            let __action;\n                            __collector=[];\n                            __result=null;\n                            __action=async function(cname) {\n                                if (check_true (await not((cname===\"core\")))){\n                                    {\n                                        return await (async function(){\n                                            let __array_op_rval__329=cname;\n                                             if (__array_op_rval__329 instanceof Function){\n                                                return await __array_op_rval__329(children[cname]) \n                                            } else {\n                                                return [__array_op_rval__329,children[cname]]\n                                            }\n                                        })()\n                                    }\n                                }\n                            };\n                            ;\n                            await (async function() {\n                                let __for_body__332=async function(__item) {\n                                    __result=await __action(__item);\n                                    if (check_true (__result)){\n                                        return (__collector).push(__result)\n                                    }\n                                };\n                                let __array__333=[],__elements__331=sorted_dependencies.namespaces;\n                                let __BREAK__FLAG__=false;\n                                for(let __iter__330 in __elements__331) {\n                                    __array__333.push(await __for_body__332(__elements__331[__iter__330]));\n                                    if(__BREAK__FLAG__) {\n                                         __array__333.pop();\n                                        break;\n                                        \n                                    }\n                                }return __array__333;\n                                 \n                            })();\n                            return __collector\n                        })();\n                        await console.log(\"save_env: child_export_order: \",await (async function(){\n                             return await (await get_global(\"each\"))(child_export_order,0) \n                        })());\n                        my_children=await to_object(await (async function(){\n                            let __collector;\n                            let __result;\n                            let __action;\n                            __collector=[];\n                            __result=null;\n                            __action=async function(child) {\n                                if (check_true (await resolve_path(await (async function(){\n                                    let __array_op_rval__334=child['0'];\n                                     if (__array_op_rval__334 instanceof Function){\n                                        return await __array_op_rval__334(\"serialize_with_image\") \n                                    } else {\n                                        return [__array_op_rval__334,\"serialize_with_image\"]\n                                    }\n                                })(),children_declarations))){\n                                    {\n                                        await env_log(\"checking \",namespace,\"checking for: \",await add(child['0'],\"/*on_serialization*\"));\n                                        if (check_true (await not(((typeof await add(child['0'],\"/*on_serialization*\")===\"undefined\")|| (await Environment[\"get_global\"].call(Environment,await add(child['0'],\"/*on_serialization*\"),ReferenceError)===ReferenceError))))){\n                                            {\n                                                await child['1'][\"evaluate\"].call(child['1'],(\"(\"+ child['0']+ \"/*on_serialization*)\"))\n                                            }\n                                        };\n                                        child_env=await child['1'][\"compile\"].call(child['1'],await child['1'][\"export_symbol_set\"].call(child['1'],await add(new Object(),await (async function(){\n                                            if (check_true (options.do_not_include)){\n                                                return {\n                                                    do_not_include:await (async function(){\n                                                        let comps;\n                                                        comps=null;\n                                                        {\n                                                            let ____collector__335= async function(){\n                                                                return []\n                                                            };\n                                                            let ____result__336= async function(){\n                                                                return null\n                                                            };\n                                                            let ____action__337= async function(){\n                                                                return async function(symbol) {\n                                                                    return await async function(){\n                                                                        if (check_true (await contains_ques_(\"/\",symbol))) {\n                                                                            {\n                                                                                comps=(symbol).split(\"/\");\n                                                                                if (check_true ((comps['0']===child['0']))){\n                                                                                    return comps['1']\n                                                                                }\n                                                                            }\n                                                                        } else {\n                                                                            return symbol\n                                                                        }\n                                                                    } ()\n                                                                }\n                                                            };\n                                                            {\n                                                                let __collector=await ____collector__335();\n                                                                ;\n                                                                let __result=await ____result__336();\n                                                                ;\n                                                                let __action=await ____action__337();\n                                                                ;\n                                                                ;\n                                                                await (async function() {\n                                                                    let __for_body__340=async function(__item) {\n                                                                        __result=await __action(__item);\n                                                                        if (check_true (__result)){\n                                                                            return (__collector).push(__result)\n                                                                        }\n                                                                    };\n                                                                    let __array__341=[],__elements__339=options.do_not_include;\n                                                                    let __BREAK__FLAG__=false;\n                                                                    for(let __iter__338 in __elements__339) {\n                                                                        __array__341.push(await __for_body__340(__elements__339[__iter__338]));\n                                                                        if(__BREAK__FLAG__) {\n                                                                             __array__341.pop();\n                                                                            break;\n                                                                            \n                                                                        }\n                                                                    }return __array__341;\n                                                                     \n                                                                })();\n                                                                return __collector\n                                                            }\n                                                        }\n                                                    })()\n                                                }\n                                            } else {\n                                                return new Object()\n                                            }\n                                        })(),{\n                                            no_compiler:true\n                                        })),{\n                                            throw_on_error:true\n                                        });\n                                        return await (async function(){\n                                            let __array_op_rval__342=child['0'];\n                                             if (__array_op_rval__342 instanceof Function){\n                                                return await __array_op_rval__342(await (async function(){\n                                                     return [[\"=:quotel\",child['1'].definitions],await (async function(){\n                                                         return [\"=:quotel\",await (async function(){\n                                                             return [\"=:javascript\",child_env] \n                                                        })()] \n                                                    })()] \n                                                })()) \n                                            } else {\n                                                return [__array_op_rval__342,await (async function(){\n                                                     return [[\"=:quotel\",child['1'].definitions],await (async function(){\n                                                         return [\"=:quotel\",await (async function(){\n                                                             return [\"=:javascript\",child_env] \n                                                        })()] \n                                                    })()] \n                                                })()]\n                                            }\n                                        })()\n                                    }\n                                }\n                            };\n                            ;\n                            await (async function() {\n                                let __for_body__345=async function(__item) {\n                                    __result=await __action(__item);\n                                    if (check_true (__result)){\n                                        return (__collector).push(__result)\n                                    }\n                                };\n                                let __array__346=[],__elements__344=child_export_order;\n                                let __BREAK__FLAG__=false;\n                                for(let __iter__343 in __elements__344) {\n                                    __array__346.push(await __for_body__345(__elements__344[__iter__343]));\n                                    if(__BREAK__FLAG__) {\n                                         __array__346.pop();\n                                        break;\n                                        \n                                    }\n                                }return __array__346;\n                                 \n                            })();\n                            return __collector\n                        })());\n                        await (await get_global(\"set_path\"))(target_insertion_path,src,await (async function(){\n                             return [\"=:fn\",[],await to_object(await (async function(){\n                                 return [[\"definitions\",await (async function(){\n                                     return [\"=:quote\",await (async function(){\n                                        if (check_true (options.do_not_include)){\n                                            return await to_object(await (async function(){\n                                                let __collector;\n                                                let __result;\n                                                let __action;\n                                                __collector=[];\n                                                __result=null;\n                                                __action=async function(defset) {\n                                                    if (check_true (await not(await contains_ques_(defset['0'],options.do_not_include)))){\n                                                        return await (async function(){\n                                                            let __array_op_rval__347=defset['0'];\n                                                             if (__array_op_rval__347 instanceof Function){\n                                                                return await __array_op_rval__347(defset['1']) \n                                                            } else {\n                                                                return [__array_op_rval__347,defset['1']]\n                                                            }\n                                                        })()\n                                                    }\n                                                };\n                                                ;\n                                                await (async function() {\n                                                    let __for_body__350=async function(__item) {\n                                                        __result=await __action(__item);\n                                                        if (check_true (__result)){\n                                                            return (__collector).push(__result)\n                                                        }\n                                                    };\n                                                    let __array__351=[],__elements__349=await pairs(Environment.definitions);\n                                                    let __BREAK__FLAG__=false;\n                                                    for(let __iter__348 in __elements__349) {\n                                                        __array__351.push(await __for_body__350(__elements__349[__iter__348]));\n                                                        if(__BREAK__FLAG__) {\n                                                             __array__351.pop();\n                                                            break;\n                                                            \n                                                        }\n                                                    }return __array__351;\n                                                     \n                                                })();\n                                                return __collector\n                                            })())\n                                        } else {\n                                            return await clone(Environment.definitions)\n                                        }\n                                    })()] \n                                })()],[\"declarations\",await (async function(){\n                                     return await clone(Environment.declarations) \n                                })()],[\"config\",await (async function(){\n                                    let exp_conf;\n                                    exp_conf=await (async function(){\n                                         return await clone(Environment.global_ctx.scope[\"*env_config*\"]) \n                                    })();\n                                    if (check_true (await not(preserve_imports))){\n                                        {\n                                            await async function(){\n                                                exp_conf[\"imports\"]=new Object();\n                                                return exp_conf;\n                                                \n                                            }()\n                                        }\n                                    };\n                                    if (check_true (options.features)){\n                                        {\n                                            await async function(){\n                                                exp_conf[\"features\"]=options.features;\n                                                return exp_conf;\n                                                \n                                            }()\n                                        }\n                                    };\n                                    return exp_conf\n                                })()],[\"imports\",await (async function(){\n                                    if (check_true (preserve_imports)){\n                                        return await to_object(await (async function() {\n                                            let __for_body__356=async function(imp_source) {\n                                                return await (async function(){\n                                                    let __array_op_rval__358=imp_source.symbol;\n                                                     if (__array_op_rval__358 instanceof Function){\n                                                        return await __array_op_rval__358({\n                                                            initializer:await (async function(){\n                                                                 return [\"=:javascript\",\"new function () { return \",imp_source.symbol,\" }\"] \n                                                            })(),symbol:imp_source.symbol,namespace:imp_source.namespace\n                                                        }) \n                                                    } else {\n                                                        return [__array_op_rval__358,{\n                                                            initializer:await (async function(){\n                                                                 return [\"=:javascript\",\"new function () { return \",imp_source.symbol,\" }\"] \n                                                            })(),symbol:imp_source.symbol,namespace:imp_source.namespace\n                                                        }]\n                                                    }\n                                                })()\n                                            };\n                                            let __array__357=[],__elements__355=await values((await resolve_path([\"*env_config*\",\"imports\"],Environment.global_ctx.scope)|| new Object()));\n                                            let __BREAK__FLAG__=false;\n                                            for(let __iter__354 in __elements__355) {\n                                                __array__357.push(await __for_body__356(__elements__355[__iter__354]));\n                                                if(__BREAK__FLAG__) {\n                                                     __array__357.pop();\n                                                    break;\n                                                    \n                                                }\n                                            }return __array__357;\n                                             \n                                        })())\n                                    } else {\n                                        return new Object()\n                                    }\n                                })()],[\"symbols\",await (async function(){\n                                     return [\"=:javascript\",await compile(await to_object(exports),{\n                                        throw_on_error:true\n                                    })] \n                                })()],[\"children_declarations\",await (async function(){\n                                     return [\"=:fn\",[],await clone(children_declarations)] \n                                })()],[\"child_load_order\",await (async function(){\n                                     return await (await get_global(\"each\"))(child_export_order,0) \n                                })()],[\"children\",my_children]] \n                            })())] \n                        })());\n                        output_path=await (async function(){\n                            if (check_true (options.want_buffer)){\n                                return null\n                            } else {\n                                return (options.save_as|| await resolve_path([\"*env_config*\",\"export\",\"save_path\"],Environment.global_ctx.scope))\n                            }\n                        })();\n                        if (check_true (output_path instanceof Function)){\n                            output_path=await (async function(){\n                                let __array_op_rval__359=output_path;\n                                 if (__array_op_rval__359 instanceof Function){\n                                    return await __array_op_rval__359() \n                                } else {\n                                    return [__array_op_rval__359]\n                                }\n                            })()\n                        };\n                        if (check_true ((await not((output_path instanceof String || typeof output_path==='string'))&& output_path))){\n                            throw new EvalError(\"invalid name for target for saving the environment.  Must be a string or function\");\n                            \n                        };\n                        return await async function(){\n                            if (check_true ((want_buffer|| (output_path&& await ends_with_ques_(\".js\",output_path))))) {\n                                {\n                                    (build_headers).push((\"// Build Time: \"+ build_time));\n                                    (build_headers).push((\"// Version: \"+ version_tag));\n                                    (build_headers).push((\"export const DLISP_ENV_VERSION='\"+ version_tag+ \"';\"));\n                                    await env_log(\"saving to: \",output_path);\n                                    return await (await get_global(\"compile_buffer\"))(src,\"init_dlisp\",{\n                                        namespace:namespace,toplevel:true,include_boilerplate:false,verbose:false,bundle:true,want_buffer:want_buffer,imports:await (async function(){\n                                            if (check_true (preserve_imports)){\n                                                return await resolve_path([\"*env_config*\",\"imports\"],Environment.global_ctx.scope)\n                                            }\n                                        })(),js_headers:await (async function(){\n                                             return [await (await get_global(\"show\"))(check_true),await (async function(){\n                                                 return await (await get_global(\"show\"))(get_next_environment_id) \n                                            })(),await (async function(){\n                                                 return await (await get_global(\"show\"))(get_outside_global) \n                                            })(),await (async function(){\n                                                 return await (await get_global(\"show\"))(subtype) \n                                            })(),await (async function(){\n                                                 return await (await get_global(\"show\"))(lisp_writer) \n                                            })(),await (async function(){\n                                                 return await (await get_global(\"show\"))(clone) \n                                            })(),await (async function(){\n                                                 return await (await get_global(\"show\"))(LispSyntaxError) \n                                            })()] \n                                        })(),bundle_options:{\n                                            default_namespace:await resolve_path([\"*env_config*\",\"export\",\"default_namespace\"],Environment.global_ctx.scope)\n                                        },output_file:output_path,include_source:(options.include_source|| await resolve_path([\"*env_config*\",\"export\",\"include_source\"],Environment.global_ctx.scope)),build_headers:build_headers\n                                    })\n                                }\n                            } else if (check_true ((output_path&& await ends_with_ques_(\".lisp\",output_path)))) {\n                                return await (await get_global(\"write_text_file\"))(output_path,await JSON.stringify(src,null,4))\n                            } else {\n                                return src\n                            }\n                        } ()\n                    }],[\"null\",null],[\"is_Response?\",function(value) {\n        return (value instanceof Response)\n    }],[\"get_content_type\",function(obj) {\n        return  (obj && obj[\"headers\"])[\"get\"].call((obj && obj[\"headers\"]),\"content-type\")\n    }],[\"send_http\",async function(method,url,data,headers) {\n    if (check_true (((method instanceof String || typeof method==='string')&& (url instanceof String || typeof url==='string')))){\n        {\n            let response;\n            headers=await (await Environment.get_global(\"add\"))(await ( async function(){\n                let __obj__1=new Object();\n                __obj__1[\"Content-Type\"]=\"application/json\";\n                return __obj__1;\n                \n            })(),await (async function(){\n                if (check_true ((headers instanceof Object))){\n                    return headers\n                } else {\n                    return new Object()\n                }\n            })());\n            response=await fetch(url,{\n                method:method,mode:\"cors\",cache:\"no-cache\",credentials:\"same-origin\",headers:headers,redirect:\"follow\",referrerPolicy:\"no-referrer\",body:await (async function(){\n                    if (check_true (((headers && headers[\"Content-Type\"])===\"application/json\"))){\n                        return await JSON.stringify(data)\n                    } else {\n                        return data\n                    }\n                })()\n            });\n            return response\n        }\n    } else {\n        throw new SyntaxError(\"send_http requires a method string and a url string\");\n        \n    }\n}],[\"response_handler\",async function(response,options) {\n    if (check_true (((response && response[\"status\"])===200))){\n        return await async function(){\n            if (check_true ((options && options[\"raw_response\"]))) {\n                return response\n            } else if (check_true ((await (await Environment.get_global(\"get_content_type\"))(response)===\"application/json\"))) {\n                return await response[\"json\"]()\n            } else if (check_true (await (await Environment.get_global(\"starts_with?\"))(await (await Environment.get_global(\"get_content_type\"))(response),\"text/\"))) {\n                return await response[\"text\"]()\n            } else {\n                return await response[\"blob\"]()\n            }\n        } ()\n    } else {\n        return response\n    }\n}],[\"post\",async function(url,data,options) {\n    let response;\n    response=null;\n    response=await (await Environment.get_global(\"send_http\"))(\"POST\",url,data,(options && options[\"headers\"]));\n    return await (await Environment.get_global(\"response_handler\"))(response,options)\n}],[\"put\",async function(url,data,options) {\n    let response;\n    response=null;\n    response=await (await Environment.get_global(\"send_http\"))(\"PUT\",url,data,(options && options[\"headers\"]));\n    return await (await Environment.get_global(\"response_handler\"))(response,options)\n}],[\"get\",async function(url,options) {\n    let response;\n    let headers;\n    response=null;\n    options=(options|| new Object());\n    headers=await (await Environment.get_global(\"add\"))(await ( async function(){\n        let __obj__2=new Object();\n        __obj__2[\"Content-Type\"]=\"application/json\";\n        return __obj__2;\n        \n    })(),await (async function(){\n        if (check_true ((headers instanceof Object))){\n            return headers\n        } else {\n            return new Object()\n        }\n    })());\n    response=await fetch(url,await (await Environment.get_global(\"add\"))({\n        method:\"GET\",mode:\"cors\",cache:\"no-cache\",credentials:\"same-origin\",redirect:\"follow\",referrerPolicy:\"no-referrer\"\n    },await (async function(){\n        if (check_true ((options instanceof Object))){\n            return options\n        } else {\n            return new Object()\n        }\n    })()));\n    return await (await Environment.get_global(\"response_handler\"))(response,options)\n}],[\"send_files\",async function(url,file_object,options) {\n    let files;\n    let idx;\n    let form_data;\n    let response;\n    options=await (async function(){\n        if (check_true ((options instanceof Object))){\n            return options\n        } else {\n            return new Object()\n        }\n    })();\n    files=await (async function(){\n        if (check_true ((file_object instanceof Array))){\n            return file_object\n        } else {\n            return await (async function(){\n                let __array_op_rval__3=file_object;\n                 if (__array_op_rval__3 instanceof Function){\n                    return await __array_op_rval__3() \n                } else {\n                    return [__array_op_rval__3]\n                }\n            })()\n        }\n    })();\n    idx=0;\n    form_data=new FormData();\n    response=null;\n    await (async function() {\n        let __for_body__6=async function(file) {\n            await form_data[\"append\"].call(form_data,(\"file\"+ idx),file,(file && file.name));\n            return idx+=1\n        };\n        let __array__7=[],__elements__5=files;\n        let __BREAK__FLAG__=false;\n        for(let __iter__4 in __elements__5) {\n            __array__7.push(await __for_body__6(__elements__5[__iter__4]));\n            if(__BREAK__FLAG__) {\n                 __array__7.pop();\n                break;\n                \n            }\n        }return __array__7;\n         \n    })();\n    response=await fetch(url,{\n        method:\"POST\",mode:\"cors\",cache:\"no-cache\",credentials:\"same-origin\",redirect:\"follow\",referrerPolicy:\"no-referrer\",body:form_data\n    });\n    return await (await Environment.get_global(\"response_handler\"))(response,options)\n}],[\"data_to_file\",async function(name,data,content_type,last_modified) {\n    if (check_true (data)){\n        {\n            let ctype;\n            let enc_data;\n            ctype=await (async function(){\n                 return await async function(){\n                    if (check_true (((content_type==null)&& (data instanceof String || typeof data==='string')))) {\n                        return \"text/plain\"\n                    } else if (check_true ((await (await Environment.get_global(\"not\"))((data instanceof Object))&& (content_type==null)))) {\n                        return \"text/plain\"\n                    } else if (check_true ((content_type instanceof String || typeof content_type==='string'))) {\n                        return content_type\n                    } else if (check_true ((data instanceof Object))) {\n                        return \"application/json\"\n                    } else {\n                        throw new TypeError(\"data_to_file: Invalid content_type argument - must be string\");\n                        \n                    }\n                } () \n            })();\n            enc_data=await (async function(){\n                 return await async function(){\n                    if (check_true (await (await Environment.get_global(\"starts_with?\"))(\"text\",ctype))) {\n                        return await (async function(){\n                            let __array_op_rval__8=data;\n                             if (__array_op_rval__8 instanceof Function){\n                                return await __array_op_rval__8() \n                            } else {\n                                return [__array_op_rval__8]\n                            }\n                        })()\n                    } else if (check_true ((\"application/json\"===ctype))) {\n                        return [await JSON.stringify(data)]\n                    } else {\n                        return [new Blob(await (async function(){\n                            let __array_op_rval__9=data;\n                             if (__array_op_rval__9 instanceof Function){\n                                return await __array_op_rval__9() \n                            } else {\n                                return [__array_op_rval__9]\n                            }\n                        })())]\n                    }\n                } () \n            })();\n            return new File(enc_data,(name|| \"unnamed\"),await (await Environment.get_global(\"add\"))(new Object(),{\n                type:ctype\n            },await (async function(){\n                if (check_true (await (await Environment.get_global(\"is_number?\"))(last_modified))){\n                    return {\n                        last_modified:last_modified\n                    }\n                } else {\n                    return new Object()\n                }\n            })()))\n        }\n    } else {\n        throw new TypeError(\"data_to_file: nil or undefined value provided\");\n        \n    }\n}],[\"list_files\",async function(path) {\n    let rval;\n    rval=await (async function(){\n         return await (await Environment.get_global(\"http/get\"))((\"/files/\"+ path)) \n    })();\n    if (check_true ((rval instanceof Response))){\n        throw new Error((rval && rval[\"statusText\"]));\n        \n    } else {\n        return await async function(){\n            if (check_true (((rval && rval[\"rval\"])===\"OK\"))) {\n                return (rval && rval.entries)\n            } else {\n                return rval\n            }\n        } ()\n    }\n}],[\"create_websocket\",function(uri,options) {\n        let ws;\n        let on_close;\n        let on_open;\n        let on_message;\n        let on_error;\n        options=(options|| new Object());\n        ws=null;\n        on_close= ( function(){\n            if (check_true ((options && options[\"on_close\"]))){\n                return (options && options[\"on_close\"])\n            } else {\n                return null\n            }\n        })();\n        on_open=((options && options[\"on_open\"])|| null);\n        on_message=((options && options[\"on_message\"])|| async function(e) {\n            return  console.log((e && e[\"data\"]))\n        });\n        on_error=((options && options[\"on_error\"])|| async function(e) {\n            return  console.error(\"ERROR: \",(e && e[\"data\"]))\n        });\n        ws=new WebSocket(uri);\n        if (check_true (on_open)){\n            {\n                  (function(){\n                    ws[\"onopen\"]=on_open;\n                    return ws;\n                    \n                })()\n            }\n        };\n        if (check_true (on_close)){\n            {\n                  (function(){\n                    ws[\"onclose\"]=on_close;\n                    return ws;\n                    \n                })()\n            }\n        };\n        if (check_true (on_message)){\n            {\n                  (function(){\n                    ws[\"onmessage\"]=on_message;\n                    return ws;\n                    \n                })()\n            }\n        };\n        if (check_true (on_error)){\n            {\n                  (function(){\n                    ws[\"onerror\"]=on_error;\n                    return ws;\n                    \n                })()\n            }\n        };\n        return ws\n    }],[\"send_to_ws\",async function(ws,data) {\n    try {\n        return await ws[\"send\"].call(ws,await (async function(){\n            if (check_true ((data instanceof Object))){\n                return await JSON.stringify(data)\n            } else {\n                return data\n            }\n        })())\n    } catch (__exception__14) {\n        if (__exception__14 instanceof Error) {\n            let e=__exception__14;\n            {\n                {\n                    console.log(\"send_to_ws: error on send: \",(e && e.message));\n                    throw e;\n                    \n                }\n            }\n        }\n    }\n}],[\"close_ws\",async function(ws) {\n    return await ws[\"close\"]()\n}],[\"load\",async function(filename) {\n    if (check_true (((filename instanceof String || typeof filename==='string')&& await (await Environment.get_global(\"not\"))(await (await Environment.get_global(\"blank?\"))(filename))))){\n        {\n            let evaluator;\n            evaluator=await Environment[\"get_namespace_handle\"].call(Environment,await (await Environment.get_global(\"current_namespace\"))());\n            await (await Environment.get_global(\"assert\"))(evaluator,\"load cannot get current namespace evaluator\");\n            return await evaluator[\"evaluate\"].call(evaluator,await (async function(){\n                 return await (await Environment.get_global(\"fetch_text\"))((\"/files/\"+ filename)) \n            })(),null,{\n                source_name:filename\n            })\n        }\n    }\n}]]"] 
        })()] 
    })(),user:await (async function(){
         return [{"meta_for_symbol":{"core_lang":true,"description":"Given a quoted symbol and a boolean indicating whether or not all namespaces should be searched, returns the meta data associated with the symbol for each environment.  If search mode is requested, the value returned is an array, since there can be symbols with the same name in different environments. If no values are found an empty array is returned.  If not in search mode, meta_for_symbol searches the current namespace only, and if a matching symbol is found, returns an object with all found metadata, otherwise nil is returned.","usage":["quoted_symbol:string","search_mode:boolean"],"tags":["describe","meta","help","definition","symbol","metadata"]},"describe":{"core_lang":true,"description":"Given a quoted symbol returns the relevant metadata pertinent to the current namespace context.","usage":["quoted_symbol:string","search_mode:boolean"],"tags":["meta","help","definition","symbol","metadata","info","meta_for_symbol"]},"undefine":{"core_lang":true,"description":"Given a quoted symbol removes the symbol and any definition information from the namespace. If the namespace is fully-qualified, then the symbol will be removed from the specified namespace instead of the currently active namespace. If the symbol is successfully removed, the function will return true, otherwise if it is not found, false will be returned.  Note that if the specified symbol is non-qualified, but exists in a different, accessible namespace, but the symbol isn't present in the current namespace, the symbol will not be deleted.  The environment is not searched and therefore symbols have to be explicitly fully-qualified for any effect of this function outside the current namespace.","usage":["quoted_symbol:string"],"tags":["symbol","delete","remove","unintern","reference","value"]},"*namespace*":{"core_lang":true},"pend_load":{"core_lang":true,"description":"When used as an initializer wrapper via the use_symbols macro, the wrapped initializer will not be loaded until the from_namespace is loaded to ensure that the wrapped initializer won't fail due to not yet loaded dependencies.","usage":["from_namespace:string","target_namespace:string","symbol:string","initializer:array"],"tags":["symbol","definitions","namespace","scope","dependency","dependencies","require"]},"symbols":{"core_lang":true,"description":"Returns an array of the defined global symbols for the local environment.  If opts.unique is true, only symbols that are not part of the built ins are included.","usage":["opts:object"],"tags":["symbol","names","definitions","values","scope"]},"set_global":{"core_lang":true},"get_global":{"core_lang":true},"symbol_definition":{"core_lang":true,"description":"Given a symbol name and an optional namespace, either as a fully qualified path or via the target_namespace argument, returns definition information about the retquested symbol.  Used primarily by the compiler to find metadata for a specific symbol during compilation.","usage":["symname:string","namespace:string"],"tags":["compiler","symbols","namespace","search","context","environment"]},"compile":{"core_lang":true,"description":"Compiles the given JSON or quoted lisp and returns a string containing the lisp form or expression as javascript.<br>If passed the option { meta: true } , an array is returned containing compilation metadata in element 0 and the compiled code in element 1.","usage":["json_expression:*","opts:object"],"tags":["macro","quote","quotes","desym","compiler"]},"env_log":{"core_lang":true,"description":"The environment logging function used by the environment.","usage":["arg0:*","argN:*"]},"evaluate_local":{"core_lang":true},"evaluate":{"core_lang":true},"eval_struct":{"core_lang":true}},await (async function(){
             return ["=:javascript","[[\"meta_for_symbol\",function(quoted_symbol,search_mode) {\n                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){\n                            {\n                                let local_data=(Environment.global_ctx.scope[quoted_symbol]|| Environment.definitions[quoted_symbol]);\n                                ;\n                                let acc=[];\n                                ;\n                                if (check_true (search_mode)){\n                                    {\n                                        if (check_true (local_data)){\n                                            {\n                                                (acc).push( ( get_global(\"add\"))({\n                                                    namespace:namespace,name:quoted_symbol,type: subtype(local_data)\n                                                }, ( function(){\n                                                    let it;\n                                                    it=Environment.definitions[quoted_symbol];\n                                                    if (check_true (it)){\n                                                        return it\n                                                    } else {\n                                                        return new Object()\n                                                    }\n                                                })()))\n                                            }\n                                        };\n                                        if (check_true (parent_environment)){\n                                            {\n                                                {\n                                                    let __collector;\n                                                    let __result;\n                                                    let __action;\n                                                    __collector=[];\n                                                    __result=null;\n                                                    __action=function(info) {\n                                                        return (acc).push(info)\n                                                    };\n                                                    ;\n                                                     ( function() {\n                                                        let __for_body__121=function(__item) {\n                                                            __result= __action(__item);\n                                                            if (check_true (__result)){\n                                                                return (__collector).push(__result)\n                                                            }\n                                                        };\n                                                        let __array__122=[],__elements__120= ( function() {\n                                                            {\n                                                                 let __call_target__= parent_environment[\"meta_for_symbol\"].call(parent_environment,quoted_symbol,true), __call_method__=\"flat\";\n                                                                return  __call_target__[__call_method__].call(__call_target__,1)\n                                                            } \n                                                        })();\n                                                        let __BREAK__FLAG__=false;\n                                                        for(let __iter__119 in __elements__120) {\n                                                            __array__122.push( __for_body__121(__elements__120[__iter__119]));\n                                                            if(__BREAK__FLAG__) {\n                                                                 __array__122.pop();\n                                                                break;\n                                                                \n                                                            }\n                                                        }return __array__122;\n                                                         \n                                                    })();\n                                                    __collector\n                                                }\n                                            }\n                                        };\n                                        if (check_true (( length( keys(children))>0))){\n                                            {\n                                                {\n                                                    let __collector;\n                                                    let __result;\n                                                    let __action;\n                                                    __collector=[];\n                                                    __result=null;\n                                                    __action=function(details) {\n                                                        return (acc).push(details)\n                                                    };\n                                                    ;\n                                                     ( function() {\n                                                        let __for_body__125=function(__item) {\n                                                            __result= __action(__item);\n                                                            if (check_true (__result)){\n                                                                return (__collector).push(__result)\n                                                            }\n                                                        };\n                                                        let __array__126=[],__elements__124= ( function(){\n                                                            let ____collector__127=  function(){\n                                                                return []\n                                                            };\n                                                            let ____result__128=  function(){\n                                                                return null\n                                                            };\n                                                            let ____action__129=  function(){\n                                                                return function(child_data) {\n                                                                    if (check_true ( not((child_data['0']=== ( get_global(\"current_namespace\"))())))){\n                                                                        {\n                                                                            return  child_data['1'][\"meta_for_symbol\"].call(child_data['1'],quoted_symbol)\n                                                                        }\n                                                                    }\n                                                                }\n                                                            };\n                                                            {\n                                                                let __collector= ____collector__127();\n                                                                ;\n                                                                let __result= ____result__128();\n                                                                ;\n                                                                let __action= ____action__129();\n                                                                ;\n                                                                ;\n                                                                 ( function() {\n                                                                    let __for_body__132=function(__item) {\n                                                                        __result= __action(__item);\n                                                                        if (check_true (__result)){\n                                                                            return (__collector).push(__result)\n                                                                        }\n                                                                    };\n                                                                    let __array__133=[],__elements__131= pairs(children);\n                                                                    let __BREAK__FLAG__=false;\n                                                                    for(let __iter__130 in __elements__131) {\n                                                                        __array__133.push( __for_body__132(__elements__131[__iter__130]));\n                                                                        if(__BREAK__FLAG__) {\n                                                                             __array__133.pop();\n                                                                            break;\n                                                                            \n                                                                        }\n                                                                    }return __array__133;\n                                                                     \n                                                                })();\n                                                                return __collector\n                                                            }\n                                                        })();\n                                                        let __BREAK__FLAG__=false;\n                                                        for(let __iter__123 in __elements__124) {\n                                                            __array__126.push( __for_body__125(__elements__124[__iter__123]));\n                                                            if(__BREAK__FLAG__) {\n                                                                 __array__126.pop();\n                                                                break;\n                                                                \n                                                            }\n                                                        }return __array__126;\n                                                         \n                                                    })();\n                                                    __collector\n                                                }\n                                            }\n                                        };\n                                        return acc\n                                    }\n                                } else {\n                                    {\n                                        quoted_symbol= ( function(){\n                                            if (check_true ( starts_with_ques_( ( function(){\n                                                 return \"=:\" \n                                            })(),quoted_symbol))){\n                                                return  quoted_symbol[\"substr\"].call(quoted_symbol,2)\n                                            } else {\n                                                return quoted_symbol\n                                            }\n                                        })();\n                                        {\n                                            let it;\n                                            it=Environment.definitions[quoted_symbol];\n                                            if (check_true (it)){\n                                                return  ( get_global(\"add\"))({\n                                                    namespace:namespace,type: sub_type(local_data),name:quoted_symbol\n                                                },it)\n                                            } else {\n                                                return null\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }],[\"describe\",async function(quoted_symbol,search_mode) {\n                        let internal_results=await meta_for_symbol(quoted_symbol,true);\n                        ;\n                        if (check_true (((internal_results instanceof Array)&& internal_results['0']))){\n                            if (check_true (search_mode)){\n                                return internal_results\n                            } else {\n                                return await first(internal_results)\n                            }\n                        } else {\n                            {\n                                let external_results=await get_outside_global(quoted_symbol);\n                                ;\n                                if (check_true (external_results)){\n                                    {\n                                        let detail={\n                                            location:\"external\",type:await subtype(external_results),name:quoted_symbol,namespace:\"EXTERNAL\",description:(\"This is not a bound symbol within the Juno Environment.  \"+ \"If it is to be used, it is recommended to create a reference to it with \"+ \"`(defglobal \"+ quoted_symbol+ \" \"+ quoted_symbol+ \" { `description: \\\"...\\\" })`\")\n                                        };\n                                        ;\n                                        if (check_true (search_mode)){\n                                            return await (async function(){\n                                                let __array_op_rval__136=detail;\n                                                 if (__array_op_rval__136 instanceof Function){\n                                                    return await __array_op_rval__136() \n                                                } else {\n                                                    return [__array_op_rval__136]\n                                                }\n                                            })()\n                                        } else {\n                                            return detail\n                                        }\n                                    }\n                                } else {\n                                    return null\n                                }\n                            }\n                        }\n                    }],[\"undefine\",function(quoted_symbol) {\n                        if (check_true ((quoted_symbol instanceof String || typeof quoted_symbol==='string'))){\n                            {\n                                let namespace_identity;\n                                let parent_call;\n                                let child_call;\n                                let target_symbol;\n                                namespace_identity=(quoted_symbol).split(\"/\");\n                                parent_call=null;\n                                child_call=null;\n                                target_symbol=null;\n                                ;\n                                return   (function(){\n                                    if (check_true ((((namespace_identity.length===1)&& Environment.global_ctx.scope[namespace_identity['0']])|| ((namespace_identity.length>1)&& (namespace_identity['0']===namespace))))) {\n                                        {\n                                            target_symbol= ( function(){\n                                                if (check_true ((namespace_identity.length>1))){\n                                                    return namespace_identity['1']\n                                                } else {\n                                                    return namespace_identity['0']\n                                                }\n                                            })();\n                                             delete_prop(Environment.definitions,target_symbol);\n                                            if (check_true (Environment.global_ctx.scope[target_symbol])){\n                                                return  delete_prop(Environment.global_ctx.scope,target_symbol)\n                                            } else {\n                                                return false\n                                            }\n                                        }\n                                    } else if (check_true (((namespace_identity.length>1)&& parent_environment))) {\n                                        {\n                                            parent_call= parent_environment[\"get_global\"].call(parent_environment,\"undefine\");\n                                            return (parent_call)(quoted_symbol)\n                                        }\n                                    } else if (check_true (((namespace_identity.length>1)&& children[namespace_identity['0']]))) {\n                                        {\n                                            child_call= ( function() {\n                                                {\n                                                     let __call_target__=children[namespace_identity['0']], __call_method__=\"get_global\";\n                                                    return  __call_target__[__call_method__].call(__call_target__,\"undefine\")\n                                                } \n                                            })();\n                                            return  child_call(quoted_symbol)\n                                        }\n                                    } else {\n                                        return false\n                                    }\n                                } )()\n                            }\n                        } else {\n                            throw new SyntaxError(\"undefine requires a quoted symbol\");\n                            \n                        }\n                    }],[\"*namespace*\",\"user\"],[\"pend_load\",async function(from_namespace,target_namespace,symbol,initializer) {\n                        if (check_true ((null==pending_ns_loads[from_namespace]))){\n                            {\n                                await async function(){\n                                    pending_ns_loads[from_namespace]=[];\n                                    return pending_ns_loads;\n                                    \n                                }()\n                            }\n                        };\n                        (pending_ns_loads[from_namespace]).push({\n                            symbol:symbol,source_ns:from_namespace,target_ns:target_namespace,initializer:await (async function(){\n                                 return [\"=:quote\",initializer] \n                            })()\n                        });\n                        return initializer\n                    }],[\"symbols\",async function(opts) {\n                        return await async function(){\n                            if (check_true ((null==opts))) {\n                                return await keys(Environment.global_ctx.scope)\n                            } else if (check_true (opts.unique)) {\n                                {\n                                    let no_includes=await make_set(await conj([\"meta_for_symbol\",\"describe\",\"undefine\",\"*namespace*\",\"pend_load\",\"symbols\",\"set_global\",\"get_global\",\"symbol_definition\",\"compile\",\"env_log\",\"evaluate_local\",\"evaluate\",\"eval_struct\",\"set_compiler\",\"clone\",\"eval\",\"add_escape_encoding\",\"get_outside_global\",\"as_lisp\",\"lisp_writer\",\"clone_to_new\",\"save_env\",\"null\",\"compiler\"],built_ins));\n                                    ;\n                                    {\n                                        let __collector;\n                                        let __result;\n                                        let __action;\n                                        __collector=[];\n                                        __result=null;\n                                        __action=async function(sym) {\n                                            if (check_true (await no_includes[\"has\"].call(no_includes,sym))){\n                                                return null\n                                            } else {\n                                                return sym\n                                            }\n                                        };\n                                        ;\n                                        await (async function() {\n                                            let __for_body__213=async function(__item) {\n                                                __result=await __action(__item);\n                                                if (check_true (__result)){\n                                                    return (__collector).push(__result)\n                                                }\n                                            };\n                                            let __array__214=[],__elements__212=await keys(Environment.global_ctx.scope);\n                                            let __BREAK__FLAG__=false;\n                                            for(let __iter__211 in __elements__212) {\n                                                __array__214.push(await __for_body__213(__elements__212[__iter__211]));\n                                                if(__BREAK__FLAG__) {\n                                                     __array__214.pop();\n                                                    break;\n                                                    \n                                                }\n                                            }return __array__214;\n                                             \n                                        })();\n                                        return __collector\n                                    }\n                                }\n                            }\n                        } ()\n                    }],[\"set_global\",function(refname,value,meta,is_constant,target_namespace,contained_req) {\n                          (function(){\n                            if (check_true ( not((typeof refname===\"string\")))) {\n                                throw new TypeError(\"reference name must be a string type\");\n                                \n                            } else if (check_true (((Environment===value)|| (Environment.global_ctx===value)|| (Environment.global_ctx.scope===value)))) {\n                                {\n                                    throw new EvalError(\"cannot set the environment scope as a global value\");\n                                    \n                                }\n                            }\n                        } )();\n                        if (check_true ( resolve_path( ( function(){\n                            let __array_op_rval__217=refname;\n                             if (__array_op_rval__217 instanceof Function){\n                                return  __array_op_rval__217(\"constant\") \n                            } else {\n                                return [__array_op_rval__217,\"constant\"]\n                            }\n                        })(),Environment.definitions))){\n                            {\n                                throw new TypeError((\"Assignment to constant variable \"+ refname));\n                                \n                            }\n                        };\n                        let namespace_identity= ( function(){\n                            if (check_true (target_namespace)){\n                                return  ( function(){\n                                    let __array_op_rval__218=target_namespace;\n                                     if (__array_op_rval__218 instanceof Function){\n                                        return  __array_op_rval__218(refname) \n                                    } else {\n                                        return [__array_op_rval__218,refname]\n                                    }\n                                })()\n                            } else {\n                                return (refname).split(\"/\")\n                            }\n                        })();\n                        ;\n                        return   (function(){\n                            if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace===namespace_identity['0']))))) {\n                                return  parent_environment[\"set_global\"].call(parent_environment,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'],(contained|| contained_req))\n                            } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {\n                                {\n                                    if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){\n                                        return  ( function() {\n                                            {\n                                                 let __call_target__=children[namespace_identity['0']], __call_method__=\"set_global\";\n                                                return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value,meta,is_constant,namespace_identity['0'])\n                                            } \n                                        })()\n                                    } else {\n                                        throw new EvalError((\"namespace \"+ namespace_identity['0']+ \" doesn't exist\"));\n                                        \n                                    }\n                                }\n                            } else {\n                                try {\n                                    let comps= get_object_path( ( function(){\n                                        if (check_true ((1===namespace_identity.length))){\n                                            return namespace_identity['0']\n                                        } else {\n                                            return namespace_identity['1']\n                                        }\n                                    })());\n                                    ;\n                                      (function(){\n                                        Environment.global_ctx.scope[comps['0']]=value;\n                                        return Environment.global_ctx.scope;\n                                        \n                                    })();\n                                    if (check_true (((meta instanceof Object)&&  not((meta instanceof Array))))){\n                                        {\n                                            if (check_true (is_constant)){\n                                                {\n                                                      (function(){\n                                                        meta[\"constant\"]=true;\n                                                        return meta;\n                                                        \n                                                    })()\n                                                }\n                                            };\n                                              (function(){\n                                                Environment.definitions[comps['0']]=meta;\n                                                return Environment.definitions;\n                                                \n                                            })()\n                                        }\n                                    } else {\n                                        if (check_true (is_constant)){\n                                            {\n                                                  (function(){\n                                                    Environment.definitions[comps['0']]={\n                                                        constant:true\n                                                    };\n                                                    return Environment.definitions;\n                                                    \n                                                })()\n                                            }\n                                        }\n                                    };\n                                    return Environment.global_ctx.scope[comps['0']]\n                                } catch (__exception__219) {\n                                    if (__exception__219 instanceof Error) {\n                                        let e=__exception__219;\n                                        {\n                                            {\n                                                let message=(\"Error: set_global: \"+ _star_namespace_star_+ \"symbol name: \"+ refname+ \": \"+ e.message);\n                                                ;\n                                                 console.error(message,[]);\n                                                  (function(){\n                                                    e[\"message\"]=message;\n                                                    return e;\n                                                    \n                                                })();\n                                                throw e;\n                                                \n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        } )()\n                    }],[\"get_global\",function(refname,value_if_not_found,suppress_check_external_env,target_namespace,path_comps,contained_req) {\n                        return   (function(){\n                            if (check_true ( not((typeof refname===\"string\")))) {\n                                throw new TypeError(\"reference name must be a string type\");\n                                \n                            } else if (check_true ((refname===\"Environment\"))) {\n                                return Environment\n                            } else if (check_true ( compiler_operators[\"has\"].call(compiler_operators,refname))) {\n                                return special_identity\n                            } else {\n                                {\n                                    let namespace_identity;\n                                    let comps;\n                                    let refval;\n                                    let symbol_name;\n                                    let check_external_env;\n                                    namespace_identity= ( function(){\n                                        if (check_true (target_namespace)){\n                                            return  ( function(){\n                                                let __array_op_rval__227=target_namespace;\n                                                 if (__array_op_rval__227 instanceof Function){\n                                                    return  __array_op_rval__227(refname) \n                                                } else {\n                                                    return [__array_op_rval__227,refname]\n                                                }\n                                            })()\n                                        } else {\n                                            return (refname).split(\"/\")\n                                        }\n                                    })();\n                                    comps=(path_comps||  get_object_path( ( function(){\n                                        if (check_true ((1===namespace_identity.length))){\n                                            return namespace_identity['0']\n                                        } else {\n                                            return namespace_identity['1']\n                                        }\n                                    })()));\n                                    refval=null;\n                                    symbol_name=null;\n                                    check_external_env= ( function(){\n                                        if (check_true (suppress_check_external_env)){\n                                            return false\n                                        } else {\n                                            return check_external_env_default\n                                        }\n                                    })();\n                                    return   (function(){\n                                        if (check_true ((parent_environment&& (namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {\n                                            return  parent_environment[\"get_global\"].call(parent_environment,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps,(contained|| contained_req))\n                                        } else if (check_true (((namespace_identity.length>1)&&  not((namespace_identity['0']===namespace))))) {\n                                            {\n                                                if (check_true ((children[namespace_identity['0']]&&  not(contained_req)))){\n                                                    return  ( function() {\n                                                        {\n                                                             let __call_target__=children[namespace_identity['0']], __call_method__=\"get_global\";\n                                                            return  __call_target__[__call_method__].call(__call_target__,namespace_identity['1'],value_if_not_found,suppress_check_external_env,namespace_identity['0'],comps)\n                                                        } \n                                                    })()\n                                                } else {\n                                                    {\n                                                        throw new EvalError((\"namespace \"+ namespace_identity['0']+ \" doesn't exist\"));\n                                                        \n                                                    }\n                                                }\n                                            }\n                                        } else {\n                                            {\n                                                refval=Environment.global_ctx.scope[comps['0']];\n                                                if (check_true (((undefined===refval)&& (namespace_identity.length===1)&& parent_environment))){\n                                                    {\n                                                        let rval= parent_environment[\"get_global\"].call(parent_environment,refname,value_if_not_found,suppress_check_external_env,null,comps,(contained|| contained_req));\n                                                        ;\n                                                        return rval\n                                                    }\n                                                } else {\n                                                    {\n                                                        if (check_true (((undefined===refval)&& check_external_env))){\n                                                            refval= ( function(){\n                                                                if (check_true (check_external_env)){\n                                                                    return ( get_outside_global(comps['0'])|| NOT_FOUND)\n                                                                } else {\n                                                                    return NOT_FOUND\n                                                                }\n                                                            })()\n                                                        };\n                                                        return   (function(){\n                                                            if (check_true (((NOT_FOUND===refval)&&  not((undefined===value_if_not_found))))) {\n                                                                return value_if_not_found\n                                                            } else if (check_true ((NOT_FOUND===refval))) {\n                                                                {\n                                                                    throw new ReferenceError((\"symbol not found: \"+  ( function(){\n                                                                        if (check_true ((namespace_identity.length>1))){\n                                                                            return  add(namespace,\"/\",namespace_identity['1'])\n                                                                        } else {\n                                                                            return  add(namespace,\"/\",namespace_identity['0'])\n                                                                        }\n                                                                    })()));\n                                                                    \n                                                                }\n                                                            } else if (check_true ((comps.length===1))) {\n                                                                return refval\n                                                            } else if (check_true ((comps.length>1))) {\n                                                                {\n                                                                    return  resolve_path( rest(comps),refval)\n                                                                }\n                                                            } else {\n                                                                {\n                                                                     console.warn(\"get_global: condition fall through: \",comps);\n                                                                    return NOT_FOUND\n                                                                }\n                                                            }\n                                                        } )()\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    } )()\n                                }\n                            }\n                        } )()\n                    }],[\"symbol_definition\",async function(symname,target_namespace) {\n                        let namespace_identity;\n                        namespace_identity=await (async function(){\n                            if (check_true (target_namespace)){\n                                return await (async function(){\n                                    let __array_op_rval__230=target_namespace;\n                                     if (__array_op_rval__230 instanceof Function){\n                                        return await __array_op_rval__230(symname) \n                                    } else {\n                                        return [__array_op_rval__230,symname]\n                                    }\n                                })()\n                            } else {\n                                if (check_true ((await length(symname)>2))){\n                                    return (symname).split(\"/\")\n                                } else {\n                                    return await (async function(){\n                                        let __array_op_rval__231=symname;\n                                         if (__array_op_rval__231 instanceof Function){\n                                            return await __array_op_rval__231() \n                                        } else {\n                                            return [__array_op_rval__231]\n                                        }\n                                    })()\n                                }\n                            }\n                        })();\n                        return await async function(){\n                            if (check_true ((namespace_identity.length===1))) {\n                                {\n                                    let it;\n                                    it=Environment.definitions[symname];\n                                    if (check_true (it)){\n                                        return it\n                                    } else {\n                                        if (check_true (parent_environment)){\n                                            return await parent_environment[\"symbol_definition\"].call(parent_environment,symname)\n                                        }\n                                    }\n                                }\n                            } else if (check_true ((namespace_identity['0']===namespace))) {\n                                return Environment.definitions[symname]\n                            } else if (check_true (parent_environment)) {\n                                return await parent_environment[\"symbol_definition\"].call(parent_environment,namespace_identity['1'],namespace_identity['0'])\n                            } else if (check_true ((namespace_identity.length===2))) {\n                                return await (async function() {\n                                    {\n                                         let __call_target__=children[namespace_identity['0']], __call_method__=\"symbol_definition\";\n                                        return await __call_target__[__call_method__].call(__call_target__,namespace_identity['1'])\n                                    } \n                                })()\n                            } else {\n                                return undefined\n                            }\n                        } ()\n                    }],[\"compile\",async function(json_expression,opts) {\n                        let out;\n                        opts=await add({\n                            env:Environment\n                        },opts,{\n                            meta:await (async function(){\n                                if (check_true ((opts&& opts.meta))){\n                                    return true\n                                } else {\n                                    return false\n                                }\n                            })()\n                        });\n                        out=null;\n                        out=await (async function(){\n                             return await compiler(json_expression,opts) \n                        })();\n                        return await async function(){\n                            if (check_true (((out instanceof Array)&& out['0'].ctype&& (out['0'].ctype===\"FAIL\")))) {\n                                return out\n                            } else if (check_true (opts.meta)) {\n                                return out\n                            } else {\n                                return out['1']\n                            }\n                        } ()\n                    }],[\"env_log\",async function(...args) {\n                            return await (async function(){\n                                let __target_arg__189=[].concat(await conj(await (async function(){\n                                    let __array_op_rval__190=style;\n                                     if (__array_op_rval__190 instanceof Function){\n                                        return await __array_op_rval__190() \n                                    } else {\n                                        return [__array_op_rval__190]\n                                    }\n                                })(),args));\n                                if(!__target_arg__189 instanceof Array){\n                                    throw new TypeError(\"Invalid final argument to apply - an array is required\")\n                                }let __pre_arg__191=(\"%c\"+ await (async function(){\n                                    if (check_true (opts.prefix)){\n                                        return opts.prefix\n                                    } else {\n                                        return (args).shift()\n                                    }\n                                })());\n                                __target_arg__189.unshift(__pre_arg__191);\n                                return (console.log).apply(this,__target_arg__189)\n                            })()\n                        }],[\"evaluate_local\",async function(expression,ctx,opts) {\n                        let compiled;\n                        let error_data;\n                        let requires;\n                        let precompiled_assembly;\n                        let result;\n                        opts=(opts|| new Object());\n                        compiled=null;\n                        error_data=null;\n                        requires=null;\n                        precompiled_assembly=null;\n                        result=null;\n                        if (check_true (opts.compiled_source)){\n                            compiled=expression\n                        } else {\n                            try {\n                                compiled=await (async function(){\n                                     return await compiler(await (async function(){\n                                        if (check_true (opts.json_in)){\n                                            return expression\n                                        } else {\n                                            return await Environment[\"read_lisp\"].call(Environment,expression,{\n                                                source_name:opts.source_name\n                                            })\n                                        }\n                                    })(),{\n                                        env:Environment,ctx:ctx,throttle:opts.throttle,formatted_output:true,source_name:opts.source_name,throw_on_error:opts.throw_on_error,on_final_token_assembly:async function(val) {\n                                            return precompiled_assembly=val\n                                        },error_report:(opts.error_report|| null),quiet_mode:(opts.quiet_mode|| false)\n                                    }) \n                                })()\n                            } catch (__exception__238) {\n                                if (__exception__238 instanceof Error) {\n                                    let e=__exception__238;\n                                    {\n                                        {\n                                            if (check_true (opts.throw_on_error)){\n                                                {\n                                                    throw e;\n                                                    \n                                                }\n                                            };\n                                            if (check_true ((e instanceof LispSyntaxError))){\n                                                {\n                                                    await async function(){\n                                                        e[\"message\"]=await JSON.parse(e.message);\n                                                        return e;\n                                                        \n                                                    }()\n                                                }\n                                            };\n                                            await async function(){\n                                                if (check_true ((e instanceof LispSyntaxError))) {\n                                                    return error_data=await add({\n                                                        error:\"LispSyntaxError\"\n                                                    },e.message)\n                                                } else {\n                                                    error_data={\n                                                        error:await sub_type(e),message:e.message,stack:e.stack,form:await (async function(){\n                                                             return await async function(){\n                                                                if (check_true (((expression instanceof String || typeof expression==='string')&& (expression.length>100)))) {\n                                                                    return await add(await expression[\"substr\"].call(expression,0,100),\"...\")\n                                                                } else {\n                                                                    return await (await get_global(\"as_lisp\"))(expression)\n                                                                }\n                                                            } () \n                                                        })(),parent_forms:[],source_name:opts.source_name,invalid:true\n                                                    }\n                                                }\n                                            } ();\n                                            if (check_true (opts.error_report)){\n                                                await (async function(){\n                                                    let __array_op_rval__240=opts.error_report;\n                                                     if (__array_op_rval__240 instanceof Function){\n                                                        return await __array_op_rval__240(error_data) \n                                                    } else {\n                                                        return [__array_op_rval__240,error_data]\n                                                    }\n                                                })()\n                                            } else {\n                                                await console.error(\"Compilation Error: \",error_data)\n                                            };\n                                            compiled=await (async function(){\n                                                 return [{\n                                                    error:true\n                                                },null] \n                                            })()\n                                        }\n                                    }\n                                }\n                            }\n                        };\n                        return await async function(){\n                            if (check_true ((null==compiled))) {\n                                return null\n                            } else if (check_true ((compiled['0'].ctype===\"FAIL\"))) {\n                                {\n                                    if (check_true (opts.error_report)){\n                                        {\n                                            await (async function(){\n                                                let __array_op_rval__241=opts.error_report;\n                                                 if (__array_op_rval__241 instanceof Function){\n                                                    return await __array_op_rval__241(compiled['1']) \n                                                } else {\n                                                    return [__array_op_rval__241,compiled['1']]\n                                                }\n                                            })()\n                                        }\n                                    };\n                                    return await async function(){\n                                        if (check_true ((compiled['1'] instanceof Error))) {\n                                            throw compiled['1'];\n                                            \n                                        } else if (check_true ((compiled['1']['0'] instanceof Error))) {\n                                            throw compiled['1']['0'];\n                                            \n                                        } else if (check_true (((compiled['1']['0'] instanceof Object)&& (compiled['1']['0'].error===\"SyntaxError\")))) {\n                                            {\n                                                let new_error=new SyntaxError(compiled['1']['0'].message);\n                                                ;\n                                                await async function(){\n                                                    new_error[\"from\"]=compiled['1']['0'];\n                                                    return new_error;\n                                                    \n                                                }();\n                                                throw new_error;\n                                                \n                                            }\n                                        } else {\n                                            return compiled['1']\n                                        }\n                                    } ()\n                                }\n                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))&& parent_environment))) {\n                                return await parent_environment[\"evaluate_local\"].call(parent_environment,compiled,ctx,await add(new Object(),opts,{\n                                    compiled_source:true\n                                }))\n                            } else if (check_true ((compiled['0'].namespace&& await not((compiled['0'].namespace===namespace))))) {\n                                if (check_true (children[compiled['0'].namespace])){\n                                    return await (async function() {\n                                        {\n                                             let __call_target__=children[compiled['0'].namespace], __call_method__=\"evaluate_local\";\n                                            return await __call_target__[__call_method__].call(__call_target__,compiled,ctx,await add(new Object(),opts,{\n                                                compiled_source:true\n                                            }))\n                                        } \n                                    })()\n                                } else {\n                                    throw new EvalError((\"unknown namespace \"+ compiled['0'].namespace+ \" assignment\"));\n                                    \n                                }\n                            } else {\n                                {\n                                    if (check_true (opts.on_compilation_complete)){\n                                        await (async function(){\n                                            let __array_op_rval__243=opts.on_compilation_complete;\n                                             if (__array_op_rval__243 instanceof Function){\n                                                return await __array_op_rval__243(compiled) \n                                            } else {\n                                                return [__array_op_rval__243,compiled]\n                                            }\n                                        })()\n                                    };\n                                    try {\n                                        if (check_true (((compiled instanceof Array)&& (compiled['0'] instanceof Object)&& compiled['0'].ctype&& await not((compiled['0'].ctype instanceof String || typeof compiled['0'].ctype==='string'))))){\n                                            {\n                                                await async function(){\n                                                    compiled['0'][\"ctype\"]=await subtype(compiled['0'].ctype);\n                                                    return compiled['0'];\n                                                    \n                                                }()\n                                            }\n                                        };\n                                        result=await (async function(){\n                                             return await async function(){\n                                                if (check_true (compiled.error)) {\n                                                    throw new Error((await get_global(\"indirect_new\"))(compiled.error,compiled.message));\n                                                    \n                                                } else if (check_true ((compiled['0'].ctype&& (await contains_ques_(\"block\",compiled['0'].ctype)|| (compiled['0'].ctype===\"assignment\")|| (compiled['0'].ctype===\"__!NOT_FOUND!__\"))))) {\n                                                    if (check_true (await (async function(){\n                                                        let __array_op_rval__246=compiled['0'].has_lisp_globals;\n                                                         if (__array_op_rval__246 instanceof Function){\n                                                            return await __array_op_rval__246() \n                                                        } else {\n                                                            return [__array_op_rval__246]\n                                                        }\n                                                    })())){\n                                                        {\n                                                            await async function(){\n                                                                compiled[1]=new AsyncFunction(\"Environment\",(\"{ \"+ compiled['1']+ \"}\"));\n                                                                return compiled;\n                                                                \n                                                            }();\n                                                            return await (async function(){\n                                                                let __array_op_rval__248=compiled['1'];\n                                                                 if (__array_op_rval__248 instanceof Function){\n                                                                    return await __array_op_rval__248(Environment) \n                                                                } else {\n                                                                    return [__array_op_rval__248,Environment]\n                                                                }\n                                                            })()\n                                                        }\n                                                    } else {\n                                                        {\n                                                            await async function(){\n                                                                compiled[1]=new AsyncFunction((\"{\"+ compiled['1']+ \"}\"));\n                                                                return compiled;\n                                                                \n                                                            }();\n                                                            return await (async function(){\n                                                                let __array_op_rval__250=compiled['1'];\n                                                                 if (__array_op_rval__250 instanceof Function){\n                                                                    return await __array_op_rval__250() \n                                                                } else {\n                                                                    return [__array_op_rval__250]\n                                                                }\n                                                            })()\n                                                        }\n                                                    }\n                                                } else if (check_true ((compiled['0'].ctype&& ((\"AsyncFunction\"===compiled['0'].ctype)|| (\"statement\"===compiled['0'].ctype)|| (\"objliteral\"===compiled['0'].ctype))))) {\n                                                    {\n                                                        if (check_true (await (async function(){\n                                                            let __array_op_rval__251=compiled['0'].has_lisp_globals;\n                                                             if (__array_op_rval__251 instanceof Function){\n                                                                return await __array_op_rval__251() \n                                                            } else {\n                                                                return [__array_op_rval__251]\n                                                            }\n                                                        })())){\n                                                            {\n                                                                await async function(){\n                                                                    compiled[1]=new AsyncFunction(\"Environment\",(\"{ return \"+ compiled['1']+ \"} \"));\n                                                                    return compiled;\n                                                                    \n                                                                }();\n                                                                return await (async function(){\n                                                                    let __array_op_rval__253=compiled['1'];\n                                                                     if (__array_op_rval__253 instanceof Function){\n                                                                        return await __array_op_rval__253(Environment) \n                                                                    } else {\n                                                                        return [__array_op_rval__253,Environment]\n                                                                    }\n                                                                })()\n                                                            }\n                                                        } else {\n                                                            {\n                                                                await async function(){\n                                                                    compiled[1]=new AsyncFunction((\"{ return \"+ compiled['1']+ \"}\"));\n                                                                    return compiled;\n                                                                    \n                                                                }();\n                                                                return await (async function(){\n                                                                    let __array_op_rval__255=compiled['1'];\n                                                                     if (__array_op_rval__255 instanceof Function){\n                                                                        return await __array_op_rval__255() \n                                                                    } else {\n                                                                        return [__array_op_rval__255]\n                                                                    }\n                                                                })()\n                                                            }\n                                                        }\n                                                    }\n                                                } else if (check_true ((compiled['0'].ctype&& (\"Function\"===compiled['0'].ctype)))) {\n                                                    {\n                                                        if (check_true (await (async function(){\n                                                            let __array_op_rval__256=compiled['0'].has_lisp_globals;\n                                                             if (__array_op_rval__256 instanceof Function){\n                                                                return await __array_op_rval__256() \n                                                            } else {\n                                                                return [__array_op_rval__256]\n                                                            }\n                                                        })())){\n                                                            {\n                                                                await async function(){\n                                                                    compiled[1]=new Function(\"Environment\",(\"{ return \"+ compiled['1']+ \"} \"));\n                                                                    return compiled;\n                                                                    \n                                                                }();\n                                                                return await (async function(){\n                                                                    let __array_op_rval__258=compiled['1'];\n                                                                     if (__array_op_rval__258 instanceof Function){\n                                                                        return await __array_op_rval__258(Environment) \n                                                                    } else {\n                                                                        return [__array_op_rval__258,Environment]\n                                                                    }\n                                                                })()\n                                                            }\n                                                        } else {\n                                                            {\n                                                                await async function(){\n                                                                    compiled[1]=new Function((\"{ return \"+ compiled['1']+ \"}\"));\n                                                                    return compiled;\n                                                                    \n                                                                }();\n                                                                return await (async function(){\n                                                                    let __array_op_rval__260=compiled['1'];\n                                                                     if (__array_op_rval__260 instanceof Function){\n                                                                        return await __array_op_rval__260() \n                                                                    } else {\n                                                                        return [__array_op_rval__260]\n                                                                    }\n                                                                })()\n                                                            }\n                                                        }\n                                                    }\n                                                } else {\n                                                    return compiled['1']\n                                                }\n                                            } () \n                                        })()\n                                    } catch (__exception__244) {\n                                        if (__exception__244 instanceof Error) {\n                                            let e=__exception__244;\n                                            {\n                                                {\n                                                    if (check_true (true)){\n                                                        {\n                                                            let details={\n                                                                error:e.name,message:e.message,expanded_source:await (await get_global(\"pretty_print\"))(await (async function(){\n                                                                     return await (await get_global(\"detokenize\"))(precompiled_assembly) \n                                                                })()),compiled:compiled['1']\n                                                            };\n                                                            ;\n                                                            console.log(\"Syntax Error: \",details);\n                                                            await async function(){\n                                                                e[\"details\"]=details;\n                                                                return e;\n                                                                \n                                                            }()\n                                                        }\n                                                    };\n                                                    if (check_true ((opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4)))){\n                                                        {\n                                                            if (check_true (e.details)){\n                                                                await env_log(\"caught error: \",e.details)\n                                                            } else {\n                                                                await env_log(\"caught error: \",e.name,e.message,e)\n                                                            }\n                                                        }\n                                                    };\n                                                    if (check_true ((false&& (await sub_type(e)===\"SyntaxError\")&& (opts.log_errors|| (Environment.context.scope.__VERBOSITY__>4))))){\n                                                        await console.log(compiled['1'])\n                                                    };\n                                                    if (check_true (opts.error_report)){\n                                                        {\n                                                            await (async function(){\n                                                                let __array_op_rval__262=opts.error_report;\n                                                                 if (__array_op_rval__262 instanceof Function){\n                                                                    return await __array_op_rval__262(await (async function(){\n                                                                        if (check_true (e.details)){\n                                                                            return e.details\n                                                                        } else {\n                                                                            return {\n                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack\n                                                                            }\n                                                                        }\n                                                                    })()) \n                                                                } else {\n                                                                    return [__array_op_rval__262,await (async function(){\n                                                                        if (check_true (e.details)){\n                                                                            return e.details\n                                                                        } else {\n                                                                            return {\n                                                                                error:e.name,message:e.message,form:null,parent_forms:null,invalid:true,text:e.stack\n                                                                            }\n                                                                        }\n                                                                    })()]\n                                                                }\n                                                            })()\n                                                        }\n                                                    };\n                                                    result=e;\n                                                    if (check_true ((await not(opts.catch_errors)|| (ctx&& ctx.in_try)))){\n                                                        {\n                                                            throw result;\n                                                            \n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    };\n                                    return result\n                                }\n                            }\n                        } ()\n                    }],[\"evaluate\",async function(expression,ctx,opts) {\n                        return await async function(){\n                            if (check_true ((namespace===active_namespace))) {\n                                return await evaluate_local(expression,ctx,opts)\n                            } else if (check_true ((namespace===\"core\"))) {\n                                return await (async function() {\n                                    {\n                                         let __call_target__=children[active_namespace], __call_method__=\"evaluate\";\n                                        return await __call_target__[__call_method__].call(__call_target__,expression,ctx,opts)\n                                    } \n                                })()\n                            }\n                        } ()\n                    }],[\"eval_struct\",async function(lisp_struct,ctx,opts) {\n                        let rval;\n                        rval=null;\n                        if (check_true (lisp_struct instanceof Function)){\n                            rval=await (async function(){\n                                let __array_op_rval__267=lisp_struct;\n                                 if (__array_op_rval__267 instanceof Function){\n                                    return await __array_op_rval__267() \n                                } else {\n                                    return [__array_op_rval__267]\n                                }\n                            })()\n                        } else {\n                            rval=await (async function(){\n                                 return await evaluate(lisp_struct,ctx,await add({\n                                    json_in:true\n                                },(opts|| new Object()))) \n                            })()\n                        };\n                        return rval\n                    }],[\"set_compiler\",async function(compiler_function) {\n                        let new_ops;\n                        new_ops=await (async function(){\n                            let __array_op_rval__271=compiler_function;\n                             if (__array_op_rval__271 instanceof Function){\n                                return await __array_op_rval__271([],{\n                                    special_operators:true,env:Environment\n                                }) \n                            } else {\n                                return [__array_op_rval__271,[],{\n                                    special_operators:true,env:Environment\n                                }]\n                            }\n                        })();\n                        if (check_true (await is_set_ques_(new_ops))){\n                            {\n                                compiler_operators=new_ops;\n                                compiler=compiler_function;\n                                await async function(){\n                                    Environment.global_ctx.scope[\"compiler\"]=compiler;\n                                    return Environment.global_ctx.scope;\n                                    \n                                }();\n                                await (await get_global(\"register_feature\"))(\"compiler\")\n                            }\n                        } else {\n                            {\n                                await console.error(\"Invalid compiler function: invalid operators returned. Not installing.\");\n                                throw new EvalError(\"Invalid compiler function\");\n                                \n                            }\n                        };\n                        return compiler\n                    }],[\"clone\",async function(val) {\n                            if (check_true ((val===Environment))){\n                                return Environment\n                            } else {\n                                return await clone(val,0,Environment)\n                            }\n                        }],[\"eval\",async function(expression) {\n                        return await (async function(){\n                            let __array_op_rval__141=expression;\n                             if (__array_op_rval__141 instanceof Function){\n                                return await __array_op_rval__141() \n                            } else {\n                                return [__array_op_rval__141]\n                            }\n                        })()\n                    }],[\"add_escape_encoding\",async function(text) {        if (check_true ((text instanceof String || typeof text==='string'))){            let chars;            let acc;            chars=(text).split(\"\");            acc=[];            await (async function() {                let __for_body__3=async function(c) {                     return  await async function(){                        if (check_true( ((await c[\"charCodeAt\"].call(c,0)===34)))) {                            (acc).push(await String.fromCharCode(92));                             return  (acc).push(c)                        } else  {                             return (acc).push(c)                        }                    } ()                };                let __array__4=[],__elements__2=chars;                let __BREAK__FLAG__=false;                for(let __iter__1 in __elements__2) {                    __array__4.push(await __for_body__3(__elements__2[__iter__1]));                    if(__BREAK__FLAG__) {                         __array__4.pop();                        break;                                            }                }return __array__4;                             })();             return  (acc).join(\"\")        } else {              return text        }    }],[\"get_outside_global\",function get_outside_global(refname) {  try {    let tfn = new Function(\"{ if (typeof \" + refname + \" === 'undefined') { return undefined } else { return \"+refname+\" } }\");    return tfn();  } catch (ex) {    return undefined;  }}],[\"as_lisp\",lisp_writer],[\"lisp_writer\",lisp_writer],[\"clone_to_new\",async function(options) {\n                        let new_env;\n                        let my_children;\n                        let my_children_declarations;\n                        new_env=null;\n                        my_children=null;\n                        my_children_declarations=null;\n                        await env_log(namespace,\"cloning: # children: \",await length(children));\n                        new_env=await (async function(){\n                             return await dlisp_env({\n                                env:await (async function(){\n                                     return await clone(Environment) \n                                })(),children:await (async function(){\n                                     return await clone(children) \n                                })(),children_declarations:await (async function(){\n                                     return await clone(children_declarations) \n                                })()\n                            }) \n                        })();\n                        await env_log(namespace,\"constructed: \",await new_env[\"id\"]());\n                        return new_env\n                    }],[\"save_env\",async function(options) {\n                        let new_env;\n                        let my_children;\n                        let env_constructor;\n                        let dcomps;\n                        let version_tag;\n                        let build_time;\n                        let build_headers;\n                        let child_env;\n                        let want_buffer;\n                        let comp_buffer;\n                        let sorted_dependencies;\n                        let child_export_order;\n                        let preserve_imports;\n                        let include_source;\n                        let exports;\n                        let src;\n                        let target_insertion_path;\n                        let output_path;\n                        new_env=null;\n                        my_children=null;\n                        env_constructor=null;\n                        dcomps=await (async function(){\n                             return await (await get_global(\"date_components\"))(new Date()) \n                        })();\n                        options=(options|| new Object());\n                        version_tag=await (async function(){\n                            if (check_true (await not(await blank_ques_(opts.version_tag)))){\n                                return opts.version_tag\n                            } else {\n                                return (await (async function(){\n                                    let __array_op_rval__328=dcomps.year;\n                                     if (__array_op_rval__328 instanceof Function){\n                                        return await __array_op_rval__328(dcomps.month,dcomps.day,dcomps.hour,dcomps.minute) \n                                    } else {\n                                        return [__array_op_rval__328,dcomps.month,dcomps.day,dcomps.hour,dcomps.minute]\n                                    }\n                                })()).join(\".\")\n                            }\n                        })();\n                        build_time=await (async function(){\n                             return await (await get_global(\"formatted_date\"))(new Date()) \n                        })();\n                        build_headers=[];\n                        child_env=null;\n                        want_buffer=(options.want_buffer|| false);\n                        comp_buffer=null;\n                        sorted_dependencies=await (async function(){\n                             return await (await get_global(\"sort_dependencies\"))() \n                        })();\n                        child_export_order=null;\n                        preserve_imports=await (async function(){\n                            if (check_true ((options&& (options.preserve_imports===false)))){\n                                return false\n                            } else {\n                                return true\n                            }\n                        })();\n                        include_source=false;\n                        exports=[];\n                        src=await (async function(){\n                            if (check_true (await Environment[\"get_global\"].call(Environment,\"*env_skeleton*\",null))){\n                                return await clone(await Environment[\"get_global\"].call(Environment,\"*env_skeleton*\"))\n                            } else {\n                                return await (await get_global(\"reader\"))(await (async function(){\n                                     return await (await get_global(\"read_text_file\"))(\"./src/environment.lisp\") \n                                })())\n                            }\n                        })();\n                        target_insertion_path=null;\n                        output_path=null;\n                        if (check_true (Environment.global_ctx.scope[\"*env_skeleton*\"])){\n                            {\n                                await (await get_global(\"register_feature\"))(\"*env_skeleton*\")\n                            }\n                        };\n                        target_insertion_path=await first(await (async function(){\n                             return await (await get_global(\"findpaths\"))(await (async function(){\n                                 return \"=:included_globals\" \n                            })(),src) \n                        })());\n                        if (check_true (await not((target_insertion_path instanceof Array)))){\n                            throw new EvalError(\"Unable to find the first included_globals symbol\");\n                            \n                        };\n                        target_insertion_path=await conj(await chop(target_insertion_path),[2]);\n                        if (check_true (options.include_source)){\n                            {\n                                include_source=true\n                            }\n                        };\n                        await env_log(namespace,\"cloning: # children: \",await length(children));\n                        await env_log(namespace,\"preserve_imports: \",preserve_imports);\n                        exports=await export_symbol_set(await (async function(){\n                            if (check_true (options.do_not_include)){\n                                return {\n                                    do_not_include:options.do_not_include\n                                }\n                            }\n                        })());\n                        child_export_order=await (async function(){\n                            let __collector;\n                            let __result;\n                            let __action;\n                            __collector=[];\n                            __result=null;\n                            __action=async function(cname) {\n                                if (check_true (await not((cname===\"core\")))){\n                                    {\n                                        return await (async function(){\n                                            let __array_op_rval__329=cname;\n                                             if (__array_op_rval__329 instanceof Function){\n                                                return await __array_op_rval__329(children[cname]) \n                                            } else {\n                                                return [__array_op_rval__329,children[cname]]\n                                            }\n                                        })()\n                                    }\n                                }\n                            };\n                            ;\n                            await (async function() {\n                                let __for_body__332=async function(__item) {\n                                    __result=await __action(__item);\n                                    if (check_true (__result)){\n                                        return (__collector).push(__result)\n                                    }\n                                };\n                                let __array__333=[],__elements__331=sorted_dependencies.namespaces;\n                                let __BREAK__FLAG__=false;\n                                for(let __iter__330 in __elements__331) {\n                                    __array__333.push(await __for_body__332(__elements__331[__iter__330]));\n                                    if(__BREAK__FLAG__) {\n                                         __array__333.pop();\n                                        break;\n                                        \n                                    }\n                                }return __array__333;\n                                 \n                            })();\n                            return __collector\n                        })();\n                        await console.log(\"save_env: child_export_order: \",await (async function(){\n                             return await (await get_global(\"each\"))(child_export_order,0) \n                        })());\n                        my_children=await to_object(await (async function(){\n                            let __collector;\n                            let __result;\n                            let __action;\n                            __collector=[];\n                            __result=null;\n                            __action=async function(child) {\n                                if (check_true (await resolve_path(await (async function(){\n                                    let __array_op_rval__334=child['0'];\n                                     if (__array_op_rval__334 instanceof Function){\n                                        return await __array_op_rval__334(\"serialize_with_image\") \n                                    } else {\n                                        return [__array_op_rval__334,\"serialize_with_image\"]\n                                    }\n                                })(),children_declarations))){\n                                    {\n                                        await env_log(\"checking \",namespace,\"checking for: \",await add(child['0'],\"/*on_serialization*\"));\n                                        if (check_true (await not(((typeof await add(child['0'],\"/*on_serialization*\")===\"undefined\")|| (await Environment[\"get_global\"].call(Environment,await add(child['0'],\"/*on_serialization*\"),ReferenceError)===ReferenceError))))){\n                                            {\n                                                await child['1'][\"evaluate\"].call(child['1'],(\"(\"+ child['0']+ \"/*on_serialization*)\"))\n                                            }\n                                        };\n                                        child_env=await child['1'][\"compile\"].call(child['1'],await child['1'][\"export_symbol_set\"].call(child['1'],await add(new Object(),await (async function(){\n                                            if (check_true (options.do_not_include)){\n                                                return {\n                                                    do_not_include:await (async function(){\n                                                        let comps;\n                                                        comps=null;\n                                                        {\n                                                            let ____collector__335= async function(){\n                                                                return []\n                                                            };\n                                                            let ____result__336= async function(){\n                                                                return null\n                                                            };\n                                                            let ____action__337= async function(){\n                                                                return async function(symbol) {\n                                                                    return await async function(){\n                                                                        if (check_true (await contains_ques_(\"/\",symbol))) {\n                                                                            {\n                                                                                comps=(symbol).split(\"/\");\n                                                                                if (check_true ((comps['0']===child['0']))){\n                                                                                    return comps['1']\n                                                                                }\n                                                                            }\n                                                                        } else {\n                                                                            return symbol\n                                                                        }\n                                                                    } ()\n                                                                }\n                                                            };\n                                                            {\n                                                                let __collector=await ____collector__335();\n                                                                ;\n                                                                let __result=await ____result__336();\n                                                                ;\n                                                                let __action=await ____action__337();\n                                                                ;\n                                                                ;\n                                                                await (async function() {\n                                                                    let __for_body__340=async function(__item) {\n                                                                        __result=await __action(__item);\n                                                                        if (check_true (__result)){\n                                                                            return (__collector).push(__result)\n                                                                        }\n                                                                    };\n                                                                    let __array__341=[],__elements__339=options.do_not_include;\n                                                                    let __BREAK__FLAG__=false;\n                                                                    for(let __iter__338 in __elements__339) {\n                                                                        __array__341.push(await __for_body__340(__elements__339[__iter__338]));\n                                                                        if(__BREAK__FLAG__) {\n                                                                             __array__341.pop();\n                                                                            break;\n                                                                            \n                                                                        }\n                                                                    }return __array__341;\n                                                                     \n                                                                })();\n                                                                return __collector\n                                                            }\n                                                        }\n                                                    })()\n                                                }\n                                            } else {\n                                                return new Object()\n                                            }\n                                        })(),{\n                                            no_compiler:true\n                                        })),{\n                                            throw_on_error:true\n                                        });\n                                        return await (async function(){\n                                            let __array_op_rval__342=child['0'];\n                                             if (__array_op_rval__342 instanceof Function){\n                                                return await __array_op_rval__342(await (async function(){\n                                                     return [[\"=:quotel\",child['1'].definitions],await (async function(){\n                                                         return [\"=:quotel\",await (async function(){\n                                                             return [\"=:javascript\",child_env] \n                                                        })()] \n                                                    })()] \n                                                })()) \n                                            } else {\n                                                return [__array_op_rval__342,await (async function(){\n                                                     return [[\"=:quotel\",child['1'].definitions],await (async function(){\n                                                         return [\"=:quotel\",await (async function(){\n                                                             return [\"=:javascript\",child_env] \n                                                        })()] \n                                                    })()] \n                                                })()]\n                                            }\n                                        })()\n                                    }\n                                }\n                            };\n                            ;\n                            await (async function() {\n                                let __for_body__345=async function(__item) {\n                                    __result=await __action(__item);\n                                    if (check_true (__result)){\n                                        return (__collector).push(__result)\n                                    }\n                                };\n                                let __array__346=[],__elements__344=child_export_order;\n                                let __BREAK__FLAG__=false;\n                                for(let __iter__343 in __elements__344) {\n                                    __array__346.push(await __for_body__345(__elements__344[__iter__343]));\n                                    if(__BREAK__FLAG__) {\n                                         __array__346.pop();\n                                        break;\n                                        \n                                    }\n                                }return __array__346;\n                                 \n                            })();\n                            return __collector\n                        })());\n                        await (await get_global(\"set_path\"))(target_insertion_path,src,await (async function(){\n                             return [\"=:fn\",[],await to_object(await (async function(){\n                                 return [[\"definitions\",await (async function(){\n                                     return [\"=:quote\",await (async function(){\n                                        if (check_true (options.do_not_include)){\n                                            return await to_object(await (async function(){\n                                                let __collector;\n                                                let __result;\n                                                let __action;\n                                                __collector=[];\n                                                __result=null;\n                                                __action=async function(defset) {\n                                                    if (check_true (await not(await contains_ques_(defset['0'],options.do_not_include)))){\n                                                        return await (async function(){\n                                                            let __array_op_rval__347=defset['0'];\n                                                             if (__array_op_rval__347 instanceof Function){\n                                                                return await __array_op_rval__347(defset['1']) \n                                                            } else {\n                                                                return [__array_op_rval__347,defset['1']]\n                                                            }\n                                                        })()\n                                                    }\n                                                };\n                                                ;\n                                                await (async function() {\n                                                    let __for_body__350=async function(__item) {\n                                                        __result=await __action(__item);\n                                                        if (check_true (__result)){\n                                                            return (__collector).push(__result)\n                                                        }\n                                                    };\n                                                    let __array__351=[],__elements__349=await pairs(Environment.definitions);\n                                                    let __BREAK__FLAG__=false;\n                                                    for(let __iter__348 in __elements__349) {\n                                                        __array__351.push(await __for_body__350(__elements__349[__iter__348]));\n                                                        if(__BREAK__FLAG__) {\n                                                             __array__351.pop();\n                                                            break;\n                                                            \n                                                        }\n                                                    }return __array__351;\n                                                     \n                                                })();\n                                                return __collector\n                                            })())\n                                        } else {\n                                            return await clone(Environment.definitions)\n                                        }\n                                    })()] \n                                })()],[\"declarations\",await (async function(){\n                                     return await clone(Environment.declarations) \n                                })()],[\"config\",await (async function(){\n                                    let exp_conf;\n                                    exp_conf=await (async function(){\n                                         return await clone(Environment.global_ctx.scope[\"*env_config*\"]) \n                                    })();\n                                    if (check_true (await not(preserve_imports))){\n                                        {\n                                            await async function(){\n                                                exp_conf[\"imports\"]=new Object();\n                                                return exp_conf;\n                                                \n                                            }()\n                                        }\n                                    };\n                                    if (check_true (options.features)){\n                                        {\n                                            await async function(){\n                                                exp_conf[\"features\"]=options.features;\n                                                return exp_conf;\n                                                \n                                            }()\n                                        }\n                                    };\n                                    return exp_conf\n                                })()],[\"imports\",await (async function(){\n                                    if (check_true (preserve_imports)){\n                                        return await to_object(await (async function() {\n                                            let __for_body__356=async function(imp_source) {\n                                                return await (async function(){\n                                                    let __array_op_rval__358=imp_source.symbol;\n                                                     if (__array_op_rval__358 instanceof Function){\n                                                        return await __array_op_rval__358({\n                                                            initializer:await (async function(){\n                                                                 return [\"=:javascript\",\"new function () { return \",imp_source.symbol,\" }\"] \n                                                            })(),symbol:imp_source.symbol,namespace:imp_source.namespace\n                                                        }) \n                                                    } else {\n                                                        return [__array_op_rval__358,{\n                                                            initializer:await (async function(){\n                                                                 return [\"=:javascript\",\"new function () { return \",imp_source.symbol,\" }\"] \n                                                            })(),symbol:imp_source.symbol,namespace:imp_source.namespace\n                                                        }]\n                                                    }\n                                                })()\n                                            };\n                                            let __array__357=[],__elements__355=await values((await resolve_path([\"*env_config*\",\"imports\"],Environment.global_ctx.scope)|| new Object()));\n                                            let __BREAK__FLAG__=false;\n                                            for(let __iter__354 in __elements__355) {\n                                                __array__357.push(await __for_body__356(__elements__355[__iter__354]));\n                                                if(__BREAK__FLAG__) {\n                                                     __array__357.pop();\n                                                    break;\n                                                    \n                                                }\n                                            }return __array__357;\n                                             \n                                        })())\n                                    } else {\n                                        return new Object()\n                                    }\n                                })()],[\"symbols\",await (async function(){\n                                     return [\"=:javascript\",await compile(await to_object(exports),{\n                                        throw_on_error:true\n                                    })] \n                                })()],[\"children_declarations\",await (async function(){\n                                     return [\"=:fn\",[],await clone(children_declarations)] \n                                })()],[\"child_load_order\",await (async function(){\n                                     return await (await get_global(\"each\"))(child_export_order,0) \n                                })()],[\"children\",my_children]] \n                            })())] \n                        })());\n                        output_path=await (async function(){\n                            if (check_true (options.want_buffer)){\n                                return null\n                            } else {\n                                return (options.save_as|| await resolve_path([\"*env_config*\",\"export\",\"save_path\"],Environment.global_ctx.scope))\n                            }\n                        })();\n                        if (check_true (output_path instanceof Function)){\n                            output_path=await (async function(){\n                                let __array_op_rval__359=output_path;\n                                 if (__array_op_rval__359 instanceof Function){\n                                    return await __array_op_rval__359() \n                                } else {\n                                    return [__array_op_rval__359]\n                                }\n                            })()\n                        };\n                        if (check_true ((await not((output_path instanceof String || typeof output_path==='string'))&& output_path))){\n                            throw new EvalError(\"invalid name for target for saving the environment.  Must be a string or function\");\n                            \n                        };\n                        return await async function(){\n                            if (check_true ((want_buffer|| (output_path&& await ends_with_ques_(\".js\",output_path))))) {\n                                {\n                                    (build_headers).push((\"// Build Time: \"+ build_time));\n                                    (build_headers).push((\"// Version: \"+ version_tag));\n                                    (build_headers).push((\"export const DLISP_ENV_VERSION='\"+ version_tag+ \"';\"));\n                                    await env_log(\"saving to: \",output_path);\n                                    return await (await get_global(\"compile_buffer\"))(src,\"init_dlisp\",{\n                                        namespace:namespace,toplevel:true,include_boilerplate:false,verbose:false,bundle:true,want_buffer:want_buffer,imports:await (async function(){\n                                            if (check_true (preserve_imports)){\n                                                return await resolve_path([\"*env_config*\",\"imports\"],Environment.global_ctx.scope)\n                                            }\n                                        })(),js_headers:await (async function(){\n                                             return [await (await get_global(\"show\"))(check_true),await (async function(){\n                                                 return await (await get_global(\"show\"))(get_next_environment_id) \n                                            })(),await (async function(){\n                                                 return await (await get_global(\"show\"))(get_outside_global) \n                                            })(),await (async function(){\n                                                 return await (await get_global(\"show\"))(subtype) \n                                            })(),await (async function(){\n                                                 return await (await get_global(\"show\"))(lisp_writer) \n                                            })(),await (async function(){\n                                                 return await (await get_global(\"show\"))(clone) \n                                            })(),await (async function(){\n                                                 return await (await get_global(\"show\"))(LispSyntaxError) \n                                            })()] \n                                        })(),bundle_options:{\n                                            default_namespace:await resolve_path([\"*env_config*\",\"export\",\"default_namespace\"],Environment.global_ctx.scope)\n                                        },output_file:output_path,include_source:(options.include_source|| await resolve_path([\"*env_config*\",\"export\",\"include_source\"],Environment.global_ctx.scope)),build_headers:build_headers\n                                    })\n                                }\n                            } else if (check_true ((output_path&& await ends_with_ques_(\".lisp\",output_path)))) {\n                                return await (await get_global(\"write_text_file\"))(output_path,await JSON.stringify(src,null,4))\n                            } else {\n                                return src\n                            }\n                        } ()\n                    }],[\"null\",null]]"] 
        })()] 
    })()
}
}
};
;
let imps=null;
;
let rehydrated_children=false;
;
if (check_true ((included_globals&& (namespace==="core")))){
    {
        try {
            included_globals=await included_globals()
        } catch (__exception__286) {
            if (__exception__286 instanceof Error) {
                let e=__exception__286;
                {
                    await console.error("ERROR: ",e)
                }
            }
        };
        if (check_true (await resolve_path(["symbols","compiler"],included_globals))){
            {
                await async function(){
                    Environment.global_ctx.scope["compiler"]=await resolve_path(["symbols","compiler"],included_globals);
                    return Environment.global_ctx.scope;
                    
                }();
                compiler=Environment.global_ctx.scope.compiler
            }
        };
        if (check_true ((included_globals["config"] instanceof Object))){
            {
                await async function(){
                    Environment.global_ctx.scope["*env_config*"]=included_globals.config;
                    return Environment.global_ctx.scope;
                    
                }()
            }
        };
        if (check_true ((included_globals["imports"] instanceof Object))){
            {
                imps=included_globals["imports"];
                if (check_true (imps)){
                    {
                        await (async function() {
                            let __for_body__291=async function(imp_source) {
                                return await async function(){
                                    if (check_true ((imp_source.namespace===namespace))) {
                                        {
                                            return await async function(){
                                                Environment.global_ctx.scope[imp_source.symbol]=imp_source.initializer;
                                                return Environment.global_ctx.scope;
                                                
                                            }()
                                        }
                                    }
                                } ()
                            };
                            let __array__292=[],__elements__290=await values(imps);
                            let __BREAK__FLAG__=false;
                            for(let __iter__289 in __elements__290) {
                                __array__292.push(await __for_body__291(__elements__290[__iter__289]));
                                if(__BREAK__FLAG__) {
                                     __array__292.pop();
                                    break;
                                    
                                }
                            }return __array__292;
                             
                        })()
                    }
                }
            }
        };
        if (check_true ((included_globals["symbols"] instanceof Object))){
            {
                await (async function() {
                    let __for_body__296=async function(symset) {
                        if (check_true ((null==Environment.global_ctx.scope[symset['0']]))){
                            {
                                return await async function(){
                                    Environment.global_ctx.scope[symset['0']]=symset['1'];
                                    return Environment.global_ctx.scope;
                                    
                                }()
                            }
                        }
                    };
                    let __array__297=[],__elements__295=await pairs(included_globals.symbols);
                    let __BREAK__FLAG__=false;
                    for(let __iter__294 in __elements__295) {
                        __array__297.push(await __for_body__296(__elements__295[__iter__294]));
                        if(__BREAK__FLAG__) {
                             __array__297.pop();
                            break;
                            
                        }
                    }return __array__297;
                     
                })()
            }
        };
        if (check_true ((included_globals["definitions"] instanceof Object))){
            {
                await (async function() {
                    let __for_body__301=async function(symset) {
                        if (check_true ((null==Environment.definitions[symset['0']]))){
                            {
                                return await async function(){
                                    Environment.definitions[symset['0']]=symset['1'];
                                    return Environment.definitions;
                                    
                                }()
                            }
                        }
                    };
                    let __array__302=[],__elements__300=await pairs(included_globals.definitions);
                    let __BREAK__FLAG__=false;
                    for(let __iter__299 in __elements__300) {
                        __array__302.push(await __for_body__301(__elements__300[__iter__299]));
                        if(__BREAK__FLAG__) {
                             __array__302.pop();
                            break;
                            
                        }
                    }return __array__302;
                     
                })()
            }
        };
        if (check_true ((included_globals["declarations"] instanceof Object))){
            {
                await (async function() {
                    let __for_body__306=async function(symset) {
                        if (check_true ((null==Environment.declarations[symset['0']]))){
                            {
                                return await async function(){
                                    Environment.declarations[symset['0']]=await (async function(){
                                         return "=:symset.1" 
                                    })();
                                    return Environment.declarations;
                                    
                                }()
                            }
                        }
                    };
                    let __array__307=[],__elements__305=await pairs(included_globals.declarations);
                    let __BREAK__FLAG__=false;
                    for(let __iter__304 in __elements__305) {
                        __array__307.push(await __for_body__306(__elements__305[__iter__304]));
                        if(__BREAK__FLAG__) {
                             __array__307.pop();
                            break;
                            
                        }
                    }return __array__307;
                     
                })()
            }
        };
        if (check_true (Environment.global_ctx.scope["compiler"])){
            {
                await set_compiler(Environment.global_ctx.scope["compiler"])
            }
        };
        if (check_true ((included_globals["children"] instanceof Object))){
            {
                rehydrated_children=true;
                await (async function() {
                    let __for_body__311=async function(childset) {
                        return await (await get_global("create_namespace"))(childset['0'],await (async function(){
                            if (check_true (included_globals.children_declarations[childset['0']])){
                                return included_globals.children_declarations[childset['0']]
                            } else {
                                return new Object()
                            }
                        })(),true)
                    };
                    let __array__312=[],__elements__310=await pairs(included_globals.children);
                    let __BREAK__FLAG__=false;
                    for(let __iter__309 in __elements__310) {
                        __array__312.push(await __for_body__311(__elements__310[__iter__309]));
                        if(__BREAK__FLAG__) {
                             __array__312.pop();
                            break;
                            
                        }
                    }return __array__312;
                     
                })()
            }
        }
    }
};
let clone_to_new=async function(options) {
    let new_env;
    let my_children;
    let my_children_declarations;
    new_env=null;
    my_children=null;
    my_children_declarations=null;
    await env_log(namespace,"cloning: # children: ",await length(children));
    new_env=await (async function(){
         return await dlisp_env({
            env:await (async function(){
                 return await clone(Environment) 
            })(),children:await (async function(){
                 return await clone(children) 
            })(),children_declarations:await (async function(){
                 return await clone(children_declarations) 
            })()
        }) 
    })();
    await env_log(namespace,"constructed: ",await new_env["id"]());
    return new_env
};
;
let export_symbol_set=async function(options) {
    let __collector;
    let __result;
    let __action;
    __collector=[];
    __result=null;
    __action=async function(symset) {
        return await async function(){
            if (check_true ((options&& options.no_compiler&& (symset['0']==="compiler")))) {
                return null
            } else if (check_true (await starts_with_ques_("$",symset['0']))) {
                return null
            } else if (check_true ((await resolve_path(await (async function(){
                let __array_op_rval__313=symset['0'];
                 if (__array_op_rval__313 instanceof Function){
                    return await __array_op_rval__313("serialize_with_image") 
                } else {
                    return [__array_op_rval__313,"serialize_with_image"]
                }
            })(),Environment.definitions)===false))) {
                return null
            } else if (check_true ((options&& options.do_not_include&& await contains_ques_(symset['0'],options.do_not_include)))) {
                return null
            } else if (check_true ((symset['0']==="*env_skeleton*"))) {
                return await (async function(){
                    let __array_op_rval__314=symset['0'];
                     if (__array_op_rval__314 instanceof Function){
                        return await __array_op_rval__314(await (async function(){
                             return ["=:quotel",Environment.global_ctx.scope["*env_skeleton*"]] 
                        })()) 
                    } else {
                        return [__array_op_rval__314,await (async function(){
                             return ["=:quotel",Environment.global_ctx.scope["*env_skeleton*"]] 
                        })()]
                    }
                })()
            } else if (check_true (await resolve_path(await (async function(){
                let __array_op_rval__315=symset['0'];
                 if (__array_op_rval__315 instanceof Function){
                    return await __array_op_rval__315("initializer") 
                } else {
                    return [__array_op_rval__315,"initializer"]
                }
            })(),Environment.definitions))) {
                {
                    return await (async function(){
                        let __array_op_rval__316=symset['0'];
                         if (__array_op_rval__316 instanceof Function){
                            return await __array_op_rval__316(await (async function(){
                                 return ["=:quotel","placeholder"] 
                            })()) 
                        } else {
                            return [__array_op_rval__316,await (async function(){
                                 return ["=:quotel","placeholder"] 
                            })()]
                        }
                    })()
                }
            } else if (check_true (await (async function(){
                 return await is_regex_ques_(symset['1']) 
            })())) {
                return await (async function(){
                    let __array_op_rval__317=symset['0'];
                     if (__array_op_rval__317 instanceof Function){
                        return await __array_op_rval__317(await (async function(){
                             return ["=:javascript",await (async function(){
                                 return ("/"+ await add(symset['1'].source)+ "/"+ symset['1'].flags) 
                            })()] 
                        })()) 
                    } else {
                        return [__array_op_rval__317,await (async function(){
                             return ["=:javascript",await (async function(){
                                 return ("/"+ await add(symset['1'].source)+ "/"+ symset['1'].flags) 
                            })()] 
                        })()]
                    }
                })()
            } else if (check_true (await (async function(){
                 return await is_date_ques_(symset['1']) 
            })())) {
                return await (async function(){
                    let __array_op_rval__318=symset['0'];
                     if (__array_op_rval__318 instanceof Function){
                        return await __array_op_rval__318(await (async function(){
                             return ["=:javascript",await (async function(){
                                 return ("new Date(\""+ await add(await symset['1']["toJSON"](),"\")")) 
                            })()] 
                        })()) 
                    } else {
                        return [__array_op_rval__318,await (async function(){
                             return ["=:javascript",await (async function(){
                                 return ("new Date(\""+ await add(await symset['1']["toJSON"](),"\")")) 
                            })()] 
                        })()]
                    }
                })()
            } else if (check_true ((null===symset['1']))) {
                return await (async function(){
                    let __array_op_rval__319=symset['0'];
                     if (__array_op_rval__319 instanceof Function){
                        return await __array_op_rval__319(await (async function(){
                             return "=:nil" 
                        })()) 
                    } else {
                        return [__array_op_rval__319,await (async function(){
                             return "=:nil" 
                        })()]
                    }
                })()
            } else if (check_true ((undefined===symset['1']))) {
                return await (async function(){
                    let __array_op_rval__320=symset['0'];
                     if (__array_op_rval__320 instanceof Function){
                        return await __array_op_rval__320(await (async function(){
                             return "=:undefined" 
                        })()) 
                    } else {
                        return [__array_op_rval__320,await (async function(){
                             return "=:undefined" 
                        })()]
                    }
                })()
            } else if (check_true ((symset['1'] instanceof String || typeof symset['1']==='string'))) {
                {
                    return await (async function(){
                        let __array_op_rval__321=symset['0'];
                         if (__array_op_rval__321 instanceof Function){
                            return await __array_op_rval__321(await (async function(){
                                 return await (await get_global("env_encode_string"))(symset['1']) 
                            })()) 
                        } else {
                            return [__array_op_rval__321,await (async function(){
                                 return await (await get_global("env_encode_string"))(symset['1']) 
                            })()]
                        }
                    })()
                }
            } else {
                return await (async function(){
                    let __array_op_rval__322=symset['0'];
                     if (__array_op_rval__322 instanceof Function){
                        return await __array_op_rval__322(symset['1']) 
                    } else {
                        return [__array_op_rval__322,symset['1']]
                    }
                })()
            }
        } ()
    };
    ;
    await (async function() {
        let __for_body__325=async function(__item) {
            __result=await __action(__item);
            if (check_true (__result)){
                return (__collector).push(__result)
            }
        };
        let __array__326=[],__elements__324=await pairs(await (async function(){
             return await clone(Environment.global_ctx.scope) 
        })());
        let __BREAK__FLAG__=false;
        for(let __iter__323 in __elements__324) {
            __array__326.push(await __for_body__325(__elements__324[__iter__323]));
            if(__BREAK__FLAG__) {
                 __array__326.pop();
                break;
                
            }
        }return __array__326;
         
    })();
    return __collector
};
;
let save_env=async function(options) {
    let new_env;
    let my_children;
    let env_constructor;
    let dcomps;
    let version_tag;
    let build_time;
    let build_headers;
    let child_env;
    let want_buffer;
    let comp_buffer;
    let sorted_dependencies;
    let child_export_order;
    let preserve_imports;
    let include_source;
    let exports;
    let src;
    let target_insertion_path;
    let output_path;
    new_env=null;
    my_children=null;
    env_constructor=null;
    dcomps=await (async function(){
         return await (await get_global("date_components"))(new Date()) 
    })();
    options=(options|| new Object());
    version_tag=await (async function(){
        if (check_true (await not(await blank_ques_(opts.version_tag)))){
            return opts.version_tag
        } else {
            return (await (async function(){
                let __array_op_rval__327=dcomps.year;
                 if (__array_op_rval__327 instanceof Function){
                    return await __array_op_rval__327(dcomps.month,dcomps.day,dcomps.hour,dcomps.minute) 
                } else {
                    return [__array_op_rval__327,dcomps.month,dcomps.day,dcomps.hour,dcomps.minute]
                }
            })()).join(".")
        }
    })();
    build_time=await (async function(){
         return await (await get_global("formatted_date"))(new Date()) 
    })();
    build_headers=[];
    child_env=null;
    want_buffer=(options.want_buffer|| false);
    comp_buffer=null;
    sorted_dependencies=await (async function(){
         return await (await get_global("sort_dependencies"))() 
    })();
    child_export_order=null;
    preserve_imports=await (async function(){
        if (check_true ((options&& (options.preserve_imports===false)))){
            return false
        } else {
            return true
        }
    })();
    include_source=false;
    exports=[];
    src=await (async function(){
        if (check_true (await Environment["get_global"].call(Environment,"*env_skeleton*",null))){
            return await clone(await Environment["get_global"].call(Environment,"*env_skeleton*"))
        } else {
            return await (await get_global("reader"))(await (async function(){
                 return await (await get_global("read_text_file"))("./src/environment.lisp") 
            })())
        }
    })();
    target_insertion_path=null;
    output_path=null;
    if (check_true (Environment.global_ctx.scope["*env_skeleton*"])){
        {
            await (await get_global("register_feature"))("*env_skeleton*")
        }
    };
    target_insertion_path=await first(await (async function(){
         return await (await get_global("findpaths"))(await (async function(){
             return "=:included_globals" 
        })(),src) 
    })());
    if (check_true (await not((target_insertion_path instanceof Array)))){
        throw new EvalError("Unable to find the first included_globals symbol");
        
    };
    target_insertion_path=await conj(await chop(target_insertion_path),[2]);
    if (check_true (options.include_source)){
        {
            include_source=true
        }
    };
    await env_log(namespace,"cloning: # children: ",await length(children));
    await env_log(namespace,"preserve_imports: ",preserve_imports);
    exports=await export_symbol_set(await (async function(){
        if (check_true (options.do_not_include)){
            return {
                do_not_include:options.do_not_include
            }
        }
    })());
    child_export_order=await (async function(){
        let __collector;
        let __result;
        let __action;
        __collector=[];
        __result=null;
        __action=async function(cname) {
            if (check_true (await not((cname==="core")))){
                {
                    return await (async function(){
                        let __array_op_rval__328=cname;
                         if (__array_op_rval__328 instanceof Function){
                            return await __array_op_rval__328(children[cname]) 
                        } else {
                            return [__array_op_rval__328,children[cname]]
                        }
                    })()
                }
            }
        };
        ;
        await (async function() {
            let __for_body__331=async function(__item) {
                __result=await __action(__item);
                if (check_true (__result)){
                    return (__collector).push(__result)
                }
            };
            let __array__332=[],__elements__330=sorted_dependencies.namespaces;
            let __BREAK__FLAG__=false;
            for(let __iter__329 in __elements__330) {
                __array__332.push(await __for_body__331(__elements__330[__iter__329]));
                if(__BREAK__FLAG__) {
                     __array__332.pop();
                    break;
                    
                }
            }return __array__332;
             
        })();
        return __collector
    })();
    await console.log("save_env: child_export_order: ",await (async function(){
         return await (await get_global("each"))(child_export_order,0) 
    })());
    my_children=await to_object(await (async function(){
        let __collector;
        let __result;
        let __action;
        __collector=[];
        __result=null;
        __action=async function(child) {
            if (check_true (await resolve_path(await (async function(){
                let __array_op_rval__333=child['0'];
                 if (__array_op_rval__333 instanceof Function){
                    return await __array_op_rval__333("serialize_with_image") 
                } else {
                    return [__array_op_rval__333,"serialize_with_image"]
                }
            })(),children_declarations))){
                {
                    await env_log("checking ",namespace,"checking for: ",await add(child['0'],"/*on_serialization*"));
                    if (check_true (await not(((typeof await add(child['0'],"/*on_serialization*")==="undefined")|| (await Environment["get_global"].call(Environment,await add(child['0'],"/*on_serialization*"),ReferenceError)===ReferenceError))))){
                        {
                            await child['1']["evaluate"].call(child['1'],("("+ child['0']+ "/*on_serialization*)"))
                        }
                    };
                    child_env=await child['1']["compile"].call(child['1'],await child['1']["export_symbol_set"].call(child['1'],await add(new Object(),await (async function(){
                        if (check_true (options.do_not_include)){
                            return {
                                do_not_include:await (async function(){
                                    let comps;
                                    comps=null;
                                    {
                                        let ____collector__334= async function(){
                                            return []
                                        };
                                        let ____result__335= async function(){
                                            return null
                                        };
                                        let ____action__336= async function(){
                                            return async function(symbol) {
                                                return await async function(){
                                                    if (check_true (await contains_ques_("/",symbol))) {
                                                        {
                                                            comps=(symbol).split("/");
                                                            if (check_true ((comps['0']===child['0']))){
                                                                return comps['1']
                                                            }
                                                        }
                                                    } else {
                                                        return symbol
                                                    }
                                                } ()
                                            }
                                        };
                                        {
                                            let __collector=await ____collector__334();
                                            ;
                                            let __result=await ____result__335();
                                            ;
                                            let __action=await ____action__336();
                                            ;
                                            ;
                                            await (async function() {
                                                let __for_body__339=async function(__item) {
                                                    __result=await __action(__item);
                                                    if (check_true (__result)){
                                                        return (__collector).push(__result)
                                                    }
                                                };
                                                let __array__340=[],__elements__338=options.do_not_include;
                                                let __BREAK__FLAG__=false;
                                                for(let __iter__337 in __elements__338) {
                                                    __array__340.push(await __for_body__339(__elements__338[__iter__337]));
                                                    if(__BREAK__FLAG__) {
                                                         __array__340.pop();
                                                        break;
                                                        
                                                    }
                                                }return __array__340;
                                                 
                                            })();
                                            return __collector
                                        }
                                    }
                                })()
                            }
                        } else {
                            return new Object()
                        }
                    })(),{
                        no_compiler:true
                    })),{
                        throw_on_error:true
                    });
                    return await (async function(){
                        let __array_op_rval__341=child['0'];
                         if (__array_op_rval__341 instanceof Function){
                            return await __array_op_rval__341(await (async function(){
                                 return [["=:quotel",child['1'].definitions],await (async function(){
                                     return ["=:quotel",await (async function(){
                                         return ["=:javascript",child_env] 
                                    })()] 
                                })()] 
                            })()) 
                        } else {
                            return [__array_op_rval__341,await (async function(){
                                 return [["=:quotel",child['1'].definitions],await (async function(){
                                     return ["=:quotel",await (async function(){
                                         return ["=:javascript",child_env] 
                                    })()] 
                                })()] 
                            })()]
                        }
                    })()
                }
            }
        };
        ;
        await (async function() {
            let __for_body__344=async function(__item) {
                __result=await __action(__item);
                if (check_true (__result)){
                    return (__collector).push(__result)
                }
            };
            let __array__345=[],__elements__343=child_export_order;
            let __BREAK__FLAG__=false;
            for(let __iter__342 in __elements__343) {
                __array__345.push(await __for_body__344(__elements__343[__iter__342]));
                if(__BREAK__FLAG__) {
                     __array__345.pop();
                    break;
                    
                }
            }return __array__345;
             
        })();
        return __collector
    })());
    await (await get_global("set_path"))(target_insertion_path,src,await (async function(){
         return ["=:fn",[],await to_object(await (async function(){
             return [["definitions",await (async function(){
                 return ["=:quote",await (async function(){
                    if (check_true (options.do_not_include)){
                        return await to_object(await (async function(){
                            let __collector;
                            let __result;
                            let __action;
                            __collector=[];
                            __result=null;
                            __action=async function(defset) {
                                if (check_true (await not(await contains_ques_(defset['0'],options.do_not_include)))){
                                    return await (async function(){
                                        let __array_op_rval__346=defset['0'];
                                         if (__array_op_rval__346 instanceof Function){
                                            return await __array_op_rval__346(defset['1']) 
                                        } else {
                                            return [__array_op_rval__346,defset['1']]
                                        }
                                    })()
                                }
                            };
                            ;
                            await (async function() {
                                let __for_body__349=async function(__item) {
                                    __result=await __action(__item);
                                    if (check_true (__result)){
                                        return (__collector).push(__result)
                                    }
                                };
                                let __array__350=[],__elements__348=await pairs(Environment.definitions);
                                let __BREAK__FLAG__=false;
                                for(let __iter__347 in __elements__348) {
                                    __array__350.push(await __for_body__349(__elements__348[__iter__347]));
                                    if(__BREAK__FLAG__) {
                                         __array__350.pop();
                                        break;
                                        
                                    }
                                }return __array__350;
                                 
                            })();
                            return __collector
                        })())
                    } else {
                        return await clone(Environment.definitions)
                    }
                })()] 
            })()],["declarations",await (async function(){
                 return await clone(Environment.declarations) 
            })()],["config",await (async function(){
                let exp_conf;
                exp_conf=await (async function(){
                     return await clone(Environment.global_ctx.scope["*env_config*"]) 
                })();
                if (check_true (await not(preserve_imports))){
                    {
                        await async function(){
                            exp_conf["imports"]=new Object();
                            return exp_conf;
                            
                        }()
                    }
                };
                if (check_true (options.features)){
                    {
                        await async function(){
                            exp_conf["features"]=options.features;
                            return exp_conf;
                            
                        }()
                    }
                };
                return exp_conf
            })()],["imports",await (async function(){
                if (check_true (preserve_imports)){
                    return await to_object(await (async function() {
                        let __for_body__355=async function(imp_source) {
                            return await (async function(){
                                let __array_op_rval__357=imp_source.symbol;
                                 if (__array_op_rval__357 instanceof Function){
                                    return await __array_op_rval__357({
                                        initializer:await (async function(){
                                             return ["=:javascript","new function () { return ",imp_source.symbol," }"] 
                                        })(),symbol:imp_source.symbol,namespace:imp_source.namespace
                                    }) 
                                } else {
                                    return [__array_op_rval__357,{
                                        initializer:await (async function(){
                                             return ["=:javascript","new function () { return ",imp_source.symbol," }"] 
                                        })(),symbol:imp_source.symbol,namespace:imp_source.namespace
                                    }]
                                }
                            })()
                        };
                        let __array__356=[],__elements__354=await values((await resolve_path(["*env_config*","imports"],Environment.global_ctx.scope)|| new Object()));
                        let __BREAK__FLAG__=false;
                        for(let __iter__353 in __elements__354) {
                            __array__356.push(await __for_body__355(__elements__354[__iter__353]));
                            if(__BREAK__FLAG__) {
                                 __array__356.pop();
                                break;
                                
                            }
                        }return __array__356;
                         
                    })())
                } else {
                    return new Object()
                }
            })()],["symbols",await (async function(){
                 return ["=:javascript",await compile(await to_object(exports),{
                    throw_on_error:true
                })] 
            })()],["children_declarations",await (async function(){
                 return ["=:fn",[],await clone(children_declarations)] 
            })()],["child_load_order",await (async function(){
                 return await (await get_global("each"))(child_export_order,0) 
            })()],["children",my_children]] 
        })())] 
    })());
    output_path=await (async function(){
        if (check_true (options.want_buffer)){
            return null
        } else {
            return (options.save_as|| await resolve_path(["*env_config*","export","save_path"],Environment.global_ctx.scope))
        }
    })();
    if (check_true (output_path instanceof Function)){
        output_path=await (async function(){
            let __array_op_rval__358=output_path;
             if (__array_op_rval__358 instanceof Function){
                return await __array_op_rval__358() 
            } else {
                return [__array_op_rval__358]
            }
        })()
    };
    if (check_true ((await not((output_path instanceof String || typeof output_path==='string'))&& output_path))){
        throw new EvalError("invalid name for target for saving the environment.  Must be a string or function");
        
    };
    return await async function(){
        if (check_true ((want_buffer|| (output_path&& await ends_with_ques_(".js",output_path))))) {
            {
                (build_headers).push(("// Build Time: "+ build_time));
                (build_headers).push(("// Version: "+ version_tag));
                (build_headers).push(("export const DLISP_ENV_VERSION='"+ version_tag+ "';"));
                await env_log("saving to: ",output_path);
                return await (await get_global("compile_buffer"))(src,"init_dlisp",{
                    namespace:namespace,toplevel:true,include_boilerplate:false,verbose:false,bundle:true,want_buffer:want_buffer,imports:await (async function(){
                        if (check_true (preserve_imports)){
                            return await resolve_path(["*env_config*","imports"],Environment.global_ctx.scope)
                        }
                    })(),js_headers:await (async function(){
                         return [await (await get_global("show"))(check_true),await (async function(){
                             return await (await get_global("show"))(get_next_environment_id) 
                        })(),await (async function(){
                             return await (await get_global("show"))(get_outside_global) 
                        })(),await (async function(){
                             return await (await get_global("show"))(subtype) 
                        })(),await (async function(){
                             return await (await get_global("show"))(lisp_writer) 
                        })(),await (async function(){
                             return await (await get_global("show"))(clone) 
                        })(),await (async function(){
                             return await (await get_global("show"))(LispSyntaxError) 
                        })()] 
                    })(),bundle_options:{
                        default_namespace:await resolve_path(["*env_config*","export","default_namespace"],Environment.global_ctx.scope)
                    },output_file:output_path,include_source:(options.include_source|| await resolve_path(["*env_config*","export","include_source"],Environment.global_ctx.scope)),build_headers:build_headers
                })
            }
        } else if (check_true ((output_path&& await ends_with_ques_(".lisp",output_path)))) {
            return await (await get_global("write_text_file"))(output_path,await JSON.stringify(src,null,4))
        } else {
            return src
        }
    } ()
};
;
let reader=async function(text,opts) {    return await async function(){        if (check_true ((undefined==text))) {
            throw new EvalError(("reader: received undefined, text must be a string."));
            
        } else if (check_true (await (await Environment.get_global("not"))((text instanceof String || typeof text==='string')))) {
            throw new EvalError(("reader: received "+ await (await Environment.get_global("sub_type"))(text)+ ": text must be a string."));
            
        } else {
            {
                let output_structure;
                let idx;
                let error_collector;
                let symbol_collector;
                let throw_on_error;
                let line_number;
                let column_number;
                let source_name;
                let len;
                let debugmode;
                let in_buffer;
                let in_code;
                let in_quotes;
                let in_long_text;
                let in_comment;
                let in_single_quote;
                let reading_object;
                let mode;
                let symbol_start;
                let pause_time;
                let cpath;
                let ctx;
                let last_final_column_num;
                let symbol_receiver;
                let add_symbol;
                let local_text;
                let position;
                let read_table;
                let get_char;
                let error;
                let handle_escape_char;
                let process_word;
                let registered_stop_char;
                let handler_stack;
                let handler;
                let c;
                let next_c;
                let depth;
                let stop;
                let processing_time_marker;
                let read_block;
                output_structure=[];
                idx=-1;
                error_collector=[];
                symbol_collector=new Object();
                throw_on_error=await (await Environment.get_global("not"))((opts && opts["suppress_throw_on_error"]));
                line_number=0;
                column_number=0;
                source_name=await (async function(){
                    if (check_true ((opts && opts["source_name"]))){
                        return (opts && opts["source_name"])
                    } else {
                        return "anonymous"
                    }
                })();
                opts=(opts|| new Object());
                len=(await (await Environment.get_global("length"))(text)- 1);
                debugmode=await (async function(){
                     return await async function(){
                        if (check_true ((opts && opts["verbose"]))) {
                            return true
                        } else if (check_true (((opts && opts["verbose"])===false))) {
                            return false
                        } else if (check_true (((await Environment.get_global("__VERBOSITY__"))>6))) {
                            return true
                        } else {
                            return false
                        }
                    } () 
                })();
                in_buffer=(text).split("");
                in_code=0;
                in_quotes=1;
                in_long_text=2;
                in_comment=3;
                in_single_quote=4;
                reading_object=false;
                mode=in_code;
                symbol_start=null;
                pause_time=await (async function(){
                    if (check_true (await (await Environment.get_global("is_number?"))((opts && opts["pause_time"])))){
                        return (opts && opts["pause_time"])
                    } else {
                        return null
                    }
                })();
                cpath=[];
                ctx={
                    scope:{
                        op_chain:[]
                    },parent:null
                };
                last_final_column_num=0;
                symbol_receiver=await (async function(){
                    if (check_true ((opts && opts["symbol_receiver"]) instanceof Function)){
                        return (opts && opts["symbol_receiver"])
                    }
                })();
                add_symbol=async function(symbol,_ctx) {
                    if (check_true (await (await Environment.get_global("not"))(await (await Environment.get_global("ends_with?"))(":",symbol)))){
                        {
                            {
                                let ccol;
                                let cline;
                                let real_sym;
                                ccol=await (async function(){
                                    if (check_true ((column_number===0))){
                                        return (last_final_column_num- (symbol && symbol.length))
                                    } else {
                                        return (column_number- (symbol && symbol.length))
                                    }
                                })();
                                cline=await (async function(){
                                    if (check_true ((column_number===0))){
                                        return (line_number- 1)
                                    } else {
                                        return line_number
                                    }
                                })();
                                real_sym=await (await Environment.get_global("first"))((symbol).split("."));
                                if (check_true ((null==symbol_collector[real_sym]))){
                                    return await async function(){
                                        symbol_collector[real_sym]=await (async function(){
                                             return [await (async function(){
                                                let __array_op_rval__2=cline;
                                                 if (__array_op_rval__2 instanceof Function){
                                                    return await __array_op_rval__2(ccol,await (async function(){
                                                        if (check_true (_ctx)){
                                                            return await (await Environment.get_global("getf_ctx"))(_ctx,"op_chain")
                                                        } else {
                                                            return null
                                                        }
                                                    })(),await (await Environment.get_global("but_last"))(cpath)) 
                                                } else {
                                                    return [__array_op_rval__2,ccol,await (async function(){
                                                        if (check_true (_ctx)){
                                                            return await (await Environment.get_global("getf_ctx"))(_ctx,"op_chain")
                                                        } else {
                                                            return null
                                                        }
                                                    })(),await (await Environment.get_global("but_last"))(cpath)]
                                                }
                                            })()] 
                                        })();
                                        return symbol_collector;
                                        
                                    }()
                                } else {
                                    return (symbol_collector[real_sym]).push(await (async function(){
                                        let __array_op_rval__3=cline;
                                         if (__array_op_rval__3 instanceof Function){
                                            return await __array_op_rval__3(ccol,await (async function(){
                                                if (check_true (_ctx)){
                                                    return await (await Environment.get_global("getf_ctx"))(_ctx,"op_chain")
                                                } else {
                                                    return null
                                                }
                                            })(),await (await Environment.get_global("but_last"))(cpath)) 
                                        } else {
                                            return [__array_op_rval__3,ccol,await (async function(){
                                                if (check_true (_ctx)){
                                                    return await (await Environment.get_global("getf_ctx"))(_ctx,"op_chain")
                                                } else {
                                                    return null
                                                }
                                            })(),await (await Environment.get_global("but_last"))(cpath)]
                                        }
                                    })())
                                }
                            }
                        }
                    }
                };
                local_text=async function() {
                    let start;
                    let end;
                    start=await Math.max(0,(idx- 10));
                    end=await Math.min(await (await Environment.get_global("length"))(in_buffer),(idx+ 10));
                    return (await (await Environment.get_global("slice"))(in_buffer,start,end)).join("")
                };
                position=async function(offset) {
                    return ("line: "+ line_number+ " column: "+ await (async function(){
                        if (check_true (offset)){
                            return (column_number+ offset)
                        } else {
                            return column_number
                        }
                    })())
                };
                read_table=await (await Environment.get_global("add"))(new Object(),await (async function(){
                    if (check_true ((opts && opts["read_table_entries"]))){
                        return (opts && opts["read_table_entries"])
                    } else {
                        return new Object()
                    }
                })(),await ( async function(){
                    let __obj__4=new Object();
                    __obj__4["("]=[")",async function(block,_ctx) {
                        return block
                    }];
                    __obj__4["["]=["]",async function(block,_ctx) {
                        return block
                    }];
                    __obj__4["{"]=["}",async function(block,_ctx) {
                        let obj;
                        let __idx__5= async function(){
                            return -1
                        };
                        let key_mode;
                        let need_colon;
                        let value_mode;
                        let key;
                        let value;
                        let cpos;
                        let state;
                        let block_length;
                        {
                            obj=new Object();
                            let idx=await __idx__5();
                            ;
                            key_mode=0;
                            need_colon=1;
                            value_mode=2;
                            key=null;
                            value=null;
                            cpos=null;
                            state=key_mode;
                            block_length=(await (await Environment.get_global("length"))(block)- 1);
                            reading_object=false;
                            await (async function(){
                                 let __test_condition__6=async function() {
                                    return (idx<block_length)
                                };
                                let __body_ref__7=async function() {
                                    idx+=1;
                                    key=block[idx];
                                    if (check_true (((key instanceof Array)&& ((key && key.length)===2)&& ((key && key["0"])==="=:quotem")&& ((key && key["1"]) instanceof String || typeof (key && key["1"])==='string')))){
                                        {
                                            key=(key && key["1"])
                                        }
                                    };
                                    if (check_true (((key instanceof String || typeof key==='string')&& await (await Environment.get_global("starts_with?"))("=:",key)&& (await (await Environment.get_global("length"))(key)>2)))){
                                        key=await key["substr"].call(key,2)
                                    };
                                    return await async function(){
                                        if (check_true (await (await Environment.get_global("blank?"))(key))) {
                                            return await error("missing object key",("blank or nil key: "+ block[idx]))
                                        } else if (check_true (await (await Environment.get_global("is_number?"))(key))) {
                                            {
                                                idx+=1;
                                                return await async function(){
                                                    obj[key]=block[idx];
                                                    return obj;
                                                    
                                                }()
                                            }
                                        } else if (check_true (((key instanceof String || typeof key==='string')&& await (await Environment.get_global("contains?"))(":",key)&& await (await Environment.get_global("not"))(await (await Environment.get_global("ends_with?"))(":",key))))) {
                                            {
                                                cpos=await key["indexOf"].call(key,":");
                                                value=await key["substr"].call(key,(cpos+ 1));
                                                key=await key["substr"].call(key,0,cpos);
                                                value=await process_word((value).split(""),0,_ctx);
                                                return await async function(){
                                                    obj[key]=value;
                                                    return obj;
                                                    
                                                }()
                                            }
                                        } else {
                                            {
                                                idx+=1;
                                                if (check_true (await (await Environment.get_global("ends_with?"))(":",key))){
                                                    key=await (await Environment.get_global("chop"))(key)
                                                } else {
                                                    {
                                                        if (check_true ((block[idx]===":"))){
                                                            idx+=1
                                                        } else {
                                                            await error("missing colon",("expected colon for: "+ key))
                                                        }
                                                    }
                                                };
                                                return await async function(){
                                                    obj[key]=block[idx];
                                                    return obj;
                                                    
                                                }()
                                            }
                                        }
                                    } ()
                                };
                                let __BREAK__FLAG__=false;
                                while(await __test_condition__6()) {
                                     await __body_ref__7();
                                     if(__BREAK__FLAG__) {
                                         break;
                                        
                                    }
                                } ;
                                
                            })();
                            return obj
                        }
                    },async function() {
                        return reading_object=true
                    }];
                    __obj__4["\""]=["\"",async function(block) {
                        return ["quotes",block]
                    }];
                    return __obj__4;
                    
                })());
                get_char=async function(pos) {
                    return in_buffer[pos]
                };
                error=async function(type,message,offset) {
                    if (check_true (throw_on_error)){
                        throw new LispSyntaxError({
                            message:message,position:await position(offset),pos:{
                                line:line_number,column:(column_number+ (offset|| 0))
                            },depth:depth,local_text:await local_text(),source_name:source_name,type:type
                        });
                        
                    } else {
                        if (check_true ((opts && opts["on_error"]) instanceof Function)){
                            {
                                return await (async function(){
                                    let __array_op_rval__11=(opts && opts["on_error"]);
                                     if (__array_op_rval__11 instanceof Function){
                                        return await __array_op_rval__11({
                                            message:message,position:await position(offset),pos:{
                                                line:line_number,column:(column_number+ (offset|| 0))
                                            },depth:depth,local_text:await local_text(),source_name:source_name,type:type
                                        }) 
                                    } else {
                                        return [__array_op_rval__11,{
                                            message:message,position:await position(offset),pos:{
                                                line:line_number,column:(column_number+ (offset|| 0))
                                            },depth:depth,local_text:await local_text(),source_name:source_name,type:type
                                        }]
                                    }
                                })()
                            }
                        }
                    }
                };
                handle_escape_char=async function(c) {
                    let ccode;
                    ccode=await c["charCodeAt"].call(c,0);
                    return await async function(){
                        if (check_true ((ccode===34))) {
                            return c
                        } else if (check_true ((ccode===92))) {
                            return c
                        } else if (check_true ((c==="t"))) {
                            return await String.fromCharCode(9)
                        } else if (check_true ((c==="n"))) {
                            return await String.fromCharCode(10)
                        } else if (check_true ((c==="r"))) {
                            return await String.fromCharCode(13)
                        } else if (check_true ((c==="f"))) {
                            return c
                        } else if (check_true ((c==="b"))) {
                            return c
                        } else {
                            return c
                        }
                    } ()
                };
                process_word=async function(word_acc,backtick_mode,_ctx) {
                    let word;
                    let word_as_number;
                    word=(word_acc).join("");
                    word_as_number=await Number(word);
                    if (check_true (debugmode)){
                        {
                            await console.log("process_word: ",word,word_as_number,backtick_mode)
                        }
                    };
                    return await async function(){
                        if (check_true (("true"===word))) {
                            return true
                        } else if (check_true (("false"===word))) {
                            return false
                        } else if (check_true ((":"===word))) {
                            return word
                        } else if (check_true ((",@"===word))) {
                            return "=$,@"
                        } else if (check_true (((",#"===word)|| ("##"===word)))) {
                            return "=:##"
                        } else if (check_true (("=$,@"===word))) {
                            return "=$,@"
                        } else if (check_true (("=:##"===word))) {
                            return "=:##"
                        } else if (check_true (await isNaN(word_as_number))) {
                            {
                                return await async function(){
                                    if (check_true ((word==="=:"))) {
                                        {
                                            return "=:"
                                        }
                                    } else if (check_true (((backtick_mode===0)&& await (await Environment.get_global("ends_with?"))(")",word)))) {
                                        {
                                            await error("trailing character","unexpected trailing parenthesis 2");
                                            return ""
                                        }
                                    } else if (check_true (((backtick_mode===0)&& await (await Environment.get_global("ends_with?"))("]",word)))) {
                                        {
                                            await error("trailing character","unexpected trailing bracket 2");
                                            return ""
                                        }
                                    } else if (check_true (await (await Environment.get_global("contains?"))(word,await (async function(){
                                         return ["=:(",await (async function(){
                                             return "=:)" 
                                        })(),await (async function(){
                                             return "=:'" 
                                        })()] 
                                    })()))) {
                                        {
                                            return word
                                        }
                                    } else if (check_true ((backtick_mode===1))) {
                                        return word
                                    } else {
                                        {
                                            if (check_true (symbol_receiver)){
                                                {
                                                    await add_symbol(word,_ctx)
                                                }
                                            };
                                            return await (await Environment.get_global("add"))(await (async function(){
                                                 return "=:" 
                                            })(),word)
                                        }
                                    }
                                } ()
                            }
                        } else if (check_true (await (await Environment.get_global("is_number?"))(word_as_number))) {
                            return word_as_number
                        } else {
                            {
                                console.log("reader: ",await position()," what is this?",word,word_acc,await local_text());
                                return word
                            }
                        }
                    } ()
                };
                registered_stop_char=null;
                handler_stack=[];
                handler=null;
                c=null;
                next_c=null;
                depth=0;
                stop=false;
                processing_time_marker=await Date.now();
                read_block=async function(_depth,_ctx) {
                    let acc;
                    let word_acc;
                    let operator;
                    let old_ctx;
                    let backtick_mode;
                    let escape_mode;
                    let last_c;
                    let block_return;
                    acc=[];
                    word_acc=[];
                    operator=null;
                    old_ctx=null;
                    backtick_mode=0;
                    escape_mode=0;
                    last_c=null;
                    _ctx=_ctx;
                    block_return=null;
                    depth=_depth;
                    if (check_true (pause_time)){
                        if (check_true (((await Date.now()- processing_time_marker)>50))){
                            {
                                await (await Environment.get_global("sleep"))(pause_time);
                                processing_time_marker=await Date.now()
                            }
                        }
                    };
                    await (async function(){
                         let __test_condition__12=async function() {
                            return (await (await Environment.get_global("not"))(stop)&& (idx<len))
                        };
                        let __body_ref__13=async function() {
                            idx+=1;
                            escape_mode=await Math.max(0,(escape_mode- 1));
                            c=await get_char(idx);
                            next_c=await get_char((idx+ 1));
                            if (check_true ((c==="\n"))){
                                {
                                    line_number+=1;
                                    last_final_column_num=column_number;
                                    column_number=0
                                }
                            };
                            if (check_true (debugmode)){
                                {
                                    await console.log(_depth,"  ",c," ",next_c," ",mode,"",escape_mode," ",await (await Environment.get_global("as_lisp"))(acc),await (await Environment.get_global("as_lisp"))(word_acc),(acc && acc.length),(cpath).join("."))
                                }
                            };
                            await async function(){
                                if (check_true (((next_c===undefined)&& await (await Environment.get_global("not"))((await (async function(){
                                    let __targ__14=await (await Environment.get_global("last"))(handler_stack);
                                    if (__targ__14){
                                         return(__targ__14)[0]
                                    } 
                                })()===undefined))&& (await (await Environment.get_global("not"))((c===await (async function(){
                                    let __targ__15=await (await Environment.get_global("last"))(handler_stack);
                                    if (__targ__15){
                                         return(__targ__15)[0]
                                    } 
                                })()))|| ((handler_stack && handler_stack.length)>1))))) {
                                    return await error("premature end",("premature end: expected: "+ await (async function(){
                                        let __targ__16=await (await Environment.get_global("last"))(handler_stack);
                                        if (__targ__16){
                                             return(__targ__16)[0]
                                        } 
                                    })()))
                                } else if (check_true (((next_c===undefined)&& (mode===in_quotes)&& await (await Environment.get_global("not"))((await c["charCodeAt"]()===34))))) {
                                    await error("premature end","premature end: expected: \"")
                                } else if (check_true (((next_c===undefined)&& (mode===in_long_text)&& await (await Environment.get_global("not"))((c==="|"))))) {
                                    await error("premature end","premature end: expected: |")
                                } else if (check_true (((mode===in_code)&& (_depth===1)&& (next_c===")")&& (c===")")))) {
                                    {
                                        await error("trailing character","unexpected trailing parenthesis")
                                    }
                                }
                            } ();
                            await async function(){
                                if (check_true (((c==="\n")&& (mode===in_comment)))) {
                                    {
                                        mode=in_code;
                                        return __BREAK__FLAG__=true;
                                        return
                                    }
                                } else if (check_true (((92===await c["charCodeAt"].call(c,0))&& (mode===in_long_text)))) {
                                    {
                                        (word_acc).push(c);
                                        (word_acc).push(c)
                                    }
                                } else if (check_true (((mode>0)&& (escape_mode===1)&& (92===await c["charCodeAt"].call(c,0))))) {
                                    {
                                        (word_acc).push(c)
                                    }
                                } else if (check_true (((mode>0)&& (92===await c["charCodeAt"].call(c,0))))) {
                                    {
                                        escape_mode=2
                                    }
                                } else if (check_true (((mode>0)&& (escape_mode===1)))) {
                                    {
                                        (word_acc).push(await handle_escape_char(c))
                                    }
                                } else if (check_true (((mode===in_long_text)&& (escape_mode===0)&& (c==="|")))) {
                                    {
                                        acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                        word_acc=[];
                                        mode=in_code;
                                        __BREAK__FLAG__=true;
                                        return
                                    }
                                } else if (check_true (((mode===in_quotes)&& (escape_mode===0)&& (c==="\"")))) {
                                    {
                                        acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                        word_acc=[];
                                        mode=in_code;
                                        __BREAK__FLAG__=true;
                                        return
                                    }
                                } else if (check_true (((mode===in_single_quote)&& (escape_mode===0)&& (c==="'")))) {
                                    {
                                        acc=await (await Environment.get_global("add"))((word_acc).join(""));
                                        word_acc=[];
                                        mode=in_code;
                                        __BREAK__FLAG__=true;
                                        return
                                    }
                                } else if (check_true (((c==="|")&& (mode===in_code)))) {
                                    {
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,null,_ctx));
                                                word_acc=[]
                                            }
                                        };
                                        mode=in_long_text;
                                        block_return=await read_block(await (await Environment.get_global("add"))(_depth,1),_ctx);
                                        if (check_true ((backtick_mode===1))){
                                            {
                                                block_return=await (async function(){
                                                     return ["=:quotem",block_return] 
                                                })();
                                                backtick_mode=0
                                            }
                                        };
                                        (acc).push(block_return)
                                    }
                                } else if (check_true (((c==="\"")&& (escape_mode===0)&& (mode===in_code)))) {
                                    {
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,null,_ctx));
                                                word_acc=[]
                                            }
                                        };
                                        mode=in_quotes;
                                        block_return=await read_block(await (await Environment.get_global("add"))(_depth,1),_ctx);
                                        if (check_true ((backtick_mode===1))){
                                            {
                                                backtick_mode=0
                                            }
                                        };
                                        (acc).push(block_return)
                                    }
                                } else if (check_true (((c==="'")&& (escape_mode===0)&& (mode===in_code)))) {
                                    {
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,null,_ctx));
                                                word_acc=[]
                                            }
                                        };
                                        mode=in_single_quote;
                                        block_return=await read_block(await (await Environment.get_global("add"))(_depth,1),_ctx);
                                        if (check_true ((backtick_mode===1))){
                                            {
                                                backtick_mode=0
                                            }
                                        };
                                        (acc).push(block_return)
                                    }
                                } else if (check_true ((mode===in_comment))) {
                                    false
                                } else if (check_true (((c===";")&& (mode===in_code)))) {
                                    {
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,null,_ctx));
                                                word_acc=[]
                                            }
                                        };
                                        mode=in_comment;
                                        await read_block(await (await Environment.get_global("add"))(_depth,1),_ctx)
                                    }
                                } else if (check_true (((mode===in_code)&& (await (await Environment.get_global("length"))(handler_stack)>0)&& (c===await (async function(){
                                    let __targ__17=await (await Environment.get_global("last"))(handler_stack);
                                    if (__targ__17){
                                         return(__targ__17)[0]
                                    } 
                                })())))) {
                                    {
                                        __BREAK__FLAG__=true;
                                        return
                                    }
                                } else if (check_true (((mode===in_code)&& read_table[c]&& await (await Environment.get_global("first"))(read_table[c])))) {
                                    {
                                        if (check_true (await (async function(){
                                            let __targ__18=read_table[c];
                                            if (__targ__18){
                                                 return(__targ__18)[2]
                                            } 
                                        })())){
                                            {
                                                handler=await (async function(){
                                                    let __targ__19=read_table[c];
                                                    if (__targ__19){
                                                         return(__targ__19)[2]
                                                    } 
                                                })();
                                                await (async function(){
                                                    let __array_op_rval__20=handler;
                                                     if (__array_op_rval__20 instanceof Function){
                                                        return await __array_op_rval__20() 
                                                    } else {
                                                        return [__array_op_rval__20]
                                                    }
                                                })();
                                                handler=null
                                            }
                                        };
                                        (handler_stack).push(read_table[c]);
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,backtick_mode,_ctx));
                                                backtick_mode=0;
                                                word_acc=[]
                                            }
                                        };
                                        old_ctx=_ctx;
                                        _ctx=await (async function(){
                                             return await (await Environment.get_global("new_ctx"))(_ctx) 
                                        })();
                                        (cpath).push(0);
                                        block_return=await read_block(await (await Environment.get_global("add"))(_depth,1),_ctx);
                                        handler=await (async function(){
                                            let __targ__21=(handler_stack).pop();
                                            if (__targ__21){
                                                 return(__targ__21)[1]
                                            } 
                                        })();
                                        block_return=await (async function(){
                                            let __array_op_rval__22=handler;
                                             if (__array_op_rval__22 instanceof Function){
                                                return await __array_op_rval__22(block_return,_ctx) 
                                            } else {
                                                return [__array_op_rval__22,block_return,_ctx]
                                            }
                                        })();
                                        (cpath).pop();
                                        _ctx=old_ctx;
                                        if (check_true (await (await Environment.get_global("not"))((undefined===block_return)))){
                                            {
                                                if (check_true ((backtick_mode===1))){
                                                    {
                                                        block_return=await (async function(){
                                                             return ["=:quotem",block_return] 
                                                        })();
                                                        backtick_mode=0
                                                    }
                                                };
                                                (acc).push(block_return)
                                            }
                                        }
                                    }
                                } else if (check_true (((mode===in_code)&& (c==="`")))) {
                                    {
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                (acc).push(await process_word(word_acc,null,_ctx));
                                                word_acc=[]
                                            }
                                        };
                                        backtick_mode=1
                                    }
                                } else if (check_true (((mode===in_code)&& (c===":")&& ((word_acc && word_acc.length)===0)&& ((acc && acc.length)>0)&& (await (await Environment.get_global("last"))(acc) instanceof String || typeof await (await Environment.get_global("last"))(acc)==='string')))) {
                                    (acc).push(await (await Environment.get_global("add"))((acc).pop(),":"))
                                } else if (check_true (((mode===in_code)&& (last_c===",")&& ((c==="#")|| (c==="@"))))) {
                                    {
                                        (word_acc).push(c);
                                        (acc).push(await process_word(word_acc,null,_ctx));
                                        word_acc=[]
                                    }
                                } else if (check_true (((mode===in_code)&& ((c===" ")|| (await c["charCodeAt"].call(c,0)===10)|| (await c["charCodeAt"].call(c,0)===9)|| ((c===",")&& await (await Environment.get_global("not"))((next_c==="@"))&& await (await Environment.get_global("not"))((next_c==="#"))))))) {
                                    {
                                        if (check_true ((((acc && acc.length)===0)&& ((word_acc && word_acc.length)>0)))){
                                            {
                                                await async function(){
                                                    let __target_obj__23=(_ctx && _ctx["scope"]);
                                                    __target_obj__23["op_chain"]=await (await Environment.get_global("conj"))(await (async function(){
                                                         return await (await Environment.get_global("getf_ctx"))(_ctx,"op_chain") 
                                                    })(),(word_acc).join(""));
                                                    return __target_obj__23;
                                                    
                                                }()
                                            }
                                        };
                                        if (check_true (((word_acc && word_acc.length)>0))){
                                            {
                                                if (check_true ((backtick_mode===1))){
                                                    {
                                                        (acc).push(await process_word(word_acc,backtick_mode,_ctx));
                                                        backtick_mode=0
                                                    }
                                                } else {
                                                    (acc).push(await process_word(word_acc,null,_ctx))
                                                };
                                                word_acc=[]
                                            }
                                        };
                                        (cpath).pop();
                                        (cpath).push(await (await Environment.get_global("length"))(acc))
                                    }
                                } else if (check_true (((mode===in_code)&& (await c["charCodeAt"].call(c,0)===13)))) {
                                    false
                                } else {
                                    {
                                        (word_acc).push(c)
                                    }
                                }
                            } ();
                            column_number+=1;
                            return last_c=c
                        };
                        let __BREAK__FLAG__=false;
                        while(await __test_condition__12()) {
                             await __body_ref__13();
                             if(__BREAK__FLAG__) {
                                 break;
                                
                            }
                        } ;
                        
                    })();
                    if (check_true (((word_acc && word_acc.length)>0))){
                        {
                            (acc).push(await process_word(word_acc,backtick_mode,_ctx));
                            word_acc=[]
                        }
                    };
                    return acc
                };
                if (check_true (debugmode)){
                    {
                        await console.log("read->",in_buffer);
                        await console.log("D  CHAR NC "," M","ESC","ACC","WORDACC","ACCL")
                    }
                };
                output_structure=await read_block(0,ctx);
                if (check_true (debugmode)){
                    {
                        await console.log("read<-",await (async function(){
                             return await clone(output_structure) 
                        })())
                    }
                };
                if (check_true ((opts && opts["symbol_receiver"]))){
                    {
                        await (async function(){
                            let __array_op_rval__24=(opts && opts["symbol_receiver"]);
                             if (__array_op_rval__24 instanceof Function){
                                return await __array_op_rval__24({
                                    source_name:source_name,symbols:symbol_collector
                                }) 
                            } else {
                                return [__array_op_rval__24,{
                                    source_name:source_name,symbols:symbol_collector
                                }]
                            }
                        })()
                    }
                };
                if (check_true (((output_structure instanceof Array)&& (await (await Environment.get_global("length"))(output_structure)>1)))){
                    {
                        (output_structure).unshift(await (async function(){
                             return "=:iprogn" 
                        })());
                        return await (await Environment.get_global("first"))(await (async function(){
                            let __array_op_rval__25=output_structure;
                             if (__array_op_rval__25 instanceof Function){
                                return await __array_op_rval__25() 
                            } else {
                                return [__array_op_rval__25]
                            }
                        })())
                    }
                } else {
                    return await (await Environment.get_global("first"))(output_structure)
                }
            }
        }
    } ()
};
let add_escape_encoding=async function(text) {        if (check_true ((text instanceof String || typeof text==='string'))){            let chars;            let acc;            chars=(text).split("");            acc=[];            await (async function() {                let __for_body__3=async function(c) {                     return  await async function(){                        if (check_true( ((await c["charCodeAt"].call(c,0)===34)))) {                            (acc).push(await String.fromCharCode(92));                             return  (acc).push(c)                        } else  {                             return (acc).push(c)                        }                    } ()                };                let __array__4=[],__elements__2=chars;                let __BREAK__FLAG__=false;                for(let __iter__1 in __elements__2) {                    __array__4.push(await __for_body__3(__elements__2[__iter__1]));                    if(__BREAK__FLAG__) {                         __array__4.pop();                        break;                                            }                }return __array__4;                             })();             return  (acc).join("")        } else {              return text        }    };
let do_deferred_splice=async function(tree) {    let rval;
    let idx;
    let tval;
    let deferred_operator;
    rval=null;
    idx=0;
    tval=null;
    deferred_operator=(["=","$","&","!"]).join("");
    return await async function(){
        if (check_true ((tree instanceof Array))) {
            {
                rval=[];
                await (async function(){
                     let __test_condition__26=async function() {
                        return (idx<(tree && tree.length))
                    };
                    let __body_ref__27=async function() {
                        tval=tree[idx];
                        if (check_true ((tval===deferred_operator))){
                            {
                                idx+=1;
                                tval=tree[idx];
                                rval=await rval["concat"].call(rval,await (async function(){
                                     return await do_deferred_splice(tval) 
                                })())
                            }
                        } else {
                            (rval).push(await (async function(){
                                 return await do_deferred_splice(tval) 
                            })())
                        };
                        return idx+=1
                    };
                    let __BREAK__FLAG__=false;
                    while(await __test_condition__26()) {
                         await __body_ref__27();
                         if(__BREAK__FLAG__) {
                             break;
                            
                        }
                    } ;
                    
                })();
                return rval
            }
        } else if (check_true ((tree instanceof Object))) {
            {
                rval=new Object();
                await (async function() {
                    let __for_body__30=async function(pset) {
                        return await async function(){
                            rval[(pset && pset["0"])]=await (async function(){
                                 return await do_deferred_splice((pset && pset["1"])) 
                            })();
                            return rval;
                            
                        }()
                    };
                    let __array__31=[],__elements__29=await (await Environment.get_global("pairs"))(tree);
                    let __BREAK__FLAG__=false;
                    for(let __iter__28 in __elements__29) {
                        __array__31.push(await __for_body__30(__elements__29[__iter__28]));
                        if(__BREAK__FLAG__) {
                             __array__31.pop();
                            break;
                            
                        }
                    }return __array__31;
                     
                })();
                return rval
            }
        } else {
            return tree
        }
    } ()
};
let safe_access=async function(token,ctx,sanitizer_fn) {    let comps;
    let acc;
    let acc_full;
    let pos;
    let rval;
    comps=null;
    acc=[];
    acc_full=[];
    pos=null;
    rval=null;
    comps=((token && token.name)).split(".");
    if (check_true (((comps && comps.length)===1))){
        return (token && token.name)
    } else {
        {
            await async function(){
                comps[0]=await (async function(){
                    let __array_op_rval__211=sanitizer_fn;
                     if (__array_op_rval__211 instanceof Function){
                        return await __array_op_rval__211((comps && comps["0"])) 
                    } else {
                        return [__array_op_rval__211,(comps && comps["0"])]
                    }
                })();
                return comps;
                
            }();
            await (async function(){
                 let __test_condition__212=async function() {
                    return ((comps && comps.length)>0)
                };
                let __body_ref__213=async function() {
                    (acc).push((comps).shift());
                    return (acc_full).push(await (async function(){
                         return await (await Environment.get_global("expand_dot_accessor"))((acc).join("."),ctx) 
                    })())
                };
                let __BREAK__FLAG__=false;
                while(await __test_condition__212()) {
                     await __body_ref__213();
                     if(__BREAK__FLAG__) {
                         break;
                        
                    }
                } ;
                
            })();
            rval=await (await Environment.get_global("flatten"))(["(",(acc_full).join(" && "),")"]);
            return rval
        }
    }
};
;
let as_lisp=function(obj,depth,max_depth) {
    return  lisp_writer(obj,depth,max_depth,Environment)
};
;
let read_lisp=reader;
;
await async function(){
    Environment.global_ctx.scope["eval"]=eval_exp;
    Environment.global_ctx.scope["reader"]=reader;
    Environment.global_ctx.scope["add_escape_encoding"]=add_escape_encoding;
    Environment.global_ctx.scope["get_outside_global"]=get_outside_global;
    Environment.global_ctx.scope["as_lisp"]=lisp_writer;
    Environment.global_ctx.scope["lisp_writer"]=lisp_writer;
    Environment.global_ctx.scope["clone_to_new"]=clone_to_new;
    Environment.global_ctx.scope["save_env"]=save_env;
    Environment.global_ctx.scope["null"]=null;
    return Environment.global_ctx.scope;
    
}();
if (check_true ((namespace==="core"))){
    {
        await async function(){
            Environment.global_ctx.scope["namespace_declarations"]=function() {
                return children_declarations
            };
            Environment.global_ctx.scope["set_namespace_declaration"]=function(namespace,key,value) {
                return  ( get_global("set_path"))( ( function(){
                    let __array_op_rval__361=namespace;
                     if (__array_op_rval__361 instanceof Function){
                        return  __array_op_rval__361(key) 
                    } else {
                        return [__array_op_rval__361,key]
                    }
                })(),children_declarations,value)
            };
            return Environment.global_ctx.scope;
            
        }()
    }
};
let inlines=await (async function(){
    if (check_true (parent_environment)){
        return await add(new Object(),parent_environment.inlines,await (async function(){
            if (check_true (opts.inlines)){
                return opts.inlines
            } else {
                return new Object()
            }
        })())
    } else {
        return await add(new Object(),await (async function(){
            if (check_true (opts.inlines)){
                return opts.inlines
            } else {
                return new Object()
            }
        })(),await ( async function(){
            let __obj__362=new Object();
            __obj__362["pop"]=async function(args) {
                return ["(",args['0'],")",".","pop()"]
            };
            __obj__362["push"]=async function(args) {
                return ["(",args['0'],")",".push","(",args['1'],")"]
            };
            __obj__362["chomp"]=async function(args) {
                return ["(",args['0'],")",".substr","(",0,",","(",args['0'],".length","-",1,")",")"]
            };
            __obj__362["join"]=async function(args) {
                if (check_true ((args.length===1))){
                    return ["(",args['0'],")",".join","('')"]
                } else {
                    return ["(",args['1'],")",".join","(",args['0'],")"]
                }
            };
            __obj__362["take"]=async function(args) {
                return ["(",args['0'],")",".shift","()"]
            };
            __obj__362["prepend"]=async function(args) {
                return ["(",args['0'],")",".unshift","(",args['1'],")"]
            };
            __obj__362["trim"]=async function(args) {
                return ["(",args['0'],")",".trim()"]
            };
            __obj__362["lowercase"]=async function(args) {
                return ["(",args['0'],")",".toLowerCase()"]
            };
            __obj__362["uppercase"]=async function(args) {
                return ["(",args['0'],")",".toUpperCase()"]
            };
            __obj__362["islice"]=async function(args) {
                return await async function(){
                    if (check_true ((args.length===3))) {
                        return ["(",args['0'],")",".slice(",args['1'],",",args['2'],")"]
                    } else if (check_true ((args.length===2))) {
                        return ["(",args['0'],")",".slice(",args['1'],")"]
                    } else {
                        throw new SyntaxError("slice requires 2 or 3 arguments");
                        
                    }
                } ()
            };
            __obj__362["split_by"]=async function(args) {
                return ["(",args['1'],")",".split","(",args['0'],")"]
            };
            __obj__362["bindf"]=async function(args) {
                return await (async function(){
                    let __array_op_rval__363=args['0'];
                     if (__array_op_rval__363 instanceof Function){
                        return await __array_op_rval__363(".bind(",args['1'],")") 
                    } else {
                        return [__array_op_rval__363,".bind(",args['1'],")"]
                    }
                })()
            };
            __obj__362["is_array?"]=async function(args) {
                return ["(",args['0']," instanceof Array",")"]
            };
            __obj__362["is_object?"]=async function(args) {
                return ["(",args['0']," instanceof Object",")"]
            };
            __obj__362["is_string?"]=async function(args) {
                return ["(",args['0']," instanceof String || typeof ",args['0'],"===","'string'",")"]
            };
            __obj__362["is_function?"]=async function(args) {
                return await (async function(){
                    let __array_op_rval__364=args['0'];
                     if (__array_op_rval__364 instanceof Function){
                        return await __array_op_rval__364(" instanceof Function") 
                    } else {
                        return [__array_op_rval__364," instanceof Function"]
                    }
                })()
            };
            __obj__362["is_element?"]=async function(args) {
                return await (async function(){
                    let __array_op_rval__365=args['0'];
                     if (__array_op_rval__365 instanceof Function){
                        return await __array_op_rval__365(" instanceof Element") 
                    } else {
                        return [__array_op_rval__365," instanceof Element"]
                    }
                })()
            };
            __obj__362["log"]=async function(args) {
                return ["console.log","(",await (async function(){
                     return await map(async function(val,idx,tl) {
                        if (check_true ((idx<(tl- 1)))){
                            return await (async function(){
                                let __array_op_rval__366=val;
                                 if (__array_op_rval__366 instanceof Function){
                                    return await __array_op_rval__366(",") 
                                } else {
                                    return [__array_op_rval__366,","]
                                }
                            })()
                        } else {
                            return await (async function(){
                                let __array_op_rval__367=val;
                                 if (__array_op_rval__367 instanceof Function){
                                    return await __array_op_rval__367() 
                                } else {
                                    return [__array_op_rval__367]
                                }
                            })()
                        }
                    },args) 
                })(),")"]
            };
            __obj__362["reverse"]=async function(args) {
                return ["(",args['0'],")",".slice(0).reverse()"]
            };
            __obj__362["int"]=async function(args) {
                return await async function(){
                    if (check_true ((args.length===1))) {
                        return ["parseInt(",args['0'],")"]
                    } else if (check_true ((args.length===2))) {
                        return ["parseInt(",args['0'],",",args['1'],")"]
                    } else {
                        throw new "SyntaxError"(("invalid number of arguments to int: received "+ args.length));
                        
                    }
                } ()
            };
            __obj__362["float"]=async function(args) {
                return ["parseFloat(",args['0'],")"]
            };
            return __obj__362;
            
        })())
    }
})();
;
await async function(){
    Environment["eval"]=eval_struct;
    Environment["identify"]=subtype;
    Environment["meta_for_symbol"]=meta_for_symbol;
    Environment["set_compiler"]=set_compiler;
    Environment["read_lisp"]=reader;
    Environment["as_lisp"]=as_lisp;
    Environment["symbols"]=symbols;
    Environment["inlines"]=inlines;
    Environment["clone_to_new"]=clone_to_new;
    Environment["export_symbol_set"]=export_symbol_set;
    Environment["save_env"]=save_env;
    Environment["special_operators"]=special_operators;
    Environment["definitions"]=Environment.definitions;
    Environment["declarations"]=Environment.declarations;
    Environment["get_namespace_handle"]=get_namespace_handle;
    Environment["compile"]=compile;
    Environment["evaluate"]=evaluate;
    Environment["evaluate_local"]=evaluate_local;
    Environment["do_deferred_splice"]=do_deferred_splice;
    Environment["id"]=async function() {
        return id
    };
    Environment["set_check_external_env"]=async function(state) {
        check_external_env_default=state;
        return check_external_env_default
    };
    Environment["check_external_env"]=async function() {
        return check_external_env_default
    };
    return Environment;
    
}();
in_boot=false;
let sys_init=Environment.global_ctx.scope["*system_initializer*"];
;
let init=Environment.global_ctx.scope["*initializer*"];
;
if (check_true ((opts.default_namespace&& await not((compiler===unset_compiler))&& children[opts.default_namespace]))){
    {
        await (await get_global("set_namespace"))(opts.default_namespace)
    }
};
if (check_true ((namespace==="core"))){
    {
        let env_ready=Environment.global_ctx.scope["*on_environment_ready*"];
        ;
        await (async function() {
            let __for_body__371=async function(symname) {
                {
                    let it;
                    it=(await not((included_globals&& included_globals.imports[symname]))&& await resolve_path(await (async function(){
                        let __array_op_rval__373=symname;
                         if (__array_op_rval__373 instanceof Function){
                            return await __array_op_rval__373("initializer") 
                        } else {
                            return [__array_op_rval__373,"initializer"]
                        }
                    })(),Environment.definitions));
                    if (check_true (it)){
                        {
                            try {
                                return await async function(){
                                    Environment.global_ctx.scope[symname]=await (async function(){
                                         return await eval_struct(it,new Object(),{
                                            throw_on_error:true
                                        }) 
                                    })();
                                    return Environment.global_ctx.scope;
                                    
                                }()
                            } catch (__exception__374) {
                                if (__exception__374 instanceof Error) {
                                    let e=__exception__374;
                                    {
                                        {
                                            return await console.error("core environment cannot initialize: ",symname,"error:",e)
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        return 
                    }
                }
            };
            let __array__372=[],__elements__370=await keys(Environment.definitions);
            let __BREAK__FLAG__=false;
            for(let __iter__369 in __elements__370) {
                __array__372.push(await __for_body__371(__elements__370[__iter__369]));
                if(__BREAK__FLAG__) {
                     __array__372.pop();
                    break;
                    
                }
            }return __array__372;
             
        })();
        if (check_true (sys_init)){
            {
                (await Environment.eval(await async function(){
                    return sys_init
                }(),null))
            }
        };
        if (check_true ((rehydrated_children&& (included_globals["children"] instanceof Object)))){
            {
                await (async function() {
                    let __for_body__378=async function(childname) {
                        if (check_true (included_globals.children[childname])){
                            {
                                let childset=await (async function(){
                                    let __array_op_rval__380=childname;
                                     if (__array_op_rval__380 instanceof Function){
                                        return await __array_op_rval__380(included_globals.children[childname]) 
                                    } else {
                                        return [__array_op_rval__380,included_globals.children[childname]]
                                    }
                                })();
                                ;
                                let childenv=children[childset['0']];
                                ;
                                let imported_defs=childset['1']['0'];
                                ;
                                if (check_true ((included_globals["imports"] instanceof Object))){
                                    {
                                        imps=included_globals["imports"];
                                        if (check_true (imps)){
                                            {
                                                await (async function() {
                                                    let __for_body__383=async function(imp_source) {
                                                        if (check_true (children[imp_source.namespace])){
                                                            {
                                                                return await set_global((""+ imp_source.namespace+ "/"+ imp_source.symbol),imp_source.initializer)
                                                            }
                                                        }
                                                    };
                                                    let __array__384=[],__elements__382=await values(imps);
                                                    let __BREAK__FLAG__=false;
                                                    for(let __iter__381 in __elements__382) {
                                                        __array__384.push(await __for_body__383(__elements__382[__iter__381]));
                                                        if(__BREAK__FLAG__) {
                                                             __array__384.pop();
                                                            break;
                                                            
                                                        }
                                                    }return __array__384;
                                                     
                                                })()
                                            }
                                        }
                                    }
                                };
                                try {
                                    await async function(){
                                        childset['1'][1]=await childenv["eval"].call(childenv,childset['1']['1'],{
                                            throw_on_error:true
                                        });
                                        return childset['1'];
                                        
                                    }();
                                    return await (async function() {
                                        let __for_body__389=async function(symset) {
                                            if (check_true ((null==await resolve_path(await (async function(){
                                                let __array_op_rval__391=childset['0'];
                                                 if (__array_op_rval__391 instanceof Function){
                                                    return await __array_op_rval__391("context","scope",symset['0']) 
                                                } else {
                                                    return [__array_op_rval__391,"context","scope",symset['0']]
                                                }
                                            })(),children)))){
                                                {
                                                    if (check_true (imported_defs[symset['0']])){
                                                        {
                                                            await (await get_global("set_path"))(await (async function(){
                                                                let __array_op_rval__392=childset['0'];
                                                                 if (__array_op_rval__392 instanceof Function){
                                                                    return await __array_op_rval__392("definitions",symset['0']) 
                                                                } else {
                                                                    return [__array_op_rval__392,"definitions",symset['0']]
                                                                }
                                                            })(),children,imported_defs[symset['0']])
                                                        }
                                                    };
                                                    {
                                                        let it;
                                                        it=await resolve_path(await (async function(){
                                                            let __array_op_rval__393=childset['0'];
                                                             if (__array_op_rval__393 instanceof Function){
                                                                return await __array_op_rval__393("definitions",symset['0'],"initializer") 
                                                            } else {
                                                                return [__array_op_rval__393,"definitions",symset['0'],"initializer"]
                                                            }
                                                        })(),children);
                                                        if (check_true (it)){
                                                            {
                                                                try {
                                                                    return await (await get_global("set_path"))(await (async function(){
                                                                        let __array_op_rval__395=childset['0'];
                                                                         if (__array_op_rval__395 instanceof Function){
                                                                            return await __array_op_rval__395("context","scope",symset['0']) 
                                                                        } else {
                                                                            return [__array_op_rval__395,"context","scope",symset['0']]
                                                                        }
                                                                    })(),children,await childenv["eval"].call(childenv,it))
                                                                } catch (__exception__394) {
                                                                    if (__exception__394 instanceof Error) {
                                                                        let e=__exception__394;
                                                                        {
                                                                            return await console.error("env: unable to evaluate: symbol: ",symset['0'],e)
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        } else {
                                                            return await (await get_global("set_path"))(await (async function(){
                                                                let __array_op_rval__396=childset['0'];
                                                                 if (__array_op_rval__396 instanceof Function){
                                                                    return await __array_op_rval__396("context","scope",symset['0']) 
                                                                } else {
                                                                    return [__array_op_rval__396,"context","scope",symset['0']]
                                                                }
                                                            })(),children,symset['1'])
                                                        }
                                                    }
                                                }
                                            }
                                        };
                                        let __array__390=[],__elements__388=childset['1']['1'];
                                        let __BREAK__FLAG__=false;
                                        for(let __iter__387 in __elements__388) {
                                            __array__390.push(await __for_body__389(__elements__388[__iter__387]));
                                            if(__BREAK__FLAG__) {
                                                 __array__390.pop();
                                                break;
                                                
                                            }
                                        }return __array__390;
                                         
                                    })()
                                } catch (__exception__385) {
                                    if (__exception__385 instanceof Error) {
                                        let e=__exception__385;
                                        {
                                            return await console.error("env: unable to load namespace: ",await (async function(){
                                                 return await clone(childset) 
                                            })())
                                        }
                                    }
                                }
                            }
                        }
                    };
                    let __array__379=[],__elements__377=(included_globals.child_load_order|| []);
                    let __BREAK__FLAG__=false;
                    for(let __iter__376 in __elements__377) {
                        __array__379.push(await __for_body__378(__elements__377[__iter__376]));
                        if(__BREAK__FLAG__) {
                             __array__379.pop();
                            break;
                            
                        }
                    }return __array__379;
                     
                })()
            }
        };
        if (check_true (init)){
            {
                (await Environment.eval(await async function(){
                    return init
                }(),null))
            }
        };
        debugger;
        ;
        await (async function() {
            let __for_body__399=async function(child) {
                return await child["evaluate_local"].call(child,("(try (progn (debug) (if (prop Environment.global_ctx.scope `*system_initializer*) (eval (prop Environment.global_ctx.scope `*system_initializer*))) (if (prop Environment.global_ctx.scope `*initializer*) (eval  (prop Environment.global_ctx.scope `*initializer*)))) (catch Error (e) (progn (console.error *namespace* \"ERROR on initialization:\" e))))"),null,{
                    log_errors:true
                })
            };
            let __array__400=[],__elements__398=await values(children);
            let __BREAK__FLAG__=false;
            for(let __iter__397 in __elements__398) {
                __array__400.push(await __for_body__399(__elements__398[__iter__397]));
                if(__BREAK__FLAG__) {
                     __array__400.pop();
                    break;
                    
                }
            }return __array__400;
             
        })();
        if (check_true (await not(opts.no_start_on_ready))){
            if (check_true (env_ready)){
                {
                    (await Environment.eval(await async function(){
                        return env_ready
                    }(),null))
                }
            }
        }
    }
};
return Environment
};
return globalThis;

}();
return globalThis[symname]
}
}
}
}
await init_dlisp();
let env = await dlisp_env({"default_namespace":"user"});